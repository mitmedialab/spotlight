
Spotlight_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013400  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  08013540  08013540  00023540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013a48  08013a48  00023a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08013a4c  08013a4c  00023a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c0  20000004  08013a50  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  200001c4  08013c10  000301c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000260  08013ca9  00030260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00006510  20000278  08013cba  00030278  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20006788  08013cba  00036788  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030271  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000000b8  20030028  20030028  00040000  2**2
                  ALLOC
 13 MB_MEM2       00000a77  200300e0  200300e0  00040000  2**2
                  ALLOC
 14 .debug_info   0005bec8  00000000  00000000  000302a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000a3ac  00000000  00000000  0008c169  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00003898  00000000  00000000  00096518  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003440  00000000  00000000  00099db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038b4c  00000000  00000000  0009d1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0003a959  00000000  00000000  000d5d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001165bc  00000000  00000000  00110695  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00226c51  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e754  00000000  00000000  00226ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000278 	.word	0x20000278
 800015c:	00000000 	.word	0x00000000
 8000160:	08013528 	.word	0x08013528

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000027c 	.word	0x2000027c
 800017c:	08013528 	.word	0x08013528

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>:
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
//Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
//                                      int motor_pin_3, int motor_pin_4)
Stepper::Stepper(int32_t number_of_steps, 	GPIO_TypeDef* motor_pin_1_port, uint16_t motor_pin_1,
 8000194:	b480      	push	{r7}
 8000196:	b085      	sub	sp, #20
 8000198:	af00      	add	r7, sp, #0
 800019a:	60f8      	str	r0, [r7, #12]
 800019c:	60b9      	str	r1, [r7, #8]
 800019e:	607a      	str	r2, [r7, #4]
 80001a0:	807b      	strh	r3, [r7, #2]
											GPIO_TypeDef* motor_pin_2_port, uint16_t motor_pin_2,
											GPIO_TypeDef* motor_pin_3_port, uint16_t motor_pin_3,
											GPIO_TypeDef* motor_pin_4_port, uint16_t motor_pin_4,
											volatile uint16_t* stop_sensor, uint8_t motor_direction)
{
  this->step_number = 0;    // which step the motor is on
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	2200      	movs	r2, #0
 80001a6:	611a      	str	r2, [r3, #16]
  this->direction = 0;      // motor direction
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	2200      	movs	r2, #0
 80001b2:	649a      	str	r2, [r3, #72]	; 0x48
  this->number_of_steps = number_of_steps; // total number of steps for this motor
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	68ba      	ldr	r2, [r7, #8]
 80001b8:	609a      	str	r2, [r3, #8]

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	887a      	ldrh	r2, [r7, #2]
 80001be:	841a      	strh	r2, [r3, #32]
  this->motor_pin_2 = motor_pin_2;
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	8bba      	ldrh	r2, [r7, #28]
 80001c4:	845a      	strh	r2, [r3, #34]	; 0x22
  this->motor_pin_3 = motor_pin_3;
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80001ca:	849a      	strh	r2, [r3, #36]	; 0x24
  this->motor_pin_4 = motor_pin_4;
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80001d0:	84da      	strh	r2, [r3, #38]	; 0x26

  // Arduino ports for the motor control pin connection:
  this->motor_pin_1_port = motor_pin_1_port;
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	687a      	ldr	r2, [r7, #4]
 80001d6:	62da      	str	r2, [r3, #44]	; 0x2c
  this->motor_pin_2_port = motor_pin_2_port;
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	69ba      	ldr	r2, [r7, #24]
 80001dc:	631a      	str	r2, [r3, #48]	; 0x30
  this->motor_pin_3_port = motor_pin_3_port;
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	6a3a      	ldr	r2, [r7, #32]
 80001e2:	635a      	str	r2, [r3, #52]	; 0x34
  this->motor_pin_4_port = motor_pin_4_port;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80001e8:	639a      	str	r2, [r3, #56]	; 0x38

  this->motor_dir = motor_direction;
 80001ea:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
//  pinMode(this->motor_pin_2, OUTPUT);
//  pinMode(this->motor_pin_3, OUTPUT);
//  pinMode(this->motor_pin_4, OUTPUT);

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	2200      	movs	r2, #0
 80001f8:	851a      	strh	r2, [r3, #40]	; 0x28

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	2204      	movs	r2, #4
 80001fe:	60da      	str	r2, [r3, #12]

  // pin that is continously updated via DMA on the magnetic end stop value (0 means the magnet is directly aligned with the sensor)
  this->end_stop = stop_sensor;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000204:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	4618      	mov	r0, r3
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <_ZN7Stepper8setSpeedEl>:

/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	689b      	ldr	r3, [r3, #8]
 8000222:	4a07      	ldr	r2, [pc, #28]	; (8000240 <_ZN7Stepper8setSpeedEl+0x2c>)
 8000224:	fb92 f2f3 	sdiv	r2, r2, r3
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	fb92 f3f3 	sdiv	r3, r2, r3
 800022e:	461a      	mov	r2, r3
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	605a      	str	r2, [r3, #4]
}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	03938700 	.word	0x03938700

08000244 <_ZN7Stepper12setStepBoundEl>:
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */

void Stepper::setStepBound(int32_t max_step){
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
	this->max_step = max_step;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	615a      	str	r2, [r3, #20]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr

08000260 <_ZN7Stepper4stepEi>:

uint32_t Stepper::step(int steps_to_move)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
	// break if requested steps exceed maximum range
	if( ((this->step_tracker + steps_to_move) > this->max_step) || (this->step_tracker - steps_to_move) < 0 ){
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	699a      	ldr	r2, [r3, #24]
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	4413      	add	r3, r2
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	6952      	ldr	r2, [r2, #20]
 8000276:	4293      	cmp	r3, r2
 8000278:	d901      	bls.n	800027e <_ZN7Stepper4stepEi+0x1e>
		return 0;
 800027a:	2300      	movs	r3, #0
 800027c:	e077      	b.n	800036e <_ZN7Stepper4stepEi+0x10e>
	}

	this->step_tracker += steps_to_move;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	699a      	ldr	r2, [r3, #24]
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	441a      	add	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	619a      	str	r2, [r3, #24]

	// compensate in case motor direction is flipped
	steps_to_move = steps_to_move * this->motor_dir;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 8000290:	461a      	mov	r2, r3
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	fb02 f303 	mul.w	r3, r2, r3
 8000298:	603b      	str	r3, [r7, #0]

	uint32_t steps_left = abs(steps_to_move);  // how many steps to take
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	2b00      	cmp	r3, #0
 800029e:	bfb8      	it	lt
 80002a0:	425b      	neglt	r3, r3
 80002a2:	60fb      	str	r3, [r7, #12]
//	uint32_t steps_left;
  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) { this->direction = 1; }
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	dd02      	ble.n	80002b0 <_ZN7Stepper4stepEi+0x50>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
  if (steps_to_move < 0) { this->direction = 0; }
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	da02      	bge.n	80002bc <_ZN7Stepper4stepEi+0x5c>
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]


  // decrement the number of steps, moving one step each time:
  while (steps_left > 0)
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d054      	beq.n	800036c <_ZN7Stepper4stepEi+0x10c>
  {
		  //    unsigned long now = micros();
	  uint32_t now = __HAL_TIM_GET_COUNTER(&htim2);
 80002c2:	4b2d      	ldr	r3, [pc, #180]	; (8000378 <_ZN7Stepper4stepEi+0x118>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002c8:	60bb      	str	r3, [r7, #8]
    // move only if the appropriate delay has passed:
     if (now - this->last_step_time >= this->step_delay)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002ce:	68ba      	ldr	r2, [r7, #8]
 80002d0:	1ad2      	subs	r2, r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d3f0      	bcc.n	80002bc <_ZN7Stepper4stepEi+0x5c>
    {
      // get the timeStamp of when you stepped:
      this->last_step_time = now;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	68ba      	ldr	r2, [r7, #8]
 80002de:	649a      	str	r2, [r3, #72]	; 0x48
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d10e      	bne.n	8000306 <_ZN7Stepper4stepEi+0xa6>
      {
        this->step_number++;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	1c5a      	adds	r2, r3, #1
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	611a      	str	r2, [r3, #16]
        if (this->step_number == this->number_of_steps) {
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	691a      	ldr	r2, [r3, #16]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d110      	bne.n	8000320 <_ZN7Stepper4stepEi+0xc0>
          this->step_number = 0;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
 8000304:	e00c      	b.n	8000320 <_ZN7Stepper4stepEi+0xc0>
        }
      }
      else
      {
        if (this->step_number == 0) {
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d103      	bne.n	8000316 <_ZN7Stepper4stepEi+0xb6>
          this->step_number = this->number_of_steps;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	689a      	ldr	r2, [r3, #8]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	611a      	str	r2, [r3, #16]
        }
        this->step_number--;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	691b      	ldr	r3, [r3, #16]
 800031a:	1e5a      	subs	r2, r3, #1
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	611a      	str	r2, [r3, #16]
      }
      // decrement the steps left:
      steps_left--;
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	3b01      	subs	r3, #1
 8000324:	60fb      	str	r3, [r7, #12]
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	68db      	ldr	r3, [r3, #12]
 800032a:	2b05      	cmp	r3, #5
 800032c:	d110      	bne.n	8000350 <_ZN7Stepper4stepEi+0xf0>
        stepMotor(this->step_number % 10);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	691a      	ldr	r2, [r3, #16]
 8000332:	4b12      	ldr	r3, [pc, #72]	; (800037c <_ZN7Stepper4stepEi+0x11c>)
 8000334:	fb83 1302 	smull	r1, r3, r3, r2
 8000338:	1099      	asrs	r1, r3, #2
 800033a:	17d3      	asrs	r3, r2, #31
 800033c:	1ac9      	subs	r1, r1, r3
 800033e:	460b      	mov	r3, r1
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	440b      	add	r3, r1
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	1ad1      	subs	r1, r2, r3
 8000348:	6878      	ldr	r0, [r7, #4]
 800034a:	f000 f819 	bl	8000380 <_ZN7Stepper9stepMotorEi>
 800034e:	e7b5      	b.n	80002bc <_ZN7Stepper4stepEi+0x5c>
      else
        stepMotor(this->step_number % 4);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	691b      	ldr	r3, [r3, #16]
 8000354:	425a      	negs	r2, r3
 8000356:	f003 0303 	and.w	r3, r3, #3
 800035a:	f002 0203 	and.w	r2, r2, #3
 800035e:	bf58      	it	pl
 8000360:	4253      	negpl	r3, r2
 8000362:	4619      	mov	r1, r3
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f000 f80b 	bl	8000380 <_ZN7Stepper9stepMotorEi>
  while (steps_left > 0)
 800036a:	e7a7      	b.n	80002bc <_ZN7Stepper4stepEi+0x5c>
    }
  }

  return 1;
 800036c:	2301      	movs	r3, #1
}
 800036e:	4618      	mov	r0, r3
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20004f6c 	.word	0x20004f6c
 800037c:	66666667 	.word	0x66666667

08000380 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  if (this->pin_count == 2) {
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	2b02      	cmp	r3, #2
 8000390:	d152      	bne.n	8000438 <_ZN7Stepper9stepMotorEi+0xb8>
    switch (thisStep) {
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	2b03      	cmp	r3, #3
 8000396:	d84f      	bhi.n	8000438 <_ZN7Stepper9stepMotorEi+0xb8>
 8000398:	a201      	add	r2, pc, #4	; (adr r2, 80003a0 <_ZN7Stepper9stepMotorEi+0x20>)
 800039a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039e:	bf00      	nop
 80003a0:	080003b1 	.word	0x080003b1
 80003a4:	080003d3 	.word	0x080003d3
 80003a8:	080003f5 	.word	0x080003f5
 80003ac:	08000417 	.word	0x08000417
      case 0:  // 01
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	8c1b      	ldrh	r3, [r3, #32]
 80003b8:	2200      	movs	r2, #0
 80003ba:	4619      	mov	r1, r3
 80003bc:	f004 fd2a 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80003c8:	2201      	movs	r2, #1
 80003ca:	4619      	mov	r1, r3
 80003cc:	f004 fd22 	bl	8004e14 <HAL_GPIO_WritePin>
      break;
 80003d0:	e032      	b.n	8000438 <_ZN7Stepper9stepMotorEi+0xb8>
      case 1:  // 11
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	8c1b      	ldrh	r3, [r3, #32]
 80003da:	2201      	movs	r2, #1
 80003dc:	4619      	mov	r1, r3
 80003de:	f004 fd19 	bl	8004e14 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80003ea:	2201      	movs	r2, #1
 80003ec:	4619      	mov	r1, r3
 80003ee:	f004 fd11 	bl	8004e14 <HAL_GPIO_WritePin>
      break;
 80003f2:	e021      	b.n	8000438 <_ZN7Stepper9stepMotorEi+0xb8>
      case 2:  // 10
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	8c1b      	ldrh	r3, [r3, #32]
 80003fc:	2201      	movs	r2, #1
 80003fe:	4619      	mov	r1, r3
 8000400:	f004 fd08 	bl	8004e14 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800040c:	2200      	movs	r2, #0
 800040e:	4619      	mov	r1, r3
 8000410:	f004 fd00 	bl	8004e14 <HAL_GPIO_WritePin>
      break;
 8000414:	e010      	b.n	8000438 <_ZN7Stepper9stepMotorEi+0xb8>
      case 3:  // 00
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	8c1b      	ldrh	r3, [r3, #32]
 800041e:	2200      	movs	r2, #0
 8000420:	4619      	mov	r1, r3
 8000422:	f004 fcf7 	bl	8004e14 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800042e:	2200      	movs	r2, #0
 8000430:	4619      	mov	r1, r3
 8000432:	f004 fcef 	bl	8004e14 <HAL_GPIO_WritePin>
      break;
 8000436:	bf00      	nop
    }
  }
  if (this->pin_count == 4) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	2b04      	cmp	r3, #4
 800043e:	f040 8093 	bne.w	8000568 <_ZN7Stepper9stepMotorEi+0x1e8>
    switch (thisStep) {
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	2b03      	cmp	r3, #3
 8000446:	f200 808f 	bhi.w	8000568 <_ZN7Stepper9stepMotorEi+0x1e8>
 800044a:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <_ZN7Stepper9stepMotorEi+0xd0>)
 800044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000450:	08000461 	.word	0x08000461
 8000454:	080004a3 	.word	0x080004a3
 8000458:	080004e5 	.word	0x080004e5
 800045c:	08000527 	.word	0x08000527
      case 0:  // 1010
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	8c1b      	ldrh	r3, [r3, #32]
 8000468:	2201      	movs	r2, #1
 800046a:	4619      	mov	r1, r3
 800046c:	f004 fcd2 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000478:	2200      	movs	r2, #0
 800047a:	4619      	mov	r1, r3
 800047c:	f004 fcca 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000488:	2201      	movs	r2, #1
 800048a:	4619      	mov	r1, r3
 800048c:	f004 fcc2 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000498:	2200      	movs	r2, #0
 800049a:	4619      	mov	r1, r3
 800049c:	f004 fcba 	bl	8004e14 <HAL_GPIO_WritePin>
      break;
 80004a0:	e062      	b.n	8000568 <_ZN7Stepper9stepMotorEi+0x1e8>
      case 1:  // 0110
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	8c1b      	ldrh	r3, [r3, #32]
 80004aa:	2200      	movs	r2, #0
 80004ac:	4619      	mov	r1, r3
 80004ae:	f004 fcb1 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80004ba:	2201      	movs	r2, #1
 80004bc:	4619      	mov	r1, r3
 80004be:	f004 fca9 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80004ca:	2201      	movs	r2, #1
 80004cc:	4619      	mov	r1, r3
 80004ce:	f004 fca1 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80004da:	2200      	movs	r2, #0
 80004dc:	4619      	mov	r1, r3
 80004de:	f004 fc99 	bl	8004e14 <HAL_GPIO_WritePin>
      break;
 80004e2:	e041      	b.n	8000568 <_ZN7Stepper9stepMotorEi+0x1e8>
      case 2:  //0101
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	8c1b      	ldrh	r3, [r3, #32]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4619      	mov	r1, r3
 80004f0:	f004 fc90 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80004fc:	2201      	movs	r2, #1
 80004fe:	4619      	mov	r1, r3
 8000500:	f004 fc88 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800050c:	2200      	movs	r2, #0
 800050e:	4619      	mov	r1, r3
 8000510:	f004 fc80 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800051c:	2201      	movs	r2, #1
 800051e:	4619      	mov	r1, r3
 8000520:	f004 fc78 	bl	8004e14 <HAL_GPIO_WritePin>
      break;
 8000524:	e020      	b.n	8000568 <_ZN7Stepper9stepMotorEi+0x1e8>
      case 3:  //1001
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	8c1b      	ldrh	r3, [r3, #32]
 800052e:	2201      	movs	r2, #1
 8000530:	4619      	mov	r1, r3
 8000532:	f004 fc6f 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800053e:	2200      	movs	r2, #0
 8000540:	4619      	mov	r1, r3
 8000542:	f004 fc67 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f004 fc5f 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800055e:	2201      	movs	r2, #1
 8000560:	4619      	mov	r1, r3
 8000562:	f004 fc57 	bl	8004e14 <HAL_GPIO_WritePin>
      break;
 8000566:	bf00      	nop
    }
  }

  if (this->pin_count == 5) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	2b05      	cmp	r3, #5
 800056e:	f040 81b5 	bne.w	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
    switch (thisStep) {
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	2b09      	cmp	r3, #9
 8000576:	f200 81b1 	bhi.w	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
 800057a:	a201      	add	r2, pc, #4	; (adr r2, 8000580 <_ZN7Stepper9stepMotorEi+0x200>)
 800057c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000580:	080005a9 	.word	0x080005a9
 8000584:	080005fb 	.word	0x080005fb
 8000588:	0800064d 	.word	0x0800064d
 800058c:	0800069f 	.word	0x0800069f
 8000590:	080006f1 	.word	0x080006f1
 8000594:	08000743 	.word	0x08000743
 8000598:	08000795 	.word	0x08000795
 800059c:	080007e7 	.word	0x080007e7
 80005a0:	08000839 	.word	0x08000839
 80005a4:	0800088b 	.word	0x0800088b
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	8c1b      	ldrh	r3, [r3, #32]
 80005b0:	2200      	movs	r2, #0
 80005b2:	4619      	mov	r1, r3
 80005b4:	f004 fc2e 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80005c0:	2201      	movs	r2, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	f004 fc26 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	f004 fc1e 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80005e0:	2200      	movs	r2, #0
 80005e2:	4619      	mov	r1, r3
 80005e4:	f004 fc16 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80005f0:	2201      	movs	r2, #1
 80005f2:	4619      	mov	r1, r3
 80005f4:	f004 fc0e 	bl	8004e14 <HAL_GPIO_WritePin>
        break;
 80005f8:	e170      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	8c1b      	ldrh	r3, [r3, #32]
 8000602:	2200      	movs	r2, #0
 8000604:	4619      	mov	r1, r3
 8000606:	f004 fc05 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000612:	2201      	movs	r2, #1
 8000614:	4619      	mov	r1, r3
 8000616:	f004 fbfd 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000622:	2200      	movs	r2, #0
 8000624:	4619      	mov	r1, r3
 8000626:	f004 fbf5 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000632:	2200      	movs	r2, #0
 8000634:	4619      	mov	r1, r3
 8000636:	f004 fbed 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	f004 fbe5 	bl	8004e14 <HAL_GPIO_WritePin>
        break;
 800064a:	e147      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	8c1b      	ldrh	r3, [r3, #32]
 8000654:	2200      	movs	r2, #0
 8000656:	4619      	mov	r1, r3
 8000658:	f004 fbdc 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000664:	2201      	movs	r2, #1
 8000666:	4619      	mov	r1, r3
 8000668:	f004 fbd4 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000674:	2200      	movs	r2, #0
 8000676:	4619      	mov	r1, r3
 8000678:	f004 fbcc 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000684:	2201      	movs	r2, #1
 8000686:	4619      	mov	r1, r3
 8000688:	f004 fbc4 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000694:	2201      	movs	r2, #1
 8000696:	4619      	mov	r1, r3
 8000698:	f004 fbbc 	bl	8004e14 <HAL_GPIO_WritePin>
        break;
 800069c:	e11e      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	8c1b      	ldrh	r3, [r3, #32]
 80006a6:	2200      	movs	r2, #0
 80006a8:	4619      	mov	r1, r3
 80006aa:	f004 fbb3 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80006b6:	2201      	movs	r2, #1
 80006b8:	4619      	mov	r1, r3
 80006ba:	f004 fbab 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80006c6:	2200      	movs	r2, #0
 80006c8:	4619      	mov	r1, r3
 80006ca:	f004 fba3 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80006d6:	2201      	movs	r2, #1
 80006d8:	4619      	mov	r1, r3
 80006da:	f004 fb9b 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	f004 fb93 	bl	8004e14 <HAL_GPIO_WritePin>
        break;
 80006ee:	e0f5      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	8c1b      	ldrh	r3, [r3, #32]
 80006f8:	2201      	movs	r2, #1
 80006fa:	4619      	mov	r1, r3
 80006fc:	f004 fb8a 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000708:	2201      	movs	r2, #1
 800070a:	4619      	mov	r1, r3
 800070c:	f004 fb82 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000718:	2200      	movs	r2, #0
 800071a:	4619      	mov	r1, r3
 800071c:	f004 fb7a 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000728:	2201      	movs	r2, #1
 800072a:	4619      	mov	r1, r3
 800072c:	f004 fb72 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000738:	2200      	movs	r2, #0
 800073a:	4619      	mov	r1, r3
 800073c:	f004 fb6a 	bl	8004e14 <HAL_GPIO_WritePin>
        break;
 8000740:	e0cc      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	8c1b      	ldrh	r3, [r3, #32]
 800074a:	2201      	movs	r2, #1
 800074c:	4619      	mov	r1, r3
 800074e:	f004 fb61 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800075a:	2200      	movs	r2, #0
 800075c:	4619      	mov	r1, r3
 800075e:	f004 fb59 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	f004 fb51 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800077a:	2201      	movs	r2, #1
 800077c:	4619      	mov	r1, r3
 800077e:	f004 fb49 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800078a:	2200      	movs	r2, #0
 800078c:	4619      	mov	r1, r3
 800078e:	f004 fb41 	bl	8004e14 <HAL_GPIO_WritePin>
        break;
 8000792:	e0a3      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	8c1b      	ldrh	r3, [r3, #32]
 800079c:	2201      	movs	r2, #1
 800079e:	4619      	mov	r1, r3
 80007a0:	f004 fb38 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80007ac:	2200      	movs	r2, #0
 80007ae:	4619      	mov	r1, r3
 80007b0:	f004 fb30 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007bc:	2201      	movs	r2, #1
 80007be:	4619      	mov	r1, r3
 80007c0:	f004 fb28 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	f004 fb20 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80007dc:	2200      	movs	r2, #0
 80007de:	4619      	mov	r1, r3
 80007e0:	f004 fb18 	bl	8004e14 <HAL_GPIO_WritePin>
        break;
 80007e4:	e07a      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	8c1b      	ldrh	r3, [r3, #32]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	f004 fb0f 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80007fe:	2200      	movs	r2, #0
 8000800:	4619      	mov	r1, r3
 8000802:	f004 fb07 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800080e:	2201      	movs	r2, #1
 8000810:	4619      	mov	r1, r3
 8000812:	f004 faff 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800081e:	2200      	movs	r2, #0
 8000820:	4619      	mov	r1, r3
 8000822:	f004 faf7 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	f004 faef 	bl	8004e14 <HAL_GPIO_WritePin>
        break;
 8000836:	e051      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	8c1b      	ldrh	r3, [r3, #32]
 8000840:	2201      	movs	r2, #1
 8000842:	4619      	mov	r1, r3
 8000844:	f004 fae6 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000850:	2200      	movs	r2, #0
 8000852:	4619      	mov	r1, r3
 8000854:	f004 fade 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000860:	2201      	movs	r2, #1
 8000862:	4619      	mov	r1, r3
 8000864:	f004 fad6 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	f004 face 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000880:	2201      	movs	r2, #1
 8000882:	4619      	mov	r1, r3
 8000884:	f004 fac6 	bl	8004e14 <HAL_GPIO_WritePin>
        break;
 8000888:	e028      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	8c1b      	ldrh	r3, [r3, #32]
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	f004 fabd 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	f004 fab5 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008b2:	2201      	movs	r2, #1
 80008b4:	4619      	mov	r1, r3
 80008b6:	f004 faad 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80008c2:	2200      	movs	r2, #0
 80008c4:	4619      	mov	r1, r3
 80008c6:	f004 faa5 	bl	8004e14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80008d2:	2201      	movs	r2, #1
 80008d4:	4619      	mov	r1, r3
 80008d6:	f004 fa9d 	bl	8004e14 <HAL_GPIO_WritePin>
        break;
 80008da:	bf00      	nop
    }
  }
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <_ZN7Stepper8honeAxisEv>:

void Stepper::honeAxis(void){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

	// set step tracker to max step to bypass over step protection in step()
	this->step_tracker = this->max_step;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	461a      	mov	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	619a      	str	r2, [r3, #24]

	while(*(this->end_stop) != 0){
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	bf14      	ite	ne
 8000902:	2301      	movne	r3, #1
 8000904:	2300      	moveq	r3, #0
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d008      	beq.n	800091e <_ZN7Stepper8honeAxisEv+0x3a>
		// give time for the end stop value to be updated by the ADC via DMA
		//todo: optimize this to make this quicker (i.e., increase ADC sample frequency)
		HAL_Delay(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f002 fa61 	bl	8002dd4 <HAL_Delay>



		step(-1);
 8000912:	f04f 31ff 	mov.w	r1, #4294967295
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fca2 	bl	8000260 <_ZN7Stepper4stepEi>
	while(*(this->end_stop) != 0){
 800091c:	e7eb      	b.n	80008f6 <_ZN7Stepper8honeAxisEv+0x12>
	}

	step_tracker = 0;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <_ZN7Stepper9setAbsPosEl>:

void Stepper::setAbsPos(int32_t step_cnt){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
	this->steps_to_move = step_cnt - this->step_tracker;
 8000936:	683a      	ldr	r2, [r7, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	1ad2      	subs	r2, r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	61da      	str	r2, [r3, #28]
	step(this->steps_to_move);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4619      	mov	r1, r3
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff fc89 	bl	8000260 <_ZN7Stepper4stepEi>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000956:	b480      	push	{r7}
 8000958:	b085      	sub	sp, #20
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800095e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000964:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4313      	orrs	r3, r2
 800096c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800096e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4013      	ands	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800098e:	463b      	mov	r3, r7
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800099e:	4b3f      	ldr	r3, [pc, #252]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009a0:	4a3f      	ldr	r2, [pc, #252]	; (8000aa0 <MX_ADC1_Init+0x118>)
 80009a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80009a4:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009a6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80009aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ac:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009b8:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009be:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009c0:	2208      	movs	r2, #8
 80009c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009c4:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009ca:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80009d0:	4b32      	ldr	r3, [pc, #200]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009d2:	2204      	movs	r2, #4
 80009d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009d6:	4b31      	ldr	r3, [pc, #196]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e4:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009ea:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009f8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009fa:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a02:	4826      	ldr	r0, [pc, #152]	; (8000a9c <MX_ADC1_Init+0x114>)
 8000a04:	f002 fbf0 	bl	80031e8 <HAL_ADC_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a0e:	f001 fbdf 	bl	80021d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a12:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <MX_ADC1_Init+0x11c>)
 8000a14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a16:	2306      	movs	r3, #6
 8000a18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a1e:	237f      	movs	r3, #127	; 0x7f
 8000a20:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a22:	2304      	movs	r3, #4
 8000a24:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481b      	ldr	r0, [pc, #108]	; (8000a9c <MX_ADC1_Init+0x114>)
 8000a30:	f002 ff86 	bl	8003940 <HAL_ADC_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000a3a:	f001 fbc9 	bl	80021d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_ADC1_Init+0x120>)
 8000a40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a42:	230c      	movs	r3, #12
 8000a44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4814      	ldr	r0, [pc, #80]	; (8000a9c <MX_ADC1_Init+0x114>)
 8000a4c:	f002 ff78 	bl	8003940 <HAL_ADC_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000a56:	f001 fbbb 	bl	80021d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_ADC1_Init+0x124>)
 8000a5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a5e:	2312      	movs	r3, #18
 8000a60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	4619      	mov	r1, r3
 8000a66:	480d      	ldr	r0, [pc, #52]	; (8000a9c <MX_ADC1_Init+0x114>)
 8000a68:	f002 ff6a 	bl	8003940 <HAL_ADC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000a72:	f001 fbad 	bl	80021d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_ADC1_Init+0x128>)
 8000a78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a7a:	2318      	movs	r3, #24
 8000a7c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4619      	mov	r1, r3
 8000a82:	4806      	ldr	r0, [pc, #24]	; (8000a9c <MX_ADC1_Init+0x114>)
 8000a84:	f002 ff5c 	bl	8003940 <HAL_ADC_ConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000a8e:	f001 fb9f 	bl	80021d0 <Error_Handler>
  }

}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20004de0 	.word	0x20004de0
 8000aa0:	50040000 	.word	0x50040000
 8000aa4:	04300002 	.word	0x04300002
 8000aa8:	08600004 	.word	0x08600004
 8000aac:	0c900008 	.word	0x0c900008
 8000ab0:	1d500080 	.word	0x1d500080

08000ab4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a2e      	ldr	r2, [pc, #184]	; (8000b8c <HAL_ADC_MspInit+0xd8>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d155      	bne.n	8000b82 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ad6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ada:	f7ff ff3c 	bl	8000956 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	2004      	movs	r0, #4
 8000ae0:	f7ff ff39 	bl	8000956 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff ff36 	bl	8000956 <LL_AHB2_GRP1_EnableClock>
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = MAG_BASE_Pin|MAG_LIGHT_Pin|MAIN_BOARD_TEMP_Pin;
 8000aea:	2307      	movs	r3, #7
 8000aec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aee:	2303      	movs	r3, #3
 8000af0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	4619      	mov	r1, r3
 8000afc:	4824      	ldr	r0, [pc, #144]	; (8000b90 <HAL_ADC_MspInit+0xdc>)
 8000afe:	f004 f819 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_TEMP_Pin;
 8000b02:	2304      	movs	r3, #4
 8000b04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b06:	2303      	movs	r3, #3
 8000b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4619      	mov	r1, r3
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b18:	f004 f80c 	bl	8004b34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b1e:	4a1e      	ldr	r2, [pc, #120]	; (8000b98 <HAL_ADC_MspInit+0xe4>)
 8000b20:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b24:	2205      	movs	r2, #5
 8000b26:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b4c:	2220      	movs	r2, #32
 8000b4e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b56:	480f      	ldr	r0, [pc, #60]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b58:	f003 fd78 	bl	800464c <HAL_DMA_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000b62:	f001 fb35 	bl	80021d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b6c:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2105      	movs	r1, #5
 8000b76:	2012      	movs	r0, #18
 8000b78:	f003 fd11 	bl	800459e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f003 fd28 	bl	80045d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b82:	bf00      	nop
 8000b84:	3720      	adds	r7, #32
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	50040000 	.word	0x50040000
 8000b90:	48000800 	.word	0x48000800
 8000b94:	20004e44 	.word	0x20004e44
 8000b98:	40020008 	.word	0x40020008

08000b9c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000baa:	f023 0207 	bic.w	r2, r3, #7
 8000bae:	4905      	ldr	r1, [pc, #20]	; (8000bc4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	58000400 	.word	0x58000400

08000bc8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	608b      	str	r3, [r1, #8]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000bf4:	f000 f80a 	bl	8000c0c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000bf8:	4903      	ldr	r1, [pc, #12]	; (8000c08 <APPE_Init+0x18>)
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 ff56 	bl	8001aac <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000c00:	f000 f812 	bl	8000c28 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000c04:	bf00      	nop
}
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20004eb0 	.word	0x20004eb0

08000c0c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000c10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c14:	f7ff ffd8 	bl	8000bc8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000c18:	f012 fc0e 	bl	8013438 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000c1c:	2004      	movs	r0, #4
 8000c1e:	f7ff ffbd 	bl	8000b9c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000c22:	bf00      	nop
}
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000c2e:	f00b fa73 	bl	800c118 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8000c32:	2000      	movs	r0, #0
 8000c34:	f00d f91c 	bl	800de70 <osMutexNew>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <appe_Tl_Init+0x70>)
 8000c3c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	2001      	movs	r0, #1
 8000c44:	f00d fa5c 	bl	800e100 <osSemaphoreNew>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <appe_Tl_Init+0x74>)
 8000c4c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <appe_Tl_Init+0x78>)
 8000c50:	2100      	movs	r1, #0
 8000c52:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <appe_Tl_Init+0x7c>)
 8000c54:	f00c ff42 	bl	800dadc <osThreadNew>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <appe_Tl_Init+0x80>)
 8000c5c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <appe_Tl_Init+0x84>)
 8000c60:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <appe_Tl_Init+0x88>)
 8000c64:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <appe_Tl_Init+0x8c>)
 8000c6c:	f00b f91a 	bl	800bea4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <appe_Tl_Init+0x90>)
 8000c76:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <appe_Tl_Init+0x94>)
 8000c7a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c7c:	f240 533c 	movw	r3, #1340	; 0x53c
 8000c80:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	4618      	mov	r0, r3
 8000c88:	f00b fbb0 	bl	800c3ec <TL_MM_Init>

  TL_Enable();
 8000c8c:	f00b fa3e 	bl	800c10c <TL_Enable>

  return;
 8000c90:	bf00      	nop
}
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20004ea4 	.word	0x20004ea4
 8000c9c:	20004eac 	.word	0x20004eac
 8000ca0:	080138f4 	.word	0x080138f4
 8000ca4:	08000da9 	.word	0x08000da9
 8000ca8:	20004ea8 	.word	0x20004ea8
 8000cac:	2003061c 	.word	0x2003061c
 8000cb0:	08000cc1 	.word	0x08000cc1
 8000cb4:	08000d01 	.word	0x08000d01
 8000cb8:	20030728 	.word	0x20030728
 8000cbc:	200300e0 	.word	0x200300e0

08000cc0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <APPE_SysStatusNot+0x16>
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d008      	beq.n	8000ce6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8000cd4:	e00d      	b.n	8000cf2 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <APPE_SysStatusNot+0x3c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f04f 31ff 	mov.w	r1, #4294967295
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f00d f960 	bl	800dfa4 <osMutexAcquire>
      break;
 8000ce4:	e005      	b.n	8000cf2 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <APPE_SysStatusNot+0x3c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f00d f9b8 	bl	800e060 <osMutexRelease>
      break;
 8000cf0:	bf00      	nop
  }
  return;
 8000cf2:	bf00      	nop
}
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20004ea4 	.word	0x20004ea4

08000d00 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	330b      	adds	r3, #11
 8000d0e:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8000d1a:	d004      	beq.n	8000d26 <APPE_SysUserEvtRx+0x26>
 8000d1c:	f249 2201 	movw	r2, #37377	; 0x9201
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d003      	beq.n	8000d2c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8000d24:	e008      	b.n	8000d38 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8000d26:	f000 f833 	bl	8000d90 <APPE_SysEvtReadyProcessing>
         break;
 8000d2a:	e005      	b.n	8000d38 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	789b      	ldrb	r3, [r3, #2]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f805 	bl	8000d40 <APPE_SysEvtError>
         break;
 8000d36:	bf00      	nop
  }
  return;
 8000d38:	bf00      	nop
}
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b7d      	cmp	r3, #125	; 0x7d
 8000d4e:	d002      	beq.n	8000d56 <APPE_SysEvtError+0x16>
 8000d50:	2b7e      	cmp	r3, #126	; 0x7e
 8000d52:	d006      	beq.n	8000d62 <APPE_SysEvtError+0x22>
 8000d54:	e00b      	b.n	8000d6e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <APPE_SysEvtError+0x44>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f001 fdf2 	bl	8002944 <logApplication>
       break;
 8000d60:	e00c      	b.n	8000d7c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <APPE_SysEvtError+0x48>)
 8000d64:	2101      	movs	r1, #1
 8000d66:	2000      	movs	r0, #0
 8000d68:	f001 fdec 	bl	8002944 <logApplication>
       break;
 8000d6c:	e006      	b.n	8000d7c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <APPE_SysEvtError+0x4c>)
 8000d72:	2101      	movs	r1, #1
 8000d74:	2000      	movs	r0, #0
 8000d76:	f001 fde5 	bl	8002944 <logApplication>
       break;
 8000d7a:	bf00      	nop
  }
  return;
 8000d7c:	bf00      	nop
}
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	08013558 	.word	0x08013558
 8000d88:	0801357c 	.word	0x0801357c
 8000d8c:	0801359c 	.word	0x0801359c

08000d90 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000d94:	f00b fb9e 	bl	800c4d4 <TL_TRACES_Init>

  APP_THREAD_Init();
 8000d98:	f010 fe30 	bl	80119fc <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f012 fb5c 	bl	801345c <UTIL_LPM_SetOffMode>
  return;
 8000da4:	bf00      	nop
}
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	2100      	movs	r1, #0
 8000db6:	2001      	movs	r0, #1
 8000db8:	f00c ff98 	bl	800dcec <osThreadFlagsWait>
     shci_user_evt_proc();
 8000dbc:	f00b f88e 	bl	800bedc <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000dc0:	e7f6      	b.n	8000db0 <ShciUserEvtProcess+0x8>
	...

08000dc4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <shci_notify_asynch_evt+0x1c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f00c ff28 	bl	800dc28 <osThreadFlagsSet>
  return;
 8000dd8:	bf00      	nop
}
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20004ea8 	.word	0x20004ea8

08000de4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <shci_cmd_resp_release+0x1c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00d fa89 	bl	800e308 <osSemaphoreRelease>
  return;
 8000df6:	bf00      	nop
}
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20004eac 	.word	0x20004eac

08000e04 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <shci_cmd_resp_wait+0x20>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	4618      	mov	r0, r3
 8000e16:	f00d fa11 	bl	800e23c <osSemaphoreAcquire>
  return;
 8000e1a:	bf00      	nop
}
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20004eac 	.word	0x20004eac

08000e28 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f00b fb17 	bl	800c464 <TL_MM_EvtDone>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e44:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <_Z16MX_FREERTOS_Initv+0x1c>)
 8000e46:	2100      	movs	r1, #0
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <_Z16MX_FREERTOS_Initv+0x20>)
 8000e4a:	f00c fe47 	bl	800dadc <osThreadNew>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <_Z16MX_FREERTOS_Initv+0x24>)
 8000e52:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  APPE_Init();
 8000e54:	f7ff fecc 	bl	8000bf0 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	08013918 	.word	0x08013918
 8000e60:	08000e69 	.word	0x08000e69
 8000e64:	20000294 	.word	0x20000294

08000e68 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	osDelay(100);
 8000e70:	2064      	movs	r0, #100	; 0x64
 8000e72:	f00c ffcf 	bl	800de14 <osDelay>
	myMain();
 8000e76:	f001 fab7 	bl	80023e8 <_Z6myMainv>
  for(;;)
  {
	  osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8000e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7e:	2101      	movs	r1, #1
 8000e80:	2001      	movs	r0, #1
 8000e82:	f00c ff33 	bl	800dcec <osThreadFlagsWait>
 8000e86:	e7f8      	b.n	8000e7a <_Z16StartDefaultTaskPv+0x12>

08000e88 <startCal>:
 */
#ifndef SOLAR_SENSOR_NODE

void startCal(float angle_base_min, float angle_base_max,
		float angle_led_min, float angle_led_max,
				Stepper& motor_base, Stepper& motor_led){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000e92:	edc7 0a04 	vstr	s1, [r7, #16]
 8000e96:	ed87 1a03 	vstr	s2, [r7, #12]
 8000e9a:	edc7 1a02 	vstr	s3, [r7, #8]
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]

	// configure calMsg packet
	calMsg.UID = SPOTLIGHT_UID;
 8000ea2:	4b58      	ldr	r3, [pc, #352]	; (8001004 <startCal+0x17c>)
 8000ea4:	2218      	movs	r2, #24
 8000ea6:	701a      	strb	r2, [r3, #0]
	calMsg.cal_code = CALIBRATION_START_COMMAND;
 8000ea8:	4b56      	ldr	r3, [pc, #344]	; (8001004 <startCal+0x17c>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	705a      	strb	r2, [r3, #1]

	/* (1) hone axis */
	motor_base.honeAxis();
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff fd18 	bl	80008e4 <_ZN7Stepper8honeAxisEv>
	motor_led.honeAxis();
 8000eb4:	6838      	ldr	r0, [r7, #0]
 8000eb6:	f7ff fd15 	bl	80008e4 <_ZN7Stepper8honeAxisEv>

	/* (2) multicast that calibration will begin */

	// clear current calibration table
	memset(calibration_table,0,sizeof(calibration_table));
 8000eba:	2250      	movs	r2, #80	; 0x50
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4852      	ldr	r0, [pc, #328]	; (8001008 <startCal+0x180>)
 8000ec0:	f012 fb29 	bl	8013516 <memset>

	broadcastCalStart(&calMsg); //TODO: implement
 8000ec4:	484f      	ldr	r0, [pc, #316]	; (8001004 <startCal+0x17c>)
 8000ec6:	f000 f8a9 	bl	800101c <broadcastCalStart>
	/* (3) wait for nodes to ACK and populate a table with the UIDs */

	// note: nodes will be replying to a Coap server (code exists in app_thread.c for populating of table)

	// wait for nodes to reply with their IDs
	osDelay(CAL_INIT_CAL_TIMEOUT);
 8000eca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ece:	f00c ffa1 	bl	800de14 <osDelay>
	/* (4) Run through each position, sending an msg to each node indicating the angle is set
	 * and waiting for said nodes to respond with their solar power measurements. If node does
	 * not reply within CAL_POS_TIMEOUT, re-send msg and wait one more cycle before continuing.
	 */
		// calculate step bounds for each axis
		int32_t min_led_axis_step = (((angle_led_min) * LED_STEP_RANGE));
 8000ed2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ed6:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800100c <startCal+0x184>
 8000eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee2:	ee17 3a90 	vmov	r3, s15
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
		int32_t max_led_axis_step = (((angle_led_max) * LED_STEP_RANGE));
 8000ee8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eec:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800100c <startCal+0x184>
 8000ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ef8:	ee17 3a90 	vmov	r3, s15
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
		int32_t min_base_axis_step = (((angle_led_min) * BASE_STEP_RANGE));
 8000efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f02:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001010 <startCal+0x188>
 8000f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f0e:	ee17 3a90 	vmov	r3, s15
 8000f12:	623b      	str	r3, [r7, #32]
		int32_t max_base_axis_step = (((angle_led_max) * BASE_STEP_RANGE));
 8000f14:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f18:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001010 <startCal+0x188>
 8000f1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f24:	ee17 3a90 	vmov	r3, s15
 8000f28:	61fb      	str	r3, [r7, #28]

		// move to desired angle
		uint8_t flip_dir = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(base_step = min_base_axis_step; base_step <= max_base_axis_step; base_step += (BASE_CAL_STEP_MULTI * BASE_MIN_ANGLE_STEP)){
 8000f30:	4a38      	ldr	r2, [pc, #224]	; (8001014 <startCal+0x18c>)
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	4b37      	ldr	r3, [pc, #220]	; (8001014 <startCal+0x18c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	69fa      	ldr	r2, [r7, #28]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	db5a      	blt.n	8000ff6 <startCal+0x16e>
			motor_base.setAbsPos(base_step);
 8000f40:	4b34      	ldr	r3, [pc, #208]	; (8001014 <startCal+0x18c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fcf0 	bl	800092c <_ZN7Stepper9setAbsPosEl>

			if(flip_dir == 0){
 8000f4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d125      	bne.n	8000fa0 <startCal+0x118>
				for(led_step = min_led_axis_step; led_step <= max_led_axis_step; led_step += (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8000f54:	4a30      	ldr	r2, [pc, #192]	; (8001018 <startCal+0x190>)
 8000f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <startCal+0x190>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f60:	429a      	cmp	r2, r3
 8000f62:	db19      	blt.n	8000f98 <startCal+0x110>
					motor_led.setAbsPos(led_step);
 8000f64:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <startCal+0x190>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	6838      	ldr	r0, [r7, #0]
 8000f6c:	f7ff fcde 	bl	800092c <_ZN7Stepper9setAbsPosEl>
					getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <startCal+0x18c>)
 8000f72:	6819      	ldr	r1, [r3, #0]
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <startCal+0x190>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4822      	ldr	r0, [pc, #136]	; (8001004 <startCal+0x17c>)
 8000f7c:	f000 f892 	bl	80010a4 <getMeasurementsFromNodes>

					// wait CAL_POS_TIMEOUT milliseconds for nodes to reply with power values
#ifndef DEBUG_SERIAL
					osThreadFlagsWait (CAL_THREAD_FLAG, osFlagsWaitAny, CAL_POS_TIMEOUT);
 8000f80:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2003      	movs	r0, #3
 8000f88:	f00c feb0 	bl	800dcec <osThreadFlagsWait>
				for(led_step = min_led_axis_step; led_step <= max_led_axis_step; led_step += (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <startCal+0x190>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	331e      	adds	r3, #30
 8000f92:	4a21      	ldr	r2, [pc, #132]	; (8001018 <startCal+0x190>)
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e7e0      	b.n	8000f5a <startCal+0xd2>
#else
					osDelay(100);
#endif
				}
				flip_dir = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000f9e:	e024      	b.n	8000fea <startCal+0x162>
			}
			else{
				for(led_step = max_led_axis_step; led_step >= min_led_axis_step; led_step -= (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <startCal+0x190>)
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <startCal+0x190>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dc19      	bgt.n	8000fe4 <startCal+0x15c>
					motor_led.setAbsPos(led_step);
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <startCal+0x190>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6838      	ldr	r0, [r7, #0]
 8000fb8:	f7ff fcb8 	bl	800092c <_ZN7Stepper9setAbsPosEl>
					getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <startCal+0x18c>)
 8000fbe:	6819      	ldr	r1, [r3, #0]
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <startCal+0x190>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	480f      	ldr	r0, [pc, #60]	; (8001004 <startCal+0x17c>)
 8000fc8:	f000 f86c 	bl	80010a4 <getMeasurementsFromNodes>

					// wait CAL_POS_TIMEOUT milliseconds for nodes to reply with power values
#ifndef DEBUG_SERIAL
					osThreadFlagsWait (CAL_THREAD_FLAG, osFlagsWaitAny, CAL_POS_TIMEOUT);
 8000fcc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	f00c fe8a 	bl	800dcec <osThreadFlagsWait>
				for(led_step = max_led_axis_step; led_step >= min_led_axis_step; led_step -= (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <startCal+0x190>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	3b1e      	subs	r3, #30
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <startCal+0x190>)
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e7e0      	b.n	8000fa6 <startCal+0x11e>
#else
					osDelay(100);
#endif
				}
				flip_dir = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(base_step = min_base_axis_step; base_step <= max_base_axis_step; base_step += (BASE_CAL_STEP_MULTI * BASE_MIN_ANGLE_STEP)){
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <startCal+0x18c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	330a      	adds	r3, #10
 8000ff0:	4a08      	ldr	r2, [pc, #32]	; (8001014 <startCal+0x18c>)
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	e79f      	b.n	8000f36 <startCal+0xae>
			}
		}


//	/* (5) send calibration complete message to all nodes */
		broadcastCalComplete(&calMsg);
 8000ff6:	4803      	ldr	r0, [pc, #12]	; (8001004 <startCal+0x17c>)
 8000ff8:	f000 f832 	bl	8001060 <broadcastCalComplete>

}
 8000ffc:	bf00      	nop
 8000ffe:	3730      	adds	r7, #48	; 0x30
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200002e8 	.word	0x200002e8
 8001008:	20000298 	.word	0x20000298
 800100c:	46f24600 	.word	0x46f24600
 8001010:	45c06000 	.word	0x45c06000
 8001014:	200002f8 	.word	0x200002f8
 8001018:	200002f4 	.word	0x200002f4

0800101c <broadcastCalStart>:
#endif


void broadcastCalStart(CalMsg* msg){
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af04      	add	r7, sp, #16
 8001022:	6078      	str	r0, [r7, #4]

	msg->cal_fcn = CALIBRATION_START_COMMAND;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = 0;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
	msg->angle_2 = 0;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]

	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 8001036:	2301      	movs	r3, #1
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	2303      	movs	r3, #3
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	2301      	movs	r3, #1
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <broadcastCalStart+0x3c>)
 8001044:	4a05      	ldr	r2, [pc, #20]	; (800105c <broadcastCalStart+0x40>)
 8001046:	210c      	movs	r1, #12
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f010 ffa5 	bl	8011f98 <APP_THREAD_SendCoapMsg>
			&multicastAddr, nodeCalResource,
			REQUEST_ACK, OT_COAP_CODE_PUT, 1U);

	return;
 800104e:	bf00      	nop
}
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	08013a38 	.word	0x08013a38
 800105c:	20005010 	.word	0x20005010

08001060 <broadcastCalComplete>:

void broadcastCalComplete(CalMsg* msg){
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af04      	add	r7, sp, #16
 8001066:	6078      	str	r0, [r7, #4]

	msg->cal_fcn = CALIBRATION_START_COMMAND;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
	msg->angle_2 = 0;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]

	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 800107a:	2301      	movs	r3, #1
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2303      	movs	r3, #3
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	2301      	movs	r3, #1
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <broadcastCalComplete+0x3c>)
 8001088:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <broadcastCalComplete+0x40>)
 800108a:	210c      	movs	r1, #12
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f010 ff83 	bl	8011f98 <APP_THREAD_SendCoapMsg>
			&multicastAddr, nodeCalResource,
			REQUEST_ACK, OT_COAP_CODE_PUT, 1U);

	return;
 8001092:	bf00      	nop
}
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	08013a38 	.word	0x08013a38
 80010a0:	20005010 	.word	0x20005010

080010a4 <getMeasurementsFromNodes>:

void getMeasurementsFromNodes(CalMsg* msg, int32_t angle_1, int32_t angle_2){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af04      	add	r7, sp, #16
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]

	msg->cal_fcn = CALIBRATION_GET_MEAS;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2202      	movs	r2, #2
 80010b4:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = angle_1;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	605a      	str	r2, [r3, #4]
	msg->angle_2 = angle_2;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	609a      	str	r2, [r3, #8]

#ifndef DEBUG_SERIAL
	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 80010c2:	2301      	movs	r3, #1
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	2301      	movs	r3, #1
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <getMeasurementsFromNodes+0x40>)
 80010d0:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <getMeasurementsFromNodes+0x44>)
 80010d2:	210c      	movs	r1, #12
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f010 ff5f 	bl	8011f98 <APP_THREAD_SendCoapMsg>
#else
	// TODO REMOVE!!!
	measMsgReceivedFromNode(&measMsg);
#endif

	return;
 80010da:	bf00      	nop
}
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	08013a38 	.word	0x08013a38
 80010e8:	20005010 	.word	0x20005010

080010ec <LL_AHB1_GRP1_EnableClock>:
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4313      	orrs	r3, r2
 8001102:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4013      	ands	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001110:	68fb      	ldr	r3, [r7, #12]
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001122:	2004      	movs	r0, #4
 8001124:	f7ff ffe2 	bl	80010ec <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001128:	2001      	movs	r0, #1
 800112a:	f7ff ffdf 	bl	80010ec <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2105      	movs	r1, #5
 8001132:	200b      	movs	r0, #11
 8001134:	f003 fa33 	bl	800459e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001138:	200b      	movs	r0, #11
 800113a:	f003 fa4a 	bl	80045d2 <HAL_NVIC_EnableIRQ>

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}

08001142 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <LL_AHB2_GRP1_EnableClock>:
{
 8001156:	b480      	push	{r7}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800115e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4313      	orrs	r3, r2
 800116c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800116e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4013      	ands	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119c:	2004      	movs	r0, #4
 800119e:	f7ff ffda 	bl	8001156 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2002      	movs	r0, #2
 80011a4:	f7ff ffd7 	bl	8001156 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff ffd4 	bl	8001156 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ae:	2010      	movs	r0, #16
 80011b0:	f7ff ffd1 	bl	8001156 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 80011b4:	2200      	movs	r2, #0
 80011b6:	f240 3193 	movw	r1, #915	; 0x393
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f003 fe29 	bl	8004e14 <HAL_GPIO_WritePin>
                          |AIN1_1_Pin|BIN1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BIN1_2_Pin|BIN2_2_Pin|BIN2_1_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 4198 	mov.w	r1, #19456	; 0x4c00
 80011c8:	4823      	ldr	r0, [pc, #140]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011ca:	f003 fe23 	bl	8004e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLUE_LED_Pin|GREEN_LED_Pin, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	2103      	movs	r1, #3
 80011d2:	4821      	ldr	r0, [pc, #132]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011d4:	f003 fe1e 	bl	8004e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	2110      	movs	r1, #16
 80011dc:	481f      	ldr	r0, [pc, #124]	; (800125c <MX_GPIO_Init+0xd4>)
 80011de:	f003 fe19 	bl	8004e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 80011e2:	f240 3393 	movw	r3, #915	; 0x393
 80011e6:	607b      	str	r3, [r7, #4]
                          |AIN1_1_Pin|BIN1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f003 fc9a 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_LED_DISC_Pin;
 8001200:	2308      	movs	r3, #8
 8001202:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(INT_LED_DISC_GPIO_Port, &GPIO_InitStruct);
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001214:	f003 fc8e 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BIN1_2_Pin|BIN2_2_Pin|BLUE_LED_Pin|GREEN_LED_Pin
 8001218:	f644 4303 	movw	r3, #19459	; 0x4c03
 800121c:	607b      	str	r3, [r7, #4]
                          |BIN2_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	480a      	ldr	r0, [pc, #40]	; (8001258 <MX_GPIO_Init+0xd0>)
 8001230:	f003 fc80 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8001234:	2310      	movs	r3, #16
 8001236:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_GPIO_Init+0xd4>)
 800124a:	f003 fc73 	bl	8004b34 <HAL_GPIO_Init>

}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	48000400 	.word	0x48000400
 800125c:	48001000 	.word	0x48001000

08001260 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <LL_EXTI_EnableIT_0_31+0x24>)
 800126a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800126e:	4905      	ldr	r1, [pc, #20]	; (8001284 <LL_EXTI_EnableIT_0_31+0x24>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4313      	orrs	r3, r2
 8001274:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	58000800 	.word	0x58000800

08001288 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4904      	ldr	r1, [pc, #16]	; (80012a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4313      	orrs	r3, r2
 800129a:	600b      	str	r3, [r1, #0]

}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	58000800 	.word	0x58000800

080012ac <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <ReadRtcSsrValue+0x3c>)
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <ReadRtcSsrValue+0x3c>)
 80012bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012be:	b29b      	uxth	r3, r3
 80012c0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80012c2:	e005      	b.n	80012d0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <ReadRtcSsrValue+0x3c>)
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d1f5      	bne.n	80012c4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80012d8:	683b      	ldr	r3, [r7, #0]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40002800 	.word	0x40002800

080012ec <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	460a      	mov	r2, r1
 80012f6:	71fb      	strb	r3, [r7, #7]
 80012f8:	4613      	mov	r3, r2
 80012fa:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80012fc:	79ba      	ldrb	r2, [r7, #6]
 80012fe:	491d      	ldr	r1, [pc, #116]	; (8001374 <LinkTimerAfter+0x88>)
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	3315      	adds	r3, #21
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b06      	cmp	r3, #6
 8001314:	d009      	beq.n	800132a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	4916      	ldr	r1, [pc, #88]	; (8001374 <LinkTimerAfter+0x88>)
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	440b      	add	r3, r1
 8001324:	3314      	adds	r3, #20
 8001326:	79fa      	ldrb	r2, [r7, #7]
 8001328:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800132a:	79fa      	ldrb	r2, [r7, #7]
 800132c:	4911      	ldr	r1, [pc, #68]	; (8001374 <LinkTimerAfter+0x88>)
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	440b      	add	r3, r1
 8001338:	3315      	adds	r3, #21
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800133e:	79fa      	ldrb	r2, [r7, #7]
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <LinkTimerAfter+0x88>)
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	440b      	add	r3, r1
 800134c:	3314      	adds	r3, #20
 800134e:	79ba      	ldrb	r2, [r7, #6]
 8001350:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001352:	79ba      	ldrb	r2, [r7, #6]
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <LinkTimerAfter+0x88>)
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	440b      	add	r3, r1
 8001360:	3315      	adds	r3, #21
 8001362:	79fa      	ldrb	r2, [r7, #7]
 8001364:	701a      	strb	r2, [r3, #0]

  return;
 8001366:	bf00      	nop
}
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	200001c4 	.word	0x200001c4

08001378 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	460a      	mov	r2, r1
 8001382:	71fb      	strb	r3, [r7, #7]
 8001384:	4613      	mov	r3, r2
 8001386:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001388:	4b29      	ldr	r3, [pc, #164]	; (8001430 <LinkTimerBefore+0xb8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	79ba      	ldrb	r2, [r7, #6]
 8001390:	429a      	cmp	r2, r3
 8001392:	d032      	beq.n	80013fa <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001394:	79ba      	ldrb	r2, [r7, #6]
 8001396:	4927      	ldr	r1, [pc, #156]	; (8001434 <LinkTimerBefore+0xbc>)
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	440b      	add	r3, r1
 80013a2:	3314      	adds	r3, #20
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	4922      	ldr	r1, [pc, #136]	; (8001434 <LinkTimerBefore+0xbc>)
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	3315      	adds	r3, #21
 80013b8:	79fa      	ldrb	r2, [r7, #7]
 80013ba:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	491d      	ldr	r1, [pc, #116]	; (8001434 <LinkTimerBefore+0xbc>)
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	440b      	add	r3, r1
 80013ca:	3315      	adds	r3, #21
 80013cc:	79ba      	ldrb	r2, [r7, #6]
 80013ce:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80013d0:	79fa      	ldrb	r2, [r7, #7]
 80013d2:	4918      	ldr	r1, [pc, #96]	; (8001434 <LinkTimerBefore+0xbc>)
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	440b      	add	r3, r1
 80013de:	3314      	adds	r3, #20
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80013e4:	79ba      	ldrb	r2, [r7, #6]
 80013e6:	4913      	ldr	r1, [pc, #76]	; (8001434 <LinkTimerBefore+0xbc>)
 80013e8:	4613      	mov	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	3314      	adds	r3, #20
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80013f8:	e014      	b.n	8001424 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80013fa:	79fa      	ldrb	r2, [r7, #7]
 80013fc:	490d      	ldr	r1, [pc, #52]	; (8001434 <LinkTimerBefore+0xbc>)
 80013fe:	4613      	mov	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	440b      	add	r3, r1
 8001408:	3315      	adds	r3, #21
 800140a:	79ba      	ldrb	r2, [r7, #6]
 800140c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800140e:	79ba      	ldrb	r2, [r7, #6]
 8001410:	4908      	ldr	r1, [pc, #32]	; (8001434 <LinkTimerBefore+0xbc>)
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	440b      	add	r3, r1
 800141c:	3314      	adds	r3, #20
 800141e:	79fa      	ldrb	r2, [r7, #7]
 8001420:	701a      	strb	r2, [r3, #0]
  return;
 8001422:	bf00      	nop
}
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000254 	.word	0x20000254
 8001434:	200001c4 	.word	0x200001c4

08001438 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001442:	4b4e      	ldr	r3, [pc, #312]	; (800157c <linkTimer+0x144>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b06      	cmp	r3, #6
 800144a:	d118      	bne.n	800147e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800144c:	4b4b      	ldr	r3, [pc, #300]	; (800157c <linkTimer+0x144>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <linkTimer+0x148>)
 8001454:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001456:	4a49      	ldr	r2, [pc, #292]	; (800157c <linkTimer+0x144>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800145c:	79fa      	ldrb	r2, [r7, #7]
 800145e:	4949      	ldr	r1, [pc, #292]	; (8001584 <linkTimer+0x14c>)
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	440b      	add	r3, r1
 800146a:	3315      	adds	r3, #21
 800146c:	2206      	movs	r2, #6
 800146e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001470:	4b45      	ldr	r3, [pc, #276]	; (8001588 <linkTimer+0x150>)
 8001472:	f04f 32ff 	mov.w	r2, #4294967295
 8001476:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	81fb      	strh	r3, [r7, #14]
 800147c:	e078      	b.n	8001570 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800147e:	f000 f909 	bl	8001694 <ReturnTimeElapsed>
 8001482:	4603      	mov	r3, r0
 8001484:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001486:	79fa      	ldrb	r2, [r7, #7]
 8001488:	493e      	ldr	r1, [pc, #248]	; (8001584 <linkTimer+0x14c>)
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	3308      	adds	r3, #8
 8001496:	6819      	ldr	r1, [r3, #0]
 8001498:	89fb      	ldrh	r3, [r7, #14]
 800149a:	79fa      	ldrb	r2, [r7, #7]
 800149c:	4419      	add	r1, r3
 800149e:	4839      	ldr	r0, [pc, #228]	; (8001584 <linkTimer+0x14c>)
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4403      	add	r3, r0
 80014aa:	3308      	adds	r3, #8
 80014ac:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80014ae:	79fa      	ldrb	r2, [r7, #7]
 80014b0:	4934      	ldr	r1, [pc, #208]	; (8001584 <linkTimer+0x14c>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	3308      	adds	r3, #8
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <linkTimer+0x144>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	4619      	mov	r1, r3
 80014ca:	4a2e      	ldr	r2, [pc, #184]	; (8001584 <linkTimer+0x14c>)
 80014cc:	460b      	mov	r3, r1
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	440b      	add	r3, r1
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4413      	add	r3, r2
 80014d6:	3308      	adds	r3, #8
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d337      	bcc.n	8001550 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <linkTimer+0x144>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80014e6:	7b7a      	ldrb	r2, [r7, #13]
 80014e8:	4926      	ldr	r1, [pc, #152]	; (8001584 <linkTimer+0x14c>)
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	440b      	add	r3, r1
 80014f4:	3315      	adds	r3, #21
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80014fa:	e013      	b.n	8001524 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80014fc:	7b7a      	ldrb	r2, [r7, #13]
 80014fe:	4921      	ldr	r1, [pc, #132]	; (8001584 <linkTimer+0x14c>)
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	440b      	add	r3, r1
 800150a:	3315      	adds	r3, #21
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001510:	7b7a      	ldrb	r2, [r7, #13]
 8001512:	491c      	ldr	r1, [pc, #112]	; (8001584 <linkTimer+0x14c>)
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	440b      	add	r3, r1
 800151e:	3315      	adds	r3, #21
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001524:	7b3b      	ldrb	r3, [r7, #12]
 8001526:	2b06      	cmp	r3, #6
 8001528:	d00b      	beq.n	8001542 <linkTimer+0x10a>
 800152a:	7b3a      	ldrb	r2, [r7, #12]
 800152c:	4915      	ldr	r1, [pc, #84]	; (8001584 <linkTimer+0x14c>)
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	3308      	adds	r3, #8
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	429a      	cmp	r2, r3
 8001540:	d2dc      	bcs.n	80014fc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001542:	7b7a      	ldrb	r2, [r7, #13]
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fecf 	bl	80012ec <LinkTimerAfter>
 800154e:	e00f      	b.n	8001570 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <linkTimer+0x144>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff0c 	bl	8001378 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <linkTimer+0x144>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <linkTimer+0x148>)
 8001568:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800156a:	4a04      	ldr	r2, [pc, #16]	; (800157c <linkTimer+0x144>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001570:	89fb      	ldrh	r3, [r7, #14]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000254 	.word	0x20000254
 8001580:	20000255 	.word	0x20000255
 8001584:	200001c4 	.word	0x200001c4
 8001588:	20000258 	.word	0x20000258

0800158c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	460a      	mov	r2, r1
 8001596:	71fb      	strb	r3, [r7, #7]
 8001598:	4613      	mov	r3, r2
 800159a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800159c:	4b39      	ldr	r3, [pc, #228]	; (8001684 <UnlinkTimer+0xf8>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	79fa      	ldrb	r2, [r7, #7]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d111      	bne.n	80015cc <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80015a8:	4b36      	ldr	r3, [pc, #216]	; (8001684 <UnlinkTimer+0xf8>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b36      	ldr	r3, [pc, #216]	; (8001688 <UnlinkTimer+0xfc>)
 80015b0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80015b2:	79fa      	ldrb	r2, [r7, #7]
 80015b4:	4935      	ldr	r1, [pc, #212]	; (800168c <UnlinkTimer+0x100>)
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	3315      	adds	r3, #21
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <UnlinkTimer+0xf8>)
 80015c8:	701a      	strb	r2, [r3, #0]
 80015ca:	e03e      	b.n	800164a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80015cc:	79fa      	ldrb	r2, [r7, #7]
 80015ce:	492f      	ldr	r1, [pc, #188]	; (800168c <UnlinkTimer+0x100>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	3314      	adds	r3, #20
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80015e0:	79fa      	ldrb	r2, [r7, #7]
 80015e2:	492a      	ldr	r1, [pc, #168]	; (800168c <UnlinkTimer+0x100>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	440b      	add	r3, r1
 80015ee:	3315      	adds	r3, #21
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80015f4:	79f9      	ldrb	r1, [r7, #7]
 80015f6:	7bfa      	ldrb	r2, [r7, #15]
 80015f8:	4824      	ldr	r0, [pc, #144]	; (800168c <UnlinkTimer+0x100>)
 80015fa:	460b      	mov	r3, r1
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	440b      	add	r3, r1
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4403      	add	r3, r0
 8001604:	3315      	adds	r3, #21
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b2d8      	uxtb	r0, r3
 800160a:	4920      	ldr	r1, [pc, #128]	; (800168c <UnlinkTimer+0x100>)
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	440b      	add	r3, r1
 8001616:	3315      	adds	r3, #21
 8001618:	4602      	mov	r2, r0
 800161a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800161c:	7bbb      	ldrb	r3, [r7, #14]
 800161e:	2b06      	cmp	r3, #6
 8001620:	d013      	beq.n	800164a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001622:	79f9      	ldrb	r1, [r7, #7]
 8001624:	7bba      	ldrb	r2, [r7, #14]
 8001626:	4819      	ldr	r0, [pc, #100]	; (800168c <UnlinkTimer+0x100>)
 8001628:	460b      	mov	r3, r1
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	440b      	add	r3, r1
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4403      	add	r3, r0
 8001632:	3314      	adds	r3, #20
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2d8      	uxtb	r0, r3
 8001638:	4914      	ldr	r1, [pc, #80]	; (800168c <UnlinkTimer+0x100>)
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	3314      	adds	r3, #20
 8001646:	4602      	mov	r2, r0
 8001648:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800164a:	79fa      	ldrb	r2, [r7, #7]
 800164c:	490f      	ldr	r1, [pc, #60]	; (800168c <UnlinkTimer+0x100>)
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	330c      	adds	r3, #12
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <UnlinkTimer+0xf8>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b06      	cmp	r3, #6
 8001666:	d107      	bne.n	8001678 <UnlinkTimer+0xec>
 8001668:	79bb      	ldrb	r3, [r7, #6]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d104      	bne.n	8001678 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <UnlinkTimer+0x104>)
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	601a      	str	r2, [r3, #0]
  }

  return;
 8001676:	bf00      	nop
 8001678:	bf00      	nop
}
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	20000254 	.word	0x20000254
 8001688:	20000255 	.word	0x20000255
 800168c:	200001c4 	.word	0x200001c4
 8001690:	20000258 	.word	0x20000258

08001694 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <ReturnTimeElapsed+0x70>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a2:	d026      	beq.n	80016f2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80016a4:	f7ff fe02 	bl	80012ac <ReadRtcSsrValue>
 80016a8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <ReturnTimeElapsed+0x70>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d805      	bhi.n	80016c0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <ReturnTimeElapsed+0x70>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	e00a      	b.n	80016d6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <ReturnTimeElapsed+0x74>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <ReturnTimeElapsed+0x70>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <ReturnTimeElapsed+0x78>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <ReturnTimeElapsed+0x7c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	40d3      	lsrs	r3, r2
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	e001      	b.n	80016f6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	b29b      	uxth	r3, r3
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000258 	.word	0x20000258
 8001708:	20000302 	.word	0x20000302
 800170c:	20000301 	.word	0x20000301
 8001710:	20000300 	.word	0x20000300

08001714 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d108      	bne.n	8001736 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001724:	f7ff fdc2 	bl	80012ac <ReadRtcSsrValue>
 8001728:	4602      	mov	r2, r0
 800172a:	4b24      	ldr	r3, [pc, #144]	; (80017bc <RestartWakeupCounter+0xa8>)
 800172c:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800172e:	2003      	movs	r0, #3
 8001730:	f002 ff6f 	bl	8004612 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001734:	e03e      	b.n	80017b4 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d803      	bhi.n	8001744 <RestartWakeupCounter+0x30>
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <RestartWakeupCounter+0xac>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d002      	beq.n	800174a <RestartWakeupCounter+0x36>
      Value -= 1;
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	3b01      	subs	r3, #1
 8001748:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800174a:	bf00      	nop
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <RestartWakeupCounter+0xb0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f7      	beq.n	800174c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <RestartWakeupCounter+0xb0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <RestartWakeupCounter+0xb0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001770:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <RestartWakeupCounter+0xb4>)
 8001774:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001778:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800177a:	2003      	movs	r0, #3
 800177c:	f002 ff57 	bl	800462e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <RestartWakeupCounter+0xb8>)
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	0c1b      	lsrs	r3, r3, #16
 8001786:	041b      	lsls	r3, r3, #16
 8001788:	88fa      	ldrh	r2, [r7, #6]
 800178a:	4910      	ldr	r1, [pc, #64]	; (80017cc <RestartWakeupCounter+0xb8>)
 800178c:	4313      	orrs	r3, r2
 800178e:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001790:	f7ff fd8c 	bl	80012ac <ReadRtcSsrValue>
 8001794:	4602      	mov	r2, r0
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <RestartWakeupCounter+0xa8>)
 8001798:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <RestartWakeupCounter+0xb0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <RestartWakeupCounter+0xb0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017ac:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80017ae:	f3af 8000 	nop.w
  return ;
 80017b2:	bf00      	nop
}
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000258 	.word	0x20000258
 80017c0:	20000300 	.word	0x20000300
 80017c4:	200002fc 	.word	0x200002fc
 80017c8:	58000800 	.word	0x58000800
 80017cc:	40002800 	.word	0x40002800

080017d0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80017d6:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <RescheduleTimerList+0x124>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e2:	d108      	bne.n	80017f6 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80017e4:	bf00      	nop
 80017e6:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <RescheduleTimerList+0x128>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f7      	bne.n	80017e6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80017f6:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <RescheduleTimerList+0x128>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <RescheduleTimerList+0x128>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001808:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800180a:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <RescheduleTimerList+0x12c>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	493b      	ldr	r1, [pc, #236]	; (8001900 <RescheduleTimerList+0x130>)
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	3308      	adds	r3, #8
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001824:	f7ff ff36 	bl	8001694 <ReturnTimeElapsed>
 8001828:	4603      	mov	r3, r0
 800182a:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	429a      	cmp	r2, r3
 8001832:	d205      	bcs.n	8001840 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001838:	4b32      	ldr	r3, [pc, #200]	; (8001904 <RescheduleTimerList+0x134>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	e04d      	b.n	80018dc <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	4a31      	ldr	r2, [pc, #196]	; (8001908 <RescheduleTimerList+0x138>)
 8001844:	8812      	ldrh	r2, [r2, #0]
 8001846:	b292      	uxth	r2, r2
 8001848:	4413      	add	r3, r2
 800184a:	461a      	mov	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4293      	cmp	r3, r2
 8001850:	d906      	bls.n	8001860 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <RescheduleTimerList+0x138>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001858:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <RescheduleTimerList+0x134>)
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
 800185e:	e03d      	b.n	80018dc <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	b29a      	uxth	r2, r3
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <RescheduleTimerList+0x134>)
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001870:	e034      	b.n	80018dc <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	4922      	ldr	r1, [pc, #136]	; (8001900 <RescheduleTimerList+0x130>)
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	440b      	add	r3, r1
 8001880:	3308      	adds	r3, #8
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	429a      	cmp	r2, r3
 8001888:	d20a      	bcs.n	80018a0 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	491c      	ldr	r1, [pc, #112]	; (8001900 <RescheduleTimerList+0x130>)
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	3308      	adds	r3, #8
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	e013      	b.n	80018c8 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	4917      	ldr	r1, [pc, #92]	; (8001900 <RescheduleTimerList+0x130>)
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	3308      	adds	r3, #8
 80018b0:	6819      	ldr	r1, [r3, #0]
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	1ac9      	subs	r1, r1, r3
 80018b8:	4811      	ldr	r0, [pc, #68]	; (8001900 <RescheduleTimerList+0x130>)
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4403      	add	r3, r0
 80018c4:	3308      	adds	r3, #8
 80018c6:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	490d      	ldr	r1, [pc, #52]	; (8001900 <RescheduleTimerList+0x130>)
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	440b      	add	r3, r1
 80018d6:	3315      	adds	r3, #21
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d1c7      	bne.n	8001872 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80018e2:	89bb      	ldrh	r3, [r7, #12]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff15 	bl	8001714 <RestartWakeupCounter>

  return ;
 80018ea:	bf00      	nop
}
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40002800 	.word	0x40002800
 80018f8:	200002fc 	.word	0x200002fc
 80018fc:	20000254 	.word	0x20000254
 8001900:	200001c4 	.word	0x200001c4
 8001904:	2000025c 	.word	0x2000025c
 8001908:	20000304 	.word	0x20000304

0800190c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001912:	f3ef 8310 	mrs	r3, PRIMASK
 8001916:	617b      	str	r3, [r7, #20]
  return(result);
 8001918:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800191e:	4b5e      	ldr	r3, [pc, #376]	; (8001a98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	22ca      	movs	r2, #202	; 0xca
 8001926:	625a      	str	r2, [r3, #36]	; 0x24
 8001928:	4b5b      	ldr	r3, [pc, #364]	; (8001a98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2253      	movs	r2, #83	; 0x53
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001932:	4b59      	ldr	r3, [pc, #356]	; (8001a98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	4b57      	ldr	r3, [pc, #348]	; (8001a98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001944:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001946:	4b55      	ldr	r3, [pc, #340]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x190>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800194e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001952:	4953      	ldr	r1, [pc, #332]	; (8001aa0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	330c      	adds	r3, #12
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d170      	bne.n	8001a4a <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001968:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800196c:	494c      	ldr	r1, [pc, #304]	; (8001aa0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	440b      	add	r3, r1
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800197c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001980:	4947      	ldr	r1, [pc, #284]	; (8001aa0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	3310      	adds	r3, #16
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001992:	4b44      	ldr	r3, [pc, #272]	; (8001aa4 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d04e      	beq.n	8001a3a <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800199c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019a0:	493f      	ldr	r1, [pc, #252]	; (8001aa0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	330d      	adds	r3, #13
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d125      	bne.n	8001a02 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80019b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ba:	2101      	movs	r1, #1
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fde5 	bl	800158c <UnlinkTimer>
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80019cc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019d0:	4933      	ldr	r1, [pc, #204]	; (8001aa0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	3304      	adds	r3, #4
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019e4:	4611      	mov	r1, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f9d0 	bl	8001d8c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	22ca      	movs	r2, #202	; 0xca
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
 80019f6:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2253      	movs	r2, #83	; 0x53
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24
 8001a00:	e013      	b.n	8001a2a <HW_TS_RTC_Wakeup_Handler+0x11e>
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001a0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 f931 	bl	8001c78 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	22ca      	movs	r2, #202	; 0xca
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2253      	movs	r2, #83	; 0x53
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	4619      	mov	r1, r3
 8001a32:	69b8      	ldr	r0, [r7, #24]
 8001a34:	f000 fa30 	bl	8001e98 <HW_TS_RTC_Int_AppNot>
 8001a38:	e024      	b.n	8001a84 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8001a3a:	f7ff fec9 	bl	80017d0 <RescheduleTimerList>
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f383 8810 	msr	PRIMASK, r3
 8001a48:	e01c      	b.n	8001a84 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001a4a:	bf00      	nop
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f7      	beq.n	8001a4c <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a70:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001a74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	22ff      	movs	r2, #255	; 0xff
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001a8e:	bf00      	nop
}
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200002fc 	.word	0x200002fc
 8001a9c:	20000254 	.word	0x20000254
 8001aa0:	200001c4 	.word	0x200001c4
 8001aa4:	2000025c 	.word	0x2000025c
 8001aa8:	58000800 	.word	0x58000800

08001aac <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001ab8:	4a64      	ldr	r2, [pc, #400]	; (8001c4c <HW_TS_Init+0x1a0>)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001abe:	4b63      	ldr	r3, [pc, #396]	; (8001c4c <HW_TS_Init+0x1a0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	22ca      	movs	r2, #202	; 0xca
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ac8:	4b60      	ldr	r3, [pc, #384]	; (8001c4c <HW_TS_Init+0x1a0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2253      	movs	r2, #83	; 0x53
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001ad2:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <HW_TS_Init+0x1a4>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	4a5e      	ldr	r2, [pc, #376]	; (8001c50 <HW_TS_Init+0x1a4>)
 8001ad8:	f043 0320 	orr.w	r3, r3, #32
 8001adc:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001ade:	4b5c      	ldr	r3, [pc, #368]	; (8001c50 <HW_TS_Init+0x1a4>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f1c3 0304 	rsb	r3, r3, #4
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <HW_TS_Init+0x1a8>)
 8001af2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001af4:	4b56      	ldr	r3, [pc, #344]	; (8001c50 <HW_TS_Init+0x1a4>)
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001afc:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001b00:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	fa92 f2a2 	rbit	r2, r2
 8001b08:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d101      	bne.n	8001b18 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001b14:	2220      	movs	r2, #32
 8001b16:	e003      	b.n	8001b20 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	fab2 f282 	clz	r2, r2
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	40d3      	lsrs	r3, r2
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	3301      	adds	r3, #1
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <HW_TS_Init+0x1ac>)
 8001b2a:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001b2c:	4b48      	ldr	r3, [pc, #288]	; (8001c50 <HW_TS_Init+0x1a4>)
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HW_TS_Init+0x1b0>)
 8001b3e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001b40:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <HW_TS_Init+0x1b0>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	4a44      	ldr	r2, [pc, #272]	; (8001c58 <HW_TS_Init+0x1ac>)
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b52:	4a40      	ldr	r2, [pc, #256]	; (8001c54 <HW_TS_Init+0x1a8>)
 8001b54:	7812      	ldrb	r2, [r2, #0]
 8001b56:	40d3      	lsrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d904      	bls.n	8001b6e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001b64:	4b3e      	ldr	r3, [pc, #248]	; (8001c60 <HW_TS_Init+0x1b4>)
 8001b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6a:	801a      	strh	r2, [r3, #0]
 8001b6c:	e003      	b.n	8001b76 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HW_TS_Init+0x1b4>)
 8001b74:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001b76:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b7a:	f7ff fb85 	bl	8001288 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001b7e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b82:	f7ff fb6d 	bl	8001260 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d143      	bne.n	8001c14 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b8c:	4b35      	ldr	r3, [pc, #212]	; (8001c64 <HW_TS_Init+0x1b8>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b92:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <HW_TS_Init+0x1bc>)
 8001b94:	f04f 32ff 	mov.w	r2, #4294967295
 8001b98:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	77fb      	strb	r3, [r7, #31]
 8001b9e:	e00c      	b.n	8001bba <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001ba0:	7ffa      	ldrb	r2, [r7, #31]
 8001ba2:	4932      	ldr	r1, [pc, #200]	; (8001c6c <HW_TS_Init+0x1c0>)
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	330c      	adds	r3, #12
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001bb4:	7ffb      	ldrb	r3, [r7, #31]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	77fb      	strb	r3, [r7, #31]
 8001bba:	7ffb      	ldrb	r3, [r7, #31]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d9ef      	bls.n	8001ba0 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HW_TS_Init+0x1c4>)
 8001bc2:	2206      	movs	r2, #6
 8001bc4:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001bc6:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HW_TS_Init+0x1a0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <HW_TS_Init+0x1a0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bd8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001bda:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <HW_TS_Init+0x1a0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HW_TS_Init+0x1a0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001bee:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001bf0:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HW_TS_Init+0x1c8>)
 8001bf2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bf6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f002 fd18 	bl	800462e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HW_TS_Init+0x1a0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HW_TS_Init+0x1a0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	e00a      	b.n	8001c2a <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001c14:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HW_TS_Init+0x1a0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f002 fcf4 	bl	8004612 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HW_TS_Init+0x1a0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	22ff      	movs	r2, #255	; 0xff
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001c34:	2200      	movs	r2, #0
 8001c36:	2106      	movs	r1, #6
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f002 fcb0 	bl	800459e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c3e:	2003      	movs	r0, #3
 8001c40:	f002 fcc7 	bl	80045d2 <HAL_NVIC_EnableIRQ>

  return;
 8001c44:	bf00      	nop
}
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200002fc 	.word	0x200002fc
 8001c50:	40002800 	.word	0x40002800
 8001c54:	20000300 	.word	0x20000300
 8001c58:	20000301 	.word	0x20000301
 8001c5c:	20000302 	.word	0x20000302
 8001c60:	20000304 	.word	0x20000304
 8001c64:	2000025c 	.word	0x2000025c
 8001c68:	20000258 	.word	0x20000258
 8001c6c:	200001c4 	.word	0x200001c4
 8001c70:	20000254 	.word	0x20000254
 8001c74:	58000800 	.word	0x58000800

08001c78 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c82:	f3ef 8310 	mrs	r3, PRIMASK
 8001c86:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c88:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001c8e:	2003      	movs	r0, #3
 8001c90:	f002 fcad 	bl	80045ee <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001c94:	4b37      	ldr	r3, [pc, #220]	; (8001d74 <HW_TS_Stop+0xfc>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	22ca      	movs	r2, #202	; 0xca
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24
 8001c9e:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <HW_TS_Stop+0xfc>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2253      	movs	r2, #83	; 0x53
 8001ca6:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001ca8:	79fa      	ldrb	r2, [r7, #7]
 8001caa:	4933      	ldr	r1, [pc, #204]	; (8001d78 <HW_TS_Stop+0x100>)
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	330c      	adds	r3, #12
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d148      	bne.n	8001d52 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fc61 	bl	800158c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001cca:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <HW_TS_Stop+0x104>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001cd0:	7cfb      	ldrb	r3, [r7, #19]
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d135      	bne.n	8001d42 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <HW_TS_Stop+0x108>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce2:	d108      	bne.n	8001cf6 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001ce4:	bf00      	nop
 8001ce6:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <HW_TS_Stop+0xfc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f7      	bne.n	8001ce6 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <HW_TS_Stop+0xfc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HW_TS_Stop+0xfc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d08:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001d0a:	bf00      	nop
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HW_TS_Stop+0xfc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f7      	beq.n	8001d0c <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HW_TS_Stop+0xfc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HW_TS_Stop+0xfc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d30:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HW_TS_Stop+0x10c>)
 8001d34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d38:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001d3a:	2003      	movs	r0, #3
 8001d3c:	f002 fc77 	bl	800462e <HAL_NVIC_ClearPendingIRQ>
 8001d40:	e007      	b.n	8001d52 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HW_TS_Stop+0x110>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	7cfa      	ldrb	r2, [r7, #19]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d001      	beq.n	8001d52 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001d4e:	f7ff fd3f 	bl	80017d0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HW_TS_Stop+0xfc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	22ff      	movs	r2, #255	; 0xff
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	f002 fc38 	bl	80045d2 <HAL_NVIC_EnableIRQ>
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001d6c:	bf00      	nop
}
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200002fc 	.word	0x200002fc
 8001d78:	200001c4 	.word	0x200001c4
 8001d7c:	20000254 	.word	0x20000254
 8001d80:	40002800 	.word	0x40002800
 8001d84:	58000800 	.word	0x58000800
 8001d88:	20000255 	.word	0x20000255

08001d8c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001d98:	79fa      	ldrb	r2, [r7, #7]
 8001d9a:	493b      	ldr	r1, [pc, #236]	; (8001e88 <HW_TS_Start+0xfc>)
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	440b      	add	r3, r1
 8001da6:	330c      	adds	r3, #12
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d103      	bne.n	8001db8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ff60 	bl	8001c78 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001db8:	f3ef 8310 	mrs	r3, PRIMASK
 8001dbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001dc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc2:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	f002 fc12 	bl	80045ee <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001dca:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <HW_TS_Start+0x100>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	22ca      	movs	r2, #202	; 0xca
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <HW_TS_Start+0x100>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2253      	movs	r2, #83	; 0x53
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001dde:	79fa      	ldrb	r2, [r7, #7]
 8001de0:	4929      	ldr	r1, [pc, #164]	; (8001e88 <HW_TS_Start+0xfc>)
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	330c      	adds	r3, #12
 8001dee:	2202      	movs	r2, #2
 8001df0:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001df2:	79fa      	ldrb	r2, [r7, #7]
 8001df4:	4924      	ldr	r1, [pc, #144]	; (8001e88 <HW_TS_Start+0xfc>)
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	440b      	add	r3, r1
 8001e00:	3308      	adds	r3, #8
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001e06:	79fa      	ldrb	r2, [r7, #7]
 8001e08:	491f      	ldr	r1, [pc, #124]	; (8001e88 <HW_TS_Start+0xfc>)
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	440b      	add	r3, r1
 8001e14:	3304      	adds	r3, #4
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fb0b 	bl	8001438 <linkTimer>
 8001e22:	4603      	mov	r3, r0
 8001e24:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <HW_TS_Start+0x104>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HW_TS_Start+0x108>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	7c7a      	ldrb	r2, [r7, #17]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d002      	beq.n	8001e3e <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001e38:	f7ff fcca 	bl	80017d0 <RescheduleTimerList>
 8001e3c:	e013      	b.n	8001e66 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001e3e:	79fa      	ldrb	r2, [r7, #7]
 8001e40:	4911      	ldr	r1, [pc, #68]	; (8001e88 <HW_TS_Start+0xfc>)
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	440b      	add	r3, r1
 8001e4c:	3308      	adds	r3, #8
 8001e4e:	6819      	ldr	r1, [r3, #0]
 8001e50:	8a7b      	ldrh	r3, [r7, #18]
 8001e52:	79fa      	ldrb	r2, [r7, #7]
 8001e54:	1ac9      	subs	r1, r1, r3
 8001e56:	480c      	ldr	r0, [pc, #48]	; (8001e88 <HW_TS_Start+0xfc>)
 8001e58:	4613      	mov	r3, r2
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4403      	add	r3, r0
 8001e62:	3308      	adds	r3, #8
 8001e64:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HW_TS_Start+0x100>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	22ff      	movs	r2, #255	; 0xff
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e70:	2003      	movs	r0, #3
 8001e72:	f002 fbae 	bl	80045d2 <HAL_NVIC_EnableIRQ>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001e80:	bf00      	nop
}
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	200001c4 	.word	0x200001c4
 8001e8c:	200002fc 	.word	0x200002fc
 8001e90:	20000254 	.word	0x20000254
 8001e94:	20000255 	.word	0x20000255

08001e98 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4798      	blx	r3

  return;
 8001eaa:	bf00      	nop
}
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <toggleLed>:
 *      Author: patrick
 */

#include "led.h"

void toggleLed(uint8_t red, uint8_t green, uint8_t blue){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	71bb      	strb	r3, [r7, #6]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	717b      	strb	r3, [r7, #5]
	if(red){
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <toggleLed+0x24>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2110      	movs	r1, #16
 8001ed0:	4814      	ldr	r0, [pc, #80]	; (8001f24 <toggleLed+0x70>)
 8001ed2:	f002 ff9f 	bl	8004e14 <HAL_GPIO_WritePin>
 8001ed6:	e004      	b.n	8001ee2 <toggleLed+0x2e>
	}
	else{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2110      	movs	r1, #16
 8001edc:	4811      	ldr	r0, [pc, #68]	; (8001f24 <toggleLed+0x70>)
 8001ede:	f002 ff99 	bl	8004e14 <HAL_GPIO_WritePin>
	}

	if(blue){
 8001ee2:	797b      	ldrb	r3, [r7, #5]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <toggleLed+0x40>
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2101      	movs	r1, #1
 8001eec:	480e      	ldr	r0, [pc, #56]	; (8001f28 <toggleLed+0x74>)
 8001eee:	f002 ff91 	bl	8004e14 <HAL_GPIO_WritePin>
 8001ef2:	e004      	b.n	8001efe <toggleLed+0x4a>
		}
		else{
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	480b      	ldr	r0, [pc, #44]	; (8001f28 <toggleLed+0x74>)
 8001efa:	f002 ff8b 	bl	8004e14 <HAL_GPIO_WritePin>
		}

	if(green){
 8001efe:	79bb      	ldrb	r3, [r7, #6]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <toggleLed+0x5c>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2102      	movs	r1, #2
 8001f08:	4807      	ldr	r0, [pc, #28]	; (8001f28 <toggleLed+0x74>)
 8001f0a:	f002 ff83 	bl	8004e14 <HAL_GPIO_WritePin>
		}
		else{
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
		}
}
 8001f0e:	e004      	b.n	8001f1a <toggleLed+0x66>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001f10:	2201      	movs	r2, #1
 8001f12:	2102      	movs	r1, #2
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <toggleLed+0x74>)
 8001f16:	f002 ff7d 	bl	8004e14 <HAL_GPIO_WritePin>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	48001000 	.word	0x48001000
 8001f28:	48000400 	.word	0x48000400

08001f2c <LL_RCC_HSI48_Enable>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <LL_RCC_HSI48_IsReady>:
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d101      	bne.n	8001f66 <LL_RCC_HSI48_IsReady+0x18>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <LL_RCC_HSI48_IsReady+0x1a>
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <LL_RCC_LSE_SetDriveCapability>:
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	f023 0218 	bic.w	r2, r3, #24
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	3220      	adds	r2, #32
 8001fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb4:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <LL_HSEM_1StepLock+0x2c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d001      	beq.n	8001fbe <LL_HSEM_1StepLock+0x1e>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <LL_HSEM_1StepLock+0x20>
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	80000400 	.word	0x80000400

08001fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  /**
	   * The OPTVERR flag is wrongly set at power on
	   * It shall be cleared before using any HAL_FLASH_xxx() api
	   */
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <main+0x50>)
 8001fd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fda:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fdc:	f000 feae 	bl	8002d3c <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8001fe0:	f000 fab2 	bl	8002548 <_Z12Reset_Devicev>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe4:	f000 f81e 	bl	8002024 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  Init_Exti( );
 8001fe8:	f000 fad8 	bl	800259c <_Z9Init_Extiv>
  initClk();
 8001fec:	f000 fae2 	bl	80025b4 <_Z7initClkv>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff0:	f7ff f8ca 	bl	8001188 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ff4:	f7ff f893 	bl	800111e <MX_DMA_Init>
  MX_TIM2_Init();
 8001ff8:	f000 fd56 	bl	8002aa8 <MX_TIM2_Init>
  MX_TIM17_Init();
 8001ffc:	f000 fda2 	bl	8002b44 <MX_TIM17_Init>
  MX_ADC1_Init();
 8002000:	f7fe fcc2 	bl	8000988 <MX_ADC1_Init>
  MX_USB_Device_Init();
 8002004:	f010 fd20 	bl	8012a48 <MX_USB_Device_Init>
  MX_RF_Init();
 8002008:	f000 faf0 	bl	80025ec <MX_RF_Init>
  MX_RTC_Init();
 800200c:	f000 fb20 	bl	8002650 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002010:	f00b fcfa 	bl	800da08 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002014:	f7fe ff14 	bl	8000e40 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 8002018:	f00b fd2a 	bl	800da70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800201c:	e7fe      	b.n	800201c <main+0x4c>
 800201e:	bf00      	nop
 8002020:	58004000 	.word	0x58004000

08002024 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b0ae      	sub	sp, #184	; 0xb8
 8002028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800202a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800202e:	2248      	movs	r2, #72	; 0x48
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f011 fa6f 	bl	8013516 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002038:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
 8002048:	615a      	str	r2, [r3, #20]
 800204a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	2250      	movs	r2, #80	; 0x50
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f011 fa5f 	bl	8013516 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8002058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002066:	f043 0310 	orr.w	r3, r3, #16
 800206a:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800206c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002076:	f043 0303 	orr.w	r3, r3, #3
 800207a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800207c:	f003 fe4c 	bl	8005d18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002080:	2000      	movs	r0, #0
 8002082:	f7ff ff76 	bl	8001f72 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <_Z18SystemClock_Configv+0x180>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800208e:	4a45      	ldr	r2, [pc, #276]	; (80021a4 <_Z18SystemClock_Configv+0x180>)
 8002090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <_Z18SystemClock_Configv+0x180>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80020a2:	2307      	movs	r3, #7
 80020a4:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020aa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020ac:	2301      	movs	r3, #1
 80020ae:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020b6:	2340      	movs	r3, #64	; 0x40
 80020b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020bc:	2300      	movs	r3, #0
 80020be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020c6:	4618      	mov	r0, r3
 80020c8:	f004 f9d6 	bl	8006478 <HAL_RCC_OscConfig>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf14      	ite	ne
 80020d2:	2301      	movne	r3, #1
 80020d4:	2300      	moveq	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 80020dc:	f000 f878 	bl	80021d0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80020e0:	236f      	movs	r3, #111	; 0x6f
 80020e2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80020e4:	2302      	movs	r3, #2
 80020e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020ec:	2300      	movs	r3, #0
 80020ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020f0:	2300      	movs	r3, #0
 80020f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80020f4:	2300      	movs	r3, #0
 80020f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80020fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002100:	2101      	movs	r1, #1
 8002102:	4618      	mov	r0, r3
 8002104:	f004 fd44 	bl	8006b90 <HAL_RCC_ClockConfig>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf14      	ite	ne
 800210e:	2301      	movne	r3, #1
 8002110:	2300      	moveq	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 8002118:	f000 f85a 	bl	80021d0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 800211c:	f44f 5374 	mov.w	r3, #15616	; 0x3d00
 8002120:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8002122:	2306      	movs	r3, #6
 8002124:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800212c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002130:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002132:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002136:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002138:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800213c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800213e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002142:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002144:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002148:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800214a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800214e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002150:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002154:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002156:	2300      	movs	r3, #0
 8002158:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800215a:	2310      	movs	r3, #16
 800215c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	4618      	mov	r0, r3
 8002162:	f005 f970 	bl	8007446 <HAL_RCCEx_PeriphCLKConfig>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf14      	ite	ne
 800216c:	2301      	movne	r3, #1
 800216e:	2300      	moveq	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <_Z18SystemClock_Configv+0x156>
  {
    Error_Handler();
 8002176:	f000 f82b 	bl	80021d0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  //https://community.st.com/s/question/0D50X0000C0wdqe/stm32wb55-ble-hid?t=1591239574627
  LL_HSEM_1StepLock(HSEM, 5 );
 800217a:	2105      	movs	r1, #5
 800217c:	480a      	ldr	r0, [pc, #40]	; (80021a8 <_Z18SystemClock_Configv+0x184>)
 800217e:	f7ff ff0f 	bl	8001fa0 <LL_HSEM_1StepLock>
  LL_RCC_HSI48_Enable();
 8002182:	f7ff fed3 	bl	8001f2c <LL_RCC_HSI48_Enable>
  while(!LL_RCC_HSI48_IsReady());
 8002186:	f7ff fee2 	bl	8001f4e <LL_RCC_HSI48_IsReady>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d000      	beq.n	800219c <_Z18SystemClock_Configv+0x178>
 800219a:	e7f4      	b.n	8002186 <_Z18SystemClock_Configv+0x162>
  /* USER CODE END Smps */
}
 800219c:	bf00      	nop
 800219e:	37b8      	adds	r7, #184	; 0xb8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	58000400 	.word	0x58000400
 80021a8:	58001400 	.word	0x58001400

080021ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a04      	ldr	r2, [pc, #16]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d101      	bne.n	80021c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021be:	f000 fddd 	bl	8002d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40012c00 	.word	0x40012c00

080021d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021d6:	e7fe      	b.n	80021d6 <Error_Handler+0x6>

080021d8 <LL_EXTI_DisableIT_0_31>:
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <LL_EXTI_DisableIT_0_31+0x28>)
 80021e2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	4905      	ldr	r1, [pc, #20]	; (8002200 <LL_EXTI_DisableIT_0_31+0x28>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	58000800 	.word	0x58000800

08002204 <LL_EXTI_DisableIT_32_63>:
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800220c:	4b07      	ldr	r3, [pc, #28]	; (800222c <LL_EXTI_DisableIT_32_63+0x28>)
 800220e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	43db      	mvns	r3, r3
 8002216:	4905      	ldr	r1, [pc, #20]	; (800222c <LL_EXTI_DisableIT_32_63+0x28>)
 8002218:	4013      	ands	r3, r2
 800221a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	58000800 	.word	0x58000800

08002230 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002280:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002288:	d101      	bne.n	800228e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022ae:	d101      	bne.n	80022b4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80022c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022d4:	4313      	orrs	r3, r2
 80022d6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80022d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022e4:	68fb      	ldr	r3, [r7, #12]
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	041b      	lsls	r3, r3, #16
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	605a      	str	r2, [r3, #4]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	605a      	str	r2, [r3, #4]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	041b      	lsls	r3, r3, #16
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	615a      	str	r2, [r3, #20]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	615a      	str	r2, [r3, #20]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	609a      	str	r2, [r3, #8]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	619a      	str	r2, [r3, #24]
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <LL_HSEM_1StepLock>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	3220      	adds	r2, #32
 80023c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023cc:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <LL_HSEM_1StepLock+0x2c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d001      	beq.n	80023d6 <LL_HSEM_1StepLock+0x1e>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <LL_HSEM_1StepLock+0x20>
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	80000400 	.word	0x80000400

080023e8 <_Z6myMainv>:

struct ADC_DATA adc_data;

//uint16_t adc_data[4];

int myMain(void){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b0b0      	sub	sp, #192	; 0xc0
 80023ec:	af08      	add	r7, sp, #32
		powerMeasSetup();
		HAL_Delay(100);

	#endif
#else
	HAL_TIM_Base_Start_IT(&htim2);
 80023ee:	4840      	ldr	r0, [pc, #256]	; (80024f0 <_Z6myMainv+0x108>)
 80023f0:	f005 fc3a 	bl	8007c68 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, GPIO_PIN_SET);
 80023f4:	2201      	movs	r2, #1
 80023f6:	2110      	movs	r1, #16
 80023f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023fc:	f002 fd0a 	bl	8004e14 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim17);
 8002400:	483c      	ldr	r0, [pc, #240]	; (80024f4 <_Z6myMainv+0x10c>)
 8002402:	f005 fbeb 	bl	8007bdc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8002406:	2100      	movs	r1, #0
 8002408:	483a      	ldr	r0, [pc, #232]	; (80024f4 <_Z6myMainv+0x10c>)
 800240a:	f005 fcdd 	bl	8007dc8 <HAL_TIM_PWM_Start>

	Stepper motor_base(STEPS, AIN1_1_GPIO_Port, AIN1_1_Pin,
			AIN2_1_GPIO_Port, AIN2_1_Pin,
			BIN1_1_GPIO_Port, BIN1_1_Pin,
			BIN2_1_GPIO_Port, BIN2_1_Pin, &adc_data.mag_base, NON_INVERTED);
 800240e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002412:	2301      	movs	r3, #1
 8002414:	9307      	str	r3, [sp, #28]
 8002416:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <_Z6myMainv+0x110>)
 8002418:	9306      	str	r3, [sp, #24]
 800241a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800241e:	9305      	str	r3, [sp, #20]
 8002420:	4b36      	ldr	r3, [pc, #216]	; (80024fc <_Z6myMainv+0x114>)
 8002422:	9304      	str	r3, [sp, #16]
 8002424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002428:	9303      	str	r3, [sp, #12]
 800242a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800242e:	9302      	str	r3, [sp, #8]
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800243e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002442:	f640 0104 	movw	r1, #2052	; 0x804
 8002446:	f7fd fea5 	bl	8000194 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>
	motor_base.setSpeed(12);
 800244a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800244e:	210c      	movs	r1, #12
 8002450:	4618      	mov	r0, r3
 8002452:	f7fd fedf 	bl	8000214 <_ZN7Stepper8setSpeedEl>
	motor_base.setStepBound(BASE_STEP_RANGE);
 8002456:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800245a:	f641 010c 	movw	r1, #6156	; 0x180c
 800245e:	4618      	mov	r0, r3
 8002460:	f7fd fef0 	bl	8000244 <_ZN7Stepper12setStepBoundEl>

	Stepper motor_led(STEPS, AIN1_2_GPIO_Port, AIN1_2_Pin,
				AIN2_2_GPIO_Port, AIN2_2_Pin,
				BIN1_2_GPIO_Port, BIN1_2_Pin,
				BIN2_2_GPIO_Port, BIN2_2_Pin,  &adc_data.mag_led, INVERTED);
 8002464:	1d38      	adds	r0, r7, #4
 8002466:	23ff      	movs	r3, #255	; 0xff
 8002468:	9307      	str	r3, [sp, #28]
 800246a:	4b25      	ldr	r3, [pc, #148]	; (8002500 <_Z6myMainv+0x118>)
 800246c:	9306      	str	r3, [sp, #24]
 800246e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002472:	9305      	str	r3, [sp, #20]
 8002474:	4b21      	ldr	r3, [pc, #132]	; (80024fc <_Z6myMainv+0x114>)
 8002476:	9304      	str	r3, [sp, #16]
 8002478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800247c:	9303      	str	r3, [sp, #12]
 800247e:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <_Z6myMainv+0x114>)
 8002480:	9302      	str	r3, [sp, #8]
 8002482:	2301      	movs	r3, #1
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2302      	movs	r3, #2
 800248e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002492:	f640 0104 	movw	r1, #2052	; 0x804
 8002496:	f7fd fe7d 	bl	8000194 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>
	motor_led.setSpeed(16);
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	2110      	movs	r1, #16
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fd feb8 	bl	8000214 <_ZN7Stepper8setSpeedEl>
	motor_led.setStepBound(LED_STEP_RANGE);
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	f647 1123 	movw	r1, #31011	; 0x7923
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fd feca 	bl	8000244 <_ZN7Stepper12setStepBoundEl>

	uint32_t counter = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_data, 4);
 80024b6:	2204      	movs	r2, #4
 80024b8:	490f      	ldr	r1, [pc, #60]	; (80024f8 <_Z6myMainv+0x110>)
 80024ba:	4812      	ldr	r0, [pc, #72]	; (8002504 <_Z6myMainv+0x11c>)
 80024bc:	f000 ffde 	bl	800347c <HAL_ADC_Start_DMA>
	HAL_Delay(100);
 80024c0:	2064      	movs	r0, #100	; 0x64
 80024c2:	f000 fc87 	bl	8002dd4 <HAL_Delay>

	while (1)
		  {
			counter += 1;
 80024c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024ca:	3301      	adds	r3, #1
 80024cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
//			while(1){
//				motor_base.honeAxis();
//				motor_base.step(-3078);
//				motor_base.step(-3078);
//			}
			startCal(0, 0.5, 0, 0.3, motor_base, motor_led);
 80024d0:	1d3a      	adds	r2, r7, #4
 80024d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	eddf 1a0b 	vldr	s3, [pc, #44]	; 8002508 <_Z6myMainv+0x120>
 80024de:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 800250c <_Z6myMainv+0x124>
 80024e2:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80024e6:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800250c <_Z6myMainv+0x124>
 80024ea:	f7fe fccd 	bl	8000e88 <startCal>

			while(1){};
 80024ee:	e7fe      	b.n	80024ee <_Z6myMainv+0x106>
 80024f0:	20004f6c 	.word	0x20004f6c
 80024f4:	20004f20 	.word	0x20004f20
 80024f8:	20000308 	.word	0x20000308
 80024fc:	48000400 	.word	0x48000400
 8002500:	2000030a 	.word	0x2000030a
 8002504:	20004de0 	.word	0x20004de0
 8002508:	3e99999a 	.word	0x3e99999a
 800250c:	00000000 	.word	0x00000000

08002510 <_Z18Reset_BackupDomainv>:




void Reset_BackupDomain( void )
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8002514:	f7ff feae 	bl	8002274 <LL_RCC_IsActiveFlag_PINRST>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d006      	beq.n	800252c <_Z18Reset_BackupDomainv+0x1c>
 800251e:	f7ff febc 	bl	800229a <LL_RCC_IsActiveFlag_SFTRST>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <_Z18Reset_BackupDomainv+0x1c>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <_Z18Reset_BackupDomainv+0x1e>
 800252c:	2300      	movs	r3, #0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <_Z18Reset_BackupDomainv+0x34>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002532:	f003 fbf1 	bl	8005d18 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8002536:	f003 fbef 	bl	8005d18 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800253a:	f7ff fe79 	bl	8002230 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800253e:	f7ff fe88 	bl	8002252 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8002542:	bf00      	nop
 8002544:	bf00      	nop
}
 8002546:	bd80      	pop	{r7, pc}

08002548 <_Z12Reset_Devicev>:

void Reset_Device( void )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 800254c:	f7ff ffe0 	bl	8002510 <_Z18Reset_BackupDomainv>

  Reset_IPCC();
 8002550:	f000 f802 	bl	8002558 <_Z10Reset_IPCCv>
#endif

  return;
 8002554:	bf00      	nop
}
 8002556:	bd80      	pop	{r7, pc}

08002558 <_Z10Reset_IPCCv>:

void Reset_IPCC( void )
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800255c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002560:	f7ff feae 	bl	80022c0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8002564:	213f      	movs	r1, #63	; 0x3f
 8002566:	480c      	ldr	r0, [pc, #48]	; (8002598 <_Z10Reset_IPCCv+0x40>)
 8002568:	f7ff ff09 	bl	800237e <LL_C1_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800256c:	213f      	movs	r1, #63	; 0x3f
 800256e:	480a      	ldr	r0, [pc, #40]	; (8002598 <_Z10Reset_IPCCv+0x40>)
 8002570:	f7ff ff13 	bl	800239a <LL_C2_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8002574:	213f      	movs	r1, #63	; 0x3f
 8002576:	4808      	ldr	r0, [pc, #32]	; (8002598 <_Z10Reset_IPCCv+0x40>)
 8002578:	f7ff febb 	bl	80022f2 <LL_C1_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800257c:	213f      	movs	r1, #63	; 0x3f
 800257e:	4806      	ldr	r0, [pc, #24]	; (8002598 <_Z10Reset_IPCCv+0x40>)
 8002580:	f7ff feda 	bl	8002338 <LL_C2_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8002584:	213f      	movs	r1, #63	; 0x3f
 8002586:	4804      	ldr	r0, [pc, #16]	; (8002598 <_Z10Reset_IPCCv+0x40>)
 8002588:	f7ff fec5 	bl	8002316 <LL_C1_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800258c:	213f      	movs	r1, #63	; 0x3f
 800258e:	4802      	ldr	r0, [pc, #8]	; (8002598 <_Z10Reset_IPCCv+0x40>)
 8002590:	f7ff fee4 	bl	800235c <LL_C2_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8002594:	bf00      	nop
}
 8002596:	bd80      	pop	{r7, pc}
 8002598:	58000c00 	.word	0x58000c00

0800259c <_Z9Init_Extiv>:

void Init_Exti( void )
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
 80025a4:	f7ff fe18 	bl	80021d8 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 80025a8:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80025ac:	f7ff fe2a 	bl	8002204 <LL_EXTI_DisableIT_32_63>

  return;
 80025b0:	bf00      	nop
}
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <_Z7initClkv>:

  return;
}

void initClk (void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b092      	sub	sp, #72	; 0x48
 80025b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef st_oscInit = {0};
 80025ba:	463b      	mov	r3, r7
 80025bc:	2248      	movs	r2, #72	; 0x48
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f010 ffa8 	bl	8013516 <memset>

  /* Get mutex */
  LL_HSEM_1StepLock(HSEM, 5);
 80025c6:	2105      	movs	r1, #5
 80025c8:	4807      	ldr	r0, [pc, #28]	; (80025e8 <_Z7initClkv+0x34>)
 80025ca:	f7ff fef5 	bl	80023b8 <LL_HSEM_1StepLock>

  st_oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80025ce:	2340      	movs	r3, #64	; 0x40
 80025d0:	603b      	str	r3, [r7, #0]
  st_oscInit.HSI48State     = RCC_HSI48_ON; /* Used by USB */
 80025d2:	2301      	movs	r3, #1
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_RCC_OscConfig(&st_oscInit);
 80025d6:	463b      	mov	r3, r7
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 ff4d 	bl	8006478 <HAL_RCC_OscConfig>
}
 80025de:	bf00      	nop
 80025e0:	3748      	adds	r7, #72	; 0x48
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	58001400 	.word	0x58001400

080025ec <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0

}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_RCC_EnableRTC>:
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80025fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002606:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800260a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800260e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002628:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800262a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4313      	orrs	r3, r2
 8002632:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002638:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4013      	ands	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002640:	68fb      	ldr	r3, [r7, #12]
}
 8002642:	bf00      	nop
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <MX_RTC_Init+0x4c>)
 8002656:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <MX_RTC_Init+0x50>)
 8002658:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <MX_RTC_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <MX_RTC_Init+0x4c>)
 8002662:	220f      	movs	r2, #15
 8002664:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <MX_RTC_Init+0x4c>)
 8002668:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800266c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <MX_RTC_Init+0x4c>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <MX_RTC_Init+0x4c>)
 8002676:	2200      	movs	r2, #0
 8002678:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <MX_RTC_Init+0x4c>)
 800267c:	2200      	movs	r2, #0
 800267e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <MX_RTC_Init+0x4c>)
 8002682:	2200      	movs	r2, #0
 8002684:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002686:	4805      	ldr	r0, [pc, #20]	; (800269c <MX_RTC_Init+0x4c>)
 8002688:	f005 f963 	bl	8007952 <HAL_RTC_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002692:	f7ff fd9d 	bl	80021d0 <Error_Handler>
  }

}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20004eb0 	.word	0x20004eb0
 80026a0:	40002800 	.word	0x40002800

080026a4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a06      	ldr	r2, [pc, #24]	; (80026cc <HAL_RTC_MspInit+0x28>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d105      	bne.n	80026c2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026b6:	f7ff ffa0 	bl	80025fa <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80026ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026be:	f7ff ffad 	bl	800261c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40002800 	.word	0x40002800

080026d0 <measMsgReceivedFromNode>:
};

char* endOfLine = "\n\r";


void measMsgReceivedFromNode(struct MeasMsg* msg){
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	// send over UART if USB UART active
#if USB_UART_ACTIVE
	uint8_t retry = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
//	CDC_Transmit_FS(position, sizeof(position));
//	taskENTER_CRITICAL();
	memcpy((struct MeasMsg*) &serialMsg.measMsg, msg, sizeof(struct MeasMsg));
 80026dc:	2214      	movs	r2, #20
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	481b      	ldr	r0, [pc, #108]	; (8002750 <measMsgReceivedFromNode+0x80>)
 80026e2:	f010 ff0d 	bl	8013500 <memcpy>
	while(CDC_Transmit_FS((uint8_t* ) msg, sizeof(struct MeasMsg)) != USBD_OK){
 80026e6:	e00b      	b.n	8002700 <measMsgReceivedFromNode+0x30>
		if(retry == 5){
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2b05      	cmp	r3, #5
 80026ec:	d102      	bne.n	80026f4 <measMsgReceivedFromNode+0x24>
			retry = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	73fb      	strb	r3, [r7, #15]
			break;
 80026f2:	e00c      	b.n	800270e <measMsgReceivedFromNode+0x3e>
		}
		osDelay(1);
 80026f4:	2001      	movs	r0, #1
 80026f6:	f00b fb8d 	bl	800de14 <osDelay>
		retry+=1;
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	3301      	adds	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
	while(CDC_Transmit_FS((uint8_t* ) msg, sizeof(struct MeasMsg)) != USBD_OK){
 8002700:	2114      	movs	r1, #20
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f010 fa5e 	bl	8012bc4 <CDC_Transmit_FS>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ec      	bne.n	80026e8 <measMsgReceivedFromNode+0x18>

	}
	while(CDC_Transmit_FS((uint8_t* ) endOfLine, sizeof(endOfLine)) != USBD_OK){
 800270e:	e00b      	b.n	8002728 <measMsgReceivedFromNode+0x58>
		if(retry == 5){
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	2b05      	cmp	r3, #5
 8002714:	d102      	bne.n	800271c <measMsgReceivedFromNode+0x4c>
			retry = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
			break;
 800271a:	e00e      	b.n	800273a <measMsgReceivedFromNode+0x6a>
		}
		osDelay(1);
 800271c:	2001      	movs	r0, #1
 800271e:	f00b fb79 	bl	800de14 <osDelay>
		retry+=1;
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	3301      	adds	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
	while(CDC_Transmit_FS((uint8_t* ) endOfLine, sizeof(endOfLine)) != USBD_OK){
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <measMsgReceivedFromNode+0x84>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2104      	movs	r1, #4
 800272e:	4618      	mov	r0, r3
 8002730:	f010 fa48 	bl	8012bc4 <CDC_Transmit_FS>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1ea      	bne.n	8002710 <measMsgReceivedFromNode+0x40>

	// TODO check if power rating in table is lower than current one
	//		if so, replace and record current angle measurements

	// TODO if all expected nodes have replied, move to next Spotlight position
	osThreadFlagsSet (defaultTaskHandle, CAL_THREAD_FLAG);
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <measMsgReceivedFromNode+0x88>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2103      	movs	r1, #3
 8002740:	4618      	mov	r0, r3
 8002742:	f00b fa71 	bl	800dc28 <osThreadFlagsSet>
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000004 	.word	0x20000004
 8002754:	2000001c 	.word	0x2000001c
 8002758:	20000294 	.word	0x20000294

0800275c <LL_AHB3_GRP1_EnableClock>:
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002768:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800276a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4313      	orrs	r3, r2
 8002772:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002778:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4013      	ands	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002780:	68fb      	ldr	r3, [r7, #12]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002792:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002796:	f7ff ffe1 	bl	800275c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	210f      	movs	r1, #15
 800279e:	f06f 0001 	mvn.w	r0, #1
 80027a2:	f001 fefc 	bl	800459e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	2105      	movs	r1, #5
 80027aa:	202e      	movs	r0, #46	; 0x2e
 80027ac:	f001 fef7 	bl	800459e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80027b0:	202e      	movs	r0, #46	; 0x2e
 80027b2:	f001 ff0e 	bl	80045d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 80027b6:	2200      	movs	r2, #0
 80027b8:	210f      	movs	r1, #15
 80027ba:	202c      	movs	r0, #44	; 0x2c
 80027bc:	f001 feef 	bl	800459e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 80027c0:	2200      	movs	r2, #0
 80027c2:	210f      	movs	r1, #15
 80027c4:	202d      	movs	r0, #45	; 0x2d
 80027c6:	f001 feea 	bl	800459e <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}

080027ce <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b085      	sub	sp, #20
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80027d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80027e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4013      	ands	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027f2:	68fb      	ldr	r3, [r7, #12]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08c      	sub	sp, #48	; 0x30
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8002810:	2200      	movs	r2, #0
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	2019      	movs	r0, #25
 8002816:	f001 fec2 	bl	800459e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800281a:	2019      	movs	r0, #25
 800281c:	f001 fed9 	bl	80045d2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002820:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002824:	f7ff ffd3 	bl	80027ce <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002828:	f107 0208 	add.w	r2, r7, #8
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f004 fb80 	bl	8006f38 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002838:	f004 fb68 	bl	8006f0c <HAL_RCC_GetPCLK2Freq>
 800283c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	4a12      	ldr	r2, [pc, #72]	; (800288c <HAL_InitTick+0x8c>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	0c9b      	lsrs	r3, r3, #18
 8002848:	3b01      	subs	r3, #1
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800284c:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_InitTick+0x90>)
 800284e:	4a11      	ldr	r2, [pc, #68]	; (8002894 <HAL_InitTick+0x94>)
 8002850:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002852:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <HAL_InitTick+0x90>)
 8002854:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002858:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800285a:	4a0d      	ldr	r2, [pc, #52]	; (8002890 <HAL_InitTick+0x90>)
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_InitTick+0x90>)
 8002862:	2200      	movs	r2, #0
 8002864:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_InitTick+0x90>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800286c:	4808      	ldr	r0, [pc, #32]	; (8002890 <HAL_InitTick+0x90>)
 800286e:	f005 f95e 	bl	8007b2e <HAL_TIM_Base_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d104      	bne.n	8002882 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002878:	4805      	ldr	r0, [pc, #20]	; (8002890 <HAL_InitTick+0x90>)
 800287a:	f005 f9f5 	bl	8007c68 <HAL_TIM_Base_Start_IT>
 800287e:	4603      	mov	r3, r0
 8002880:	e000      	b.n	8002884 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
}
 8002884:	4618      	mov	r0, r3
 8002886:	3730      	adds	r7, #48	; 0x30
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	431bde83 	.word	0x431bde83
 8002890:	20004ed4 	.word	0x20004ed4
 8002894:	40012c00 	.word	0x40012c00

08002898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800289c:	e7fe      	b.n	800289c <NMI_Handler+0x4>

0800289e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028a2:	e7fe      	b.n	80028a2 <HardFault_Handler+0x4>

080028a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a8:	e7fe      	b.n	80028a8 <MemManage_Handler+0x4>

080028aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ae:	e7fe      	b.n	80028ae <BusFault_Handler+0x4>

080028b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b4:	e7fe      	b.n	80028b4 <UsageFault_Handler+0x4>

080028b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <DMA1_Channel1_IRQHandler+0x10>)
 80028ca:	f001 ffe2 	bl	8004892 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20004e44 	.word	0x20004e44

080028d8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <ADC1_IRQHandler+0x10>)
 80028de:	f000 fe51 	bl	8003584 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20004de0 	.word	0x20004de0

080028ec <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <USB_LP_IRQHandler+0x10>)
 80028f2:	f002 fba8 	bl	8005046 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20006514 	.word	0x20006514

08002900 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002904:	4802      	ldr	r0, [pc, #8]	; (8002910 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002906:	f005 fb39 	bl	8007f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20004ed4 	.word	0x20004ed4

08002914 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002918:	f002 fa94 	bl	8004e44 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}

08002920 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8002924:	f7fe fff2 	bl	800190c <HW_TS_RTC_Wakeup_Handler>
}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}

0800292c <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8002930:	f00f ff0a 	bl	8012748 <HW_IPCC_Tx_Handler>
  return;
 8002934:	bf00      	nop
}
 8002936:	bd80      	pop	{r7, pc}

08002938 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 800293c:	f00f feaa 	bl	8012694 <HW_IPCC_Rx_Handler>
  return;
 8002940:	bf00      	nop
}
 8002942:	bd80      	pop	{r7, pc}

08002944 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8002944:	b40c      	push	{r2, r3}
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	460a      	mov	r2, r1
 8002950:	71fb      	strb	r3, [r7, #7]
 8002952:	4613      	mov	r3, r2
 8002954:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	b002      	add	sp, #8
 8002962:	4770      	bx	lr

08002964 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002968:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <SystemInit+0xa0>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800296e:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <SystemInit+0xa0>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	4a23      	ldr	r2, [pc, #140]	; (8002a04 <SystemInit+0xa0>)
 8002976:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800297a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800298e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002992:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002996:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029a2:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <SystemInit+0xa4>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80029a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029b4:	f023 0305 	bic.w	r3, r3, #5
 80029b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80029bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80029d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d4:	4a0d      	ldr	r2, [pc, #52]	; (8002a0c <SystemInit+0xa8>)
 80029d6:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029dc:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <SystemInit+0xa8>)
 80029de:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f4:	2200      	movs	r2, #0
 80029f6:	619a      	str	r2, [r3, #24]
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000ed00 	.word	0xe000ed00
 8002a08:	faf6fefb 	.word	0xfaf6fefb
 8002a0c:	22041000 	.word	0x22041000

08002a10 <LL_AHB2_GRP1_EnableClock>:
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a34:	68fb      	ldr	r3, [r7, #12]
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <LL_APB1_GRP1_EnableClock>:
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4013      	ands	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a66:	68fb      	ldr	r3, [r7, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_APB2_GRP1_EnableClock>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a98:	68fb      	ldr	r3, [r7, #12]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aae:	f107 0310 	add.w	r3, r7, #16
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	605a      	str	r2, [r3, #4]
 8002ab8:	609a      	str	r2, [r3, #8]
 8002aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <MX_TIM2_Init+0x98>)
 8002ac8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002acc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8002ace:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <MX_TIM2_Init+0x98>)
 8002ad0:	221f      	movs	r2, #31
 8002ad2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad4:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <MX_TIM2_Init+0x98>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002ada:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <MX_TIM2_Init+0x98>)
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae2:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <MX_TIM2_Init+0x98>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae8:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <MX_TIM2_Init+0x98>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002aee:	4814      	ldr	r0, [pc, #80]	; (8002b40 <MX_TIM2_Init+0x98>)
 8002af0:	f005 f81d 	bl	8007b2e <HAL_TIM_Base_Init>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002afa:	f7ff fb69 	bl	80021d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b04:	f107 0310 	add.w	r3, r7, #16
 8002b08:	4619      	mov	r1, r3
 8002b0a:	480d      	ldr	r0, [pc, #52]	; (8002b40 <MX_TIM2_Init+0x98>)
 8002b0c:	f005 fc66 	bl	80083dc <HAL_TIM_ConfigClockSource>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002b16:	f7ff fb5b 	bl	80021d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b22:	1d3b      	adds	r3, r7, #4
 8002b24:	4619      	mov	r1, r3
 8002b26:	4806      	ldr	r0, [pc, #24]	; (8002b40 <MX_TIM2_Init+0x98>)
 8002b28:	f006 f8de 	bl	8008ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b32:	f7ff fb4d 	bl	80021d0 <Error_Handler>
  }

}
 8002b36:	bf00      	nop
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20004f6c 	.word	0x20004f6c

08002b44 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b094      	sub	sp, #80	; 0x50
 8002b48:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	60da      	str	r2, [r3, #12]
 8002b58:	611a      	str	r2, [r3, #16]
 8002b5a:	615a      	str	r2, [r3, #20]
 8002b5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b5e:	463b      	mov	r3, r7
 8002b60:	2234      	movs	r2, #52	; 0x34
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f010 fcd6 	bl	8013516 <memset>

  htim17.Instance = TIM17;
 8002b6a:	4b31      	ldr	r3, [pc, #196]	; (8002c30 <MX_TIM17_Init+0xec>)
 8002b6c:	4a31      	ldr	r2, [pc, #196]	; (8002c34 <MX_TIM17_Init+0xf0>)
 8002b6e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3199;
 8002b70:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <MX_TIM17_Init+0xec>)
 8002b72:	f640 427f 	movw	r2, #3199	; 0xc7f
 8002b76:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b78:	4b2d      	ldr	r3, [pc, #180]	; (8002c30 <MX_TIM17_Init+0xec>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8002b7e:	4b2c      	ldr	r3, [pc, #176]	; (8002c30 <MX_TIM17_Init+0xec>)
 8002b80:	2264      	movs	r2, #100	; 0x64
 8002b82:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b84:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <MX_TIM17_Init+0xec>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002b8a:	4b29      	ldr	r3, [pc, #164]	; (8002c30 <MX_TIM17_Init+0xec>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b90:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <MX_TIM17_Init+0xec>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002b96:	4826      	ldr	r0, [pc, #152]	; (8002c30 <MX_TIM17_Init+0xec>)
 8002b98:	f004 ffc9 	bl	8007b2e <HAL_TIM_Base_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002ba2:	f7ff fb15 	bl	80021d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002ba6:	4822      	ldr	r0, [pc, #136]	; (8002c30 <MX_TIM17_Init+0xec>)
 8002ba8:	f005 f8ac 	bl	8007d04 <HAL_TIM_PWM_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002bb2:	f7ff fb0d 	bl	80021d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bb6:	2360      	movs	r3, #96	; 0x60
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 1;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4815      	ldr	r0, [pc, #84]	; (8002c30 <MX_TIM17_Init+0xec>)
 8002bdc:	f005 faee 	bl	80081bc <HAL_TIM_PWM_ConfigChannel>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002be6:	f7ff faf3 	bl	80021d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002c0c:	463b      	mov	r3, r7
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4807      	ldr	r0, [pc, #28]	; (8002c30 <MX_TIM17_Init+0xec>)
 8002c12:	f006 f8c9 	bl	8008da8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8002c1c:	f7ff fad8 	bl	80021d0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 8002c20:	4803      	ldr	r0, [pc, #12]	; (8002c30 <MX_TIM17_Init+0xec>)
 8002c22:	f000 f825 	bl	8002c70 <HAL_TIM_MspPostInit>

}
 8002c26:	bf00      	nop
 8002c28:	3750      	adds	r7, #80	; 0x50
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20004f20 	.word	0x20004f20
 8002c34:	40014800 	.word	0x40014800

08002c38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c48:	d103      	bne.n	8002c52 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	f7ff fef9 	bl	8002a42 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002c50:	e008      	b.n	8002c64 <HAL_TIM_Base_MspInit+0x2c>
  else if(tim_baseHandle->Instance==TIM17)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a05      	ldr	r2, [pc, #20]	; (8002c6c <HAL_TIM_Base_MspInit+0x34>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d103      	bne.n	8002c64 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002c5c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002c60:	f7ff ff08 	bl	8002a74 <LL_APB2_GRP1_EnableClock>
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40014800 	.word	0x40014800

08002c70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c78:	f107 030c 	add.w	r3, r7, #12
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM17)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	; (8002cc4 <HAL_TIM_MspPostInit+0x54>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d113      	bne.n	8002cba <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c92:	2002      	movs	r0, #2
 8002c94:	f7ff febc 	bl	8002a10 <LL_AHB2_GRP1_EnableClock>
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8002c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8002caa:	230e      	movs	r3, #14
 8002cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8002cae:	f107 030c 	add.w	r3, r7, #12
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4804      	ldr	r0, [pc, #16]	; (8002cc8 <HAL_TIM_MspPostInit+0x58>)
 8002cb6:	f001 ff3d 	bl	8004b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002cba:	bf00      	nop
 8002cbc:	3720      	adds	r7, #32
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40014800 	.word	0x40014800
 8002cc8:	48000400 	.word	0x48000400

08002ccc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002ccc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cce:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cd0:	3304      	adds	r3, #4

08002cd2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cd2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cd4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002cd6:	d3f9      	bcc.n	8002ccc <CopyDataInit>
  bx lr
 8002cd8:	4770      	bx	lr

08002cda <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002cda:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002cdc:	3004      	adds	r0, #4

08002cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002cde:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002ce0:	d3fb      	bcc.n	8002cda <FillZerobss>
  bx lr
 8002ce2:	4770      	bx	lr

08002ce4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ce4:	480c      	ldr	r0, [pc, #48]	; (8002d18 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002ce6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002ce8:	f7ff fe3c 	bl	8002964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002cec:	480b      	ldr	r0, [pc, #44]	; (8002d1c <LoopForever+0x8>)
 8002cee:	490c      	ldr	r1, [pc, #48]	; (8002d20 <LoopForever+0xc>)
 8002cf0:	4a0c      	ldr	r2, [pc, #48]	; (8002d24 <LoopForever+0x10>)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f7ff ffed 	bl	8002cd2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002cf8:	480b      	ldr	r0, [pc, #44]	; (8002d28 <LoopForever+0x14>)
 8002cfa:	490c      	ldr	r1, [pc, #48]	; (8002d2c <LoopForever+0x18>)
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f7ff ffee 	bl	8002cde <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002d02:	480b      	ldr	r0, [pc, #44]	; (8002d30 <LoopForever+0x1c>)
 8002d04:	490b      	ldr	r1, [pc, #44]	; (8002d34 <LoopForever+0x20>)
 8002d06:	2300      	movs	r3, #0
 8002d08:	f7ff ffe9 	bl	8002cde <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d0c:	f010 fbd4 	bl	80134b8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002d10:	f7ff f95e 	bl	8001fd0 <main>

08002d14 <LoopForever>:

LoopForever:
  b LoopForever
 8002d14:	e7fe      	b.n	8002d14 <LoopForever>
 8002d16:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002d18:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002d1c:	20000004 	.word	0x20000004
 8002d20:	200001c4 	.word	0x200001c4
 8002d24:	08013a50 	.word	0x08013a50
  INIT_BSS _sbss, _ebss
 8002d28:	20000278 	.word	0x20000278
 8002d2c:	20006788 	.word	0x20006788
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002d30:	200300e0 	.word	0x200300e0
 8002d34:	20030b57 	.word	0x20030b57

08002d38 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d38:	e7fe      	b.n	8002d38 <AES1_IRQHandler>
	...

08002d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <HAL_Init+0x3c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a0b      	ldr	r2, [pc, #44]	; (8002d78 <HAL_Init+0x3c>)
 8002d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d52:	2003      	movs	r0, #3
 8002d54:	f001 fc18 	bl	8004588 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7ff fd51 	bl	8002800 <HAL_InitTick>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	71fb      	strb	r3, [r7, #7]
 8002d68:	e001      	b.n	8002d6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d6a:	f7ff fd10 	bl	800278e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	58004000 	.word	0x58004000

08002d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_IncTick+0x20>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_IncTick+0x24>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <HAL_IncTick+0x24>)
 8002d8e:	6013      	str	r3, [r2, #0]
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20000028 	.word	0x20000028
 8002da0:	20004fb8 	.word	0x20004fb8

08002da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return uwTick;
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <HAL_GetTick+0x14>)
 8002daa:	681b      	ldr	r3, [r3, #0]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20004fb8 	.word	0x20004fb8

08002dbc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002dc0:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <HAL_GetTickPrio+0x14>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000024 	.word	0x20000024

08002dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7ff ffe2 	bl	8002da4 <HAL_GetTick>
 8002de0:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dec:	d005      	beq.n	8002dfa <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_Delay+0x40>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8002dfa:	bf00      	nop
 8002dfc:	f7ff ffd2 	bl	8002da4 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d8f7      	bhi.n	8002dfc <HAL_Delay+0x28>
    {
    }
  }
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000028 	.word	0x20000028

08002e18 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	609a      	str	r2, [r3, #8]
#endif
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	609a      	str	r2, [r3, #8]
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3360      	adds	r3, #96	; 0x60
 8002e92:	461a      	mov	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <LL_ADC_SetOffset+0x44>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002eb8:	bf00      	nop
 8002eba:	371c      	adds	r7, #28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	03fff000 	.word	0x03fff000

08002ec8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3360      	adds	r3, #96	; 0x60
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3360      	adds	r3, #96	; 0x60
 8002f04:	461a      	mov	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f42:	2300      	movs	r3, #0
#endif
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	3330      	adds	r3, #48	; 0x30
 8002f60:	461a      	mov	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	4413      	add	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f003 031f 	and.w	r3, r3, #31
 8002f7a:	211f      	movs	r1, #31
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	401a      	ands	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	0e9b      	lsrs	r3, r3, #26
 8002f88:	f003 011f 	and.w	r1, r3, #31
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	431a      	orrs	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8002f9c:	bf00      	nop
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
#endif
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b087      	sub	sp, #28
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3314      	adds	r3, #20
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	0e5b      	lsrs	r3, r3, #25
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	4413      	add	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	0d1b      	lsrs	r3, r3, #20
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	2107      	movs	r1, #7
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	401a      	ands	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	0d1b      	lsrs	r3, r3, #20
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	431a      	orrs	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8003034:	bf00      	nop
 8003036:	371c      	adds	r7, #28
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003058:	43db      	mvns	r3, r3
 800305a:	401a      	ands	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f003 0318 	and.w	r3, r3, #24
 8003062:	4908      	ldr	r1, [pc, #32]	; (8003084 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003064:	40d9      	lsrs	r1, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	400b      	ands	r3, r1
 800306a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306e:	431a      	orrs	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	0007ffff 	.word	0x0007ffff

08003088 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003098:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6093      	str	r3, [r2, #8]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030c0:	d101      	bne.n	80030c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80030e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003110:	d101      	bne.n	8003116 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003134:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003138:	f043 0201 	orr.w	r2, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <LL_ADC_IsEnabled+0x18>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <LL_ADC_IsEnabled+0x1a>
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003182:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003186:	f043 0204 	orr.w	r2, r3, #4
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d101      	bne.n	80031b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d101      	bne.n	80031d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e12c      	b.n	8003460 <HAL_ADC_Init+0x278>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7fd fc4d 	bl	8000ab4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff ff3d 	bl	80030ac <LL_ADC_IsDeepPowerDownEnabled>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d004      	beq.n	8003242 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ff23 	bl	8003088 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff ff58 	bl	80030fc <LL_ADC_IsInternalRegulatorEnabled>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d113      	bne.n	800327a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff ff3c 	bl	80030d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800325c:	4b82      	ldr	r3, [pc, #520]	; (8003468 <HAL_ADC_Init+0x280>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	099b      	lsrs	r3, r3, #6
 8003262:	4a82      	ldr	r2, [pc, #520]	; (800346c <HAL_ADC_Init+0x284>)
 8003264:	fba2 2303 	umull	r2, r3, r2, r3
 8003268:	099b      	lsrs	r3, r3, #6
 800326a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800326c:	e002      	b.n	8003274 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3b01      	subs	r3, #1
 8003272:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f9      	bne.n	800326e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff3c 	bl	80030fc <LL_ADC_IsInternalRegulatorEnabled>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328e:	f043 0210 	orr.w	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	f043 0201 	orr.w	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff ff75 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 80032b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f040 80c7 	bne.w	800344e <HAL_ADC_Init+0x266>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 80c3 	bne.w	800344e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032d0:	f043 0202 	orr.w	r2, r3, #2
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff35 	bl	800314c <LL_ADC_IsEnabled>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10b      	bne.n	8003300 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032e8:	4861      	ldr	r0, [pc, #388]	; (8003470 <HAL_ADC_Init+0x288>)
 80032ea:	f7ff ff2f 	bl	800314c <LL_ADC_IsEnabled>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4619      	mov	r1, r3
 80032fa:	485e      	ldr	r0, [pc, #376]	; (8003474 <HAL_ADC_Init+0x28c>)
 80032fc:	f7ff fd8c 	bl	8002e18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	7e5b      	ldrb	r3, [r3, #25]
 8003304:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800330a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003310:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003316:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800331e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8003320:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4313      	orrs	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d106      	bne.n	8003340 <HAL_ADC_Init+0x158>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	3b01      	subs	r3, #1
 8003338:	045b      	lsls	r3, r3, #17
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	d009      	beq.n	800335c <HAL_ADC_Init+0x174>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	4b45      	ldr	r3, [pc, #276]	; (8003478 <HAL_ADC_Init+0x290>)
 8003364:	4013      	ands	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	69b9      	ldr	r1, [r7, #24]
 800336c:	430b      	orrs	r3, r1
 800336e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff10 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 800337a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff1d 	bl	80031c0 <LL_ADC_INJ_IsConversionOngoing>
 8003386:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d13d      	bne.n	800340a <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d13a      	bne.n	800340a <HAL_ADC_Init+0x222>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003398:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033a0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b0:	f023 0302 	bic.w	r3, r3, #2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	69b9      	ldr	r1, [r7, #24]
 80033ba:	430b      	orrs	r3, r1
 80033bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d118      	bne.n	80033fa <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80033d2:	f023 0304 	bic.w	r3, r3, #4
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033de:	4311      	orrs	r1, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033e4:	4311      	orrs	r1, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033ea:	430a      	orrs	r2, r1
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	611a      	str	r2, [r3, #16]
 80033f8:	e007      	b.n	800340a <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0201 	bic.w	r2, r2, #1
 8003408:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d10c      	bne.n	800342c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	f023 010f 	bic.w	r1, r3, #15
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	1e5a      	subs	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
 800342a:	e007      	b.n	800343c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 020f 	bic.w	r2, r2, #15
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003440:	f023 0303 	bic.w	r3, r3, #3
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
 800344c:	e007      	b.n	800345e <HAL_ADC_Init+0x276>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003452:	f043 0210 	orr.w	r2, r3, #16
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800345e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3720      	adds	r7, #32
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000020 	.word	0x20000020
 800346c:	053e2d63 	.word	0x053e2d63
 8003470:	50040000 	.word	0x50040000
 8003474:	50040300 	.word	0x50040300
 8003478:	fff0c007 	.word	0xfff0c007

0800347c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fe84 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d167      	bne.n	8003568 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_ADC_Start_DMA+0x2a>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e063      	b.n	800356e <HAL_ADC_Start_DMA+0xf2>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fe0a 	bl	80040c8 <ADC_Enable>
 80034b4:	4603      	mov	r3, r0
 80034b6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d14f      	bne.n	800355e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d006      	beq.n	80034ec <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	f023 0206 	bic.w	r2, r3, #6
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	659a      	str	r2, [r3, #88]	; 0x58
 80034ea:	e002      	b.n	80034f2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f6:	4a20      	ldr	r2, [pc, #128]	; (8003578 <HAL_ADC_Start_DMA+0xfc>)
 80034f8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fe:	4a1f      	ldr	r2, [pc, #124]	; (800357c <HAL_ADC_Start_DMA+0x100>)
 8003500:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003506:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <HAL_ADC_Start_DMA+0x104>)
 8003508:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	221c      	movs	r2, #28
 8003510:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0210 	orr.w	r2, r2, #16
 8003528:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	60da      	str	r2, [r3, #12]
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3340      	adds	r3, #64	; 0x40
 8003544:	4619      	mov	r1, r3
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f001 f927 	bl	800479c <HAL_DMA_Start_IT>
 800354e:	4603      	mov	r3, r0
 8003550:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fe0b 	bl	8003172 <LL_ADC_REG_StartConversion>
 800355c:	e006      	b.n	800356c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003566:	e001      	b.n	800356c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003568:	2302      	movs	r3, #2
 800356a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800356c:	7dfb      	ldrb	r3, [r7, #23]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	080041bd 	.word	0x080041bd
 800357c:	08004295 	.word	0x08004295
 8003580:	080042b1 	.word	0x080042b1

08003584 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800358c:	2300      	movs	r3, #0
 800358e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d017      	beq.n	80035da <HAL_ADC_IRQHandler+0x56>
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d012      	beq.n	80035da <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d105      	bne.n	80035cc <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 feb1 	bl	8004334 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2202      	movs	r2, #2
 80035d8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d004      	beq.n	80035ee <HAL_ADC_IRQHandler+0x6a>
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d109      	bne.n	8003602 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d05d      	beq.n	80036b4 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d058      	beq.n	80036b4 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b00      	cmp	r3, #0
 800360c:	d105      	bne.n	800361a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff fc83 	bl	8002f2a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d03d      	beq.n	80036a6 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if defined (ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003638:	d035      	beq.n	80036a6 <HAL_ADC_IRQHandler+0x122>
#endif
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b08      	cmp	r3, #8
 8003646:	d12e      	bne.n	80036a6 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fda4 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d11a      	bne.n	800368e <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 020c 	bic.w	r2, r2, #12
 8003666:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d112      	bne.n	80036a6 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	f043 0201 	orr.w	r2, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	655a      	str	r2, [r3, #84]	; 0x54
 800368c:	e00b      	b.n	80036a6 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003692:	f043 0210 	orr.w	r2, r3, #16
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	f043 0201 	orr.w	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f922 	bl	80038f0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	220c      	movs	r2, #12
 80036b2:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d004      	beq.n	80036c8 <HAL_ADC_IRQHandler+0x144>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d109      	bne.n	80036dc <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d074      	beq.n	80037bc <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d06f      	beq.n	80037bc <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d105      	bne.n	80036f4 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fc63 	bl	8002fc4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80036fe:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff fc10 	bl	8002f2a <LL_ADC_REG_IsTriggerSourceSWStart>
 800370a:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d049      	beq.n	80037ae <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d007      	beq.n	8003734 <HAL_ADC_IRQHandler+0x1b0>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d041      	beq.n	80037ae <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003730:	2b00      	cmp	r3, #0
 8003732:	d13c      	bne.n	80037ae <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d135      	bne.n	80037ae <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d12e      	bne.n	80037ae <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fd33 	bl	80031c0 <LL_ADC_INJ_IsConversionOngoing>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d11a      	bne.n	8003796 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800376e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003774:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d112      	bne.n	80037ae <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378c:	f043 0201 	orr.w	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	655a      	str	r2, [r3, #84]	; 0x54
 8003794:	e00b      	b.n	80037ae <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379a:	f043 0210 	orr.w	r2, r3, #16
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	f043 0201 	orr.w	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fd98 	bl	80042e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2260      	movs	r2, #96	; 0x60
 80037ba:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d011      	beq.n	80037ea <HAL_ADC_IRQHandler+0x266>
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00c      	beq.n	80037ea <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f89b 	bl	8003918 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2280      	movs	r2, #128	; 0x80
 80037e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d012      	beq.n	800381a <HAL_ADC_IRQHandler+0x296>
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00d      	beq.n	800381a <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fd7e 	bl	800430c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003818:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003820:	2b00      	cmp	r3, #0
 8003822:	d012      	beq.n	800384a <HAL_ADC_IRQHandler+0x2c6>
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003832:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fd70 	bl	8004320 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	d02b      	beq.n	80038ac <HAL_ADC_IRQHandler+0x328>
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f003 0310 	and.w	r3, r3, #16
 800385a:	2b00      	cmp	r3, #0
 800385c:	d026      	beq.n	80038ac <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8003866:	2301      	movs	r3, #1
 8003868:	61fb      	str	r3, [r7, #28]
 800386a:	e009      	b.n	8003880 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fb99 	bl	8002fa8 <LL_ADC_REG_GetDMATransfer>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 800387c:	2301      	movs	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d10e      	bne.n	80038a4 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	f043 0202 	orr.w	r2, r3, #2
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f844 	bl	800392c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2210      	movs	r2, #16
 80038aa:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d018      	beq.n	80038e8 <HAL_ADC_IRQHandler+0x364>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d013      	beq.n	80038e8 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	f043 0208 	orr.w	r2, r3, #8
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038e0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fd08 	bl	80042f8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 80038e8:	bf00      	nop
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b0b6      	sub	sp, #216	; 0xd8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x22>
 800395e:	2302      	movs	r3, #2
 8003960:	e39e      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x760>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff fc13 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	f040 8383 	bne.w	8004082 <HAL_ADC_ConfigChannel+0x742>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	461a      	mov	r2, r3
 800398a:	f7ff fae1 	bl	8002f50 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fc01 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 8003998:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff fc0d 	bl	80031c0 <LL_ADC_INJ_IsConversionOngoing>
 80039a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f040 81a6 	bne.w	8003d00 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f040 81a1 	bne.w	8003d00 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6819      	ldr	r1, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	461a      	mov	r2, r3
 80039cc:	f7ff fb0d 	bl	8002fea <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	08db      	lsrs	r3, r3, #3
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d00a      	beq.n	8003a08 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6919      	ldr	r1, [r3, #16]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a02:	f7ff fa3d 	bl	8002e80 <LL_ADC_SetOffset>
 8003a06:	e17b      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fa5a 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0xf4>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2100      	movs	r1, #0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff fa4f 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	0e9b      	lsrs	r3, r3, #26
 8003a2e:	f003 021f 	and.w	r2, r3, #31
 8003a32:	e01e      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x132>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff fa44 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8003a52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003a5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8003a62:	2320      	movs	r3, #32
 8003a64:	e004      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8003a66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d105      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x14a>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	0e9b      	lsrs	r3, r3, #26
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	e018      	b.n	8003abc <HAL_ADC_ConfigChannel+0x17c>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003aae:	2320      	movs	r3, #32
 8003ab0:	e004      	b.n	8003abc <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8003ab2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ab6:	fab3 f383 	clz	r3, r3
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d106      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff fa13 	bl	8002ef4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff f9f7 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x1ba>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff f9ec 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8003af0:	4603      	mov	r3, r0
 8003af2:	0e9b      	lsrs	r3, r3, #26
 8003af4:	f003 021f 	and.w	r2, r3, #31
 8003af8:	e01e      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x1f8>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2101      	movs	r1, #1
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff f9e1 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b10:	fa93 f3a3 	rbit	r3, r3
 8003b14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003b18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003b28:	2320      	movs	r3, #32
 8003b2a:	e004      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003b2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b30:	fab3 f383 	clz	r3, r3
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d105      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x210>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	0e9b      	lsrs	r3, r3, #26
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	e018      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x242>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b5c:	fa93 f3a3 	rbit	r3, r3
 8003b60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003b64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003b6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003b74:	2320      	movs	r3, #32
 8003b76:	e004      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b7c:	fab3 f383 	clz	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d106      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff f9b0 	bl	8002ef4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2102      	movs	r1, #2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff f994 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x280>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2102      	movs	r1, #2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff f989 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	0e9b      	lsrs	r3, r3, #26
 8003bba:	f003 021f 	and.w	r2, r3, #31
 8003bbe:	e01e      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x2be>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f97e 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bd6:	fa93 f3a3 	rbit	r3, r3
 8003bda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003bde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003be2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8003bee:	2320      	movs	r3, #32
 8003bf0:	e004      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003bf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x2d6>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	0e9b      	lsrs	r3, r3, #26
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	e016      	b.n	8003c44 <HAL_ADC_ConfigChannel+0x304>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c22:	fa93 f3a3 	rbit	r3, r3
 8003c26:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003c28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003c36:	2320      	movs	r3, #32
 8003c38:	e004      	b.n	8003c44 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c3e:	fab3 f383 	clz	r3, r3
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d106      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2102      	movs	r1, #2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff f94f 	bl	8002ef4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2103      	movs	r1, #3
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff f933 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10a      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x342>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2103      	movs	r1, #3
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff f928 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	0e9b      	lsrs	r3, r3, #26
 8003c7c:	f003 021f 	and.w	r2, r3, #31
 8003c80:	e017      	b.n	8003cb2 <HAL_ADC_ConfigChannel+0x372>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2103      	movs	r1, #3
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff f91d 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c9c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	e003      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d105      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x38a>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	0e9b      	lsrs	r3, r3, #26
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	e011      	b.n	8003cee <HAL_ADC_ConfigChannel+0x3ae>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cda:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003ce2:	2320      	movs	r3, #32
 8003ce4:	e003      	b.n	8003cee <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d106      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2103      	movs	r1, #3
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff f8fa 	bl	8002ef4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fa21 	bl	800314c <LL_ADC_IsEnabled>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f040 81c1 	bne.w	8004094 <HAL_ADC_ConfigChannel+0x754>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6819      	ldr	r1, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f7ff f98e 	bl	8003040 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4a8e      	ldr	r2, [pc, #568]	; (8003f64 <HAL_ADC_ConfigChannel+0x624>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	f040 8130 	bne.w	8003f90 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10b      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x418>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	0e9b      	lsrs	r3, r3, #26
 8003d46:	3301      	adds	r3, #1
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2b09      	cmp	r3, #9
 8003d4e:	bf94      	ite	ls
 8003d50:	2301      	movls	r3, #1
 8003d52:	2300      	movhi	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	e019      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x44c>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d60:	fa93 f3a3 	rbit	r3, r3
 8003d64:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d68:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003d70:	2320      	movs	r3, #32
 8003d72:	e003      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003d74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	2b09      	cmp	r3, #9
 8003d84:	bf94      	ite	ls
 8003d86:	2301      	movls	r3, #1
 8003d88:	2300      	movhi	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d079      	beq.n	8003e84 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d107      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x46c>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	0e9b      	lsrs	r3, r3, #26
 8003da2:	3301      	adds	r3, #1
 8003da4:	069b      	lsls	r3, r3, #26
 8003da6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003daa:	e015      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x498>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db4:	fa93 f3a3 	rbit	r3, r3
 8003db8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003dc4:	2320      	movs	r3, #32
 8003dc6:	e003      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dca:	fab3 f383 	clz	r3, r3
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	069b      	lsls	r3, r3, #26
 8003dd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d109      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x4b8>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	0e9b      	lsrs	r3, r3, #26
 8003dea:	3301      	adds	r3, #1
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	2101      	movs	r1, #1
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	e017      	b.n	8003e28 <HAL_ADC_ConfigChannel+0x4e8>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e00:	fa93 f3a3 	rbit	r3, r3
 8003e04:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003e10:	2320      	movs	r3, #32
 8003e12:	e003      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	2101      	movs	r1, #1
 8003e24:	fa01 f303 	lsl.w	r3, r1, r3
 8003e28:	ea42 0103 	orr.w	r1, r2, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x50e>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	0e9b      	lsrs	r3, r3, #26
 8003e3e:	3301      	adds	r3, #1
 8003e40:	f003 021f 	and.w	r2, r3, #31
 8003e44:	4613      	mov	r3, r2
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	4413      	add	r3, r2
 8003e4a:	051b      	lsls	r3, r3, #20
 8003e4c:	e018      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x540>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	fa93 f3a3 	rbit	r3, r3
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003e66:	2320      	movs	r3, #32
 8003e68:	e003      	b.n	8003e72 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6c:	fab3 f383 	clz	r3, r3
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	3301      	adds	r3, #1
 8003e74:	f003 021f 	and.w	r2, r3, #31
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e80:	430b      	orrs	r3, r1
 8003e82:	e080      	b.n	8003f86 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d107      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x560>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	0e9b      	lsrs	r3, r3, #26
 8003e96:	3301      	adds	r3, #1
 8003e98:	069b      	lsls	r3, r3, #26
 8003e9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e9e:	e015      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x58c>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003eb8:	2320      	movs	r3, #32
 8003eba:	e003      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	069b      	lsls	r3, r3, #26
 8003ec8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d109      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x5ac>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	0e9b      	lsrs	r3, r3, #26
 8003ede:	3301      	adds	r3, #1
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eea:	e017      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x5dc>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	fa93 f3a3 	rbit	r3, r3
 8003ef8:	61fb      	str	r3, [r7, #28]
  return result;
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003f04:	2320      	movs	r3, #32
 8003f06:	e003      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	3301      	adds	r3, #1
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	2101      	movs	r1, #1
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	ea42 0103 	orr.w	r1, r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10d      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x608>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	0e9b      	lsrs	r3, r3, #26
 8003f32:	3301      	adds	r3, #1
 8003f34:	f003 021f 	and.w	r2, r3, #31
 8003f38:	4613      	mov	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3b1e      	subs	r3, #30
 8003f40:	051b      	lsls	r3, r3, #20
 8003f42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f46:	e01d      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x644>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	fa93 f3a3 	rbit	r3, r3
 8003f54:	613b      	str	r3, [r7, #16]
  return result;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d103      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003f60:	2320      	movs	r3, #32
 8003f62:	e005      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x630>
 8003f64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	fab3 f383 	clz	r3, r3
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	3301      	adds	r3, #1
 8003f72:	f003 021f 	and.w	r2, r3, #31
 8003f76:	4613      	mov	r3, r2
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3b1e      	subs	r3, #30
 8003f7e:	051b      	lsls	r3, r3, #20
 8003f80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f84:	430b      	orrs	r3, r1
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	6892      	ldr	r2, [r2, #8]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f7ff f82d 	bl	8002fea <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4b44      	ldr	r3, [pc, #272]	; (80040a8 <HAL_ADC_ConfigChannel+0x768>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d07b      	beq.n	8004094 <HAL_ADC_ConfigChannel+0x754>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f9c:	4843      	ldr	r0, [pc, #268]	; (80040ac <HAL_ADC_ConfigChannel+0x76c>)
 8003f9e:	f7fe ff61 	bl	8002e64 <LL_ADC_GetCommonPathInternalCh>
 8003fa2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fa6:	4842      	ldr	r0, [pc, #264]	; (80040b0 <HAL_ADC_ConfigChannel+0x770>)
 8003fa8:	f7ff f8d0 	bl	800314c <LL_ADC_IsEnabled>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d15d      	bne.n	800406e <HAL_ADC_ConfigChannel+0x72e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a3f      	ldr	r2, [pc, #252]	; (80040b4 <HAL_ADC_ConfigChannel+0x774>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d126      	bne.n	800400a <HAL_ADC_ConfigChannel+0x6ca>
 8003fbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d120      	bne.n	800400a <HAL_ADC_ConfigChannel+0x6ca>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <HAL_ADC_ConfigChannel+0x770>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d160      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003fd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4833      	ldr	r0, [pc, #204]	; (80040ac <HAL_ADC_ConfigChannel+0x76c>)
 8003fde:	f7fe ff2e 	bl	8002e3e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003fe2:	4b35      	ldr	r3, [pc, #212]	; (80040b8 <HAL_ADC_ConfigChannel+0x778>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	099b      	lsrs	r3, r3, #6
 8003fe8:	4a34      	ldr	r2, [pc, #208]	; (80040bc <HAL_ADC_ConfigChannel+0x77c>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	099a      	lsrs	r2, r3, #6
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003ffa:	e002      	b.n	8004002 <HAL_ADC_ConfigChannel+0x6c2>
              {
                wait_loop_index--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f9      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x6bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004008:	e044      	b.n	8004094 <HAL_ADC_ConfigChannel+0x754>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a2c      	ldr	r2, [pc, #176]	; (80040c0 <HAL_ADC_ConfigChannel+0x780>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d113      	bne.n	800403c <HAL_ADC_ConfigChannel+0x6fc>
 8004014:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10d      	bne.n	800403c <HAL_ADC_ConfigChannel+0x6fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <HAL_ADC_ConfigChannel+0x770>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d134      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800402a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800402e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004032:	4619      	mov	r1, r3
 8004034:	481d      	ldr	r0, [pc, #116]	; (80040ac <HAL_ADC_ConfigChannel+0x76c>)
 8004036:	f7fe ff02 	bl	8002e3e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800403a:	e02b      	b.n	8004094 <HAL_ADC_ConfigChannel+0x754>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a20      	ldr	r2, [pc, #128]	; (80040c4 <HAL_ADC_ConfigChannel+0x784>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d126      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x754>
 8004046:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800404a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d120      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x754>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a16      	ldr	r2, [pc, #88]	; (80040b0 <HAL_ADC_ConfigChannel+0x770>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d11b      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800405c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004064:	4619      	mov	r1, r3
 8004066:	4811      	ldr	r0, [pc, #68]	; (80040ac <HAL_ADC_ConfigChannel+0x76c>)
 8004068:	f7fe fee9 	bl	8002e3e <LL_ADC_SetCommonPathInternalCh>
 800406c:	e012      	b.n	8004094 <HAL_ADC_ConfigChannel+0x754>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004072:	f043 0220 	orr.w	r2, r3, #32
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004080:	e008      	b.n	8004094 <HAL_ADC_ConfigChannel+0x754>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800409c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	37d8      	adds	r7, #216	; 0xd8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	80080000 	.word	0x80080000
 80040ac:	50040300 	.word	0x50040300
 80040b0:	50040000 	.word	0x50040000
 80040b4:	c7520000 	.word	0xc7520000
 80040b8:	20000020 	.word	0x20000020
 80040bc:	053e2d63 	.word	0x053e2d63
 80040c0:	cb840000 	.word	0xcb840000
 80040c4:	80000001 	.word	0x80000001

080040c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff f837 	bl	800314c <LL_ADC_IsEnabled>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d15e      	bne.n	80041a2 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	4b30      	ldr	r3, [pc, #192]	; (80041ac <ADC_Enable+0xe4>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00d      	beq.n	800410e <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	f043 0210 	orr.w	r2, r3, #16
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	f043 0201 	orr.w	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e04a      	b.n	80041a4 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff f806 	bl	8003124 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004118:	4825      	ldr	r0, [pc, #148]	; (80041b0 <ADC_Enable+0xe8>)
 800411a:	f7fe fea3 	bl	8002e64 <LL_ADC_GetCommonPathInternalCh>
 800411e:	4603      	mov	r3, r0
 8004120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00f      	beq.n	8004148 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8004128:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <ADC_Enable+0xec>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	099b      	lsrs	r3, r3, #6
 800412e:	4a22      	ldr	r2, [pc, #136]	; (80041b8 <ADC_Enable+0xf0>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	099b      	lsrs	r3, r3, #6
 8004136:	3301      	adds	r3, #1
 8004138:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800413a:	e002      	b.n	8004142 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	3b01      	subs	r3, #1
 8004140:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f9      	bne.n	800413c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004148:	f7fe fe2c 	bl	8002da4 <HAL_GetTick>
 800414c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800414e:	e021      	b.n	8004194 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f7fe fff9 	bl	800314c <LL_ADC_IsEnabled>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d104      	bne.n	800416a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe ffdd 	bl	8003124 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800416a:	f7fe fe1b 	bl	8002da4 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d90d      	bls.n	8004194 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	f043 0210 	orr.w	r2, r3, #16
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	f043 0201 	orr.w	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e007      	b.n	80041a4 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d1d6      	bne.n	8004150 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	8000003f 	.word	0x8000003f
 80041b0:	50040300 	.word	0x50040300
 80041b4:	20000020 	.word	0x20000020
 80041b8:	053e2d63 	.word	0x053e2d63

080041bc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d14b      	bne.n	800426e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d021      	beq.n	8004234 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fe98 	bl	8002f2a <LL_ADC_REG_IsTriggerSourceSWStart>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d032      	beq.n	8004266 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d12b      	bne.n	8004266 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d11f      	bne.n	8004266 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	f043 0201 	orr.w	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	655a      	str	r2, [r3, #84]	; 0x54
 8004232:	e018      	b.n	8004266 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d111      	bne.n	8004266 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004246:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d105      	bne.n	8004266 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425e:	f043 0201 	orr.w	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f7ff fb42 	bl	80038f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800426c:	e00e      	b.n	800428c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f7ff fb56 	bl	800392c <HAL_ADC_ErrorCallback>
}
 8004280:	e004      	b.n	800428c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
}
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f7ff fb2e 	bl	8003904 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ce:	f043 0204 	orr.w	r2, r3, #4
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f7ff fb28 	bl	800392c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042dc:	bf00      	nop
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <__NVIC_SetPriorityGrouping+0x44>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004364:	4013      	ands	r3, r2
 8004366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800437a:	4a04      	ldr	r2, [pc, #16]	; (800438c <__NVIC_SetPriorityGrouping+0x44>)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	60d3      	str	r3, [r2, #12]
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	e000ed00 	.word	0xe000ed00

08004390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004394:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	0a1b      	lsrs	r3, r3, #8
 800439a:	f003 0307 	and.w	r3, r3, #7
}
 800439e:	4618      	mov	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	e000ed00 	.word	0xe000ed00

080043ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	db0b      	blt.n	80043d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	f003 021f 	and.w	r2, r3, #31
 80043c4:	4907      	ldr	r1, [pc, #28]	; (80043e4 <__NVIC_EnableIRQ+0x38>)
 80043c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	2001      	movs	r0, #1
 80043ce:	fa00 f202 	lsl.w	r2, r0, r2
 80043d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	e000e100 	.word	0xe000e100

080043e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	db10      	blt.n	800441c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	f003 021f 	and.w	r2, r3, #31
 8004400:	4909      	ldr	r1, [pc, #36]	; (8004428 <__NVIC_DisableIRQ+0x40>)
 8004402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	2001      	movs	r0, #1
 800440a:	fa00 f202 	lsl.w	r2, r0, r2
 800440e:	3320      	adds	r3, #32
 8004410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004414:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004418:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	e000e100 	.word	0xe000e100

0800442c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443a:	2b00      	cmp	r3, #0
 800443c:	db0c      	blt.n	8004458 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	f003 021f 	and.w	r2, r3, #31
 8004444:	4907      	ldr	r1, [pc, #28]	; (8004464 <__NVIC_SetPendingIRQ+0x38>)
 8004446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	2001      	movs	r0, #1
 800444e:	fa00 f202 	lsl.w	r2, r0, r2
 8004452:	3340      	adds	r3, #64	; 0x40
 8004454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	e000e100 	.word	0xe000e100

08004468 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004476:	2b00      	cmp	r3, #0
 8004478:	db0c      	blt.n	8004494 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	f003 021f 	and.w	r2, r3, #31
 8004480:	4907      	ldr	r1, [pc, #28]	; (80044a0 <__NVIC_ClearPendingIRQ+0x38>)
 8004482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	2001      	movs	r0, #1
 800448a:	fa00 f202 	lsl.w	r2, r0, r2
 800448e:	3360      	adds	r3, #96	; 0x60
 8004490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	e000e100 	.word	0xe000e100

080044a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	6039      	str	r1, [r7, #0]
 80044ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	db0a      	blt.n	80044ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	490c      	ldr	r1, [pc, #48]	; (80044f0 <__NVIC_SetPriority+0x4c>)
 80044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c2:	0112      	lsls	r2, r2, #4
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	440b      	add	r3, r1
 80044c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044cc:	e00a      	b.n	80044e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	4908      	ldr	r1, [pc, #32]	; (80044f4 <__NVIC_SetPriority+0x50>)
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	3b04      	subs	r3, #4
 80044dc:	0112      	lsls	r2, r2, #4
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	440b      	add	r3, r1
 80044e2:	761a      	strb	r2, [r3, #24]
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	e000e100 	.word	0xe000e100
 80044f4:	e000ed00 	.word	0xe000ed00

080044f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b089      	sub	sp, #36	; 0x24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f1c3 0307 	rsb	r3, r3, #7
 8004512:	2b04      	cmp	r3, #4
 8004514:	bf28      	it	cs
 8004516:	2304      	movcs	r3, #4
 8004518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	3304      	adds	r3, #4
 800451e:	2b06      	cmp	r3, #6
 8004520:	d902      	bls.n	8004528 <NVIC_EncodePriority+0x30>
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	3b03      	subs	r3, #3
 8004526:	e000      	b.n	800452a <NVIC_EncodePriority+0x32>
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800452c:	f04f 32ff 	mov.w	r2, #4294967295
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43da      	mvns	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	401a      	ands	r2, r3
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004540:	f04f 31ff 	mov.w	r1, #4294967295
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	fa01 f303 	lsl.w	r3, r1, r3
 800454a:	43d9      	mvns	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004550:	4313      	orrs	r3, r2
         );
}
 8004552:	4618      	mov	r0, r3
 8004554:	3724      	adds	r7, #36	; 0x24
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
	...

08004560 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004564:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <__NVIC_SystemReset+0x20>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004570:	4903      	ldr	r1, [pc, #12]	; (8004580 <__NVIC_SystemReset+0x20>)
 8004572:	4b04      	ldr	r3, [pc, #16]	; (8004584 <__NVIC_SystemReset+0x24>)
 8004574:	4313      	orrs	r3, r2
 8004576:	60cb      	str	r3, [r1, #12]
 8004578:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800457c:	bf00      	nop
 800457e:	e7fd      	b.n	800457c <__NVIC_SystemReset+0x1c>
 8004580:	e000ed00 	.word	0xe000ed00
 8004584:	05fa0004 	.word	0x05fa0004

08004588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff fed9 	bl	8004348 <__NVIC_SetPriorityGrouping>
}
 8004596:	bf00      	nop
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b086      	sub	sp, #24
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	4603      	mov	r3, r0
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	607a      	str	r2, [r7, #4]
 80045aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045ac:	f7ff fef0 	bl	8004390 <__NVIC_GetPriorityGrouping>
 80045b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	6978      	ldr	r0, [r7, #20]
 80045b8:	f7ff ff9e 	bl	80044f8 <NVIC_EncodePriority>
 80045bc:	4602      	mov	r2, r0
 80045be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045c2:	4611      	mov	r1, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff ff6d 	bl	80044a4 <__NVIC_SetPriority>
}
 80045ca:	bf00      	nop
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b082      	sub	sp, #8
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	4603      	mov	r3, r0
 80045da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fee3 	bl	80043ac <__NVIC_EnableIRQ>
}
 80045e6:	bf00      	nop
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	4603      	mov	r3, r0
 80045f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80045f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff fef3 	bl	80043e8 <__NVIC_DisableIRQ>
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800460e:	f7ff ffa7 	bl	8004560 <__NVIC_SystemReset>

08004612 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	4603      	mov	r3, r0
 800461a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800461c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff ff03 	bl	800442c <__NVIC_SetPendingIRQ>
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	4603      	mov	r3, r0
 8004636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff ff13 	bl	8004468 <__NVIC_ClearPendingIRQ>
}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e08e      	b.n	800477c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	4b47      	ldr	r3, [pc, #284]	; (8004784 <HAL_DMA_Init+0x138>)
 8004666:	429a      	cmp	r2, r3
 8004668:	d80f      	bhi.n	800468a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	4b45      	ldr	r3, [pc, #276]	; (8004788 <HAL_DMA_Init+0x13c>)
 8004672:	4413      	add	r3, r2
 8004674:	4a45      	ldr	r2, [pc, #276]	; (800478c <HAL_DMA_Init+0x140>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	009a      	lsls	r2, r3, #2
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a42      	ldr	r2, [pc, #264]	; (8004790 <HAL_DMA_Init+0x144>)
 8004686:	641a      	str	r2, [r3, #64]	; 0x40
 8004688:	e00e      	b.n	80046a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	4b40      	ldr	r3, [pc, #256]	; (8004794 <HAL_DMA_Init+0x148>)
 8004692:	4413      	add	r3, r2
 8004694:	4a3d      	ldr	r2, [pc, #244]	; (800478c <HAL_DMA_Init+0x140>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	091b      	lsrs	r3, r3, #4
 800469c:	009a      	lsls	r2, r3, #2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a3c      	ldr	r2, [pc, #240]	; (8004798 <HAL_DMA_Init+0x14c>)
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f9b6 	bl	8004a6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004708:	d102      	bne.n	8004710 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004718:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800471c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004726:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d010      	beq.n	8004752 <HAL_DMA_Init+0x106>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b04      	cmp	r3, #4
 8004736:	d80c      	bhi.n	8004752 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f9d5 	bl	8004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800474e:	605a      	str	r2, [r3, #4]
 8004750:	e008      	b.n	8004764 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40020407 	.word	0x40020407
 8004788:	bffdfff8 	.word	0xbffdfff8
 800478c:	cccccccd 	.word	0xcccccccd
 8004790:	40020000 	.word	0x40020000
 8004794:	bffdfbf8 	.word	0xbffdfbf8
 8004798:	40020400 	.word	0x40020400

0800479c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_DMA_Start_IT+0x20>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e066      	b.n	800488a <HAL_DMA_Start_IT+0xee>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d155      	bne.n	800487c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f8fb 	bl	80049f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 020e 	orr.w	r2, r2, #14
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e00f      	b.n	8004834 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0204 	bic.w	r2, r2, #4
 8004822:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 020a 	orr.w	r2, r2, #10
 8004832:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800484c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004850:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004856:	2b00      	cmp	r3, #0
 8004858:	d007      	beq.n	800486a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004868:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e005      	b.n	8004888 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004884:	2302      	movs	r3, #2
 8004886:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004888:	7dfb      	ldrb	r3, [r7, #23]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b084      	sub	sp, #16
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	f003 031c 	and.w	r3, r3, #28
 80048b2:	2204      	movs	r2, #4
 80048b4:	409a      	lsls	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d026      	beq.n	800490c <HAL_DMA_IRQHandler+0x7a>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d021      	beq.n	800490c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d107      	bne.n	80048e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0204 	bic.w	r2, r2, #4
 80048e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	f003 021c 	and.w	r2, r3, #28
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	2104      	movs	r1, #4
 80048f4:	fa01 f202 	lsl.w	r2, r1, r2
 80048f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d071      	beq.n	80049e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800490a:	e06c      	b.n	80049e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004910:	f003 031c 	and.w	r3, r3, #28
 8004914:	2202      	movs	r2, #2
 8004916:	409a      	lsls	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d02e      	beq.n	800497e <HAL_DMA_IRQHandler+0xec>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d029      	beq.n	800497e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10b      	bne.n	8004950 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 020a 	bic.w	r2, r2, #10
 8004946:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004954:	f003 021c 	and.w	r2, r3, #28
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	2102      	movs	r1, #2
 800495e:	fa01 f202 	lsl.w	r2, r1, r2
 8004962:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	2b00      	cmp	r3, #0
 8004972:	d038      	beq.n	80049e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800497c:	e033      	b.n	80049e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	f003 031c 	and.w	r3, r3, #28
 8004986:	2208      	movs	r2, #8
 8004988:	409a      	lsls	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4013      	ands	r3, r2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d02a      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x156>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d025      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 020e 	bic.w	r2, r2, #14
 80049aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b0:	f003 021c 	and.w	r2, r3, #28
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	2101      	movs	r1, #1
 80049ba:	fa01 f202 	lsl.w	r2, r1, r2
 80049be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d004      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80049e6:	bf00      	nop
 80049e8:	bf00      	nop
}
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a06:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d004      	beq.n	8004a1a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a18:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	f003 021c 	and.w	r2, r3, #28
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	2101      	movs	r1, #1
 8004a28:	fa01 f202 	lsl.w	r2, r1, r2
 8004a2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b10      	cmp	r3, #16
 8004a3c:	d108      	bne.n	8004a50 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a4e:	e007      	b.n	8004a60 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	60da      	str	r2, [r3, #12]
}
 8004a60:	bf00      	nop
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4b17      	ldr	r3, [pc, #92]	; (8004ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d80a      	bhi.n	8004a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a84:	089b      	lsrs	r3, r3, #2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a8c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6493      	str	r3, [r2, #72]	; 0x48
 8004a94:	e007      	b.n	8004aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9a:	089b      	lsrs	r3, r3, #2
 8004a9c:	009a      	lsls	r2, r3, #2
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004aa0:	4413      	add	r3, r2
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	3b08      	subs	r3, #8
 8004aae:	4a0c      	ldr	r2, [pc, #48]	; (8004ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	091b      	lsrs	r3, r3, #4
 8004ab6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004abc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	40020407 	.word	0x40020407
 8004adc:	4002081c 	.word	0x4002081c
 8004ae0:	cccccccd 	.word	0xcccccccd
 8004ae4:	40020880 	.word	0x40020880

08004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	461a      	mov	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a09      	ldr	r2, [pc, #36]	; (8004b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004b0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2201      	movs	r2, #1
 8004b18:	409a      	lsls	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004b1e:	bf00      	nop
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	1000823f 	.word	0x1000823f
 8004b30:	40020940 	.word	0x40020940

08004b34 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b42:	e14c      	b.n	8004dde <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	2101      	movs	r1, #1
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	4013      	ands	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 813e 	beq.w	8004dd8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d00b      	beq.n	8004b7c <HAL_GPIO_Init+0x48>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d007      	beq.n	8004b7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b70:	2b11      	cmp	r3, #17
 8004b72:	d003      	beq.n	8004b7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b12      	cmp	r3, #18
 8004b7a:	d130      	bne.n	8004bde <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	2203      	movs	r2, #3
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4013      	ands	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	091b      	lsrs	r3, r3, #4
 8004bc8:	f003 0201 	and.w	r2, r3, #1
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	2203      	movs	r2, #3
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_Init+0xea>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b12      	cmp	r3, #18
 8004c1c:	d123      	bne.n	8004c66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	08da      	lsrs	r2, r3, #3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3208      	adds	r2, #8
 8004c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	220f      	movs	r2, #15
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	08da      	lsrs	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3208      	adds	r2, #8
 8004c60:	6939      	ldr	r1, [r7, #16]
 8004c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	2203      	movs	r2, #3
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43db      	mvns	r3, r3
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f003 0203 	and.w	r2, r3, #3
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 8098 	beq.w	8004dd8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004ca8:	4a54      	ldr	r2, [pc, #336]	; (8004dfc <HAL_GPIO_Init+0x2c8>)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	089b      	lsrs	r3, r3, #2
 8004cae:	3302      	adds	r3, #2
 8004cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f003 0303 	and.w	r3, r3, #3
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	220f      	movs	r2, #15
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004cd2:	d019      	beq.n	8004d08 <HAL_GPIO_Init+0x1d4>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a4a      	ldr	r2, [pc, #296]	; (8004e00 <HAL_GPIO_Init+0x2cc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d013      	beq.n	8004d04 <HAL_GPIO_Init+0x1d0>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a49      	ldr	r2, [pc, #292]	; (8004e04 <HAL_GPIO_Init+0x2d0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00d      	beq.n	8004d00 <HAL_GPIO_Init+0x1cc>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a48      	ldr	r2, [pc, #288]	; (8004e08 <HAL_GPIO_Init+0x2d4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d007      	beq.n	8004cfc <HAL_GPIO_Init+0x1c8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a47      	ldr	r2, [pc, #284]	; (8004e0c <HAL_GPIO_Init+0x2d8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d101      	bne.n	8004cf8 <HAL_GPIO_Init+0x1c4>
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	e008      	b.n	8004d0a <HAL_GPIO_Init+0x1d6>
 8004cf8:	2307      	movs	r3, #7
 8004cfa:	e006      	b.n	8004d0a <HAL_GPIO_Init+0x1d6>
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e004      	b.n	8004d0a <HAL_GPIO_Init+0x1d6>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e002      	b.n	8004d0a <HAL_GPIO_Init+0x1d6>
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <HAL_GPIO_Init+0x1d6>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	f002 0203 	and.w	r2, r2, #3
 8004d10:	0092      	lsls	r2, r2, #2
 8004d12:	4093      	lsls	r3, r2
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d1a:	4938      	ldr	r1, [pc, #224]	; (8004dfc <HAL_GPIO_Init+0x2c8>)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	089b      	lsrs	r3, r3, #2
 8004d20:	3302      	adds	r3, #2
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d28:	4b39      	ldr	r3, [pc, #228]	; (8004e10 <HAL_GPIO_Init+0x2dc>)
 8004d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	43db      	mvns	r3, r3
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4013      	ands	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d4e:	4a30      	ldr	r2, [pc, #192]	; (8004e10 <HAL_GPIO_Init+0x2dc>)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004d56:	4b2e      	ldr	r3, [pc, #184]	; (8004e10 <HAL_GPIO_Init+0x2dc>)
 8004d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4013      	ands	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d7c:	4a24      	ldr	r2, [pc, #144]	; (8004e10 <HAL_GPIO_Init+0x2dc>)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d84:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <HAL_GPIO_Init+0x2dc>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4013      	ands	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004da8:	4a19      	ldr	r2, [pc, #100]	; (8004e10 <HAL_GPIO_Init+0x2dc>)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004dae:	4b18      	ldr	r3, [pc, #96]	; (8004e10 <HAL_GPIO_Init+0x2dc>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	43db      	mvns	r3, r3
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004dd2:	4a0f      	ldr	r2, [pc, #60]	; (8004e10 <HAL_GPIO_Init+0x2dc>)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f47f aeab 	bne.w	8004b44 <HAL_GPIO_Init+0x10>
  }
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	48000400 	.word	0x48000400
 8004e04:	48000800 	.word	0x48000800
 8004e08:	48000c00 	.word	0x48000c00
 8004e0c:	48001000 	.word	0x48001000
 8004e10:	58000800 	.word	0x58000800

08004e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	807b      	strh	r3, [r7, #2]
 8004e20:	4613      	mov	r3, r2
 8004e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e24:	787b      	ldrb	r3, [r7, #1]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e2a:	887a      	ldrh	r2, [r7, #2]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e30:	e002      	b.n	8004e38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e32:	887a      	ldrh	r2, [r7, #2]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004e4a:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <HAL_HSEM_IRQHandler+0x30>)
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004e50:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <HAL_HSEM_IRQHandler+0x30>)
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	43db      	mvns	r3, r3
 8004e58:	4906      	ldr	r1, [pc, #24]	; (8004e74 <HAL_HSEM_IRQHandler+0x30>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004e5e:	4a05      	ldr	r2, [pc, #20]	; (8004e74 <HAL_HSEM_IRQHandler+0x30>)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f807 	bl	8004e78 <HAL_HSEM_FreeCallback>
}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	58001500 	.word	0x58001500

08004e78 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e8e:	b08b      	sub	sp, #44	; 0x2c
 8004e90:	af06      	add	r7, sp, #24
 8004e92:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e0ad      	b.n	8004ffa <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f00d fffe 	bl	8012eb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2203      	movs	r2, #3
 8004ebc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f004 f836 	bl	8008f36 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eca:	2300      	movs	r3, #0
 8004ecc:	73fb      	strb	r3, [r7, #15]
 8004ece:	e035      	b.n	8004f3c <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	015b      	lsls	r3, r3, #5
 8004ed6:	4413      	add	r3, r2
 8004ed8:	3329      	adds	r3, #41	; 0x29
 8004eda:	2201      	movs	r2, #1
 8004edc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	015b      	lsls	r3, r3, #5
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3328      	adds	r3, #40	; 0x28
 8004ee8:	7bfa      	ldrb	r2, [r7, #15]
 8004eea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	7bfa      	ldrb	r2, [r7, #15]
 8004ef0:	b291      	uxth	r1, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	015b      	lsls	r3, r3, #5
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3336      	adds	r3, #54	; 0x36
 8004efa:	460a      	mov	r2, r1
 8004efc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	015b      	lsls	r3, r3, #5
 8004f04:	4413      	add	r3, r2
 8004f06:	332b      	adds	r3, #43	; 0x2b
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	015b      	lsls	r3, r3, #5
 8004f12:	4413      	add	r3, r2
 8004f14:	3338      	adds	r3, #56	; 0x38
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	015b      	lsls	r3, r3, #5
 8004f20:	4413      	add	r3, r2
 8004f22:	333c      	adds	r3, #60	; 0x3c
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	015b      	lsls	r3, r3, #5
 8004f30:	4413      	add	r3, r2
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	73fb      	strb	r3, [r7, #15]
 8004f3c:	7bfa      	ldrb	r2, [r7, #15]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d3c4      	bcc.n	8004ed0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f46:	2300      	movs	r3, #0
 8004f48:	73fb      	strb	r3, [r7, #15]
 8004f4a:	e031      	b.n	8004fb0 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	015b      	lsls	r3, r3, #5
 8004f52:	4413      	add	r3, r2
 8004f54:	f203 1329 	addw	r3, r3, #297	; 0x129
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	015b      	lsls	r3, r3, #5
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004f68:	7bfa      	ldrb	r2, [r7, #15]
 8004f6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	015b      	lsls	r3, r3, #5
 8004f72:	4413      	add	r3, r2
 8004f74:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	015b      	lsls	r3, r3, #5
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	015b      	lsls	r3, r3, #5
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	330a      	adds	r3, #10
 8004fa2:	015b      	lsls	r3, r3, #5
 8004fa4:	4413      	add	r3, r2
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	3301      	adds	r3, #1
 8004fae:	73fb      	strb	r3, [r7, #15]
 8004fb0:	7bfa      	ldrb	r2, [r7, #15]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d3c8      	bcc.n	8004f4c <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	687e      	ldr	r6, [r7, #4]
 8004fc2:	466d      	mov	r5, sp
 8004fc4:	f106 0410 	add.w	r4, r6, #16
 8004fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	602b      	str	r3, [r5, #0]
 8004fd0:	1d33      	adds	r3, r6, #4
 8004fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fd4:	6838      	ldr	r0, [r7, #0]
 8004fd6:	f003 ffc9 	bl	8008f6c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d102      	bne.n	8004ff8 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fe59 	bl	8005caa <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005002 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_PCD_Start+0x16>
 8005014:	2302      	movs	r3, #2
 8005016:	e012      	b.n	800503e <HAL_PCD_Start+0x3c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f005 f999 	bl	800a35c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f003 ff68 	bl	8008f04 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f005 f999 	bl	800a38a <USB_ReadInterrupts>
 8005058:	4603      	mov	r3, r0
 800505a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800505e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005062:	d102      	bne.n	800506a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fb33 	bl	80056d0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f005 f98b 	bl	800a38a <USB_ReadInterrupts>
 8005074:	4603      	mov	r3, r0
 8005076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800507e:	d112      	bne.n	80050a6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005088:	b29a      	uxth	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005092:	b292      	uxth	r2, r2
 8005094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f00d ff92 	bl	8012fc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800509e:	2100      	movs	r1, #0
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f91e 	bl	80052e2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f005 f96d 	bl	800a38a <USB_ReadInterrupts>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ba:	d10b      	bne.n	80050d4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050ce:	b292      	uxth	r2, r2
 80050d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f005 f956 	bl	800a38a <USB_ReadInterrupts>
 80050de:	4603      	mov	r3, r0
 80050e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e8:	d10b      	bne.n	8005102 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050fc:	b292      	uxth	r2, r2
 80050fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f005 f93f 	bl	800a38a <USB_ReadInterrupts>
 800510c:	4603      	mov	r3, r0
 800510e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005116:	d133      	bne.n	8005180 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005120:	b29a      	uxth	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0204 	bic.w	r2, r2, #4
 800512a:	b292      	uxth	r2, r2
 800512c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005138:	b29a      	uxth	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0208 	bic.w	r2, r2, #8
 8005142:	b292      	uxth	r2, r2
 8005144:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800514e:	2b01      	cmp	r3, #1
 8005150:	d107      	bne.n	8005162 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800515a:	2100      	movs	r1, #0
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fdce 	bl	8005cfe <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f00d ff66 	bl	8013034 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005170:	b29a      	uxth	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800517a:	b292      	uxth	r2, r2
 800517c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f005 f900 	bl	800a38a <USB_ReadInterrupts>
 800518a:	4603      	mov	r3, r0
 800518c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005194:	d126      	bne.n	80051e4 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800519e:	b29a      	uxth	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0208 	orr.w	r2, r2, #8
 80051a8:	b292      	uxth	r2, r2
 80051aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c0:	b292      	uxth	r2, r2
 80051c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0204 	orr.w	r2, r2, #4
 80051d8:	b292      	uxth	r2, r2
 80051da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f00d ff0e 	bl	8013000 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f005 f8ce 	bl	800a38a <USB_ReadInterrupts>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	2b80      	cmp	r3, #128	; 0x80
 80051f6:	d13f      	bne.n	8005278 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005200:	b29a      	uxth	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800520a:	b292      	uxth	r2, r2
 800520c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005216:	2b00      	cmp	r3, #0
 8005218:	d12b      	bne.n	8005272 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005222:	b29a      	uxth	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0204 	orr.w	r2, r2, #4
 800522c:	b292      	uxth	r2, r2
 800522e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800523a:	b29a      	uxth	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0208 	orr.w	r2, r2, #8
 8005244:	b292      	uxth	r2, r2
 8005246:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800525a:	b29b      	uxth	r3, r3
 800525c:	089b      	lsrs	r3, r3, #2
 800525e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005268:	2101      	movs	r1, #1
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fd47 	bl	8005cfe <HAL_PCDEx_LPM_Callback>
 8005270:	e002      	b.n	8005278 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f00d fec4 	bl	8013000 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f005 f884 	bl	800a38a <USB_ReadInterrupts>
 8005282:	4603      	mov	r3, r0
 8005284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800528c:	d10e      	bne.n	80052ac <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005296:	b29a      	uxth	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052a0:	b292      	uxth	r2, r2
 80052a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f00d fe7d 	bl	8012fa6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f005 f86a 	bl	800a38a <USB_ReadInterrupts>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c0:	d10b      	bne.n	80052da <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052d4:	b292      	uxth	r2, r2
 80052d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	460b      	mov	r3, r1
 80052ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_PCD_SetAddress+0x1a>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e013      	b.n	8005324 <HAL_PCD_SetAddress+0x42>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	78fa      	ldrb	r2, [r7, #3]
 8005308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	78fa      	ldrb	r2, [r7, #3]
 8005312:	4611      	mov	r1, r2
 8005314:	4618      	mov	r0, r3
 8005316:	f005 f80d 	bl	800a334 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	4608      	mov	r0, r1
 8005336:	4611      	mov	r1, r2
 8005338:	461a      	mov	r2, r3
 800533a:	4603      	mov	r3, r0
 800533c:	70fb      	strb	r3, [r7, #3]
 800533e:	460b      	mov	r3, r1
 8005340:	803b      	strh	r3, [r7, #0]
 8005342:	4613      	mov	r3, r2
 8005344:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800534a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800534e:	2b00      	cmp	r3, #0
 8005350:	da0b      	bge.n	800536a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	015b      	lsls	r3, r3, #5
 800535a:	3328      	adds	r3, #40	; 0x28
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	4413      	add	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	705a      	strb	r2, [r3, #1]
 8005368:	e00b      	b.n	8005382 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800536a:	78fb      	ldrb	r3, [r7, #3]
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	015b      	lsls	r3, r3, #5
 8005372:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	4413      	add	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	b2da      	uxtb	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800538e:	883a      	ldrh	r2, [r7, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	78ba      	ldrb	r2, [r7, #2]
 8005398:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	785b      	ldrb	r3, [r3, #1]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d004      	beq.n	80053ac <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80053ac:	78bb      	ldrb	r3, [r7, #2]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d102      	bne.n	80053b8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_PCD_EP_Open+0x9a>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e00e      	b.n	80053e4 <HAL_PCD_EP_Open+0xb8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68f9      	ldr	r1, [r7, #12]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f003 fded 	bl	8008fb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80053e2:	7afb      	ldrb	r3, [r7, #11]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	da0b      	bge.n	8005418 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	015b      	lsls	r3, r3, #5
 8005408:	3328      	adds	r3, #40	; 0x28
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4413      	add	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2201      	movs	r2, #1
 8005414:	705a      	strb	r2, [r3, #1]
 8005416:	e00b      	b.n	8005430 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	015b      	lsls	r3, r3, #5
 8005420:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	4413      	add	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	b2da      	uxtb	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005442:	2b01      	cmp	r3, #1
 8005444:	d101      	bne.n	800544a <HAL_PCD_EP_Close+0x5e>
 8005446:	2302      	movs	r3, #2
 8005448:	e00e      	b.n	8005468 <HAL_PCD_EP_Close+0x7c>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68f9      	ldr	r1, [r7, #12]
 8005458:	4618      	mov	r0, r3
 800545a:	f004 f959 	bl	8009710 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	607a      	str	r2, [r7, #4]
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	460b      	mov	r3, r1
 800547e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005480:	7afb      	ldrb	r3, [r7, #11]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	015b      	lsls	r3, r3, #5
 8005488:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2200      	movs	r2, #0
 80054a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2200      	movs	r2, #0
 80054a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054aa:	7afb      	ldrb	r3, [r7, #11]
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054b6:	7afb      	ldrb	r3, [r7, #11]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d106      	bne.n	80054ce <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6979      	ldr	r1, [r7, #20]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f004 fb0f 	bl	8009aea <USB_EPStartXfer>
 80054cc:	e005      	b.n	80054da <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6979      	ldr	r1, [r7, #20]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f004 fb08 	bl	8009aea <USB_EPStartXfer>
  }

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	330a      	adds	r3, #10
 80054fa:	015b      	lsls	r3, r3, #5
 80054fc:	4413      	add	r3, r2
 80054fe:	3304      	adds	r3, #4
 8005500:	681b      	ldr	r3, [r3, #0]
}
 8005502:	4618      	mov	r0, r3
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b086      	sub	sp, #24
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
 800551a:	460b      	mov	r3, r1
 800551c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800551e:	7afb      	ldrb	r3, [r7, #11]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	015b      	lsls	r3, r3, #5
 8005526:	3328      	adds	r3, #40	; 0x28
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2200      	movs	r2, #0
 800553e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2201      	movs	r2, #1
 8005544:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005546:	7afb      	ldrb	r3, [r7, #11]
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	b2da      	uxtb	r2, r3
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005552:	7afb      	ldrb	r3, [r7, #11]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	2b00      	cmp	r3, #0
 800555a:	d106      	bne.n	800556a <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6979      	ldr	r1, [r7, #20]
 8005562:	4618      	mov	r0, r3
 8005564:	f004 fac1 	bl	8009aea <USB_EPStartXfer>
 8005568:	e005      	b.n	8005576 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6979      	ldr	r1, [r7, #20]
 8005570:	4618      	mov	r0, r3
 8005572:	f004 faba 	bl	8009aea <USB_EPStartXfer>
  }

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	f003 0207 	and.w	r2, r3, #7
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	429a      	cmp	r2, r3
 8005598:	d901      	bls.n	800559e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e046      	b.n	800562c <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800559e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	da0b      	bge.n	80055be <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	015b      	lsls	r3, r3, #5
 80055ae:	3328      	adds	r3, #40	; 0x28
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4413      	add	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	705a      	strb	r2, [r3, #1]
 80055bc:	e009      	b.n	80055d2 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	015b      	lsls	r3, r3, #5
 80055c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	4413      	add	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_PCD_EP_SetStall+0x72>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e01c      	b.n	800562c <HAL_PCD_EP_SetStall+0xac>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68f9      	ldr	r1, [r7, #12]
 8005600:	4618      	mov	r0, r3
 8005602:	f004 fd98 	bl	800a136 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	2b00      	cmp	r3, #0
 800560e:	d108      	bne.n	8005622 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800561a:	4619      	mov	r1, r3
 800561c:	4610      	mov	r0, r2
 800561e:	f004 fec4 	bl	800a3aa <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	f003 020f 	and.w	r2, r3, #15
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	429a      	cmp	r2, r3
 800564c:	d901      	bls.n	8005652 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e03a      	b.n	80056c8 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005652:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005656:	2b00      	cmp	r3, #0
 8005658:	da0b      	bge.n	8005672 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800565a:	78fb      	ldrb	r3, [r7, #3]
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	015b      	lsls	r3, r3, #5
 8005662:	3328      	adds	r3, #40	; 0x28
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	4413      	add	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	705a      	strb	r2, [r3, #1]
 8005670:	e00b      	b.n	800568a <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	015b      	lsls	r3, r3, #5
 800567a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	4413      	add	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	b2da      	uxtb	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <HAL_PCD_EP_ClrStall+0x76>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e00e      	b.n	80056c8 <HAL_PCD_EP_ClrStall+0x94>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f004 fd8d 	bl	800a1d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08e      	sub	sp, #56	; 0x38
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80056d8:	e29c      	b.n	8005c14 <PCD_EP_ISR_Handler+0x544>
  {
    wIstr = hpcd->Instance->ISTR;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80056e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	f003 030f 	and.w	r3, r3, #15
 80056ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80056f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f040 8152 	bne.w	800599e <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80056fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b00      	cmp	r3, #0
 8005702:	d150      	bne.n	80057a6 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005714:	81fb      	strh	r3, [r7, #14]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	89fb      	ldrh	r3, [r7, #14]
 800571c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005724:	b29b      	uxth	r3, r3
 8005726:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3328      	adds	r3, #40	; 0x28
 800572c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005736:	b29b      	uxth	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4413      	add	r3, r2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	4413      	add	r3, r2
 8005748:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	695a      	ldr	r2, [r3, #20]
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	441a      	add	r2, r3
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005764:	2100      	movs	r1, #0
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f00d fc06 	bl	8012f78 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 824d 	beq.w	8005c14 <PCD_EP_ISR_Handler+0x544>
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	f040 8248 	bne.w	8005c14 <PCD_EP_ISR_Handler+0x544>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800578a:	b2db      	uxtb	r3, r3
 800578c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005790:	b2da      	uxtb	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	b292      	uxth	r2, r2
 8005798:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80057a4:	e236      	b.n	8005c14 <PCD_EP_ISR_Handler+0x544>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80057b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80057b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d032      	beq.n	8005826 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	461a      	mov	r2, r3
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	4413      	add	r3, r2
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6812      	ldr	r2, [r2, #0]
 80057d8:	4413      	add	r3, r2
 80057da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	f004 fe22 	bl	800a444 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	b29a      	uxth	r2, r3
 8005808:	f640 738f 	movw	r3, #3983	; 0xf8f
 800580c:	4013      	ands	r3, r2
 800580e:	823b      	strh	r3, [r7, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	8a3a      	ldrh	r2, [r7, #16]
 8005816:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800581a:	b292      	uxth	r2, r2
 800581c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f00d fb80 	bl	8012f24 <HAL_PCD_SetupStageCallback>
 8005824:	e1f6      	b.n	8005c14 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005826:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800582a:	2b00      	cmp	r3, #0
 800582c:	f280 81f2 	bge.w	8005c14 <PCD_EP_ISR_Handler+0x544>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	b29a      	uxth	r2, r3
 8005838:	f640 738f 	movw	r3, #3983	; 0xf8f
 800583c:	4013      	ands	r3, r2
 800583e:	83fb      	strh	r3, [r7, #30]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	8bfa      	ldrh	r2, [r7, #30]
 8005846:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800584a:	b292      	uxth	r2, r2
 800584c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005856:	b29b      	uxth	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	4413      	add	r3, r2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6812      	ldr	r2, [r2, #0]
 8005866:	4413      	add	r3, r2
 8005868:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d019      	beq.n	80058b2 <PCD_EP_ISR_Handler+0x1e2>
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d015      	beq.n	80058b2 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	6959      	ldr	r1, [r3, #20]
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005896:	b29b      	uxth	r3, r3
 8005898:	f004 fdd4 	bl	800a444 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	441a      	add	r2, r3
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80058aa:	2100      	movs	r1, #0
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f00d fb4b 	bl	8012f48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	61bb      	str	r3, [r7, #24]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	461a      	mov	r2, r3
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	4413      	add	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d112      	bne.n	8005900 <PCD_EP_ISR_Handler+0x230>
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	801a      	strh	r2, [r3, #0]
 80058fe:	e02f      	b.n	8005960 <PCD_EP_ISR_Handler+0x290>
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	2b3e      	cmp	r3, #62	; 0x3e
 8005906:	d813      	bhi.n	8005930 <PCD_EP_ISR_Handler+0x260>
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	085b      	lsrs	r3, r3, #1
 800590e:	633b      	str	r3, [r7, #48]	; 0x30
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <PCD_EP_ISR_Handler+0x252>
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	3301      	adds	r3, #1
 8005920:	633b      	str	r3, [r7, #48]	; 0x30
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	b29b      	uxth	r3, r3
 8005926:	029b      	lsls	r3, r3, #10
 8005928:	b29a      	uxth	r2, r3
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	e017      	b.n	8005960 <PCD_EP_ISR_Handler+0x290>
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	633b      	str	r3, [r7, #48]	; 0x30
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	f003 031f 	and.w	r3, r3, #31
 8005940:	2b00      	cmp	r3, #0
 8005942:	d102      	bne.n	800594a <PCD_EP_ISR_Handler+0x27a>
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	3b01      	subs	r3, #1
 8005948:	633b      	str	r3, [r7, #48]	; 0x30
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	b29b      	uxth	r3, r3
 800594e:	029b      	lsls	r3, r3, #10
 8005950:	b29b      	uxth	r3, r3
 8005952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800595a:	b29a      	uxth	r2, r3
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800596c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005970:	827b      	strh	r3, [r7, #18]
 8005972:	8a7b      	ldrh	r3, [r7, #18]
 8005974:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005978:	827b      	strh	r3, [r7, #18]
 800597a:	8a7b      	ldrh	r3, [r7, #18]
 800597c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005980:	827b      	strh	r3, [r7, #18]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	8a7b      	ldrh	r3, [r7, #18]
 8005988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800598c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005998:	b29b      	uxth	r3, r3
 800599a:	8013      	strh	r3, [r2, #0]
 800599c:	e13a      	b.n	8005c14 <PCD_EP_ISR_Handler+0x544>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	857b      	strh	r3, [r7, #42]	; 0x2a
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80059b0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f280 80d6 	bge.w	8005b66 <PCD_EP_ISR_Handler+0x496>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80059d0:	4013      	ands	r3, r2
 80059d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	461a      	mov	r2, r3
 80059da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80059e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059e8:	b292      	uxth	r2, r2
 80059ea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80059ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059f0:	015b      	lsls	r3, r3, #5
 80059f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	4413      	add	r3, r2
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	7b1b      	ldrb	r3, [r3, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d11f      	bne.n	8005a44 <PCD_EP_ISR_Handler+0x374>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	4413      	add	r3, r2
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a28:	86fb      	strh	r3, [r7, #54]	; 0x36
          if (count != 0U)
 8005a2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d075      	beq.n	8005b1c <PCD_EP_ISR_Handler+0x44c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	6959      	ldr	r1, [r3, #20]
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	88da      	ldrh	r2, [r3, #6]
 8005a3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a3e:	f004 fd01 	bl	800a444 <USB_ReadPMA>
 8005a42:	e06b      	b.n	8005b1c <PCD_EP_ISR_Handler+0x44c>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	441a      	add	r2, r3
 8005a6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01f      	beq.n	8005ade <PCD_EP_ISR_Handler+0x40e>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	4413      	add	r3, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6812      	ldr	r2, [r2, #0]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ac2:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8005ac4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d028      	beq.n	8005b1c <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	6959      	ldr	r1, [r3, #20]
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	891a      	ldrh	r2, [r3, #8]
 8005ad6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ad8:	f004 fcb4 	bl	800a444 <USB_ReadPMA>
 8005adc:	e01e      	b.n	8005b1c <PCD_EP_ISR_Handler+0x44c>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	4413      	add	r3, r2
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6812      	ldr	r2, [r2, #0]
 8005af6:	4413      	add	r3, r2
 8005af8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b02:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8005b04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d008      	beq.n	8005b1c <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	6959      	ldr	r1, [r3, #20]
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	895a      	ldrh	r2, [r3, #10]
 8005b16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b18:	f004 fc94 	bl	800a444 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b22:	441a      	add	r2, r3
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	695a      	ldr	r2, [r3, #20]
 8005b2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b2e:	441a      	add	r2, r3
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d004      	beq.n	8005b46 <PCD_EP_ISR_Handler+0x476>
 8005b3c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d206      	bcs.n	8005b54 <PCD_EP_ISR_Handler+0x484>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f00d f9fb 	bl	8012f48 <HAL_PCD_DataOutStageCallback>
 8005b52:	e008      	b.n	8005b66 <PCD_EP_ISR_Handler+0x496>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	7819      	ldrb	r1, [r3, #0]
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	695a      	ldr	r2, [r3, #20]
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff fc85 	bl	8005470 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005b66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d051      	beq.n	8005c14 <PCD_EP_ISR_Handler+0x544>
      {
        ep = &hpcd->IN_ep[epindex];
 8005b70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005b74:	015b      	lsls	r3, r3, #5
 8005b76:	3328      	adds	r3, #40	; 0x28
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b98:	843b      	strh	r3, [r7, #32]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	441a      	add	r2, r3
 8005ba8:	8c3b      	ldrh	r3, [r7, #32]
 8005baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4413      	add	r3, r2
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	695a      	ldr	r2, [r3, #20]
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	441a      	add	r2, r3
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d106      	bne.n	8005c02 <PCD_EP_ISR_Handler+0x532>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f00d f9bc 	bl	8012f78 <HAL_PCD_DataInStageCallback>
 8005c00:	e008      	b.n	8005c14 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	7819      	ldrb	r1, [r3, #0]
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	695a      	ldr	r2, [r3, #20]
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff fc7d 	bl	800550e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	b21b      	sxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f6ff ad5a 	blt.w	80056da <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3738      	adds	r7, #56	; 0x38
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	607b      	str	r3, [r7, #4]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	817b      	strh	r3, [r7, #10]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c42:	897b      	ldrh	r3, [r7, #10]
 8005c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d008      	beq.n	8005c60 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c4e:	897b      	ldrh	r3, [r7, #10]
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	015b      	lsls	r3, r3, #5
 8005c56:	3328      	adds	r3, #40	; 0x28
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	e006      	b.n	8005c6e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c60:	897b      	ldrh	r3, [r7, #10]
 8005c62:	015b      	lsls	r3, r3, #5
 8005c64:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005c6e:	893b      	ldrh	r3, [r7, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d107      	bne.n	8005c84 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2200      	movs	r2, #0
 8005c78:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	80da      	strh	r2, [r3, #6]
 8005c82:	e00b      	b.n	8005c9c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2201      	movs	r2, #1
 8005c88:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	0c1b      	lsrs	r3, r3, #16
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b085      	sub	sp, #20
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f043 0302 	orr.w	r3, r3, #2
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	460b      	mov	r3, r1
 8005d08:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d1c:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a04      	ldr	r2, [pc, #16]	; (8005d34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d26:	6013      	str	r3, [r2, #0]
}
 8005d28:	bf00      	nop
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	58000400 	.word	0x58000400

08005d38 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005d3c:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <HAL_PWREx_GetVoltageRange+0x18>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	58000400 	.word	0x58000400

08005d54 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005d58:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	4a04      	ldr	r2, [pc, #16]	; (8005d70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d62:	6053      	str	r3, [r2, #4]
}
 8005d64:	bf00      	nop
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	58000400 	.word	0x58000400

08005d74 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d86:	d101      	bne.n	8005d8c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <LL_RCC_HSE_Enable>:
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005daa:	6013      	str	r3, [r2, #0]
}
 8005dac:	bf00      	nop
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <LL_RCC_HSE_Disable>:
{
 8005db6:	b480      	push	{r7}
 8005db8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc8:	6013      	str	r3, [r2, #0]
}
 8005dca:	bf00      	nop
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <LL_RCC_HSE_IsReady>:
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005de6:	d101      	bne.n	8005dec <LL_RCC_HSE_IsReady+0x18>
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <LL_RCC_HSE_IsReady+0x1a>
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <LL_RCC_HSI_Enable>:
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e0a:	6013      	str	r3, [r2, #0]
}
 8005e0c:	bf00      	nop
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <LL_RCC_HSI_Disable>:
{
 8005e16:	b480      	push	{r7}
 8005e18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e28:	6013      	str	r3, [r2, #0]
}
 8005e2a:	bf00      	nop
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <LL_RCC_HSI_IsReady>:
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e46:	d101      	bne.n	8005e4c <LL_RCC_HSI_IsReady+0x18>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <LL_RCC_HSI_IsReady+0x1a>
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	061b      	lsls	r3, r3, #24
 8005e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e72:	4313      	orrs	r3, r2
 8005e74:	604b      	str	r3, [r1, #4]
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <LL_RCC_HSI48_Enable>:
{
 8005e82:	b480      	push	{r7}
 8005e84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005e9a:	bf00      	nop
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <LL_RCC_HSI48_Disable>:
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eb4:	f023 0301 	bic.w	r3, r3, #1
 8005eb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005ebc:	bf00      	nop
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <LL_RCC_HSI48_IsReady>:
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d101      	bne.n	8005ede <LL_RCC_HSI48_IsReady+0x18>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <LL_RCC_HSI48_IsReady+0x1a>
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <LL_RCC_LSE_Enable>:
{
 8005eea:	b480      	push	{r7}
 8005eec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005efa:	f043 0301 	orr.w	r3, r3, #1
 8005efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f02:	bf00      	nop
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <LL_RCC_LSE_Disable>:
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f1c:	f023 0301 	bic.w	r3, r3, #1
 8005f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f24:	bf00      	nop
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <LL_RCC_LSE_EnableBypass>:
{
 8005f2e:	b480      	push	{r7}
 8005f30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f3e:	f043 0304 	orr.w	r3, r3, #4
 8005f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f46:	bf00      	nop
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <LL_RCC_LSE_DisableBypass>:
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f60:	f023 0304 	bic.w	r3, r3, #4
 8005f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f68:	bf00      	nop
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <LL_RCC_LSE_IsReady>:
{
 8005f72:	b480      	push	{r7}
 8005f74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d101      	bne.n	8005f8a <LL_RCC_LSE_IsReady+0x18>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <LL_RCC_LSE_IsReady+0x1a>
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <LL_RCC_LSI1_Enable>:
{
 8005f96:	b480      	push	{r7}
 8005f98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fa6:	f043 0301 	orr.w	r3, r3, #1
 8005faa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005fae:	bf00      	nop
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <LL_RCC_LSI1_Disable>:
{
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fc8:	f023 0301 	bic.w	r3, r3, #1
 8005fcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005fd0:	bf00      	nop
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <LL_RCC_LSI1_IsReady>:
{
 8005fda:	b480      	push	{r7}
 8005fdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d101      	bne.n	8005ff2 <LL_RCC_LSI1_IsReady+0x18>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <LL_RCC_LSI1_IsReady+0x1a>
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <LL_RCC_LSI2_Enable>:
{
 8005ffe:	b480      	push	{r7}
 8006000:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800600a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800600e:	f043 0304 	orr.w	r3, r3, #4
 8006012:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006016:	bf00      	nop
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <LL_RCC_LSI2_Disable>:
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800602c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006030:	f023 0304 	bic.w	r3, r3, #4
 8006034:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006038:	bf00      	nop
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <LL_RCC_LSI2_IsReady>:
{
 8006042:	b480      	push	{r7}
 8006044:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800604a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800604e:	f003 0308 	and.w	r3, r3, #8
 8006052:	2b08      	cmp	r3, #8
 8006054:	d101      	bne.n	800605a <LL_RCC_LSI2_IsReady+0x18>
 8006056:	2301      	movs	r3, #1
 8006058:	e000      	b.n	800605c <LL_RCC_LSI2_IsReady+0x1a>
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <LL_RCC_LSI2_SetTrimming>:
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800606e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006076:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006082:	4313      	orrs	r3, r2
 8006084:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <LL_RCC_MSI_Enable>:
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060a2:	f043 0301 	orr.w	r3, r3, #1
 80060a6:	6013      	str	r3, [r2, #0]
}
 80060a8:	bf00      	nop
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <LL_RCC_MSI_Disable>:
{
 80060b2:	b480      	push	{r7}
 80060b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80060b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060c0:	f023 0301 	bic.w	r3, r3, #1
 80060c4:	6013      	str	r3, [r2, #0]
}
 80060c6:	bf00      	nop
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <LL_RCC_MSI_IsReady>:
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80060d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d101      	bne.n	80060e6 <LL_RCC_MSI_IsReady+0x16>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e000      	b.n	80060e8 <LL_RCC_MSI_IsReady+0x18>
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <LL_RCC_MSI_SetRange>:
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80060fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006104:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4313      	orrs	r3, r2
 800610c:	600b      	str	r3, [r1, #0]
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <LL_RCC_MSI_GetRange>:
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800612a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2bb0      	cmp	r3, #176	; 0xb0
 8006130:	d901      	bls.n	8006136 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006132:	23b0      	movs	r3, #176	; 0xb0
 8006134:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006136:	687b      	ldr	r3, [r7, #4]
}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800614c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800615e:	4313      	orrs	r3, r2
 8006160:	604b      	str	r3, [r1, #4]
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <LL_RCC_SetSysClkSource>:
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f023 0203 	bic.w	r2, r3, #3
 8006180:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4313      	orrs	r3, r2
 8006188:	608b      	str	r3, [r1, #8]
}
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <LL_RCC_GetSysClkSource>:
{
 8006196:	b480      	push	{r7}
 8006198:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800619a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f003 030c 	and.w	r3, r3, #12
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <LL_RCC_SetAHBPrescaler>:
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80061b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	608b      	str	r3, [r1, #8]
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80061de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80061e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <LL_RCC_SetAHB4Prescaler>:
{
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800620a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800620e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006212:	f023 020f 	bic.w	r2, r3, #15
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	091b      	lsrs	r3, r3, #4
 800621a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <LL_RCC_SetAPB1Prescaler>:
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4313      	orrs	r3, r2
 800624a:	608b      	str	r3, [r1, #8]
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <LL_RCC_SetAPB2Prescaler>:
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800626a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4313      	orrs	r3, r2
 8006272:	608b      	str	r3, [r1, #8]
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <LL_RCC_GetAHBPrescaler>:
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800628e:	4618      	mov	r0, r3
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <LL_C2_RCC_GetAHBPrescaler>:
{
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800629c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80062a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <LL_RCC_GetAHB4Prescaler>:
{
 80062b2:	b480      	push	{r7}
 80062b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80062b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <LL_RCC_GetAPB1Prescaler>:
{
 80062ce:	b480      	push	{r7}
 80062d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80062d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80062dc:	4618      	mov	r0, r3
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <LL_RCC_GetAPB2Prescaler>:
{
 80062e6:	b480      	push	{r7}
 80062e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80062ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <LL_RCC_PLL_Enable>:
{
 80062fe:	b480      	push	{r7}
 8006300:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800630c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006310:	6013      	str	r3, [r2, #0]
}
 8006312:	bf00      	nop
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <LL_RCC_PLL_Disable>:
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800632a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800632e:	6013      	str	r3, [r2, #0]
}
 8006330:	bf00      	nop
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <LL_RCC_PLL_IsReady>:
{
 800633a:	b480      	push	{r7}
 800633c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800633e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006348:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800634c:	d101      	bne.n	8006352 <LL_RCC_PLL_IsReady+0x18>
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <LL_RCC_PLL_IsReady+0x1a>
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <LL_RCC_PLL_GetN>:
{
 800635e:	b480      	push	{r7}
 8006360:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	0a1b      	lsrs	r3, r3, #8
 800636a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800636e:	4618      	mov	r0, r3
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <LL_RCC_PLL_GetR>:
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800637c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006386:	4618      	mov	r0, r3
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <LL_RCC_PLL_GetDivider>:
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800639e:	4618      	mov	r0, r3
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <LL_RCC_PLL_GetMainSource>:
{
 80063a8:	b480      	push	{r7}
 80063aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80063ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f003 0303 	and.w	r3, r3, #3
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <LL_RCC_IsActiveFlag_HPRE>:
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80063c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d2:	d101      	bne.n	80063d8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80063e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80063f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063f8:	d101      	bne.n	80063fe <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800640a:	b480      	push	{r7}
 800640c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800640e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006412:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800641a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800641e:	d101      	bne.n	8006424 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006420:	2301      	movs	r3, #1
 8006422:	e000      	b.n	8006426 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006442:	d101      	bne.n	8006448 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006444:	2301      	movs	r3, #1
 8006446:	e000      	b.n	800644a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8006454:	b480      	push	{r7}
 8006456:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006462:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006466:	d101      	bne.n	800646c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006468:	2301      	movs	r3, #1
 800646a:	e000      	b.n	800646e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006478:	b590      	push	{r4, r7, lr}
 800647a:	b08d      	sub	sp, #52	; 0x34
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e37e      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8092 	beq.w	80065bc <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006498:	f7ff fe7d 	bl	8006196 <LL_RCC_GetSysClkSource>
 800649c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800649e:	f7ff ff83 	bl	80063a8 <LL_RCC_PLL_GetMainSource>
 80064a2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d005      	beq.n	80064b6 <HAL_RCC_OscConfig+0x3e>
 80064aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ac:	2b0c      	cmp	r3, #12
 80064ae:	d14c      	bne.n	800654a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d149      	bne.n	800654a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064b6:	f7ff fe0b 	bl	80060d0 <LL_RCC_MSI_IsReady>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <HAL_RCC_OscConfig+0x54>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e35d      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80064d0:	f7ff fe23 	bl	800611a <LL_RCC_MSI_GetRange>
 80064d4:	4603      	mov	r3, r0
 80064d6:	429c      	cmp	r4, r3
 80064d8:	d914      	bls.n	8006504 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fd5c 	bl	8006f9c <RCC_SetFlashLatencyFromMSIRange>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e34c      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff fdfd 	bl	80060f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff fe21 	bl	8006144 <LL_RCC_MSI_SetCalibTrimming>
 8006502:	e013      	b.n	800652c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	4618      	mov	r0, r3
 800650a:	f7ff fdf2 	bl	80060f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff fe16 	bl	8006144 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	4618      	mov	r0, r3
 800651e:	f000 fd3d 	bl	8006f9c <RCC_SetFlashLatencyFromMSIRange>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e32d      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800652c:	f000 fcda 	bl	8006ee4 <HAL_RCC_GetHCLKFreq>
 8006530:	4602      	mov	r2, r0
 8006532:	4bb3      	ldr	r3, [pc, #716]	; (8006800 <HAL_RCC_OscConfig+0x388>)
 8006534:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006536:	4bb3      	ldr	r3, [pc, #716]	; (8006804 <HAL_RCC_OscConfig+0x38c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f7fc f960 	bl	8002800 <HAL_InitTick>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d039      	beq.n	80065ba <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e31e      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d01e      	beq.n	8006590 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006552:	f7ff fd9f 	bl	8006094 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006556:	f7fc fc25 	bl	8002da4 <HAL_GetTick>
 800655a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800655e:	f7fc fc21 	bl	8002da4 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e30b      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006570:	f7ff fdae 	bl	80060d0 <LL_RCC_MSI_IsReady>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f1      	beq.n	800655e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fdb7 	bl	80060f2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff fddb 	bl	8006144 <LL_RCC_MSI_SetCalibTrimming>
 800658e:	e015      	b.n	80065bc <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006590:	f7ff fd8f 	bl	80060b2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006594:	f7fc fc06 	bl	8002da4 <HAL_GetTick>
 8006598:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800659c:	f7fc fc02 	bl	8002da4 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e2ec      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80065ae:	f7ff fd8f 	bl	80060d0 <LL_RCC_MSI_IsReady>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1f1      	bne.n	800659c <HAL_RCC_OscConfig+0x124>
 80065b8:	e000      	b.n	80065bc <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d04e      	beq.n	8006666 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065c8:	f7ff fde5 	bl	8006196 <LL_RCC_GetSysClkSource>
 80065cc:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065ce:	f7ff feeb 	bl	80063a8 <LL_RCC_PLL_GetMainSource>
 80065d2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d005      	beq.n	80065e6 <HAL_RCC_OscConfig+0x16e>
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	2b0c      	cmp	r3, #12
 80065de:	d10d      	bne.n	80065fc <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d10a      	bne.n	80065fc <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065e6:	f7ff fbf5 	bl	8005dd4 <LL_RCC_HSE_IsReady>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d039      	beq.n	8006664 <HAL_RCC_OscConfig+0x1ec>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d135      	bne.n	8006664 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e2c5      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006604:	d102      	bne.n	800660c <HAL_RCC_OscConfig+0x194>
 8006606:	f7ff fbc7 	bl	8005d98 <LL_RCC_HSE_Enable>
 800660a:	e001      	b.n	8006610 <HAL_RCC_OscConfig+0x198>
 800660c:	f7ff fbd3 	bl	8005db6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d012      	beq.n	800663e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006618:	f7fc fbc4 	bl	8002da4 <HAL_GetTick>
 800661c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006620:	f7fc fbc0 	bl	8002da4 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b64      	cmp	r3, #100	; 0x64
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e2aa      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006632:	f7ff fbcf 	bl	8005dd4 <LL_RCC_HSE_IsReady>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0f1      	beq.n	8006620 <HAL_RCC_OscConfig+0x1a8>
 800663c:	e013      	b.n	8006666 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663e:	f7fc fbb1 	bl	8002da4 <HAL_GetTick>
 8006642:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006644:	e008      	b.n	8006658 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006646:	f7fc fbad 	bl	8002da4 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b64      	cmp	r3, #100	; 0x64
 8006652:	d901      	bls.n	8006658 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e297      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006658:	f7ff fbbc 	bl	8005dd4 <LL_RCC_HSE_IsReady>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1f1      	bne.n	8006646 <HAL_RCC_OscConfig+0x1ce>
 8006662:	e000      	b.n	8006666 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d051      	beq.n	8006716 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006672:	f7ff fd90 	bl	8006196 <LL_RCC_GetSysClkSource>
 8006676:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006678:	f7ff fe96 	bl	80063a8 <LL_RCC_PLL_GetMainSource>
 800667c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	2b04      	cmp	r3, #4
 8006682:	d005      	beq.n	8006690 <HAL_RCC_OscConfig+0x218>
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	2b0c      	cmp	r3, #12
 8006688:	d113      	bne.n	80066b2 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d110      	bne.n	80066b2 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006690:	f7ff fbd0 	bl	8005e34 <LL_RCC_HSI_IsReady>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d005      	beq.n	80066a6 <HAL_RCC_OscConfig+0x22e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e270      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff fbd4 	bl	8005e58 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066b0:	e031      	b.n	8006716 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d019      	beq.n	80066ee <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066ba:	f7ff fb9d 	bl	8005df8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066be:	f7fc fb71 	bl	8002da4 <HAL_GetTick>
 80066c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066c6:	f7fc fb6d 	bl	8002da4 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e257      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80066d8:	f7ff fbac 	bl	8005e34 <LL_RCC_HSI_IsReady>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0f1      	beq.n	80066c6 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff fbb6 	bl	8005e58 <LL_RCC_HSI_SetCalibTrimming>
 80066ec:	e013      	b.n	8006716 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066ee:	f7ff fb92 	bl	8005e16 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f2:	f7fc fb57 	bl	8002da4 <HAL_GetTick>
 80066f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80066f8:	e008      	b.n	800670c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066fa:	f7fc fb53 	bl	8002da4 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d901      	bls.n	800670c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e23d      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 800670c:	f7ff fb92 	bl	8005e34 <LL_RCC_HSI_IsReady>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1f1      	bne.n	80066fa <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0308 	and.w	r3, r3, #8
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 80a3 	beq.w	8006876 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d076      	beq.n	8006826 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b00      	cmp	r3, #0
 8006742:	d046      	beq.n	80067d2 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006744:	f7ff fc49 	bl	8005fda <LL_RCC_LSI1_IsReady>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d113      	bne.n	8006776 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800674e:	f7ff fc22 	bl	8005f96 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006752:	f7fc fb27 	bl	8002da4 <HAL_GetTick>
 8006756:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800675a:	f7fc fb23 	bl	8002da4 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e20d      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800676c:	f7ff fc35 	bl	8005fda <LL_RCC_LSI1_IsReady>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0f1      	beq.n	800675a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006776:	f7ff fc42 	bl	8005ffe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677a:	f7fc fb13 	bl	8002da4 <HAL_GetTick>
 800677e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006780:	e008      	b.n	8006794 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006782:	f7fc fb0f 	bl	8002da4 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	2b03      	cmp	r3, #3
 800678e:	d901      	bls.n	8006794 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e1f9      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006794:	f7ff fc55 	bl	8006042 <LL_RCC_LSI2_IsReady>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0f1      	beq.n	8006782 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff fc5f 	bl	8006066 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80067a8:	f7ff fc06 	bl	8005fb8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ac:	f7fc fafa 	bl	8002da4 <HAL_GetTick>
 80067b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80067b4:	f7fc faf6 	bl	8002da4 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e1e0      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80067c6:	f7ff fc08 	bl	8005fda <LL_RCC_LSI1_IsReady>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1f1      	bne.n	80067b4 <HAL_RCC_OscConfig+0x33c>
 80067d0:	e051      	b.n	8006876 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80067d2:	f7ff fbe0 	bl	8005f96 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d6:	f7fc fae5 	bl	8002da4 <HAL_GetTick>
 80067da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80067dc:	e008      	b.n	80067f0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80067de:	f7fc fae1 	bl	8002da4 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e1cb      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80067f0:	f7ff fbf3 	bl	8005fda <LL_RCC_LSI1_IsReady>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d0f1      	beq.n	80067de <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80067fa:	f7ff fc11 	bl	8006020 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80067fe:	e00c      	b.n	800681a <HAL_RCC_OscConfig+0x3a2>
 8006800:	20000020 	.word	0x20000020
 8006804:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006808:	f7fc facc 	bl	8002da4 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b03      	cmp	r3, #3
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e1b6      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800681a:	f7ff fc12 	bl	8006042 <LL_RCC_LSI2_IsReady>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1f1      	bne.n	8006808 <HAL_RCC_OscConfig+0x390>
 8006824:	e027      	b.n	8006876 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006826:	f7ff fbfb 	bl	8006020 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682a:	f7fc fabb 	bl	8002da4 <HAL_GetTick>
 800682e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006830:	e008      	b.n	8006844 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006832:	f7fc fab7 	bl	8002da4 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b03      	cmp	r3, #3
 800683e:	d901      	bls.n	8006844 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e1a1      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006844:	f7ff fbfd 	bl	8006042 <LL_RCC_LSI2_IsReady>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1f1      	bne.n	8006832 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800684e:	f7ff fbb3 	bl	8005fb8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006852:	f7fc faa7 	bl	8002da4 <HAL_GetTick>
 8006856:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006858:	e008      	b.n	800686c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800685a:	f7fc faa3 	bl	8002da4 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b02      	cmp	r3, #2
 8006866:	d901      	bls.n	800686c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e18d      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800686c:	f7ff fbb5 	bl	8005fda <LL_RCC_LSI1_IsReady>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1f1      	bne.n	800685a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	2b00      	cmp	r3, #0
 8006880:	d05b      	beq.n	800693a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006882:	4bb5      	ldr	r3, [pc, #724]	; (8006b58 <HAL_RCC_OscConfig+0x6e0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688a:	2b00      	cmp	r3, #0
 800688c:	d114      	bne.n	80068b8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800688e:	f7ff fa43 	bl	8005d18 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006892:	f7fc fa87 	bl	8002da4 <HAL_GetTick>
 8006896:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006898:	e008      	b.n	80068ac <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800689a:	f7fc fa83 	bl	8002da4 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d901      	bls.n	80068ac <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e16d      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ac:	4baa      	ldr	r3, [pc, #680]	; (8006b58 <HAL_RCC_OscConfig+0x6e0>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0f0      	beq.n	800689a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d102      	bne.n	80068c6 <HAL_RCC_OscConfig+0x44e>
 80068c0:	f7ff fb13 	bl	8005eea <LL_RCC_LSE_Enable>
 80068c4:	e00c      	b.n	80068e0 <HAL_RCC_OscConfig+0x468>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	2b05      	cmp	r3, #5
 80068cc:	d104      	bne.n	80068d8 <HAL_RCC_OscConfig+0x460>
 80068ce:	f7ff fb2e 	bl	8005f2e <LL_RCC_LSE_EnableBypass>
 80068d2:	f7ff fb0a 	bl	8005eea <LL_RCC_LSE_Enable>
 80068d6:	e003      	b.n	80068e0 <HAL_RCC_OscConfig+0x468>
 80068d8:	f7ff fb18 	bl	8005f0c <LL_RCC_LSE_Disable>
 80068dc:	f7ff fb38 	bl	8005f50 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d014      	beq.n	8006912 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e8:	f7fc fa5c 	bl	8002da4 <HAL_GetTick>
 80068ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80068ee:	e00a      	b.n	8006906 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068f0:	f7fc fa58 	bl	8002da4 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80068fe:	4293      	cmp	r3, r2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e140      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006906:	f7ff fb34 	bl	8005f72 <LL_RCC_LSE_IsReady>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0ef      	beq.n	80068f0 <HAL_RCC_OscConfig+0x478>
 8006910:	e013      	b.n	800693a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006912:	f7fc fa47 	bl	8002da4 <HAL_GetTick>
 8006916:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006918:	e00a      	b.n	8006930 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800691a:	f7fc fa43 	bl	8002da4 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	f241 3288 	movw	r2, #5000	; 0x1388
 8006928:	4293      	cmp	r3, r2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e12b      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006930:	f7ff fb1f 	bl	8005f72 <LL_RCC_LSE_IsReady>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1ef      	bne.n	800691a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	d02c      	beq.n	80069a0 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694a:	2b00      	cmp	r3, #0
 800694c:	d014      	beq.n	8006978 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800694e:	f7ff fa98 	bl	8005e82 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006952:	f7fc fa27 	bl	8002da4 <HAL_GetTick>
 8006956:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006958:	e008      	b.n	800696c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800695a:	f7fc fa23 	bl	8002da4 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e10d      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800696c:	f7ff faab 	bl	8005ec6 <LL_RCC_HSI48_IsReady>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0f1      	beq.n	800695a <HAL_RCC_OscConfig+0x4e2>
 8006976:	e013      	b.n	80069a0 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006978:	f7ff fa94 	bl	8005ea4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800697c:	f7fc fa12 	bl	8002da4 <HAL_GetTick>
 8006980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006984:	f7fc fa0e 	bl	8002da4 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e0f8      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006996:	f7ff fa96 	bl	8005ec6 <LL_RCC_HSI48_IsReady>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1f1      	bne.n	8006984 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 80ee 	beq.w	8006b86 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069aa:	f7ff fbf4 	bl	8006196 <LL_RCC_GetSysClkSource>
 80069ae:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80069b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	2b02      	cmp	r3, #2
 80069be:	f040 80af 	bne.w	8006b20 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f003 0203 	and.w	r2, r3, #3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d123      	bne.n	8006a18 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069da:	429a      	cmp	r2, r3
 80069dc:	d11c      	bne.n	8006a18 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	0a1b      	lsrs	r3, r3, #8
 80069e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d114      	bne.n	8006a18 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d10d      	bne.n	8006a18 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d106      	bne.n	8006a18 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d05d      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2b0c      	cmp	r3, #12
 8006a1c:	d058      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e0ab      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006a30:	f7ff fc74 	bl	800631c <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a34:	f7fc f9b6 	bl	8002da4 <HAL_GetTick>
 8006a38:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a3a:	e008      	b.n	8006a4e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a3c:	f7fc f9b2 	bl	8002da4 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e09c      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1ef      	bne.n	8006a3c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a60:	68da      	ldr	r2, [r3, #12]
 8006a62:	4b3e      	ldr	r3, [pc, #248]	; (8006b5c <HAL_RCC_OscConfig+0x6e4>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a6e:	4311      	orrs	r1, r2
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a74:	0212      	lsls	r2, r2, #8
 8006a76:	4311      	orrs	r1, r2
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a7c:	4311      	orrs	r1, r2
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006a82:	4311      	orrs	r1, r2
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006a92:	f7ff fc34 	bl	80062fe <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aa4:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006aa6:	f7fc f97d 	bl	8002da4 <HAL_GetTick>
 8006aaa:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aae:	f7fc f979 	bl	8002da4 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e063      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0ef      	beq.n	8006aae <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ace:	e05a      	b.n	8006b86 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e059      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d151      	bne.n	8006b86 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006ae2:	f7ff fc0c 	bl	80062fe <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006af4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006af6:	f7fc f955 	bl	8002da4 <HAL_GetTick>
 8006afa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006afc:	e008      	b.n	8006b10 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006afe:	f7fc f951 	bl	8002da4 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d901      	bls.n	8006b10 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e03b      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0ef      	beq.n	8006afe <HAL_RCC_OscConfig+0x686>
 8006b1e:	e032      	b.n	8006b86 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	2b0c      	cmp	r3, #12
 8006b24:	d02d      	beq.n	8006b82 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b26:	f7ff fbf9 	bl	800631c <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b34:	f023 0303 	bic.w	r3, r3, #3
 8006b38:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8006b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b44:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b4c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4e:	f7fc f929 	bl	8002da4 <HAL_GetTick>
 8006b52:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b54:	e00d      	b.n	8006b72 <HAL_RCC_OscConfig+0x6fa>
 8006b56:	bf00      	nop
 8006b58:	58000400 	.word	0x58000400
 8006b5c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b60:	f7fc f920 	bl	8002da4 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e00a      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1ef      	bne.n	8006b60 <HAL_RCC_OscConfig+0x6e8>
 8006b80:	e001      	b.n	8006b86 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3734      	adds	r7, #52	; 0x34
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd90      	pop	{r4, r7, pc}

08006b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e12d      	b.n	8006e00 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ba4:	4b98      	ldr	r3, [pc, #608]	; (8006e08 <HAL_RCC_ClockConfig+0x278>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0307 	and.w	r3, r3, #7
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d91b      	bls.n	8006bea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bb2:	4b95      	ldr	r3, [pc, #596]	; (8006e08 <HAL_RCC_ClockConfig+0x278>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f023 0207 	bic.w	r2, r3, #7
 8006bba:	4993      	ldr	r1, [pc, #588]	; (8006e08 <HAL_RCC_ClockConfig+0x278>)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc2:	f7fc f8ef 	bl	8002da4 <HAL_GetTick>
 8006bc6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bc8:	e008      	b.n	8006bdc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006bca:	f7fc f8eb 	bl	8002da4 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e111      	b.n	8006e00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bdc:	4b8a      	ldr	r3, [pc, #552]	; (8006e08 <HAL_RCC_ClockConfig+0x278>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0307 	and.w	r3, r3, #7
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d1ef      	bne.n	8006bca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d016      	beq.n	8006c24 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff fad7 	bl	80061ae <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006c00:	f7fc f8d0 	bl	8002da4 <HAL_GetTick>
 8006c04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c08:	f7fc f8cc 	bl	8002da4 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e0f2      	b.n	8006e00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006c1a:	f7ff fbd1 	bl	80063c0 <LL_RCC_IsActiveFlag_HPRE>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0f1      	beq.n	8006c08 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d016      	beq.n	8006c5e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff face 	bl	80061d6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006c3a:	f7fc f8b3 	bl	8002da4 <HAL_GetTick>
 8006c3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006c40:	e008      	b.n	8006c54 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c42:	f7fc f8af 	bl	8002da4 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d901      	bls.n	8006c54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e0d5      	b.n	8006e00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006c54:	f7ff fbc6 	bl	80063e4 <LL_RCC_IsActiveFlag_C2HPRE>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0f1      	beq.n	8006c42 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d016      	beq.n	8006c98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7ff fac7 	bl	8006202 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006c74:	f7fc f896 	bl	8002da4 <HAL_GetTick>
 8006c78:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006c7a:	e008      	b.n	8006c8e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c7c:	f7fc f892 	bl	8002da4 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e0b8      	b.n	8006e00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006c8e:	f7ff fbbc 	bl	800640a <LL_RCC_IsActiveFlag_SHDHPRE>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0f1      	beq.n	8006c7c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d016      	beq.n	8006cd2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff fac1 	bl	8006230 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006cae:	f7fc f879 	bl	8002da4 <HAL_GetTick>
 8006cb2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006cb6:	f7fc f875 	bl	8002da4 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e09b      	b.n	8006e00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006cc8:	f7ff fbb2 	bl	8006430 <LL_RCC_IsActiveFlag_PPRE1>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0f1      	beq.n	8006cb6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0308 	and.w	r3, r3, #8
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d017      	beq.n	8006d0e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff fab7 	bl	8006258 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006cea:	f7fc f85b 	bl	8002da4 <HAL_GetTick>
 8006cee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006cf0:	e008      	b.n	8006d04 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006cf2:	f7fc f857 	bl	8002da4 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e07d      	b.n	8006e00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006d04:	f7ff fba6 	bl	8006454 <LL_RCC_IsActiveFlag_PPRE2>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0f1      	beq.n	8006cf2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d043      	beq.n	8006da2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d106      	bne.n	8006d30 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006d22:	f7ff f857 	bl	8005dd4 <LL_RCC_HSE_IsReady>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d11e      	bne.n	8006d6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e067      	b.n	8006e00 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d106      	bne.n	8006d46 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006d38:	f7ff faff 	bl	800633a <LL_RCC_PLL_IsReady>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d113      	bne.n	8006d6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e05c      	b.n	8006e00 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006d4e:	f7ff f9bf 	bl	80060d0 <LL_RCC_MSI_IsReady>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d108      	bne.n	8006d6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e051      	b.n	8006e00 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006d5c:	f7ff f86a 	bl	8005e34 <LL_RCC_HSI_IsReady>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e04a      	b.n	8006e00 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7ff f9fd 	bl	800616e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d74:	f7fc f816 	bl	8002da4 <HAL_GetTick>
 8006d78:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d7a:	e00a      	b.n	8006d92 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d7c:	f7fc f812 	bl	8002da4 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e036      	b.n	8006e00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d92:	f7ff fa00 	bl	8006196 <LL_RCC_GetSysClkSource>
 8006d96:	4602      	mov	r2, r0
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d1ec      	bne.n	8006d7c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006da2:	4b19      	ldr	r3, [pc, #100]	; (8006e08 <HAL_RCC_ClockConfig+0x278>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d21b      	bcs.n	8006de8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006db0:	4b15      	ldr	r3, [pc, #84]	; (8006e08 <HAL_RCC_ClockConfig+0x278>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f023 0207 	bic.w	r2, r3, #7
 8006db8:	4913      	ldr	r1, [pc, #76]	; (8006e08 <HAL_RCC_ClockConfig+0x278>)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dc0:	f7fb fff0 	bl	8002da4 <HAL_GetTick>
 8006dc4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006dc8:	f7fb ffec 	bl	8002da4 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e012      	b.n	8006e00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dda:	4b0b      	ldr	r3, [pc, #44]	; (8006e08 <HAL_RCC_ClockConfig+0x278>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d1ef      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006de8:	f000 f87c 	bl	8006ee4 <HAL_RCC_GetHCLKFreq>
 8006dec:	4602      	mov	r2, r0
 8006dee:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <HAL_RCC_ClockConfig+0x27c>)
 8006df0:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006df2:	f7fb ffe3 	bl	8002dbc <HAL_GetTickPrio>
 8006df6:	4603      	mov	r3, r0
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fb fd01 	bl	8002800 <HAL_InitTick>
 8006dfe:	4603      	mov	r3, r0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	58004000 	.word	0x58004000
 8006e0c:	20000020 	.word	0x20000020

08006e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e10:	b590      	push	{r4, r7, lr}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e16:	f7ff f9be 	bl	8006196 <LL_RCC_GetSysClkSource>
 8006e1a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10a      	bne.n	8006e38 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006e22:	f7ff f97a 	bl	800611a <LL_RCC_MSI_GetRange>
 8006e26:	4603      	mov	r3, r0
 8006e28:	091b      	lsrs	r3, r3, #4
 8006e2a:	f003 030f 	and.w	r3, r3, #15
 8006e2e:	4a2a      	ldr	r2, [pc, #168]	; (8006ed8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	e04a      	b.n	8006ece <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d102      	bne.n	8006e44 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e3e:	4b27      	ldr	r3, [pc, #156]	; (8006edc <HAL_RCC_GetSysClockFreq+0xcc>)
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	e044      	b.n	8006ece <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d10a      	bne.n	8006e60 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006e4a:	f7fe ff93 	bl	8005d74 <LL_RCC_HSE_IsEnabledDiv2>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d102      	bne.n	8006e5a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006e54:	4b21      	ldr	r3, [pc, #132]	; (8006edc <HAL_RCC_GetSysClockFreq+0xcc>)
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	e039      	b.n	8006ece <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006e5a:	4b21      	ldr	r3, [pc, #132]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	e036      	b.n	8006ece <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006e60:	f7ff faa2 	bl	80063a8 <LL_RCC_PLL_GetMainSource>
 8006e64:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d002      	beq.n	8006e72 <HAL_RCC_GetSysClockFreq+0x62>
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d003      	beq.n	8006e78 <HAL_RCC_GetSysClockFreq+0x68>
 8006e70:	e00d      	b.n	8006e8e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006e72:	4b1a      	ldr	r3, [pc, #104]	; (8006edc <HAL_RCC_GetSysClockFreq+0xcc>)
 8006e74:	60bb      	str	r3, [r7, #8]
        break;
 8006e76:	e015      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006e78:	f7fe ff7c 	bl	8005d74 <LL_RCC_HSE_IsEnabledDiv2>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d102      	bne.n	8006e88 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006e82:	4b16      	ldr	r3, [pc, #88]	; (8006edc <HAL_RCC_GetSysClockFreq+0xcc>)
 8006e84:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006e86:	e00d      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8006e88:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006e8a:	60bb      	str	r3, [r7, #8]
        break;
 8006e8c:	e00a      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006e8e:	f7ff f944 	bl	800611a <LL_RCC_MSI_GetRange>
 8006e92:	4603      	mov	r3, r0
 8006e94:	091b      	lsrs	r3, r3, #4
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	4a0f      	ldr	r2, [pc, #60]	; (8006ed8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ea0:	60bb      	str	r3, [r7, #8]
        break;
 8006ea2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8006ea4:	f7ff fa5b 	bl	800635e <LL_RCC_PLL_GetN>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	fb03 f402 	mul.w	r4, r3, r2
 8006eb0:	f7ff fa6e 	bl	8006390 <LL_RCC_PLL_GetDivider>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	091b      	lsrs	r3, r3, #4
 8006eb8:	3301      	adds	r3, #1
 8006eba:	fbb4 f4f3 	udiv	r4, r4, r3
 8006ebe:	f7ff fa5b 	bl	8006378 <LL_RCC_PLL_GetR>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	0f5b      	lsrs	r3, r3, #29
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	fbb4 f3f3 	udiv	r3, r4, r3
 8006ecc:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8006ece:	68fb      	ldr	r3, [r7, #12]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd90      	pop	{r4, r7, pc}
 8006ed8:	0801399c 	.word	0x0801399c
 8006edc:	00f42400 	.word	0x00f42400
 8006ee0:	01e84800 	.word	0x01e84800

08006ee4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ee4:	b598      	push	{r3, r4, r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006ee8:	f7ff ff92 	bl	8006e10 <HAL_RCC_GetSysClockFreq>
 8006eec:	4604      	mov	r4, r0
 8006eee:	f7ff f9c7 	bl	8006280 <LL_RCC_GetAHBPrescaler>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	091b      	lsrs	r3, r3, #4
 8006ef6:	f003 030f 	and.w	r3, r3, #15
 8006efa:	4a03      	ldr	r2, [pc, #12]	; (8006f08 <HAL_RCC_GetHCLKFreq+0x24>)
 8006efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f00:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	bd98      	pop	{r3, r4, r7, pc}
 8006f08:	0801393c 	.word	0x0801393c

08006f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f0c:	b598      	push	{r3, r4, r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006f10:	f7ff ffe8 	bl	8006ee4 <HAL_RCC_GetHCLKFreq>
 8006f14:	4604      	mov	r4, r0
 8006f16:	f7ff f9e6 	bl	80062e6 <LL_RCC_GetAPB2Prescaler>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	0adb      	lsrs	r3, r3, #11
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	4a04      	ldr	r2, [pc, #16]	; (8006f34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f28:	f003 031f 	and.w	r3, r3, #31
 8006f2c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	bd98      	pop	{r3, r4, r7, pc}
 8006f34:	0801397c 	.word	0x0801397c

08006f38 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	226f      	movs	r2, #111	; 0x6f
 8006f46:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8006f48:	f7ff f925 	bl	8006196 <LL_RCC_GetSysClkSource>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8006f52:	f7ff f995 	bl	8006280 <LL_RCC_GetAHBPrescaler>
 8006f56:	4602      	mov	r2, r0
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8006f5c:	f7ff f9b7 	bl	80062ce <LL_RCC_GetAPB1Prescaler>
 8006f60:	4602      	mov	r2, r0
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8006f66:	f7ff f9be 	bl	80062e6 <LL_RCC_GetAPB2Prescaler>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8006f70:	f7ff f992 	bl	8006298 <LL_C2_RCC_GetAHBPrescaler>
 8006f74:	4602      	mov	r2, r0
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8006f7a:	f7ff f99a 	bl	80062b2 <LL_RCC_GetAHB4Prescaler>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006f84:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <HAL_RCC_GetClockConfig+0x60>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0207 	and.w	r2, r3, #7
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	601a      	str	r2, [r3, #0]
}
 8006f90:	bf00      	nop
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	58004000 	.word	0x58004000

08006f9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006f9c:	b590      	push	{r4, r7, lr}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2bb0      	cmp	r3, #176	; 0xb0
 8006fa8:	d903      	bls.n	8006fb2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006faa:	4b15      	ldr	r3, [pc, #84]	; (8007000 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	e007      	b.n	8006fc2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	091b      	lsrs	r3, r3, #4
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	4a11      	ldr	r2, [pc, #68]	; (8007000 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006fc2:	f7ff f976 	bl	80062b2 <LL_RCC_GetAHB4Prescaler>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	091b      	lsrs	r3, r3, #4
 8006fca:	f003 030f 	and.w	r3, r3, #15
 8006fce:	4a0d      	ldr	r2, [pc, #52]	; (8007004 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fda:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	4a0a      	ldr	r2, [pc, #40]	; (8007008 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe4:	0c9c      	lsrs	r4, r3, #18
 8006fe6:	f7fe fea7 	bl	8005d38 <HAL_PWREx_GetVoltageRange>
 8006fea:	4603      	mov	r3, r0
 8006fec:	4619      	mov	r1, r3
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f000 f80c 	bl	800700c <RCC_SetFlashLatency>
 8006ff4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd90      	pop	{r4, r7, pc}
 8006ffe:	bf00      	nop
 8007000:	0801399c 	.word	0x0801399c
 8007004:	0801393c 	.word	0x0801393c
 8007008:	431bde83 	.word	0x431bde83

0800700c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800700c:	b590      	push	{r4, r7, lr}
 800700e:	b093      	sub	sp, #76	; 0x4c
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007016:	4b39      	ldr	r3, [pc, #228]	; (80070fc <RCC_SetFlashLatency+0xf0>)
 8007018:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800701c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800701e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007022:	4a37      	ldr	r2, [pc, #220]	; (8007100 <RCC_SetFlashLatency+0xf4>)
 8007024:	f107 031c 	add.w	r3, r7, #28
 8007028:	ca07      	ldmia	r2, {r0, r1, r2}
 800702a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800702e:	4b35      	ldr	r3, [pc, #212]	; (8007104 <RCC_SetFlashLatency+0xf8>)
 8007030:	f107 040c 	add.w	r4, r7, #12
 8007034:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007036:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800703a:	2300      	movs	r3, #0
 800703c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007044:	d11c      	bne.n	8007080 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007046:	2300      	movs	r3, #0
 8007048:	643b      	str	r3, [r7, #64]	; 0x40
 800704a:	e015      	b.n	8007078 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800704c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007054:	4413      	add	r3, r2
 8007056:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	429a      	cmp	r2, r3
 800705e:	d808      	bhi.n	8007072 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007068:	4413      	add	r3, r2
 800706a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800706e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007070:	e022      	b.n	80070b8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007074:	3301      	adds	r3, #1
 8007076:	643b      	str	r3, [r7, #64]	; 0x40
 8007078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800707a:	2b03      	cmp	r3, #3
 800707c:	d9e6      	bls.n	800704c <RCC_SetFlashLatency+0x40>
 800707e:	e01b      	b.n	80070b8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007080:	2300      	movs	r3, #0
 8007082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007084:	e015      	b.n	80070b2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800708e:	4413      	add	r3, r2
 8007090:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	429a      	cmp	r2, r3
 8007098:	d808      	bhi.n	80070ac <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800709a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80070a2:	4413      	add	r3, r2
 80070a4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80070a8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80070aa:	e005      	b.n	80070b8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80070ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ae:	3301      	adds	r3, #1
 80070b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d9e6      	bls.n	8007086 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80070b8:	4b13      	ldr	r3, [pc, #76]	; (8007108 <RCC_SetFlashLatency+0xfc>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f023 0207 	bic.w	r2, r3, #7
 80070c0:	4911      	ldr	r1, [pc, #68]	; (8007108 <RCC_SetFlashLatency+0xfc>)
 80070c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c4:	4313      	orrs	r3, r2
 80070c6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070c8:	f7fb fe6c 	bl	8002da4 <HAL_GetTick>
 80070cc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80070ce:	e008      	b.n	80070e2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80070d0:	f7fb fe68 	bl	8002da4 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d901      	bls.n	80070e2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e007      	b.n	80070f2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80070e2:	4b09      	ldr	r3, [pc, #36]	; (8007108 <RCC_SetFlashLatency+0xfc>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d1ef      	bne.n	80070d0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	374c      	adds	r7, #76	; 0x4c
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd90      	pop	{r4, r7, pc}
 80070fa:	bf00      	nop
 80070fc:	080135cc 	.word	0x080135cc
 8007100:	080135dc 	.word	0x080135dc
 8007104:	080135e8 	.word	0x080135e8
 8007108:	58004000 	.word	0x58004000

0800710c <LL_RCC_LSE_IsEnabled>:
{
 800710c:	b480      	push	{r7}
 800710e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <LL_RCC_LSE_IsEnabled+0x18>
 8007120:	2301      	movs	r3, #1
 8007122:	e000      	b.n	8007126 <LL_RCC_LSE_IsEnabled+0x1a>
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <LL_RCC_LSE_IsReady>:
{
 8007130:	b480      	push	{r7}
 8007132:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713c:	f003 0302 	and.w	r3, r3, #2
 8007140:	2b02      	cmp	r3, #2
 8007142:	d101      	bne.n	8007148 <LL_RCC_LSE_IsReady+0x18>
 8007144:	2301      	movs	r3, #1
 8007146:	e000      	b.n	800714a <LL_RCC_LSE_IsReady+0x1a>
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <LL_RCC_SetRFWKPClockSource>:
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800715c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007164:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007168:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4313      	orrs	r3, r2
 8007170:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <LL_RCC_SetSMPSClockSource>:
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	f023 0203 	bic.w	r2, r3, #3
 8007192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4313      	orrs	r3, r2
 800719a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <LL_RCC_SetSMPSPrescaler>:
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80071b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <LL_RCC_SetUSARTClockSource>:
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80071d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e0:	f023 0203 	bic.w	r2, r3, #3
 80071e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <LL_RCC_SetLPUARTClockSource>:
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800720c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4313      	orrs	r3, r2
 8007218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <LL_RCC_SetI2CClockSource>:
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007234:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	091b      	lsrs	r3, r3, #4
 800723c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007240:	43db      	mvns	r3, r3
 8007242:	401a      	ands	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800724c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007250:	4313      	orrs	r3, r2
 8007252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007256:	bf00      	nop
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <LL_RCC_SetLPTIMClockSource>:
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800726a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800726e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	0c1b      	lsrs	r3, r3, #16
 8007276:	041b      	lsls	r3, r3, #16
 8007278:	43db      	mvns	r3, r3
 800727a:	401a      	ands	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	041b      	lsls	r3, r3, #16
 8007280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007284:	4313      	orrs	r3, r2
 8007286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800728a:	bf00      	nop
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <LL_RCC_SetSAIClockSource>:
{
 8007296:	b480      	push	{r7}
 8007298:	b083      	sub	sp, #12
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800729e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80072b6:	bf00      	nop
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <LL_RCC_SetRNGClockSource>:
{
 80072c2:	b480      	push	{r7}
 80072c4:	b083      	sub	sp, #12
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80072ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80072d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4313      	orrs	r3, r2
 80072de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80072e2:	bf00      	nop
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <LL_RCC_SetCLK48ClockSource>:
{
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80072f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4313      	orrs	r3, r2
 800730a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800730e:	bf00      	nop
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <LL_RCC_SetUSBClockSource>:
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff ffe3 	bl	80072ee <LL_RCC_SetCLK48ClockSource>
}
 8007328:	bf00      	nop
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <LL_RCC_SetADCClockSource>:
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800733c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007340:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4313      	orrs	r3, r2
 800734c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <LL_RCC_SetRTCClockSource>:
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007370:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4313      	orrs	r3, r2
 8007378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <LL_RCC_GetRTCClockSource>:
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800738c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007394:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007398:	4618      	mov	r0, r3
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <LL_RCC_ForceBackupDomainReset>:
{
 80073a2:	b480      	push	{r7}
 80073a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80073a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80073ba:	bf00      	nop
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80073c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80073dc:	bf00      	nop
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <LL_RCC_PLLSAI1_Enable>:
{
 80073e6:	b480      	push	{r7}
 80073e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80073ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073f8:	6013      	str	r3, [r2, #0]
}
 80073fa:	bf00      	nop
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <LL_RCC_PLLSAI1_Disable>:
{
 8007404:	b480      	push	{r7}
 8007406:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007412:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007416:	6013      	str	r3, [r2, #0]
}
 8007418:	bf00      	nop
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <LL_RCC_PLLSAI1_IsReady>:
{
 8007422:	b480      	push	{r7}
 8007424:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007430:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007434:	d101      	bne.n	800743a <LL_RCC_PLLSAI1_IsReady+0x18>
 8007436:	2301      	movs	r3, #1
 8007438:	e000      	b.n	800743c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b088      	sub	sp, #32
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800744e:	2300      	movs	r3, #0
 8007450:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007452:	2300      	movs	r3, #0
 8007454:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745e:	2b00      	cmp	r3, #0
 8007460:	d033      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800746a:	d00c      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800746c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007470:	d802      	bhi.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d010      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007476:	e017      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007478:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800747c:	d017      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x68>
 800747e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007482:	d016      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8007484:	e010      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007494:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007496:	e00d      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3304      	adds	r3, #4
 800749c:	4618      	mov	r0, r3
 800749e:	f000 f947 	bl	8007730 <RCCEx_PLLSAI1_ConfigNP>
 80074a2:	4603      	mov	r3, r0
 80074a4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80074a6:	e005      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	77fb      	strb	r3, [r7, #31]
        break;
 80074ac:	e002      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80074ae:	bf00      	nop
 80074b0:	e000      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80074b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074b4:	7ffb      	ldrb	r3, [r7, #31]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d105      	bne.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff fee9 	bl	8007296 <LL_RCC_SetSAIClockSource>
 80074c4:	e001      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c6:	7ffb      	ldrb	r3, [r7, #31]
 80074c8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d046      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80074d6:	f7ff ff57 	bl	8007388 <LL_RCC_GetRTCClockSource>
 80074da:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d03c      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80074e6:	f7fe fc17 	bl	8005d18 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d105      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff ff31 	bl	800735c <LL_RCC_SetRTCClockSource>
 80074fa:	e02e      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80074fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007504:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007506:	f7ff ff4c 	bl	80073a2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800750a:	f7ff ff5b 	bl	80073c4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007518:	4313      	orrs	r3, r2
 800751a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800751c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007526:	f7ff fdf1 	bl	800710c <LL_RCC_LSE_IsEnabled>
 800752a:	4603      	mov	r3, r0
 800752c:	2b01      	cmp	r3, #1
 800752e:	d114      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007530:	f7fb fc38 	bl	8002da4 <HAL_GetTick>
 8007534:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007536:	e00b      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007538:	f7fb fc34 	bl	8002da4 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	f241 3288 	movw	r2, #5000	; 0x1388
 8007546:	4293      	cmp	r3, r2
 8007548:	d902      	bls.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	77fb      	strb	r3, [r7, #31]
              break;
 800754e:	e004      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007550:	f7ff fdee 	bl	8007130 <LL_RCC_LSE_IsReady>
 8007554:	4603      	mov	r3, r0
 8007556:	2b01      	cmp	r3, #1
 8007558:	d1ee      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800755a:	7ffb      	ldrb	r3, [r7, #31]
 800755c:	77bb      	strb	r3, [r7, #30]
 800755e:	e001      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007560:	7ffb      	ldrb	r3, [r7, #31]
 8007562:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d004      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	4618      	mov	r0, r3
 8007576:	f7ff fe2b 	bl	80071d0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d004      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fe36 	bl	80071fc <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0310 	and.w	r3, r3, #16
 8007598:	2b00      	cmp	r3, #0
 800759a:	d004      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7ff fe5e 	bl	8007262 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d004      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7ff fe53 	bl	8007262 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0304 	and.w	r3, r3, #4
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d004      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff fe2b 	bl	8007228 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0308 	and.w	r3, r3, #8
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d004      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7ff fe20 	bl	8007228 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d022      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7ff fe8e 	bl	800731a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007606:	d107      	bne.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007616:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007620:	d10b      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3304      	adds	r3, #4
 8007626:	4618      	mov	r0, r3
 8007628:	f000 f8dd 	bl	80077e6 <RCCEx_PLLSAI1_ConfigNQ>
 800762c:	4603      	mov	r3, r0
 800762e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007630:	7ffb      	ldrb	r3, [r7, #31]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8007636:	7ffb      	ldrb	r3, [r7, #31]
 8007638:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007642:	2b00      	cmp	r3, #0
 8007644:	d02b      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800764e:	d008      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007654:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007658:	d003      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765e:	2b00      	cmp	r3, #0
 8007660:	d105      	bne.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x228>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff fe2b 	bl	80072c2 <LL_RCC_SetRNGClockSource>
 800766c:	e00a      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	2000      	movs	r0, #0
 800767a:	f7ff fe22 	bl	80072c2 <LL_RCC_SetRNGClockSource>
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f7ff fe35 	bl	80072ee <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007688:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800768c:	d107      	bne.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800768e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007698:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800769c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d022      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7ff fe3e 	bl	8007330 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076bc:	d107      	bne.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80076be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076cc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076d6:	d10b      	bne.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3304      	adds	r3, #4
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 f8dd 	bl	800789c <RCCEx_PLLSAI1_ConfigNR>
 80076e2:	4603      	mov	r3, r0
 80076e4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80076e6:	7ffb      	ldrb	r3, [r7, #31]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80076ec:	7ffb      	ldrb	r3, [r7, #31]
 80076ee:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d004      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007700:	4618      	mov	r0, r3
 8007702:	f7ff fd27 	bl	8007154 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d009      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007716:	4618      	mov	r0, r3
 8007718:	f7ff fd46 	bl	80071a8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff fd2d 	bl	8007180 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8007726:	7fbb      	ldrb	r3, [r7, #30]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3720      	adds	r7, #32
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800773c:	f7ff fe62 	bl	8007404 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007740:	f7fb fb30 	bl	8002da4 <HAL_GetTick>
 8007744:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007746:	e009      	b.n	800775c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007748:	f7fb fb2c 	bl	8002da4 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	2b02      	cmp	r3, #2
 8007754:	d902      	bls.n	800775c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	73fb      	strb	r3, [r7, #15]
      break;
 800775a:	e004      	b.n	8007766 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800775c:	f7ff fe61 	bl	8007422 <LL_RCC_PLLSAI1_IsReady>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1f0      	bne.n	8007748 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d137      	bne.n	80077dc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800776c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	021b      	lsls	r3, r3, #8
 800777c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007780:	4313      	orrs	r3, r2
 8007782:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007796:	4313      	orrs	r3, r2
 8007798:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800779a:	f7ff fe24 	bl	80073e6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800779e:	f7fb fb01 	bl	8002da4 <HAL_GetTick>
 80077a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80077a4:	e009      	b.n	80077ba <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077a6:	f7fb fafd 	bl	8002da4 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d902      	bls.n	80077ba <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	73fb      	strb	r3, [r7, #15]
        break;
 80077b8:	e004      	b.n	80077c4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80077ba:	f7ff fe32 	bl	8007422 <LL_RCC_PLLSAI1_IsReady>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d1f0      	bne.n	80077a6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d108      	bne.n	80077dc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80077ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077ce:	691a      	ldr	r2, [r3, #16]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077d8:	4313      	orrs	r3, r2
 80077da:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b084      	sub	sp, #16
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80077f2:	f7ff fe07 	bl	8007404 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80077f6:	f7fb fad5 	bl	8002da4 <HAL_GetTick>
 80077fa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80077fc:	e009      	b.n	8007812 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077fe:	f7fb fad1 	bl	8002da4 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	2b02      	cmp	r3, #2
 800780a:	d902      	bls.n	8007812 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	73fb      	strb	r3, [r7, #15]
      break;
 8007810:	e004      	b.n	800781c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007812:	f7ff fe06 	bl	8007422 <LL_RCC_PLLSAI1_IsReady>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1f0      	bne.n	80077fe <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d137      	bne.n	8007892 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007836:	4313      	orrs	r3, r2
 8007838:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800783a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800784c:	4313      	orrs	r3, r2
 800784e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007850:	f7ff fdc9 	bl	80073e6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007854:	f7fb faa6 	bl	8002da4 <HAL_GetTick>
 8007858:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800785a:	e009      	b.n	8007870 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800785c:	f7fb faa2 	bl	8002da4 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b02      	cmp	r3, #2
 8007868:	d902      	bls.n	8007870 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	73fb      	strb	r3, [r7, #15]
        break;
 800786e:	e004      	b.n	800787a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007870:	f7ff fdd7 	bl	8007422 <LL_RCC_PLLSAI1_IsReady>
 8007874:	4603      	mov	r3, r0
 8007876:	2b01      	cmp	r3, #1
 8007878:	d1f0      	bne.n	800785c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d108      	bne.n	8007892 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007884:	691a      	ldr	r2, [r3, #16]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800788e:	4313      	orrs	r3, r2
 8007890:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007892:	7bfb      	ldrb	r3, [r7, #15]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80078a8:	f7ff fdac 	bl	8007404 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078ac:	f7fb fa7a 	bl	8002da4 <HAL_GetTick>
 80078b0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80078b2:	e009      	b.n	80078c8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078b4:	f7fb fa76 	bl	8002da4 <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d902      	bls.n	80078c8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	73fb      	strb	r3, [r7, #15]
      break;
 80078c6:	e004      	b.n	80078d2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80078c8:	f7ff fdab 	bl	8007422 <LL_RCC_PLLSAI1_IsReady>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1f0      	bne.n	80078b4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d137      	bne.n	8007948 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80078d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	021b      	lsls	r3, r3, #8
 80078e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078ec:	4313      	orrs	r3, r2
 80078ee:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80078f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007902:	4313      	orrs	r3, r2
 8007904:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007906:	f7ff fd6e 	bl	80073e6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800790a:	f7fb fa4b 	bl	8002da4 <HAL_GetTick>
 800790e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007910:	e009      	b.n	8007926 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007912:	f7fb fa47 	bl	8002da4 <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	2b02      	cmp	r3, #2
 800791e:	d902      	bls.n	8007926 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	73fb      	strb	r3, [r7, #15]
        break;
 8007924:	e004      	b.n	8007930 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007926:	f7ff fd7c 	bl	8007422 <LL_RCC_PLLSAI1_IsReady>
 800792a:	4603      	mov	r3, r0
 800792c:	2b01      	cmp	r3, #1
 800792e:	d1f0      	bne.n	8007912 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007930:	7bfb      	ldrb	r3, [r7, #15]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d108      	bne.n	8007948 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800793a:	691a      	ldr	r2, [r3, #16]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007944:	4313      	orrs	r3, r2
 8007946:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b082      	sub	sp, #8
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e090      	b.n	8007a86 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d106      	bne.n	800797e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7fa fe93 	bl	80026a4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2202      	movs	r2, #2
 8007982:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	22ca      	movs	r2, #202	; 0xca
 800798c:	625a      	str	r2, [r3, #36]	; 0x24
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2253      	movs	r2, #83	; 0x53
 8007994:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f89f 	bl	8007ada <RTC_EnterInitMode>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d009      	beq.n	80079b6 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	22ff      	movs	r2, #255	; 0xff
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2204      	movs	r2, #4
 80079ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e067      	b.n	8007a86 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	6812      	ldr	r2, [r2, #0]
 80079c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80079c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079c8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6899      	ldr	r1, [r3, #8]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	431a      	orrs	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	68d2      	ldr	r2, [r2, #12]
 80079f0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6919      	ldr	r1, [r3, #16]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	041a      	lsls	r2, r3, #16
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a14:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 0203 	bic.w	r2, r2, #3
 8007a24:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	69da      	ldr	r2, [r3, #28]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	431a      	orrs	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d113      	bne.n	8007a74 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f81e 	bl	8007a8e <HAL_RTC_WaitForSynchro>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00d      	beq.n	8007a74 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	22ff      	movs	r2, #255	; 0xff
 8007a5e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2204      	movs	r2, #4
 8007a64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e008      	b.n	8007a86 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	22ff      	movs	r2, #255	; 0xff
 8007a7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8007a84:	2300      	movs	r3, #0
  }
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b084      	sub	sp, #16
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68da      	ldr	r2, [r3, #12]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007aa4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007aa6:	f7fb f97d 	bl	8002da4 <HAL_GetTick>
 8007aaa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007aac:	e009      	b.n	8007ac2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007aae:	f7fb f979 	bl	8002da4 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007abc:	d901      	bls.n	8007ac2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e007      	b.n	8007ad2 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0ee      	beq.n	8007aae <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d119      	bne.n	8007b24 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f04f 32ff 	mov.w	r2, #4294967295
 8007af8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007afa:	f7fb f953 	bl	8002da4 <HAL_GetTick>
 8007afe:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b00:	e009      	b.n	8007b16 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007b02:	f7fb f94f 	bl	8002da4 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b10:	d901      	bls.n	8007b16 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e007      	b.n	8007b26 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0ee      	beq.n	8007b02 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e049      	b.n	8007bd4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d106      	bne.n	8007b5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7fb f86f 	bl	8002c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	f000 fd17 	bl	80085a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d001      	beq.n	8007bf4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e02e      	b.n	8007c52 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a17      	ldr	r2, [pc, #92]	; (8007c60 <HAL_TIM_Base_Start+0x84>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d004      	beq.n	8007c10 <HAL_TIM_Base_Start+0x34>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c0e:	d115      	bne.n	8007c3c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689a      	ldr	r2, [r3, #8]
 8007c16:	4b13      	ldr	r3, [pc, #76]	; (8007c64 <HAL_TIM_Base_Start+0x88>)
 8007c18:	4013      	ands	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b06      	cmp	r3, #6
 8007c20:	d015      	beq.n	8007c4e <HAL_TIM_Base_Start+0x72>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c28:	d011      	beq.n	8007c4e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f042 0201 	orr.w	r2, r2, #1
 8007c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c3a:	e008      	b.n	8007c4e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f042 0201 	orr.w	r2, r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	e000      	b.n	8007c50 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	40012c00 	.word	0x40012c00
 8007c64:	00010007 	.word	0x00010007

08007c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d001      	beq.n	8007c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e036      	b.n	8007cee <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68da      	ldr	r2, [r3, #12]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 0201 	orr.w	r2, r2, #1
 8007c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a17      	ldr	r2, [pc, #92]	; (8007cfc <HAL_TIM_Base_Start_IT+0x94>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d004      	beq.n	8007cac <HAL_TIM_Base_Start_IT+0x44>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007caa:	d115      	bne.n	8007cd8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689a      	ldr	r2, [r3, #8]
 8007cb2:	4b13      	ldr	r3, [pc, #76]	; (8007d00 <HAL_TIM_Base_Start_IT+0x98>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2b06      	cmp	r3, #6
 8007cbc:	d015      	beq.n	8007cea <HAL_TIM_Base_Start_IT+0x82>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cc4:	d011      	beq.n	8007cea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f042 0201 	orr.w	r2, r2, #1
 8007cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd6:	e008      	b.n	8007cea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f042 0201 	orr.w	r2, r2, #1
 8007ce6:	601a      	str	r2, [r3, #0]
 8007ce8:	e000      	b.n	8007cec <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	40012c00 	.word	0x40012c00
 8007d00:	00010007 	.word	0x00010007

08007d04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e049      	b.n	8007daa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d106      	bne.n	8007d30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f841 	bl	8007db2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4619      	mov	r1, r3
 8007d42:	4610      	mov	r0, r2
 8007d44:	f000 fc2c 	bl	80085a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
	...

08007dc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d109      	bne.n	8007dec <HAL_TIM_PWM_Start+0x24>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	bf14      	ite	ne
 8007de4:	2301      	movne	r3, #1
 8007de6:	2300      	moveq	r3, #0
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	e03c      	b.n	8007e66 <HAL_TIM_PWM_Start+0x9e>
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	d109      	bne.n	8007e06 <HAL_TIM_PWM_Start+0x3e>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	bf14      	ite	ne
 8007dfe:	2301      	movne	r3, #1
 8007e00:	2300      	moveq	r3, #0
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	e02f      	b.n	8007e66 <HAL_TIM_PWM_Start+0x9e>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d109      	bne.n	8007e20 <HAL_TIM_PWM_Start+0x58>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	bf14      	ite	ne
 8007e18:	2301      	movne	r3, #1
 8007e1a:	2300      	moveq	r3, #0
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	e022      	b.n	8007e66 <HAL_TIM_PWM_Start+0x9e>
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2b0c      	cmp	r3, #12
 8007e24:	d109      	bne.n	8007e3a <HAL_TIM_PWM_Start+0x72>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	bf14      	ite	ne
 8007e32:	2301      	movne	r3, #1
 8007e34:	2300      	moveq	r3, #0
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	e015      	b.n	8007e66 <HAL_TIM_PWM_Start+0x9e>
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	2b10      	cmp	r3, #16
 8007e3e:	d109      	bne.n	8007e54 <HAL_TIM_PWM_Start+0x8c>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	bf14      	ite	ne
 8007e4c:	2301      	movne	r3, #1
 8007e4e:	2300      	moveq	r3, #0
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	e008      	b.n	8007e66 <HAL_TIM_PWM_Start+0x9e>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	bf14      	ite	ne
 8007e60:	2301      	movne	r3, #1
 8007e62:	2300      	moveq	r3, #0
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e079      	b.n	8007f62 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <HAL_TIM_PWM_Start+0xb6>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e7c:	e023      	b.n	8007ec6 <HAL_TIM_PWM_Start+0xfe>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	d104      	bne.n	8007e8e <HAL_TIM_PWM_Start+0xc6>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e8c:	e01b      	b.n	8007ec6 <HAL_TIM_PWM_Start+0xfe>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d104      	bne.n	8007e9e <HAL_TIM_PWM_Start+0xd6>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e9c:	e013      	b.n	8007ec6 <HAL_TIM_PWM_Start+0xfe>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b0c      	cmp	r3, #12
 8007ea2:	d104      	bne.n	8007eae <HAL_TIM_PWM_Start+0xe6>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007eac:	e00b      	b.n	8007ec6 <HAL_TIM_PWM_Start+0xfe>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b10      	cmp	r3, #16
 8007eb2:	d104      	bne.n	8007ebe <HAL_TIM_PWM_Start+0xf6>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ebc:	e003      	b.n	8007ec6 <HAL_TIM_PWM_Start+0xfe>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 fee4 	bl	8008c9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a24      	ldr	r2, [pc, #144]	; (8007f6c <HAL_TIM_PWM_Start+0x1a4>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d009      	beq.n	8007ef2 <HAL_TIM_PWM_Start+0x12a>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a23      	ldr	r2, [pc, #140]	; (8007f70 <HAL_TIM_PWM_Start+0x1a8>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d004      	beq.n	8007ef2 <HAL_TIM_PWM_Start+0x12a>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a21      	ldr	r2, [pc, #132]	; (8007f74 <HAL_TIM_PWM_Start+0x1ac>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d101      	bne.n	8007ef6 <HAL_TIM_PWM_Start+0x12e>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e000      	b.n	8007ef8 <HAL_TIM_PWM_Start+0x130>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d007      	beq.n	8007f0c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f0a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a16      	ldr	r2, [pc, #88]	; (8007f6c <HAL_TIM_PWM_Start+0x1a4>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d004      	beq.n	8007f20 <HAL_TIM_PWM_Start+0x158>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1e:	d115      	bne.n	8007f4c <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689a      	ldr	r2, [r3, #8]
 8007f26:	4b14      	ldr	r3, [pc, #80]	; (8007f78 <HAL_TIM_PWM_Start+0x1b0>)
 8007f28:	4013      	ands	r3, r2
 8007f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b06      	cmp	r3, #6
 8007f30:	d015      	beq.n	8007f5e <HAL_TIM_PWM_Start+0x196>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f38:	d011      	beq.n	8007f5e <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f042 0201 	orr.w	r2, r2, #1
 8007f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f4a:	e008      	b.n	8007f5e <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0201 	orr.w	r2, r2, #1
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	e000      	b.n	8007f60 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	40012c00 	.word	0x40012c00
 8007f70:	40014400 	.word	0x40014400
 8007f74:	40014800 	.word	0x40014800
 8007f78:	00010007 	.word	0x00010007

08007f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	f003 0302 	and.w	r3, r3, #2
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d122      	bne.n	8007fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f003 0302 	and.w	r3, r3, #2
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d11b      	bne.n	8007fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f06f 0202 	mvn.w	r2, #2
 8007fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	f003 0303 	and.w	r3, r3, #3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 facf 	bl	8008562 <HAL_TIM_IC_CaptureCallback>
 8007fc4:	e005      	b.n	8007fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fac1 	bl	800854e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fad2 	bl	8008576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	f003 0304 	and.w	r3, r3, #4
 8007fe2:	2b04      	cmp	r3, #4
 8007fe4:	d122      	bne.n	800802c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	f003 0304 	and.w	r3, r3, #4
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d11b      	bne.n	800802c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f06f 0204 	mvn.w	r2, #4
 8007ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2202      	movs	r2, #2
 8008002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 faa5 	bl	8008562 <HAL_TIM_IC_CaptureCallback>
 8008018:	e005      	b.n	8008026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fa97 	bl	800854e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 faa8 	bl	8008576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	f003 0308 	and.w	r3, r3, #8
 8008036:	2b08      	cmp	r3, #8
 8008038:	d122      	bne.n	8008080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	f003 0308 	and.w	r3, r3, #8
 8008044:	2b08      	cmp	r3, #8
 8008046:	d11b      	bne.n	8008080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f06f 0208 	mvn.w	r2, #8
 8008050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2204      	movs	r2, #4
 8008056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	f003 0303 	and.w	r3, r3, #3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d003      	beq.n	800806e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fa7b 	bl	8008562 <HAL_TIM_IC_CaptureCallback>
 800806c:	e005      	b.n	800807a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fa6d 	bl	800854e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fa7e 	bl	8008576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	f003 0310 	and.w	r3, r3, #16
 800808a:	2b10      	cmp	r3, #16
 800808c:	d122      	bne.n	80080d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	f003 0310 	and.w	r3, r3, #16
 8008098:	2b10      	cmp	r3, #16
 800809a:	d11b      	bne.n	80080d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f06f 0210 	mvn.w	r2, #16
 80080a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2208      	movs	r2, #8
 80080aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fa51 	bl	8008562 <HAL_TIM_IC_CaptureCallback>
 80080c0:	e005      	b.n	80080ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fa43 	bl	800854e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fa54 	bl	8008576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d10e      	bne.n	8008100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d107      	bne.n	8008100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f06f 0201 	mvn.w	r2, #1
 80080f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7fa f856 	bl	80021ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810a:	2b80      	cmp	r3, #128	; 0x80
 800810c:	d10e      	bne.n	800812c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008118:	2b80      	cmp	r3, #128	; 0x80
 800811a:	d107      	bne.n	800812c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fed8 	bl	8008edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800813a:	d10e      	bne.n	800815a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008146:	2b80      	cmp	r3, #128	; 0x80
 8008148:	d107      	bne.n	800815a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fecb 	bl	8008ef0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008164:	2b40      	cmp	r3, #64	; 0x40
 8008166:	d10e      	bne.n	8008186 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008172:	2b40      	cmp	r3, #64	; 0x40
 8008174:	d107      	bne.n	8008186 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800817e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fa02 	bl	800858a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	f003 0320 	and.w	r3, r3, #32
 8008190:	2b20      	cmp	r3, #32
 8008192:	d10e      	bne.n	80081b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	f003 0320 	and.w	r3, r3, #32
 800819e:	2b20      	cmp	r3, #32
 80081a0:	d107      	bne.n	80081b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f06f 0220 	mvn.w	r2, #32
 80081aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fe8b 	bl	8008ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081b2:	bf00      	nop
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
	...

080081bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d101      	bne.n	80081d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80081d2:	2302      	movs	r3, #2
 80081d4:	e0fd      	b.n	80083d2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b14      	cmp	r3, #20
 80081e2:	f200 80f0 	bhi.w	80083c6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80081e6:	a201      	add	r2, pc, #4	; (adr r2, 80081ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 80081e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ec:	08008241 	.word	0x08008241
 80081f0:	080083c7 	.word	0x080083c7
 80081f4:	080083c7 	.word	0x080083c7
 80081f8:	080083c7 	.word	0x080083c7
 80081fc:	08008281 	.word	0x08008281
 8008200:	080083c7 	.word	0x080083c7
 8008204:	080083c7 	.word	0x080083c7
 8008208:	080083c7 	.word	0x080083c7
 800820c:	080082c3 	.word	0x080082c3
 8008210:	080083c7 	.word	0x080083c7
 8008214:	080083c7 	.word	0x080083c7
 8008218:	080083c7 	.word	0x080083c7
 800821c:	08008303 	.word	0x08008303
 8008220:	080083c7 	.word	0x080083c7
 8008224:	080083c7 	.word	0x080083c7
 8008228:	080083c7 	.word	0x080083c7
 800822c:	08008345 	.word	0x08008345
 8008230:	080083c7 	.word	0x080083c7
 8008234:	080083c7 	.word	0x080083c7
 8008238:	080083c7 	.word	0x080083c7
 800823c:	08008385 	.word	0x08008385
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68b9      	ldr	r1, [r7, #8]
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fa0e 	bl	8008668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	699a      	ldr	r2, [r3, #24]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f042 0208 	orr.w	r2, r2, #8
 800825a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	699a      	ldr	r2, [r3, #24]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f022 0204 	bic.w	r2, r2, #4
 800826a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6999      	ldr	r1, [r3, #24]
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	691a      	ldr	r2, [r3, #16]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	619a      	str	r2, [r3, #24]
      break;
 800827e:	e0a3      	b.n	80083c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68b9      	ldr	r1, [r7, #8]
 8008286:	4618      	mov	r0, r3
 8008288:	f000 fa6a 	bl	8008760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	699a      	ldr	r2, [r3, #24]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800829a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	699a      	ldr	r2, [r3, #24]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6999      	ldr	r1, [r3, #24]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	021a      	lsls	r2, r3, #8
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	430a      	orrs	r2, r1
 80082be:	619a      	str	r2, [r3, #24]
      break;
 80082c0:	e082      	b.n	80083c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68b9      	ldr	r1, [r7, #8]
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 fac3 	bl	8008854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	69da      	ldr	r2, [r3, #28]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f042 0208 	orr.w	r2, r2, #8
 80082dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	69da      	ldr	r2, [r3, #28]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f022 0204 	bic.w	r2, r2, #4
 80082ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	69d9      	ldr	r1, [r3, #28]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	691a      	ldr	r2, [r3, #16]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	61da      	str	r2, [r3, #28]
      break;
 8008300:	e062      	b.n	80083c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68b9      	ldr	r1, [r7, #8]
 8008308:	4618      	mov	r0, r3
 800830a:	f000 fb1b 	bl	8008944 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	69da      	ldr	r2, [r3, #28]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800831c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	69da      	ldr	r2, [r3, #28]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800832c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69d9      	ldr	r1, [r3, #28]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	021a      	lsls	r2, r3, #8
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	430a      	orrs	r2, r1
 8008340:	61da      	str	r2, [r3, #28]
      break;
 8008342:	e041      	b.n	80083c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68b9      	ldr	r1, [r7, #8]
 800834a:	4618      	mov	r0, r3
 800834c:	f000 fb58 	bl	8008a00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f042 0208 	orr.w	r2, r2, #8
 800835e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f022 0204 	bic.w	r2, r2, #4
 800836e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	691a      	ldr	r2, [r3, #16]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008382:	e021      	b.n	80083c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	4618      	mov	r0, r3
 800838c:	f000 fb90 	bl	8008ab0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800839e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	021a      	lsls	r2, r3, #8
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	430a      	orrs	r2, r1
 80083c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083c4:	e000      	b.n	80083c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80083c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop

080083dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d101      	bne.n	80083f4 <HAL_TIM_ConfigClockSource+0x18>
 80083f0:	2302      	movs	r3, #2
 80083f2:	e0a8      	b.n	8008546 <HAL_TIM_ConfigClockSource+0x16a>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008412:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008416:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800841e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b40      	cmp	r3, #64	; 0x40
 800842e:	d067      	beq.n	8008500 <HAL_TIM_ConfigClockSource+0x124>
 8008430:	2b40      	cmp	r3, #64	; 0x40
 8008432:	d80b      	bhi.n	800844c <HAL_TIM_ConfigClockSource+0x70>
 8008434:	2b10      	cmp	r3, #16
 8008436:	d073      	beq.n	8008520 <HAL_TIM_ConfigClockSource+0x144>
 8008438:	2b10      	cmp	r3, #16
 800843a:	d802      	bhi.n	8008442 <HAL_TIM_ConfigClockSource+0x66>
 800843c:	2b00      	cmp	r3, #0
 800843e:	d06f      	beq.n	8008520 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008440:	e078      	b.n	8008534 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008442:	2b20      	cmp	r3, #32
 8008444:	d06c      	beq.n	8008520 <HAL_TIM_ConfigClockSource+0x144>
 8008446:	2b30      	cmp	r3, #48	; 0x30
 8008448:	d06a      	beq.n	8008520 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800844a:	e073      	b.n	8008534 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800844c:	2b70      	cmp	r3, #112	; 0x70
 800844e:	d00d      	beq.n	800846c <HAL_TIM_ConfigClockSource+0x90>
 8008450:	2b70      	cmp	r3, #112	; 0x70
 8008452:	d804      	bhi.n	800845e <HAL_TIM_ConfigClockSource+0x82>
 8008454:	2b50      	cmp	r3, #80	; 0x50
 8008456:	d033      	beq.n	80084c0 <HAL_TIM_ConfigClockSource+0xe4>
 8008458:	2b60      	cmp	r3, #96	; 0x60
 800845a:	d041      	beq.n	80084e0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800845c:	e06a      	b.n	8008534 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800845e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008462:	d066      	beq.n	8008532 <HAL_TIM_ConfigClockSource+0x156>
 8008464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008468:	d017      	beq.n	800849a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800846a:	e063      	b.n	8008534 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6818      	ldr	r0, [r3, #0]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	6899      	ldr	r1, [r3, #8]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f000 fbee 	bl	8008c5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800848e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	609a      	str	r2, [r3, #8]
      break;
 8008498:	e04c      	b.n	8008534 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6818      	ldr	r0, [r3, #0]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	6899      	ldr	r1, [r3, #8]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	f000 fbd7 	bl	8008c5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	689a      	ldr	r2, [r3, #8]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084bc:	609a      	str	r2, [r3, #8]
      break;
 80084be:	e039      	b.n	8008534 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6818      	ldr	r0, [r3, #0]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	6859      	ldr	r1, [r3, #4]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	461a      	mov	r2, r3
 80084ce:	f000 fb49 	bl	8008b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2150      	movs	r1, #80	; 0x50
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fba2 	bl	8008c22 <TIM_ITRx_SetConfig>
      break;
 80084de:	e029      	b.n	8008534 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6818      	ldr	r0, [r3, #0]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	6859      	ldr	r1, [r3, #4]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	461a      	mov	r2, r3
 80084ee:	f000 fb68 	bl	8008bc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2160      	movs	r1, #96	; 0x60
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 fb92 	bl	8008c22 <TIM_ITRx_SetConfig>
      break;
 80084fe:	e019      	b.n	8008534 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6818      	ldr	r0, [r3, #0]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	6859      	ldr	r1, [r3, #4]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	461a      	mov	r2, r3
 800850e:	f000 fb29 	bl	8008b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2140      	movs	r1, #64	; 0x40
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fb82 	bl	8008c22 <TIM_ITRx_SetConfig>
      break;
 800851e:	e009      	b.n	8008534 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4619      	mov	r1, r3
 800852a:	4610      	mov	r0, r2
 800852c:	f000 fb79 	bl	8008c22 <TIM_ITRx_SetConfig>
        break;
 8008530:	e000      	b.n	8008534 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8008532:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800854e:	b480      	push	{r7}
 8008550:	b083      	sub	sp, #12
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008556:	bf00      	nop
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800856a:	bf00      	nop
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008592:	bf00      	nop
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
	...

080085a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a2a      	ldr	r2, [pc, #168]	; (800865c <TIM_Base_SetConfig+0xbc>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d003      	beq.n	80085c0 <TIM_Base_SetConfig+0x20>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085be:	d108      	bne.n	80085d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a21      	ldr	r2, [pc, #132]	; (800865c <TIM_Base_SetConfig+0xbc>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d00b      	beq.n	80085f2 <TIM_Base_SetConfig+0x52>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085e0:	d007      	beq.n	80085f2 <TIM_Base_SetConfig+0x52>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a1e      	ldr	r2, [pc, #120]	; (8008660 <TIM_Base_SetConfig+0xc0>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d003      	beq.n	80085f2 <TIM_Base_SetConfig+0x52>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a1d      	ldr	r2, [pc, #116]	; (8008664 <TIM_Base_SetConfig+0xc4>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d108      	bne.n	8008604 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	4313      	orrs	r3, r2
 8008602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	4313      	orrs	r3, r2
 8008610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	689a      	ldr	r2, [r3, #8]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a0c      	ldr	r2, [pc, #48]	; (800865c <TIM_Base_SetConfig+0xbc>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d007      	beq.n	8008640 <TIM_Base_SetConfig+0xa0>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a0b      	ldr	r2, [pc, #44]	; (8008660 <TIM_Base_SetConfig+0xc0>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d003      	beq.n	8008640 <TIM_Base_SetConfig+0xa0>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a0a      	ldr	r2, [pc, #40]	; (8008664 <TIM_Base_SetConfig+0xc4>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d103      	bne.n	8008648 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	691a      	ldr	r2, [r3, #16]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	615a      	str	r2, [r3, #20]
}
 800864e:	bf00      	nop
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	40012c00 	.word	0x40012c00
 8008660:	40014400 	.word	0x40014400
 8008664:	40014800 	.word	0x40014800

08008668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	f023 0201 	bic.w	r2, r3, #1
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f023 0303 	bic.w	r3, r3, #3
 80086a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f023 0302 	bic.w	r3, r3, #2
 80086b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	4313      	orrs	r3, r2
 80086be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a24      	ldr	r2, [pc, #144]	; (8008754 <TIM_OC1_SetConfig+0xec>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d007      	beq.n	80086d8 <TIM_OC1_SetConfig+0x70>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a23      	ldr	r2, [pc, #140]	; (8008758 <TIM_OC1_SetConfig+0xf0>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d003      	beq.n	80086d8 <TIM_OC1_SetConfig+0x70>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a22      	ldr	r2, [pc, #136]	; (800875c <TIM_OC1_SetConfig+0xf4>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d10c      	bne.n	80086f2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f023 0308 	bic.w	r3, r3, #8
 80086de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f023 0304 	bic.w	r3, r3, #4
 80086f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a17      	ldr	r2, [pc, #92]	; (8008754 <TIM_OC1_SetConfig+0xec>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d007      	beq.n	800870a <TIM_OC1_SetConfig+0xa2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a17      	ldr	r2, [pc, #92]	; (800875c <TIM_OC1_SetConfig+0xf4>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d003      	beq.n	800870a <TIM_OC1_SetConfig+0xa2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a14      	ldr	r2, [pc, #80]	; (8008758 <TIM_OC1_SetConfig+0xf0>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d111      	bne.n	800872e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	4313      	orrs	r3, r2
 8008722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	4313      	orrs	r3, r2
 800872c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685a      	ldr	r2, [r3, #4]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	621a      	str	r2, [r3, #32]
}
 8008748:	bf00      	nop
 800874a:	371c      	adds	r7, #28
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	40012c00 	.word	0x40012c00
 8008758:	40014800 	.word	0x40014800
 800875c:	40014400 	.word	0x40014400

08008760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008760:	b480      	push	{r7}
 8008762:	b087      	sub	sp, #28
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	f023 0210 	bic.w	r2, r3, #16
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800878e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800879a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	021b      	lsls	r3, r3, #8
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f023 0320 	bic.w	r3, r3, #32
 80087ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	011b      	lsls	r3, r3, #4
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a22      	ldr	r2, [pc, #136]	; (8008848 <TIM_OC2_SetConfig+0xe8>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d10d      	bne.n	80087e0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	011b      	lsls	r3, r3, #4
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a19      	ldr	r2, [pc, #100]	; (8008848 <TIM_OC2_SetConfig+0xe8>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d007      	beq.n	80087f8 <TIM_OC2_SetConfig+0x98>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a18      	ldr	r2, [pc, #96]	; (800884c <TIM_OC2_SetConfig+0xec>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d003      	beq.n	80087f8 <TIM_OC2_SetConfig+0x98>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a17      	ldr	r2, [pc, #92]	; (8008850 <TIM_OC2_SetConfig+0xf0>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d113      	bne.n	8008820 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	4313      	orrs	r3, r2
 8008812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	4313      	orrs	r3, r2
 800881e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	621a      	str	r2, [r3, #32]
}
 800883a:	bf00      	nop
 800883c:	371c      	adds	r7, #28
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	40012c00 	.word	0x40012c00
 800884c:	40014400 	.word	0x40014400
 8008850:	40014800 	.word	0x40014800

08008854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f023 0303 	bic.w	r3, r3, #3
 800888e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	4313      	orrs	r3, r2
 8008898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	021b      	lsls	r3, r3, #8
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a21      	ldr	r2, [pc, #132]	; (8008938 <TIM_OC3_SetConfig+0xe4>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d10d      	bne.n	80088d2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	021b      	lsls	r3, r3, #8
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a18      	ldr	r2, [pc, #96]	; (8008938 <TIM_OC3_SetConfig+0xe4>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d007      	beq.n	80088ea <TIM_OC3_SetConfig+0x96>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a17      	ldr	r2, [pc, #92]	; (800893c <TIM_OC3_SetConfig+0xe8>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d003      	beq.n	80088ea <TIM_OC3_SetConfig+0x96>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a16      	ldr	r2, [pc, #88]	; (8008940 <TIM_OC3_SetConfig+0xec>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d113      	bne.n	8008912 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	011b      	lsls	r3, r3, #4
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	4313      	orrs	r3, r2
 8008910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	685a      	ldr	r2, [r3, #4]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	621a      	str	r2, [r3, #32]
}
 800892c:	bf00      	nop
 800892e:	371c      	adds	r7, #28
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	40012c00 	.word	0x40012c00
 800893c:	40014400 	.word	0x40014400
 8008940:	40014800 	.word	0x40014800

08008944 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	69db      	ldr	r3, [r3, #28]
 800896a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800897e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	021b      	lsls	r3, r3, #8
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	4313      	orrs	r3, r2
 800898a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	031b      	lsls	r3, r3, #12
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	4313      	orrs	r3, r2
 800899e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a14      	ldr	r2, [pc, #80]	; (80089f4 <TIM_OC4_SetConfig+0xb0>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d007      	beq.n	80089b8 <TIM_OC4_SetConfig+0x74>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a13      	ldr	r2, [pc, #76]	; (80089f8 <TIM_OC4_SetConfig+0xb4>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d003      	beq.n	80089b8 <TIM_OC4_SetConfig+0x74>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a12      	ldr	r2, [pc, #72]	; (80089fc <TIM_OC4_SetConfig+0xb8>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d109      	bne.n	80089cc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	019b      	lsls	r3, r3, #6
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	621a      	str	r2, [r3, #32]
}
 80089e6:	bf00      	nop
 80089e8:	371c      	adds	r7, #28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	40012c00 	.word	0x40012c00
 80089f8:	40014400 	.word	0x40014400
 80089fc:	40014800 	.word	0x40014800

08008a00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b087      	sub	sp, #28
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	041b      	lsls	r3, r3, #16
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a13      	ldr	r2, [pc, #76]	; (8008aa4 <TIM_OC5_SetConfig+0xa4>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d007      	beq.n	8008a6a <TIM_OC5_SetConfig+0x6a>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a12      	ldr	r2, [pc, #72]	; (8008aa8 <TIM_OC5_SetConfig+0xa8>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d003      	beq.n	8008a6a <TIM_OC5_SetConfig+0x6a>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a11      	ldr	r2, [pc, #68]	; (8008aac <TIM_OC5_SetConfig+0xac>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d109      	bne.n	8008a7e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	021b      	lsls	r3, r3, #8
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	621a      	str	r2, [r3, #32]
}
 8008a98:	bf00      	nop
 8008a9a:	371c      	adds	r7, #28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	40012c00 	.word	0x40012c00
 8008aa8:	40014400 	.word	0x40014400
 8008aac:	40014800 	.word	0x40014800

08008ab0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	021b      	lsls	r3, r3, #8
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	051b      	lsls	r3, r3, #20
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a14      	ldr	r2, [pc, #80]	; (8008b58 <TIM_OC6_SetConfig+0xa8>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d007      	beq.n	8008b1c <TIM_OC6_SetConfig+0x6c>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a13      	ldr	r2, [pc, #76]	; (8008b5c <TIM_OC6_SetConfig+0xac>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d003      	beq.n	8008b1c <TIM_OC6_SetConfig+0x6c>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a12      	ldr	r2, [pc, #72]	; (8008b60 <TIM_OC6_SetConfig+0xb0>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d109      	bne.n	8008b30 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	029b      	lsls	r3, r3, #10
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	621a      	str	r2, [r3, #32]
}
 8008b4a:	bf00      	nop
 8008b4c:	371c      	adds	r7, #28
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	40012c00 	.word	0x40012c00
 8008b5c:	40014400 	.word	0x40014400
 8008b60:	40014800 	.word	0x40014800

08008b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6a1b      	ldr	r3, [r3, #32]
 8008b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	f023 0201 	bic.w	r2, r3, #1
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	011b      	lsls	r3, r3, #4
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	f023 030a 	bic.w	r3, r3, #10
 8008ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	621a      	str	r2, [r3, #32]
}
 8008bb6:	bf00      	nop
 8008bb8:	371c      	adds	r7, #28
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b087      	sub	sp, #28
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	60f8      	str	r0, [r7, #12]
 8008bca:	60b9      	str	r1, [r7, #8]
 8008bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	f023 0210 	bic.w	r2, r3, #16
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	031b      	lsls	r3, r3, #12
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008bfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	011b      	lsls	r3, r3, #4
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	621a      	str	r2, [r3, #32]
}
 8008c16:	bf00      	nop
 8008c18:	371c      	adds	r7, #28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b085      	sub	sp, #20
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	f043 0307 	orr.w	r3, r3, #7
 8008c48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	609a      	str	r2, [r3, #8]
}
 8008c50:	bf00      	nop
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
 8008c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	021a      	lsls	r2, r3, #8
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	609a      	str	r2, [r3, #8]
}
 8008c90:	bf00      	nop
 8008c92:	371c      	adds	r7, #28
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f003 031f 	and.w	r3, r3, #31
 8008cae:	2201      	movs	r2, #1
 8008cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6a1a      	ldr	r2, [r3, #32]
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	43db      	mvns	r3, r3
 8008cbe:	401a      	ands	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6a1a      	ldr	r2, [r3, #32]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f003 031f 	and.w	r3, r3, #31
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd4:	431a      	orrs	r2, r3
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	621a      	str	r2, [r3, #32]
}
 8008cda:	bf00      	nop
 8008cdc:	371c      	adds	r7, #28
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
	...

08008ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d101      	bne.n	8008d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	e04a      	b.n	8008d96 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a1f      	ldr	r2, [pc, #124]	; (8008da4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d108      	bne.n	8008d3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a12      	ldr	r2, [pc, #72]	; (8008da4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d004      	beq.n	8008d6a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d68:	d10c      	bne.n	8008d84 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	40012c00 	.word	0x40012c00

08008da8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d101      	bne.n	8008dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e078      	b.n	8008eb6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	695b      	ldr	r3, [r3, #20]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	041b      	lsls	r3, r3, #16
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a20      	ldr	r2, [pc, #128]	; (8008ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d106      	bne.n	8008e56 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a1a      	ldr	r2, [pc, #104]	; (8008ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d121      	bne.n	8008ea4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6a:	051b      	lsls	r3, r3, #20
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a0c      	ldr	r2, [pc, #48]	; (8008ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d106      	bne.n	8008ea4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	40012c00 	.word	0x40012c00

08008ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f0c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008f10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b085      	sub	sp, #20
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f3e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008f42:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	43db      	mvns	r3, r3
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	4013      	ands	r3, r2
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008f6c:	b084      	sub	sp, #16
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	f107 0014 	add.w	r0, r7, #20
 8008f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff ffb0 	bl	8008f04 <USB_EnableGlobalInt>

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fb0:	b004      	add	sp, #16
 8008fb2:	4770      	bx	lr

08008fb4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b09d      	sub	sp, #116	; 0x74
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4413      	add	r3, r2
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fda:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	78db      	ldrb	r3, [r3, #3]
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	d81f      	bhi.n	8009026 <USB_ActivateEndpoint+0x72>
 8008fe6:	a201      	add	r2, pc, #4	; (adr r2, 8008fec <USB_ActivateEndpoint+0x38>)
 8008fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fec:	08008ffd 	.word	0x08008ffd
 8008ff0:	08009019 	.word	0x08009019
 8008ff4:	0800902f 	.word	0x0800902f
 8008ff8:	0800900b 	.word	0x0800900b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008ffc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009004:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009008:	e012      	b.n	8009030 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800900a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800900e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009012:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009016:	e00b      	b.n	8009030 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009018:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800901c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009020:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009024:	e004      	b.n	8009030 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800902c:	e000      	b.n	8009030 <USB_ActivateEndpoint+0x7c>
      break;
 800902e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	441a      	add	r2, r3
 800903a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800903e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800904a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800904e:	b29b      	uxth	r3, r3
 8009050:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	881b      	ldrh	r3, [r3, #0]
 800905e:	b29b      	uxth	r3, r3
 8009060:	b21b      	sxth	r3, r3
 8009062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800906a:	b21a      	sxth	r2, r3
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	b21b      	sxth	r3, r3
 8009072:	4313      	orrs	r3, r2
 8009074:	b21b      	sxth	r3, r3
 8009076:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	441a      	add	r2, r3
 8009084:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800908c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009098:	b29b      	uxth	r3, r3
 800909a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	7b1b      	ldrb	r3, [r3, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f040 8149 	bne.w	8009338 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	785b      	ldrb	r3, [r3, #1]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 8084 	beq.w	80091b8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	61bb      	str	r3, [r7, #24]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	461a      	mov	r2, r3
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	4413      	add	r3, r2
 80090c2:	61bb      	str	r3, [r7, #24]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	00da      	lsls	r2, r3, #3
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	4413      	add	r3, r2
 80090ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	88db      	ldrh	r3, [r3, #6]
 80090d8:	085b      	lsrs	r3, r3, #1
 80090da:	b29b      	uxth	r3, r3
 80090dc:	005b      	lsls	r3, r3, #1
 80090de:	b29a      	uxth	r2, r3
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4413      	add	r3, r2
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	827b      	strh	r3, [r7, #18]
 80090f2:	8a7b      	ldrh	r3, [r7, #18]
 80090f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d01b      	beq.n	8009134 <USB_ActivateEndpoint+0x180>
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	b29b      	uxth	r3, r3
 800910a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800910e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009112:	823b      	strh	r3, [r7, #16]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	441a      	add	r2, r3
 800911e:	8a3b      	ldrh	r3, [r7, #16]
 8009120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800912c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009130:	b29b      	uxth	r3, r3
 8009132:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	78db      	ldrb	r3, [r3, #3]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d020      	beq.n	800917e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	b29b      	uxth	r3, r3
 800914a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800914e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009152:	81bb      	strh	r3, [r7, #12]
 8009154:	89bb      	ldrh	r3, [r7, #12]
 8009156:	f083 0320 	eor.w	r3, r3, #32
 800915a:	81bb      	strh	r3, [r7, #12]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	441a      	add	r2, r3
 8009166:	89bb      	ldrh	r3, [r7, #12]
 8009168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800916c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009178:	b29b      	uxth	r3, r3
 800917a:	8013      	strh	r3, [r2, #0]
 800917c:	e2bf      	b.n	80096fe <USB_ActivateEndpoint+0x74a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	b29b      	uxth	r3, r3
 800918c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009194:	81fb      	strh	r3, [r7, #14]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	441a      	add	r2, r3
 80091a0:	89fb      	ldrh	r3, [r7, #14]
 80091a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	8013      	strh	r3, [r2, #0]
 80091b6:	e2a2      	b.n	80096fe <USB_ActivateEndpoint+0x74a>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	633b      	str	r3, [r7, #48]	; 0x30
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	461a      	mov	r2, r3
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	4413      	add	r3, r2
 80091ca:	633b      	str	r3, [r7, #48]	; 0x30
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	00da      	lsls	r2, r3, #3
 80091d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d4:	4413      	add	r3, r2
 80091d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	88db      	ldrh	r3, [r3, #6]
 80091e0:	085b      	lsrs	r3, r3, #1
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ea:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	461a      	mov	r2, r3
 80091fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fc:	4413      	add	r3, r2
 80091fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	00da      	lsls	r2, r3, #3
 8009206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009208:	4413      	add	r3, r2
 800920a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800920e:	627b      	str	r3, [r7, #36]	; 0x24
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d112      	bne.n	800923e <USB_ActivateEndpoint+0x28a>
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	b29b      	uxth	r3, r3
 800921e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009222:	b29a      	uxth	r2, r3
 8009224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009226:	801a      	strh	r2, [r3, #0]
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	b29b      	uxth	r3, r3
 800922e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009236:	b29a      	uxth	r2, r3
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	801a      	strh	r2, [r3, #0]
 800923c:	e02f      	b.n	800929e <USB_ActivateEndpoint+0x2ea>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	2b3e      	cmp	r3, #62	; 0x3e
 8009244:	d813      	bhi.n	800926e <USB_ActivateEndpoint+0x2ba>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	085b      	lsrs	r3, r3, #1
 800924c:	66bb      	str	r3, [r7, #104]	; 0x68
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <USB_ActivateEndpoint+0x2ac>
 800925a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800925c:	3301      	adds	r3, #1
 800925e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009262:	b29b      	uxth	r3, r3
 8009264:	029b      	lsls	r3, r3, #10
 8009266:	b29a      	uxth	r2, r3
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	801a      	strh	r2, [r3, #0]
 800926c:	e017      	b.n	800929e <USB_ActivateEndpoint+0x2ea>
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	095b      	lsrs	r3, r3, #5
 8009274:	66bb      	str	r3, [r7, #104]	; 0x68
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	f003 031f 	and.w	r3, r3, #31
 800927e:	2b00      	cmp	r3, #0
 8009280:	d102      	bne.n	8009288 <USB_ActivateEndpoint+0x2d4>
 8009282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009284:	3b01      	subs	r3, #1
 8009286:	66bb      	str	r3, [r7, #104]	; 0x68
 8009288:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800928a:	b29b      	uxth	r3, r3
 800928c:	029b      	lsls	r3, r3, #10
 800928e:	b29b      	uxth	r3, r3
 8009290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009298:	b29a      	uxth	r2, r3
 800929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80092ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d01b      	beq.n	80092ee <USB_ActivateEndpoint+0x33a>
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4413      	add	r3, r2
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092cc:	843b      	strh	r3, [r7, #32]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	441a      	add	r2, r3
 80092d8:	8c3b      	ldrh	r3, [r7, #32]
 80092da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009304:	83fb      	strh	r3, [r7, #30]
 8009306:	8bfb      	ldrh	r3, [r7, #30]
 8009308:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800930c:	83fb      	strh	r3, [r7, #30]
 800930e:	8bfb      	ldrh	r3, [r7, #30]
 8009310:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009314:	83fb      	strh	r3, [r7, #30]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	441a      	add	r2, r3
 8009320:	8bfb      	ldrh	r3, [r7, #30]
 8009322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800932a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800932e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009332:	b29b      	uxth	r3, r3
 8009334:	8013      	strh	r3, [r2, #0]
 8009336:	e1e2      	b.n	80096fe <USB_ActivateEndpoint+0x74a>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	b29b      	uxth	r3, r3
 8009346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800934a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800934e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	441a      	add	r2, r3
 800935c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009368:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800936c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009370:	b29b      	uxth	r3, r3
 8009372:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	663b      	str	r3, [r7, #96]	; 0x60
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800937e:	b29b      	uxth	r3, r3
 8009380:	461a      	mov	r2, r3
 8009382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009384:	4413      	add	r3, r2
 8009386:	663b      	str	r3, [r7, #96]	; 0x60
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	00da      	lsls	r2, r3, #3
 800938e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009390:	4413      	add	r3, r2
 8009392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	891b      	ldrh	r3, [r3, #8]
 800939c:	085b      	lsrs	r3, r3, #1
 800939e:	b29b      	uxth	r3, r3
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093a6:	801a      	strh	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	461a      	mov	r2, r3
 80093b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093b8:	4413      	add	r3, r2
 80093ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	00da      	lsls	r2, r3, #3
 80093c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093c4:	4413      	add	r3, r2
 80093c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093ca:	657b      	str	r3, [r7, #84]	; 0x54
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	895b      	ldrh	r3, [r3, #10]
 80093d0:	085b      	lsrs	r3, r3, #1
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093da:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	785b      	ldrb	r3, [r3, #1]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f040 80b1 	bne.w	8009548 <USB_ActivateEndpoint+0x594>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	881b      	ldrh	r3, [r3, #0]
 80093f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80093f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80093fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d01d      	beq.n	800943e <USB_ActivateEndpoint+0x48a>
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4413      	add	r3, r2
 800940c:	881b      	ldrh	r3, [r3, #0]
 800940e:	b29b      	uxth	r3, r3
 8009410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009418:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	441a      	add	r2, r3
 8009426:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800942a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800942e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009432:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800943a:	b29b      	uxth	r3, r3
 800943c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800944c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800944e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009452:	2b00      	cmp	r3, #0
 8009454:	d01b      	beq.n	800948e <USB_ActivateEndpoint+0x4da>
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	881b      	ldrh	r3, [r3, #0]
 8009462:	b29b      	uxth	r3, r3
 8009464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800946c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	441a      	add	r2, r3
 8009478:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800947a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800947e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009486:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800948a:	b29b      	uxth	r3, r3
 800948c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	b29b      	uxth	r3, r3
 800949c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094a4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	441a      	add	r2, r3
 80094b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80094b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4413      	add	r3, r2
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094dc:	873b      	strh	r3, [r7, #56]	; 0x38
 80094de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80094e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80094e4:	873b      	strh	r3, [r7, #56]	; 0x38
 80094e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80094e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80094ec:	873b      	strh	r3, [r7, #56]	; 0x38
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	441a      	add	r2, r3
 80094f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80094fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800950a:	b29b      	uxth	r3, r3
 800950c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	881b      	ldrh	r3, [r3, #0]
 800951a:	b29b      	uxth	r3, r3
 800951c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009524:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	441a      	add	r2, r3
 8009530:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800953a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800953e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009542:	b29b      	uxth	r3, r3
 8009544:	8013      	strh	r3, [r2, #0]
 8009546:	e0da      	b.n	80096fe <USB_ActivateEndpoint+0x74a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8009558:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800955c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d01d      	beq.n	80095a0 <USB_ActivateEndpoint+0x5ec>
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4413      	add	r3, r2
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	b29b      	uxth	r3, r3
 8009572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800957a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	441a      	add	r2, r3
 8009588:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800958c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800959c:	b29b      	uxth	r3, r3
 800959e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80095b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80095b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d01d      	beq.n	80095f8 <USB_ActivateEndpoint+0x644>
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4413      	add	r3, r2
 80095c6:	881b      	ldrh	r3, [r3, #0]
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	441a      	add	r2, r3
 80095e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80095e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	b29b      	uxth	r3, r3
 8009606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800960a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800960e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	441a      	add	r2, r3
 800961c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800962c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009630:	b29b      	uxth	r3, r3
 8009632:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	78db      	ldrb	r3, [r3, #3]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d024      	beq.n	8009686 <USB_ActivateEndpoint+0x6d2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	b29b      	uxth	r3, r3
 800964a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800964e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009652:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009656:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800965a:	f083 0320 	eor.w	r3, r3, #32
 800965e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	441a      	add	r2, r3
 800966c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800967c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009680:	b29b      	uxth	r3, r3
 8009682:	8013      	strh	r3, [r2, #0]
 8009684:	e01d      	b.n	80096c2 <USB_ActivateEndpoint+0x70e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	b29b      	uxth	r3, r3
 8009694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800969c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	441a      	add	r2, r3
 80096aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80096ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096be:	b29b      	uxth	r3, r3
 80096c0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4413      	add	r3, r2
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	441a      	add	r2, r3
 80096e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80096ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80096fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009702:	4618      	mov	r0, r3
 8009704:	3774      	adds	r7, #116	; 0x74
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop

08009710 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009710:	b480      	push	{r7}
 8009712:	b08d      	sub	sp, #52	; 0x34
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	7b1b      	ldrb	r3, [r3, #12]
 800971e:	2b00      	cmp	r3, #0
 8009720:	f040 808e 	bne.w	8009840 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	785b      	ldrb	r3, [r3, #1]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d044      	beq.n	80097b6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	4413      	add	r3, r2
 8009736:	881b      	ldrh	r3, [r3, #0]
 8009738:	81bb      	strh	r3, [r7, #12]
 800973a:	89bb      	ldrh	r3, [r7, #12]
 800973c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009740:	2b00      	cmp	r3, #0
 8009742:	d01b      	beq.n	800977c <USB_DeactivateEndpoint+0x6c>
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	881b      	ldrh	r3, [r3, #0]
 8009750:	b29b      	uxth	r3, r3
 8009752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800975a:	817b      	strh	r3, [r7, #10]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	441a      	add	r2, r3
 8009766:	897b      	ldrh	r3, [r7, #10]
 8009768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800976c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009774:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009778:	b29b      	uxth	r3, r3
 800977a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4413      	add	r3, r2
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	b29b      	uxth	r3, r3
 800978a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800978e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009792:	813b      	strh	r3, [r7, #8]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	441a      	add	r2, r3
 800979e:	893b      	ldrh	r3, [r7, #8]
 80097a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	8013      	strh	r3, [r2, #0]
 80097b4:	e192      	b.n	8009adc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	881b      	ldrh	r3, [r3, #0]
 80097c2:	827b      	strh	r3, [r7, #18]
 80097c4:	8a7b      	ldrh	r3, [r7, #18]
 80097c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d01b      	beq.n	8009806 <USB_DeactivateEndpoint+0xf6>
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	881b      	ldrh	r3, [r3, #0]
 80097da:	b29b      	uxth	r3, r3
 80097dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097e4:	823b      	strh	r3, [r7, #16]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	441a      	add	r2, r3
 80097f0:	8a3b      	ldrh	r3, [r7, #16]
 80097f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80097fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009802:	b29b      	uxth	r3, r3
 8009804:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	b29b      	uxth	r3, r3
 8009814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800981c:	81fb      	strh	r3, [r7, #14]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	441a      	add	r2, r3
 8009828:	89fb      	ldrh	r3, [r7, #14]
 800982a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800982e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800983a:	b29b      	uxth	r3, r3
 800983c:	8013      	strh	r3, [r2, #0]
 800983e:	e14d      	b.n	8009adc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	785b      	ldrb	r3, [r3, #1]
 8009844:	2b00      	cmp	r3, #0
 8009846:	f040 80a5 	bne.w	8009994 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4413      	add	r3, r2
 8009854:	881b      	ldrh	r3, [r3, #0]
 8009856:	843b      	strh	r3, [r7, #32]
 8009858:	8c3b      	ldrh	r3, [r7, #32]
 800985a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800985e:	2b00      	cmp	r3, #0
 8009860:	d01b      	beq.n	800989a <USB_DeactivateEndpoint+0x18a>
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4413      	add	r3, r2
 800986c:	881b      	ldrh	r3, [r3, #0]
 800986e:	b29b      	uxth	r3, r3
 8009870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009878:	83fb      	strh	r3, [r7, #30]
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	441a      	add	r2, r3
 8009884:	8bfb      	ldrh	r3, [r7, #30]
 8009886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800988a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800988e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009896:	b29b      	uxth	r3, r3
 8009898:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	881b      	ldrh	r3, [r3, #0]
 80098a6:	83bb      	strh	r3, [r7, #28]
 80098a8:	8bbb      	ldrh	r3, [r7, #28]
 80098aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d01b      	beq.n	80098ea <USB_DeactivateEndpoint+0x1da>
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4413      	add	r3, r2
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	b29b      	uxth	r3, r3
 80098c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c8:	837b      	strh	r3, [r7, #26]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	441a      	add	r2, r3
 80098d4:	8b7b      	ldrh	r3, [r7, #26]
 80098d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4413      	add	r3, r2
 80098f4:	881b      	ldrh	r3, [r3, #0]
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009900:	833b      	strh	r3, [r7, #24]
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	441a      	add	r2, r3
 800990c:	8b3b      	ldrh	r3, [r7, #24]
 800990e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800991a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800991e:	b29b      	uxth	r3, r3
 8009920:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	881b      	ldrh	r3, [r3, #0]
 800992e:	b29b      	uxth	r3, r3
 8009930:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009938:	82fb      	strh	r3, [r7, #22]
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	441a      	add	r2, r3
 8009944:	8afb      	ldrh	r3, [r7, #22]
 8009946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800994a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800994e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009956:	b29b      	uxth	r3, r3
 8009958:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	b29b      	uxth	r3, r3
 8009968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800996c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009970:	82bb      	strh	r3, [r7, #20]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	441a      	add	r2, r3
 800997c:	8abb      	ldrh	r3, [r7, #20]
 800997e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800998a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800998e:	b29b      	uxth	r3, r3
 8009990:	8013      	strh	r3, [r2, #0]
 8009992:	e0a3      	b.n	8009adc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	4413      	add	r3, r2
 800999e:	881b      	ldrh	r3, [r3, #0]
 80099a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80099a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d01b      	beq.n	80099e4 <USB_DeactivateEndpoint+0x2d4>
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	881b      	ldrh	r3, [r3, #0]
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	441a      	add	r2, r3
 80099ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80099d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80099f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80099f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d01b      	beq.n	8009a34 <USB_DeactivateEndpoint+0x324>
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a12:	853b      	strh	r3, [r7, #40]	; 0x28
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	441a      	add	r2, r3
 8009a1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	881b      	ldrh	r3, [r3, #0]
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	441a      	add	r2, r3
 8009a56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4413      	add	r3, r2
 8009a76:	881b      	ldrh	r3, [r3, #0]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a82:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	441a      	add	r2, r3
 8009a8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aba:	847b      	strh	r3, [r7, #34]	; 0x22
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	441a      	add	r2, r3
 8009ac6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3734      	adds	r7, #52	; 0x34
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b0a0      	sub	sp, #128	; 0x80
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	785b      	ldrb	r3, [r3, #1]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	f040 81a1 	bne.w	8009e40 <USB_EPStartXfer+0x356>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	699a      	ldr	r2, [r3, #24]
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d909      	bls.n	8009b1e <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	699a      	ldr	r2, [r3, #24]
 8009b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b16:	1ad2      	subs	r2, r2, r3
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	619a      	str	r2, [r3, #24]
 8009b1c:	e005      	b.n	8009b2a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	2200      	movs	r2, #0
 8009b28:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	7b1b      	ldrb	r3, [r3, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d11f      	bne.n	8009b72 <USB_EPStartXfer+0x88>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	6959      	ldr	r1, [r3, #20]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	88da      	ldrh	r2, [r3, #6]
 8009b3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fc3f 	bl	800a3c2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	613b      	str	r3, [r7, #16]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	461a      	mov	r2, r3
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	4413      	add	r3, r2
 8009b56:	613b      	str	r3, [r7, #16]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	00da      	lsls	r2, r3, #3
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	4413      	add	r3, r2
 8009b62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b66:	60fb      	str	r3, [r7, #12]
 8009b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	801a      	strh	r2, [r3, #0]
 8009b70:	e141      	b.n	8009df6 <USB_EPStartXfer+0x30c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4413      	add	r3, r2
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d076      	beq.n	8009c76 <USB_EPStartXfer+0x18c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	785b      	ldrb	r3, [r3, #1]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d153      	bne.n	8009c3c <USB_EPStartXfer+0x152>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	61fb      	str	r3, [r7, #28]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	61fb      	str	r3, [r7, #28]
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	00da      	lsls	r2, r3, #3
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bb6:	61bb      	str	r3, [r7, #24]
 8009bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d112      	bne.n	8009be4 <USB_EPStartXfer+0xfa>
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	881b      	ldrh	r3, [r3, #0]
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	801a      	strh	r2, [r3, #0]
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	881b      	ldrh	r3, [r3, #0]
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	801a      	strh	r2, [r3, #0]
 8009be2:	e043      	b.n	8009c6c <USB_EPStartXfer+0x182>
 8009be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009be6:	2b3e      	cmp	r3, #62	; 0x3e
 8009be8:	d811      	bhi.n	8009c0e <USB_EPStartXfer+0x124>
 8009bea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bec:	085b      	lsrs	r3, r3, #1
 8009bee:	677b      	str	r3, [r7, #116]	; 0x74
 8009bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d002      	beq.n	8009c00 <USB_EPStartXfer+0x116>
 8009bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	677b      	str	r3, [r7, #116]	; 0x74
 8009c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	029b      	lsls	r3, r3, #10
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	801a      	strh	r2, [r3, #0]
 8009c0c:	e02e      	b.n	8009c6c <USB_EPStartXfer+0x182>
 8009c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c10:	095b      	lsrs	r3, r3, #5
 8009c12:	677b      	str	r3, [r7, #116]	; 0x74
 8009c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c16:	f003 031f 	and.w	r3, r3, #31
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d102      	bne.n	8009c24 <USB_EPStartXfer+0x13a>
 8009c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c20:	3b01      	subs	r3, #1
 8009c22:	677b      	str	r3, [r7, #116]	; 0x74
 8009c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	029b      	lsls	r3, r3, #10
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	801a      	strh	r2, [r3, #0]
 8009c3a:	e017      	b.n	8009c6c <USB_EPStartXfer+0x182>
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	785b      	ldrb	r3, [r3, #1]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d113      	bne.n	8009c6c <USB_EPStartXfer+0x182>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	4413      	add	r3, r2
 8009c52:	627b      	str	r3, [r7, #36]	; 0x24
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	00da      	lsls	r2, r3, #3
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c62:	623b      	str	r3, [r7, #32]
 8009c64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	895b      	ldrh	r3, [r3, #10]
 8009c70:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8009c74:	e075      	b.n	8009d62 <USB_EPStartXfer+0x278>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	785b      	ldrb	r3, [r3, #1]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d153      	bne.n	8009d26 <USB_EPStartXfer+0x23c>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8e:	4413      	add	r3, r2
 8009c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	00da      	lsls	r2, r3, #3
 8009c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d112      	bne.n	8009cce <USB_EPStartXfer+0x1e4>
 8009ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb6:	801a      	strh	r2, [r3, #0]
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	881b      	ldrh	r3, [r3, #0]
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cca:	801a      	strh	r2, [r3, #0]
 8009ccc:	e045      	b.n	8009d5a <USB_EPStartXfer+0x270>
 8009cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cd0:	2b3e      	cmp	r3, #62	; 0x3e
 8009cd2:	d811      	bhi.n	8009cf8 <USB_EPStartXfer+0x20e>
 8009cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cd6:	085b      	lsrs	r3, r3, #1
 8009cd8:	673b      	str	r3, [r7, #112]	; 0x70
 8009cda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cdc:	f003 0301 	and.w	r3, r3, #1
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d002      	beq.n	8009cea <USB_EPStartXfer+0x200>
 8009ce4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	673b      	str	r3, [r7, #112]	; 0x70
 8009cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	029b      	lsls	r3, r3, #10
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf4:	801a      	strh	r2, [r3, #0]
 8009cf6:	e030      	b.n	8009d5a <USB_EPStartXfer+0x270>
 8009cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cfa:	095b      	lsrs	r3, r3, #5
 8009cfc:	673b      	str	r3, [r7, #112]	; 0x70
 8009cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d00:	f003 031f 	and.w	r3, r3, #31
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d102      	bne.n	8009d0e <USB_EPStartXfer+0x224>
 8009d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	673b      	str	r3, [r7, #112]	; 0x70
 8009d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	029b      	lsls	r3, r3, #10
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d22:	801a      	strh	r2, [r3, #0]
 8009d24:	e019      	b.n	8009d5a <USB_EPStartXfer+0x270>
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	785b      	ldrb	r3, [r3, #1]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d115      	bne.n	8009d5a <USB_EPStartXfer+0x270>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	637b      	str	r3, [r7, #52]	; 0x34
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d3e:	4413      	add	r3, r2
 8009d40:	637b      	str	r3, [r7, #52]	; 0x34
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	00da      	lsls	r2, r3, #3
 8009d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d50:	633b      	str	r3, [r7, #48]	; 0x30
 8009d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	891b      	ldrh	r3, [r3, #8]
 8009d5e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	6959      	ldr	r1, [r3, #20]
 8009d66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fb27 	bl	800a3c2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	785b      	ldrb	r3, [r3, #1]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d11c      	bne.n	8009db6 <USB_EPStartXfer+0x2cc>
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	881b      	ldrh	r3, [r3, #0]
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d92:	82bb      	strh	r3, [r7, #20]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	441a      	add	r2, r3
 8009d9e:	8abb      	ldrh	r3, [r7, #20]
 8009da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	8013      	strh	r3, [r2, #0]
 8009db4:	e01f      	b.n	8009df6 <USB_EPStartXfer+0x30c>
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	785b      	ldrb	r3, [r3, #1]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d11b      	bne.n	8009df6 <USB_EPStartXfer+0x30c>
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dd4:	82fb      	strh	r3, [r7, #22]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	441a      	add	r2, r3
 8009de0:	8afb      	ldrh	r3, [r7, #22]
 8009de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	881b      	ldrh	r3, [r3, #0]
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e0c:	817b      	strh	r3, [r7, #10]
 8009e0e:	897b      	ldrh	r3, [r7, #10]
 8009e10:	f083 0310 	eor.w	r3, r3, #16
 8009e14:	817b      	strh	r3, [r7, #10]
 8009e16:	897b      	ldrh	r3, [r7, #10]
 8009e18:	f083 0320 	eor.w	r3, r3, #32
 8009e1c:	817b      	strh	r3, [r7, #10]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	441a      	add	r2, r3
 8009e28:	897b      	ldrh	r3, [r7, #10]
 8009e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	8013      	strh	r3, [r2, #0]
 8009e3e:	e175      	b.n	800a12c <USB_EPStartXfer+0x642>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	699a      	ldr	r2, [r3, #24]
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d909      	bls.n	8009e60 <USB_EPStartXfer+0x376>
    {
      len = ep->maxpacket;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	699a      	ldr	r2, [r3, #24]
 8009e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e58:	1ad2      	subs	r2, r2, r3
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	619a      	str	r2, [r3, #24]
 8009e5e:	e005      	b.n	8009e6c <USB_EPStartXfer+0x382>
    }
    else
    {
      len = ep->xfer_len;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	7b1b      	ldrb	r3, [r3, #12]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d153      	bne.n	8009f1c <USB_EPStartXfer+0x432>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	643b      	str	r3, [r7, #64]	; 0x40
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	461a      	mov	r2, r3
 8009e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e84:	4413      	add	r3, r2
 8009e86:	643b      	str	r3, [r7, #64]	; 0x40
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	00da      	lsls	r2, r3, #3
 8009e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e90:	4413      	add	r3, r2
 8009e92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d112      	bne.n	8009ec4 <USB_EPStartXfer+0x3da>
 8009e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eac:	801a      	strh	r2, [r3, #0]
 8009eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb0:	881b      	ldrh	r3, [r3, #0]
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec0:	801a      	strh	r2, [r3, #0]
 8009ec2:	e10f      	b.n	800a0e4 <USB_EPStartXfer+0x5fa>
 8009ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ec6:	2b3e      	cmp	r3, #62	; 0x3e
 8009ec8:	d811      	bhi.n	8009eee <USB_EPStartXfer+0x404>
 8009eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ecc:	085b      	lsrs	r3, r3, #1
 8009ece:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ed2:	f003 0301 	and.w	r3, r3, #1
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <USB_EPStartXfer+0x3f6>
 8009eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009edc:	3301      	adds	r3, #1
 8009ede:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	029b      	lsls	r3, r3, #10
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eea:	801a      	strh	r2, [r3, #0]
 8009eec:	e0fa      	b.n	800a0e4 <USB_EPStartXfer+0x5fa>
 8009eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ef0:	095b      	lsrs	r3, r3, #5
 8009ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ef6:	f003 031f 	and.w	r3, r3, #31
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d102      	bne.n	8009f04 <USB_EPStartXfer+0x41a>
 8009efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f00:	3b01      	subs	r3, #1
 8009f02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	029b      	lsls	r3, r3, #10
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f18:	801a      	strh	r2, [r3, #0]
 8009f1a:	e0e3      	b.n	800a0e4 <USB_EPStartXfer+0x5fa>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	785b      	ldrb	r3, [r3, #1]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d153      	bne.n	8009fcc <USB_EPStartXfer+0x4e2>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	461a      	mov	r2, r3
 8009f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f34:	4413      	add	r3, r2
 8009f36:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	00da      	lsls	r2, r3, #3
 8009f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f40:	4413      	add	r3, r2
 8009f42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f46:	657b      	str	r3, [r7, #84]	; 0x54
 8009f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d112      	bne.n	8009f74 <USB_EPStartXfer+0x48a>
 8009f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f5c:	801a      	strh	r2, [r3, #0]
 8009f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f60:	881b      	ldrh	r3, [r3, #0]
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f70:	801a      	strh	r2, [r3, #0]
 8009f72:	e045      	b.n	800a000 <USB_EPStartXfer+0x516>
 8009f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f76:	2b3e      	cmp	r3, #62	; 0x3e
 8009f78:	d811      	bhi.n	8009f9e <USB_EPStartXfer+0x4b4>
 8009f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f7c:	085b      	lsrs	r3, r3, #1
 8009f7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f82:	f003 0301 	and.w	r3, r3, #1
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d002      	beq.n	8009f90 <USB_EPStartXfer+0x4a6>
 8009f8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	029b      	lsls	r3, r3, #10
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f9a:	801a      	strh	r2, [r3, #0]
 8009f9c:	e030      	b.n	800a000 <USB_EPStartXfer+0x516>
 8009f9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fa0:	095b      	lsrs	r3, r3, #5
 8009fa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fa6:	f003 031f 	and.w	r3, r3, #31
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d102      	bne.n	8009fb4 <USB_EPStartXfer+0x4ca>
 8009fae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	029b      	lsls	r3, r3, #10
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fc8:	801a      	strh	r2, [r3, #0]
 8009fca:	e019      	b.n	800a000 <USB_EPStartXfer+0x516>
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	785b      	ldrb	r3, [r3, #1]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d115      	bne.n	800a000 <USB_EPStartXfer+0x516>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fe4:	4413      	add	r3, r2
 8009fe6:	663b      	str	r3, [r7, #96]	; 0x60
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	00da      	lsls	r2, r3, #3
 8009fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ffe:	801a      	strh	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	653b      	str	r3, [r7, #80]	; 0x50
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	785b      	ldrb	r3, [r3, #1]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d153      	bne.n	800a0b4 <USB_EPStartXfer+0x5ca>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a016:	b29b      	uxth	r3, r3
 800a018:	461a      	mov	r2, r3
 800a01a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a01c:	4413      	add	r3, r2
 800a01e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	00da      	lsls	r2, r3, #3
 800a026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a028:	4413      	add	r3, r2
 800a02a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a02e:	647b      	str	r3, [r7, #68]	; 0x44
 800a030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a032:	2b00      	cmp	r3, #0
 800a034:	d112      	bne.n	800a05c <USB_EPStartXfer+0x572>
 800a036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a038:	881b      	ldrh	r3, [r3, #0]
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a040:	b29a      	uxth	r2, r3
 800a042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a044:	801a      	strh	r2, [r3, #0]
 800a046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a054:	b29a      	uxth	r2, r3
 800a056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a058:	801a      	strh	r2, [r3, #0]
 800a05a:	e043      	b.n	800a0e4 <USB_EPStartXfer+0x5fa>
 800a05c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a05e:	2b3e      	cmp	r3, #62	; 0x3e
 800a060:	d811      	bhi.n	800a086 <USB_EPStartXfer+0x59c>
 800a062:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a064:	085b      	lsrs	r3, r3, #1
 800a066:	667b      	str	r3, [r7, #100]	; 0x64
 800a068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a06a:	f003 0301 	and.w	r3, r3, #1
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d002      	beq.n	800a078 <USB_EPStartXfer+0x58e>
 800a072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a074:	3301      	adds	r3, #1
 800a076:	667b      	str	r3, [r7, #100]	; 0x64
 800a078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	029b      	lsls	r3, r3, #10
 800a07e:	b29a      	uxth	r2, r3
 800a080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a082:	801a      	strh	r2, [r3, #0]
 800a084:	e02e      	b.n	800a0e4 <USB_EPStartXfer+0x5fa>
 800a086:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a088:	095b      	lsrs	r3, r3, #5
 800a08a:	667b      	str	r3, [r7, #100]	; 0x64
 800a08c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a08e:	f003 031f 	and.w	r3, r3, #31
 800a092:	2b00      	cmp	r3, #0
 800a094:	d102      	bne.n	800a09c <USB_EPStartXfer+0x5b2>
 800a096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a098:	3b01      	subs	r3, #1
 800a09a:	667b      	str	r3, [r7, #100]	; 0x64
 800a09c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	029b      	lsls	r3, r3, #10
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0b0:	801a      	strh	r2, [r3, #0]
 800a0b2:	e017      	b.n	800a0e4 <USB_EPStartXfer+0x5fa>
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	785b      	ldrb	r3, [r3, #1]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d113      	bne.n	800a0e4 <USB_EPStartXfer+0x5fa>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0c8:	4413      	add	r3, r2
 800a0ca:	653b      	str	r3, [r7, #80]	; 0x50
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	00da      	lsls	r2, r3, #3
 800a0d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0d4:	4413      	add	r3, r2
 800a0d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a0da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0e2:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	4413      	add	r3, r2
 800a0ee:	881b      	ldrh	r3, [r3, #0]
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0fa:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a0fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a0fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a102:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a104:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a106:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a10a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	441a      	add	r2, r3
 800a116:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a11c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a128:	b29b      	uxth	r3, r3
 800a12a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3780      	adds	r7, #128	; 0x80
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a136:	b480      	push	{r7}
 800a138:	b085      	sub	sp, #20
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	785b      	ldrb	r3, [r3, #1]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d020      	beq.n	800a18a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	4413      	add	r3, r2
 800a152:	881b      	ldrh	r3, [r3, #0]
 800a154:	b29b      	uxth	r3, r3
 800a156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a15a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a15e:	81bb      	strh	r3, [r7, #12]
 800a160:	89bb      	ldrh	r3, [r7, #12]
 800a162:	f083 0310 	eor.w	r3, r3, #16
 800a166:	81bb      	strh	r3, [r7, #12]
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	441a      	add	r2, r3
 800a172:	89bb      	ldrh	r3, [r7, #12]
 800a174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a17c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a184:	b29b      	uxth	r3, r3
 800a186:	8013      	strh	r3, [r2, #0]
 800a188:	e01f      	b.n	800a1ca <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4413      	add	r3, r2
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	b29b      	uxth	r3, r3
 800a198:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a19c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1a0:	81fb      	strh	r3, [r7, #14]
 800a1a2:	89fb      	ldrh	r3, [r7, #14]
 800a1a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1a8:	81fb      	strh	r3, [r7, #14]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	441a      	add	r2, r3
 800a1b4:	89fb      	ldrh	r3, [r7, #14]
 800a1b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b087      	sub	sp, #28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	7b1b      	ldrb	r3, [r3, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f040 809d 	bne.w	800a326 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	785b      	ldrb	r3, [r3, #1]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d04c      	beq.n	800a28e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4413      	add	r3, r2
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	823b      	strh	r3, [r7, #16]
 800a202:	8a3b      	ldrh	r3, [r7, #16]
 800a204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d01b      	beq.n	800a244 <USB_EPClearStall+0x6c>
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4413      	add	r3, r2
 800a216:	881b      	ldrh	r3, [r3, #0]
 800a218:	b29b      	uxth	r3, r3
 800a21a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a21e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a222:	81fb      	strh	r3, [r7, #14]
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	441a      	add	r2, r3
 800a22e:	89fb      	ldrh	r3, [r7, #14]
 800a230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a23c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a240:	b29b      	uxth	r3, r3
 800a242:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	78db      	ldrb	r3, [r3, #3]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d06c      	beq.n	800a326 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4413      	add	r3, r2
 800a256:	881b      	ldrh	r3, [r3, #0]
 800a258:	b29b      	uxth	r3, r3
 800a25a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a25e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a262:	81bb      	strh	r3, [r7, #12]
 800a264:	89bb      	ldrh	r3, [r7, #12]
 800a266:	f083 0320 	eor.w	r3, r3, #32
 800a26a:	81bb      	strh	r3, [r7, #12]
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	441a      	add	r2, r3
 800a276:	89bb      	ldrh	r3, [r7, #12]
 800a278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a27c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a288:	b29b      	uxth	r3, r3
 800a28a:	8013      	strh	r3, [r2, #0]
 800a28c:	e04b      	b.n	800a326 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	4413      	add	r3, r2
 800a298:	881b      	ldrh	r3, [r3, #0]
 800a29a:	82fb      	strh	r3, [r7, #22]
 800a29c:	8afb      	ldrh	r3, [r7, #22]
 800a29e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d01b      	beq.n	800a2de <USB_EPClearStall+0x106>
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	4413      	add	r3, r2
 800a2b0:	881b      	ldrh	r3, [r3, #0]
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2bc:	82bb      	strh	r3, [r7, #20]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	441a      	add	r2, r3
 800a2c8:	8abb      	ldrh	r3, [r7, #20]
 800a2ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4413      	add	r3, r2
 800a2e8:	881b      	ldrh	r3, [r3, #0]
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2f4:	827b      	strh	r3, [r7, #18]
 800a2f6:	8a7b      	ldrh	r3, [r7, #18]
 800a2f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a2fc:	827b      	strh	r3, [r7, #18]
 800a2fe:	8a7b      	ldrh	r3, [r7, #18]
 800a300:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a304:	827b      	strh	r3, [r7, #18]
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	441a      	add	r2, r3
 800a310:	8a7b      	ldrh	r3, [r7, #18]
 800a312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a31a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a31e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a322:	b29b      	uxth	r3, r3
 800a324:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	371c      	adds	r7, #28
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	460b      	mov	r3, r1
 800a33e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a340:	78fb      	ldrb	r3, [r7, #3]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d103      	bne.n	800a34e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2280      	movs	r2, #128	; 0x80
 800a34a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a374:	b29a      	uxth	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a38a:	b480      	push	{r7}
 800a38c:	b085      	sub	sp, #20
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a398:	b29b      	uxth	r3, r3
 800a39a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a39c:	68fb      	ldr	r3, [r7, #12]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b083      	sub	sp, #12
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr

0800a3c2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a3c2:	b480      	push	{r7}
 800a3c4:	b08d      	sub	sp, #52	; 0x34
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	60f8      	str	r0, [r7, #12]
 800a3ca:	60b9      	str	r1, [r7, #8]
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	80fb      	strh	r3, [r7, #6]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a3d8:	88bb      	ldrh	r3, [r7, #4]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	085b      	lsrs	r3, r3, #1
 800a3de:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a3e8:	88fa      	ldrh	r2, [r7, #6]
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3f2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a3f4:	6a3b      	ldr	r3, [r7, #32]
 800a3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3f8:	e01b      	b.n	800a432 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a402:	3301      	adds	r3, #1
 800a404:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	021b      	lsls	r3, r3, #8
 800a40e:	b29b      	uxth	r3, r3
 800a410:	461a      	mov	r2, r3
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	4313      	orrs	r3, r2
 800a416:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a422:	3302      	adds	r3, #2
 800a424:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	3301      	adds	r3, #1
 800a42a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42e:	3b01      	subs	r3, #1
 800a430:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1e0      	bne.n	800a3fa <USB_WritePMA+0x38>
  }
}
 800a438:	bf00      	nop
 800a43a:	3734      	adds	r7, #52	; 0x34
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a444:	b480      	push	{r7}
 800a446:	b08b      	sub	sp, #44	; 0x2c
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	4611      	mov	r1, r2
 800a450:	461a      	mov	r2, r3
 800a452:	460b      	mov	r3, r1
 800a454:	80fb      	strh	r3, [r7, #6]
 800a456:	4613      	mov	r3, r2
 800a458:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a45a:	88bb      	ldrh	r3, [r7, #4]
 800a45c:	085b      	lsrs	r3, r3, #1
 800a45e:	b29b      	uxth	r3, r3
 800a460:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a46a:	88fa      	ldrh	r2, [r7, #6]
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a474:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	627b      	str	r3, [r7, #36]	; 0x24
 800a47a:	e018      	b.n	800a4ae <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	881b      	ldrh	r3, [r3, #0]
 800a480:	b29b      	uxth	r3, r3
 800a482:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a484:	6a3b      	ldr	r3, [r7, #32]
 800a486:	3302      	adds	r3, #2
 800a488:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	b2da      	uxtb	r2, r3
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	3301      	adds	r3, #1
 800a496:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	0a1b      	lsrs	r3, r3, #8
 800a49c:	b2da      	uxtb	r2, r3
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1e3      	bne.n	800a47c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a4b4:	88bb      	ldrh	r3, [r7, #4]
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d007      	beq.n	800a4d0 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800a4c0:	6a3b      	ldr	r3, [r7, #32]
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	b2da      	uxtb	r2, r3
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	701a      	strb	r2, [r3, #0]
  }
}
 800a4d0:	bf00      	nop
 800a4d2:	372c      	adds	r7, #44	; 0x2c
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a4e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a4ec:	f008 ff58 	bl	80133a0 <USBD_static_malloc>
 800a4f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d105      	bne.n	800a504 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a500:	2302      	movs	r3, #2
 800a502:	e066      	b.n	800a5d2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	7c1b      	ldrb	r3, [r3, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d119      	bne.n	800a548 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a514:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a518:	2202      	movs	r2, #2
 800a51a:	2181      	movs	r1, #129	; 0x81
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f008 fe22 	bl	8013166 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2201      	movs	r2, #1
 800a526:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a52c:	2202      	movs	r2, #2
 800a52e:	2101      	movs	r1, #1
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f008 fe18 	bl	8013166 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2210      	movs	r2, #16
 800a542:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a546:	e016      	b.n	800a576 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a548:	2340      	movs	r3, #64	; 0x40
 800a54a:	2202      	movs	r2, #2
 800a54c:	2181      	movs	r1, #129	; 0x81
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f008 fe09 	bl	8013166 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a55a:	2340      	movs	r3, #64	; 0x40
 800a55c:	2202      	movs	r2, #2
 800a55e:	2101      	movs	r1, #1
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f008 fe00 	bl	8013166 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2210      	movs	r2, #16
 800a572:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a576:	2308      	movs	r3, #8
 800a578:	2203      	movs	r2, #3
 800a57a:	2182      	movs	r1, #130	; 0x82
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f008 fdf2 	bl	8013166 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2201      	movs	r2, #1
 800a586:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2200      	movs	r2, #0
 800a598:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	7c1b      	ldrb	r3, [r3, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d109      	bne.n	800a5c0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5b6:	2101      	movs	r1, #1
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f008 febd 	bl	8013338 <USBD_LL_PrepareReceive>
 800a5be:	e007      	b.n	800a5d0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5c6:	2340      	movs	r3, #64	; 0x40
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f008 feb4 	bl	8013338 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b082      	sub	sp, #8
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a5e6:	2181      	movs	r1, #129	; 0x81
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f008 fde2 	bl	80131b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f008 fddb 	bl	80131b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a604:	2182      	movs	r1, #130	; 0x82
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f008 fdd3 	bl	80131b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00e      	beq.n	800a644 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a636:	4618      	mov	r0, r3
 800a638:	f008 fec0 	bl	80133bc <USBD_static_free>
    pdev->pClassData = NULL;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
	...

0800a650 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a660:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a662:	2300      	movs	r3, #0
 800a664:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a674:	2303      	movs	r3, #3
 800a676:	e0af      	b.n	800a7d8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a680:	2b00      	cmp	r3, #0
 800a682:	d03f      	beq.n	800a704 <USBD_CDC_Setup+0xb4>
 800a684:	2b20      	cmp	r3, #32
 800a686:	f040 809f 	bne.w	800a7c8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	88db      	ldrh	r3, [r3, #6]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d02e      	beq.n	800a6f0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	b25b      	sxtb	r3, r3
 800a698:	2b00      	cmp	r3, #0
 800a69a:	da16      	bge.n	800a6ca <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	683a      	ldr	r2, [r7, #0]
 800a6a6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a6a8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6aa:	683a      	ldr	r2, [r7, #0]
 800a6ac:	88d2      	ldrh	r2, [r2, #6]
 800a6ae:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	88db      	ldrh	r3, [r3, #6]
 800a6b4:	2b07      	cmp	r3, #7
 800a6b6:	bf28      	it	cs
 800a6b8:	2307      	movcs	r3, #7
 800a6ba:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	89fa      	ldrh	r2, [r7, #14]
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f001 fa94 	bl	800bbf0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a6c8:	e085      	b.n	800a7d6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	785a      	ldrb	r2, [r3, #1]
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	88db      	ldrh	r3, [r3, #6]
 800a6d8:	b2da      	uxtb	r2, r3
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a6e0:	6939      	ldr	r1, [r7, #16]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	88db      	ldrh	r3, [r3, #6]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f001 faad 	bl	800bc48 <USBD_CtlPrepareRx>
      break;
 800a6ee:	e072      	b.n	800a7d6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	7850      	ldrb	r0, [r2, #1]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	6839      	ldr	r1, [r7, #0]
 800a700:	4798      	blx	r3
      break;
 800a702:	e068      	b.n	800a7d6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	785b      	ldrb	r3, [r3, #1]
 800a708:	2b0b      	cmp	r3, #11
 800a70a:	d852      	bhi.n	800a7b2 <USBD_CDC_Setup+0x162>
 800a70c:	a201      	add	r2, pc, #4	; (adr r2, 800a714 <USBD_CDC_Setup+0xc4>)
 800a70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a712:	bf00      	nop
 800a714:	0800a745 	.word	0x0800a745
 800a718:	0800a7c1 	.word	0x0800a7c1
 800a71c:	0800a7b3 	.word	0x0800a7b3
 800a720:	0800a7b3 	.word	0x0800a7b3
 800a724:	0800a7b3 	.word	0x0800a7b3
 800a728:	0800a7b3 	.word	0x0800a7b3
 800a72c:	0800a7b3 	.word	0x0800a7b3
 800a730:	0800a7b3 	.word	0x0800a7b3
 800a734:	0800a7b3 	.word	0x0800a7b3
 800a738:	0800a7b3 	.word	0x0800a7b3
 800a73c:	0800a76f 	.word	0x0800a76f
 800a740:	0800a799 	.word	0x0800a799
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b03      	cmp	r3, #3
 800a74e:	d107      	bne.n	800a760 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a750:	f107 030a 	add.w	r3, r7, #10
 800a754:	2202      	movs	r2, #2
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f001 fa49 	bl	800bbf0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a75e:	e032      	b.n	800a7c6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f001 f9d3 	bl	800bb0e <USBD_CtlError>
            ret = USBD_FAIL;
 800a768:	2303      	movs	r3, #3
 800a76a:	75fb      	strb	r3, [r7, #23]
          break;
 800a76c:	e02b      	b.n	800a7c6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a774:	b2db      	uxtb	r3, r3
 800a776:	2b03      	cmp	r3, #3
 800a778:	d107      	bne.n	800a78a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a77a:	f107 030d 	add.w	r3, r7, #13
 800a77e:	2201      	movs	r2, #1
 800a780:	4619      	mov	r1, r3
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f001 fa34 	bl	800bbf0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a788:	e01d      	b.n	800a7c6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f001 f9be 	bl	800bb0e <USBD_CtlError>
            ret = USBD_FAIL;
 800a792:	2303      	movs	r3, #3
 800a794:	75fb      	strb	r3, [r7, #23]
          break;
 800a796:	e016      	b.n	800a7c6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	2b03      	cmp	r3, #3
 800a7a2:	d00f      	beq.n	800a7c4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a7a4:	6839      	ldr	r1, [r7, #0]
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f001 f9b1 	bl	800bb0e <USBD_CtlError>
            ret = USBD_FAIL;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a7b0:	e008      	b.n	800a7c4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f001 f9aa 	bl	800bb0e <USBD_CtlError>
          ret = USBD_FAIL;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	75fb      	strb	r3, [r7, #23]
          break;
 800a7be:	e002      	b.n	800a7c6 <USBD_CDC_Setup+0x176>
          break;
 800a7c0:	bf00      	nop
 800a7c2:	e008      	b.n	800a7d6 <USBD_CDC_Setup+0x186>
          break;
 800a7c4:	bf00      	nop
      }
      break;
 800a7c6:	e006      	b.n	800a7d6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a7c8:	6839      	ldr	r1, [r7, #0]
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f001 f99f 	bl	800bb0e <USBD_CtlError>
      ret = USBD_FAIL;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	75fb      	strb	r3, [r7, #23]
      break;
 800a7d4:	bf00      	nop
  }

  return (uint8_t)ret;
 800a7d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3718      	adds	r7, #24
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d101      	bne.n	800a802 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a7fe:	2303      	movs	r3, #3
 800a800:	e04c      	b.n	800a89c <USBD_CDC_DataIn+0xbc>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a808:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a80a:	78fa      	ldrb	r2, [r7, #3]
 800a80c:	6879      	ldr	r1, [r7, #4]
 800a80e:	4613      	mov	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	4413      	add	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	440b      	add	r3, r1
 800a818:	3318      	adds	r3, #24
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d026      	beq.n	800a86e <USBD_CDC_DataIn+0x8e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a820:	78fa      	ldrb	r2, [r7, #3]
 800a822:	6879      	ldr	r1, [r7, #4]
 800a824:	4613      	mov	r3, r2
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	440b      	add	r3, r1
 800a82e:	3318      	adds	r3, #24
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	78fa      	ldrb	r2, [r7, #3]
 800a834:	68f9      	ldr	r1, [r7, #12]
 800a836:	0152      	lsls	r2, r2, #5
 800a838:	440a      	add	r2, r1
 800a83a:	3238      	adds	r2, #56	; 0x38
 800a83c:	6812      	ldr	r2, [r2, #0]
 800a83e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a842:	fb02 f201 	mul.w	r2, r2, r1
 800a846:	1a9b      	subs	r3, r3, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d110      	bne.n	800a86e <USBD_CDC_DataIn+0x8e>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a84c:	78fa      	ldrb	r2, [r7, #3]
 800a84e:	6879      	ldr	r1, [r7, #4]
 800a850:	4613      	mov	r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4413      	add	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	440b      	add	r3, r1
 800a85a:	3318      	adds	r3, #24
 800a85c:	2200      	movs	r2, #0
 800a85e:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a860:	78f9      	ldrb	r1, [r7, #3]
 800a862:	2300      	movs	r3, #0
 800a864:	2200      	movs	r2, #0
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f008 fd45 	bl	80132f6 <USBD_LL_Transmit>
 800a86c:	e015      	b.n	800a89a <USBD_CDC_DataIn+0xba>
  }
  else
  {
    hcdc->TxState = 0U;
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	2200      	movs	r2, #0
 800a872:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00b      	beq.n	800a89a <USBD_CDC_DataIn+0xba>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a896:	78fa      	ldrb	r2, [r7, #3]
 800a898:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d101      	bne.n	800a8c6 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	e015      	b.n	800a8f2 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a8c6:	78fb      	ldrb	r3, [r7, #3]
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f008 fd55 	bl	801337a <USBD_LL_GetRxDataSize>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a908:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a910:	2303      	movs	r3, #3
 800a912:	e01b      	b.n	800a94c <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d015      	beq.n	800a94a <USBD_CDC_EP0_RxReady+0x50>
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a924:	2bff      	cmp	r3, #255	; 0xff
 800a926:	d010      	beq.n	800a94a <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a936:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a93e:	b292      	uxth	r2, r2
 800a940:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	22ff      	movs	r2, #255	; 0xff
 800a946:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2243      	movs	r2, #67	; 0x43
 800a960:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a962:	4b03      	ldr	r3, [pc, #12]	; (800a970 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a964:	4618      	mov	r0, r3
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	200000b4 	.word	0x200000b4

0800a974 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2243      	movs	r2, #67	; 0x43
 800a980:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a982:	4b03      	ldr	r3, [pc, #12]	; (800a990 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a984:	4618      	mov	r0, r3
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	20000070 	.word	0x20000070

0800a994 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2243      	movs	r2, #67	; 0x43
 800a9a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a9a2:	4b03      	ldr	r3, [pc, #12]	; (800a9b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr
 800a9b0:	200000f8 	.word	0x200000f8

0800a9b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	220a      	movs	r2, #10
 800a9c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a9c2:	4b03      	ldr	r3, [pc, #12]	; (800a9d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	2000002c 	.word	0x2000002c

0800a9d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e004      	b.n	800a9f2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b087      	sub	sp, #28
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	60f8      	str	r0, [r7, #12]
 800aa06:	60b9      	str	r1, [r7, #8]
 800aa08:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa10:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d101      	bne.n	800aa1c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800aa18:	2303      	movs	r3, #3
 800aa1a:	e008      	b.n	800aa2e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	371c      	adds	r7, #28
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b085      	sub	sp, #20
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800aa52:	2303      	movs	r3, #3
 800aa54:	e004      	b.n	800aa60 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	683a      	ldr	r2, [r7, #0]
 800aa5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa7a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d101      	bne.n	800aa8e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	e01a      	b.n	800aac4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d114      	bne.n	800aac2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aab6:	2181      	movs	r1, #129	; 0x81
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f008 fc1c 	bl	80132f6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aada:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d101      	bne.n	800aaea <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e016      	b.n	800ab18 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	7c1b      	ldrb	r3, [r3, #16]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d109      	bne.n	800ab06 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aaf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aafc:	2101      	movs	r1, #1
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f008 fc1a 	bl	8013338 <USBD_LL_PrepareReceive>
 800ab04:	e007      	b.n	800ab16 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab0c:	2340      	movs	r3, #64	; 0x40
 800ab0e:	2101      	movs	r1, #1
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f008 fc11 	bl	8013338 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ab16:	2300      	movs	r3, #0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3710      	adds	r7, #16
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d101      	bne.n	800ab38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ab34:	2303      	movs	r3, #3
 800ab36:	e01f      	b.n	800ab78 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d003      	beq.n	800ab5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2201      	movs	r2, #1
 800ab62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	79fa      	ldrb	r2, [r7, #7]
 800ab6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f008 fa7d 	bl	801306c <USBD_LL_Init>
 800ab72:	4603      	mov	r3, r0
 800ab74:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3718      	adds	r7, #24
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ab94:	2303      	movs	r3, #3
 800ab96:	e016      	b.n	800abc6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	683a      	ldr	r2, [r7, #0]
 800ab9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00b      	beq.n	800abc4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb4:	f107 020e 	add.w	r2, r7, #14
 800abb8:	4610      	mov	r0, r2
 800abba:	4798      	blx	r3
 800abbc:	4602      	mov	r2, r0
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b082      	sub	sp, #8
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f008 faaa 	bl	8013130 <USBD_LL_Start>
 800abdc:	4603      	mov	r3, r0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3708      	adds	r7, #8
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800abe6:	b480      	push	{r7}
 800abe8:	b083      	sub	sp, #12
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	460b      	mov	r3, r1
 800ac06:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d009      	beq.n	800ac2a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	78fa      	ldrb	r2, [r7, #3]
 800ac20:	4611      	mov	r1, r2
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	4798      	blx	r3
 800ac26:	4603      	mov	r3, r0
 800ac28:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ac2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d007      	beq.n	800ac5a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	78fa      	ldrb	r2, [r7, #3]
 800ac54:	4611      	mov	r1, r2
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	4798      	blx	r3
  }

  return USBD_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac74:	6839      	ldr	r1, [r7, #0]
 800ac76:	4618      	mov	r0, r3
 800ac78:	f000 ff0f 	bl	800ba9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac98:	f003 031f 	and.w	r3, r3, #31
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d00e      	beq.n	800acbe <USBD_LL_SetupStage+0x5a>
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d302      	bcc.n	800acaa <USBD_LL_SetupStage+0x46>
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d014      	beq.n	800acd2 <USBD_LL_SetupStage+0x6e>
 800aca8:	e01d      	b.n	800ace6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 f9ee 	bl	800b094 <USBD_StdDevReq>
 800acb8:	4603      	mov	r3, r0
 800acba:	73fb      	strb	r3, [r7, #15]
      break;
 800acbc:	e020      	b.n	800ad00 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800acc4:	4619      	mov	r1, r3
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fa52 	bl	800b170 <USBD_StdItfReq>
 800accc:	4603      	mov	r3, r0
 800acce:	73fb      	strb	r3, [r7, #15]
      break;
 800acd0:	e016      	b.n	800ad00 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fa8f 	bl	800b1fe <USBD_StdEPReq>
 800ace0:	4603      	mov	r3, r0
 800ace2:	73fb      	strb	r3, [r7, #15]
      break;
 800ace4:	e00c      	b.n	800ad00 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800acec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	4619      	mov	r1, r3
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f008 fa7b 	bl	80131f0 <USBD_LL_StallEP>
 800acfa:	4603      	mov	r3, r0
 800acfc:	73fb      	strb	r3, [r7, #15]
      break;
 800acfe:	bf00      	nop
  }

  return ret;
 800ad00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b086      	sub	sp, #24
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	60f8      	str	r0, [r7, #12]
 800ad12:	460b      	mov	r3, r1
 800ad14:	607a      	str	r2, [r7, #4]
 800ad16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ad18:	7afb      	ldrb	r3, [r7, #11]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d138      	bne.n	800ad90 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ad24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad2c:	2b03      	cmp	r3, #3
 800ad2e:	d14a      	bne.n	800adc6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	689a      	ldr	r2, [r3, #8]
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d913      	bls.n	800ad64 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	689a      	ldr	r2, [r3, #8]
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	1ad2      	subs	r2, r2, r3
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	68da      	ldr	r2, [r3, #12]
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	4293      	cmp	r3, r2
 800ad54:	bf28      	it	cs
 800ad56:	4613      	movcs	r3, r2
 800ad58:	461a      	mov	r2, r3
 800ad5a:	6879      	ldr	r1, [r7, #4]
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f000 ff90 	bl	800bc82 <USBD_CtlContinueRx>
 800ad62:	e030      	b.n	800adc6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	2b03      	cmp	r3, #3
 800ad6e:	d10b      	bne.n	800ad88 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad76:	691b      	ldr	r3, [r3, #16]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d005      	beq.n	800ad88 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad82:	691b      	ldr	r3, [r3, #16]
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f000 ff8b 	bl	800bca4 <USBD_CtlSendStatus>
 800ad8e:	e01a      	b.n	800adc6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	2b03      	cmp	r3, #3
 800ad9a:	d114      	bne.n	800adc6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00e      	beq.n	800adc6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	7afa      	ldrb	r2, [r7, #11]
 800adb2:	4611      	mov	r1, r2
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	4798      	blx	r3
 800adb8:	4603      	mov	r3, r0
 800adba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800adbc:	7dfb      	ldrb	r3, [r7, #23]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d001      	beq.n	800adc6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800adc2:	7dfb      	ldrb	r3, [r7, #23]
 800adc4:	e000      	b.n	800adc8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3718      	adds	r7, #24
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	460b      	mov	r3, r1
 800adda:	607a      	str	r2, [r7, #4]
 800addc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800adde:	7afb      	ldrb	r3, [r7, #11]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d16b      	bne.n	800aebc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	3314      	adds	r3, #20
 800ade8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d156      	bne.n	800aea2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	689a      	ldr	r2, [r3, #8]
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d914      	bls.n	800ae2a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	689a      	ldr	r2, [r3, #8]
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	1ad2      	subs	r2, r2, r3
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	461a      	mov	r2, r3
 800ae14:	6879      	ldr	r1, [r7, #4]
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f000 ff05 	bl	800bc26 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	2200      	movs	r2, #0
 800ae20:	2100      	movs	r1, #0
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f008 fa88 	bl	8013338 <USBD_LL_PrepareReceive>
 800ae28:	e03b      	b.n	800aea2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	68da      	ldr	r2, [r3, #12]
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d11c      	bne.n	800ae70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d316      	bcc.n	800ae70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	685a      	ldr	r2, [r3, #4]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d20f      	bcs.n	800ae70 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ae50:	2200      	movs	r2, #0
 800ae52:	2100      	movs	r1, #0
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f000 fee6 	bl	800bc26 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae62:	2300      	movs	r3, #0
 800ae64:	2200      	movs	r2, #0
 800ae66:	2100      	movs	r1, #0
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f008 fa65 	bl	8013338 <USBD_LL_PrepareReceive>
 800ae6e:	e018      	b.n	800aea2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	d10b      	bne.n	800ae94 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d005      	beq.n	800ae94 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae94:	2180      	movs	r1, #128	; 0x80
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f008 f9aa 	bl	80131f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f000 ff14 	bl	800bcca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d122      	bne.n	800aef2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f7ff fe9a 	bl	800abe6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aeba:	e01a      	b.n	800aef2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	2b03      	cmp	r3, #3
 800aec6:	d114      	bne.n	800aef2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aece:	695b      	ldr	r3, [r3, #20]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00e      	beq.n	800aef2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeda:	695b      	ldr	r3, [r3, #20]
 800aedc:	7afa      	ldrb	r2, [r7, #11]
 800aede:	4611      	mov	r1, r2
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	4798      	blx	r3
 800aee4:	4603      	mov	r3, r0
 800aee6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aee8:	7dfb      	ldrb	r3, [r7, #23]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d001      	beq.n	800aef2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800aeee:	7dfb      	ldrb	r3, [r7, #23]
 800aef0:	e000      	b.n	800aef4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3718      	adds	r7, #24
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d101      	bne.n	800af30 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e02f      	b.n	800af90 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00f      	beq.n	800af5a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d009      	beq.n	800af5a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	6852      	ldr	r2, [r2, #4]
 800af52:	b2d2      	uxtb	r2, r2
 800af54:	4611      	mov	r1, r2
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af5a:	2340      	movs	r3, #64	; 0x40
 800af5c:	2200      	movs	r2, #0
 800af5e:	2100      	movs	r1, #0
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f008 f900 	bl	8013166 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2201      	movs	r2, #1
 800af6a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2240      	movs	r2, #64	; 0x40
 800af72:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af76:	2340      	movs	r3, #64	; 0x40
 800af78:	2200      	movs	r2, #0
 800af7a:	2180      	movs	r1, #128	; 0x80
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f008 f8f2 	bl	8013166 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2201      	movs	r2, #1
 800af86:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2240      	movs	r2, #64	; 0x40
 800af8c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	460b      	mov	r3, r1
 800afa2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	78fa      	ldrb	r2, [r7, #3]
 800afa8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc6:	b2da      	uxtb	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2204      	movs	r2, #4
 800afd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	370c      	adds	r7, #12
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	2b04      	cmp	r3, #4
 800aff6:	d106      	bne.n	800b006 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800affe:	b2da      	uxtb	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b022:	2b00      	cmp	r3, #0
 800b024:	d101      	bne.n	800b02a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b026:	2303      	movs	r3, #3
 800b028:	e012      	b.n	800b050 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b030:	b2db      	uxtb	r3, r3
 800b032:	2b03      	cmp	r3, #3
 800b034:	d10b      	bne.n	800b04e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b03c:	69db      	ldr	r3, [r3, #28]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d005      	beq.n	800b04e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b048:	69db      	ldr	r3, [r3, #28]
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b058:	b480      	push	{r7}
 800b05a:	b087      	sub	sp, #28
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	3301      	adds	r3, #1
 800b06e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b076:	8a3b      	ldrh	r3, [r7, #16]
 800b078:	021b      	lsls	r3, r3, #8
 800b07a:	b21a      	sxth	r2, r3
 800b07c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b080:	4313      	orrs	r3, r2
 800b082:	b21b      	sxth	r3, r3
 800b084:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b086:	89fb      	ldrh	r3, [r7, #14]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	371c      	adds	r7, #28
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0aa:	2b20      	cmp	r3, #32
 800b0ac:	d004      	beq.n	800b0b8 <USBD_StdDevReq+0x24>
 800b0ae:	2b40      	cmp	r3, #64	; 0x40
 800b0b0:	d002      	beq.n	800b0b8 <USBD_StdDevReq+0x24>
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00a      	beq.n	800b0cc <USBD_StdDevReq+0x38>
 800b0b6:	e050      	b.n	800b15a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	6839      	ldr	r1, [r7, #0]
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	4798      	blx	r3
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b0ca:	e04b      	b.n	800b164 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	785b      	ldrb	r3, [r3, #1]
 800b0d0:	2b09      	cmp	r3, #9
 800b0d2:	d83c      	bhi.n	800b14e <USBD_StdDevReq+0xba>
 800b0d4:	a201      	add	r2, pc, #4	; (adr r2, 800b0dc <USBD_StdDevReq+0x48>)
 800b0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0da:	bf00      	nop
 800b0dc:	0800b131 	.word	0x0800b131
 800b0e0:	0800b145 	.word	0x0800b145
 800b0e4:	0800b14f 	.word	0x0800b14f
 800b0e8:	0800b13b 	.word	0x0800b13b
 800b0ec:	0800b14f 	.word	0x0800b14f
 800b0f0:	0800b10f 	.word	0x0800b10f
 800b0f4:	0800b105 	.word	0x0800b105
 800b0f8:	0800b14f 	.word	0x0800b14f
 800b0fc:	0800b127 	.word	0x0800b127
 800b100:	0800b119 	.word	0x0800b119
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b104:	6839      	ldr	r1, [r7, #0]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f9d4 	bl	800b4b4 <USBD_GetDescriptor>
          break;
 800b10c:	e024      	b.n	800b158 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 fb39 	bl	800b788 <USBD_SetAddress>
          break;
 800b116:	e01f      	b.n	800b158 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b118:	6839      	ldr	r1, [r7, #0]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 fb78 	bl	800b810 <USBD_SetConfig>
 800b120:	4603      	mov	r3, r0
 800b122:	73fb      	strb	r3, [r7, #15]
          break;
 800b124:	e018      	b.n	800b158 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b126:	6839      	ldr	r1, [r7, #0]
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 fc17 	bl	800b95c <USBD_GetConfig>
          break;
 800b12e:	e013      	b.n	800b158 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b130:	6839      	ldr	r1, [r7, #0]
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 fc47 	bl	800b9c6 <USBD_GetStatus>
          break;
 800b138:	e00e      	b.n	800b158 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b13a:	6839      	ldr	r1, [r7, #0]
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 fc76 	bl	800ba2e <USBD_SetFeature>
          break;
 800b142:	e009      	b.n	800b158 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b144:	6839      	ldr	r1, [r7, #0]
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fc85 	bl	800ba56 <USBD_ClrFeature>
          break;
 800b14c:	e004      	b.n	800b158 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 fcdc 	bl	800bb0e <USBD_CtlError>
          break;
 800b156:	bf00      	nop
      }
      break;
 800b158:	e004      	b.n	800b164 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b15a:	6839      	ldr	r1, [r7, #0]
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 fcd6 	bl	800bb0e <USBD_CtlError>
      break;
 800b162:	bf00      	nop
  }

  return ret;
 800b164:	7bfb      	ldrb	r3, [r7, #15]
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop

0800b170 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b17a:	2300      	movs	r3, #0
 800b17c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b186:	2b20      	cmp	r3, #32
 800b188:	d003      	beq.n	800b192 <USBD_StdItfReq+0x22>
 800b18a:	2b40      	cmp	r3, #64	; 0x40
 800b18c:	d001      	beq.n	800b192 <USBD_StdItfReq+0x22>
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d12b      	bne.n	800b1ea <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	3b01      	subs	r3, #1
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d81d      	bhi.n	800b1dc <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	889b      	ldrh	r3, [r3, #4]
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d813      	bhi.n	800b1d2 <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	6839      	ldr	r1, [r7, #0]
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	4798      	blx	r3
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	88db      	ldrh	r3, [r3, #6]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d110      	bne.n	800b1e6 <USBD_StdItfReq+0x76>
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10d      	bne.n	800b1e6 <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 fd6a 	bl	800bca4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b1d0:	e009      	b.n	800b1e6 <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 fc9a 	bl	800bb0e <USBD_CtlError>
          break;
 800b1da:	e004      	b.n	800b1e6 <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 800b1dc:	6839      	ldr	r1, [r7, #0]
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fc95 	bl	800bb0e <USBD_CtlError>
          break;
 800b1e4:	e000      	b.n	800b1e8 <USBD_StdItfReq+0x78>
          break;
 800b1e6:	bf00      	nop
      }
      break;
 800b1e8:	e004      	b.n	800b1f4 <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 800b1ea:	6839      	ldr	r1, [r7, #0]
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fc8e 	bl	800bb0e <USBD_CtlError>
      break;
 800b1f2:	bf00      	nop
  }

  return ret;
 800b1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b084      	sub	sp, #16
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
 800b206:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b208:	2300      	movs	r3, #0
 800b20a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	889b      	ldrh	r3, [r3, #4]
 800b210:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b21a:	2b20      	cmp	r3, #32
 800b21c:	d004      	beq.n	800b228 <USBD_StdEPReq+0x2a>
 800b21e:	2b40      	cmp	r3, #64	; 0x40
 800b220:	d002      	beq.n	800b228 <USBD_StdEPReq+0x2a>
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00a      	beq.n	800b23c <USBD_StdEPReq+0x3e>
 800b226:	e13a      	b.n	800b49e <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	6839      	ldr	r1, [r7, #0]
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	4798      	blx	r3
 800b236:	4603      	mov	r3, r0
 800b238:	73fb      	strb	r3, [r7, #15]
      break;
 800b23a:	e135      	b.n	800b4a8 <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	785b      	ldrb	r3, [r3, #1]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d03f      	beq.n	800b2c4 <USBD_StdEPReq+0xc6>
 800b244:	2b03      	cmp	r3, #3
 800b246:	d002      	beq.n	800b24e <USBD_StdEPReq+0x50>
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d07b      	beq.n	800b344 <USBD_StdEPReq+0x146>
 800b24c:	e121      	b.n	800b492 <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b254:	b2db      	uxtb	r3, r3
 800b256:	2b02      	cmp	r3, #2
 800b258:	d002      	beq.n	800b260 <USBD_StdEPReq+0x62>
 800b25a:	2b03      	cmp	r3, #3
 800b25c:	d015      	beq.n	800b28a <USBD_StdEPReq+0x8c>
 800b25e:	e02b      	b.n	800b2b8 <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b260:	7bbb      	ldrb	r3, [r7, #14]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00c      	beq.n	800b280 <USBD_StdEPReq+0x82>
 800b266:	7bbb      	ldrb	r3, [r7, #14]
 800b268:	2b80      	cmp	r3, #128	; 0x80
 800b26a:	d009      	beq.n	800b280 <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b26c:	7bbb      	ldrb	r3, [r7, #14]
 800b26e:	4619      	mov	r1, r3
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f007 ffbd 	bl	80131f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b276:	2180      	movs	r1, #128	; 0x80
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f007 ffb9 	bl	80131f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b27e:	e020      	b.n	800b2c2 <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fc43 	bl	800bb0e <USBD_CtlError>
              break;
 800b288:	e01b      	b.n	800b2c2 <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	885b      	ldrh	r3, [r3, #2]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10e      	bne.n	800b2b0 <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b292:	7bbb      	ldrb	r3, [r7, #14]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d00b      	beq.n	800b2b0 <USBD_StdEPReq+0xb2>
 800b298:	7bbb      	ldrb	r3, [r7, #14]
 800b29a:	2b80      	cmp	r3, #128	; 0x80
 800b29c:	d008      	beq.n	800b2b0 <USBD_StdEPReq+0xb2>
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	88db      	ldrh	r3, [r3, #6]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d104      	bne.n	800b2b0 <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2a6:	7bbb      	ldrb	r3, [r7, #14]
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f007 ffa0 	bl	80131f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 fcf7 	bl	800bca4 <USBD_CtlSendStatus>

              break;
 800b2b6:	e004      	b.n	800b2c2 <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fc27 	bl	800bb0e <USBD_CtlError>
              break;
 800b2c0:	bf00      	nop
          }
          break;
 800b2c2:	e0eb      	b.n	800b49c <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d002      	beq.n	800b2d6 <USBD_StdEPReq+0xd8>
 800b2d0:	2b03      	cmp	r3, #3
 800b2d2:	d015      	beq.n	800b300 <USBD_StdEPReq+0x102>
 800b2d4:	e02f      	b.n	800b336 <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2d6:	7bbb      	ldrb	r3, [r7, #14]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00c      	beq.n	800b2f6 <USBD_StdEPReq+0xf8>
 800b2dc:	7bbb      	ldrb	r3, [r7, #14]
 800b2de:	2b80      	cmp	r3, #128	; 0x80
 800b2e0:	d009      	beq.n	800b2f6 <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2e2:	7bbb      	ldrb	r3, [r7, #14]
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f007 ff82 	bl	80131f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2ec:	2180      	movs	r1, #128	; 0x80
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f007 ff7e 	bl	80131f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b2f4:	e025      	b.n	800b342 <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 800b2f6:	6839      	ldr	r1, [r7, #0]
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 fc08 	bl	800bb0e <USBD_CtlError>
              break;
 800b2fe:	e020      	b.n	800b342 <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	885b      	ldrh	r3, [r3, #2]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d11b      	bne.n	800b340 <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b308:	7bbb      	ldrb	r3, [r7, #14]
 800b30a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d004      	beq.n	800b31c <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b312:	7bbb      	ldrb	r3, [r7, #14]
 800b314:	4619      	mov	r1, r3
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f007 ff89 	bl	801322e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fcc1 	bl	800bca4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	4798      	blx	r3
 800b330:	4603      	mov	r3, r0
 800b332:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b334:	e004      	b.n	800b340 <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 800b336:	6839      	ldr	r1, [r7, #0]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fbe8 	bl	800bb0e <USBD_CtlError>
              break;
 800b33e:	e000      	b.n	800b342 <USBD_StdEPReq+0x144>
              break;
 800b340:	bf00      	nop
          }
          break;
 800b342:	e0ab      	b.n	800b49c <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d002      	beq.n	800b356 <USBD_StdEPReq+0x158>
 800b350:	2b03      	cmp	r3, #3
 800b352:	d032      	beq.n	800b3ba <USBD_StdEPReq+0x1bc>
 800b354:	e097      	b.n	800b486 <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b356:	7bbb      	ldrb	r3, [r7, #14]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d007      	beq.n	800b36c <USBD_StdEPReq+0x16e>
 800b35c:	7bbb      	ldrb	r3, [r7, #14]
 800b35e:	2b80      	cmp	r3, #128	; 0x80
 800b360:	d004      	beq.n	800b36c <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 800b362:	6839      	ldr	r1, [r7, #0]
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fbd2 	bl	800bb0e <USBD_CtlError>
                break;
 800b36a:	e091      	b.n	800b490 <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b36c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b370:	2b00      	cmp	r3, #0
 800b372:	da0b      	bge.n	800b38c <USBD_StdEPReq+0x18e>
 800b374:	7bbb      	ldrb	r3, [r7, #14]
 800b376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b37a:	4613      	mov	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	4413      	add	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	3310      	adds	r3, #16
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	4413      	add	r3, r2
 800b388:	3304      	adds	r3, #4
 800b38a:	e00b      	b.n	800b3a4 <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b38c:	7bbb      	ldrb	r3, [r7, #14]
 800b38e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b392:	4613      	mov	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4413      	add	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	3304      	adds	r3, #4
 800b3a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	2202      	movs	r2, #2
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 fc1c 	bl	800bbf0 <USBD_CtlSendData>
              break;
 800b3b8:	e06a      	b.n	800b490 <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b3ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	da11      	bge.n	800b3e6 <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b3c2:	7bbb      	ldrb	r3, [r7, #14]
 800b3c4:	f003 020f 	and.w	r2, r3, #15
 800b3c8:	6879      	ldr	r1, [r7, #4]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4413      	add	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	440b      	add	r3, r1
 800b3d4:	3324      	adds	r3, #36	; 0x24
 800b3d6:	881b      	ldrh	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d117      	bne.n	800b40c <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800b3dc:	6839      	ldr	r1, [r7, #0]
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fb95 	bl	800bb0e <USBD_CtlError>
                  break;
 800b3e4:	e054      	b.n	800b490 <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b3e6:	7bbb      	ldrb	r3, [r7, #14]
 800b3e8:	f003 020f 	and.w	r2, r3, #15
 800b3ec:	6879      	ldr	r1, [r7, #4]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	4413      	add	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	440b      	add	r3, r1
 800b3f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b3fc:	881b      	ldrh	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d104      	bne.n	800b40c <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 fb82 	bl	800bb0e <USBD_CtlError>
                  break;
 800b40a:	e041      	b.n	800b490 <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b40c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b410:	2b00      	cmp	r3, #0
 800b412:	da0b      	bge.n	800b42c <USBD_StdEPReq+0x22e>
 800b414:	7bbb      	ldrb	r3, [r7, #14]
 800b416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b41a:	4613      	mov	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4413      	add	r3, r2
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	3310      	adds	r3, #16
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	4413      	add	r3, r2
 800b428:	3304      	adds	r3, #4
 800b42a:	e00b      	b.n	800b444 <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b42c:	7bbb      	ldrb	r3, [r7, #14]
 800b42e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b432:	4613      	mov	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4413      	add	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	4413      	add	r3, r2
 800b442:	3304      	adds	r3, #4
 800b444:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b446:	7bbb      	ldrb	r3, [r7, #14]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d002      	beq.n	800b452 <USBD_StdEPReq+0x254>
 800b44c:	7bbb      	ldrb	r3, [r7, #14]
 800b44e:	2b80      	cmp	r3, #128	; 0x80
 800b450:	d103      	bne.n	800b45a <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	2200      	movs	r2, #0
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	e00e      	b.n	800b478 <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b45a:	7bbb      	ldrb	r3, [r7, #14]
 800b45c:	4619      	mov	r1, r3
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f007 ff04 	bl	801326c <USBD_LL_IsStallEP>
 800b464:	4603      	mov	r3, r0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d003      	beq.n	800b472 <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	2201      	movs	r2, #1
 800b46e:	601a      	str	r2, [r3, #0]
 800b470:	e002      	b.n	800b478 <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	2200      	movs	r2, #0
 800b476:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	2202      	movs	r2, #2
 800b47c:	4619      	mov	r1, r3
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fbb6 	bl	800bbf0 <USBD_CtlSendData>
              break;
 800b484:	e004      	b.n	800b490 <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 800b486:	6839      	ldr	r1, [r7, #0]
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 fb40 	bl	800bb0e <USBD_CtlError>
              break;
 800b48e:	bf00      	nop
          }
          break;
 800b490:	e004      	b.n	800b49c <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 800b492:	6839      	ldr	r1, [r7, #0]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fb3a 	bl	800bb0e <USBD_CtlError>
          break;
 800b49a:	bf00      	nop
      }
      break;
 800b49c:	e004      	b.n	800b4a8 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 800b49e:	6839      	ldr	r1, [r7, #0]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 fb34 	bl	800bb0e <USBD_CtlError>
      break;
 800b4a6:	bf00      	nop
  }

  return ret;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
	...

0800b4b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	885b      	ldrh	r3, [r3, #2]
 800b4ce:	0a1b      	lsrs	r3, r3, #8
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	2b06      	cmp	r3, #6
 800b4d6:	f200 8128 	bhi.w	800b72a <USBD_GetDescriptor+0x276>
 800b4da:	a201      	add	r2, pc, #4	; (adr r2, 800b4e0 <USBD_GetDescriptor+0x2c>)
 800b4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e0:	0800b4fd 	.word	0x0800b4fd
 800b4e4:	0800b515 	.word	0x0800b515
 800b4e8:	0800b555 	.word	0x0800b555
 800b4ec:	0800b72b 	.word	0x0800b72b
 800b4f0:	0800b72b 	.word	0x0800b72b
 800b4f4:	0800b6cb 	.word	0x0800b6cb
 800b4f8:	0800b6f7 	.word	0x0800b6f7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	7c12      	ldrb	r2, [r2, #16]
 800b508:	f107 0108 	add.w	r1, r7, #8
 800b50c:	4610      	mov	r0, r2
 800b50e:	4798      	blx	r3
 800b510:	60f8      	str	r0, [r7, #12]
      break;
 800b512:	e112      	b.n	800b73a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	7c1b      	ldrb	r3, [r3, #16]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10d      	bne.n	800b538 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b524:	f107 0208 	add.w	r2, r7, #8
 800b528:	4610      	mov	r0, r2
 800b52a:	4798      	blx	r3
 800b52c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	3301      	adds	r3, #1
 800b532:	2202      	movs	r2, #2
 800b534:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b536:	e100      	b.n	800b73a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b540:	f107 0208 	add.w	r2, r7, #8
 800b544:	4610      	mov	r0, r2
 800b546:	4798      	blx	r3
 800b548:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	3301      	adds	r3, #1
 800b54e:	2202      	movs	r2, #2
 800b550:	701a      	strb	r2, [r3, #0]
      break;
 800b552:	e0f2      	b.n	800b73a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	885b      	ldrh	r3, [r3, #2]
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b05      	cmp	r3, #5
 800b55c:	f200 80ac 	bhi.w	800b6b8 <USBD_GetDescriptor+0x204>
 800b560:	a201      	add	r2, pc, #4	; (adr r2, 800b568 <USBD_GetDescriptor+0xb4>)
 800b562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b566:	bf00      	nop
 800b568:	0800b581 	.word	0x0800b581
 800b56c:	0800b5b5 	.word	0x0800b5b5
 800b570:	0800b5e9 	.word	0x0800b5e9
 800b574:	0800b61d 	.word	0x0800b61d
 800b578:	0800b651 	.word	0x0800b651
 800b57c:	0800b685 	.word	0x0800b685
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00b      	beq.n	800b5a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	7c12      	ldrb	r2, [r2, #16]
 800b598:	f107 0108 	add.w	r1, r7, #8
 800b59c:	4610      	mov	r0, r2
 800b59e:	4798      	blx	r3
 800b5a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5a2:	e091      	b.n	800b6c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5a4:	6839      	ldr	r1, [r7, #0]
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fab1 	bl	800bb0e <USBD_CtlError>
            err++;
 800b5ac:	7afb      	ldrb	r3, [r7, #11]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b5b2:	e089      	b.n	800b6c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00b      	beq.n	800b5d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	7c12      	ldrb	r2, [r2, #16]
 800b5cc:	f107 0108 	add.w	r1, r7, #8
 800b5d0:	4610      	mov	r0, r2
 800b5d2:	4798      	blx	r3
 800b5d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5d6:	e077      	b.n	800b6c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5d8:	6839      	ldr	r1, [r7, #0]
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 fa97 	bl	800bb0e <USBD_CtlError>
            err++;
 800b5e0:	7afb      	ldrb	r3, [r7, #11]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b5e6:	e06f      	b.n	800b6c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00b      	beq.n	800b60c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	7c12      	ldrb	r2, [r2, #16]
 800b600:	f107 0108 	add.w	r1, r7, #8
 800b604:	4610      	mov	r0, r2
 800b606:	4798      	blx	r3
 800b608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b60a:	e05d      	b.n	800b6c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 fa7d 	bl	800bb0e <USBD_CtlError>
            err++;
 800b614:	7afb      	ldrb	r3, [r7, #11]
 800b616:	3301      	adds	r3, #1
 800b618:	72fb      	strb	r3, [r7, #11]
          break;
 800b61a:	e055      	b.n	800b6c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00b      	beq.n	800b640 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	7c12      	ldrb	r2, [r2, #16]
 800b634:	f107 0108 	add.w	r1, r7, #8
 800b638:	4610      	mov	r0, r2
 800b63a:	4798      	blx	r3
 800b63c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b63e:	e043      	b.n	800b6c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 fa63 	bl	800bb0e <USBD_CtlError>
            err++;
 800b648:	7afb      	ldrb	r3, [r7, #11]
 800b64a:	3301      	adds	r3, #1
 800b64c:	72fb      	strb	r3, [r7, #11]
          break;
 800b64e:	e03b      	b.n	800b6c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b656:	695b      	ldr	r3, [r3, #20]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00b      	beq.n	800b674 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b662:	695b      	ldr	r3, [r3, #20]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	7c12      	ldrb	r2, [r2, #16]
 800b668:	f107 0108 	add.w	r1, r7, #8
 800b66c:	4610      	mov	r0, r2
 800b66e:	4798      	blx	r3
 800b670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b672:	e029      	b.n	800b6c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b674:	6839      	ldr	r1, [r7, #0]
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 fa49 	bl	800bb0e <USBD_CtlError>
            err++;
 800b67c:	7afb      	ldrb	r3, [r7, #11]
 800b67e:	3301      	adds	r3, #1
 800b680:	72fb      	strb	r3, [r7, #11]
          break;
 800b682:	e021      	b.n	800b6c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b68a:	699b      	ldr	r3, [r3, #24]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00b      	beq.n	800b6a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b696:	699b      	ldr	r3, [r3, #24]
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	7c12      	ldrb	r2, [r2, #16]
 800b69c:	f107 0108 	add.w	r1, r7, #8
 800b6a0:	4610      	mov	r0, r2
 800b6a2:	4798      	blx	r3
 800b6a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6a6:	e00f      	b.n	800b6c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 fa2f 	bl	800bb0e <USBD_CtlError>
            err++;
 800b6b0:	7afb      	ldrb	r3, [r7, #11]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b6b6:	e007      	b.n	800b6c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b6b8:	6839      	ldr	r1, [r7, #0]
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 fa27 	bl	800bb0e <USBD_CtlError>
          err++;
 800b6c0:	7afb      	ldrb	r3, [r7, #11]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b6c6:	bf00      	nop
      }
      break;
 800b6c8:	e037      	b.n	800b73a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	7c1b      	ldrb	r3, [r3, #16]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d109      	bne.n	800b6e6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6da:	f107 0208 	add.w	r2, r7, #8
 800b6de:	4610      	mov	r0, r2
 800b6e0:	4798      	blx	r3
 800b6e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6e4:	e029      	b.n	800b73a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b6e6:	6839      	ldr	r1, [r7, #0]
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 fa10 	bl	800bb0e <USBD_CtlError>
        err++;
 800b6ee:	7afb      	ldrb	r3, [r7, #11]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	72fb      	strb	r3, [r7, #11]
      break;
 800b6f4:	e021      	b.n	800b73a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	7c1b      	ldrb	r3, [r3, #16]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d10d      	bne.n	800b71a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b706:	f107 0208 	add.w	r2, r7, #8
 800b70a:	4610      	mov	r0, r2
 800b70c:	4798      	blx	r3
 800b70e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	3301      	adds	r3, #1
 800b714:	2207      	movs	r2, #7
 800b716:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b718:	e00f      	b.n	800b73a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b71a:	6839      	ldr	r1, [r7, #0]
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f9f6 	bl	800bb0e <USBD_CtlError>
        err++;
 800b722:	7afb      	ldrb	r3, [r7, #11]
 800b724:	3301      	adds	r3, #1
 800b726:	72fb      	strb	r3, [r7, #11]
      break;
 800b728:	e007      	b.n	800b73a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b72a:	6839      	ldr	r1, [r7, #0]
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 f9ee 	bl	800bb0e <USBD_CtlError>
      err++;
 800b732:	7afb      	ldrb	r3, [r7, #11]
 800b734:	3301      	adds	r3, #1
 800b736:	72fb      	strb	r3, [r7, #11]
      break;
 800b738:	bf00      	nop
  }

  if (err != 0U)
 800b73a:	7afb      	ldrb	r3, [r7, #11]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d11e      	bne.n	800b77e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	88db      	ldrh	r3, [r3, #6]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d016      	beq.n	800b776 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b748:	893b      	ldrh	r3, [r7, #8]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00e      	beq.n	800b76c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	88da      	ldrh	r2, [r3, #6]
 800b752:	893b      	ldrh	r3, [r7, #8]
 800b754:	4293      	cmp	r3, r2
 800b756:	bf28      	it	cs
 800b758:	4613      	movcs	r3, r2
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b75e:	893b      	ldrh	r3, [r7, #8]
 800b760:	461a      	mov	r2, r3
 800b762:	68f9      	ldr	r1, [r7, #12]
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fa43 	bl	800bbf0 <USBD_CtlSendData>
 800b76a:	e009      	b.n	800b780 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 f9cd 	bl	800bb0e <USBD_CtlError>
 800b774:	e004      	b.n	800b780 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 fa94 	bl	800bca4 <USBD_CtlSendStatus>
 800b77c:	e000      	b.n	800b780 <USBD_GetDescriptor+0x2cc>
    return;
 800b77e:	bf00      	nop
  }
}
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop

0800b788 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	889b      	ldrh	r3, [r3, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d131      	bne.n	800b7fe <USBD_SetAddress+0x76>
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	88db      	ldrh	r3, [r3, #6]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d12d      	bne.n	800b7fe <USBD_SetAddress+0x76>
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	885b      	ldrh	r3, [r3, #2]
 800b7a6:	2b7f      	cmp	r3, #127	; 0x7f
 800b7a8:	d829      	bhi.n	800b7fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	885b      	ldrh	r3, [r3, #2]
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	2b03      	cmp	r3, #3
 800b7c0:	d104      	bne.n	800b7cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 f9a2 	bl	800bb0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7ca:	e01c      	b.n	800b806 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	7bfa      	ldrb	r2, [r7, #15]
 800b7d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b7d4:	7bfb      	ldrb	r3, [r7, #15]
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f007 fd6d 	bl	80132b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 fa60 	bl	800bca4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d004      	beq.n	800b7f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2202      	movs	r2, #2
 800b7ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7f2:	e008      	b.n	800b806 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7fc:	e003      	b.n	800b806 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b7fe:	6839      	ldr	r1, [r7, #0]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f984 	bl	800bb0e <USBD_CtlError>
  }
}
 800b806:	bf00      	nop
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
	...

0800b810 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b81a:	2300      	movs	r3, #0
 800b81c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	885b      	ldrh	r3, [r3, #2]
 800b822:	b2da      	uxtb	r2, r3
 800b824:	4b4c      	ldr	r3, [pc, #304]	; (800b958 <USBD_SetConfig+0x148>)
 800b826:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b828:	4b4b      	ldr	r3, [pc, #300]	; (800b958 <USBD_SetConfig+0x148>)
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d905      	bls.n	800b83c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b830:	6839      	ldr	r1, [r7, #0]
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 f96b 	bl	800bb0e <USBD_CtlError>
    return USBD_FAIL;
 800b838:	2303      	movs	r3, #3
 800b83a:	e088      	b.n	800b94e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b842:	b2db      	uxtb	r3, r3
 800b844:	2b02      	cmp	r3, #2
 800b846:	d002      	beq.n	800b84e <USBD_SetConfig+0x3e>
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d025      	beq.n	800b898 <USBD_SetConfig+0x88>
 800b84c:	e071      	b.n	800b932 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b84e:	4b42      	ldr	r3, [pc, #264]	; (800b958 <USBD_SetConfig+0x148>)
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d01c      	beq.n	800b890 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b856:	4b40      	ldr	r3, [pc, #256]	; (800b958 <USBD_SetConfig+0x148>)
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	461a      	mov	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b860:	4b3d      	ldr	r3, [pc, #244]	; (800b958 <USBD_SetConfig+0x148>)
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	4619      	mov	r1, r3
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7ff f9c8 	bl	800abfc <USBD_SetClassConfig>
 800b86c:	4603      	mov	r3, r0
 800b86e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b870:	7bfb      	ldrb	r3, [r7, #15]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d004      	beq.n	800b880 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b876:	6839      	ldr	r1, [r7, #0]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 f948 	bl	800bb0e <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b87e:	e065      	b.n	800b94c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 fa0f 	bl	800bca4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2203      	movs	r2, #3
 800b88a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b88e:	e05d      	b.n	800b94c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 fa07 	bl	800bca4 <USBD_CtlSendStatus>
      break;
 800b896:	e059      	b.n	800b94c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b898:	4b2f      	ldr	r3, [pc, #188]	; (800b958 <USBD_SetConfig+0x148>)
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d112      	bne.n	800b8c6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b8a8:	4b2b      	ldr	r3, [pc, #172]	; (800b958 <USBD_SetConfig+0x148>)
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8b2:	4b29      	ldr	r3, [pc, #164]	; (800b958 <USBD_SetConfig+0x148>)
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7ff f9bb 	bl	800ac34 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f9f0 	bl	800bca4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b8c4:	e042      	b.n	800b94c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b8c6:	4b24      	ldr	r3, [pc, #144]	; (800b958 <USBD_SetConfig+0x148>)
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d02a      	beq.n	800b92a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	4619      	mov	r1, r3
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f7ff f9a9 	bl	800ac34 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b8e2:	4b1d      	ldr	r3, [pc, #116]	; (800b958 <USBD_SetConfig+0x148>)
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8ec:	4b1a      	ldr	r3, [pc, #104]	; (800b958 <USBD_SetConfig+0x148>)
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7ff f982 	bl	800abfc <USBD_SetClassConfig>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00f      	beq.n	800b922 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 f902 	bl	800bb0e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	4619      	mov	r1, r3
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f7ff f98e 	bl	800ac34 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2202      	movs	r2, #2
 800b91c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b920:	e014      	b.n	800b94c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 f9be 	bl	800bca4 <USBD_CtlSendStatus>
      break;
 800b928:	e010      	b.n	800b94c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 f9ba 	bl	800bca4 <USBD_CtlSendStatus>
      break;
 800b930:	e00c      	b.n	800b94c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b932:	6839      	ldr	r1, [r7, #0]
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 f8ea 	bl	800bb0e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b93a:	4b07      	ldr	r3, [pc, #28]	; (800b958 <USBD_SetConfig+0x148>)
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	4619      	mov	r1, r3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f7ff f977 	bl	800ac34 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b946:	2303      	movs	r3, #3
 800b948:	73fb      	strb	r3, [r7, #15]
      break;
 800b94a:	bf00      	nop
  }

  return ret;
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	20000310 	.word	0x20000310

0800b95c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	88db      	ldrh	r3, [r3, #6]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d004      	beq.n	800b978 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b96e:	6839      	ldr	r1, [r7, #0]
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f8cc 	bl	800bb0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b976:	e022      	b.n	800b9be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	2b01      	cmp	r3, #1
 800b982:	db17      	blt.n	800b9b4 <USBD_GetConfig+0x58>
 800b984:	2b02      	cmp	r3, #2
 800b986:	dd02      	ble.n	800b98e <USBD_GetConfig+0x32>
 800b988:	2b03      	cmp	r3, #3
 800b98a:	d00b      	beq.n	800b9a4 <USBD_GetConfig+0x48>
 800b98c:	e012      	b.n	800b9b4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2200      	movs	r2, #0
 800b992:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	3308      	adds	r3, #8
 800b998:	2201      	movs	r2, #1
 800b99a:	4619      	mov	r1, r3
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f927 	bl	800bbf0 <USBD_CtlSendData>
        break;
 800b9a2:	e00c      	b.n	800b9be <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 f91f 	bl	800bbf0 <USBD_CtlSendData>
        break;
 800b9b2:	e004      	b.n	800b9be <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 f8a9 	bl	800bb0e <USBD_CtlError>
        break;
 800b9bc:	bf00      	nop
}
 800b9be:	bf00      	nop
 800b9c0:	3708      	adds	r7, #8
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b082      	sub	sp, #8
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
 800b9ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d81e      	bhi.n	800ba1c <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	88db      	ldrh	r3, [r3, #6]
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	d004      	beq.n	800b9f0 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b9e6:	6839      	ldr	r1, [r7, #0]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 f890 	bl	800bb0e <USBD_CtlError>
        break;
 800b9ee:	e01a      	b.n	800ba26 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d005      	beq.n	800ba0c <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	f043 0202 	orr.w	r2, r3, #2
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	330c      	adds	r3, #12
 800ba10:	2202      	movs	r2, #2
 800ba12:	4619      	mov	r1, r3
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 f8eb 	bl	800bbf0 <USBD_CtlSendData>
      break;
 800ba1a:	e004      	b.n	800ba26 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ba1c:	6839      	ldr	r1, [r7, #0]
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 f875 	bl	800bb0e <USBD_CtlError>
      break;
 800ba24:	bf00      	nop
  }
}
 800ba26:	bf00      	nop
 800ba28:	3708      	adds	r7, #8
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b082      	sub	sp, #8
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
 800ba36:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	885b      	ldrh	r3, [r3, #2]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d106      	bne.n	800ba4e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 f92b 	bl	800bca4 <USBD_CtlSendStatus>
  }
}
 800ba4e:	bf00      	nop
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b082      	sub	sp, #8
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	2b02      	cmp	r3, #2
 800ba6c:	d80b      	bhi.n	800ba86 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	885b      	ldrh	r3, [r3, #2]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d10c      	bne.n	800ba90 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f910 	bl	800bca4 <USBD_CtlSendStatus>
      }
      break;
 800ba84:	e004      	b.n	800ba90 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ba86:	6839      	ldr	r1, [r7, #0]
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 f840 	bl	800bb0e <USBD_CtlError>
      break;
 800ba8e:	e000      	b.n	800ba92 <USBD_ClrFeature+0x3c>
      break;
 800ba90:	bf00      	nop
  }
}
 800ba92:	bf00      	nop
 800ba94:	3708      	adds	r7, #8
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b084      	sub	sp, #16
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	781a      	ldrb	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	3301      	adds	r3, #1
 800bab4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	781a      	ldrb	r2, [r3, #0]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	3301      	adds	r3, #1
 800bac2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f7ff fac7 	bl	800b058 <SWAPBYTE>
 800baca:	4603      	mov	r3, r0
 800bacc:	461a      	mov	r2, r3
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	3301      	adds	r3, #1
 800bad6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	3301      	adds	r3, #1
 800badc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f7ff faba 	bl	800b058 <SWAPBYTE>
 800bae4:	4603      	mov	r3, r0
 800bae6:	461a      	mov	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	3301      	adds	r3, #1
 800baf0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	3301      	adds	r3, #1
 800baf6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f7ff faad 	bl	800b058 <SWAPBYTE>
 800bafe:	4603      	mov	r3, r0
 800bb00:	461a      	mov	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	80da      	strh	r2, [r3, #6]
}
 800bb06:	bf00      	nop
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b082      	sub	sp, #8
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb18:	2180      	movs	r1, #128	; 0x80
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f007 fb68 	bl	80131f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bb20:	2100      	movs	r1, #0
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f007 fb64 	bl	80131f0 <USBD_LL_StallEP>
}
 800bb28:	bf00      	nop
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b086      	sub	sp, #24
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d036      	beq.n	800bbb4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bb4a:	6938      	ldr	r0, [r7, #16]
 800bb4c:	f000 f836 	bl	800bbbc <USBD_GetLen>
 800bb50:	4603      	mov	r3, r0
 800bb52:	3301      	adds	r3, #1
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	005b      	lsls	r3, r3, #1
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
 800bb60:	68ba      	ldr	r2, [r7, #8]
 800bb62:	4413      	add	r3, r2
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	7812      	ldrb	r2, [r2, #0]
 800bb68:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb6a:	7dfb      	ldrb	r3, [r7, #23]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bb70:	7dfb      	ldrb	r3, [r7, #23]
 800bb72:	68ba      	ldr	r2, [r7, #8]
 800bb74:	4413      	add	r3, r2
 800bb76:	2203      	movs	r2, #3
 800bb78:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb7a:	7dfb      	ldrb	r3, [r7, #23]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bb80:	e013      	b.n	800bbaa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bb82:	7dfb      	ldrb	r3, [r7, #23]
 800bb84:	68ba      	ldr	r2, [r7, #8]
 800bb86:	4413      	add	r3, r2
 800bb88:	693a      	ldr	r2, [r7, #16]
 800bb8a:	7812      	ldrb	r2, [r2, #0]
 800bb8c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	3301      	adds	r3, #1
 800bb92:	613b      	str	r3, [r7, #16]
    idx++;
 800bb94:	7dfb      	ldrb	r3, [r7, #23]
 800bb96:	3301      	adds	r3, #1
 800bb98:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bb9a:	7dfb      	ldrb	r3, [r7, #23]
 800bb9c:	68ba      	ldr	r2, [r7, #8]
 800bb9e:	4413      	add	r3, r2
 800bba0:	2200      	movs	r2, #0
 800bba2:	701a      	strb	r2, [r3, #0]
    idx++;
 800bba4:	7dfb      	ldrb	r3, [r7, #23]
 800bba6:	3301      	adds	r3, #1
 800bba8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1e7      	bne.n	800bb82 <USBD_GetString+0x52>
 800bbb2:	e000      	b.n	800bbb6 <USBD_GetString+0x86>
    return;
 800bbb4:	bf00      	nop
  }
}
 800bbb6:	3718      	adds	r7, #24
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bbcc:	e005      	b.n	800bbda <USBD_GetLen+0x1e>
  {
    len++;
 800bbce:	7bfb      	ldrb	r3, [r7, #15]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1f5      	bne.n	800bbce <USBD_GetLen+0x12>
  }

  return len;
 800bbe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3714      	adds	r7, #20
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2202      	movs	r2, #2
 800bc00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	68ba      	ldr	r2, [r7, #8]
 800bc14:	2100      	movs	r1, #0
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f007 fb6d 	bl	80132f6 <USBD_LL_Transmit>

  return USBD_OK;
 800bc1c:	2300      	movs	r3, #0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b084      	sub	sp, #16
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	60f8      	str	r0, [r7, #12]
 800bc2e:	60b9      	str	r1, [r7, #8]
 800bc30:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	68ba      	ldr	r2, [r7, #8]
 800bc36:	2100      	movs	r1, #0
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f007 fb5c 	bl	80132f6 <USBD_LL_Transmit>

  return USBD_OK;
 800bc3e:	2300      	movs	r3, #0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2203      	movs	r2, #3
 800bc58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	2100      	movs	r1, #0
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	f007 fb60 	bl	8013338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc78:	2300      	movs	r3, #0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b084      	sub	sp, #16
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	60f8      	str	r0, [r7, #12]
 800bc8a:	60b9      	str	r1, [r7, #8]
 800bc8c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	68ba      	ldr	r2, [r7, #8]
 800bc92:	2100      	movs	r1, #0
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f007 fb4f 	bl	8013338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2204      	movs	r2, #4
 800bcb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	2100      	movs	r1, #0
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f007 fb1b 	bl	80132f6 <USBD_LL_Transmit>

  return USBD_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b082      	sub	sp, #8
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2205      	movs	r2, #5
 800bcd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcda:	2300      	movs	r3, #0
 800bcdc:	2200      	movs	r2, #0
 800bcde:	2100      	movs	r1, #0
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f007 fb29 	bl	8013338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bce6:	2300      	movs	r3, #0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3708      	adds	r7, #8
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bcf6:	1d3b      	adds	r3, r7, #4
 800bcf8:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	2100      	movs	r1, #0
 800bd00:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800bd04:	f000 f938 	bl	800bf78 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	330b      	adds	r3, #11
 800bd0c:	78db      	ldrb	r3, [r3, #3]
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3718      	adds	r7, #24
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b088      	sub	sp, #32
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bd20:	f107 030c 	add.w	r3, r7, #12
 800bd24:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800bd26:	79fb      	ldrb	r3, [r7, #7]
 800bd28:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800bd2a:	f107 020c 	add.w	r2, r7, #12
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	2101      	movs	r1, #1
 800bd32:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800bd36:	f000 f91f 	bl	800bf78 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	330b      	adds	r3, #11
 800bd3e:	78db      	ldrb	r3, [r3, #3]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3720      	adds	r7, #32
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b08b      	sub	sp, #44	; 0x2c
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800bd50:	2300      	movs	r3, #0
 800bd52:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800bd54:	2300      	movs	r3, #0
 800bd56:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800bd64:	2300      	movs	r3, #0
 800bd66:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800bd70:	4b4a      	ldr	r3, [pc, #296]	; (800be9c <SHCI_GetWirelessFwInfo+0x154>)
 800bd72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bd78:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bd82:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a44      	ldr	r2, [pc, #272]	; (800bea0 <SHCI_GetWirelessFwInfo+0x158>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d10f      	bne.n	800bdb4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	695b      	ldr	r3, [r3, #20]
 800bd98:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	699b      	ldr	r3, [r3, #24]
 800bd9e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	69db      	ldr	r3, [r3, #28]
 800bda4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	617b      	str	r3, [r7, #20]
 800bdb2:	e01a      	b.n	800bdea <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bdbc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800bdc0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	691b      	ldr	r3, [r3, #16]
 800bdc8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	695b      	ldr	r3, [r3, #20]
 800bdd0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	699b      	ldr	r3, [r3, #24]
 800bdd8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdec:	0e1b      	lsrs	r3, r3, #24
 800bdee:	b2da      	uxtb	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	0c1b      	lsrs	r3, r3, #16
 800bdf8:	b2da      	uxtb	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be00:	0a1b      	lsrs	r3, r3, #8
 800be02:	b2da      	uxtb	r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800be08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0a:	091b      	lsrs	r3, r3, #4
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	f003 030f 	and.w	r3, r3, #15
 800be12:	b2da      	uxtb	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	f003 030f 	and.w	r3, r3, #15
 800be20:	b2da      	uxtb	r2, r3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800be26:	6a3b      	ldr	r3, [r7, #32]
 800be28:	0e1b      	lsrs	r3, r3, #24
 800be2a:	b2da      	uxtb	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800be30:	6a3b      	ldr	r3, [r7, #32]
 800be32:	0c1b      	lsrs	r3, r3, #16
 800be34:	b2da      	uxtb	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800be3a:	6a3b      	ldr	r3, [r7, #32]
 800be3c:	0a1b      	lsrs	r3, r3, #8
 800be3e:	b2da      	uxtb	r2, r3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800be44:	6a3b      	ldr	r3, [r7, #32]
 800be46:	b2da      	uxtb	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	b2da      	uxtb	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800be54:	69bb      	ldr	r3, [r7, #24]
 800be56:	0e1b      	lsrs	r3, r3, #24
 800be58:	b2da      	uxtb	r2, r3
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	0c1b      	lsrs	r3, r3, #16
 800be62:	b2da      	uxtb	r2, r3
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800be68:	69bb      	ldr	r3, [r7, #24]
 800be6a:	0a1b      	lsrs	r3, r3, #8
 800be6c:	b2da      	uxtb	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	0e1b      	lsrs	r3, r3, #24
 800be76:	b2da      	uxtb	r2, r3
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	0c1b      	lsrs	r3, r3, #16
 800be80:	b2da      	uxtb	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	372c      	adds	r7, #44	; 0x2c
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr
 800be9c:	58004000 	.word	0x58004000
 800bea0:	a94656b9 	.word	0xa94656b9

0800bea4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	4a08      	ldr	r2, [pc, #32]	; (800bed4 <shci_init+0x30>)
 800beb4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800beb6:	4a08      	ldr	r2, [pc, #32]	; (800bed8 <shci_init+0x34>)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800bebc:	4806      	ldr	r0, [pc, #24]	; (800bed8 <shci_init+0x34>)
 800bebe:	f000 f911 	bl	800c0e4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4618      	mov	r0, r3
 800bec8:	f000 f894 	bl	800bff4 <TlInit>

  return;
 800becc:	bf00      	nop
}
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	20000334 	.word	0x20000334
 800bed8:	20000314 	.word	0x20000314

0800bedc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bee2:	4822      	ldr	r0, [pc, #136]	; (800bf6c <shci_user_evt_proc+0x90>)
 800bee4:	f001 fce4 	bl	800d8b0 <LST_is_empty>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d12b      	bne.n	800bf46 <shci_user_evt_proc+0x6a>
 800beee:	4b20      	ldr	r3, [pc, #128]	; (800bf70 <shci_user_evt_proc+0x94>)
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d027      	beq.n	800bf46 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bef6:	f107 030c 	add.w	r3, r7, #12
 800befa:	4619      	mov	r1, r3
 800befc:	481b      	ldr	r0, [pc, #108]	; (800bf6c <shci_user_evt_proc+0x90>)
 800befe:	f001 fd5e 	bl	800d9be <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800bf02:	4b1c      	ldr	r3, [pc, #112]	; (800bf74 <shci_user_evt_proc+0x98>)
 800bf04:	69db      	ldr	r3, [r3, #28]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00c      	beq.n	800bf24 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bf12:	4b18      	ldr	r3, [pc, #96]	; (800bf74 <shci_user_evt_proc+0x98>)
 800bf14:	69db      	ldr	r3, [r3, #28]
 800bf16:	1d3a      	adds	r2, r7, #4
 800bf18:	4610      	mov	r0, r2
 800bf1a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800bf1c:	793a      	ldrb	r2, [r7, #4]
 800bf1e:	4b14      	ldr	r3, [pc, #80]	; (800bf70 <shci_user_evt_proc+0x94>)
 800bf20:	701a      	strb	r2, [r3, #0]
 800bf22:	e002      	b.n	800bf2a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bf24:	4b12      	ldr	r3, [pc, #72]	; (800bf70 <shci_user_evt_proc+0x94>)
 800bf26:	2201      	movs	r2, #1
 800bf28:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800bf2a:	4b11      	ldr	r3, [pc, #68]	; (800bf70 <shci_user_evt_proc+0x94>)
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d004      	beq.n	800bf3c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 fa95 	bl	800c464 <TL_MM_EvtDone>
 800bf3a:	e004      	b.n	800bf46 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	4619      	mov	r1, r3
 800bf40:	480a      	ldr	r0, [pc, #40]	; (800bf6c <shci_user_evt_proc+0x90>)
 800bf42:	f001 fcd5 	bl	800d8f0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bf46:	4809      	ldr	r0, [pc, #36]	; (800bf6c <shci_user_evt_proc+0x90>)
 800bf48:	f001 fcb2 	bl	800d8b0 <LST_is_empty>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d107      	bne.n	800bf62 <shci_user_evt_proc+0x86>
 800bf52:	4b07      	ldr	r3, [pc, #28]	; (800bf70 <shci_user_evt_proc+0x94>)
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d003      	beq.n	800bf62 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800bf5a:	4804      	ldr	r0, [pc, #16]	; (800bf6c <shci_user_evt_proc+0x90>)
 800bf5c:	f7f4 ff32 	bl	8000dc4 <shci_notify_asynch_evt>
  }


  return;
 800bf60:	bf00      	nop
 800bf62:	bf00      	nop
}
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	20000260 	.word	0x20000260
 800bf70:	20000270 	.word	0x20000270
 800bf74:	20000314 	.word	0x20000314

0800bf78 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60ba      	str	r2, [r7, #8]
 800bf80:	607b      	str	r3, [r7, #4]
 800bf82:	4603      	mov	r3, r0
 800bf84:	81fb      	strh	r3, [r7, #14]
 800bf86:	460b      	mov	r3, r1
 800bf88:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	f000 f864 	bl	800c058 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800bf90:	4b16      	ldr	r3, [pc, #88]	; (800bfec <shci_send+0x74>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	89fa      	ldrh	r2, [r7, #14]
 800bf96:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800bf9a:	4b14      	ldr	r3, [pc, #80]	; (800bfec <shci_send+0x74>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	7b7a      	ldrb	r2, [r7, #13]
 800bfa0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800bfa2:	4b12      	ldr	r3, [pc, #72]	; (800bfec <shci_send+0x74>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	330c      	adds	r3, #12
 800bfa8:	7b7a      	ldrb	r2, [r7, #13]
 800bfaa:	68b9      	ldr	r1, [r7, #8]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f007 faa7 	bl	8013500 <memcpy>

  shciContext.io.Send(0,0);
 800bfb2:	4b0f      	ldr	r3, [pc, #60]	; (800bff0 <shci_send+0x78>)
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	2000      	movs	r0, #0
 800bfba:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800bfbc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800bfc0:	f7f4 ff20 	bl	8000e04 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f103 0008 	add.w	r0, r3, #8
 800bfca:	4b08      	ldr	r3, [pc, #32]	; (800bfec <shci_send+0x74>)
 800bfcc:	6819      	ldr	r1, [r3, #0]
 800bfce:	4b07      	ldr	r3, [pc, #28]	; (800bfec <shci_send+0x74>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	789b      	ldrb	r3, [r3, #2]
 800bfd4:	3303      	adds	r3, #3
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	f007 fa92 	bl	8013500 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800bfdc:	2001      	movs	r0, #1
 800bfde:	f000 f83b 	bl	800c058 <Cmd_SetStatus>

  return;
 800bfe2:	bf00      	nop
}
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	2000026c 	.word	0x2000026c
 800bff0:	20000314 	.word	0x20000314

0800bff4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b086      	sub	sp, #24
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800bffc:	4a10      	ldr	r2, [pc, #64]	; (800c040 <TlInit+0x4c>)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c002:	4810      	ldr	r0, [pc, #64]	; (800c044 <TlInit+0x50>)
 800c004:	f001 fc44 	bl	800d890 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c008:	2001      	movs	r0, #1
 800c00a:	f000 f825 	bl	800c058 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c00e:	4b0e      	ldr	r3, [pc, #56]	; (800c048 <TlInit+0x54>)
 800c010:	2201      	movs	r2, #1
 800c012:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c014:	4b0d      	ldr	r3, [pc, #52]	; (800c04c <TlInit+0x58>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00c      	beq.n	800c036 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c020:	4b0b      	ldr	r3, [pc, #44]	; (800c050 <TlInit+0x5c>)
 800c022:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c024:	4b0b      	ldr	r3, [pc, #44]	; (800c054 <TlInit+0x60>)
 800c026:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c028:	4b08      	ldr	r3, [pc, #32]	; (800c04c <TlInit+0x58>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f107 020c 	add.w	r2, r7, #12
 800c030:	4610      	mov	r0, r2
 800c032:	4798      	blx	r3
  }

  return;
 800c034:	bf00      	nop
 800c036:	bf00      	nop
}
 800c038:	3718      	adds	r7, #24
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	2000026c 	.word	0x2000026c
 800c044:	20000260 	.word	0x20000260
 800c048:	20000270 	.word	0x20000270
 800c04c:	20000314 	.word	0x20000314
 800c050:	0800c0a9 	.word	0x0800c0a9
 800c054:	0800c0c1 	.word	0x0800c0c1

0800c058 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	4603      	mov	r3, r0
 800c060:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c062:	79fb      	ldrb	r3, [r7, #7]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d10b      	bne.n	800c080 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c068:	4b0d      	ldr	r3, [pc, #52]	; (800c0a0 <Cmd_SetStatus+0x48>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d003      	beq.n	800c078 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c070:	4b0b      	ldr	r3, [pc, #44]	; (800c0a0 <Cmd_SetStatus+0x48>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2000      	movs	r0, #0
 800c076:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c078:	4b0a      	ldr	r3, [pc, #40]	; (800c0a4 <Cmd_SetStatus+0x4c>)
 800c07a:	2200      	movs	r2, #0
 800c07c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c07e:	e00b      	b.n	800c098 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c080:	4b08      	ldr	r3, [pc, #32]	; (800c0a4 <Cmd_SetStatus+0x4c>)
 800c082:	2201      	movs	r2, #1
 800c084:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c086:	4b06      	ldr	r3, [pc, #24]	; (800c0a0 <Cmd_SetStatus+0x48>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d004      	beq.n	800c098 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c08e:	4b04      	ldr	r3, [pc, #16]	; (800c0a0 <Cmd_SetStatus+0x48>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2001      	movs	r0, #1
 800c094:	4798      	blx	r3
  return;
 800c096:	bf00      	nop
 800c098:	bf00      	nop
}
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	20000334 	.word	0x20000334
 800c0a4:	20000268 	.word	0x20000268

0800c0a8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	f7f4 fe97 	bl	8000de4 <shci_cmd_resp_release>

  return;
 800c0b6:	bf00      	nop
}
 800c0b8:	3708      	adds	r7, #8
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
	...

0800c0c0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c0c8:	6879      	ldr	r1, [r7, #4]
 800c0ca:	4805      	ldr	r0, [pc, #20]	; (800c0e0 <TlUserEvtReceived+0x20>)
 800c0cc:	f001 fc34 	bl	800d938 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c0d0:	4803      	ldr	r0, [pc, #12]	; (800c0e0 <TlUserEvtReceived+0x20>)
 800c0d2:	f7f4 fe77 	bl	8000dc4 <shci_notify_asynch_evt>

  return;
 800c0d6:	bf00      	nop
}
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	20000260 	.word	0x20000260

0800c0e4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a05      	ldr	r2, [pc, #20]	; (800c104 <shci_register_io_bus+0x20>)
 800c0f0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	4a04      	ldr	r2, [pc, #16]	; (800c108 <shci_register_io_bus+0x24>)
 800c0f6:	611a      	str	r2, [r3, #16]

  return;
 800c0f8:	bf00      	nop
}
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr
 800c104:	0800c201 	.word	0x0800c201
 800c108:	0800c255 	.word	0x0800c255

0800c10c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c110:	f006 fb76 	bl	8012800 <HW_IPCC_Enable>

  return;
 800c114:	bf00      	nop
}
 800c116:	bd80      	pop	{r7, pc}

0800c118 <TL_Init>:


void TL_Init( void )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c11c:	4b10      	ldr	r3, [pc, #64]	; (800c160 <TL_Init+0x48>)
 800c11e:	4a11      	ldr	r2, [pc, #68]	; (800c164 <TL_Init+0x4c>)
 800c120:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c122:	4b0f      	ldr	r3, [pc, #60]	; (800c160 <TL_Init+0x48>)
 800c124:	4a10      	ldr	r2, [pc, #64]	; (800c168 <TL_Init+0x50>)
 800c126:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c128:	4b0d      	ldr	r3, [pc, #52]	; (800c160 <TL_Init+0x48>)
 800c12a:	4a10      	ldr	r2, [pc, #64]	; (800c16c <TL_Init+0x54>)
 800c12c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c12e:	4b0c      	ldr	r3, [pc, #48]	; (800c160 <TL_Init+0x48>)
 800c130:	4a0f      	ldr	r2, [pc, #60]	; (800c170 <TL_Init+0x58>)
 800c132:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800c134:	4b0a      	ldr	r3, [pc, #40]	; (800c160 <TL_Init+0x48>)
 800c136:	4a0f      	ldr	r2, [pc, #60]	; (800c174 <TL_Init+0x5c>)
 800c138:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c13a:	4b09      	ldr	r3, [pc, #36]	; (800c160 <TL_Init+0x48>)
 800c13c:	4a0e      	ldr	r2, [pc, #56]	; (800c178 <TL_Init+0x60>)
 800c13e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c140:	4b07      	ldr	r3, [pc, #28]	; (800c160 <TL_Init+0x48>)
 800c142:	4a0e      	ldr	r2, [pc, #56]	; (800c17c <TL_Init+0x64>)
 800c144:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c146:	4b06      	ldr	r3, [pc, #24]	; (800c160 <TL_Init+0x48>)
 800c148:	4a0d      	ldr	r2, [pc, #52]	; (800c180 <TL_Init+0x68>)
 800c14a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c14c:	4b04      	ldr	r3, [pc, #16]	; (800c160 <TL_Init+0x48>)
 800c14e:	4a0d      	ldr	r2, [pc, #52]	; (800c184 <TL_Init+0x6c>)
 800c150:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c152:	4b03      	ldr	r3, [pc, #12]	; (800c160 <TL_Init+0x48>)
 800c154:	4a0c      	ldr	r2, [pc, #48]	; (800c188 <TL_Init+0x70>)
 800c156:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c158:	f006 fb66 	bl	8012828 <HW_IPCC_Init>

  return;
 800c15c:	bf00      	nop
}
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	20030000 	.word	0x20030000
 800c164:	20030028 	.word	0x20030028
 800c168:	20030048 	.word	0x20030048
 800c16c:	20030058 	.word	0x20030058
 800c170:	20030064 	.word	0x20030064
 800c174:	2003006c 	.word	0x2003006c
 800c178:	20030074 	.word	0x20030074
 800c17c:	2003007c 	.word	0x2003007c
 800c180:	20030098 	.word	0x20030098
 800c184:	2003009c 	.word	0x2003009c
 800c188:	200300a8 	.word	0x200300a8

0800c18c <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c192:	e01c      	b.n	800c1ce <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c194:	1d3b      	adds	r3, r7, #4
 800c196:	4619      	mov	r1, r3
 800c198:	4812      	ldr	r0, [pc, #72]	; (800c1e4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c19a:	f001 fc10 	bl	800d9be <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	7a5b      	ldrb	r3, [r3, #9]
 800c1a2:	2b0f      	cmp	r3, #15
 800c1a4:	d003      	beq.n	800c1ae <HW_IPCC_BLE_RxEvtNot+0x22>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	7a5b      	ldrb	r3, [r3, #9]
 800c1aa:	2b0e      	cmp	r3, #14
 800c1ac:	d105      	bne.n	800c1ba <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	2002      	movs	r0, #2
 800c1b4:	f000 f9ba 	bl	800c52c <OutputDbgTrace>
 800c1b8:	e004      	b.n	800c1c4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4619      	mov	r1, r3
 800c1be:	2003      	movs	r0, #3
 800c1c0:	f000 f9b4 	bl	800c52c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c1c4:	4b08      	ldr	r3, [pc, #32]	; (800c1e8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	4610      	mov	r0, r2
 800c1cc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c1ce:	4805      	ldr	r0, [pc, #20]	; (800c1e4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c1d0:	f001 fb6e 	bl	800d8b0 <LST_is_empty>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d0dc      	beq.n	800c194 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c1da:	bf00      	nop
}
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	200300c4 	.word	0x200300c4
 800c1e8:	20000340 	.word	0x20000340

0800c1ec <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c1f0:	4b02      	ldr	r3, [pc, #8]	; (800c1fc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4798      	blx	r3

  return;
 800c1f6:	bf00      	nop
}
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20000344 	.word	0x20000344

0800c200 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c20c:	480d      	ldr	r0, [pc, #52]	; (800c244 <TL_SYS_Init+0x44>)
 800c20e:	f001 fb3f 	bl	800d890 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c212:	4b0d      	ldr	r3, [pc, #52]	; (800c248 <TL_SYS_Init+0x48>)
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	689a      	ldr	r2, [r3, #8]
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	4a08      	ldr	r2, [pc, #32]	; (800c244 <TL_SYS_Init+0x44>)
 800c224:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c226:	f006 fb2d 	bl	8012884 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a07      	ldr	r2, [pc, #28]	; (800c24c <TL_SYS_Init+0x4c>)
 800c230:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	4a06      	ldr	r2, [pc, #24]	; (800c250 <TL_SYS_Init+0x50>)
 800c238:	6013      	str	r3, [r2, #0]

  return 0;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}
 800c244:	200300cc 	.word	0x200300cc
 800c248:	20030000 	.word	0x20030000
 800c24c:	20000348 	.word	0x20000348
 800c250:	2000034c 	.word	0x2000034c

0800c254 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c260:	4b09      	ldr	r3, [pc, #36]	; (800c288 <TL_SYS_SendCmd+0x34>)
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2210      	movs	r2, #16
 800c268:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c26a:	4b07      	ldr	r3, [pc, #28]	; (800c288 <TL_SYS_SendCmd+0x34>)
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4619      	mov	r1, r3
 800c272:	2004      	movs	r0, #4
 800c274:	f000 f95a 	bl	800c52c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c278:	f006 fb0e 	bl	8012898 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	20030000 	.word	0x20030000

0800c28c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c290:	4b07      	ldr	r3, [pc, #28]	; (800c2b0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4619      	mov	r1, r3
 800c298:	2005      	movs	r0, #5
 800c29a:	f000 f947 	bl	800c52c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c29e:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a03      	ldr	r2, [pc, #12]	; (800c2b0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c2a4:	68d2      	ldr	r2, [r2, #12]
 800c2a6:	6812      	ldr	r2, [r2, #0]
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	4798      	blx	r3

  return;
 800c2ac:	bf00      	nop
}
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	20030000 	.word	0x20030000
 800c2b4:	20000348 	.word	0x20000348

0800c2b8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c2be:	e00e      	b.n	800c2de <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c2c0:	1d3b      	adds	r3, r7, #4
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	480b      	ldr	r0, [pc, #44]	; (800c2f4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c2c6:	f001 fb7a 	bl	800d9be <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	2006      	movs	r0, #6
 800c2d0:	f000 f92c 	bl	800c52c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c2d4:	4b08      	ldr	r3, [pc, #32]	; (800c2f8 <HW_IPCC_SYS_EvtNot+0x40>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	4610      	mov	r0, r2
 800c2dc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c2de:	4805      	ldr	r0, [pc, #20]	; (800c2f4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c2e0:	f001 fae6 	bl	800d8b0 <LST_is_empty>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d0ea      	beq.n	800c2c0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c2ea:	bf00      	nop
}
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	200300cc 	.word	0x200300cc
 800c2f8:	2000034c 	.word	0x2000034c

0800c2fc <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800c304:	4b0a      	ldr	r3, [pc, #40]	; (800c330 <TL_THREAD_Init+0x34>)
 800c306:	689b      	ldr	r3, [r3, #8]
 800c308:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	685a      	ldr	r2, [r3, #4]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	689a      	ldr	r2, [r3, #8]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 800c322:	f006 fadf 	bl	80128e4 <HW_IPCC_THREAD_Init>

  return;
 800c326:	bf00      	nop
}
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	20030000 	.word	0x20030000

0800c334 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800c338:	4b04      	ldr	r3, [pc, #16]	; (800c34c <TL_OT_SendCmd+0x18>)
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	2208      	movs	r2, #8
 800c340:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800c342:	f006 fadd 	bl	8012900 <HW_IPCC_OT_SendCmd>

  return;
 800c346:	bf00      	nop
}
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	20030000 	.word	0x20030000

0800c350 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800c354:	4b04      	ldr	r3, [pc, #16]	; (800c368 <TL_CLI_SendCmd+0x18>)
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	220a      	movs	r2, #10
 800c35c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 800c35e:	f006 fadd 	bl	801291c <HW_IPCC_CLI_SendCmd>

  return;
 800c362:	bf00      	nop
}
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	20030000 	.word	0x20030000

0800c36c <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c370:	4b04      	ldr	r3, [pc, #16]	; (800c384 <TL_THREAD_SendAck+0x18>)
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	220d      	movs	r2, #13
 800c378:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800c37a:	f006 fad9 	bl	8012930 <HW_IPCC_THREAD_SendAck>

  return;
 800c37e:	bf00      	nop
}
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	20030000 	.word	0x20030000

0800c388 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c38c:	4b04      	ldr	r3, [pc, #16]	; (800c3a0 <TL_THREAD_CliSendAck+0x18>)
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	220d      	movs	r2, #13
 800c394:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800c396:	f006 fad9 	bl	801294c <HW_IPCC_THREAD_CliSendAck>

  return;
 800c39a:	bf00      	nop
}
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	20030000 	.word	0x20030000

0800c3a4 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800c3a8:	4b03      	ldr	r3, [pc, #12]	; (800c3b8 <HW_IPCC_OT_CmdEvtNot+0x14>)
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f005 ff6c 	bl	801228c <TL_OT_CmdEvtReceived>

  return;
 800c3b4:	bf00      	nop
}
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	20030000 	.word	0x20030000

0800c3bc <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800c3c0:	4b03      	ldr	r3, [pc, #12]	; (800c3d0 <HW_IPCC_THREAD_EvtNot+0x14>)
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f005 ff6a 	bl	80122a0 <TL_THREAD_NotReceived>

  return;
 800c3cc:	bf00      	nop
}
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	20030000 	.word	0x20030000

0800c3d4 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 800c3d8:	4b03      	ldr	r3, [pc, #12]	; (800c3e8 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f006 f80c 	bl	80123fc <TL_THREAD_CliNotReceived>

  return;
 800c3e4:	bf00      	nop
}
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	20030000 	.word	0x20030000

0800c3ec <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c3f4:	4817      	ldr	r0, [pc, #92]	; (800c454 <TL_MM_Init+0x68>)
 800c3f6:	f001 fa4b 	bl	800d890 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c3fa:	4817      	ldr	r0, [pc, #92]	; (800c458 <TL_MM_Init+0x6c>)
 800c3fc:	f001 fa48 	bl	800d890 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c400:	4b16      	ldr	r3, [pc, #88]	; (800c45c <TL_MM_Init+0x70>)
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	4a16      	ldr	r2, [pc, #88]	; (800c460 <TL_MM_Init+0x74>)
 800c406:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c408:	4b15      	ldr	r3, [pc, #84]	; (800c460 <TL_MM_Init+0x74>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	6892      	ldr	r2, [r2, #8]
 800c410:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c412:	4b13      	ldr	r3, [pc, #76]	; (800c460 <TL_MM_Init+0x74>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	68d2      	ldr	r2, [r2, #12]
 800c41a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c41c:	4b10      	ldr	r3, [pc, #64]	; (800c460 <TL_MM_Init+0x74>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a0c      	ldr	r2, [pc, #48]	; (800c454 <TL_MM_Init+0x68>)
 800c422:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c424:	4b0e      	ldr	r3, [pc, #56]	; (800c460 <TL_MM_Init+0x74>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	6812      	ldr	r2, [r2, #0]
 800c42c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c42e:	4b0c      	ldr	r3, [pc, #48]	; (800c460 <TL_MM_Init+0x74>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	6852      	ldr	r2, [r2, #4]
 800c436:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c438:	4b09      	ldr	r3, [pc, #36]	; (800c460 <TL_MM_Init+0x74>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	6912      	ldr	r2, [r2, #16]
 800c440:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c442:	4b07      	ldr	r3, [pc, #28]	; (800c460 <TL_MM_Init+0x74>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	6952      	ldr	r2, [r2, #20]
 800c44a:	619a      	str	r2, [r3, #24]

  return;
 800c44c:	bf00      	nop
}
 800c44e:	3708      	adds	r7, #8
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	200300b4 	.word	0x200300b4
 800c458:	20000338 	.word	0x20000338
 800c45c:	20030000 	.word	0x20030000
 800c460:	20000350 	.word	0x20000350

0800c464 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c46c:	6879      	ldr	r1, [r7, #4]
 800c46e:	4807      	ldr	r0, [pc, #28]	; (800c48c <TL_MM_EvtDone+0x28>)
 800c470:	f001 fa62 	bl	800d938 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c474:	6879      	ldr	r1, [r7, #4]
 800c476:	2000      	movs	r0, #0
 800c478:	f000 f858 	bl	800c52c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c47c:	4804      	ldr	r0, [pc, #16]	; (800c490 <TL_MM_EvtDone+0x2c>)
 800c47e:	f006 fa97 	bl	80129b0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c482:	bf00      	nop
}
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	20000338 	.word	0x20000338
 800c490:	0800c495 	.word	0x0800c495

0800c494 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c49a:	e00c      	b.n	800c4b6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c49c:	1d3b      	adds	r3, r7, #4
 800c49e:	4619      	mov	r1, r3
 800c4a0:	480a      	ldr	r0, [pc, #40]	; (800c4cc <SendFreeBuf+0x38>)
 800c4a2:	f001 fa8c 	bl	800d9be <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c4a6:	4b0a      	ldr	r3, [pc, #40]	; (800c4d0 <SendFreeBuf+0x3c>)
 800c4a8:	691b      	ldr	r3, [r3, #16]
 800c4aa:	691b      	ldr	r3, [r3, #16]
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	4611      	mov	r1, r2
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f001 fa41 	bl	800d938 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c4b6:	4805      	ldr	r0, [pc, #20]	; (800c4cc <SendFreeBuf+0x38>)
 800c4b8:	f001 f9fa 	bl	800d8b0 <LST_is_empty>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d0ec      	beq.n	800c49c <SendFreeBuf+0x8>
  }

  return;
 800c4c2:	bf00      	nop
}
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	20000338 	.word	0x20000338
 800c4d0:	20030000 	.word	0x20030000

0800c4d4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c4d8:	4805      	ldr	r0, [pc, #20]	; (800c4f0 <TL_TRACES_Init+0x1c>)
 800c4da:	f001 f9d9 	bl	800d890 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c4de:	4b05      	ldr	r3, [pc, #20]	; (800c4f4 <TL_TRACES_Init+0x20>)
 800c4e0:	695b      	ldr	r3, [r3, #20]
 800c4e2:	4a03      	ldr	r2, [pc, #12]	; (800c4f0 <TL_TRACES_Init+0x1c>)
 800c4e4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c4e6:	f006 fa99 	bl	8012a1c <HW_IPCC_TRACES_Init>

  return;
 800c4ea:	bf00      	nop
}
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	200300bc 	.word	0x200300bc
 800c4f4:	20030000 	.word	0x20030000

0800c4f8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c4fe:	e008      	b.n	800c512 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c500:	1d3b      	adds	r3, r7, #4
 800c502:	4619      	mov	r1, r3
 800c504:	4808      	ldr	r0, [pc, #32]	; (800c528 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c506:	f001 fa5a 	bl	800d9be <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7f4 fc8b 	bl	8000e28 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c512:	4805      	ldr	r0, [pc, #20]	; (800c528 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c514:	f001 f9cc 	bl	800d8b0 <LST_is_empty>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d0f0      	beq.n	800c500 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c51e:	bf00      	nop
}
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	200300bc 	.word	0x200300bc

0800c52c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	4603      	mov	r3, r0
 800c534:	6039      	str	r1, [r7, #0]
 800c536:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c538:	79fb      	ldrb	r3, [r7, #7]
 800c53a:	2b06      	cmp	r3, #6
 800c53c:	d849      	bhi.n	800c5d2 <OutputDbgTrace+0xa6>
 800c53e:	a201      	add	r2, pc, #4	; (adr r2, 800c544 <OutputDbgTrace+0x18>)
 800c540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c544:	0800c561 	.word	0x0800c561
 800c548:	0800c583 	.word	0x0800c583
 800c54c:	0800c589 	.word	0x0800c589
 800c550:	0800c5a3 	.word	0x0800c5a3
 800c554:	0800c5af 	.word	0x0800c5af
 800c558:	0800c5b5 	.word	0x0800c5b5
 800c55c:	0800c5c7 	.word	0x0800c5c7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	7a5b      	ldrb	r3, [r3, #9]
 800c568:	2b0f      	cmp	r3, #15
 800c56a:	d004      	beq.n	800c576 <OutputDbgTrace+0x4a>
 800c56c:	2bff      	cmp	r3, #255	; 0xff
 800c56e:	d004      	beq.n	800c57a <OutputDbgTrace+0x4e>
 800c570:	2b0e      	cmp	r3, #14
 800c572:	d004      	beq.n	800c57e <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c574:	e004      	b.n	800c580 <OutputDbgTrace+0x54>
          break;
 800c576:	bf00      	nop
 800c578:	e02c      	b.n	800c5d4 <OutputDbgTrace+0xa8>
          break;
 800c57a:	bf00      	nop
 800c57c:	e02a      	b.n	800c5d4 <OutputDbgTrace+0xa8>
          break;
 800c57e:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c580:	e028      	b.n	800c5d4 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c586:	e025      	b.n	800c5d4 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	7a5b      	ldrb	r3, [r3, #9]
 800c590:	2b0e      	cmp	r3, #14
 800c592:	d002      	beq.n	800c59a <OutputDbgTrace+0x6e>
 800c594:	2b0f      	cmp	r3, #15
 800c596:	d002      	beq.n	800c59e <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c598:	e002      	b.n	800c5a0 <OutputDbgTrace+0x74>
          break;
 800c59a:	bf00      	nop
 800c59c:	e01a      	b.n	800c5d4 <OutputDbgTrace+0xa8>
          break;
 800c59e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c5a0:	e018      	b.n	800c5d4 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	7a5b      	ldrb	r3, [r3, #9]
 800c5aa:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c5ac:	e012      	b.n	800c5d4 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c5b2:	e00f      	b.n	800c5d4 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	7a5b      	ldrb	r3, [r3, #9]
 800c5bc:	2b0e      	cmp	r3, #14
 800c5be:	d000      	beq.n	800c5c2 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c5c0:	e000      	b.n	800c5c4 <OutputDbgTrace+0x98>
          break;
 800c5c2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c5c4:	e006      	b.n	800c5d4 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	7a5b      	ldrb	r3, [r3, #9]
 800c5ce:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c5d0:	e000      	b.n	800c5d4 <OutputDbgTrace+0xa8>

    default:
      break;
 800c5d2:	bf00      	nop
  }

  return;
 800c5d4:	bf00      	nop
}
 800c5d6:	3714      	adds	r7, #20
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <otCoapHeaderInit>:
extern otCoapRequestHandler defaultCoapRequestHandlerCb;

#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	70fb      	strb	r3, [r7, #3]
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800c5f0:	f005 fe66 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c5f4:	f005 fe02 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c5f8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f062 0260 	orn	r2, r2, #96	; 0x60
 800c602:	701a      	strb	r2, [r3, #0]
 800c604:	2200      	movs	r2, #0
 800c606:	705a      	strb	r2, [r3, #1]
 800c608:	2200      	movs	r2, #0
 800c60a:	709a      	strb	r2, [r3, #2]
 800c60c:	2200      	movs	r2, #0
 800c60e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	f042 0203 	orr.w	r2, r2, #3
 800c618:	711a      	strb	r2, [r3, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	715a      	strb	r2, [r3, #5]
 800c61e:	2200      	movs	r2, #0
 800c620:	719a      	strb	r2, [r3, #6]
 800c622:	2200      	movs	r2, #0
 800c624:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 800c62c:	78fa      	ldrb	r2, [r7, #3]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 800c632:	78ba      	ldrb	r2, [r7, #2]
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800c638:	f005 fe04 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c63c:	f005 fdea 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c640:	60f8      	str	r0, [r7, #12]
}
 800c642:	bf00      	nop
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b086      	sub	sp, #24
 800c64e:	af00      	add	r7, sp, #0
 800c650:	60f8      	str	r0, [r7, #12]
 800c652:	60b9      	str	r1, [r7, #8]
 800c654:	4613      	mov	r3, r2
 800c656:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 800c658:	f005 fe32 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c65c:	f005 fdce 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c660:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	2200      	movs	r2, #0
 800c666:	f062 025f 	orn	r2, r2, #95	; 0x5f
 800c66a:	701a      	strb	r2, [r3, #0]
 800c66c:	2200      	movs	r2, #0
 800c66e:	705a      	strb	r2, [r3, #1]
 800c670:	2200      	movs	r2, #0
 800c672:	709a      	strb	r2, [r3, #2]
 800c674:	2200      	movs	r2, #0
 800c676:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	2200      	movs	r2, #0
 800c67c:	f042 0203 	orr.w	r2, r2, #3
 800c680:	711a      	strb	r2, [r3, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	715a      	strb	r2, [r3, #5]
 800c686:	2200      	movs	r2, #0
 800c688:	719a      	strb	r2, [r3, #6]
 800c68a:	2200      	movs	r2, #0
 800c68c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 800c694:	68ba      	ldr	r2, [r7, #8]
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 800c69a:	79fa      	ldrb	r2, [r7, #7]
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800c6a0:	f005 fdd0 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c6a4:	f005 fdb6 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c6a8:	6178      	str	r0, [r7, #20]
}
 800c6aa:	bf00      	nop
 800c6ac:	3718      	adds	r7, #24
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b084      	sub	sp, #16
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800c6be:	f005 fdff 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c6c2:	f005 fd9b 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c6c6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f062 025e 	orn	r2, r2, #94	; 0x5e
 800c6d0:	701a      	strb	r2, [r3, #0]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	705a      	strb	r2, [r3, #1]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	709a      	strb	r2, [r3, #2]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f042 0202 	orr.w	r2, r2, #2
 800c6e6:	711a      	strb	r2, [r3, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	715a      	strb	r2, [r3, #5]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	719a      	strb	r2, [r3, #6]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800c6fa:	78fa      	ldrb	r2, [r7, #3]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c700:	f005 fda0 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c704:	f005 fd86 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c708:	60f8      	str	r0, [r7, #12]
}
 800c70a:	bf00      	nop
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b084      	sub	sp, #16
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	460b      	mov	r3, r1
 800c71c:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800c71e:	f005 fdcf 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c722:	f005 fd6b 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c726:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f062 025d 	orn	r2, r2, #93	; 0x5d
 800c730:	701a      	strb	r2, [r3, #0]
 800c732:	2200      	movs	r2, #0
 800c734:	705a      	strb	r2, [r3, #1]
 800c736:	2200      	movs	r2, #0
 800c738:	709a      	strb	r2, [r3, #2]
 800c73a:	2200      	movs	r2, #0
 800c73c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2200      	movs	r2, #0
 800c742:	f042 0202 	orr.w	r2, r2, #2
 800c746:	711a      	strb	r2, [r3, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	715a      	strb	r2, [r3, #5]
 800c74c:	2200      	movs	r2, #0
 800c74e:	719a      	strb	r2, [r3, #6]
 800c750:	2200      	movs	r2, #0
 800c752:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 800c75a:	78fa      	ldrb	r2, [r7, #3]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c760:	f005 fd70 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c764:	f005 fd56 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c768:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	b2db      	uxtb	r3, r3
}
 800c770:	4618      	mov	r0, r3
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800c782:	f005 fd9d 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c786:	f005 fd39 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c78a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2200      	movs	r2, #0
 800c790:	f062 0250 	orn	r2, r2, #80	; 0x50
 800c794:	701a      	strb	r2, [r3, #0]
 800c796:	2200      	movs	r2, #0
 800c798:	705a      	strb	r2, [r3, #1]
 800c79a:	2200      	movs	r2, #0
 800c79c:	709a      	strb	r2, [r3, #2]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f042 0202 	orr.w	r2, r2, #2
 800c7aa:	711a      	strb	r2, [r3, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	715a      	strb	r2, [r3, #5]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	719a      	strb	r2, [r3, #6]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 800c7be:	683a      	ldr	r2, [r7, #0]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c7c4:	f005 fd3e 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c7c8:	f005 fd24 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c7cc:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	b2db      	uxtb	r3, r3
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3710      	adds	r7, #16
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c7e4:	f005 fd6c 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c7e8:	f005 fd08 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c7ec:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f062 024d 	orn	r2, r2, #77	; 0x4d
 800c7f6:	701a      	strb	r2, [r3, #0]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	705a      	strb	r2, [r3, #1]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	709a      	strb	r2, [r3, #2]
 800c800:	2200      	movs	r2, #0
 800c802:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2200      	movs	r2, #0
 800c808:	f042 0201 	orr.w	r2, r2, #1
 800c80c:	711a      	strb	r2, [r3, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	715a      	strb	r2, [r3, #5]
 800c812:	2200      	movs	r2, #0
 800c814:	719a      	strb	r2, [r3, #6]
 800c816:	2200      	movs	r2, #0
 800c818:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c820:	f005 fd10 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c824:	f005 fcf6 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c828:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	b2db      	uxtb	r3, r3
}
 800c830:	4618      	mov	r0, r3
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	460b      	mov	r3, r1
 800c842:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800c844:	f005 fd3c 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c848:	f005 fcd8 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c84c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2200      	movs	r2, #0
 800c852:	f062 0256 	orn	r2, r2, #86	; 0x56
 800c856:	701a      	strb	r2, [r3, #0]
 800c858:	2200      	movs	r2, #0
 800c85a:	705a      	strb	r2, [r3, #1]
 800c85c:	2200      	movs	r2, #0
 800c85e:	709a      	strb	r2, [r3, #2]
 800c860:	2200      	movs	r2, #0
 800c862:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2200      	movs	r2, #0
 800c868:	f042 0202 	orr.w	r2, r2, #2
 800c86c:	711a      	strb	r2, [r3, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	715a      	strb	r2, [r3, #5]
 800c872:	2200      	movs	r2, #0
 800c874:	719a      	strb	r2, [r3, #6]
 800c876:	2200      	movs	r2, #0
 800c878:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 800c880:	887a      	ldrh	r2, [r7, #2]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c886:	f005 fcdd 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c88a:	f005 fcc3 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c88e:	60f8      	str	r0, [r7, #12]
}
 800c890:	bf00      	nop
 800c892:	3710      	adds	r7, #16
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c8a0:	f005 fd0e 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c8a4:	f005 fcaa 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c8a8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	f062 0261 	orn	r2, r2, #97	; 0x61
 800c8b2:	701a      	strb	r2, [r3, #0]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	705a      	strb	r2, [r3, #1]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	709a      	strb	r2, [r3, #2]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f042 0201 	orr.w	r2, r2, #1
 800c8c8:	711a      	strb	r2, [r3, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	715a      	strb	r2, [r3, #5]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	719a      	strb	r2, [r3, #6]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c8dc:	f005 fcb2 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c8e0:	f005 fc98 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c8e4:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	b2db      	uxtb	r3, r3
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3710      	adds	r7, #16
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c8fc:	f005 fce0 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c900:	f005 fc7c 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c904:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2200      	movs	r2, #0
 800c90a:	f062 024c 	orn	r2, r2, #76	; 0x4c
 800c90e:	701a      	strb	r2, [r3, #0]
 800c910:	2200      	movs	r2, #0
 800c912:	705a      	strb	r2, [r3, #1]
 800c914:	2200      	movs	r2, #0
 800c916:	709a      	strb	r2, [r3, #2]
 800c918:	2200      	movs	r2, #0
 800c91a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2200      	movs	r2, #0
 800c920:	f042 0201 	orr.w	r2, r2, #1
 800c924:	711a      	strb	r2, [r3, #4]
 800c926:	2200      	movs	r2, #0
 800c928:	715a      	strb	r2, [r3, #5]
 800c92a:	2200      	movs	r2, #0
 800c92c:	719a      	strb	r2, [r3, #6]
 800c92e:	2200      	movs	r2, #0
 800c930:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c938:	f005 fc84 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c93c:	f005 fc6a 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c940:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	689b      	ldr	r3, [r3, #8]
 800c946:	b2db      	uxtb	r3, r3
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c958:	f005 fcb2 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c95c:	f005 fc4e 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c960:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2200      	movs	r2, #0
 800c966:	f062 0255 	orn	r2, r2, #85	; 0x55
 800c96a:	701a      	strb	r2, [r3, #0]
 800c96c:	2200      	movs	r2, #0
 800c96e:	705a      	strb	r2, [r3, #1]
 800c970:	2200      	movs	r2, #0
 800c972:	709a      	strb	r2, [r3, #2]
 800c974:	2200      	movs	r2, #0
 800c976:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f042 0201 	orr.w	r2, r2, #1
 800c980:	711a      	strb	r2, [r3, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	715a      	strb	r2, [r3, #5]
 800c986:	2200      	movs	r2, #0
 800c988:	719a      	strb	r2, [r3, #6]
 800c98a:	2200      	movs	r2, #0
 800c98c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c994:	f005 fc56 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c998:	f005 fc3c 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c99c:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	b29b      	uxth	r3, r3
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3710      	adds	r7, #16
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c9b4:	f005 fc84 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c9b8:	f005 fc20 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c9bc:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f062 0254 	orn	r2, r2, #84	; 0x54
 800c9c6:	701a      	strb	r2, [r3, #0]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	705a      	strb	r2, [r3, #1]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	709a      	strb	r2, [r3, #2]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f042 0201 	orr.w	r2, r2, #1
 800c9dc:	711a      	strb	r2, [r3, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	715a      	strb	r2, [r3, #5]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	719a      	strb	r2, [r3, #6]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c9f0:	f005 fc28 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c9f4:	f005 fc0e 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c9f8:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	b2db      	uxtb	r3, r3
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3710      	adds	r7, #16
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ca10:	f005 fc56 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ca14:	f005 fbf2 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800ca18:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	f062 0253 	orn	r2, r2, #83	; 0x53
 800ca22:	701a      	strb	r2, [r3, #0]
 800ca24:	2200      	movs	r2, #0
 800ca26:	705a      	strb	r2, [r3, #1]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	709a      	strb	r2, [r3, #2]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f042 0201 	orr.w	r2, r2, #1
 800ca38:	711a      	strb	r2, [r3, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	715a      	strb	r2, [r3, #5]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	719a      	strb	r2, [r3, #6]
 800ca42:	2200      	movs	r2, #0
 800ca44:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ca4c:	f005 fbfa 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ca50:	f005 fbe0 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ca54:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	689b      	ldr	r3, [r3, #8]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3710      	adds	r7, #16
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b084      	sub	sp, #16
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
 800ca6a:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800ca6c:	f005 fc28 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ca70:	f005 fbc4 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800ca74:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f062 0259 	orn	r2, r2, #89	; 0x59
 800ca7e:	701a      	strb	r2, [r3, #0]
 800ca80:	2200      	movs	r2, #0
 800ca82:	705a      	strb	r2, [r3, #1]
 800ca84:	2200      	movs	r2, #0
 800ca86:	709a      	strb	r2, [r3, #2]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f042 0201 	orr.w	r2, r2, #1
 800ca94:	711a      	strb	r2, [r3, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	715a      	strb	r2, [r3, #5]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	719a      	strb	r2, [r3, #6]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800caa2:	683a      	ldr	r2, [r7, #0]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800caa8:	f005 fbcc 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800caac:	f005 fbb2 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cab0:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	689b      	ldr	r3, [r3, #8]

}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b086      	sub	sp, #24
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	60f8      	str	r0, [r7, #12]
 800cac6:	60b9      	str	r1, [r7, #8]
 800cac8:	607a      	str	r2, [r7, #4]
 800caca:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 800cacc:	f005 fbf8 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cad0:	f005 fb94 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cad4:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	2200      	movs	r2, #0
 800cada:	f062 0258 	orn	r2, r2, #88	; 0x58
 800cade:	701a      	strb	r2, [r3, #0]
 800cae0:	2200      	movs	r2, #0
 800cae2:	705a      	strb	r2, [r3, #1]
 800cae4:	2200      	movs	r2, #0
 800cae6:	709a      	strb	r2, [r3, #2]
 800cae8:	2200      	movs	r2, #0
 800caea:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	2200      	movs	r2, #0
 800caf0:	f042 0203 	orr.w	r2, r2, #3
 800caf4:	711a      	strb	r2, [r3, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	715a      	strb	r2, [r3, #5]
 800cafa:	2200      	movs	r2, #0
 800cafc:	719a      	strb	r2, [r3, #6]
 800cafe:	2200      	movs	r2, #0
 800cb00:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 800cb0e:	683a      	ldr	r2, [r7, #0]
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 800cb14:	6a3a      	ldr	r2, [r7, #32]
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800cb1a:	f005 fb93 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cb1e:	f005 fb79 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cb22:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	b2db      	uxtb	r3, r3
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3718      	adds	r7, #24
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b084      	sub	sp, #16
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800cb3e:	f005 fbbf 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cb42:	f005 fb5b 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cb46:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f062 024b 	orn	r2, r2, #75	; 0x4b
 800cb50:	701a      	strb	r2, [r3, #0]
 800cb52:	2200      	movs	r2, #0
 800cb54:	705a      	strb	r2, [r3, #1]
 800cb56:	2200      	movs	r2, #0
 800cb58:	709a      	strb	r2, [r3, #2]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f042 0201 	orr.w	r2, r2, #1
 800cb66:	711a      	strb	r2, [r3, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	715a      	strb	r2, [r3, #5]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	719a      	strb	r2, [r3, #6]
 800cb70:	2200      	movs	r2, #0
 800cb72:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 800cb74:	887a      	ldrh	r2, [r7, #2]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cb7a:	f005 fb63 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cb7e:	f005 fb49 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cb82:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	689b      	ldr	r3, [r3, #8]
 800cb88:	b2db      	uxtb	r3, r3
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3710      	adds	r7, #16
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b084      	sub	sp, #16
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
 800cb9a:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800cb9c:	f005 fb90 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cba0:	f005 fb2c 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cba4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f062 0249 	orn	r2, r2, #73	; 0x49
 800cbae:	701a      	strb	r2, [r3, #0]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	705a      	strb	r2, [r3, #1]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	709a      	strb	r2, [r3, #2]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f042 0201 	orr.w	r2, r2, #1
 800cbc4:	711a      	strb	r2, [r3, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	715a      	strb	r2, [r3, #5]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	719a      	strb	r2, [r3, #6]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 800cbd2:	683a      	ldr	r2, [r7, #0]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cbd8:	f005 fb34 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cbdc:	f005 fb1a 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cbe0:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	689b      	ldr	r3, [r3, #8]
 800cbe6:	b2db      	uxtb	r3, r3
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3710      	adds	r7, #16
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b086      	sub	sp, #24
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800cbfc:	f005 fb60 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cc00:	f005 fafc 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cc04:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f062 0257 	orn	r2, r2, #87	; 0x57
 800cc0e:	701a      	strb	r2, [r3, #0]
 800cc10:	2200      	movs	r2, #0
 800cc12:	705a      	strb	r2, [r3, #1]
 800cc14:	2200      	movs	r2, #0
 800cc16:	709a      	strb	r2, [r3, #2]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f042 0202 	orr.w	r2, r2, #2
 800cc24:	711a      	strb	r2, [r3, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	715a      	strb	r2, [r3, #5]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	719a      	strb	r2, [r3, #6]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800cc32:	68ba      	ldr	r2, [r7, #8]
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800cc3e:	f005 fb01 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cc42:	f005 fae7 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cc46:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	b2db      	uxtb	r3, r3
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3718      	adds	r7, #24
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b082      	sub	sp, #8
 800cc5a:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 800cc5c:	f005 fb30 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cc60:	f005 facc 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cc64:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	f062 026b 	orn	r2, r2, #107	; 0x6b
 800cc6e:	701a      	strb	r2, [r3, #0]
 800cc70:	2200      	movs	r2, #0
 800cc72:	705a      	strb	r2, [r3, #1]
 800cc74:	2200      	movs	r2, #0
 800cc76:	709a      	strb	r2, [r3, #2]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	711a      	strb	r2, [r3, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	715a      	strb	r2, [r3, #5]
 800cc86:	2200      	movs	r2, #0
 800cc88:	719a      	strb	r2, [r3, #6]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800cc8e:	f005 fad9 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cc92:	f005 fabf 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cc96:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	689b      	ldr	r3, [r3, #8]
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ccac:	f005 fb08 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ccb0:	f005 faa4 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800ccb4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f062 0269 	orn	r2, r2, #105	; 0x69
 800ccbe:	701a      	strb	r2, [r3, #0]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	705a      	strb	r2, [r3, #1]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	709a      	strb	r2, [r3, #2]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	711a      	strb	r2, [r3, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	715a      	strb	r2, [r3, #5]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	719a      	strb	r2, [r3, #6]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800ccde:	f005 fab1 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cce2:	f005 fa97 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cce6:	60f8      	str	r0, [r7, #12]
}
 800cce8:	bf00      	nop
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b086      	sub	sp, #24
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800ccfc:	f005 fae0 	bl	80122c0 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 800cd00:	4a15      	ldr	r2, [pc, #84]	; (800cd58 <otSetStateChangedCallback+0x68>)
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cd06:	f005 fa79 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cd0a:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f062 0268 	orn	r2, r2, #104	; 0x68
 800cd14:	701a      	strb	r2, [r3, #0]
 800cd16:	2200      	movs	r2, #0
 800cd18:	705a      	strb	r2, [r3, #1]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	709a      	strb	r2, [r3, #2]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	2200      	movs	r2, #0
 800cd26:	f042 0201 	orr.w	r2, r2, #1
 800cd2a:	711a      	strb	r2, [r3, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	715a      	strb	r2, [r3, #5]
 800cd30:	2200      	movs	r2, #0
 800cd32:	719a      	strb	r2, [r3, #6]
 800cd34:	2200      	movs	r2, #0
 800cd36:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cd3e:	f005 fa81 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cd42:	f005 fa67 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cd46:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	b2db      	uxtb	r3, r3
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3718      	adds	r7, #24
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	20000354 	.word	0x20000354

0800cd5c <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800cd64:	f005 faac 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cd68:	f005 fa48 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cd6c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2200      	movs	r2, #0
 800cd72:	f062 0264 	orn	r2, r2, #100	; 0x64
 800cd76:	701a      	strb	r2, [r3, #0]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	705a      	strb	r2, [r3, #1]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	709a      	strb	r2, [r3, #2]
 800cd80:	2200      	movs	r2, #0
 800cd82:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	711a      	strb	r2, [r3, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	715a      	strb	r2, [r3, #5]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	719a      	strb	r2, [r3, #6]
 800cd92:	2200      	movs	r2, #0
 800cd94:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800cd96:	f005 fa55 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cd9a:	f005 fa3b 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cd9e:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	b2db      	uxtb	r3, r3
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b084      	sub	sp, #16
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800cdba:	f005 fa81 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cdbe:	f005 fa1d 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cdc2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800cdcc:	701a      	strb	r2, [r3, #0]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	705a      	strb	r2, [r3, #1]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	709a      	strb	r2, [r3, #2]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	2200      	movs	r2, #0
 800cdde:	f042 0201 	orr.w	r2, r2, #1
 800cde2:	711a      	strb	r2, [r3, #4]
 800cde4:	2200      	movs	r2, #0
 800cde6:	715a      	strb	r2, [r3, #5]
 800cde8:	2200      	movs	r2, #0
 800cdea:	719a      	strb	r2, [r3, #6]
 800cdec:	2200      	movs	r2, #0
 800cdee:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800cdf0:	78fa      	ldrb	r2, [r7, #3]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800cdf6:	f005 fa25 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cdfa:	f005 fa0b 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cdfe:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	b2db      	uxtb	r3, r3
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 800ce0e:	b580      	push	{r7, lr}
 800ce10:	b084      	sub	sp, #16
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800ce16:	f005 fa53 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ce1a:	f005 f9ef 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800ce1e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800ce28:	701a      	strb	r2, [r3, #0]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	705a      	strb	r2, [r3, #1]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	709a      	strb	r2, [r3, #2]
 800ce32:	2200      	movs	r2, #0
 800ce34:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	711a      	strb	r2, [r3, #4]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	715a      	strb	r2, [r3, #5]
 800ce40:	2200      	movs	r2, #0
 800ce42:	719a      	strb	r2, [r3, #6]
 800ce44:	2200      	movs	r2, #0
 800ce46:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800ce48:	f005 f9fc 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ce4c:	f005 f9e2 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ce50:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	bf14      	ite	ne
 800ce5a:	2301      	movne	r3, #1
 800ce5c:	2300      	moveq	r3, #0
 800ce5e:	b2db      	uxtb	r3, r3
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3710      	adds	r7, #16
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800ce70:	f005 fa26 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ce74:	f005 f9c2 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800ce78:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 800ce82:	701a      	strb	r2, [r3, #0]
 800ce84:	2200      	movs	r2, #0
 800ce86:	705a      	strb	r2, [r3, #1]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	709a      	strb	r2, [r3, #2]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2200      	movs	r2, #0
 800ce94:	711a      	strb	r2, [r3, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	715a      	strb	r2, [r3, #5]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	719a      	strb	r2, [r3, #6]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800cea2:	f005 f9cf 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cea6:	f005 f9b5 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ceaa:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	689b      	ldr	r3, [r3, #8]
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3710      	adds	r7, #16
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <otIp6GetMulticastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otNetifMulticastAddress *otIp6GetMulticastAddresses(otInstance *aInstance)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800cec0:	f005 f9fe 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cec4:	f005 f99a 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cec8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_MULTICAST_ADDRESSES;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2200      	movs	r2, #0
 800cece:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
 800ced2:	701a      	strb	r2, [r3, #0]
 800ced4:	2200      	movs	r2, #0
 800ced6:	705a      	strb	r2, [r3, #1]
 800ced8:	2200      	movs	r2, #0
 800ceda:	709a      	strb	r2, [r3, #2]
 800cedc:	2200      	movs	r2, #0
 800cede:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2200      	movs	r2, #0
 800cee4:	711a      	strb	r2, [r3, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	715a      	strb	r2, [r3, #5]
 800ceea:	2200      	movs	r2, #0
 800ceec:	719a      	strb	r2, [r3, #6]
 800ceee:	2200      	movs	r2, #0
 800cef0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800cef2:	f005 f9a7 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cef6:	f005 f98d 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cefa:	60f8      	str	r0, [r7, #12]
  return (otNetifMulticastAddress *)p_ot_req->Data[0];
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	689b      	ldr	r3, [r3, #8]
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3710      	adds	r7, #16
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800cf12:	f005 f9d5 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cf16:	f005 f971 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cf1a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800cf24:	701a      	strb	r2, [r3, #0]
 800cf26:	2200      	movs	r2, #0
 800cf28:	705a      	strb	r2, [r3, #1]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	709a      	strb	r2, [r3, #2]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2200      	movs	r2, #0
 800cf36:	f042 0202 	orr.w	r2, r2, #2
 800cf3a:	711a      	strb	r2, [r3, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	715a      	strb	r2, [r3, #5]
 800cf40:	2200      	movs	r2, #0
 800cf42:	719a      	strb	r2, [r3, #6]
 800cf44:	2200      	movs	r2, #0
 800cf46:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 800cf4e:	683a      	ldr	r2, [r7, #0]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800cf54:	f005 f976 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cf58:	f005 f95c 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cf5c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	689b      	ldr	r3, [r3, #8]
 800cf62:	b2db      	uxtb	r3, r3
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	460b      	mov	r3, r1
 800cf76:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800cf78:	f005 f9a2 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cf7c:	f005 f93e 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cf80:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2200      	movs	r2, #0
 800cf86:	f042 0208 	orr.w	r2, r2, #8
 800cf8a:	701a      	strb	r2, [r3, #0]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	705a      	strb	r2, [r3, #1]
 800cf90:	2200      	movs	r2, #0
 800cf92:	709a      	strb	r2, [r3, #2]
 800cf94:	2200      	movs	r2, #0
 800cf96:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f042 0201 	orr.w	r2, r2, #1
 800cfa0:	711a      	strb	r2, [r3, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	715a      	strb	r2, [r3, #5]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	719a      	strb	r2, [r3, #6]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800cfae:	78fa      	ldrb	r2, [r7, #3]
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800cfb4:	f005 f946 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cfb8:	f005 f92c 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cfbc:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	689b      	ldr	r3, [r3, #8]
 800cfc2:	b2db      	uxtb	r3, r3
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3710      	adds	r7, #16
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800cfd8:	f005 f972 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cfdc:	f005 f90e 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cfe0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	f042 020f 	orr.w	r2, r2, #15
 800cfea:	701a      	strb	r2, [r3, #0]
 800cfec:	2200      	movs	r2, #0
 800cfee:	705a      	strb	r2, [r3, #1]
 800cff0:	2200      	movs	r2, #0
 800cff2:	709a      	strb	r2, [r3, #2]
 800cff4:	2200      	movs	r2, #0
 800cff6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2200      	movs	r2, #0
 800cffc:	f042 0201 	orr.w	r2, r2, #1
 800d000:	711a      	strb	r2, [r3, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	715a      	strb	r2, [r3, #5]
 800d006:	2200      	movs	r2, #0
 800d008:	719a      	strb	r2, [r3, #6]
 800d00a:	2200      	movs	r2, #0
 800d00c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800d00e:	887a      	ldrh	r2, [r7, #2]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d014:	f005 f916 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d018:	f005 f8fc 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d01c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	689b      	ldr	r3, [r3, #8]
 800d022:	b2db      	uxtb	r3, r3
}
 800d024:	4618      	mov	r0, r3
 800d026:	3710      	adds	r7, #16
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800d034:	f005 f944 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d038:	f005 f8e0 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d03c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2200      	movs	r2, #0
 800d042:	f062 0246 	orn	r2, r2, #70	; 0x46
 800d046:	701a      	strb	r2, [r3, #0]
 800d048:	2200      	movs	r2, #0
 800d04a:	705a      	strb	r2, [r3, #1]
 800d04c:	2200      	movs	r2, #0
 800d04e:	709a      	strb	r2, [r3, #2]
 800d050:	2200      	movs	r2, #0
 800d052:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2200      	movs	r2, #0
 800d058:	f042 0201 	orr.w	r2, r2, #1
 800d05c:	711a      	strb	r2, [r3, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	715a      	strb	r2, [r3, #5]
 800d062:	2200      	movs	r2, #0
 800d064:	719a      	strb	r2, [r3, #6]
 800d066:	2200      	movs	r2, #0
 800d068:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800d070:	f005 f8e8 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d074:	f005 f8ce 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d078:	60f8      	str	r0, [r7, #12]
}
 800d07a:	bf00      	nop
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b084      	sub	sp, #16
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800d08a:	f005 f919 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d08e:	f005 f8b5 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d092:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2200      	movs	r2, #0
 800d098:	f062 0243 	orn	r2, r2, #67	; 0x43
 800d09c:	701a      	strb	r2, [r3, #0]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	705a      	strb	r2, [r3, #1]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	709a      	strb	r2, [r3, #2]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f042 0201 	orr.w	r2, r2, #1
 800d0b2:	711a      	strb	r2, [r3, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	715a      	strb	r2, [r3, #5]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	719a      	strb	r2, [r3, #6]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800d0c6:	f005 f8bd 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d0ca:	f005 f8a3 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d0ce:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	b29b      	uxth	r3, r3
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b086      	sub	sp, #24
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	60f8      	str	r0, [r7, #12]
 800d0e6:	60b9      	str	r1, [r7, #8]
 800d0e8:	4613      	mov	r3, r2
 800d0ea:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 800d0ec:	f005 f8e8 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d0f0:	f005 f884 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d0f4:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f062 023e 	orn	r2, r2, #62	; 0x3e
 800d0fe:	701a      	strb	r2, [r3, #0]
 800d100:	2200      	movs	r2, #0
 800d102:	705a      	strb	r2, [r3, #1]
 800d104:	2200      	movs	r2, #0
 800d106:	709a      	strb	r2, [r3, #2]
 800d108:	2200      	movs	r2, #0
 800d10a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	2200      	movs	r2, #0
 800d110:	f042 0203 	orr.w	r2, r2, #3
 800d114:	711a      	strb	r2, [r3, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	715a      	strb	r2, [r3, #5]
 800d11a:	2200      	movs	r2, #0
 800d11c:	719a      	strb	r2, [r3, #6]
 800d11e:	2200      	movs	r2, #0
 800d120:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d122:	68fa      	ldr	r2, [r7, #12]
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 800d128:	68ba      	ldr	r2, [r7, #8]
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 800d12e:	88fa      	ldrh	r2, [r7, #6]
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800d134:	f005 f886 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d138:	f005 f86c 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d13c:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	689b      	ldr	r3, [r3, #8]
 800d142:	b2db      	uxtb	r3, r3
}
 800d144:	4618      	mov	r0, r3
 800d146:	3718      	adds	r7, #24
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	607a      	str	r2, [r7, #4]
 800d156:	461a      	mov	r2, r3
 800d158:	460b      	mov	r3, r1
 800d15a:	817b      	strh	r3, [r7, #10]
 800d15c:	4613      	mov	r3, r2
 800d15e:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 800d160:	f005 f8ae 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d164:	f005 f84a 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d168:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	2200      	movs	r2, #0
 800d16e:	f062 023d 	orn	r2, r2, #61	; 0x3d
 800d172:	701a      	strb	r2, [r3, #0]
 800d174:	2200      	movs	r2, #0
 800d176:	705a      	strb	r2, [r3, #1]
 800d178:	2200      	movs	r2, #0
 800d17a:	709a      	strb	r2, [r3, #2]
 800d17c:	2200      	movs	r2, #0
 800d17e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	2200      	movs	r2, #0
 800d184:	f042 0204 	orr.w	r2, r2, #4
 800d188:	711a      	strb	r2, [r3, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	715a      	strb	r2, [r3, #5]
 800d18e:	2200      	movs	r2, #0
 800d190:	719a      	strb	r2, [r3, #6]
 800d192:	2200      	movs	r2, #0
 800d194:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 800d19c:	897a      	ldrh	r2, [r7, #10]
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 800d1a2:	687a      	ldr	r2, [r7, #4]
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 800d1a8:	893a      	ldrh	r2, [r7, #8]
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800d1ae:	f005 f849 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d1b2:	f005 f82f 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d1b6:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	689b      	ldr	r3, [r3, #8]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3718      	adds	r7, #24
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800d1c4:	b5b0      	push	{r4, r5, r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800d1ce:	f005 f82d 	bl	801222c <THREAD_Get_NotificationPayloadBuffer>
 800d1d2:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	3b01      	subs	r3, #1
 800d1da:	2b17      	cmp	r3, #23
 800d1dc:	f200 81c3 	bhi.w	800d566 <OpenThread_CallBack_Processing+0x3a2>
 800d1e0:	a201      	add	r2, pc, #4	; (adr r2, 800d1e8 <OpenThread_CallBack_Processing+0x24>)
 800d1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e6:	bf00      	nop
 800d1e8:	0800d249 	.word	0x0800d249
 800d1ec:	0800d265 	.word	0x0800d265
 800d1f0:	0800d2c9 	.word	0x0800d2c9
 800d1f4:	0800d311 	.word	0x0800d311
 800d1f8:	0800d31d 	.word	0x0800d31d
 800d1fc:	0800d33b 	.word	0x0800d33b
 800d200:	0800d359 	.word	0x0800d359
 800d204:	0800d377 	.word	0x0800d377
 800d208:	0800d395 	.word	0x0800d395
 800d20c:	0800d3b3 	.word	0x0800d3b3
 800d210:	0800d3d5 	.word	0x0800d3d5
 800d214:	0800d3f3 	.word	0x0800d3f3
 800d218:	0800d567 	.word	0x0800d567
 800d21c:	0800d419 	.word	0x0800d419
 800d220:	0800d44d 	.word	0x0800d44d
 800d224:	0800d475 	.word	0x0800d475
 800d228:	0800d493 	.word	0x0800d493
 800d22c:	0800d501 	.word	0x0800d501
 800d230:	0800d529 	.word	0x0800d529
 800d234:	0800d567 	.word	0x0800d567
 800d238:	0800d547 	.word	0x0800d547
 800d23c:	0800d567 	.word	0x0800d567
 800d240:	0800d567 	.word	0x0800d567
 800d244:	0800d2a1 	.word	0x0800d2a1
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 800d248:	4b9b      	ldr	r3, [pc, #620]	; (800d4b8 <OpenThread_CallBack_Processing+0x2f4>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	f000 818d 	beq.w	800d56c <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800d252:	4b99      	ldr	r3, [pc, #612]	; (800d4b8 <OpenThread_CallBack_Processing+0x2f4>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 800d25a:	683a      	ldr	r2, [r7, #0]
 800d25c:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800d25e:	4611      	mov	r1, r2
 800d260:	4798      	blx	r3
        }
        break;
 800d262:	e183      	b.n	800d56c <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	461a      	mov	r2, r3
 800d26a:	4b94      	ldr	r3, [pc, #592]	; (800d4bc <OpenThread_CallBack_Processing+0x2f8>)
 800d26c:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 800d26e:	4b93      	ldr	r3, [pc, #588]	; (800d4bc <OpenThread_CallBack_Processing+0x2f8>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	4a92      	ldr	r2, [pc, #584]	; (800d4c0 <OpenThread_CallBack_Processing+0x2fc>)
 800d276:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 800d278:	4b91      	ldr	r3, [pc, #580]	; (800d4c0 <OpenThread_CallBack_Processing+0x2fc>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f000 8177 	beq.w	800d570 <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d282:	4b8f      	ldr	r3, [pc, #572]	; (800d4c0 <OpenThread_CallBack_Processing+0x2fc>)
 800d284:	681c      	ldr	r4, [r3, #0]
 800d286:	4b8d      	ldr	r3, [pc, #564]	; (800d4bc <OpenThread_CallBack_Processing+0x2f8>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d290:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d296:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d29c:	47a0      	blx	r4
        }
        break;
 800d29e:	e167      	b.n	800d570 <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 800d2a0:	4b88      	ldr	r3, [pc, #544]	; (800d4c4 <OpenThread_CallBack_Processing+0x300>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f000 8165 	beq.w	800d574 <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d2aa:	4b86      	ldr	r3, [pc, #536]	; (800d4c4 <OpenThread_CallBack_Processing+0x300>)
 800d2ac:	681c      	ldr	r4, [r3, #0]
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d2b8:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d2be:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d2c4:	47a0      	blx	r4
        }
        break;
 800d2c6:	e155      	b.n	800d574 <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	4b7e      	ldr	r3, [pc, #504]	; (800d4c8 <OpenThread_CallBack_Processing+0x304>)
 800d2d0:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800d2d2:	4b7d      	ldr	r3, [pc, #500]	; (800d4c8 <OpenThread_CallBack_Processing+0x304>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	4a7c      	ldr	r2, [pc, #496]	; (800d4cc <OpenThread_CallBack_Processing+0x308>)
 800d2da:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 800d2dc:	4b7b      	ldr	r3, [pc, #492]	; (800d4cc <OpenThread_CallBack_Processing+0x308>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f000 8149 	beq.w	800d578 <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d2e6:	4b79      	ldr	r3, [pc, #484]	; (800d4cc <OpenThread_CallBack_Processing+0x308>)
 800d2e8:	681c      	ldr	r4, [r3, #0]
 800d2ea:	4b77      	ldr	r3, [pc, #476]	; (800d4c8 <OpenThread_CallBack_Processing+0x304>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d2f4:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d2fa:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d300:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d306:	b2db      	uxtb	r3, r3
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	462b      	mov	r3, r5
 800d30c:	47a0      	blx	r4
        }
        break;
 800d30e:	e133      	b.n	800d578 <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 800d310:	2001      	movs	r0, #1
 800d312:	f7fe fd00 	bl	800bd16 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800d316:	f7f7 f978 	bl	800460a <HAL_NVIC_SystemReset>
        break;
 800d31a:	e14c      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 800d31c:	4b6c      	ldr	r3, [pc, #432]	; (800d4d0 <OpenThread_CallBack_Processing+0x30c>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	f000 812b 	beq.w	800d57c <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800d326:	4b6a      	ldr	r3, [pc, #424]	; (800d4d0 <OpenThread_CallBack_Processing+0x30c>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	683a      	ldr	r2, [r7, #0]
 800d32c:	6892      	ldr	r2, [r2, #8]
 800d32e:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d330:	683a      	ldr	r2, [r7, #0]
 800d332:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800d334:	4611      	mov	r1, r2
 800d336:	4798      	blx	r3
        }
        break;
 800d338:	e120      	b.n	800d57c <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 800d33a:	4b66      	ldr	r3, [pc, #408]	; (800d4d4 <OpenThread_CallBack_Processing+0x310>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	f000 811e 	beq.w	800d580 <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800d344:	4b63      	ldr	r3, [pc, #396]	; (800d4d4 <OpenThread_CallBack_Processing+0x310>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	683a      	ldr	r2, [r7, #0]
 800d34a:	6892      	ldr	r2, [r2, #8]
 800d34c:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 800d34e:	683a      	ldr	r2, [r7, #0]
 800d350:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800d352:	2000      	movs	r0, #0
 800d354:	4798      	blx	r3
        }
        break;
 800d356:	e113      	b.n	800d580 <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 800d358:	4b5f      	ldr	r3, [pc, #380]	; (800d4d8 <OpenThread_CallBack_Processing+0x314>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f000 8111 	beq.w	800d584 <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800d362:	4b5d      	ldr	r3, [pc, #372]	; (800d4d8 <OpenThread_CallBack_Processing+0x314>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	683a      	ldr	r2, [r7, #0]
 800d368:	6892      	ldr	r2, [r2, #8]
 800d36a:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d36c:	683a      	ldr	r2, [r7, #0]
 800d36e:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800d370:	4611      	mov	r1, r2
 800d372:	4798      	blx	r3
        }
        break;
 800d374:	e106      	b.n	800d584 <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 800d376:	4b59      	ldr	r3, [pc, #356]	; (800d4dc <OpenThread_CallBack_Processing+0x318>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f000 8104 	beq.w	800d588 <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800d380:	4b56      	ldr	r3, [pc, #344]	; (800d4dc <OpenThread_CallBack_Processing+0x318>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	683a      	ldr	r2, [r7, #0]
 800d386:	6892      	ldr	r2, [r2, #8]
 800d388:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d38a:	683a      	ldr	r2, [r7, #0]
 800d38c:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800d38e:	4611      	mov	r1, r2
 800d390:	4798      	blx	r3
        }
        break;
 800d392:	e0f9      	b.n	800d588 <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 800d394:	4b52      	ldr	r3, [pc, #328]	; (800d4e0 <OpenThread_CallBack_Processing+0x31c>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	f000 80f7 	beq.w	800d58c <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800d39e:	4b50      	ldr	r3, [pc, #320]	; (800d4e0 <OpenThread_CallBack_Processing+0x31c>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	683a      	ldr	r2, [r7, #0]
 800d3a4:	6892      	ldr	r2, [r2, #8]
 800d3a6:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d3a8:	683a      	ldr	r2, [r7, #0]
 800d3aa:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800d3ac:	4611      	mov	r1, r2
 800d3ae:	4798      	blx	r3
        }
        break;
 800d3b0:	e0ec      	b.n	800d58c <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 800d3b2:	4b4c      	ldr	r3, [pc, #304]	; (800d4e4 <OpenThread_CallBack_Processing+0x320>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	f000 80ea 	beq.w	800d590 <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800d3bc:	4b49      	ldr	r3, [pc, #292]	; (800d4e4 <OpenThread_CallBack_Processing+0x320>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	683a      	ldr	r2, [r7, #0]
 800d3c2:	6892      	ldr	r2, [r2, #8]
 800d3c4:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 800d3c6:	683a      	ldr	r2, [r7, #0]
 800d3c8:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800d3ca:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 800d3cc:	683a      	ldr	r2, [r7, #0]
 800d3ce:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800d3d0:	4798      	blx	r3
        }
        break;
 800d3d2:	e0dd      	b.n	800d590 <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 800d3d4:	4b44      	ldr	r3, [pc, #272]	; (800d4e8 <OpenThread_CallBack_Processing+0x324>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	f000 80db 	beq.w	800d594 <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800d3de:	4b42      	ldr	r3, [pc, #264]	; (800d4e8 <OpenThread_CallBack_Processing+0x324>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	683a      	ldr	r2, [r7, #0]
 800d3e4:	6892      	ldr	r2, [r2, #8]
 800d3e6:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 800d3e8:	683a      	ldr	r2, [r7, #0]
 800d3ea:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800d3ec:	4611      	mov	r1, r2
 800d3ee:	4798      	blx	r3
        }
        break;
 800d3f0:	e0d0      	b.n	800d594 <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 800d3f2:	4b3e      	ldr	r3, [pc, #248]	; (800d4ec <OpenThread_CallBack_Processing+0x328>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	f000 80ce 	beq.w	800d598 <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d3fc:	4b3b      	ldr	r3, [pc, #236]	; (800d4ec <OpenThread_CallBack_Processing+0x328>)
 800d3fe:	681c      	ldr	r4, [r3, #0]
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d408:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d40e:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d414:	47a0      	blx	r4
        }
        break;
 800d416:	e0bf      	b.n	800d598 <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 800d418:	4b35      	ldr	r3, [pc, #212]	; (800d4f0 <OpenThread_CallBack_Processing+0x32c>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f000 80bd 	beq.w	800d59c <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d422:	4b33      	ldr	r3, [pc, #204]	; (800d4f0 <OpenThread_CallBack_Processing+0x32c>)
 800d424:	681c      	ldr	r4, [r3, #0]
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d430:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d436:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d440:	b2db      	uxtb	r3, r3
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	4613      	mov	r3, r2
 800d446:	462a      	mov	r2, r5
 800d448:	47a0      	blx	r4
        }
        break;
 800d44a:	e0a7      	b.n	800d59c <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 800d44c:	4b29      	ldr	r3, [pc, #164]	; (800d4f4 <OpenThread_CallBack_Processing+0x330>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	f000 80a5 	beq.w	800d5a0 <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d456:	4b27      	ldr	r3, [pc, #156]	; (800d4f4 <OpenThread_CallBack_Processing+0x330>)
 800d458:	681c      	ldr	r4, [r3, #0]
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	689b      	ldr	r3, [r3, #8]
 800d45e:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d464:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d46a:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d470:	47a0      	blx	r4
        }
        break;
 800d472:	e095      	b.n	800d5a0 <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 800d474:	4b20      	ldr	r3, [pc, #128]	; (800d4f8 <OpenThread_CallBack_Processing+0x334>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f000 8093 	beq.w	800d5a4 <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 800d47e:	4b1e      	ldr	r3, [pc, #120]	; (800d4f8 <OpenThread_CallBack_Processing+0x334>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	683a      	ldr	r2, [r7, #0]
 800d484:	6892      	ldr	r2, [r2, #8]
 800d486:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 800d488:	683a      	ldr	r2, [r7, #0]
 800d48a:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 800d48c:	4611      	mov	r1, r2
 800d48e:	4798      	blx	r3
        }
        break;
 800d490:	e088      	b.n	800d5a4 <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 800d492:	4b1a      	ldr	r3, [pc, #104]	; (800d4fc <OpenThread_CallBack_Processing+0x338>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	f000 8086 	beq.w	800d5a8 <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d49c:	4b17      	ldr	r3, [pc, #92]	; (800d4fc <OpenThread_CallBack_Processing+0x338>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	683a      	ldr	r2, [r7, #0]
 800d4a2:	6892      	ldr	r2, [r2, #8]
 800d4a4:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 800d4a6:	683a      	ldr	r2, [r7, #0]
 800d4a8:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d4aa:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 800d4ac:	683a      	ldr	r2, [r7, #0]
 800d4ae:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d4b0:	b2d2      	uxtb	r2, r2
 800d4b2:	4798      	blx	r3
        }
        break;
 800d4b4:	e078      	b.n	800d5a8 <OpenThread_CallBack_Processing+0x3e4>
 800d4b6:	bf00      	nop
 800d4b8:	20000354 	.word	0x20000354
 800d4bc:	20004fc0 	.word	0x20004fc0
 800d4c0:	20000394 	.word	0x20000394
 800d4c4:	20000398 	.word	0x20000398
 800d4c8:	20004fbc 	.word	0x20004fbc
 800d4cc:	2000039c 	.word	0x2000039c
 800d4d0:	2000035c 	.word	0x2000035c
 800d4d4:	20000358 	.word	0x20000358
 800d4d8:	20000360 	.word	0x20000360
 800d4dc:	20000364 	.word	0x20000364
 800d4e0:	20000368 	.word	0x20000368
 800d4e4:	2000036c 	.word	0x2000036c
 800d4e8:	20000370 	.word	0x20000370
 800d4ec:	20000374 	.word	0x20000374
 800d4f0:	20000378 	.word	0x20000378
 800d4f4:	2000037c 	.word	0x2000037c
 800d4f8:	20000380 	.word	0x20000380
 800d4fc:	20000384 	.word	0x20000384
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 800d500:	4b30      	ldr	r3, [pc, #192]	; (800d5c4 <OpenThread_CallBack_Processing+0x400>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d051      	beq.n	800d5ac <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d508:	4b2e      	ldr	r3, [pc, #184]	; (800d5c4 <OpenThread_CallBack_Processing+0x400>)
 800d50a:	681c      	ldr	r4, [r3, #0]
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	689b      	ldr	r3, [r3, #8]
 800d510:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d516:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d51c:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d522:	b2db      	uxtb	r3, r3
 800d524:	47a0      	blx	r4
        }
        break;
 800d526:	e041      	b.n	800d5ac <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 800d528:	4b27      	ldr	r3, [pc, #156]	; (800d5c8 <OpenThread_CallBack_Processing+0x404>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d03f      	beq.n	800d5b0 <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800d530:	4b25      	ldr	r3, [pc, #148]	; (800d5c8 <OpenThread_CallBack_Processing+0x404>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	6892      	ldr	r2, [r2, #8]
 800d538:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 800d53a:	683a      	ldr	r2, [r7, #0]
 800d53c:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800d53e:	b252      	sxtb	r2, r2
 800d540:	4611      	mov	r1, r2
 800d542:	4798      	blx	r3
        }
        break;
 800d544:	e034      	b.n	800d5b0 <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 800d546:	4b21      	ldr	r3, [pc, #132]	; (800d5cc <OpenThread_CallBack_Processing+0x408>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d032      	beq.n	800d5b4 <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 800d54e:	4b1f      	ldr	r3, [pc, #124]	; (800d5cc <OpenThread_CallBack_Processing+0x408>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	683a      	ldr	r2, [r7, #0]
 800d554:	6892      	ldr	r2, [r2, #8]
 800d556:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 800d558:	683a      	ldr	r2, [r7, #0]
 800d55a:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800d55c:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 800d55e:	683a      	ldr	r2, [r7, #0]
 800d560:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800d562:	4798      	blx	r3
        }
        break;
 800d564:	e026      	b.n	800d5b4 <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 800d566:	2301      	movs	r3, #1
 800d568:	71fb      	strb	r3, [r7, #7]
        break;
 800d56a:	e024      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d56c:	bf00      	nop
 800d56e:	e022      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d570:	bf00      	nop
 800d572:	e020      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d574:	bf00      	nop
 800d576:	e01e      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d578:	bf00      	nop
 800d57a:	e01c      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d57c:	bf00      	nop
 800d57e:	e01a      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d580:	bf00      	nop
 800d582:	e018      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d584:	bf00      	nop
 800d586:	e016      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d588:	bf00      	nop
 800d58a:	e014      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d58c:	bf00      	nop
 800d58e:	e012      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d590:	bf00      	nop
 800d592:	e010      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d594:	bf00      	nop
 800d596:	e00e      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d598:	bf00      	nop
 800d59a:	e00c      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d59c:	bf00      	nop
 800d59e:	e00a      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5a0:	bf00      	nop
 800d5a2:	e008      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5a4:	bf00      	nop
 800d5a6:	e006      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5a8:	bf00      	nop
 800d5aa:	e004      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5ac:	bf00      	nop
 800d5ae:	e002      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5b0:	bf00      	nop
 800d5b2:	e000      	b.n	800d5b6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5b4:	bf00      	nop
    }

    TL_THREAD_SendAck();
 800d5b6:	f7fe fed9 	bl	800c36c <TL_THREAD_SendAck>
    return status;
 800d5ba:	79fb      	ldrb	r3, [r7, #7]

}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bdb0      	pop	{r4, r5, r7, pc}
 800d5c4:	20000388 	.word	0x20000388
 800d5c8:	2000038c 	.word	0x2000038c
 800d5cc:	20000390 	.word	0x20000390

0800d5d0 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800d5dc:	f004 fe70 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d5e0:	f004 fe0c 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d5e4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 800d5ee:	701a      	strb	r2, [r3, #0]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f042 0201 	orr.w	r2, r2, #1
 800d5f6:	705a      	strb	r2, [r3, #1]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	709a      	strb	r2, [r3, #2]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2200      	movs	r2, #0
 800d604:	f042 0201 	orr.w	r2, r2, #1
 800d608:	711a      	strb	r2, [r3, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	715a      	strb	r2, [r3, #5]
 800d60e:	2200      	movs	r2, #0
 800d610:	719a      	strb	r2, [r3, #6]
 800d612:	2200      	movs	r2, #0
 800d614:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 800d616:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800d61e:	f004 fe11 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d622:	f004 fdf7 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d626:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	b2db      	uxtb	r3, r3
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3710      	adds	r7, #16
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}

0800d636 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800d636:	b580      	push	{r7, lr}
 800d638:	b084      	sub	sp, #16
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
 800d63e:	460b      	mov	r3, r1
 800d640:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800d642:	f004 fe3d 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d646:	f004 fdd9 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d64a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2200      	movs	r2, #0
 800d650:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 800d654:	701a      	strb	r2, [r3, #0]
 800d656:	2200      	movs	r2, #0
 800d658:	705a      	strb	r2, [r3, #1]
 800d65a:	2200      	movs	r2, #0
 800d65c:	709a      	strb	r2, [r3, #2]
 800d65e:	2200      	movs	r2, #0
 800d660:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	2200      	movs	r2, #0
 800d666:	f042 0201 	orr.w	r2, r2, #1
 800d66a:	711a      	strb	r2, [r3, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	715a      	strb	r2, [r3, #5]
 800d670:	2200      	movs	r2, #0
 800d672:	719a      	strb	r2, [r3, #6]
 800d674:	2200      	movs	r2, #0
 800d676:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800d678:	78fa      	ldrb	r2, [r7, #3]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d67e:	f004 fde1 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d682:	f004 fdc7 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d686:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	b2db      	uxtb	r3, r3
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <otThreadSetChildTimeout>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI void OTCALL otThreadSetChildTimeout(otInstance *aInstance, uint32_t aTimeout)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b084      	sub	sp, #16
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
 800d69e:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800d6a0:	f004 fe0e 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d6a4:	f004 fdaa 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d6a8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_CHILD_TIMEOUT;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 800d6b2:	701a      	strb	r2, [r3, #0]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	705a      	strb	r2, [r3, #1]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	709a      	strb	r2, [r3, #2]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f042 0201 	orr.w	r2, r2, #1
 800d6c8:	711a      	strb	r2, [r3, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	715a      	strb	r2, [r3, #5]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	719a      	strb	r2, [r3, #6]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aTimeout;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	683a      	ldr	r2, [r7, #0]
 800d6da:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d6dc:	f004 fdb2 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d6e0:	f004 fd98 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d6e4:	60f8      	str	r0, [r7, #12]
}
 800d6e6:	bf00      	nop
 800d6e8:	3710      	adds	r7, #16
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <otThreadGetMeshLocalEid>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b084      	sub	sp, #16
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d6f6:	f004 fde3 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d6fa:	f004 fd7f 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d6fe:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2200      	movs	r2, #0
 800d704:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 800d708:	701a      	strb	r2, [r3, #0]
 800d70a:	2200      	movs	r2, #0
 800d70c:	705a      	strb	r2, [r3, #1]
 800d70e:	2200      	movs	r2, #0
 800d710:	709a      	strb	r2, [r3, #2]
 800d712:	2200      	movs	r2, #0
 800d714:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2200      	movs	r2, #0
 800d71a:	711a      	strb	r2, [r3, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	715a      	strb	r2, [r3, #5]
 800d720:	2200      	movs	r2, #0
 800d722:	719a      	strb	r2, [r3, #6]
 800d724:	2200      	movs	r2, #0
 800d726:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d728:	f004 fd8c 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d72c:	f004 fd72 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d730:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	689b      	ldr	r3, [r3, #8]
}
 800d736:	4618      	mov	r0, r3
 800d738:	3710      	adds	r7, #16
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}

0800d73e <otThreadGetLinkLocalIp6Address>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otIp6Address *otThreadGetLinkLocalIp6Address(otInstance *aInstance)
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	b084      	sub	sp, #16
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d746:	f004 fdbb 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d74a:	f004 fd57 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d74e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_LINK_LOCAL_IP6_ADDRESS;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2200      	movs	r2, #0
 800d754:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 800d758:	701a      	strb	r2, [r3, #0]
 800d75a:	2200      	movs	r2, #0
 800d75c:	705a      	strb	r2, [r3, #1]
 800d75e:	2200      	movs	r2, #0
 800d760:	709a      	strb	r2, [r3, #2]
 800d762:	2200      	movs	r2, #0
 800d764:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2200      	movs	r2, #0
 800d76a:	711a      	strb	r2, [r3, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	715a      	strb	r2, [r3, #5]
 800d770:	2200      	movs	r2, #0
 800d772:	719a      	strb	r2, [r3, #6]
 800d774:	2200      	movs	r2, #0
 800d776:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d778:	f004 fd64 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d77c:	f004 fd4a 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d780:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	689b      	ldr	r3, [r3, #8]
}
 800d786:	4618      	mov	r0, r3
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b084      	sub	sp, #16
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
 800d796:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800d798:	f004 fd92 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d79c:	f004 fd2e 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d7a0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 800d7aa:	701a      	strb	r2, [r3, #0]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	705a      	strb	r2, [r3, #1]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	709a      	strb	r2, [r3, #2]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f042 0201 	orr.w	r2, r2, #1
 800d7c0:	711a      	strb	r2, [r3, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	715a      	strb	r2, [r3, #5]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	719a      	strb	r2, [r3, #6]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 800d7ce:	683a      	ldr	r2, [r7, #0]
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d7d4:	f004 fd36 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d7d8:	f004 fd1c 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d7dc:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	689b      	ldr	r3, [r3, #8]
 800d7e2:	b2db      	uxtb	r3, r3
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d7f4:	f004 fd64 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d7f8:	f004 fd00 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d7fc:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2200      	movs	r2, #0
 800d802:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 800d806:	701a      	strb	r2, [r3, #0]
 800d808:	2200      	movs	r2, #0
 800d80a:	705a      	strb	r2, [r3, #1]
 800d80c:	2200      	movs	r2, #0
 800d80e:	709a      	strb	r2, [r3, #2]
 800d810:	2200      	movs	r2, #0
 800d812:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2200      	movs	r2, #0
 800d818:	711a      	strb	r2, [r3, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	715a      	strb	r2, [r3, #5]
 800d81e:	2200      	movs	r2, #0
 800d820:	719a      	strb	r2, [r3, #6]
 800d822:	2200      	movs	r2, #0
 800d824:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d826:	f004 fd0d 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d82a:	f004 fcf3 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d82e:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	689b      	ldr	r3, [r3, #8]
 800d834:	b2db      	uxtb	r3, r3
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b084      	sub	sp, #16
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d846:	f004 fd3b 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d84a:	f004 fcd7 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d84e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2200      	movs	r2, #0
 800d854:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800d858:	701a      	strb	r2, [r3, #0]
 800d85a:	2200      	movs	r2, #0
 800d85c:	705a      	strb	r2, [r3, #1]
 800d85e:	2200      	movs	r2, #0
 800d860:	709a      	strb	r2, [r3, #2]
 800d862:	2200      	movs	r2, #0
 800d864:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2200      	movs	r2, #0
 800d86a:	711a      	strb	r2, [r3, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	715a      	strb	r2, [r3, #5]
 800d870:	2200      	movs	r2, #0
 800d872:	719a      	strb	r2, [r3, #6]
 800d874:	2200      	movs	r2, #0
 800d876:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d878:	f004 fce4 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d87c:	f004 fcca 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d880:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	b29b      	uxth	r3, r3
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3710      	adds	r7, #16
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	605a      	str	r2, [r3, #4]
}
 800d8a4:	bf00      	nop
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr

0800d8b0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b087      	sub	sp, #28
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8b8:	f3ef 8310 	mrs	r3, PRIMASK
 800d8bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800d8be:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d8c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d8c2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d102      	bne.n	800d8d4 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	75fb      	strb	r3, [r7, #23]
 800d8d2:	e001      	b.n	800d8d8 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	75fb      	strb	r3, [r7, #23]
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800d8e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	371c      	adds	r7, #28
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr

0800d8f0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b087      	sub	sp, #28
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8fa:	f3ef 8310 	mrs	r3, PRIMASK
 800d8fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800d900:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d902:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d904:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	683a      	ldr	r2, [r7, #0]
 800d918:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	683a      	ldr	r2, [r7, #0]
 800d920:	605a      	str	r2, [r3, #4]
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d92c:	bf00      	nop
 800d92e:	371c      	adds	r7, #28
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800d938:	b480      	push	{r7}
 800d93a:	b087      	sub	sp, #28
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d942:	f3ef 8310 	mrs	r3, PRIMASK
 800d946:	60fb      	str	r3, [r7, #12]
  return(result);
 800d948:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d94a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d94c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	685a      	ldr	r2, [r3, #4]
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	683a      	ldr	r2, [r7, #0]
 800d960:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	683a      	ldr	r2, [r7, #0]
 800d968:	601a      	str	r2, [r3, #0]
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d974:	bf00      	nop
 800d976:	371c      	adds	r7, #28
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800d980:	b480      	push	{r7}
 800d982:	b087      	sub	sp, #28
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d988:	f3ef 8310 	mrs	r3, PRIMASK
 800d98c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d98e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d990:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d992:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	6812      	ldr	r2, [r2, #0]
 800d99c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	6852      	ldr	r2, [r2, #4]
 800d9a6:	605a      	str	r2, [r3, #4]
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d9b2:	bf00      	nop
 800d9b4:	371c      	adds	r7, #28
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr

0800d9be <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800d9be:	b580      	push	{r7, lr}
 800d9c0:	b086      	sub	sp, #24
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
 800d9c6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9c8:	f3ef 8310 	mrs	r3, PRIMASK
 800d9cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d9d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d9d2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7ff ffcd 	bl	800d980 <LST_remove_node>
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d9f0:	bf00      	nop
 800d9f2:	3718      	adds	r7, #24
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d9f8:	b480      	push	{r7}
 800d9fa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d9fc:	bf00      	nop
 800d9fe:	46bd      	mov	sp, r7
 800da00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da04:	4770      	bx	lr
	...

0800da08 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800da08:	b480      	push	{r7}
 800da0a:	b085      	sub	sp, #20
 800da0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da0e:	f3ef 8305 	mrs	r3, IPSR
 800da12:	60bb      	str	r3, [r7, #8]
  return(result);
 800da14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da16:	2b00      	cmp	r3, #0
 800da18:	d10f      	bne.n	800da3a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da1a:	f3ef 8310 	mrs	r3, PRIMASK
 800da1e:	607b      	str	r3, [r7, #4]
  return(result);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d105      	bne.n	800da32 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da26:	f3ef 8311 	mrs	r3, BASEPRI
 800da2a:	603b      	str	r3, [r7, #0]
  return(result);
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d007      	beq.n	800da42 <osKernelInitialize+0x3a>
 800da32:	4b0e      	ldr	r3, [pc, #56]	; (800da6c <osKernelInitialize+0x64>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	2b02      	cmp	r3, #2
 800da38:	d103      	bne.n	800da42 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800da3a:	f06f 0305 	mvn.w	r3, #5
 800da3e:	60fb      	str	r3, [r7, #12]
 800da40:	e00c      	b.n	800da5c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800da42:	4b0a      	ldr	r3, [pc, #40]	; (800da6c <osKernelInitialize+0x64>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d105      	bne.n	800da56 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800da4a:	4b08      	ldr	r3, [pc, #32]	; (800da6c <osKernelInitialize+0x64>)
 800da4c:	2201      	movs	r2, #1
 800da4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800da50:	2300      	movs	r3, #0
 800da52:	60fb      	str	r3, [r7, #12]
 800da54:	e002      	b.n	800da5c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800da56:	f04f 33ff 	mov.w	r3, #4294967295
 800da5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800da5c:	68fb      	ldr	r3, [r7, #12]
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3714      	adds	r7, #20
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
 800da6a:	bf00      	nop
 800da6c:	200003a0 	.word	0x200003a0

0800da70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da76:	f3ef 8305 	mrs	r3, IPSR
 800da7a:	60bb      	str	r3, [r7, #8]
  return(result);
 800da7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d10f      	bne.n	800daa2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da82:	f3ef 8310 	mrs	r3, PRIMASK
 800da86:	607b      	str	r3, [r7, #4]
  return(result);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d105      	bne.n	800da9a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da8e:	f3ef 8311 	mrs	r3, BASEPRI
 800da92:	603b      	str	r3, [r7, #0]
  return(result);
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d007      	beq.n	800daaa <osKernelStart+0x3a>
 800da9a:	4b0f      	ldr	r3, [pc, #60]	; (800dad8 <osKernelStart+0x68>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2b02      	cmp	r3, #2
 800daa0:	d103      	bne.n	800daaa <osKernelStart+0x3a>
    stat = osErrorISR;
 800daa2:	f06f 0305 	mvn.w	r3, #5
 800daa6:	60fb      	str	r3, [r7, #12]
 800daa8:	e010      	b.n	800dacc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800daaa:	4b0b      	ldr	r3, [pc, #44]	; (800dad8 <osKernelStart+0x68>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d109      	bne.n	800dac6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dab2:	f7ff ffa1 	bl	800d9f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dab6:	4b08      	ldr	r3, [pc, #32]	; (800dad8 <osKernelStart+0x68>)
 800dab8:	2202      	movs	r2, #2
 800daba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dabc:	f001 ffd8 	bl	800fa70 <vTaskStartScheduler>
      stat = osOK;
 800dac0:	2300      	movs	r3, #0
 800dac2:	60fb      	str	r3, [r7, #12]
 800dac4:	e002      	b.n	800dacc <osKernelStart+0x5c>
    } else {
      stat = osError;
 800dac6:	f04f 33ff 	mov.w	r3, #4294967295
 800daca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800dacc:	68fb      	ldr	r3, [r7, #12]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	200003a0 	.word	0x200003a0

0800dadc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dadc:	b580      	push	{r7, lr}
 800dade:	b090      	sub	sp, #64	; 0x40
 800dae0:	af04      	add	r7, sp, #16
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dae8:	2300      	movs	r3, #0
 800daea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800daec:	f3ef 8305 	mrs	r3, IPSR
 800daf0:	61fb      	str	r3, [r7, #28]
  return(result);
 800daf2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	f040 8090 	bne.w	800dc1a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dafa:	f3ef 8310 	mrs	r3, PRIMASK
 800dafe:	61bb      	str	r3, [r7, #24]
  return(result);
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d105      	bne.n	800db12 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db06:	f3ef 8311 	mrs	r3, BASEPRI
 800db0a:	617b      	str	r3, [r7, #20]
  return(result);
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d003      	beq.n	800db1a <osThreadNew+0x3e>
 800db12:	4b44      	ldr	r3, [pc, #272]	; (800dc24 <osThreadNew+0x148>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2b02      	cmp	r3, #2
 800db18:	d07f      	beq.n	800dc1a <osThreadNew+0x13e>
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d07c      	beq.n	800dc1a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800db20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db24:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800db26:	2318      	movs	r3, #24
 800db28:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800db2a:	2300      	movs	r3, #0
 800db2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800db2e:	f04f 33ff 	mov.w	r3, #4294967295
 800db32:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d045      	beq.n	800dbc6 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d002      	beq.n	800db48 <osThreadNew+0x6c>
        name = attr->name;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	699b      	ldr	r3, [r3, #24]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d002      	beq.n	800db56 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	699b      	ldr	r3, [r3, #24]
 800db54:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800db56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d008      	beq.n	800db6e <osThreadNew+0x92>
 800db5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5e:	2b38      	cmp	r3, #56	; 0x38
 800db60:	d805      	bhi.n	800db6e <osThreadNew+0x92>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	f003 0301 	and.w	r3, r3, #1
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d001      	beq.n	800db72 <osThreadNew+0x96>
        return (NULL);
 800db6e:	2300      	movs	r3, #0
 800db70:	e054      	b.n	800dc1c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	695b      	ldr	r3, [r3, #20]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d003      	beq.n	800db82 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	695b      	ldr	r3, [r3, #20]
 800db7e:	089b      	lsrs	r3, r3, #2
 800db80:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	689b      	ldr	r3, [r3, #8]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d00e      	beq.n	800dba8 <osThreadNew+0xcc>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	68db      	ldr	r3, [r3, #12]
 800db8e:	2b5b      	cmp	r3, #91	; 0x5b
 800db90:	d90a      	bls.n	800dba8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db96:	2b00      	cmp	r3, #0
 800db98:	d006      	beq.n	800dba8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	695b      	ldr	r3, [r3, #20]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d002      	beq.n	800dba8 <osThreadNew+0xcc>
        mem = 1;
 800dba2:	2301      	movs	r3, #1
 800dba4:	623b      	str	r3, [r7, #32]
 800dba6:	e010      	b.n	800dbca <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	689b      	ldr	r3, [r3, #8]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d10c      	bne.n	800dbca <osThreadNew+0xee>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	68db      	ldr	r3, [r3, #12]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d108      	bne.n	800dbca <osThreadNew+0xee>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	691b      	ldr	r3, [r3, #16]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d104      	bne.n	800dbca <osThreadNew+0xee>
          mem = 0;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	623b      	str	r3, [r7, #32]
 800dbc4:	e001      	b.n	800dbca <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800dbca:	6a3b      	ldr	r3, [r7, #32]
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d110      	bne.n	800dbf2 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dbd8:	9202      	str	r2, [sp, #8]
 800dbda:	9301      	str	r3, [sp, #4]
 800dbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbde:	9300      	str	r3, [sp, #0]
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbe4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbe6:	68f8      	ldr	r0, [r7, #12]
 800dbe8:	f001 fd70 	bl	800f6cc <xTaskCreateStatic>
 800dbec:	4603      	mov	r3, r0
 800dbee:	613b      	str	r3, [r7, #16]
 800dbf0:	e013      	b.n	800dc1a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800dbf2:	6a3b      	ldr	r3, [r7, #32]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d110      	bne.n	800dc1a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	f107 0310 	add.w	r3, r7, #16
 800dc00:	9301      	str	r3, [sp, #4]
 800dc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc04:	9300      	str	r3, [sp, #0]
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc0a:	68f8      	ldr	r0, [r7, #12]
 800dc0c:	f001 fdb8 	bl	800f780 <xTaskCreate>
 800dc10:	4603      	mov	r3, r0
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d001      	beq.n	800dc1a <osThreadNew+0x13e>
          hTask = NULL;
 800dc16:	2300      	movs	r3, #0
 800dc18:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dc1a:	693b      	ldr	r3, [r7, #16]
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3730      	adds	r7, #48	; 0x30
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	200003a0 	.word	0x200003a0

0800dc28 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b08a      	sub	sp, #40	; 0x28
 800dc2c:	af02      	add	r7, sp, #8
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800dc36:	69fb      	ldr	r3, [r7, #28]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d002      	beq.n	800dc42 <osThreadFlagsSet+0x1a>
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	da03      	bge.n	800dc4a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800dc42:	f06f 0303 	mvn.w	r3, #3
 800dc46:	60fb      	str	r3, [r7, #12]
 800dc48:	e046      	b.n	800dcd8 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800dc4a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc50:	f3ef 8305 	mrs	r3, IPSR
 800dc54:	61bb      	str	r3, [r7, #24]
  return(result);
 800dc56:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d10f      	bne.n	800dc7c <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc5c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc60:	617b      	str	r3, [r7, #20]
  return(result);
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d105      	bne.n	800dc74 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc68:	f3ef 8311 	mrs	r3, BASEPRI
 800dc6c:	613b      	str	r3, [r7, #16]
  return(result);
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d024      	beq.n	800dcbe <osThreadFlagsSet+0x96>
 800dc74:	4b1b      	ldr	r3, [pc, #108]	; (800dce4 <osThreadFlagsSet+0xbc>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	2b02      	cmp	r3, #2
 800dc7a:	d120      	bne.n	800dcbe <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800dc80:	f107 0308 	add.w	r3, r7, #8
 800dc84:	9300      	str	r3, [sp, #0]
 800dc86:	2300      	movs	r3, #0
 800dc88:	2201      	movs	r2, #1
 800dc8a:	6839      	ldr	r1, [r7, #0]
 800dc8c:	69f8      	ldr	r0, [r7, #28]
 800dc8e:	f002 fe2b 	bl	80108e8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800dc92:	f107 020c 	add.w	r2, r7, #12
 800dc96:	2300      	movs	r3, #0
 800dc98:	9300      	str	r3, [sp, #0]
 800dc9a:	4613      	mov	r3, r2
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	2100      	movs	r1, #0
 800dca0:	69f8      	ldr	r0, [r7, #28]
 800dca2:	f002 fe21 	bl	80108e8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d015      	beq.n	800dcd8 <osThreadFlagsSet+0xb0>
 800dcac:	4b0e      	ldr	r3, [pc, #56]	; (800dce8 <osThreadFlagsSet+0xc0>)
 800dcae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcb2:	601a      	str	r2, [r3, #0]
 800dcb4:	f3bf 8f4f 	dsb	sy
 800dcb8:	f3bf 8f6f 	isb	sy
 800dcbc:	e00c      	b.n	800dcd8 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	6839      	ldr	r1, [r7, #0]
 800dcc4:	69f8      	ldr	r0, [r7, #28]
 800dcc6:	f002 fd59 	bl	801077c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800dcca:	f107 030c 	add.w	r3, r7, #12
 800dcce:	2200      	movs	r2, #0
 800dcd0:	2100      	movs	r1, #0
 800dcd2:	69f8      	ldr	r0, [r7, #28]
 800dcd4:	f002 fd52 	bl	801077c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3720      	adds	r7, #32
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	200003a0 	.word	0x200003a0
 800dce8:	e000ed04 	.word	0xe000ed04

0800dcec <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b08e      	sub	sp, #56	; 0x38
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcf8:	f3ef 8305 	mrs	r3, IPSR
 800dcfc:	61fb      	str	r3, [r7, #28]
  return(result);
 800dcfe:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d10f      	bne.n	800dd24 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd04:	f3ef 8310 	mrs	r3, PRIMASK
 800dd08:	61bb      	str	r3, [r7, #24]
  return(result);
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d105      	bne.n	800dd1c <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd10:	f3ef 8311 	mrs	r3, BASEPRI
 800dd14:	617b      	str	r3, [r7, #20]
  return(result);
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d007      	beq.n	800dd2c <osThreadFlagsWait+0x40>
 800dd1c:	4b3c      	ldr	r3, [pc, #240]	; (800de10 <osThreadFlagsWait+0x124>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	2b02      	cmp	r3, #2
 800dd22:	d103      	bne.n	800dd2c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800dd24:	f06f 0305 	mvn.w	r3, #5
 800dd28:	637b      	str	r3, [r7, #52]	; 0x34
 800dd2a:	e06b      	b.n	800de04 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	da03      	bge.n	800dd3a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800dd32:	f06f 0303 	mvn.w	r3, #3
 800dd36:	637b      	str	r3, [r7, #52]	; 0x34
 800dd38:	e064      	b.n	800de04 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	f003 0302 	and.w	r3, r3, #2
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d002      	beq.n	800dd4a <osThreadFlagsWait+0x5e>
      clear = 0U;
 800dd44:	2300      	movs	r3, #0
 800dd46:	633b      	str	r3, [r7, #48]	; 0x30
 800dd48:	e001      	b.n	800dd4e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800dd56:	f001 ffd1 	bl	800fcfc <xTaskGetTickCount>
 800dd5a:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800dd5c:	f107 0210 	add.w	r2, r7, #16
 800dd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd64:	2000      	movs	r0, #0
 800dd66:	f002 fcaf 	bl	80106c8 <xTaskNotifyWait>
 800dd6a:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800dd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	d137      	bne.n	800dde2 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800dd72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	4013      	ands	r3, r2
 800dd78:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	f003 0301 	and.w	r3, r3, #1
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00c      	beq.n	800dda6 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800dd8c:	68fa      	ldr	r2, [r7, #12]
 800dd8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd90:	4013      	ands	r3, r2
 800dd92:	68fa      	ldr	r2, [r7, #12]
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d032      	beq.n	800ddfe <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d10f      	bne.n	800ddbe <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800dd9e:	f06f 0302 	mvn.w	r3, #2
 800dda2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800dda4:	e02e      	b.n	800de04 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800dda6:	68fa      	ldr	r2, [r7, #12]
 800dda8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddaa:	4013      	ands	r3, r2
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d128      	bne.n	800de02 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d103      	bne.n	800ddbe <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800ddb6:	f06f 0302 	mvn.w	r3, #2
 800ddba:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800ddbc:	e022      	b.n	800de04 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800ddbe:	f001 ff9d 	bl	800fcfc <xTaskGetTickCount>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc6:	1ad3      	subs	r3, r2, r3
 800ddc8:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800ddca:	6a3a      	ldr	r2, [r7, #32]
 800ddcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d902      	bls.n	800ddd8 <osThreadFlagsWait+0xec>
          tout  = 0;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddd6:	e00e      	b.n	800ddf6 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800ddd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddda:	6a3b      	ldr	r3, [r7, #32]
 800dddc:	1ad3      	subs	r3, r2, r3
 800ddde:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dde0:	e009      	b.n	800ddf6 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d103      	bne.n	800ddf0 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800dde8:	f06f 0302 	mvn.w	r3, #2
 800ddec:	637b      	str	r3, [r7, #52]	; 0x34
 800ddee:	e002      	b.n	800ddf6 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800ddf0:	f06f 0301 	mvn.w	r3, #1
 800ddf4:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d1af      	bne.n	800dd5c <osThreadFlagsWait+0x70>
 800ddfc:	e002      	b.n	800de04 <osThreadFlagsWait+0x118>
            break;
 800ddfe:	bf00      	nop
 800de00:	e000      	b.n	800de04 <osThreadFlagsWait+0x118>
            break;
 800de02:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800de04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800de06:	4618      	mov	r0, r3
 800de08:	3738      	adds	r7, #56	; 0x38
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	200003a0 	.word	0x200003a0

0800de14 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800de14:	b580      	push	{r7, lr}
 800de16:	b086      	sub	sp, #24
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de1c:	f3ef 8305 	mrs	r3, IPSR
 800de20:	613b      	str	r3, [r7, #16]
  return(result);
 800de22:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800de24:	2b00      	cmp	r3, #0
 800de26:	d10f      	bne.n	800de48 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de28:	f3ef 8310 	mrs	r3, PRIMASK
 800de2c:	60fb      	str	r3, [r7, #12]
  return(result);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d105      	bne.n	800de40 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de34:	f3ef 8311 	mrs	r3, BASEPRI
 800de38:	60bb      	str	r3, [r7, #8]
  return(result);
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d007      	beq.n	800de50 <osDelay+0x3c>
 800de40:	4b0a      	ldr	r3, [pc, #40]	; (800de6c <osDelay+0x58>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2b02      	cmp	r3, #2
 800de46:	d103      	bne.n	800de50 <osDelay+0x3c>
    stat = osErrorISR;
 800de48:	f06f 0305 	mvn.w	r3, #5
 800de4c:	617b      	str	r3, [r7, #20]
 800de4e:	e007      	b.n	800de60 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800de50:	2300      	movs	r3, #0
 800de52:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d002      	beq.n	800de60 <osDelay+0x4c>
      vTaskDelay(ticks);
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f001 fdd4 	bl	800fa08 <vTaskDelay>
    }
  }

  return (stat);
 800de60:	697b      	ldr	r3, [r7, #20]
}
 800de62:	4618      	mov	r0, r3
 800de64:	3718      	adds	r7, #24
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	200003a0 	.word	0x200003a0

0800de70 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800de70:	b580      	push	{r7, lr}
 800de72:	b08a      	sub	sp, #40	; 0x28
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800de78:	2300      	movs	r3, #0
 800de7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de7c:	f3ef 8305 	mrs	r3, IPSR
 800de80:	613b      	str	r3, [r7, #16]
  return(result);
 800de82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800de84:	2b00      	cmp	r3, #0
 800de86:	f040 8085 	bne.w	800df94 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de8a:	f3ef 8310 	mrs	r3, PRIMASK
 800de8e:	60fb      	str	r3, [r7, #12]
  return(result);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d105      	bne.n	800dea2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de96:	f3ef 8311 	mrs	r3, BASEPRI
 800de9a:	60bb      	str	r3, [r7, #8]
  return(result);
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d003      	beq.n	800deaa <osMutexNew+0x3a>
 800dea2:	4b3f      	ldr	r3, [pc, #252]	; (800dfa0 <osMutexNew+0x130>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2b02      	cmp	r3, #2
 800dea8:	d074      	beq.n	800df94 <osMutexNew+0x124>
    if (attr != NULL) {
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d003      	beq.n	800deb8 <osMutexNew+0x48>
      type = attr->attr_bits;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	623b      	str	r3, [r7, #32]
 800deb6:	e001      	b.n	800debc <osMutexNew+0x4c>
    } else {
      type = 0U;
 800deb8:	2300      	movs	r3, #0
 800deba:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800debc:	6a3b      	ldr	r3, [r7, #32]
 800debe:	f003 0301 	and.w	r3, r3, #1
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d002      	beq.n	800decc <osMutexNew+0x5c>
      rmtx = 1U;
 800dec6:	2301      	movs	r3, #1
 800dec8:	61fb      	str	r3, [r7, #28]
 800deca:	e001      	b.n	800ded0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800decc:	2300      	movs	r3, #0
 800dece:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ded0:	6a3b      	ldr	r3, [r7, #32]
 800ded2:	f003 0308 	and.w	r3, r3, #8
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d15c      	bne.n	800df94 <osMutexNew+0x124>
      mem = -1;
 800deda:	f04f 33ff 	mov.w	r3, #4294967295
 800dede:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d015      	beq.n	800df12 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d006      	beq.n	800defc <osMutexNew+0x8c>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	2b4f      	cmp	r3, #79	; 0x4f
 800def4:	d902      	bls.n	800defc <osMutexNew+0x8c>
          mem = 1;
 800def6:	2301      	movs	r3, #1
 800def8:	61bb      	str	r3, [r7, #24]
 800defa:	e00c      	b.n	800df16 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d108      	bne.n	800df16 <osMutexNew+0xa6>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d104      	bne.n	800df16 <osMutexNew+0xa6>
            mem = 0;
 800df0c:	2300      	movs	r3, #0
 800df0e:	61bb      	str	r3, [r7, #24]
 800df10:	e001      	b.n	800df16 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800df12:	2300      	movs	r3, #0
 800df14:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d112      	bne.n	800df42 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d007      	beq.n	800df32 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	689b      	ldr	r3, [r3, #8]
 800df26:	4619      	mov	r1, r3
 800df28:	2004      	movs	r0, #4
 800df2a:	f000 fc9c 	bl	800e866 <xQueueCreateMutexStatic>
 800df2e:	6278      	str	r0, [r7, #36]	; 0x24
 800df30:	e016      	b.n	800df60 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	689b      	ldr	r3, [r3, #8]
 800df36:	4619      	mov	r1, r3
 800df38:	2001      	movs	r0, #1
 800df3a:	f000 fc94 	bl	800e866 <xQueueCreateMutexStatic>
 800df3e:	6278      	str	r0, [r7, #36]	; 0x24
 800df40:	e00e      	b.n	800df60 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800df42:	69bb      	ldr	r3, [r7, #24]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d10b      	bne.n	800df60 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d004      	beq.n	800df58 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800df4e:	2004      	movs	r0, #4
 800df50:	f000 fc71 	bl	800e836 <xQueueCreateMutex>
 800df54:	6278      	str	r0, [r7, #36]	; 0x24
 800df56:	e003      	b.n	800df60 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800df58:	2001      	movs	r0, #1
 800df5a:	f000 fc6c 	bl	800e836 <xQueueCreateMutex>
 800df5e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800df60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df62:	2b00      	cmp	r3, #0
 800df64:	d00c      	beq.n	800df80 <osMutexNew+0x110>
        if (attr != NULL) {
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d003      	beq.n	800df74 <osMutexNew+0x104>
          name = attr->name;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	617b      	str	r3, [r7, #20]
 800df72:	e001      	b.n	800df78 <osMutexNew+0x108>
        } else {
          name = NULL;
 800df74:	2300      	movs	r3, #0
 800df76:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800df78:	6979      	ldr	r1, [r7, #20]
 800df7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df7c:	f001 fb20 	bl	800f5c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df82:	2b00      	cmp	r3, #0
 800df84:	d006      	beq.n	800df94 <osMutexNew+0x124>
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d003      	beq.n	800df94 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800df8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8e:	f043 0301 	orr.w	r3, r3, #1
 800df92:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800df94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df96:	4618      	mov	r0, r3
 800df98:	3728      	adds	r7, #40	; 0x28
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	200003a0 	.word	0x200003a0

0800dfa4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b088      	sub	sp, #32
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f023 0301 	bic.w	r3, r3, #1
 800dfb4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f003 0301 	and.w	r3, r3, #1
 800dfbc:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfc2:	f3ef 8305 	mrs	r3, IPSR
 800dfc6:	613b      	str	r3, [r7, #16]
  return(result);
 800dfc8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d10f      	bne.n	800dfee <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfce:	f3ef 8310 	mrs	r3, PRIMASK
 800dfd2:	60fb      	str	r3, [r7, #12]
  return(result);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d105      	bne.n	800dfe6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dfda:	f3ef 8311 	mrs	r3, BASEPRI
 800dfde:	60bb      	str	r3, [r7, #8]
  return(result);
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d007      	beq.n	800dff6 <osMutexAcquire+0x52>
 800dfe6:	4b1d      	ldr	r3, [pc, #116]	; (800e05c <osMutexAcquire+0xb8>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2b02      	cmp	r3, #2
 800dfec:	d103      	bne.n	800dff6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800dfee:	f06f 0305 	mvn.w	r3, #5
 800dff2:	61fb      	str	r3, [r7, #28]
 800dff4:	e02c      	b.n	800e050 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d103      	bne.n	800e004 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800dffc:	f06f 0303 	mvn.w	r3, #3
 800e000:	61fb      	str	r3, [r7, #28]
 800e002:	e025      	b.n	800e050 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d011      	beq.n	800e02e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e00a:	6839      	ldr	r1, [r7, #0]
 800e00c:	69b8      	ldr	r0, [r7, #24]
 800e00e:	f000 fc78 	bl	800e902 <xQueueTakeMutexRecursive>
 800e012:	4603      	mov	r3, r0
 800e014:	2b01      	cmp	r3, #1
 800e016:	d01b      	beq.n	800e050 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d003      	beq.n	800e026 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800e01e:	f06f 0301 	mvn.w	r3, #1
 800e022:	61fb      	str	r3, [r7, #28]
 800e024:	e014      	b.n	800e050 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e026:	f06f 0302 	mvn.w	r3, #2
 800e02a:	61fb      	str	r3, [r7, #28]
 800e02c:	e010      	b.n	800e050 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e02e:	6839      	ldr	r1, [r7, #0]
 800e030:	69b8      	ldr	r0, [r7, #24]
 800e032:	f000 fff5 	bl	800f020 <xQueueSemaphoreTake>
 800e036:	4603      	mov	r3, r0
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d009      	beq.n	800e050 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d003      	beq.n	800e04a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800e042:	f06f 0301 	mvn.w	r3, #1
 800e046:	61fb      	str	r3, [r7, #28]
 800e048:	e002      	b.n	800e050 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e04a:	f06f 0302 	mvn.w	r3, #2
 800e04e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e050:	69fb      	ldr	r3, [r7, #28]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3720      	adds	r7, #32
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	200003a0 	.word	0x200003a0

0800e060 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e060:	b580      	push	{r7, lr}
 800e062:	b088      	sub	sp, #32
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f023 0301 	bic.w	r3, r3, #1
 800e06e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f003 0301 	and.w	r3, r3, #1
 800e076:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e078:	2300      	movs	r3, #0
 800e07a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e07c:	f3ef 8305 	mrs	r3, IPSR
 800e080:	613b      	str	r3, [r7, #16]
  return(result);
 800e082:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e084:	2b00      	cmp	r3, #0
 800e086:	d10f      	bne.n	800e0a8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e088:	f3ef 8310 	mrs	r3, PRIMASK
 800e08c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d105      	bne.n	800e0a0 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e094:	f3ef 8311 	mrs	r3, BASEPRI
 800e098:	60bb      	str	r3, [r7, #8]
  return(result);
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d007      	beq.n	800e0b0 <osMutexRelease+0x50>
 800e0a0:	4b16      	ldr	r3, [pc, #88]	; (800e0fc <osMutexRelease+0x9c>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b02      	cmp	r3, #2
 800e0a6:	d103      	bne.n	800e0b0 <osMutexRelease+0x50>
    stat = osErrorISR;
 800e0a8:	f06f 0305 	mvn.w	r3, #5
 800e0ac:	61fb      	str	r3, [r7, #28]
 800e0ae:	e01f      	b.n	800e0f0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800e0b0:	69bb      	ldr	r3, [r7, #24]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d103      	bne.n	800e0be <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800e0b6:	f06f 0303 	mvn.w	r3, #3
 800e0ba:	61fb      	str	r3, [r7, #28]
 800e0bc:	e018      	b.n	800e0f0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d009      	beq.n	800e0d8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e0c4:	69b8      	ldr	r0, [r7, #24]
 800e0c6:	f000 fbe9 	bl	800e89c <xQueueGiveMutexRecursive>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d00f      	beq.n	800e0f0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e0d0:	f06f 0302 	mvn.w	r3, #2
 800e0d4:	61fb      	str	r3, [r7, #28]
 800e0d6:	e00b      	b.n	800e0f0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e0d8:	2300      	movs	r3, #0
 800e0da:	2200      	movs	r2, #0
 800e0dc:	2100      	movs	r1, #0
 800e0de:	69b8      	ldr	r0, [r7, #24]
 800e0e0:	f000 fcaa 	bl	800ea38 <xQueueGenericSend>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d002      	beq.n	800e0f0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e0ea:	f06f 0302 	mvn.w	r3, #2
 800e0ee:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800e0f0:	69fb      	ldr	r3, [r7, #28]
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3720      	adds	r7, #32
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	200003a0 	.word	0x200003a0

0800e100 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e100:	b580      	push	{r7, lr}
 800e102:	b08c      	sub	sp, #48	; 0x30
 800e104:	af02      	add	r7, sp, #8
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e10c:	2300      	movs	r3, #0
 800e10e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e110:	f3ef 8305 	mrs	r3, IPSR
 800e114:	61bb      	str	r3, [r7, #24]
  return(result);
 800e116:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e118:	2b00      	cmp	r3, #0
 800e11a:	f040 8087 	bne.w	800e22c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e11e:	f3ef 8310 	mrs	r3, PRIMASK
 800e122:	617b      	str	r3, [r7, #20]
  return(result);
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d105      	bne.n	800e136 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e12a:	f3ef 8311 	mrs	r3, BASEPRI
 800e12e:	613b      	str	r3, [r7, #16]
  return(result);
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d003      	beq.n	800e13e <osSemaphoreNew+0x3e>
 800e136:	4b40      	ldr	r3, [pc, #256]	; (800e238 <osSemaphoreNew+0x138>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2b02      	cmp	r3, #2
 800e13c:	d076      	beq.n	800e22c <osSemaphoreNew+0x12c>
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d073      	beq.n	800e22c <osSemaphoreNew+0x12c>
 800e144:	68ba      	ldr	r2, [r7, #8]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	429a      	cmp	r2, r3
 800e14a:	d86f      	bhi.n	800e22c <osSemaphoreNew+0x12c>
    mem = -1;
 800e14c:	f04f 33ff 	mov.w	r3, #4294967295
 800e150:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d015      	beq.n	800e184 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d006      	beq.n	800e16e <osSemaphoreNew+0x6e>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	2b4f      	cmp	r3, #79	; 0x4f
 800e166:	d902      	bls.n	800e16e <osSemaphoreNew+0x6e>
        mem = 1;
 800e168:	2301      	movs	r3, #1
 800e16a:	623b      	str	r3, [r7, #32]
 800e16c:	e00c      	b.n	800e188 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d108      	bne.n	800e188 <osSemaphoreNew+0x88>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	68db      	ldr	r3, [r3, #12]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d104      	bne.n	800e188 <osSemaphoreNew+0x88>
          mem = 0;
 800e17e:	2300      	movs	r3, #0
 800e180:	623b      	str	r3, [r7, #32]
 800e182:	e001      	b.n	800e188 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800e184:	2300      	movs	r3, #0
 800e186:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800e188:	6a3b      	ldr	r3, [r7, #32]
 800e18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e18e:	d04d      	beq.n	800e22c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2b01      	cmp	r3, #1
 800e194:	d129      	bne.n	800e1ea <osSemaphoreNew+0xea>
        if (mem == 1) {
 800e196:	6a3b      	ldr	r3, [r7, #32]
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d10b      	bne.n	800e1b4 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	689a      	ldr	r2, [r3, #8]
 800e1a0:	2303      	movs	r3, #3
 800e1a2:	9300      	str	r3, [sp, #0]
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	2001      	movs	r0, #1
 800e1ac:	f000 fa54 	bl	800e658 <xQueueGenericCreateStatic>
 800e1b0:	6278      	str	r0, [r7, #36]	; 0x24
 800e1b2:	e005      	b.n	800e1c0 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800e1b4:	2203      	movs	r2, #3
 800e1b6:	2100      	movs	r1, #0
 800e1b8:	2001      	movs	r0, #1
 800e1ba:	f000 fac0 	bl	800e73e <xQueueGenericCreate>
 800e1be:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d022      	beq.n	800e20c <osSemaphoreNew+0x10c>
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d01f      	beq.n	800e20c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	2100      	movs	r1, #0
 800e1d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1d4:	f000 fc30 	bl	800ea38 <xQueueGenericSend>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	2b01      	cmp	r3, #1
 800e1dc:	d016      	beq.n	800e20c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800e1de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1e0:	f001 f8a3 	bl	800f32a <vQueueDelete>
            hSemaphore = NULL;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	627b      	str	r3, [r7, #36]	; 0x24
 800e1e8:	e010      	b.n	800e20c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800e1ea:	6a3b      	ldr	r3, [r7, #32]
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d108      	bne.n	800e202 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	689b      	ldr	r3, [r3, #8]
 800e1f4:	461a      	mov	r2, r3
 800e1f6:	68b9      	ldr	r1, [r7, #8]
 800e1f8:	68f8      	ldr	r0, [r7, #12]
 800e1fa:	f000 fbb7 	bl	800e96c <xQueueCreateCountingSemaphoreStatic>
 800e1fe:	6278      	str	r0, [r7, #36]	; 0x24
 800e200:	e004      	b.n	800e20c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e202:	68b9      	ldr	r1, [r7, #8]
 800e204:	68f8      	ldr	r0, [r7, #12]
 800e206:	f000 fbe6 	bl	800e9d6 <xQueueCreateCountingSemaphore>
 800e20a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d00c      	beq.n	800e22c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d003      	beq.n	800e220 <osSemaphoreNew+0x120>
          name = attr->name;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	61fb      	str	r3, [r7, #28]
 800e21e:	e001      	b.n	800e224 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800e220:	2300      	movs	r3, #0
 800e222:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e224:	69f9      	ldr	r1, [r7, #28]
 800e226:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e228:	f001 f9ca 	bl	800f5c0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3728      	adds	r7, #40	; 0x28
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	200003a0 	.word	0x200003a0

0800e23c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b088      	sub	sp, #32
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e24a:	2300      	movs	r3, #0
 800e24c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e24e:	69bb      	ldr	r3, [r7, #24]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d103      	bne.n	800e25c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e254:	f06f 0303 	mvn.w	r3, #3
 800e258:	61fb      	str	r3, [r7, #28]
 800e25a:	e04b      	b.n	800e2f4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e25c:	f3ef 8305 	mrs	r3, IPSR
 800e260:	617b      	str	r3, [r7, #20]
  return(result);
 800e262:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e264:	2b00      	cmp	r3, #0
 800e266:	d10f      	bne.n	800e288 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e268:	f3ef 8310 	mrs	r3, PRIMASK
 800e26c:	613b      	str	r3, [r7, #16]
  return(result);
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d105      	bne.n	800e280 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e274:	f3ef 8311 	mrs	r3, BASEPRI
 800e278:	60fb      	str	r3, [r7, #12]
  return(result);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d026      	beq.n	800e2ce <osSemaphoreAcquire+0x92>
 800e280:	4b1f      	ldr	r3, [pc, #124]	; (800e300 <osSemaphoreAcquire+0xc4>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	2b02      	cmp	r3, #2
 800e286:	d122      	bne.n	800e2ce <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d003      	beq.n	800e296 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800e28e:	f06f 0303 	mvn.w	r3, #3
 800e292:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e294:	e02d      	b.n	800e2f2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800e296:	2300      	movs	r3, #0
 800e298:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e29a:	f107 0308 	add.w	r3, r7, #8
 800e29e:	461a      	mov	r2, r3
 800e2a0:	2100      	movs	r1, #0
 800e2a2:	69b8      	ldr	r0, [r7, #24]
 800e2a4:	f000 ffc4 	bl	800f230 <xQueueReceiveFromISR>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d003      	beq.n	800e2b6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800e2ae:	f06f 0302 	mvn.w	r3, #2
 800e2b2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e2b4:	e01d      	b.n	800e2f2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d01a      	beq.n	800e2f2 <osSemaphoreAcquire+0xb6>
 800e2bc:	4b11      	ldr	r3, [pc, #68]	; (800e304 <osSemaphoreAcquire+0xc8>)
 800e2be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2c2:	601a      	str	r2, [r3, #0]
 800e2c4:	f3bf 8f4f 	dsb	sy
 800e2c8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800e2cc:	e011      	b.n	800e2f2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e2ce:	6839      	ldr	r1, [r7, #0]
 800e2d0:	69b8      	ldr	r0, [r7, #24]
 800e2d2:	f000 fea5 	bl	800f020 <xQueueSemaphoreTake>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d00b      	beq.n	800e2f4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d003      	beq.n	800e2ea <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800e2e2:	f06f 0301 	mvn.w	r3, #1
 800e2e6:	61fb      	str	r3, [r7, #28]
 800e2e8:	e004      	b.n	800e2f4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800e2ea:	f06f 0302 	mvn.w	r3, #2
 800e2ee:	61fb      	str	r3, [r7, #28]
 800e2f0:	e000      	b.n	800e2f4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800e2f2:	bf00      	nop
      }
    }
  }

  return (stat);
 800e2f4:	69fb      	ldr	r3, [r7, #28]
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3720      	adds	r7, #32
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	200003a0 	.word	0x200003a0
 800e304:	e000ed04 	.word	0xe000ed04

0800e308 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e308:	b580      	push	{r7, lr}
 800e30a:	b088      	sub	sp, #32
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e314:	2300      	movs	r3, #0
 800e316:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e318:	69bb      	ldr	r3, [r7, #24]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d103      	bne.n	800e326 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e31e:	f06f 0303 	mvn.w	r3, #3
 800e322:	61fb      	str	r3, [r7, #28]
 800e324:	e03e      	b.n	800e3a4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e326:	f3ef 8305 	mrs	r3, IPSR
 800e32a:	617b      	str	r3, [r7, #20]
  return(result);
 800e32c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d10f      	bne.n	800e352 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e332:	f3ef 8310 	mrs	r3, PRIMASK
 800e336:	613b      	str	r3, [r7, #16]
  return(result);
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d105      	bne.n	800e34a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e33e:	f3ef 8311 	mrs	r3, BASEPRI
 800e342:	60fb      	str	r3, [r7, #12]
  return(result);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d01e      	beq.n	800e388 <osSemaphoreRelease+0x80>
 800e34a:	4b19      	ldr	r3, [pc, #100]	; (800e3b0 <osSemaphoreRelease+0xa8>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2b02      	cmp	r3, #2
 800e350:	d11a      	bne.n	800e388 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800e352:	2300      	movs	r3, #0
 800e354:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e356:	f107 0308 	add.w	r3, r7, #8
 800e35a:	4619      	mov	r1, r3
 800e35c:	69b8      	ldr	r0, [r7, #24]
 800e35e:	f000 fcf9 	bl	800ed54 <xQueueGiveFromISR>
 800e362:	4603      	mov	r3, r0
 800e364:	2b01      	cmp	r3, #1
 800e366:	d003      	beq.n	800e370 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800e368:	f06f 0302 	mvn.w	r3, #2
 800e36c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e36e:	e018      	b.n	800e3a2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d015      	beq.n	800e3a2 <osSemaphoreRelease+0x9a>
 800e376:	4b0f      	ldr	r3, [pc, #60]	; (800e3b4 <osSemaphoreRelease+0xac>)
 800e378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e37c:	601a      	str	r2, [r3, #0]
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e386:	e00c      	b.n	800e3a2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e388:	2300      	movs	r3, #0
 800e38a:	2200      	movs	r2, #0
 800e38c:	2100      	movs	r1, #0
 800e38e:	69b8      	ldr	r0, [r7, #24]
 800e390:	f000 fb52 	bl	800ea38 <xQueueGenericSend>
 800e394:	4603      	mov	r3, r0
 800e396:	2b01      	cmp	r3, #1
 800e398:	d004      	beq.n	800e3a4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800e39a:	f06f 0302 	mvn.w	r3, #2
 800e39e:	61fb      	str	r3, [r7, #28]
 800e3a0:	e000      	b.n	800e3a4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e3a2:	bf00      	nop
    }
  }

  return (stat);
 800e3a4:	69fb      	ldr	r3, [r7, #28]
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3720      	adds	r7, #32
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	200003a0 	.word	0x200003a0
 800e3b4:	e000ed04 	.word	0xe000ed04

0800e3b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e3b8:	b480      	push	{r7}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	4a07      	ldr	r2, [pc, #28]	; (800e3e4 <vApplicationGetIdleTaskMemory+0x2c>)
 800e3c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	4a06      	ldr	r2, [pc, #24]	; (800e3e8 <vApplicationGetIdleTaskMemory+0x30>)
 800e3ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3d6:	601a      	str	r2, [r3, #0]
}
 800e3d8:	bf00      	nop
 800e3da:	3714      	adds	r7, #20
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr
 800e3e4:	200003a4 	.word	0x200003a4
 800e3e8:	20000400 	.word	0x20000400

0800e3ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e3ec:	b480      	push	{r7}
 800e3ee:	b085      	sub	sp, #20
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	4a07      	ldr	r2, [pc, #28]	; (800e418 <vApplicationGetTimerTaskMemory+0x2c>)
 800e3fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	4a06      	ldr	r2, [pc, #24]	; (800e41c <vApplicationGetTimerTaskMemory+0x30>)
 800e402:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e40a:	601a      	str	r2, [r3, #0]
}
 800e40c:	bf00      	nop
 800e40e:	3714      	adds	r7, #20
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr
 800e418:	20000c00 	.word	0x20000c00
 800e41c:	20000c5c 	.word	0x20000c5c

0800e420 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f103 0208 	add.w	r2, r3, #8
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f04f 32ff 	mov.w	r2, #4294967295
 800e438:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f103 0208 	add.w	r2, r3, #8
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f103 0208 	add.w	r2, r3, #8
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2200      	movs	r2, #0
 800e452:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e454:	bf00      	nop
 800e456:	370c      	adds	r7, #12
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e460:	b480      	push	{r7}
 800e462:	b083      	sub	sp, #12
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2200      	movs	r2, #0
 800e46c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e46e:	bf00      	nop
 800e470:	370c      	adds	r7, #12
 800e472:	46bd      	mov	sp, r7
 800e474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e478:	4770      	bx	lr

0800e47a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e47a:	b480      	push	{r7}
 800e47c:	b085      	sub	sp, #20
 800e47e:	af00      	add	r7, sp, #0
 800e480:	6078      	str	r0, [r7, #4]
 800e482:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	685b      	ldr	r3, [r3, #4]
 800e488:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	68fa      	ldr	r2, [r7, #12]
 800e48e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	689a      	ldr	r2, [r3, #8]
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	689b      	ldr	r3, [r3, #8]
 800e49c:	683a      	ldr	r2, [r7, #0]
 800e49e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	683a      	ldr	r2, [r7, #0]
 800e4a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	687a      	ldr	r2, [r7, #4]
 800e4aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	1c5a      	adds	r2, r3, #1
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	601a      	str	r2, [r3, #0]
}
 800e4b6:	bf00      	nop
 800e4b8:	3714      	adds	r7, #20
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c0:	4770      	bx	lr

0800e4c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e4c2:	b480      	push	{r7}
 800e4c4:	b085      	sub	sp, #20
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	6078      	str	r0, [r7, #4]
 800e4ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4d8:	d103      	bne.n	800e4e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	691b      	ldr	r3, [r3, #16]
 800e4de:	60fb      	str	r3, [r7, #12]
 800e4e0:	e00c      	b.n	800e4fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	3308      	adds	r3, #8
 800e4e6:	60fb      	str	r3, [r7, #12]
 800e4e8:	e002      	b.n	800e4f0 <vListInsert+0x2e>
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	60fb      	str	r3, [r7, #12]
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	68ba      	ldr	r2, [r7, #8]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d2f6      	bcs.n	800e4ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	685a      	ldr	r2, [r3, #4]
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	683a      	ldr	r2, [r7, #0]
 800e50a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	68fa      	ldr	r2, [r7, #12]
 800e510:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	683a      	ldr	r2, [r7, #0]
 800e516:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	687a      	ldr	r2, [r7, #4]
 800e51c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	1c5a      	adds	r2, r3, #1
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	601a      	str	r2, [r3, #0]
}
 800e528:	bf00      	nop
 800e52a:	3714      	adds	r7, #20
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr

0800e534 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e534:	b480      	push	{r7}
 800e536:	b085      	sub	sp, #20
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	691b      	ldr	r3, [r3, #16]
 800e540:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	687a      	ldr	r2, [r7, #4]
 800e548:	6892      	ldr	r2, [r2, #8]
 800e54a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	689b      	ldr	r3, [r3, #8]
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	6852      	ldr	r2, [r2, #4]
 800e554:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	687a      	ldr	r2, [r7, #4]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d103      	bne.n	800e568 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	689a      	ldr	r2, [r3, #8]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	1e5a      	subs	r2, r3, #1
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3714      	adds	r7, #20
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr

0800e588 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d109      	bne.n	800e5b0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a0:	f383 8811 	msr	BASEPRI, r3
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	60bb      	str	r3, [r7, #8]
 800e5ae:	e7fe      	b.n	800e5ae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800e5b0:	f002 ff34 	bl	801141c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681a      	ldr	r2, [r3, #0]
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5bc:	68f9      	ldr	r1, [r7, #12]
 800e5be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e5c0:	fb01 f303 	mul.w	r3, r1, r3
 800e5c4:	441a      	add	r2, r3
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5e0:	3b01      	subs	r3, #1
 800e5e2:	68f9      	ldr	r1, [r7, #12]
 800e5e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e5e6:	fb01 f303 	mul.w	r3, r1, r3
 800e5ea:	441a      	add	r2, r3
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	22ff      	movs	r2, #255	; 0xff
 800e5f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	22ff      	movs	r2, #255	; 0xff
 800e5fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d114      	bne.n	800e630 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	691b      	ldr	r3, [r3, #16]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d01a      	beq.n	800e644 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	3310      	adds	r3, #16
 800e612:	4618      	mov	r0, r3
 800e614:	f001 fce4 	bl	800ffe0 <xTaskRemoveFromEventList>
 800e618:	4603      	mov	r3, r0
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d012      	beq.n	800e644 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e61e:	4b0d      	ldr	r3, [pc, #52]	; (800e654 <xQueueGenericReset+0xcc>)
 800e620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e624:	601a      	str	r2, [r3, #0]
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	f3bf 8f6f 	isb	sy
 800e62e:	e009      	b.n	800e644 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	3310      	adds	r3, #16
 800e634:	4618      	mov	r0, r3
 800e636:	f7ff fef3 	bl	800e420 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	3324      	adds	r3, #36	; 0x24
 800e63e:	4618      	mov	r0, r3
 800e640:	f7ff feee 	bl	800e420 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e644:	f002 ff18 	bl	8011478 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e648:	2301      	movs	r3, #1
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3710      	adds	r7, #16
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	e000ed04 	.word	0xe000ed04

0800e658 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b08e      	sub	sp, #56	; 0x38
 800e65c:	af02      	add	r7, sp, #8
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
 800e664:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d109      	bne.n	800e680 <xQueueGenericCreateStatic+0x28>
 800e66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e670:	f383 8811 	msr	BASEPRI, r3
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	f3bf 8f4f 	dsb	sy
 800e67c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e67e:	e7fe      	b.n	800e67e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d109      	bne.n	800e69a <xQueueGenericCreateStatic+0x42>
 800e686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68a:	f383 8811 	msr	BASEPRI, r3
 800e68e:	f3bf 8f6f 	isb	sy
 800e692:	f3bf 8f4f 	dsb	sy
 800e696:	627b      	str	r3, [r7, #36]	; 0x24
 800e698:	e7fe      	b.n	800e698 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d002      	beq.n	800e6a6 <xQueueGenericCreateStatic+0x4e>
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d001      	beq.n	800e6aa <xQueueGenericCreateStatic+0x52>
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	e000      	b.n	800e6ac <xQueueGenericCreateStatic+0x54>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d109      	bne.n	800e6c4 <xQueueGenericCreateStatic+0x6c>
 800e6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b4:	f383 8811 	msr	BASEPRI, r3
 800e6b8:	f3bf 8f6f 	isb	sy
 800e6bc:	f3bf 8f4f 	dsb	sy
 800e6c0:	623b      	str	r3, [r7, #32]
 800e6c2:	e7fe      	b.n	800e6c2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d102      	bne.n	800e6d0 <xQueueGenericCreateStatic+0x78>
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d101      	bne.n	800e6d4 <xQueueGenericCreateStatic+0x7c>
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	e000      	b.n	800e6d6 <xQueueGenericCreateStatic+0x7e>
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d109      	bne.n	800e6ee <xQueueGenericCreateStatic+0x96>
 800e6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6de:	f383 8811 	msr	BASEPRI, r3
 800e6e2:	f3bf 8f6f 	isb	sy
 800e6e6:	f3bf 8f4f 	dsb	sy
 800e6ea:	61fb      	str	r3, [r7, #28]
 800e6ec:	e7fe      	b.n	800e6ec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e6ee:	2350      	movs	r3, #80	; 0x50
 800e6f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	2b50      	cmp	r3, #80	; 0x50
 800e6f6:	d009      	beq.n	800e70c <xQueueGenericCreateStatic+0xb4>
 800e6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fc:	f383 8811 	msr	BASEPRI, r3
 800e700:	f3bf 8f6f 	isb	sy
 800e704:	f3bf 8f4f 	dsb	sy
 800e708:	61bb      	str	r3, [r7, #24]
 800e70a:	e7fe      	b.n	800e70a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e70c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e714:	2b00      	cmp	r3, #0
 800e716:	d00d      	beq.n	800e734 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71a:	2201      	movs	r2, #1
 800e71c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e720:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e726:	9300      	str	r3, [sp, #0]
 800e728:	4613      	mov	r3, r2
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	68b9      	ldr	r1, [r7, #8]
 800e72e:	68f8      	ldr	r0, [r7, #12]
 800e730:	f000 f844 	bl	800e7bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e736:	4618      	mov	r0, r3
 800e738:	3730      	adds	r7, #48	; 0x30
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}

0800e73e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e73e:	b580      	push	{r7, lr}
 800e740:	b08a      	sub	sp, #40	; 0x28
 800e742:	af02      	add	r7, sp, #8
 800e744:	60f8      	str	r0, [r7, #12]
 800e746:	60b9      	str	r1, [r7, #8]
 800e748:	4613      	mov	r3, r2
 800e74a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d109      	bne.n	800e766 <xQueueGenericCreate+0x28>
 800e752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e756:	f383 8811 	msr	BASEPRI, r3
 800e75a:	f3bf 8f6f 	isb	sy
 800e75e:	f3bf 8f4f 	dsb	sy
 800e762:	613b      	str	r3, [r7, #16]
 800e764:	e7fe      	b.n	800e764 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d102      	bne.n	800e772 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e76c:	2300      	movs	r3, #0
 800e76e:	61fb      	str	r3, [r7, #28]
 800e770:	e004      	b.n	800e77c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	68ba      	ldr	r2, [r7, #8]
 800e776:	fb02 f303 	mul.w	r3, r2, r3
 800e77a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	3350      	adds	r3, #80	; 0x50
 800e780:	4618      	mov	r0, r3
 800e782:	f002 ff65 	bl	8011650 <pvPortMalloc>
 800e786:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e788:	69bb      	ldr	r3, [r7, #24]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d011      	beq.n	800e7b2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	3350      	adds	r3, #80	; 0x50
 800e796:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	2200      	movs	r2, #0
 800e79c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e7a0:	79fa      	ldrb	r2, [r7, #7]
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	9300      	str	r3, [sp, #0]
 800e7a6:	4613      	mov	r3, r2
 800e7a8:	697a      	ldr	r2, [r7, #20]
 800e7aa:	68b9      	ldr	r1, [r7, #8]
 800e7ac:	68f8      	ldr	r0, [r7, #12]
 800e7ae:	f000 f805 	bl	800e7bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e7b2:	69bb      	ldr	r3, [r7, #24]
	}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3720      	adds	r7, #32
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b084      	sub	sp, #16
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	607a      	str	r2, [r7, #4]
 800e7c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d103      	bne.n	800e7d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e7d0:	69bb      	ldr	r3, [r7, #24]
 800e7d2:	69ba      	ldr	r2, [r7, #24]
 800e7d4:	601a      	str	r2, [r3, #0]
 800e7d6:	e002      	b.n	800e7de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	687a      	ldr	r2, [r7, #4]
 800e7dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e7de:	69bb      	ldr	r3, [r7, #24]
 800e7e0:	68fa      	ldr	r2, [r7, #12]
 800e7e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	68ba      	ldr	r2, [r7, #8]
 800e7e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e7ea:	2101      	movs	r1, #1
 800e7ec:	69b8      	ldr	r0, [r7, #24]
 800e7ee:	f7ff fecb 	bl	800e588 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	78fa      	ldrb	r2, [r7, #3]
 800e7f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e7fa:	bf00      	nop
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}

0800e802 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e802:	b580      	push	{r7, lr}
 800e804:	b082      	sub	sp, #8
 800e806:	af00      	add	r7, sp, #0
 800e808:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d00e      	beq.n	800e82e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2200      	movs	r2, #0
 800e814:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2200      	movs	r2, #0
 800e81a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2200      	movs	r2, #0
 800e820:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e822:	2300      	movs	r3, #0
 800e824:	2200      	movs	r2, #0
 800e826:	2100      	movs	r1, #0
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f000 f905 	bl	800ea38 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e82e:	bf00      	nop
 800e830:	3708      	adds	r7, #8
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e836:	b580      	push	{r7, lr}
 800e838:	b086      	sub	sp, #24
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	4603      	mov	r3, r0
 800e83e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e840:	2301      	movs	r3, #1
 800e842:	617b      	str	r3, [r7, #20]
 800e844:	2300      	movs	r3, #0
 800e846:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e848:	79fb      	ldrb	r3, [r7, #7]
 800e84a:	461a      	mov	r2, r3
 800e84c:	6939      	ldr	r1, [r7, #16]
 800e84e:	6978      	ldr	r0, [r7, #20]
 800e850:	f7ff ff75 	bl	800e73e <xQueueGenericCreate>
 800e854:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	f7ff ffd3 	bl	800e802 <prvInitialiseMutex>

		return xNewQueue;
 800e85c:	68fb      	ldr	r3, [r7, #12]
	}
 800e85e:	4618      	mov	r0, r3
 800e860:	3718      	adds	r7, #24
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}

0800e866 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e866:	b580      	push	{r7, lr}
 800e868:	b088      	sub	sp, #32
 800e86a:	af02      	add	r7, sp, #8
 800e86c:	4603      	mov	r3, r0
 800e86e:	6039      	str	r1, [r7, #0]
 800e870:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e872:	2301      	movs	r3, #1
 800e874:	617b      	str	r3, [r7, #20]
 800e876:	2300      	movs	r3, #0
 800e878:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e87a:	79fb      	ldrb	r3, [r7, #7]
 800e87c:	9300      	str	r3, [sp, #0]
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	2200      	movs	r2, #0
 800e882:	6939      	ldr	r1, [r7, #16]
 800e884:	6978      	ldr	r0, [r7, #20]
 800e886:	f7ff fee7 	bl	800e658 <xQueueGenericCreateStatic>
 800e88a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e88c:	68f8      	ldr	r0, [r7, #12]
 800e88e:	f7ff ffb8 	bl	800e802 <prvInitialiseMutex>

		return xNewQueue;
 800e892:	68fb      	ldr	r3, [r7, #12]
	}
 800e894:	4618      	mov	r0, r3
 800e896:	3718      	adds	r7, #24
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}

0800e89c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e89c:	b590      	push	{r4, r7, lr}
 800e89e:	b087      	sub	sp, #28
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d109      	bne.n	800e8c2 <xQueueGiveMutexRecursive+0x26>
 800e8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b2:	f383 8811 	msr	BASEPRI, r3
 800e8b6:	f3bf 8f6f 	isb	sy
 800e8ba:	f3bf 8f4f 	dsb	sy
 800e8be:	60fb      	str	r3, [r7, #12]
 800e8c0:	e7fe      	b.n	800e8c0 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	689c      	ldr	r4, [r3, #8]
 800e8c6:	f001 fd69 	bl	801039c <xTaskGetCurrentTaskHandle>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	429c      	cmp	r4, r3
 800e8ce:	d111      	bne.n	800e8f4 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	1e5a      	subs	r2, r3, #1
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d105      	bne.n	800e8ee <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	2100      	movs	r1, #0
 800e8e8:	6938      	ldr	r0, [r7, #16]
 800e8ea:	f000 f8a5 	bl	800ea38 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	617b      	str	r3, [r7, #20]
 800e8f2:	e001      	b.n	800e8f8 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e8f8:	697b      	ldr	r3, [r7, #20]
	}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	371c      	adds	r7, #28
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd90      	pop	{r4, r7, pc}

0800e902 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e902:	b590      	push	{r4, r7, lr}
 800e904:	b087      	sub	sp, #28
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
 800e90a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d109      	bne.n	800e92a <xQueueTakeMutexRecursive+0x28>
 800e916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e91a:	f383 8811 	msr	BASEPRI, r3
 800e91e:	f3bf 8f6f 	isb	sy
 800e922:	f3bf 8f4f 	dsb	sy
 800e926:	60fb      	str	r3, [r7, #12]
 800e928:	e7fe      	b.n	800e928 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	689c      	ldr	r4, [r3, #8]
 800e92e:	f001 fd35 	bl	801039c <xTaskGetCurrentTaskHandle>
 800e932:	4603      	mov	r3, r0
 800e934:	429c      	cmp	r4, r3
 800e936:	d107      	bne.n	800e948 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	68db      	ldr	r3, [r3, #12]
 800e93c:	1c5a      	adds	r2, r3, #1
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e942:	2301      	movs	r3, #1
 800e944:	617b      	str	r3, [r7, #20]
 800e946:	e00c      	b.n	800e962 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e948:	6839      	ldr	r1, [r7, #0]
 800e94a:	6938      	ldr	r0, [r7, #16]
 800e94c:	f000 fb68 	bl	800f020 <xQueueSemaphoreTake>
 800e950:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d004      	beq.n	800e962 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	1c5a      	adds	r2, r3, #1
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e962:	697b      	ldr	r3, [r7, #20]
	}
 800e964:	4618      	mov	r0, r3
 800e966:	371c      	adds	r7, #28
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd90      	pop	{r4, r7, pc}

0800e96c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b08a      	sub	sp, #40	; 0x28
 800e970:	af02      	add	r7, sp, #8
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d109      	bne.n	800e992 <xQueueCreateCountingSemaphoreStatic+0x26>
 800e97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e982:	f383 8811 	msr	BASEPRI, r3
 800e986:	f3bf 8f6f 	isb	sy
 800e98a:	f3bf 8f4f 	dsb	sy
 800e98e:	61bb      	str	r3, [r7, #24]
 800e990:	e7fe      	b.n	800e990 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e992:	68ba      	ldr	r2, [r7, #8]
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	429a      	cmp	r2, r3
 800e998:	d909      	bls.n	800e9ae <xQueueCreateCountingSemaphoreStatic+0x42>
 800e99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99e:	f383 8811 	msr	BASEPRI, r3
 800e9a2:	f3bf 8f6f 	isb	sy
 800e9a6:	f3bf 8f4f 	dsb	sy
 800e9aa:	617b      	str	r3, [r7, #20]
 800e9ac:	e7fe      	b.n	800e9ac <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e9ae:	2302      	movs	r3, #2
 800e9b0:	9300      	str	r3, [sp, #0]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	2100      	movs	r1, #0
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f7ff fe4d 	bl	800e658 <xQueueGenericCreateStatic>
 800e9be:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e9c0:	69fb      	ldr	r3, [r7, #28]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d002      	beq.n	800e9cc <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e9c6:	69fb      	ldr	r3, [r7, #28]
 800e9c8:	68ba      	ldr	r2, [r7, #8]
 800e9ca:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e9cc:	69fb      	ldr	r3, [r7, #28]
	}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3720      	adds	r7, #32
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}

0800e9d6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e9d6:	b580      	push	{r7, lr}
 800e9d8:	b086      	sub	sp, #24
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6078      	str	r0, [r7, #4]
 800e9de:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d109      	bne.n	800e9fa <xQueueCreateCountingSemaphore+0x24>
 800e9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ea:	f383 8811 	msr	BASEPRI, r3
 800e9ee:	f3bf 8f6f 	isb	sy
 800e9f2:	f3bf 8f4f 	dsb	sy
 800e9f6:	613b      	str	r3, [r7, #16]
 800e9f8:	e7fe      	b.n	800e9f8 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e9fa:	683a      	ldr	r2, [r7, #0]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d909      	bls.n	800ea16 <xQueueCreateCountingSemaphore+0x40>
 800ea02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	60fb      	str	r3, [r7, #12]
 800ea14:	e7fe      	b.n	800ea14 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ea16:	2202      	movs	r2, #2
 800ea18:	2100      	movs	r1, #0
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f7ff fe8f 	bl	800e73e <xQueueGenericCreate>
 800ea20:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d002      	beq.n	800ea2e <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	683a      	ldr	r2, [r7, #0]
 800ea2c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ea2e:	697b      	ldr	r3, [r7, #20]
	}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3718      	adds	r7, #24
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}

0800ea38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b08e      	sub	sp, #56	; 0x38
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	607a      	str	r2, [r7, #4]
 800ea44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ea46:	2300      	movs	r3, #0
 800ea48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d109      	bne.n	800ea68 <xQueueGenericSend+0x30>
 800ea54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea58:	f383 8811 	msr	BASEPRI, r3
 800ea5c:	f3bf 8f6f 	isb	sy
 800ea60:	f3bf 8f4f 	dsb	sy
 800ea64:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea66:	e7fe      	b.n	800ea66 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d103      	bne.n	800ea76 <xQueueGenericSend+0x3e>
 800ea6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d101      	bne.n	800ea7a <xQueueGenericSend+0x42>
 800ea76:	2301      	movs	r3, #1
 800ea78:	e000      	b.n	800ea7c <xQueueGenericSend+0x44>
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d109      	bne.n	800ea94 <xQueueGenericSend+0x5c>
 800ea80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea84:	f383 8811 	msr	BASEPRI, r3
 800ea88:	f3bf 8f6f 	isb	sy
 800ea8c:	f3bf 8f4f 	dsb	sy
 800ea90:	627b      	str	r3, [r7, #36]	; 0x24
 800ea92:	e7fe      	b.n	800ea92 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	2b02      	cmp	r3, #2
 800ea98:	d103      	bne.n	800eaa2 <xQueueGenericSend+0x6a>
 800ea9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d101      	bne.n	800eaa6 <xQueueGenericSend+0x6e>
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	e000      	b.n	800eaa8 <xQueueGenericSend+0x70>
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d109      	bne.n	800eac0 <xQueueGenericSend+0x88>
 800eaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab0:	f383 8811 	msr	BASEPRI, r3
 800eab4:	f3bf 8f6f 	isb	sy
 800eab8:	f3bf 8f4f 	dsb	sy
 800eabc:	623b      	str	r3, [r7, #32]
 800eabe:	e7fe      	b.n	800eabe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eac0:	f001 fc7c 	bl	80103bc <xTaskGetSchedulerState>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d102      	bne.n	800ead0 <xQueueGenericSend+0x98>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d101      	bne.n	800ead4 <xQueueGenericSend+0x9c>
 800ead0:	2301      	movs	r3, #1
 800ead2:	e000      	b.n	800ead6 <xQueueGenericSend+0x9e>
 800ead4:	2300      	movs	r3, #0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d109      	bne.n	800eaee <xQueueGenericSend+0xb6>
 800eada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eade:	f383 8811 	msr	BASEPRI, r3
 800eae2:	f3bf 8f6f 	isb	sy
 800eae6:	f3bf 8f4f 	dsb	sy
 800eaea:	61fb      	str	r3, [r7, #28]
 800eaec:	e7fe      	b.n	800eaec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eaee:	f002 fc95 	bl	801141c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d302      	bcc.n	800eb04 <xQueueGenericSend+0xcc>
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	2b02      	cmp	r3, #2
 800eb02:	d129      	bne.n	800eb58 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eb04:	683a      	ldr	r2, [r7, #0]
 800eb06:	68b9      	ldr	r1, [r7, #8]
 800eb08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb0a:	f000 fc48 	bl	800f39e <prvCopyDataToQueue>
 800eb0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d010      	beq.n	800eb3a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1a:	3324      	adds	r3, #36	; 0x24
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f001 fa5f 	bl	800ffe0 <xTaskRemoveFromEventList>
 800eb22:	4603      	mov	r3, r0
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d013      	beq.n	800eb50 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800eb28:	4b3f      	ldr	r3, [pc, #252]	; (800ec28 <xQueueGenericSend+0x1f0>)
 800eb2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb2e:	601a      	str	r2, [r3, #0]
 800eb30:	f3bf 8f4f 	dsb	sy
 800eb34:	f3bf 8f6f 	isb	sy
 800eb38:	e00a      	b.n	800eb50 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d007      	beq.n	800eb50 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eb40:	4b39      	ldr	r3, [pc, #228]	; (800ec28 <xQueueGenericSend+0x1f0>)
 800eb42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb46:	601a      	str	r2, [r3, #0]
 800eb48:	f3bf 8f4f 	dsb	sy
 800eb4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800eb50:	f002 fc92 	bl	8011478 <vPortExitCritical>
				return pdPASS;
 800eb54:	2301      	movs	r3, #1
 800eb56:	e063      	b.n	800ec20 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d103      	bne.n	800eb66 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eb5e:	f002 fc8b 	bl	8011478 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800eb62:	2300      	movs	r3, #0
 800eb64:	e05c      	b.n	800ec20 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d106      	bne.n	800eb7a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb6c:	f107 0314 	add.w	r3, r7, #20
 800eb70:	4618      	mov	r0, r3
 800eb72:	f001 fa99 	bl	80100a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb76:	2301      	movs	r3, #1
 800eb78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb7a:	f002 fc7d 	bl	8011478 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb7e:	f000 ffdb 	bl	800fb38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb82:	f002 fc4b 	bl	801141c <vPortEnterCritical>
 800eb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb8c:	b25b      	sxtb	r3, r3
 800eb8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb92:	d103      	bne.n	800eb9c <xQueueGenericSend+0x164>
 800eb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb96:	2200      	movs	r2, #0
 800eb98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eba2:	b25b      	sxtb	r3, r3
 800eba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba8:	d103      	bne.n	800ebb2 <xQueueGenericSend+0x17a>
 800ebaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebac:	2200      	movs	r2, #0
 800ebae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebb2:	f002 fc61 	bl	8011478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ebb6:	1d3a      	adds	r2, r7, #4
 800ebb8:	f107 0314 	add.w	r3, r7, #20
 800ebbc:	4611      	mov	r1, r2
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f001 fa88 	bl	80100d4 <xTaskCheckForTimeOut>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d124      	bne.n	800ec14 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ebca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebcc:	f000 fcdf 	bl	800f58e <prvIsQueueFull>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d018      	beq.n	800ec08 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd8:	3310      	adds	r3, #16
 800ebda:	687a      	ldr	r2, [r7, #4]
 800ebdc:	4611      	mov	r1, r2
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f001 f9b0 	bl	800ff44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ebe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebe6:	f000 fc6a 	bl	800f4be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ebea:	f000 ffeb 	bl	800fbc4 <xTaskResumeAll>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	f47f af7c 	bne.w	800eaee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ebf6:	4b0c      	ldr	r3, [pc, #48]	; (800ec28 <xQueueGenericSend+0x1f0>)
 800ebf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebfc:	601a      	str	r2, [r3, #0]
 800ebfe:	f3bf 8f4f 	dsb	sy
 800ec02:	f3bf 8f6f 	isb	sy
 800ec06:	e772      	b.n	800eaee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ec08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec0a:	f000 fc58 	bl	800f4be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec0e:	f000 ffd9 	bl	800fbc4 <xTaskResumeAll>
 800ec12:	e76c      	b.n	800eaee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ec14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec16:	f000 fc52 	bl	800f4be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec1a:	f000 ffd3 	bl	800fbc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ec1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3738      	adds	r7, #56	; 0x38
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}
 800ec28:	e000ed04 	.word	0xe000ed04

0800ec2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b08e      	sub	sp, #56	; 0x38
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	60b9      	str	r1, [r7, #8]
 800ec36:	607a      	str	r2, [r7, #4]
 800ec38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ec3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d109      	bne.n	800ec58 <xQueueGenericSendFromISR+0x2c>
 800ec44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec48:	f383 8811 	msr	BASEPRI, r3
 800ec4c:	f3bf 8f6f 	isb	sy
 800ec50:	f3bf 8f4f 	dsb	sy
 800ec54:	627b      	str	r3, [r7, #36]	; 0x24
 800ec56:	e7fe      	b.n	800ec56 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d103      	bne.n	800ec66 <xQueueGenericSendFromISR+0x3a>
 800ec5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d101      	bne.n	800ec6a <xQueueGenericSendFromISR+0x3e>
 800ec66:	2301      	movs	r3, #1
 800ec68:	e000      	b.n	800ec6c <xQueueGenericSendFromISR+0x40>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d109      	bne.n	800ec84 <xQueueGenericSendFromISR+0x58>
 800ec70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec74:	f383 8811 	msr	BASEPRI, r3
 800ec78:	f3bf 8f6f 	isb	sy
 800ec7c:	f3bf 8f4f 	dsb	sy
 800ec80:	623b      	str	r3, [r7, #32]
 800ec82:	e7fe      	b.n	800ec82 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	2b02      	cmp	r3, #2
 800ec88:	d103      	bne.n	800ec92 <xQueueGenericSendFromISR+0x66>
 800ec8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	d101      	bne.n	800ec96 <xQueueGenericSendFromISR+0x6a>
 800ec92:	2301      	movs	r3, #1
 800ec94:	e000      	b.n	800ec98 <xQueueGenericSendFromISR+0x6c>
 800ec96:	2300      	movs	r3, #0
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d109      	bne.n	800ecb0 <xQueueGenericSendFromISR+0x84>
 800ec9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca0:	f383 8811 	msr	BASEPRI, r3
 800eca4:	f3bf 8f6f 	isb	sy
 800eca8:	f3bf 8f4f 	dsb	sy
 800ecac:	61fb      	str	r3, [r7, #28]
 800ecae:	e7fe      	b.n	800ecae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ecb0:	f002 fc90 	bl	80115d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ecb4:	f3ef 8211 	mrs	r2, BASEPRI
 800ecb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecbc:	f383 8811 	msr	BASEPRI, r3
 800ecc0:	f3bf 8f6f 	isb	sy
 800ecc4:	f3bf 8f4f 	dsb	sy
 800ecc8:	61ba      	str	r2, [r7, #24]
 800ecca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800eccc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ecce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ecd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d302      	bcc.n	800ece2 <xQueueGenericSendFromISR+0xb6>
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	2b02      	cmp	r3, #2
 800ece0:	d12c      	bne.n	800ed3c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ece2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ece8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ecec:	683a      	ldr	r2, [r7, #0]
 800ecee:	68b9      	ldr	r1, [r7, #8]
 800ecf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecf2:	f000 fb54 	bl	800f39e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ecf6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ecfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecfe:	d112      	bne.n	800ed26 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d016      	beq.n	800ed36 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0a:	3324      	adds	r3, #36	; 0x24
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f001 f967 	bl	800ffe0 <xTaskRemoveFromEventList>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d00e      	beq.n	800ed36 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d00b      	beq.n	800ed36 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2201      	movs	r2, #1
 800ed22:	601a      	str	r2, [r3, #0]
 800ed24:	e007      	b.n	800ed36 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ed26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	b25a      	sxtb	r2, r3
 800ed30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ed36:	2301      	movs	r3, #1
 800ed38:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ed3a:	e001      	b.n	800ed40 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	637b      	str	r3, [r7, #52]	; 0x34
 800ed40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed42:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3738      	adds	r7, #56	; 0x38
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b08e      	sub	sp, #56	; 0x38
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ed62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d109      	bne.n	800ed7c <xQueueGiveFromISR+0x28>
	__asm volatile
 800ed68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6c:	f383 8811 	msr	BASEPRI, r3
 800ed70:	f3bf 8f6f 	isb	sy
 800ed74:	f3bf 8f4f 	dsb	sy
 800ed78:	623b      	str	r3, [r7, #32]
 800ed7a:	e7fe      	b.n	800ed7a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ed7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d009      	beq.n	800ed98 <xQueueGiveFromISR+0x44>
 800ed84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed88:	f383 8811 	msr	BASEPRI, r3
 800ed8c:	f3bf 8f6f 	isb	sy
 800ed90:	f3bf 8f4f 	dsb	sy
 800ed94:	61fb      	str	r3, [r7, #28]
 800ed96:	e7fe      	b.n	800ed96 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ed98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d103      	bne.n	800eda8 <xQueueGiveFromISR+0x54>
 800eda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda2:	689b      	ldr	r3, [r3, #8]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d101      	bne.n	800edac <xQueueGiveFromISR+0x58>
 800eda8:	2301      	movs	r3, #1
 800edaa:	e000      	b.n	800edae <xQueueGiveFromISR+0x5a>
 800edac:	2300      	movs	r3, #0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d109      	bne.n	800edc6 <xQueueGiveFromISR+0x72>
 800edb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	61bb      	str	r3, [r7, #24]
 800edc4:	e7fe      	b.n	800edc4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800edc6:	f002 fc05 	bl	80115d4 <vPortValidateInterruptPriority>
	__asm volatile
 800edca:	f3ef 8211 	mrs	r2, BASEPRI
 800edce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd2:	f383 8811 	msr	BASEPRI, r3
 800edd6:	f3bf 8f6f 	isb	sy
 800edda:	f3bf 8f4f 	dsb	sy
 800edde:	617a      	str	r2, [r7, #20]
 800ede0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ede2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ede4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ede6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800edec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d22b      	bcs.n	800ee4e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800edf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800edfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ee00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee02:	1c5a      	adds	r2, r3, #1
 800ee04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee06:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ee08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ee0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee10:	d112      	bne.n	800ee38 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d016      	beq.n	800ee48 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1c:	3324      	adds	r3, #36	; 0x24
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f001 f8de 	bl	800ffe0 <xTaskRemoveFromEventList>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00e      	beq.n	800ee48 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d00b      	beq.n	800ee48 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	2201      	movs	r2, #1
 800ee34:	601a      	str	r2, [r3, #0]
 800ee36:	e007      	b.n	800ee48 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ee38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	b25a      	sxtb	r2, r3
 800ee42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	637b      	str	r3, [r7, #52]	; 0x34
 800ee4c:	e001      	b.n	800ee52 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	637b      	str	r3, [r7, #52]	; 0x34
 800ee52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee54:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3738      	adds	r7, #56	; 0x38
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
	...

0800ee68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b08c      	sub	sp, #48	; 0x30
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	60b9      	str	r1, [r7, #8]
 800ee72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ee74:	2300      	movs	r3, #0
 800ee76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ee7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d109      	bne.n	800ee96 <xQueueReceive+0x2e>
	__asm volatile
 800ee82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee86:	f383 8811 	msr	BASEPRI, r3
 800ee8a:	f3bf 8f6f 	isb	sy
 800ee8e:	f3bf 8f4f 	dsb	sy
 800ee92:	623b      	str	r3, [r7, #32]
 800ee94:	e7fe      	b.n	800ee94 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d103      	bne.n	800eea4 <xQueueReceive+0x3c>
 800ee9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d101      	bne.n	800eea8 <xQueueReceive+0x40>
 800eea4:	2301      	movs	r3, #1
 800eea6:	e000      	b.n	800eeaa <xQueueReceive+0x42>
 800eea8:	2300      	movs	r3, #0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d109      	bne.n	800eec2 <xQueueReceive+0x5a>
 800eeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb2:	f383 8811 	msr	BASEPRI, r3
 800eeb6:	f3bf 8f6f 	isb	sy
 800eeba:	f3bf 8f4f 	dsb	sy
 800eebe:	61fb      	str	r3, [r7, #28]
 800eec0:	e7fe      	b.n	800eec0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eec2:	f001 fa7b 	bl	80103bc <xTaskGetSchedulerState>
 800eec6:	4603      	mov	r3, r0
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d102      	bne.n	800eed2 <xQueueReceive+0x6a>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d101      	bne.n	800eed6 <xQueueReceive+0x6e>
 800eed2:	2301      	movs	r3, #1
 800eed4:	e000      	b.n	800eed8 <xQueueReceive+0x70>
 800eed6:	2300      	movs	r3, #0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d109      	bne.n	800eef0 <xQueueReceive+0x88>
 800eedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee0:	f383 8811 	msr	BASEPRI, r3
 800eee4:	f3bf 8f6f 	isb	sy
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	61bb      	str	r3, [r7, #24]
 800eeee:	e7fe      	b.n	800eeee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eef0:	f002 fa94 	bl	801141c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eef8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d01f      	beq.n	800ef40 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef00:	68b9      	ldr	r1, [r7, #8]
 800ef02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef04:	f000 fab5 	bl	800f472 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0a:	1e5a      	subs	r2, r3, #1
 800ef0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef12:	691b      	ldr	r3, [r3, #16]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d00f      	beq.n	800ef38 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1a:	3310      	adds	r3, #16
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f001 f85f 	bl	800ffe0 <xTaskRemoveFromEventList>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d007      	beq.n	800ef38 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ef28:	4b3c      	ldr	r3, [pc, #240]	; (800f01c <xQueueReceive+0x1b4>)
 800ef2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef2e:	601a      	str	r2, [r3, #0]
 800ef30:	f3bf 8f4f 	dsb	sy
 800ef34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ef38:	f002 fa9e 	bl	8011478 <vPortExitCritical>
				return pdPASS;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	e069      	b.n	800f014 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d103      	bne.n	800ef4e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef46:	f002 fa97 	bl	8011478 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	e062      	b.n	800f014 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d106      	bne.n	800ef62 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef54:	f107 0310 	add.w	r3, r7, #16
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f001 f8a5 	bl	80100a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef5e:	2301      	movs	r3, #1
 800ef60:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef62:	f002 fa89 	bl	8011478 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef66:	f000 fde7 	bl	800fb38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef6a:	f002 fa57 	bl	801141c <vPortEnterCritical>
 800ef6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef74:	b25b      	sxtb	r3, r3
 800ef76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef7a:	d103      	bne.n	800ef84 <xQueueReceive+0x11c>
 800ef7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7e:	2200      	movs	r2, #0
 800ef80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef8a:	b25b      	sxtb	r3, r3
 800ef8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef90:	d103      	bne.n	800ef9a <xQueueReceive+0x132>
 800ef92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef94:	2200      	movs	r2, #0
 800ef96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef9a:	f002 fa6d 	bl	8011478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef9e:	1d3a      	adds	r2, r7, #4
 800efa0:	f107 0310 	add.w	r3, r7, #16
 800efa4:	4611      	mov	r1, r2
 800efa6:	4618      	mov	r0, r3
 800efa8:	f001 f894 	bl	80100d4 <xTaskCheckForTimeOut>
 800efac:	4603      	mov	r3, r0
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d123      	bne.n	800effa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800efb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efb4:	f000 fad5 	bl	800f562 <prvIsQueueEmpty>
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d017      	beq.n	800efee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800efbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc0:	3324      	adds	r3, #36	; 0x24
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	4611      	mov	r1, r2
 800efc6:	4618      	mov	r0, r3
 800efc8:	f000 ffbc 	bl	800ff44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800efcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efce:	f000 fa76 	bl	800f4be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800efd2:	f000 fdf7 	bl	800fbc4 <xTaskResumeAll>
 800efd6:	4603      	mov	r3, r0
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d189      	bne.n	800eef0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800efdc:	4b0f      	ldr	r3, [pc, #60]	; (800f01c <xQueueReceive+0x1b4>)
 800efde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efe2:	601a      	str	r2, [r3, #0]
 800efe4:	f3bf 8f4f 	dsb	sy
 800efe8:	f3bf 8f6f 	isb	sy
 800efec:	e780      	b.n	800eef0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800efee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eff0:	f000 fa65 	bl	800f4be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eff4:	f000 fde6 	bl	800fbc4 <xTaskResumeAll>
 800eff8:	e77a      	b.n	800eef0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800effa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800effc:	f000 fa5f 	bl	800f4be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f000:	f000 fde0 	bl	800fbc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f006:	f000 faac 	bl	800f562 <prvIsQueueEmpty>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	f43f af6f 	beq.w	800eef0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f012:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f014:	4618      	mov	r0, r3
 800f016:	3730      	adds	r7, #48	; 0x30
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}
 800f01c:	e000ed04 	.word	0xe000ed04

0800f020 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b08e      	sub	sp, #56	; 0x38
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f02a:	2300      	movs	r3, #0
 800f02c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f032:	2300      	movs	r3, #0
 800f034:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d109      	bne.n	800f050 <xQueueSemaphoreTake+0x30>
 800f03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f040:	f383 8811 	msr	BASEPRI, r3
 800f044:	f3bf 8f6f 	isb	sy
 800f048:	f3bf 8f4f 	dsb	sy
 800f04c:	623b      	str	r3, [r7, #32]
 800f04e:	e7fe      	b.n	800f04e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f054:	2b00      	cmp	r3, #0
 800f056:	d009      	beq.n	800f06c <xQueueSemaphoreTake+0x4c>
 800f058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f05c:	f383 8811 	msr	BASEPRI, r3
 800f060:	f3bf 8f6f 	isb	sy
 800f064:	f3bf 8f4f 	dsb	sy
 800f068:	61fb      	str	r3, [r7, #28]
 800f06a:	e7fe      	b.n	800f06a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f06c:	f001 f9a6 	bl	80103bc <xTaskGetSchedulerState>
 800f070:	4603      	mov	r3, r0
 800f072:	2b00      	cmp	r3, #0
 800f074:	d102      	bne.n	800f07c <xQueueSemaphoreTake+0x5c>
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d101      	bne.n	800f080 <xQueueSemaphoreTake+0x60>
 800f07c:	2301      	movs	r3, #1
 800f07e:	e000      	b.n	800f082 <xQueueSemaphoreTake+0x62>
 800f080:	2300      	movs	r3, #0
 800f082:	2b00      	cmp	r3, #0
 800f084:	d109      	bne.n	800f09a <xQueueSemaphoreTake+0x7a>
 800f086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f08a:	f383 8811 	msr	BASEPRI, r3
 800f08e:	f3bf 8f6f 	isb	sy
 800f092:	f3bf 8f4f 	dsb	sy
 800f096:	61bb      	str	r3, [r7, #24]
 800f098:	e7fe      	b.n	800f098 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f09a:	f002 f9bf 	bl	801141c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0a2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d024      	beq.n	800f0f4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ac:	1e5a      	subs	r2, r3, #1
 800f0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d104      	bne.n	800f0c4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f0ba:	f001 faf1 	bl	80106a0 <pvTaskIncrementMutexHeldCount>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c6:	691b      	ldr	r3, [r3, #16]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00f      	beq.n	800f0ec <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ce:	3310      	adds	r3, #16
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f000 ff85 	bl	800ffe0 <xTaskRemoveFromEventList>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d007      	beq.n	800f0ec <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f0dc:	4b53      	ldr	r3, [pc, #332]	; (800f22c <xQueueSemaphoreTake+0x20c>)
 800f0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0e2:	601a      	str	r2, [r3, #0]
 800f0e4:	f3bf 8f4f 	dsb	sy
 800f0e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f0ec:	f002 f9c4 	bl	8011478 <vPortExitCritical>
				return pdPASS;
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	e096      	b.n	800f222 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d110      	bne.n	800f11c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d009      	beq.n	800f114 <xQueueSemaphoreTake+0xf4>
 800f100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f104:	f383 8811 	msr	BASEPRI, r3
 800f108:	f3bf 8f6f 	isb	sy
 800f10c:	f3bf 8f4f 	dsb	sy
 800f110:	617b      	str	r3, [r7, #20]
 800f112:	e7fe      	b.n	800f112 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f114:	f002 f9b0 	bl	8011478 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f118:	2300      	movs	r3, #0
 800f11a:	e082      	b.n	800f222 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d106      	bne.n	800f130 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f122:	f107 030c 	add.w	r3, r7, #12
 800f126:	4618      	mov	r0, r3
 800f128:	f000 ffbe 	bl	80100a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f12c:	2301      	movs	r3, #1
 800f12e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f130:	f002 f9a2 	bl	8011478 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f134:	f000 fd00 	bl	800fb38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f138:	f002 f970 	bl	801141c <vPortEnterCritical>
 800f13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f142:	b25b      	sxtb	r3, r3
 800f144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f148:	d103      	bne.n	800f152 <xQueueSemaphoreTake+0x132>
 800f14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14c:	2200      	movs	r2, #0
 800f14e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f158:	b25b      	sxtb	r3, r3
 800f15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f15e:	d103      	bne.n	800f168 <xQueueSemaphoreTake+0x148>
 800f160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f162:	2200      	movs	r2, #0
 800f164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f168:	f002 f986 	bl	8011478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f16c:	463a      	mov	r2, r7
 800f16e:	f107 030c 	add.w	r3, r7, #12
 800f172:	4611      	mov	r1, r2
 800f174:	4618      	mov	r0, r3
 800f176:	f000 ffad 	bl	80100d4 <xTaskCheckForTimeOut>
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d132      	bne.n	800f1e6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f180:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f182:	f000 f9ee 	bl	800f562 <prvIsQueueEmpty>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d026      	beq.n	800f1da <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d109      	bne.n	800f1a8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800f194:	f002 f942 	bl	801141c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19a:	689b      	ldr	r3, [r3, #8]
 800f19c:	4618      	mov	r0, r3
 800f19e:	f001 f92b 	bl	80103f8 <xTaskPriorityInherit>
 800f1a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f1a4:	f002 f968 	bl	8011478 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1aa:	3324      	adds	r3, #36	; 0x24
 800f1ac:	683a      	ldr	r2, [r7, #0]
 800f1ae:	4611      	mov	r1, r2
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f000 fec7 	bl	800ff44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f1b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1b8:	f000 f981 	bl	800f4be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f1bc:	f000 fd02 	bl	800fbc4 <xTaskResumeAll>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	f47f af69 	bne.w	800f09a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800f1c8:	4b18      	ldr	r3, [pc, #96]	; (800f22c <xQueueSemaphoreTake+0x20c>)
 800f1ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1ce:	601a      	str	r2, [r3, #0]
 800f1d0:	f3bf 8f4f 	dsb	sy
 800f1d4:	f3bf 8f6f 	isb	sy
 800f1d8:	e75f      	b.n	800f09a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f1da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1dc:	f000 f96f 	bl	800f4be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f1e0:	f000 fcf0 	bl	800fbc4 <xTaskResumeAll>
 800f1e4:	e759      	b.n	800f09a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f1e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1e8:	f000 f969 	bl	800f4be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f1ec:	f000 fcea 	bl	800fbc4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1f2:	f000 f9b6 	bl	800f562 <prvIsQueueEmpty>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	f43f af4e 	beq.w	800f09a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f200:	2b00      	cmp	r3, #0
 800f202:	d00d      	beq.n	800f220 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800f204:	f002 f90a 	bl	801141c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f20a:	f000 f8b0 	bl	800f36e <prvGetDisinheritPriorityAfterTimeout>
 800f20e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f212:	689b      	ldr	r3, [r3, #8]
 800f214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f216:	4618      	mov	r0, r3
 800f218:	f001 f9c2 	bl	80105a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f21c:	f002 f92c 	bl	8011478 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f220:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f222:	4618      	mov	r0, r3
 800f224:	3738      	adds	r7, #56	; 0x38
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	e000ed04 	.word	0xe000ed04

0800f230 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b08e      	sub	sp, #56	; 0x38
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f242:	2b00      	cmp	r3, #0
 800f244:	d109      	bne.n	800f25a <xQueueReceiveFromISR+0x2a>
 800f246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f24a:	f383 8811 	msr	BASEPRI, r3
 800f24e:	f3bf 8f6f 	isb	sy
 800f252:	f3bf 8f4f 	dsb	sy
 800f256:	623b      	str	r3, [r7, #32]
 800f258:	e7fe      	b.n	800f258 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d103      	bne.n	800f268 <xQueueReceiveFromISR+0x38>
 800f260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f264:	2b00      	cmp	r3, #0
 800f266:	d101      	bne.n	800f26c <xQueueReceiveFromISR+0x3c>
 800f268:	2301      	movs	r3, #1
 800f26a:	e000      	b.n	800f26e <xQueueReceiveFromISR+0x3e>
 800f26c:	2300      	movs	r3, #0
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d109      	bne.n	800f286 <xQueueReceiveFromISR+0x56>
 800f272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f276:	f383 8811 	msr	BASEPRI, r3
 800f27a:	f3bf 8f6f 	isb	sy
 800f27e:	f3bf 8f4f 	dsb	sy
 800f282:	61fb      	str	r3, [r7, #28]
 800f284:	e7fe      	b.n	800f284 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f286:	f002 f9a5 	bl	80115d4 <vPortValidateInterruptPriority>
	__asm volatile
 800f28a:	f3ef 8211 	mrs	r2, BASEPRI
 800f28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f292:	f383 8811 	msr	BASEPRI, r3
 800f296:	f3bf 8f6f 	isb	sy
 800f29a:	f3bf 8f4f 	dsb	sy
 800f29e:	61ba      	str	r2, [r7, #24]
 800f2a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f2a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d02f      	beq.n	800f312 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f2bc:	68b9      	ldr	r1, [r7, #8]
 800f2be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2c0:	f000 f8d7 	bl	800f472 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c6:	1e5a      	subs	r2, r3, #1
 800f2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f2cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2d4:	d112      	bne.n	800f2fc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d8:	691b      	ldr	r3, [r3, #16]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d016      	beq.n	800f30c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e0:	3310      	adds	r3, #16
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f000 fe7c 	bl	800ffe0 <xTaskRemoveFromEventList>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d00e      	beq.n	800f30c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d00b      	beq.n	800f30c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	601a      	str	r2, [r3, #0]
 800f2fa:	e007      	b.n	800f30c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f300:	3301      	adds	r3, #1
 800f302:	b2db      	uxtb	r3, r3
 800f304:	b25a      	sxtb	r2, r3
 800f306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f30c:	2301      	movs	r3, #1
 800f30e:	637b      	str	r3, [r7, #52]	; 0x34
 800f310:	e001      	b.n	800f316 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800f312:	2300      	movs	r3, #0
 800f314:	637b      	str	r3, [r7, #52]	; 0x34
 800f316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f318:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f322:	4618      	mov	r0, r3
 800f324:	3738      	adds	r7, #56	; 0x38
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}

0800f32a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f32a:	b580      	push	{r7, lr}
 800f32c:	b084      	sub	sp, #16
 800f32e:	af00      	add	r7, sp, #0
 800f330:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d109      	bne.n	800f350 <vQueueDelete+0x26>
	__asm volatile
 800f33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f340:	f383 8811 	msr	BASEPRI, r3
 800f344:	f3bf 8f6f 	isb	sy
 800f348:	f3bf 8f4f 	dsb	sy
 800f34c:	60bb      	str	r3, [r7, #8]
 800f34e:	e7fe      	b.n	800f34e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f350:	68f8      	ldr	r0, [r7, #12]
 800f352:	f000 f95d 	bl	800f610 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d102      	bne.n	800f366 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800f360:	68f8      	ldr	r0, [r7, #12]
 800f362:	f002 fa37 	bl	80117d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f366:	bf00      	nop
 800f368:	3710      	adds	r7, #16
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}

0800f36e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f36e:	b480      	push	{r7}
 800f370:	b085      	sub	sp, #20
 800f372:	af00      	add	r7, sp, #0
 800f374:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d006      	beq.n	800f38c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f388:	60fb      	str	r3, [r7, #12]
 800f38a:	e001      	b.n	800f390 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f38c:	2300      	movs	r3, #0
 800f38e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f390:	68fb      	ldr	r3, [r7, #12]
	}
 800f392:	4618      	mov	r0, r3
 800f394:	3714      	adds	r7, #20
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr

0800f39e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f39e:	b580      	push	{r7, lr}
 800f3a0:	b086      	sub	sp, #24
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	60f8      	str	r0, [r7, #12]
 800f3a6:	60b9      	str	r1, [r7, #8]
 800f3a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d10d      	bne.n	800f3d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d14d      	bne.n	800f460 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	689b      	ldr	r3, [r3, #8]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f001 f87d 	bl	80104c8 <xTaskPriorityDisinherit>
 800f3ce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	609a      	str	r2, [r3, #8]
 800f3d6:	e043      	b.n	800f460 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d119      	bne.n	800f412 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6858      	ldr	r0, [r3, #4]
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	68b9      	ldr	r1, [r7, #8]
 800f3ea:	f004 f889 	bl	8013500 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	685a      	ldr	r2, [r3, #4]
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3f6:	441a      	add	r2, r3
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	685a      	ldr	r2, [r3, #4]
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	689b      	ldr	r3, [r3, #8]
 800f404:	429a      	cmp	r2, r3
 800f406:	d32b      	bcc.n	800f460 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	605a      	str	r2, [r3, #4]
 800f410:	e026      	b.n	800f460 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	68d8      	ldr	r0, [r3, #12]
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f41a:	461a      	mov	r2, r3
 800f41c:	68b9      	ldr	r1, [r7, #8]
 800f41e:	f004 f86f 	bl	8013500 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	68da      	ldr	r2, [r3, #12]
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f42a:	425b      	negs	r3, r3
 800f42c:	441a      	add	r2, r3
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	68da      	ldr	r2, [r3, #12]
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d207      	bcs.n	800f44e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	689a      	ldr	r2, [r3, #8]
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f446:	425b      	negs	r3, r3
 800f448:	441a      	add	r2, r3
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2b02      	cmp	r3, #2
 800f452:	d105      	bne.n	800f460 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d002      	beq.n	800f460 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	3b01      	subs	r3, #1
 800f45e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	1c5a      	adds	r2, r3, #1
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f468:	697b      	ldr	r3, [r7, #20]
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3718      	adds	r7, #24
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}

0800f472 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f472:	b580      	push	{r7, lr}
 800f474:	b082      	sub	sp, #8
 800f476:	af00      	add	r7, sp, #0
 800f478:	6078      	str	r0, [r7, #4]
 800f47a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f480:	2b00      	cmp	r3, #0
 800f482:	d018      	beq.n	800f4b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	68da      	ldr	r2, [r3, #12]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f48c:	441a      	add	r2, r3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	68da      	ldr	r2, [r3, #12]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	689b      	ldr	r3, [r3, #8]
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d303      	bcc.n	800f4a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681a      	ldr	r2, [r3, #0]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	68d9      	ldr	r1, [r3, #12]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	6838      	ldr	r0, [r7, #0]
 800f4b2:	f004 f825 	bl	8013500 <memcpy>
	}
}
 800f4b6:	bf00      	nop
 800f4b8:	3708      	adds	r7, #8
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}

0800f4be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b084      	sub	sp, #16
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f4c6:	f001 ffa9 	bl	801141c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f4d2:	e011      	b.n	800f4f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d012      	beq.n	800f502 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	3324      	adds	r3, #36	; 0x24
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f000 fd7d 	bl	800ffe0 <xTaskRemoveFromEventList>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d001      	beq.n	800f4f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f4ec:	f000 fe52 	bl	8010194 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f4f0:	7bfb      	ldrb	r3, [r7, #15]
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	b2db      	uxtb	r3, r3
 800f4f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f4f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	dce9      	bgt.n	800f4d4 <prvUnlockQueue+0x16>
 800f500:	e000      	b.n	800f504 <prvUnlockQueue+0x46>
					break;
 800f502:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	22ff      	movs	r2, #255	; 0xff
 800f508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f50c:	f001 ffb4 	bl	8011478 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f510:	f001 ff84 	bl	801141c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f51a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f51c:	e011      	b.n	800f542 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	691b      	ldr	r3, [r3, #16]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d012      	beq.n	800f54c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	3310      	adds	r3, #16
 800f52a:	4618      	mov	r0, r3
 800f52c:	f000 fd58 	bl	800ffe0 <xTaskRemoveFromEventList>
 800f530:	4603      	mov	r3, r0
 800f532:	2b00      	cmp	r3, #0
 800f534:	d001      	beq.n	800f53a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f536:	f000 fe2d 	bl	8010194 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f53a:	7bbb      	ldrb	r3, [r7, #14]
 800f53c:	3b01      	subs	r3, #1
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f542:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f546:	2b00      	cmp	r3, #0
 800f548:	dce9      	bgt.n	800f51e <prvUnlockQueue+0x60>
 800f54a:	e000      	b.n	800f54e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f54c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	22ff      	movs	r2, #255	; 0xff
 800f552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f556:	f001 ff8f 	bl	8011478 <vPortExitCritical>
}
 800f55a:	bf00      	nop
 800f55c:	3710      	adds	r7, #16
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}

0800f562 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f562:	b580      	push	{r7, lr}
 800f564:	b084      	sub	sp, #16
 800f566:	af00      	add	r7, sp, #0
 800f568:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f56a:	f001 ff57 	bl	801141c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f572:	2b00      	cmp	r3, #0
 800f574:	d102      	bne.n	800f57c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f576:	2301      	movs	r3, #1
 800f578:	60fb      	str	r3, [r7, #12]
 800f57a:	e001      	b.n	800f580 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f57c:	2300      	movs	r3, #0
 800f57e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f580:	f001 ff7a 	bl	8011478 <vPortExitCritical>

	return xReturn;
 800f584:	68fb      	ldr	r3, [r7, #12]
}
 800f586:	4618      	mov	r0, r3
 800f588:	3710      	adds	r7, #16
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}

0800f58e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f58e:	b580      	push	{r7, lr}
 800f590:	b084      	sub	sp, #16
 800f592:	af00      	add	r7, sp, #0
 800f594:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f596:	f001 ff41 	bl	801141c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d102      	bne.n	800f5ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	60fb      	str	r3, [r7, #12]
 800f5aa:	e001      	b.n	800f5b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f5b0:	f001 ff62 	bl	8011478 <vPortExitCritical>

	return xReturn;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3710      	adds	r7, #16
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
	...

0800f5c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b085      	sub	sp, #20
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	60fb      	str	r3, [r7, #12]
 800f5ce:	e014      	b.n	800f5fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f5d0:	4a0e      	ldr	r2, [pc, #56]	; (800f60c <vQueueAddToRegistry+0x4c>)
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d10b      	bne.n	800f5f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f5dc:	490b      	ldr	r1, [pc, #44]	; (800f60c <vQueueAddToRegistry+0x4c>)
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	683a      	ldr	r2, [r7, #0]
 800f5e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f5e6:	4a09      	ldr	r2, [pc, #36]	; (800f60c <vQueueAddToRegistry+0x4c>)
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	00db      	lsls	r3, r3, #3
 800f5ec:	4413      	add	r3, r2
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f5f2:	e005      	b.n	800f600 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	60fb      	str	r3, [r7, #12]
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	2b07      	cmp	r3, #7
 800f5fe:	d9e7      	bls.n	800f5d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f600:	bf00      	nop
 800f602:	3714      	adds	r7, #20
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr
 800f60c:	20004fc4 	.word	0x20004fc4

0800f610 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f610:	b480      	push	{r7}
 800f612:	b085      	sub	sp, #20
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f618:	2300      	movs	r3, #0
 800f61a:	60fb      	str	r3, [r7, #12]
 800f61c:	e016      	b.n	800f64c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f61e:	4a10      	ldr	r2, [pc, #64]	; (800f660 <vQueueUnregisterQueue+0x50>)
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	00db      	lsls	r3, r3, #3
 800f624:	4413      	add	r3, r2
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	687a      	ldr	r2, [r7, #4]
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d10b      	bne.n	800f646 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f62e:	4a0c      	ldr	r2, [pc, #48]	; (800f660 <vQueueUnregisterQueue+0x50>)
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	2100      	movs	r1, #0
 800f634:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f638:	4a09      	ldr	r2, [pc, #36]	; (800f660 <vQueueUnregisterQueue+0x50>)
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	00db      	lsls	r3, r3, #3
 800f63e:	4413      	add	r3, r2
 800f640:	2200      	movs	r2, #0
 800f642:	605a      	str	r2, [r3, #4]
				break;
 800f644:	e005      	b.n	800f652 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	3301      	adds	r3, #1
 800f64a:	60fb      	str	r3, [r7, #12]
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	2b07      	cmp	r3, #7
 800f650:	d9e5      	bls.n	800f61e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f652:	bf00      	nop
 800f654:	3714      	adds	r7, #20
 800f656:	46bd      	mov	sp, r7
 800f658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65c:	4770      	bx	lr
 800f65e:	bf00      	nop
 800f660:	20004fc4 	.word	0x20004fc4

0800f664 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f664:	b580      	push	{r7, lr}
 800f666:	b086      	sub	sp, #24
 800f668:	af00      	add	r7, sp, #0
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	60b9      	str	r1, [r7, #8]
 800f66e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f674:	f001 fed2 	bl	801141c <vPortEnterCritical>
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f67e:	b25b      	sxtb	r3, r3
 800f680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f684:	d103      	bne.n	800f68e <vQueueWaitForMessageRestricted+0x2a>
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	2200      	movs	r2, #0
 800f68a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f694:	b25b      	sxtb	r3, r3
 800f696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f69a:	d103      	bne.n	800f6a4 <vQueueWaitForMessageRestricted+0x40>
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f6a4:	f001 fee8 	bl	8011478 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d106      	bne.n	800f6be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	3324      	adds	r3, #36	; 0x24
 800f6b4:	687a      	ldr	r2, [r7, #4]
 800f6b6:	68b9      	ldr	r1, [r7, #8]
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f000 fc67 	bl	800ff8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f6be:	6978      	ldr	r0, [r7, #20]
 800f6c0:	f7ff fefd 	bl	800f4be <prvUnlockQueue>
	}
 800f6c4:	bf00      	nop
 800f6c6:	3718      	adds	r7, #24
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b08e      	sub	sp, #56	; 0x38
 800f6d0:	af04      	add	r7, sp, #16
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	60b9      	str	r1, [r7, #8]
 800f6d6:	607a      	str	r2, [r7, #4]
 800f6d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d109      	bne.n	800f6f4 <xTaskCreateStatic+0x28>
 800f6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e4:	f383 8811 	msr	BASEPRI, r3
 800f6e8:	f3bf 8f6f 	isb	sy
 800f6ec:	f3bf 8f4f 	dsb	sy
 800f6f0:	623b      	str	r3, [r7, #32]
 800f6f2:	e7fe      	b.n	800f6f2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800f6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d109      	bne.n	800f70e <xTaskCreateStatic+0x42>
 800f6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6fe:	f383 8811 	msr	BASEPRI, r3
 800f702:	f3bf 8f6f 	isb	sy
 800f706:	f3bf 8f4f 	dsb	sy
 800f70a:	61fb      	str	r3, [r7, #28]
 800f70c:	e7fe      	b.n	800f70c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f70e:	235c      	movs	r3, #92	; 0x5c
 800f710:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	2b5c      	cmp	r3, #92	; 0x5c
 800f716:	d009      	beq.n	800f72c <xTaskCreateStatic+0x60>
 800f718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f71c:	f383 8811 	msr	BASEPRI, r3
 800f720:	f3bf 8f6f 	isb	sy
 800f724:	f3bf 8f4f 	dsb	sy
 800f728:	61bb      	str	r3, [r7, #24]
 800f72a:	e7fe      	b.n	800f72a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f72c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f730:	2b00      	cmp	r3, #0
 800f732:	d01e      	beq.n	800f772 <xTaskCreateStatic+0xa6>
 800f734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f736:	2b00      	cmp	r3, #0
 800f738:	d01b      	beq.n	800f772 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f742:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f746:	2202      	movs	r2, #2
 800f748:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f74c:	2300      	movs	r3, #0
 800f74e:	9303      	str	r3, [sp, #12]
 800f750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f752:	9302      	str	r3, [sp, #8]
 800f754:	f107 0314 	add.w	r3, r7, #20
 800f758:	9301      	str	r3, [sp, #4]
 800f75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75c:	9300      	str	r3, [sp, #0]
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	68b9      	ldr	r1, [r7, #8]
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f000 f850 	bl	800f80a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f76a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f76c:	f000 f8dc 	bl	800f928 <prvAddNewTaskToReadyList>
 800f770:	e001      	b.n	800f776 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800f772:	2300      	movs	r3, #0
 800f774:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f776:	697b      	ldr	r3, [r7, #20]
	}
 800f778:	4618      	mov	r0, r3
 800f77a:	3728      	adds	r7, #40	; 0x28
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f780:	b580      	push	{r7, lr}
 800f782:	b08c      	sub	sp, #48	; 0x30
 800f784:	af04      	add	r7, sp, #16
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	60b9      	str	r1, [r7, #8]
 800f78a:	603b      	str	r3, [r7, #0]
 800f78c:	4613      	mov	r3, r2
 800f78e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f790:	88fb      	ldrh	r3, [r7, #6]
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4618      	mov	r0, r3
 800f796:	f001 ff5b 	bl	8011650 <pvPortMalloc>
 800f79a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d00e      	beq.n	800f7c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f7a2:	205c      	movs	r0, #92	; 0x5c
 800f7a4:	f001 ff54 	bl	8011650 <pvPortMalloc>
 800f7a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f7aa:	69fb      	ldr	r3, [r7, #28]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d003      	beq.n	800f7b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f7b0:	69fb      	ldr	r3, [r7, #28]
 800f7b2:	697a      	ldr	r2, [r7, #20]
 800f7b4:	631a      	str	r2, [r3, #48]	; 0x30
 800f7b6:	e005      	b.n	800f7c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f7b8:	6978      	ldr	r0, [r7, #20]
 800f7ba:	f002 f80b 	bl	80117d4 <vPortFree>
 800f7be:	e001      	b.n	800f7c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f7c4:	69fb      	ldr	r3, [r7, #28]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d017      	beq.n	800f7fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f7ca:	69fb      	ldr	r3, [r7, #28]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f7d2:	88fa      	ldrh	r2, [r7, #6]
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	9303      	str	r3, [sp, #12]
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	9302      	str	r3, [sp, #8]
 800f7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7de:	9301      	str	r3, [sp, #4]
 800f7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e2:	9300      	str	r3, [sp, #0]
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	68b9      	ldr	r1, [r7, #8]
 800f7e8:	68f8      	ldr	r0, [r7, #12]
 800f7ea:	f000 f80e 	bl	800f80a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f7ee:	69f8      	ldr	r0, [r7, #28]
 800f7f0:	f000 f89a 	bl	800f928 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	61bb      	str	r3, [r7, #24]
 800f7f8:	e002      	b.n	800f800 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f7fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f800:	69bb      	ldr	r3, [r7, #24]
	}
 800f802:	4618      	mov	r0, r3
 800f804:	3720      	adds	r7, #32
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}

0800f80a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f80a:	b580      	push	{r7, lr}
 800f80c:	b088      	sub	sp, #32
 800f80e:	af00      	add	r7, sp, #0
 800f810:	60f8      	str	r0, [r7, #12]
 800f812:	60b9      	str	r1, [r7, #8]
 800f814:	607a      	str	r2, [r7, #4]
 800f816:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	009b      	lsls	r3, r3, #2
 800f820:	461a      	mov	r2, r3
 800f822:	21a5      	movs	r1, #165	; 0xa5
 800f824:	f003 fe77 	bl	8013516 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f832:	3b01      	subs	r3, #1
 800f834:	009b      	lsls	r3, r3, #2
 800f836:	4413      	add	r3, r2
 800f838:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	f023 0307 	bic.w	r3, r3, #7
 800f840:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f842:	69bb      	ldr	r3, [r7, #24]
 800f844:	f003 0307 	and.w	r3, r3, #7
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d009      	beq.n	800f860 <prvInitialiseNewTask+0x56>
 800f84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f850:	f383 8811 	msr	BASEPRI, r3
 800f854:	f3bf 8f6f 	isb	sy
 800f858:	f3bf 8f4f 	dsb	sy
 800f85c:	617b      	str	r3, [r7, #20]
 800f85e:	e7fe      	b.n	800f85e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d01f      	beq.n	800f8a6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f866:	2300      	movs	r3, #0
 800f868:	61fb      	str	r3, [r7, #28]
 800f86a:	e012      	b.n	800f892 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f86c:	68ba      	ldr	r2, [r7, #8]
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	4413      	add	r3, r2
 800f872:	7819      	ldrb	r1, [r3, #0]
 800f874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	4413      	add	r3, r2
 800f87a:	3334      	adds	r3, #52	; 0x34
 800f87c:	460a      	mov	r2, r1
 800f87e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f880:	68ba      	ldr	r2, [r7, #8]
 800f882:	69fb      	ldr	r3, [r7, #28]
 800f884:	4413      	add	r3, r2
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d006      	beq.n	800f89a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f88c:	69fb      	ldr	r3, [r7, #28]
 800f88e:	3301      	adds	r3, #1
 800f890:	61fb      	str	r3, [r7, #28]
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	2b0f      	cmp	r3, #15
 800f896:	d9e9      	bls.n	800f86c <prvInitialiseNewTask+0x62>
 800f898:	e000      	b.n	800f89c <prvInitialiseNewTask+0x92>
			{
				break;
 800f89a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89e:	2200      	movs	r2, #0
 800f8a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f8a4:	e003      	b.n	800f8ae <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b0:	2b37      	cmp	r3, #55	; 0x37
 800f8b2:	d901      	bls.n	800f8b8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f8b4:	2337      	movs	r3, #55	; 0x37
 800f8b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8cc:	3304      	adds	r3, #4
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7fe fdc6 	bl	800e460 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d6:	3318      	adds	r3, #24
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7fe fdc1 	bl	800e460 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f902:	683a      	ldr	r2, [r7, #0]
 800f904:	68f9      	ldr	r1, [r7, #12]
 800f906:	69b8      	ldr	r0, [r7, #24]
 800f908:	f001 fc60 	bl	80111cc <pxPortInitialiseStack>
 800f90c:	4602      	mov	r2, r0
 800f90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f910:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f914:	2b00      	cmp	r3, #0
 800f916:	d002      	beq.n	800f91e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f91c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f91e:	bf00      	nop
 800f920:	3720      	adds	r7, #32
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
	...

0800f928 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b082      	sub	sp, #8
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f930:	f001 fd74 	bl	801141c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f934:	4b2d      	ldr	r3, [pc, #180]	; (800f9ec <prvAddNewTaskToReadyList+0xc4>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	3301      	adds	r3, #1
 800f93a:	4a2c      	ldr	r2, [pc, #176]	; (800f9ec <prvAddNewTaskToReadyList+0xc4>)
 800f93c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f93e:	4b2c      	ldr	r3, [pc, #176]	; (800f9f0 <prvAddNewTaskToReadyList+0xc8>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d109      	bne.n	800f95a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f946:	4a2a      	ldr	r2, [pc, #168]	; (800f9f0 <prvAddNewTaskToReadyList+0xc8>)
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f94c:	4b27      	ldr	r3, [pc, #156]	; (800f9ec <prvAddNewTaskToReadyList+0xc4>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	2b01      	cmp	r3, #1
 800f952:	d110      	bne.n	800f976 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f954:	f000 fc68 	bl	8010228 <prvInitialiseTaskLists>
 800f958:	e00d      	b.n	800f976 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f95a:	4b26      	ldr	r3, [pc, #152]	; (800f9f4 <prvAddNewTaskToReadyList+0xcc>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d109      	bne.n	800f976 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f962:	4b23      	ldr	r3, [pc, #140]	; (800f9f0 <prvAddNewTaskToReadyList+0xc8>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f96c:	429a      	cmp	r2, r3
 800f96e:	d802      	bhi.n	800f976 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f970:	4a1f      	ldr	r2, [pc, #124]	; (800f9f0 <prvAddNewTaskToReadyList+0xc8>)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f976:	4b20      	ldr	r3, [pc, #128]	; (800f9f8 <prvAddNewTaskToReadyList+0xd0>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	3301      	adds	r3, #1
 800f97c:	4a1e      	ldr	r2, [pc, #120]	; (800f9f8 <prvAddNewTaskToReadyList+0xd0>)
 800f97e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f980:	4b1d      	ldr	r3, [pc, #116]	; (800f9f8 <prvAddNewTaskToReadyList+0xd0>)
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f98c:	4b1b      	ldr	r3, [pc, #108]	; (800f9fc <prvAddNewTaskToReadyList+0xd4>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	429a      	cmp	r2, r3
 800f992:	d903      	bls.n	800f99c <prvAddNewTaskToReadyList+0x74>
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f998:	4a18      	ldr	r2, [pc, #96]	; (800f9fc <prvAddNewTaskToReadyList+0xd4>)
 800f99a:	6013      	str	r3, [r2, #0]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9a0:	4613      	mov	r3, r2
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	4413      	add	r3, r2
 800f9a6:	009b      	lsls	r3, r3, #2
 800f9a8:	4a15      	ldr	r2, [pc, #84]	; (800fa00 <prvAddNewTaskToReadyList+0xd8>)
 800f9aa:	441a      	add	r2, r3
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	3304      	adds	r3, #4
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	4610      	mov	r0, r2
 800f9b4:	f7fe fd61 	bl	800e47a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f9b8:	f001 fd5e 	bl	8011478 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f9bc:	4b0d      	ldr	r3, [pc, #52]	; (800f9f4 <prvAddNewTaskToReadyList+0xcc>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d00e      	beq.n	800f9e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f9c4:	4b0a      	ldr	r3, [pc, #40]	; (800f9f0 <prvAddNewTaskToReadyList+0xc8>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d207      	bcs.n	800f9e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f9d2:	4b0c      	ldr	r3, [pc, #48]	; (800fa04 <prvAddNewTaskToReadyList+0xdc>)
 800f9d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9d8:	601a      	str	r2, [r3, #0]
 800f9da:	f3bf 8f4f 	dsb	sy
 800f9de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9e2:	bf00      	nop
 800f9e4:	3708      	adds	r7, #8
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
 800f9ea:	bf00      	nop
 800f9ec:	20002130 	.word	0x20002130
 800f9f0:	20001c5c 	.word	0x20001c5c
 800f9f4:	2000213c 	.word	0x2000213c
 800f9f8:	2000214c 	.word	0x2000214c
 800f9fc:	20002138 	.word	0x20002138
 800fa00:	20001c60 	.word	0x20001c60
 800fa04:	e000ed04 	.word	0xe000ed04

0800fa08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b084      	sub	sp, #16
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fa10:	2300      	movs	r3, #0
 800fa12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d016      	beq.n	800fa48 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fa1a:	4b13      	ldr	r3, [pc, #76]	; (800fa68 <vTaskDelay+0x60>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d009      	beq.n	800fa36 <vTaskDelay+0x2e>
 800fa22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa26:	f383 8811 	msr	BASEPRI, r3
 800fa2a:	f3bf 8f6f 	isb	sy
 800fa2e:	f3bf 8f4f 	dsb	sy
 800fa32:	60bb      	str	r3, [r7, #8]
 800fa34:	e7fe      	b.n	800fa34 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800fa36:	f000 f87f 	bl	800fb38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f001 f82b 	bl	8010a98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fa42:	f000 f8bf 	bl	800fbc4 <xTaskResumeAll>
 800fa46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d107      	bne.n	800fa5e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800fa4e:	4b07      	ldr	r3, [pc, #28]	; (800fa6c <vTaskDelay+0x64>)
 800fa50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa54:	601a      	str	r2, [r3, #0]
 800fa56:	f3bf 8f4f 	dsb	sy
 800fa5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa5e:	bf00      	nop
 800fa60:	3710      	adds	r7, #16
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
 800fa66:	bf00      	nop
 800fa68:	20002158 	.word	0x20002158
 800fa6c:	e000ed04 	.word	0xe000ed04

0800fa70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b08a      	sub	sp, #40	; 0x28
 800fa74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fa76:	2300      	movs	r3, #0
 800fa78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fa7e:	463a      	mov	r2, r7
 800fa80:	1d39      	adds	r1, r7, #4
 800fa82:	f107 0308 	add.w	r3, r7, #8
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7fe fc96 	bl	800e3b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fa8c:	6839      	ldr	r1, [r7, #0]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	68ba      	ldr	r2, [r7, #8]
 800fa92:	9202      	str	r2, [sp, #8]
 800fa94:	9301      	str	r3, [sp, #4]
 800fa96:	2300      	movs	r3, #0
 800fa98:	9300      	str	r3, [sp, #0]
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	460a      	mov	r2, r1
 800fa9e:	4920      	ldr	r1, [pc, #128]	; (800fb20 <vTaskStartScheduler+0xb0>)
 800faa0:	4820      	ldr	r0, [pc, #128]	; (800fb24 <vTaskStartScheduler+0xb4>)
 800faa2:	f7ff fe13 	bl	800f6cc <xTaskCreateStatic>
 800faa6:	4602      	mov	r2, r0
 800faa8:	4b1f      	ldr	r3, [pc, #124]	; (800fb28 <vTaskStartScheduler+0xb8>)
 800faaa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800faac:	4b1e      	ldr	r3, [pc, #120]	; (800fb28 <vTaskStartScheduler+0xb8>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d002      	beq.n	800faba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fab4:	2301      	movs	r3, #1
 800fab6:	617b      	str	r3, [r7, #20]
 800fab8:	e001      	b.n	800fabe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800faba:	2300      	movs	r3, #0
 800fabc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	d102      	bne.n	800faca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fac4:	f001 f83c 	bl	8010b40 <xTimerCreateTimerTask>
 800fac8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	2b01      	cmp	r3, #1
 800face:	d115      	bne.n	800fafc <vTaskStartScheduler+0x8c>
 800fad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad4:	f383 8811 	msr	BASEPRI, r3
 800fad8:	f3bf 8f6f 	isb	sy
 800fadc:	f3bf 8f4f 	dsb	sy
 800fae0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fae2:	4b12      	ldr	r3, [pc, #72]	; (800fb2c <vTaskStartScheduler+0xbc>)
 800fae4:	f04f 32ff 	mov.w	r2, #4294967295
 800fae8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800faea:	4b11      	ldr	r3, [pc, #68]	; (800fb30 <vTaskStartScheduler+0xc0>)
 800faec:	2201      	movs	r2, #1
 800faee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800faf0:	4b10      	ldr	r3, [pc, #64]	; (800fb34 <vTaskStartScheduler+0xc4>)
 800faf2:	2200      	movs	r2, #0
 800faf4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800faf6:	f001 fbf3 	bl	80112e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fafa:	e00d      	b.n	800fb18 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb02:	d109      	bne.n	800fb18 <vTaskStartScheduler+0xa8>
 800fb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb08:	f383 8811 	msr	BASEPRI, r3
 800fb0c:	f3bf 8f6f 	isb	sy
 800fb10:	f3bf 8f4f 	dsb	sy
 800fb14:	60fb      	str	r3, [r7, #12]
 800fb16:	e7fe      	b.n	800fb16 <vTaskStartScheduler+0xa6>
}
 800fb18:	bf00      	nop
 800fb1a:	3718      	adds	r7, #24
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	080135f8 	.word	0x080135f8
 800fb24:	080101ad 	.word	0x080101ad
 800fb28:	20002154 	.word	0x20002154
 800fb2c:	20002150 	.word	0x20002150
 800fb30:	2000213c 	.word	0x2000213c
 800fb34:	20002134 	.word	0x20002134

0800fb38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fb38:	b480      	push	{r7}
 800fb3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fb3c:	4b04      	ldr	r3, [pc, #16]	; (800fb50 <vTaskSuspendAll+0x18>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	3301      	adds	r3, #1
 800fb42:	4a03      	ldr	r2, [pc, #12]	; (800fb50 <vTaskSuspendAll+0x18>)
 800fb44:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fb46:	bf00      	nop
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr
 800fb50:	20002158 	.word	0x20002158

0800fb54 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800fb54:	b480      	push	{r7}
 800fb56:	b083      	sub	sp, #12
 800fb58:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800fb5e:	4b14      	ldr	r3, [pc, #80]	; (800fbb0 <prvGetExpectedIdleTime+0x5c>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d001      	beq.n	800fb6a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800fb66:	2301      	movs	r3, #1
 800fb68:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800fb6a:	4b12      	ldr	r3, [pc, #72]	; (800fbb4 <prvGetExpectedIdleTime+0x60>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d002      	beq.n	800fb7a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800fb74:	2300      	movs	r3, #0
 800fb76:	607b      	str	r3, [r7, #4]
 800fb78:	e012      	b.n	800fba0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800fb7a:	4b0f      	ldr	r3, [pc, #60]	; (800fbb8 <prvGetExpectedIdleTime+0x64>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d902      	bls.n	800fb88 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800fb82:	2300      	movs	r3, #0
 800fb84:	607b      	str	r3, [r7, #4]
 800fb86:	e00b      	b.n	800fba0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d002      	beq.n	800fb94 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	607b      	str	r3, [r7, #4]
 800fb92:	e005      	b.n	800fba0 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800fb94:	4b09      	ldr	r3, [pc, #36]	; (800fbbc <prvGetExpectedIdleTime+0x68>)
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	4b09      	ldr	r3, [pc, #36]	; (800fbc0 <prvGetExpectedIdleTime+0x6c>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	1ad3      	subs	r3, r2, r3
 800fb9e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800fba0:	687b      	ldr	r3, [r7, #4]
	}
 800fba2:	4618      	mov	r0, r3
 800fba4:	370c      	adds	r7, #12
 800fba6:	46bd      	mov	sp, r7
 800fba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbac:	4770      	bx	lr
 800fbae:	bf00      	nop
 800fbb0:	20002138 	.word	0x20002138
 800fbb4:	20001c5c 	.word	0x20001c5c
 800fbb8:	20001c60 	.word	0x20001c60
 800fbbc:	20002150 	.word	0x20002150
 800fbc0:	20002134 	.word	0x20002134

0800fbc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fbd2:	4b41      	ldr	r3, [pc, #260]	; (800fcd8 <xTaskResumeAll+0x114>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d109      	bne.n	800fbee <xTaskResumeAll+0x2a>
 800fbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbde:	f383 8811 	msr	BASEPRI, r3
 800fbe2:	f3bf 8f6f 	isb	sy
 800fbe6:	f3bf 8f4f 	dsb	sy
 800fbea:	603b      	str	r3, [r7, #0]
 800fbec:	e7fe      	b.n	800fbec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fbee:	f001 fc15 	bl	801141c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fbf2:	4b39      	ldr	r3, [pc, #228]	; (800fcd8 <xTaskResumeAll+0x114>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	3b01      	subs	r3, #1
 800fbf8:	4a37      	ldr	r2, [pc, #220]	; (800fcd8 <xTaskResumeAll+0x114>)
 800fbfa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbfc:	4b36      	ldr	r3, [pc, #216]	; (800fcd8 <xTaskResumeAll+0x114>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d162      	bne.n	800fcca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fc04:	4b35      	ldr	r3, [pc, #212]	; (800fcdc <xTaskResumeAll+0x118>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d05e      	beq.n	800fcca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc0c:	e02f      	b.n	800fc6e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc0e:	4b34      	ldr	r3, [pc, #208]	; (800fce0 <xTaskResumeAll+0x11c>)
 800fc10:	68db      	ldr	r3, [r3, #12]
 800fc12:	68db      	ldr	r3, [r3, #12]
 800fc14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	3318      	adds	r3, #24
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7fe fc8a 	bl	800e534 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	3304      	adds	r3, #4
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7fe fc85 	bl	800e534 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc2e:	4b2d      	ldr	r3, [pc, #180]	; (800fce4 <xTaskResumeAll+0x120>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d903      	bls.n	800fc3e <xTaskResumeAll+0x7a>
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc3a:	4a2a      	ldr	r2, [pc, #168]	; (800fce4 <xTaskResumeAll+0x120>)
 800fc3c:	6013      	str	r3, [r2, #0]
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc42:	4613      	mov	r3, r2
 800fc44:	009b      	lsls	r3, r3, #2
 800fc46:	4413      	add	r3, r2
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	4a27      	ldr	r2, [pc, #156]	; (800fce8 <xTaskResumeAll+0x124>)
 800fc4c:	441a      	add	r2, r3
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	3304      	adds	r3, #4
 800fc52:	4619      	mov	r1, r3
 800fc54:	4610      	mov	r0, r2
 800fc56:	f7fe fc10 	bl	800e47a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc5e:	4b23      	ldr	r3, [pc, #140]	; (800fcec <xTaskResumeAll+0x128>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d302      	bcc.n	800fc6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fc68:	4b21      	ldr	r3, [pc, #132]	; (800fcf0 <xTaskResumeAll+0x12c>)
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc6e:	4b1c      	ldr	r3, [pc, #112]	; (800fce0 <xTaskResumeAll+0x11c>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d1cb      	bne.n	800fc0e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d001      	beq.n	800fc80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fc7c:	f000 fb6e 	bl	801035c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fc80:	4b1c      	ldr	r3, [pc, #112]	; (800fcf4 <xTaskResumeAll+0x130>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d010      	beq.n	800fcae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fc8c:	f000 f846 	bl	800fd1c <xTaskIncrementTick>
 800fc90:	4603      	mov	r3, r0
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d002      	beq.n	800fc9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fc96:	4b16      	ldr	r3, [pc, #88]	; (800fcf0 <xTaskResumeAll+0x12c>)
 800fc98:	2201      	movs	r2, #1
 800fc9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	3b01      	subs	r3, #1
 800fca0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d1f1      	bne.n	800fc8c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800fca8:	4b12      	ldr	r3, [pc, #72]	; (800fcf4 <xTaskResumeAll+0x130>)
 800fcaa:	2200      	movs	r2, #0
 800fcac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fcae:	4b10      	ldr	r3, [pc, #64]	; (800fcf0 <xTaskResumeAll+0x12c>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d009      	beq.n	800fcca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fcba:	4b0f      	ldr	r3, [pc, #60]	; (800fcf8 <xTaskResumeAll+0x134>)
 800fcbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcc0:	601a      	str	r2, [r3, #0]
 800fcc2:	f3bf 8f4f 	dsb	sy
 800fcc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fcca:	f001 fbd5 	bl	8011478 <vPortExitCritical>

	return xAlreadyYielded;
 800fcce:	68bb      	ldr	r3, [r7, #8]
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3710      	adds	r7, #16
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}
 800fcd8:	20002158 	.word	0x20002158
 800fcdc:	20002130 	.word	0x20002130
 800fce0:	200020f0 	.word	0x200020f0
 800fce4:	20002138 	.word	0x20002138
 800fce8:	20001c60 	.word	0x20001c60
 800fcec:	20001c5c 	.word	0x20001c5c
 800fcf0:	20002144 	.word	0x20002144
 800fcf4:	20002140 	.word	0x20002140
 800fcf8:	e000ed04 	.word	0xe000ed04

0800fcfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b083      	sub	sp, #12
 800fd00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fd02:	4b05      	ldr	r3, [pc, #20]	; (800fd18 <xTaskGetTickCount+0x1c>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fd08:	687b      	ldr	r3, [r7, #4]
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	370c      	adds	r7, #12
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop
 800fd18:	20002134 	.word	0x20002134

0800fd1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b086      	sub	sp, #24
 800fd20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fd22:	2300      	movs	r3, #0
 800fd24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd26:	4b4e      	ldr	r3, [pc, #312]	; (800fe60 <xTaskIncrementTick+0x144>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	f040 8088 	bne.w	800fe40 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fd30:	4b4c      	ldr	r3, [pc, #304]	; (800fe64 <xTaskIncrementTick+0x148>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	3301      	adds	r3, #1
 800fd36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fd38:	4a4a      	ldr	r2, [pc, #296]	; (800fe64 <xTaskIncrementTick+0x148>)
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d11f      	bne.n	800fd84 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800fd44:	4b48      	ldr	r3, [pc, #288]	; (800fe68 <xTaskIncrementTick+0x14c>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d009      	beq.n	800fd62 <xTaskIncrementTick+0x46>
 800fd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd52:	f383 8811 	msr	BASEPRI, r3
 800fd56:	f3bf 8f6f 	isb	sy
 800fd5a:	f3bf 8f4f 	dsb	sy
 800fd5e:	603b      	str	r3, [r7, #0]
 800fd60:	e7fe      	b.n	800fd60 <xTaskIncrementTick+0x44>
 800fd62:	4b41      	ldr	r3, [pc, #260]	; (800fe68 <xTaskIncrementTick+0x14c>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	60fb      	str	r3, [r7, #12]
 800fd68:	4b40      	ldr	r3, [pc, #256]	; (800fe6c <xTaskIncrementTick+0x150>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	4a3e      	ldr	r2, [pc, #248]	; (800fe68 <xTaskIncrementTick+0x14c>)
 800fd6e:	6013      	str	r3, [r2, #0]
 800fd70:	4a3e      	ldr	r2, [pc, #248]	; (800fe6c <xTaskIncrementTick+0x150>)
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	6013      	str	r3, [r2, #0]
 800fd76:	4b3e      	ldr	r3, [pc, #248]	; (800fe70 <xTaskIncrementTick+0x154>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	4a3c      	ldr	r2, [pc, #240]	; (800fe70 <xTaskIncrementTick+0x154>)
 800fd7e:	6013      	str	r3, [r2, #0]
 800fd80:	f000 faec 	bl	801035c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fd84:	4b3b      	ldr	r3, [pc, #236]	; (800fe74 <xTaskIncrementTick+0x158>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	693a      	ldr	r2, [r7, #16]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d349      	bcc.n	800fe22 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd8e:	4b36      	ldr	r3, [pc, #216]	; (800fe68 <xTaskIncrementTick+0x14c>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d104      	bne.n	800fda2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd98:	4b36      	ldr	r3, [pc, #216]	; (800fe74 <xTaskIncrementTick+0x158>)
 800fd9a:	f04f 32ff 	mov.w	r2, #4294967295
 800fd9e:	601a      	str	r2, [r3, #0]
					break;
 800fda0:	e03f      	b.n	800fe22 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fda2:	4b31      	ldr	r3, [pc, #196]	; (800fe68 <xTaskIncrementTick+0x14c>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	68db      	ldr	r3, [r3, #12]
 800fda8:	68db      	ldr	r3, [r3, #12]
 800fdaa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fdb2:	693a      	ldr	r2, [r7, #16]
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d203      	bcs.n	800fdc2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fdba:	4a2e      	ldr	r2, [pc, #184]	; (800fe74 <xTaskIncrementTick+0x158>)
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fdc0:	e02f      	b.n	800fe22 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	3304      	adds	r3, #4
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f7fe fbb4 	bl	800e534 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d004      	beq.n	800fdde <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	3318      	adds	r3, #24
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f7fe fbab 	bl	800e534 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fde2:	4b25      	ldr	r3, [pc, #148]	; (800fe78 <xTaskIncrementTick+0x15c>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d903      	bls.n	800fdf2 <xTaskIncrementTick+0xd6>
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdee:	4a22      	ldr	r2, [pc, #136]	; (800fe78 <xTaskIncrementTick+0x15c>)
 800fdf0:	6013      	str	r3, [r2, #0]
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdf6:	4613      	mov	r3, r2
 800fdf8:	009b      	lsls	r3, r3, #2
 800fdfa:	4413      	add	r3, r2
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	4a1f      	ldr	r2, [pc, #124]	; (800fe7c <xTaskIncrementTick+0x160>)
 800fe00:	441a      	add	r2, r3
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	3304      	adds	r3, #4
 800fe06:	4619      	mov	r1, r3
 800fe08:	4610      	mov	r0, r2
 800fe0a:	f7fe fb36 	bl	800e47a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe12:	4b1b      	ldr	r3, [pc, #108]	; (800fe80 <xTaskIncrementTick+0x164>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d3b8      	bcc.n	800fd8e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe20:	e7b5      	b.n	800fd8e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fe22:	4b17      	ldr	r3, [pc, #92]	; (800fe80 <xTaskIncrementTick+0x164>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe28:	4914      	ldr	r1, [pc, #80]	; (800fe7c <xTaskIncrementTick+0x160>)
 800fe2a:	4613      	mov	r3, r2
 800fe2c:	009b      	lsls	r3, r3, #2
 800fe2e:	4413      	add	r3, r2
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	440b      	add	r3, r1
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	2b01      	cmp	r3, #1
 800fe38:	d907      	bls.n	800fe4a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	617b      	str	r3, [r7, #20]
 800fe3e:	e004      	b.n	800fe4a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fe40:	4b10      	ldr	r3, [pc, #64]	; (800fe84 <xTaskIncrementTick+0x168>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	3301      	adds	r3, #1
 800fe46:	4a0f      	ldr	r2, [pc, #60]	; (800fe84 <xTaskIncrementTick+0x168>)
 800fe48:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fe4a:	4b0f      	ldr	r3, [pc, #60]	; (800fe88 <xTaskIncrementTick+0x16c>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d001      	beq.n	800fe56 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800fe52:	2301      	movs	r3, #1
 800fe54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fe56:	697b      	ldr	r3, [r7, #20]
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3718      	adds	r7, #24
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	20002158 	.word	0x20002158
 800fe64:	20002134 	.word	0x20002134
 800fe68:	200020e8 	.word	0x200020e8
 800fe6c:	200020ec 	.word	0x200020ec
 800fe70:	20002148 	.word	0x20002148
 800fe74:	20002150 	.word	0x20002150
 800fe78:	20002138 	.word	0x20002138
 800fe7c:	20001c60 	.word	0x20001c60
 800fe80:	20001c5c 	.word	0x20001c5c
 800fe84:	20002140 	.word	0x20002140
 800fe88:	20002144 	.word	0x20002144

0800fe8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b085      	sub	sp, #20
 800fe90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fe92:	4b27      	ldr	r3, [pc, #156]	; (800ff30 <vTaskSwitchContext+0xa4>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d003      	beq.n	800fea2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fe9a:	4b26      	ldr	r3, [pc, #152]	; (800ff34 <vTaskSwitchContext+0xa8>)
 800fe9c:	2201      	movs	r2, #1
 800fe9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fea0:	e040      	b.n	800ff24 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800fea2:	4b24      	ldr	r3, [pc, #144]	; (800ff34 <vTaskSwitchContext+0xa8>)
 800fea4:	2200      	movs	r2, #0
 800fea6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fea8:	4b23      	ldr	r3, [pc, #140]	; (800ff38 <vTaskSwitchContext+0xac>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	60fb      	str	r3, [r7, #12]
 800feae:	e00f      	b.n	800fed0 <vTaskSwitchContext+0x44>
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d109      	bne.n	800feca <vTaskSwitchContext+0x3e>
 800feb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feba:	f383 8811 	msr	BASEPRI, r3
 800febe:	f3bf 8f6f 	isb	sy
 800fec2:	f3bf 8f4f 	dsb	sy
 800fec6:	607b      	str	r3, [r7, #4]
 800fec8:	e7fe      	b.n	800fec8 <vTaskSwitchContext+0x3c>
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	3b01      	subs	r3, #1
 800fece:	60fb      	str	r3, [r7, #12]
 800fed0:	491a      	ldr	r1, [pc, #104]	; (800ff3c <vTaskSwitchContext+0xb0>)
 800fed2:	68fa      	ldr	r2, [r7, #12]
 800fed4:	4613      	mov	r3, r2
 800fed6:	009b      	lsls	r3, r3, #2
 800fed8:	4413      	add	r3, r2
 800feda:	009b      	lsls	r3, r3, #2
 800fedc:	440b      	add	r3, r1
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d0e5      	beq.n	800feb0 <vTaskSwitchContext+0x24>
 800fee4:	68fa      	ldr	r2, [r7, #12]
 800fee6:	4613      	mov	r3, r2
 800fee8:	009b      	lsls	r3, r3, #2
 800feea:	4413      	add	r3, r2
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	4a13      	ldr	r2, [pc, #76]	; (800ff3c <vTaskSwitchContext+0xb0>)
 800fef0:	4413      	add	r3, r2
 800fef2:	60bb      	str	r3, [r7, #8]
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	685a      	ldr	r2, [r3, #4]
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	605a      	str	r2, [r3, #4]
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	685a      	ldr	r2, [r3, #4]
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	3308      	adds	r3, #8
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d104      	bne.n	800ff14 <vTaskSwitchContext+0x88>
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	685b      	ldr	r3, [r3, #4]
 800ff0e:	685a      	ldr	r2, [r3, #4]
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	605a      	str	r2, [r3, #4]
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	685b      	ldr	r3, [r3, #4]
 800ff18:	68db      	ldr	r3, [r3, #12]
 800ff1a:	4a09      	ldr	r2, [pc, #36]	; (800ff40 <vTaskSwitchContext+0xb4>)
 800ff1c:	6013      	str	r3, [r2, #0]
 800ff1e:	4a06      	ldr	r2, [pc, #24]	; (800ff38 <vTaskSwitchContext+0xac>)
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	6013      	str	r3, [r2, #0]
}
 800ff24:	bf00      	nop
 800ff26:	3714      	adds	r7, #20
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr
 800ff30:	20002158 	.word	0x20002158
 800ff34:	20002144 	.word	0x20002144
 800ff38:	20002138 	.word	0x20002138
 800ff3c:	20001c60 	.word	0x20001c60
 800ff40:	20001c5c 	.word	0x20001c5c

0800ff44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b084      	sub	sp, #16
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d109      	bne.n	800ff68 <vTaskPlaceOnEventList+0x24>
 800ff54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff58:	f383 8811 	msr	BASEPRI, r3
 800ff5c:	f3bf 8f6f 	isb	sy
 800ff60:	f3bf 8f4f 	dsb	sy
 800ff64:	60fb      	str	r3, [r7, #12]
 800ff66:	e7fe      	b.n	800ff66 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff68:	4b07      	ldr	r3, [pc, #28]	; (800ff88 <vTaskPlaceOnEventList+0x44>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	3318      	adds	r3, #24
 800ff6e:	4619      	mov	r1, r3
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f7fe faa6 	bl	800e4c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ff76:	2101      	movs	r1, #1
 800ff78:	6838      	ldr	r0, [r7, #0]
 800ff7a:	f000 fd8d 	bl	8010a98 <prvAddCurrentTaskToDelayedList>
}
 800ff7e:	bf00      	nop
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}
 800ff86:	bf00      	nop
 800ff88:	20001c5c 	.word	0x20001c5c

0800ff8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b086      	sub	sp, #24
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	60b9      	str	r1, [r7, #8]
 800ff96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d109      	bne.n	800ffb2 <vTaskPlaceOnEventListRestricted+0x26>
 800ff9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa2:	f383 8811 	msr	BASEPRI, r3
 800ffa6:	f3bf 8f6f 	isb	sy
 800ffaa:	f3bf 8f4f 	dsb	sy
 800ffae:	617b      	str	r3, [r7, #20]
 800ffb0:	e7fe      	b.n	800ffb0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ffb2:	4b0a      	ldr	r3, [pc, #40]	; (800ffdc <vTaskPlaceOnEventListRestricted+0x50>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	3318      	adds	r3, #24
 800ffb8:	4619      	mov	r1, r3
 800ffba:	68f8      	ldr	r0, [r7, #12]
 800ffbc:	f7fe fa5d 	bl	800e47a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d002      	beq.n	800ffcc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800ffc6:	f04f 33ff 	mov.w	r3, #4294967295
 800ffca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ffcc:	6879      	ldr	r1, [r7, #4]
 800ffce:	68b8      	ldr	r0, [r7, #8]
 800ffd0:	f000 fd62 	bl	8010a98 <prvAddCurrentTaskToDelayedList>
	}
 800ffd4:	bf00      	nop
 800ffd6:	3718      	adds	r7, #24
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}
 800ffdc:	20001c5c 	.word	0x20001c5c

0800ffe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b086      	sub	sp, #24
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d109      	bne.n	801000a <xTaskRemoveFromEventList+0x2a>
 800fff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fffa:	f383 8811 	msr	BASEPRI, r3
 800fffe:	f3bf 8f6f 	isb	sy
 8010002:	f3bf 8f4f 	dsb	sy
 8010006:	60fb      	str	r3, [r7, #12]
 8010008:	e7fe      	b.n	8010008 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	3318      	adds	r3, #24
 801000e:	4618      	mov	r0, r3
 8010010:	f7fe fa90 	bl	800e534 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010014:	4b1e      	ldr	r3, [pc, #120]	; (8010090 <xTaskRemoveFromEventList+0xb0>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d11f      	bne.n	801005c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	3304      	adds	r3, #4
 8010020:	4618      	mov	r0, r3
 8010022:	f7fe fa87 	bl	800e534 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801002a:	4b1a      	ldr	r3, [pc, #104]	; (8010094 <xTaskRemoveFromEventList+0xb4>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	429a      	cmp	r2, r3
 8010030:	d903      	bls.n	801003a <xTaskRemoveFromEventList+0x5a>
 8010032:	693b      	ldr	r3, [r7, #16]
 8010034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010036:	4a17      	ldr	r2, [pc, #92]	; (8010094 <xTaskRemoveFromEventList+0xb4>)
 8010038:	6013      	str	r3, [r2, #0]
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801003e:	4613      	mov	r3, r2
 8010040:	009b      	lsls	r3, r3, #2
 8010042:	4413      	add	r3, r2
 8010044:	009b      	lsls	r3, r3, #2
 8010046:	4a14      	ldr	r2, [pc, #80]	; (8010098 <xTaskRemoveFromEventList+0xb8>)
 8010048:	441a      	add	r2, r3
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	3304      	adds	r3, #4
 801004e:	4619      	mov	r1, r3
 8010050:	4610      	mov	r0, r2
 8010052:	f7fe fa12 	bl	800e47a <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8010056:	f000 f981 	bl	801035c <prvResetNextTaskUnblockTime>
 801005a:	e005      	b.n	8010068 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	3318      	adds	r3, #24
 8010060:	4619      	mov	r1, r3
 8010062:	480e      	ldr	r0, [pc, #56]	; (801009c <xTaskRemoveFromEventList+0xbc>)
 8010064:	f7fe fa09 	bl	800e47a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801006c:	4b0c      	ldr	r3, [pc, #48]	; (80100a0 <xTaskRemoveFromEventList+0xc0>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010072:	429a      	cmp	r2, r3
 8010074:	d905      	bls.n	8010082 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010076:	2301      	movs	r3, #1
 8010078:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801007a:	4b0a      	ldr	r3, [pc, #40]	; (80100a4 <xTaskRemoveFromEventList+0xc4>)
 801007c:	2201      	movs	r2, #1
 801007e:	601a      	str	r2, [r3, #0]
 8010080:	e001      	b.n	8010086 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8010082:	2300      	movs	r3, #0
 8010084:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010086:	697b      	ldr	r3, [r7, #20]
}
 8010088:	4618      	mov	r0, r3
 801008a:	3718      	adds	r7, #24
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	20002158 	.word	0x20002158
 8010094:	20002138 	.word	0x20002138
 8010098:	20001c60 	.word	0x20001c60
 801009c:	200020f0 	.word	0x200020f0
 80100a0:	20001c5c 	.word	0x20001c5c
 80100a4:	20002144 	.word	0x20002144

080100a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80100a8:	b480      	push	{r7}
 80100aa:	b083      	sub	sp, #12
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80100b0:	4b06      	ldr	r3, [pc, #24]	; (80100cc <vTaskInternalSetTimeOutState+0x24>)
 80100b2:	681a      	ldr	r2, [r3, #0]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80100b8:	4b05      	ldr	r3, [pc, #20]	; (80100d0 <vTaskInternalSetTimeOutState+0x28>)
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	605a      	str	r2, [r3, #4]
}
 80100c0:	bf00      	nop
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr
 80100cc:	20002148 	.word	0x20002148
 80100d0:	20002134 	.word	0x20002134

080100d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b088      	sub	sp, #32
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d109      	bne.n	80100f8 <xTaskCheckForTimeOut+0x24>
 80100e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e8:	f383 8811 	msr	BASEPRI, r3
 80100ec:	f3bf 8f6f 	isb	sy
 80100f0:	f3bf 8f4f 	dsb	sy
 80100f4:	613b      	str	r3, [r7, #16]
 80100f6:	e7fe      	b.n	80100f6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d109      	bne.n	8010112 <xTaskCheckForTimeOut+0x3e>
 80100fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010102:	f383 8811 	msr	BASEPRI, r3
 8010106:	f3bf 8f6f 	isb	sy
 801010a:	f3bf 8f4f 	dsb	sy
 801010e:	60fb      	str	r3, [r7, #12]
 8010110:	e7fe      	b.n	8010110 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8010112:	f001 f983 	bl	801141c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010116:	4b1d      	ldr	r3, [pc, #116]	; (801018c <xTaskCheckForTimeOut+0xb8>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	685b      	ldr	r3, [r3, #4]
 8010120:	69ba      	ldr	r2, [r7, #24]
 8010122:	1ad3      	subs	r3, r2, r3
 8010124:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801012e:	d102      	bne.n	8010136 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010130:	2300      	movs	r3, #0
 8010132:	61fb      	str	r3, [r7, #28]
 8010134:	e023      	b.n	801017e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681a      	ldr	r2, [r3, #0]
 801013a:	4b15      	ldr	r3, [pc, #84]	; (8010190 <xTaskCheckForTimeOut+0xbc>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	429a      	cmp	r2, r3
 8010140:	d007      	beq.n	8010152 <xTaskCheckForTimeOut+0x7e>
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	685b      	ldr	r3, [r3, #4]
 8010146:	69ba      	ldr	r2, [r7, #24]
 8010148:	429a      	cmp	r2, r3
 801014a:	d302      	bcc.n	8010152 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801014c:	2301      	movs	r3, #1
 801014e:	61fb      	str	r3, [r7, #28]
 8010150:	e015      	b.n	801017e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	697a      	ldr	r2, [r7, #20]
 8010158:	429a      	cmp	r2, r3
 801015a:	d20b      	bcs.n	8010174 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	681a      	ldr	r2, [r3, #0]
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	1ad2      	subs	r2, r2, r3
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f7ff ff9d 	bl	80100a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801016e:	2300      	movs	r3, #0
 8010170:	61fb      	str	r3, [r7, #28]
 8010172:	e004      	b.n	801017e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	2200      	movs	r2, #0
 8010178:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801017a:	2301      	movs	r3, #1
 801017c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801017e:	f001 f97b 	bl	8011478 <vPortExitCritical>

	return xReturn;
 8010182:	69fb      	ldr	r3, [r7, #28]
}
 8010184:	4618      	mov	r0, r3
 8010186:	3720      	adds	r7, #32
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}
 801018c:	20002134 	.word	0x20002134
 8010190:	20002148 	.word	0x20002148

08010194 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010194:	b480      	push	{r7}
 8010196:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010198:	4b03      	ldr	r3, [pc, #12]	; (80101a8 <vTaskMissedYield+0x14>)
 801019a:	2201      	movs	r2, #1
 801019c:	601a      	str	r2, [r3, #0]
}
 801019e:	bf00      	nop
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr
 80101a8:	20002144 	.word	0x20002144

080101ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b084      	sub	sp, #16
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80101b4:	f000 f878 	bl	80102a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80101b8:	4b17      	ldr	r3, [pc, #92]	; (8010218 <prvIdleTask+0x6c>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d907      	bls.n	80101d0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80101c0:	4b16      	ldr	r3, [pc, #88]	; (801021c <prvIdleTask+0x70>)
 80101c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101c6:	601a      	str	r2, [r3, #0]
 80101c8:	f3bf 8f4f 	dsb	sy
 80101cc:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80101d0:	f7ff fcc0 	bl	800fb54 <prvGetExpectedIdleTime>
 80101d4:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2b01      	cmp	r3, #1
 80101da:	d9eb      	bls.n	80101b4 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 80101dc:	f7ff fcac 	bl	800fb38 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80101e0:	4b0f      	ldr	r3, [pc, #60]	; (8010220 <prvIdleTask+0x74>)
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	4b0f      	ldr	r3, [pc, #60]	; (8010224 <prvIdleTask+0x78>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d209      	bcs.n	8010200 <prvIdleTask+0x54>
 80101ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f0:	f383 8811 	msr	BASEPRI, r3
 80101f4:	f3bf 8f6f 	isb	sy
 80101f8:	f3bf 8f4f 	dsb	sy
 80101fc:	60bb      	str	r3, [r7, #8]
 80101fe:	e7fe      	b.n	80101fe <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8010200:	f7ff fca8 	bl	800fb54 <prvGetExpectedIdleTime>
 8010204:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	2b01      	cmp	r3, #1
 801020a:	d902      	bls.n	8010212 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 801020c:	68f8      	ldr	r0, [r7, #12]
 801020e:	f7f0 ff98 	bl	8001142 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8010212:	f7ff fcd7 	bl	800fbc4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8010216:	e7cd      	b.n	80101b4 <prvIdleTask+0x8>
 8010218:	20001c60 	.word	0x20001c60
 801021c:	e000ed04 	.word	0xe000ed04
 8010220:	20002150 	.word	0x20002150
 8010224:	20002134 	.word	0x20002134

08010228 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b082      	sub	sp, #8
 801022c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801022e:	2300      	movs	r3, #0
 8010230:	607b      	str	r3, [r7, #4]
 8010232:	e00c      	b.n	801024e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	4613      	mov	r3, r2
 8010238:	009b      	lsls	r3, r3, #2
 801023a:	4413      	add	r3, r2
 801023c:	009b      	lsls	r3, r3, #2
 801023e:	4a12      	ldr	r2, [pc, #72]	; (8010288 <prvInitialiseTaskLists+0x60>)
 8010240:	4413      	add	r3, r2
 8010242:	4618      	mov	r0, r3
 8010244:	f7fe f8ec 	bl	800e420 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	3301      	adds	r3, #1
 801024c:	607b      	str	r3, [r7, #4]
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2b37      	cmp	r3, #55	; 0x37
 8010252:	d9ef      	bls.n	8010234 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010254:	480d      	ldr	r0, [pc, #52]	; (801028c <prvInitialiseTaskLists+0x64>)
 8010256:	f7fe f8e3 	bl	800e420 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801025a:	480d      	ldr	r0, [pc, #52]	; (8010290 <prvInitialiseTaskLists+0x68>)
 801025c:	f7fe f8e0 	bl	800e420 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010260:	480c      	ldr	r0, [pc, #48]	; (8010294 <prvInitialiseTaskLists+0x6c>)
 8010262:	f7fe f8dd 	bl	800e420 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010266:	480c      	ldr	r0, [pc, #48]	; (8010298 <prvInitialiseTaskLists+0x70>)
 8010268:	f7fe f8da 	bl	800e420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801026c:	480b      	ldr	r0, [pc, #44]	; (801029c <prvInitialiseTaskLists+0x74>)
 801026e:	f7fe f8d7 	bl	800e420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010272:	4b0b      	ldr	r3, [pc, #44]	; (80102a0 <prvInitialiseTaskLists+0x78>)
 8010274:	4a05      	ldr	r2, [pc, #20]	; (801028c <prvInitialiseTaskLists+0x64>)
 8010276:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010278:	4b0a      	ldr	r3, [pc, #40]	; (80102a4 <prvInitialiseTaskLists+0x7c>)
 801027a:	4a05      	ldr	r2, [pc, #20]	; (8010290 <prvInitialiseTaskLists+0x68>)
 801027c:	601a      	str	r2, [r3, #0]
}
 801027e:	bf00      	nop
 8010280:	3708      	adds	r7, #8
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	20001c60 	.word	0x20001c60
 801028c:	200020c0 	.word	0x200020c0
 8010290:	200020d4 	.word	0x200020d4
 8010294:	200020f0 	.word	0x200020f0
 8010298:	20002104 	.word	0x20002104
 801029c:	2000211c 	.word	0x2000211c
 80102a0:	200020e8 	.word	0x200020e8
 80102a4:	200020ec 	.word	0x200020ec

080102a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b082      	sub	sp, #8
 80102ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80102ae:	e019      	b.n	80102e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80102b0:	f001 f8b4 	bl	801141c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102b4:	4b0f      	ldr	r3, [pc, #60]	; (80102f4 <prvCheckTasksWaitingTermination+0x4c>)
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	68db      	ldr	r3, [r3, #12]
 80102ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	3304      	adds	r3, #4
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7fe f937 	bl	800e534 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80102c6:	4b0c      	ldr	r3, [pc, #48]	; (80102f8 <prvCheckTasksWaitingTermination+0x50>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	3b01      	subs	r3, #1
 80102cc:	4a0a      	ldr	r2, [pc, #40]	; (80102f8 <prvCheckTasksWaitingTermination+0x50>)
 80102ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80102d0:	4b0a      	ldr	r3, [pc, #40]	; (80102fc <prvCheckTasksWaitingTermination+0x54>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	3b01      	subs	r3, #1
 80102d6:	4a09      	ldr	r2, [pc, #36]	; (80102fc <prvCheckTasksWaitingTermination+0x54>)
 80102d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80102da:	f001 f8cd 	bl	8011478 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f000 f80e 	bl	8010300 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80102e4:	4b05      	ldr	r3, [pc, #20]	; (80102fc <prvCheckTasksWaitingTermination+0x54>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d1e1      	bne.n	80102b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80102ec:	bf00      	nop
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	20002104 	.word	0x20002104
 80102f8:	20002130 	.word	0x20002130
 80102fc:	20002118 	.word	0x20002118

08010300 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801030e:	2b00      	cmp	r3, #0
 8010310:	d108      	bne.n	8010324 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010316:	4618      	mov	r0, r3
 8010318:	f001 fa5c 	bl	80117d4 <vPortFree>
				vPortFree( pxTCB );
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f001 fa59 	bl	80117d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010322:	e017      	b.n	8010354 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801032a:	2b01      	cmp	r3, #1
 801032c:	d103      	bne.n	8010336 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f001 fa50 	bl	80117d4 <vPortFree>
	}
 8010334:	e00e      	b.n	8010354 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801033c:	2b02      	cmp	r3, #2
 801033e:	d009      	beq.n	8010354 <prvDeleteTCB+0x54>
 8010340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010344:	f383 8811 	msr	BASEPRI, r3
 8010348:	f3bf 8f6f 	isb	sy
 801034c:	f3bf 8f4f 	dsb	sy
 8010350:	60fb      	str	r3, [r7, #12]
 8010352:	e7fe      	b.n	8010352 <prvDeleteTCB+0x52>
	}
 8010354:	bf00      	nop
 8010356:	3710      	adds	r7, #16
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}

0801035c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801035c:	b480      	push	{r7}
 801035e:	b083      	sub	sp, #12
 8010360:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010362:	4b0c      	ldr	r3, [pc, #48]	; (8010394 <prvResetNextTaskUnblockTime+0x38>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d104      	bne.n	8010376 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801036c:	4b0a      	ldr	r3, [pc, #40]	; (8010398 <prvResetNextTaskUnblockTime+0x3c>)
 801036e:	f04f 32ff 	mov.w	r2, #4294967295
 8010372:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010374:	e008      	b.n	8010388 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010376:	4b07      	ldr	r3, [pc, #28]	; (8010394 <prvResetNextTaskUnblockTime+0x38>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	68db      	ldr	r3, [r3, #12]
 801037c:	68db      	ldr	r3, [r3, #12]
 801037e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	685b      	ldr	r3, [r3, #4]
 8010384:	4a04      	ldr	r2, [pc, #16]	; (8010398 <prvResetNextTaskUnblockTime+0x3c>)
 8010386:	6013      	str	r3, [r2, #0]
}
 8010388:	bf00      	nop
 801038a:	370c      	adds	r7, #12
 801038c:	46bd      	mov	sp, r7
 801038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010392:	4770      	bx	lr
 8010394:	200020e8 	.word	0x200020e8
 8010398:	20002150 	.word	0x20002150

0801039c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801039c:	b480      	push	{r7}
 801039e:	b083      	sub	sp, #12
 80103a0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80103a2:	4b05      	ldr	r3, [pc, #20]	; (80103b8 <xTaskGetCurrentTaskHandle+0x1c>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80103a8:	687b      	ldr	r3, [r7, #4]
	}
 80103aa:	4618      	mov	r0, r3
 80103ac:	370c      	adds	r7, #12
 80103ae:	46bd      	mov	sp, r7
 80103b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b4:	4770      	bx	lr
 80103b6:	bf00      	nop
 80103b8:	20001c5c 	.word	0x20001c5c

080103bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80103bc:	b480      	push	{r7}
 80103be:	b083      	sub	sp, #12
 80103c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80103c2:	4b0b      	ldr	r3, [pc, #44]	; (80103f0 <xTaskGetSchedulerState+0x34>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d102      	bne.n	80103d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80103ca:	2301      	movs	r3, #1
 80103cc:	607b      	str	r3, [r7, #4]
 80103ce:	e008      	b.n	80103e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80103d0:	4b08      	ldr	r3, [pc, #32]	; (80103f4 <xTaskGetSchedulerState+0x38>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d102      	bne.n	80103de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80103d8:	2302      	movs	r3, #2
 80103da:	607b      	str	r3, [r7, #4]
 80103dc:	e001      	b.n	80103e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80103de:	2300      	movs	r3, #0
 80103e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80103e2:	687b      	ldr	r3, [r7, #4]
	}
 80103e4:	4618      	mov	r0, r3
 80103e6:	370c      	adds	r7, #12
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr
 80103f0:	2000213c 	.word	0x2000213c
 80103f4:	20002158 	.word	0x20002158

080103f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b084      	sub	sp, #16
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010404:	2300      	movs	r3, #0
 8010406:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d051      	beq.n	80104b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010412:	4b2a      	ldr	r3, [pc, #168]	; (80104bc <xTaskPriorityInherit+0xc4>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010418:	429a      	cmp	r2, r3
 801041a:	d241      	bcs.n	80104a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	699b      	ldr	r3, [r3, #24]
 8010420:	2b00      	cmp	r3, #0
 8010422:	db06      	blt.n	8010432 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010424:	4b25      	ldr	r3, [pc, #148]	; (80104bc <xTaskPriorityInherit+0xc4>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801042a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	6959      	ldr	r1, [r3, #20]
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801043a:	4613      	mov	r3, r2
 801043c:	009b      	lsls	r3, r3, #2
 801043e:	4413      	add	r3, r2
 8010440:	009b      	lsls	r3, r3, #2
 8010442:	4a1f      	ldr	r2, [pc, #124]	; (80104c0 <xTaskPriorityInherit+0xc8>)
 8010444:	4413      	add	r3, r2
 8010446:	4299      	cmp	r1, r3
 8010448:	d122      	bne.n	8010490 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	3304      	adds	r3, #4
 801044e:	4618      	mov	r0, r3
 8010450:	f7fe f870 	bl	800e534 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010454:	4b19      	ldr	r3, [pc, #100]	; (80104bc <xTaskPriorityInherit+0xc4>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010462:	4b18      	ldr	r3, [pc, #96]	; (80104c4 <xTaskPriorityInherit+0xcc>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	429a      	cmp	r2, r3
 8010468:	d903      	bls.n	8010472 <xTaskPriorityInherit+0x7a>
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801046e:	4a15      	ldr	r2, [pc, #84]	; (80104c4 <xTaskPriorityInherit+0xcc>)
 8010470:	6013      	str	r3, [r2, #0]
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010476:	4613      	mov	r3, r2
 8010478:	009b      	lsls	r3, r3, #2
 801047a:	4413      	add	r3, r2
 801047c:	009b      	lsls	r3, r3, #2
 801047e:	4a10      	ldr	r2, [pc, #64]	; (80104c0 <xTaskPriorityInherit+0xc8>)
 8010480:	441a      	add	r2, r3
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	3304      	adds	r3, #4
 8010486:	4619      	mov	r1, r3
 8010488:	4610      	mov	r0, r2
 801048a:	f7fd fff6 	bl	800e47a <vListInsertEnd>
 801048e:	e004      	b.n	801049a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010490:	4b0a      	ldr	r3, [pc, #40]	; (80104bc <xTaskPriorityInherit+0xc4>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801049a:	2301      	movs	r3, #1
 801049c:	60fb      	str	r3, [r7, #12]
 801049e:	e008      	b.n	80104b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104a4:	4b05      	ldr	r3, [pc, #20]	; (80104bc <xTaskPriorityInherit+0xc4>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d201      	bcs.n	80104b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80104ae:	2301      	movs	r3, #1
 80104b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80104b2:	68fb      	ldr	r3, [r7, #12]
	}
 80104b4:	4618      	mov	r0, r3
 80104b6:	3710      	adds	r7, #16
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}
 80104bc:	20001c5c 	.word	0x20001c5c
 80104c0:	20001c60 	.word	0x20001c60
 80104c4:	20002138 	.word	0x20002138

080104c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b086      	sub	sp, #24
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80104d4:	2300      	movs	r3, #0
 80104d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d054      	beq.n	8010588 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80104de:	4b2d      	ldr	r3, [pc, #180]	; (8010594 <xTaskPriorityDisinherit+0xcc>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	693a      	ldr	r2, [r7, #16]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d009      	beq.n	80104fc <xTaskPriorityDisinherit+0x34>
 80104e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ec:	f383 8811 	msr	BASEPRI, r3
 80104f0:	f3bf 8f6f 	isb	sy
 80104f4:	f3bf 8f4f 	dsb	sy
 80104f8:	60fb      	str	r3, [r7, #12]
 80104fa:	e7fe      	b.n	80104fa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010500:	2b00      	cmp	r3, #0
 8010502:	d109      	bne.n	8010518 <xTaskPriorityDisinherit+0x50>
 8010504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010508:	f383 8811 	msr	BASEPRI, r3
 801050c:	f3bf 8f6f 	isb	sy
 8010510:	f3bf 8f4f 	dsb	sy
 8010514:	60bb      	str	r3, [r7, #8]
 8010516:	e7fe      	b.n	8010516 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801051c:	1e5a      	subs	r2, r3, #1
 801051e:	693b      	ldr	r3, [r7, #16]
 8010520:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801052a:	429a      	cmp	r2, r3
 801052c:	d02c      	beq.n	8010588 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010532:	2b00      	cmp	r3, #0
 8010534:	d128      	bne.n	8010588 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	3304      	adds	r3, #4
 801053a:	4618      	mov	r0, r3
 801053c:	f7fd fffa 	bl	800e534 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801054c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010558:	4b0f      	ldr	r3, [pc, #60]	; (8010598 <xTaskPriorityDisinherit+0xd0>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	429a      	cmp	r2, r3
 801055e:	d903      	bls.n	8010568 <xTaskPriorityDisinherit+0xa0>
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010564:	4a0c      	ldr	r2, [pc, #48]	; (8010598 <xTaskPriorityDisinherit+0xd0>)
 8010566:	6013      	str	r3, [r2, #0]
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801056c:	4613      	mov	r3, r2
 801056e:	009b      	lsls	r3, r3, #2
 8010570:	4413      	add	r3, r2
 8010572:	009b      	lsls	r3, r3, #2
 8010574:	4a09      	ldr	r2, [pc, #36]	; (801059c <xTaskPriorityDisinherit+0xd4>)
 8010576:	441a      	add	r2, r3
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	3304      	adds	r3, #4
 801057c:	4619      	mov	r1, r3
 801057e:	4610      	mov	r0, r2
 8010580:	f7fd ff7b 	bl	800e47a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010584:	2301      	movs	r3, #1
 8010586:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010588:	697b      	ldr	r3, [r7, #20]
	}
 801058a:	4618      	mov	r0, r3
 801058c:	3718      	adds	r7, #24
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	20001c5c 	.word	0x20001c5c
 8010598:	20002138 	.word	0x20002138
 801059c:	20001c60 	.word	0x20001c60

080105a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b088      	sub	sp, #32
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80105ae:	2301      	movs	r3, #1
 80105b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d068      	beq.n	801068a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80105b8:	69bb      	ldr	r3, [r7, #24]
 80105ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d109      	bne.n	80105d4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80105c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c4:	f383 8811 	msr	BASEPRI, r3
 80105c8:	f3bf 8f6f 	isb	sy
 80105cc:	f3bf 8f4f 	dsb	sy
 80105d0:	60fb      	str	r3, [r7, #12]
 80105d2:	e7fe      	b.n	80105d2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80105d4:	69bb      	ldr	r3, [r7, #24]
 80105d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105d8:	683a      	ldr	r2, [r7, #0]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d902      	bls.n	80105e4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	61fb      	str	r3, [r7, #28]
 80105e2:	e002      	b.n	80105ea <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80105e4:	69bb      	ldr	r3, [r7, #24]
 80105e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80105ea:	69bb      	ldr	r3, [r7, #24]
 80105ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105ee:	69fa      	ldr	r2, [r7, #28]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d04a      	beq.n	801068a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80105f4:	69bb      	ldr	r3, [r7, #24]
 80105f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105f8:	697a      	ldr	r2, [r7, #20]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d145      	bne.n	801068a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80105fe:	4b25      	ldr	r3, [pc, #148]	; (8010694 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	69ba      	ldr	r2, [r7, #24]
 8010604:	429a      	cmp	r2, r3
 8010606:	d109      	bne.n	801061c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8010608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801060c:	f383 8811 	msr	BASEPRI, r3
 8010610:	f3bf 8f6f 	isb	sy
 8010614:	f3bf 8f4f 	dsb	sy
 8010618:	60bb      	str	r3, [r7, #8]
 801061a:	e7fe      	b.n	801061a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801061c:	69bb      	ldr	r3, [r7, #24]
 801061e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010620:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010622:	69bb      	ldr	r3, [r7, #24]
 8010624:	69fa      	ldr	r2, [r7, #28]
 8010626:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010628:	69bb      	ldr	r3, [r7, #24]
 801062a:	699b      	ldr	r3, [r3, #24]
 801062c:	2b00      	cmp	r3, #0
 801062e:	db04      	blt.n	801063a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010630:	69fb      	ldr	r3, [r7, #28]
 8010632:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010636:	69bb      	ldr	r3, [r7, #24]
 8010638:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801063a:	69bb      	ldr	r3, [r7, #24]
 801063c:	6959      	ldr	r1, [r3, #20]
 801063e:	693a      	ldr	r2, [r7, #16]
 8010640:	4613      	mov	r3, r2
 8010642:	009b      	lsls	r3, r3, #2
 8010644:	4413      	add	r3, r2
 8010646:	009b      	lsls	r3, r3, #2
 8010648:	4a13      	ldr	r2, [pc, #76]	; (8010698 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801064a:	4413      	add	r3, r2
 801064c:	4299      	cmp	r1, r3
 801064e:	d11c      	bne.n	801068a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010650:	69bb      	ldr	r3, [r7, #24]
 8010652:	3304      	adds	r3, #4
 8010654:	4618      	mov	r0, r3
 8010656:	f7fd ff6d 	bl	800e534 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801065a:	69bb      	ldr	r3, [r7, #24]
 801065c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801065e:	4b0f      	ldr	r3, [pc, #60]	; (801069c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	429a      	cmp	r2, r3
 8010664:	d903      	bls.n	801066e <vTaskPriorityDisinheritAfterTimeout+0xce>
 8010666:	69bb      	ldr	r3, [r7, #24]
 8010668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801066a:	4a0c      	ldr	r2, [pc, #48]	; (801069c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801066c:	6013      	str	r3, [r2, #0]
 801066e:	69bb      	ldr	r3, [r7, #24]
 8010670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010672:	4613      	mov	r3, r2
 8010674:	009b      	lsls	r3, r3, #2
 8010676:	4413      	add	r3, r2
 8010678:	009b      	lsls	r3, r3, #2
 801067a:	4a07      	ldr	r2, [pc, #28]	; (8010698 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801067c:	441a      	add	r2, r3
 801067e:	69bb      	ldr	r3, [r7, #24]
 8010680:	3304      	adds	r3, #4
 8010682:	4619      	mov	r1, r3
 8010684:	4610      	mov	r0, r2
 8010686:	f7fd fef8 	bl	800e47a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801068a:	bf00      	nop
 801068c:	3720      	adds	r7, #32
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
 8010692:	bf00      	nop
 8010694:	20001c5c 	.word	0x20001c5c
 8010698:	20001c60 	.word	0x20001c60
 801069c:	20002138 	.word	0x20002138

080106a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80106a0:	b480      	push	{r7}
 80106a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80106a4:	4b07      	ldr	r3, [pc, #28]	; (80106c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d004      	beq.n	80106b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80106ac:	4b05      	ldr	r3, [pc, #20]	; (80106c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106b2:	3201      	adds	r2, #1
 80106b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80106b6:	4b03      	ldr	r3, [pc, #12]	; (80106c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80106b8:	681b      	ldr	r3, [r3, #0]
	}
 80106ba:	4618      	mov	r0, r3
 80106bc:	46bd      	mov	sp, r7
 80106be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c2:	4770      	bx	lr
 80106c4:	20001c5c 	.word	0x20001c5c

080106c8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b086      	sub	sp, #24
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	60f8      	str	r0, [r7, #12]
 80106d0:	60b9      	str	r1, [r7, #8]
 80106d2:	607a      	str	r2, [r7, #4]
 80106d4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80106d6:	f000 fea1 	bl	801141c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80106da:	4b26      	ldr	r3, [pc, #152]	; (8010774 <xTaskNotifyWait+0xac>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	2b02      	cmp	r3, #2
 80106e6:	d01a      	beq.n	801071e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80106e8:	4b22      	ldr	r3, [pc, #136]	; (8010774 <xTaskNotifyWait+0xac>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80106ee:	68fa      	ldr	r2, [r7, #12]
 80106f0:	43d2      	mvns	r2, r2
 80106f2:	400a      	ands	r2, r1
 80106f4:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80106f6:	4b1f      	ldr	r3, [pc, #124]	; (8010774 <xTaskNotifyWait+0xac>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	2201      	movs	r2, #1
 80106fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d00b      	beq.n	801071e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010706:	2101      	movs	r1, #1
 8010708:	6838      	ldr	r0, [r7, #0]
 801070a:	f000 f9c5 	bl	8010a98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801070e:	4b1a      	ldr	r3, [pc, #104]	; (8010778 <xTaskNotifyWait+0xb0>)
 8010710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010714:	601a      	str	r2, [r3, #0]
 8010716:	f3bf 8f4f 	dsb	sy
 801071a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801071e:	f000 feab 	bl	8011478 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010722:	f000 fe7b 	bl	801141c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d004      	beq.n	8010736 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801072c:	4b11      	ldr	r3, [pc, #68]	; (8010774 <xTaskNotifyWait+0xac>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010736:	4b0f      	ldr	r3, [pc, #60]	; (8010774 <xTaskNotifyWait+0xac>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801073e:	b2db      	uxtb	r3, r3
 8010740:	2b02      	cmp	r3, #2
 8010742:	d002      	beq.n	801074a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8010744:	2300      	movs	r3, #0
 8010746:	617b      	str	r3, [r7, #20]
 8010748:	e008      	b.n	801075c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801074a:	4b0a      	ldr	r3, [pc, #40]	; (8010774 <xTaskNotifyWait+0xac>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010750:	68ba      	ldr	r2, [r7, #8]
 8010752:	43d2      	mvns	r2, r2
 8010754:	400a      	ands	r2, r1
 8010756:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8010758:	2301      	movs	r3, #1
 801075a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801075c:	4b05      	ldr	r3, [pc, #20]	; (8010774 <xTaskNotifyWait+0xac>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	2200      	movs	r2, #0
 8010762:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8010766:	f000 fe87 	bl	8011478 <vPortExitCritical>

		return xReturn;
 801076a:	697b      	ldr	r3, [r7, #20]
	}
 801076c:	4618      	mov	r0, r3
 801076e:	3718      	adds	r7, #24
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}
 8010774:	20001c5c 	.word	0x20001c5c
 8010778:	e000ed04 	.word	0xe000ed04

0801077c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801077c:	b580      	push	{r7, lr}
 801077e:	b08a      	sub	sp, #40	; 0x28
 8010780:	af00      	add	r7, sp, #0
 8010782:	60f8      	str	r0, [r7, #12]
 8010784:	60b9      	str	r1, [r7, #8]
 8010786:	603b      	str	r3, [r7, #0]
 8010788:	4613      	mov	r3, r2
 801078a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801078c:	2301      	movs	r3, #1
 801078e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d109      	bne.n	80107aa <xTaskGenericNotify+0x2e>
 8010796:	f04f 0350 	mov.w	r3, #80	; 0x50
 801079a:	f383 8811 	msr	BASEPRI, r3
 801079e:	f3bf 8f6f 	isb	sy
 80107a2:	f3bf 8f4f 	dsb	sy
 80107a6:	61bb      	str	r3, [r7, #24]
 80107a8:	e7fe      	b.n	80107a8 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80107ae:	f000 fe35 	bl	801141c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d003      	beq.n	80107c0 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80107b8:	6a3b      	ldr	r3, [r7, #32]
 80107ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80107c0:	6a3b      	ldr	r3, [r7, #32]
 80107c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80107c6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80107c8:	6a3b      	ldr	r3, [r7, #32]
 80107ca:	2202      	movs	r2, #2
 80107cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80107d0:	79fb      	ldrb	r3, [r7, #7]
 80107d2:	2b04      	cmp	r3, #4
 80107d4:	d827      	bhi.n	8010826 <xTaskGenericNotify+0xaa>
 80107d6:	a201      	add	r2, pc, #4	; (adr r2, 80107dc <xTaskGenericNotify+0x60>)
 80107d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107dc:	08010845 	.word	0x08010845
 80107e0:	080107f1 	.word	0x080107f1
 80107e4:	080107ff 	.word	0x080107ff
 80107e8:	0801080b 	.word	0x0801080b
 80107ec:	08010813 	.word	0x08010813
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80107f0:	6a3b      	ldr	r3, [r7, #32]
 80107f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	431a      	orrs	r2, r3
 80107f8:	6a3b      	ldr	r3, [r7, #32]
 80107fa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80107fc:	e025      	b.n	801084a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80107fe:	6a3b      	ldr	r3, [r7, #32]
 8010800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010802:	1c5a      	adds	r2, r3, #1
 8010804:	6a3b      	ldr	r3, [r7, #32]
 8010806:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010808:	e01f      	b.n	801084a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801080a:	6a3b      	ldr	r3, [r7, #32]
 801080c:	68ba      	ldr	r2, [r7, #8]
 801080e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010810:	e01b      	b.n	801084a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010812:	7ffb      	ldrb	r3, [r7, #31]
 8010814:	2b02      	cmp	r3, #2
 8010816:	d003      	beq.n	8010820 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010818:	6a3b      	ldr	r3, [r7, #32]
 801081a:	68ba      	ldr	r2, [r7, #8]
 801081c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801081e:	e014      	b.n	801084a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8010820:	2300      	movs	r3, #0
 8010822:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8010824:	e011      	b.n	801084a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010826:	6a3b      	ldr	r3, [r7, #32]
 8010828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801082a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801082e:	d00b      	beq.n	8010848 <xTaskGenericNotify+0xcc>
 8010830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010834:	f383 8811 	msr	BASEPRI, r3
 8010838:	f3bf 8f6f 	isb	sy
 801083c:	f3bf 8f4f 	dsb	sy
 8010840:	617b      	str	r3, [r7, #20]
 8010842:	e7fe      	b.n	8010842 <xTaskGenericNotify+0xc6>
					break;
 8010844:	bf00      	nop
 8010846:	e000      	b.n	801084a <xTaskGenericNotify+0xce>

					break;
 8010848:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801084a:	7ffb      	ldrb	r3, [r7, #31]
 801084c:	2b01      	cmp	r3, #1
 801084e:	d13b      	bne.n	80108c8 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010850:	6a3b      	ldr	r3, [r7, #32]
 8010852:	3304      	adds	r3, #4
 8010854:	4618      	mov	r0, r3
 8010856:	f7fd fe6d 	bl	800e534 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801085a:	6a3b      	ldr	r3, [r7, #32]
 801085c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801085e:	4b1e      	ldr	r3, [pc, #120]	; (80108d8 <xTaskGenericNotify+0x15c>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	429a      	cmp	r2, r3
 8010864:	d903      	bls.n	801086e <xTaskGenericNotify+0xf2>
 8010866:	6a3b      	ldr	r3, [r7, #32]
 8010868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801086a:	4a1b      	ldr	r2, [pc, #108]	; (80108d8 <xTaskGenericNotify+0x15c>)
 801086c:	6013      	str	r3, [r2, #0]
 801086e:	6a3b      	ldr	r3, [r7, #32]
 8010870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010872:	4613      	mov	r3, r2
 8010874:	009b      	lsls	r3, r3, #2
 8010876:	4413      	add	r3, r2
 8010878:	009b      	lsls	r3, r3, #2
 801087a:	4a18      	ldr	r2, [pc, #96]	; (80108dc <xTaskGenericNotify+0x160>)
 801087c:	441a      	add	r2, r3
 801087e:	6a3b      	ldr	r3, [r7, #32]
 8010880:	3304      	adds	r3, #4
 8010882:	4619      	mov	r1, r3
 8010884:	4610      	mov	r0, r2
 8010886:	f7fd fdf8 	bl	800e47a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801088a:	6a3b      	ldr	r3, [r7, #32]
 801088c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801088e:	2b00      	cmp	r3, #0
 8010890:	d009      	beq.n	80108a6 <xTaskGenericNotify+0x12a>
 8010892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010896:	f383 8811 	msr	BASEPRI, r3
 801089a:	f3bf 8f6f 	isb	sy
 801089e:	f3bf 8f4f 	dsb	sy
 80108a2:	613b      	str	r3, [r7, #16]
 80108a4:	e7fe      	b.n	80108a4 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 80108a6:	f7ff fd59 	bl	801035c <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80108aa:	6a3b      	ldr	r3, [r7, #32]
 80108ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108ae:	4b0c      	ldr	r3, [pc, #48]	; (80108e0 <xTaskGenericNotify+0x164>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d907      	bls.n	80108c8 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80108b8:	4b0a      	ldr	r3, [pc, #40]	; (80108e4 <xTaskGenericNotify+0x168>)
 80108ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108be:	601a      	str	r2, [r3, #0]
 80108c0:	f3bf 8f4f 	dsb	sy
 80108c4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80108c8:	f000 fdd6 	bl	8011478 <vPortExitCritical>

		return xReturn;
 80108cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3728      	adds	r7, #40	; 0x28
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}
 80108d6:	bf00      	nop
 80108d8:	20002138 	.word	0x20002138
 80108dc:	20001c60 	.word	0x20001c60
 80108e0:	20001c5c 	.word	0x20001c5c
 80108e4:	e000ed04 	.word	0xe000ed04

080108e8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b08e      	sub	sp, #56	; 0x38
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	60f8      	str	r0, [r7, #12]
 80108f0:	60b9      	str	r1, [r7, #8]
 80108f2:	603b      	str	r3, [r7, #0]
 80108f4:	4613      	mov	r3, r2
 80108f6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80108f8:	2301      	movs	r3, #1
 80108fa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d109      	bne.n	8010916 <xTaskGenericNotifyFromISR+0x2e>
 8010902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010906:	f383 8811 	msr	BASEPRI, r3
 801090a:	f3bf 8f6f 	isb	sy
 801090e:	f3bf 8f4f 	dsb	sy
 8010912:	627b      	str	r3, [r7, #36]	; 0x24
 8010914:	e7fe      	b.n	8010914 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010916:	f000 fe5d 	bl	80115d4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801091e:	f3ef 8211 	mrs	r2, BASEPRI
 8010922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010926:	f383 8811 	msr	BASEPRI, r3
 801092a:	f3bf 8f6f 	isb	sy
 801092e:	f3bf 8f4f 	dsb	sy
 8010932:	623a      	str	r2, [r7, #32]
 8010934:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8010936:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010938:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d003      	beq.n	8010948 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010942:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801094e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010954:	2202      	movs	r2, #2
 8010956:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 801095a:	79fb      	ldrb	r3, [r7, #7]
 801095c:	2b04      	cmp	r3, #4
 801095e:	d829      	bhi.n	80109b4 <xTaskGenericNotifyFromISR+0xcc>
 8010960:	a201      	add	r2, pc, #4	; (adr r2, 8010968 <xTaskGenericNotifyFromISR+0x80>)
 8010962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010966:	bf00      	nop
 8010968:	080109d3 	.word	0x080109d3
 801096c:	0801097d 	.word	0x0801097d
 8010970:	0801098b 	.word	0x0801098b
 8010974:	08010997 	.word	0x08010997
 8010978:	0801099f 	.word	0x0801099f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801097c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	431a      	orrs	r2, r3
 8010984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010986:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010988:	e026      	b.n	80109d8 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801098a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801098c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801098e:	1c5a      	adds	r2, r3, #1
 8010990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010992:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010994:	e020      	b.n	80109d8 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010998:	68ba      	ldr	r2, [r7, #8]
 801099a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801099c:	e01c      	b.n	80109d8 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801099e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80109a2:	2b02      	cmp	r3, #2
 80109a4:	d003      	beq.n	80109ae <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80109a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a8:	68ba      	ldr	r2, [r7, #8]
 80109aa:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80109ac:	e014      	b.n	80109d8 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 80109ae:	2300      	movs	r3, #0
 80109b0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80109b2:	e011      	b.n	80109d8 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80109b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109bc:	d00b      	beq.n	80109d6 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 80109be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109c2:	f383 8811 	msr	BASEPRI, r3
 80109c6:	f3bf 8f6f 	isb	sy
 80109ca:	f3bf 8f4f 	dsb	sy
 80109ce:	61bb      	str	r3, [r7, #24]
 80109d0:	e7fe      	b.n	80109d0 <xTaskGenericNotifyFromISR+0xe8>
					break;
 80109d2:	bf00      	nop
 80109d4:	e000      	b.n	80109d8 <xTaskGenericNotifyFromISR+0xf0>
					break;
 80109d6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80109d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80109dc:	2b01      	cmp	r3, #1
 80109de:	d145      	bne.n	8010a6c <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80109e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d009      	beq.n	80109fc <xTaskGenericNotifyFromISR+0x114>
 80109e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ec:	f383 8811 	msr	BASEPRI, r3
 80109f0:	f3bf 8f6f 	isb	sy
 80109f4:	f3bf 8f4f 	dsb	sy
 80109f8:	617b      	str	r3, [r7, #20]
 80109fa:	e7fe      	b.n	80109fa <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109fc:	4b20      	ldr	r3, [pc, #128]	; (8010a80 <xTaskGenericNotifyFromISR+0x198>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d11d      	bne.n	8010a40 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a06:	3304      	adds	r3, #4
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7fd fd93 	bl	800e534 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a12:	4b1c      	ldr	r3, [pc, #112]	; (8010a84 <xTaskGenericNotifyFromISR+0x19c>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d903      	bls.n	8010a22 <xTaskGenericNotifyFromISR+0x13a>
 8010a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a1e:	4a19      	ldr	r2, [pc, #100]	; (8010a84 <xTaskGenericNotifyFromISR+0x19c>)
 8010a20:	6013      	str	r3, [r2, #0]
 8010a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a26:	4613      	mov	r3, r2
 8010a28:	009b      	lsls	r3, r3, #2
 8010a2a:	4413      	add	r3, r2
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	4a16      	ldr	r2, [pc, #88]	; (8010a88 <xTaskGenericNotifyFromISR+0x1a0>)
 8010a30:	441a      	add	r2, r3
 8010a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a34:	3304      	adds	r3, #4
 8010a36:	4619      	mov	r1, r3
 8010a38:	4610      	mov	r0, r2
 8010a3a:	f7fd fd1e 	bl	800e47a <vListInsertEnd>
 8010a3e:	e005      	b.n	8010a4c <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a42:	3318      	adds	r3, #24
 8010a44:	4619      	mov	r1, r3
 8010a46:	4811      	ldr	r0, [pc, #68]	; (8010a8c <xTaskGenericNotifyFromISR+0x1a4>)
 8010a48:	f7fd fd17 	bl	800e47a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a50:	4b0f      	ldr	r3, [pc, #60]	; (8010a90 <xTaskGenericNotifyFromISR+0x1a8>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d908      	bls.n	8010a6c <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d002      	beq.n	8010a66 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a62:	2201      	movs	r2, #1
 8010a64:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010a66:	4b0b      	ldr	r3, [pc, #44]	; (8010a94 <xTaskGenericNotifyFromISR+0x1ac>)
 8010a68:	2201      	movs	r2, #1
 8010a6a:	601a      	str	r2, [r3, #0]
 8010a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a6e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010a70:	693b      	ldr	r3, [r7, #16]
 8010a72:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8010a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3738      	adds	r7, #56	; 0x38
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}
 8010a80:	20002158 	.word	0x20002158
 8010a84:	20002138 	.word	0x20002138
 8010a88:	20001c60 	.word	0x20001c60
 8010a8c:	200020f0 	.word	0x200020f0
 8010a90:	20001c5c 	.word	0x20001c5c
 8010a94:	20002144 	.word	0x20002144

08010a98 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b084      	sub	sp, #16
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010aa2:	4b21      	ldr	r3, [pc, #132]	; (8010b28 <prvAddCurrentTaskToDelayedList+0x90>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010aa8:	4b20      	ldr	r3, [pc, #128]	; (8010b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	3304      	adds	r3, #4
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7fd fd40 	bl	800e534 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aba:	d10a      	bne.n	8010ad2 <prvAddCurrentTaskToDelayedList+0x3a>
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d007      	beq.n	8010ad2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ac2:	4b1a      	ldr	r3, [pc, #104]	; (8010b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	3304      	adds	r3, #4
 8010ac8:	4619      	mov	r1, r3
 8010aca:	4819      	ldr	r0, [pc, #100]	; (8010b30 <prvAddCurrentTaskToDelayedList+0x98>)
 8010acc:	f7fd fcd5 	bl	800e47a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010ad0:	e026      	b.n	8010b20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010ad2:	68fa      	ldr	r2, [r7, #12]
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	4413      	add	r3, r2
 8010ad8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010ada:	4b14      	ldr	r3, [pc, #80]	; (8010b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	68ba      	ldr	r2, [r7, #8]
 8010ae0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010ae2:	68ba      	ldr	r2, [r7, #8]
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d209      	bcs.n	8010afe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010aea:	4b12      	ldr	r3, [pc, #72]	; (8010b34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010aec:	681a      	ldr	r2, [r3, #0]
 8010aee:	4b0f      	ldr	r3, [pc, #60]	; (8010b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	3304      	adds	r3, #4
 8010af4:	4619      	mov	r1, r3
 8010af6:	4610      	mov	r0, r2
 8010af8:	f7fd fce3 	bl	800e4c2 <vListInsert>
}
 8010afc:	e010      	b.n	8010b20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010afe:	4b0e      	ldr	r3, [pc, #56]	; (8010b38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010b00:	681a      	ldr	r2, [r3, #0]
 8010b02:	4b0a      	ldr	r3, [pc, #40]	; (8010b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	3304      	adds	r3, #4
 8010b08:	4619      	mov	r1, r3
 8010b0a:	4610      	mov	r0, r2
 8010b0c:	f7fd fcd9 	bl	800e4c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010b10:	4b0a      	ldr	r3, [pc, #40]	; (8010b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	68ba      	ldr	r2, [r7, #8]
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d202      	bcs.n	8010b20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010b1a:	4a08      	ldr	r2, [pc, #32]	; (8010b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	6013      	str	r3, [r2, #0]
}
 8010b20:	bf00      	nop
 8010b22:	3710      	adds	r7, #16
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}
 8010b28:	20002134 	.word	0x20002134
 8010b2c:	20001c5c 	.word	0x20001c5c
 8010b30:	2000211c 	.word	0x2000211c
 8010b34:	200020ec 	.word	0x200020ec
 8010b38:	200020e8 	.word	0x200020e8
 8010b3c:	20002150 	.word	0x20002150

08010b40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b08a      	sub	sp, #40	; 0x28
 8010b44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010b46:	2300      	movs	r3, #0
 8010b48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010b4a:	f000 faff 	bl	801114c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010b4e:	4b1c      	ldr	r3, [pc, #112]	; (8010bc0 <xTimerCreateTimerTask+0x80>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d021      	beq.n	8010b9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010b56:	2300      	movs	r3, #0
 8010b58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010b5e:	1d3a      	adds	r2, r7, #4
 8010b60:	f107 0108 	add.w	r1, r7, #8
 8010b64:	f107 030c 	add.w	r3, r7, #12
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7fd fc3f 	bl	800e3ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010b6e:	6879      	ldr	r1, [r7, #4]
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	68fa      	ldr	r2, [r7, #12]
 8010b74:	9202      	str	r2, [sp, #8]
 8010b76:	9301      	str	r3, [sp, #4]
 8010b78:	2302      	movs	r3, #2
 8010b7a:	9300      	str	r3, [sp, #0]
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	460a      	mov	r2, r1
 8010b80:	4910      	ldr	r1, [pc, #64]	; (8010bc4 <xTimerCreateTimerTask+0x84>)
 8010b82:	4811      	ldr	r0, [pc, #68]	; (8010bc8 <xTimerCreateTimerTask+0x88>)
 8010b84:	f7fe fda2 	bl	800f6cc <xTaskCreateStatic>
 8010b88:	4602      	mov	r2, r0
 8010b8a:	4b10      	ldr	r3, [pc, #64]	; (8010bcc <xTimerCreateTimerTask+0x8c>)
 8010b8c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010b8e:	4b0f      	ldr	r3, [pc, #60]	; (8010bcc <xTimerCreateTimerTask+0x8c>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d001      	beq.n	8010b9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010b96:	2301      	movs	r3, #1
 8010b98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d109      	bne.n	8010bb4 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8010ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba4:	f383 8811 	msr	BASEPRI, r3
 8010ba8:	f3bf 8f6f 	isb	sy
 8010bac:	f3bf 8f4f 	dsb	sy
 8010bb0:	613b      	str	r3, [r7, #16]
 8010bb2:	e7fe      	b.n	8010bb2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8010bb4:	697b      	ldr	r3, [r7, #20]
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3718      	adds	r7, #24
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	2000218c 	.word	0x2000218c
 8010bc4:	08013600 	.word	0x08013600
 8010bc8:	08010d01 	.word	0x08010d01
 8010bcc:	20002190 	.word	0x20002190

08010bd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b08a      	sub	sp, #40	; 0x28
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	60f8      	str	r0, [r7, #12]
 8010bd8:	60b9      	str	r1, [r7, #8]
 8010bda:	607a      	str	r2, [r7, #4]
 8010bdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010bde:	2300      	movs	r3, #0
 8010be0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d109      	bne.n	8010bfc <xTimerGenericCommand+0x2c>
 8010be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bec:	f383 8811 	msr	BASEPRI, r3
 8010bf0:	f3bf 8f6f 	isb	sy
 8010bf4:	f3bf 8f4f 	dsb	sy
 8010bf8:	623b      	str	r3, [r7, #32]
 8010bfa:	e7fe      	b.n	8010bfa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010bfc:	4b19      	ldr	r3, [pc, #100]	; (8010c64 <xTimerGenericCommand+0x94>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d02a      	beq.n	8010c5a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010c04:	68bb      	ldr	r3, [r7, #8]
 8010c06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	2b05      	cmp	r3, #5
 8010c14:	dc18      	bgt.n	8010c48 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010c16:	f7ff fbd1 	bl	80103bc <xTaskGetSchedulerState>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	2b02      	cmp	r3, #2
 8010c1e:	d109      	bne.n	8010c34 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010c20:	4b10      	ldr	r3, [pc, #64]	; (8010c64 <xTimerGenericCommand+0x94>)
 8010c22:	6818      	ldr	r0, [r3, #0]
 8010c24:	f107 0110 	add.w	r1, r7, #16
 8010c28:	2300      	movs	r3, #0
 8010c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c2c:	f7fd ff04 	bl	800ea38 <xQueueGenericSend>
 8010c30:	6278      	str	r0, [r7, #36]	; 0x24
 8010c32:	e012      	b.n	8010c5a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010c34:	4b0b      	ldr	r3, [pc, #44]	; (8010c64 <xTimerGenericCommand+0x94>)
 8010c36:	6818      	ldr	r0, [r3, #0]
 8010c38:	f107 0110 	add.w	r1, r7, #16
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	2200      	movs	r2, #0
 8010c40:	f7fd fefa 	bl	800ea38 <xQueueGenericSend>
 8010c44:	6278      	str	r0, [r7, #36]	; 0x24
 8010c46:	e008      	b.n	8010c5a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010c48:	4b06      	ldr	r3, [pc, #24]	; (8010c64 <xTimerGenericCommand+0x94>)
 8010c4a:	6818      	ldr	r0, [r3, #0]
 8010c4c:	f107 0110 	add.w	r1, r7, #16
 8010c50:	2300      	movs	r3, #0
 8010c52:	683a      	ldr	r2, [r7, #0]
 8010c54:	f7fd ffea 	bl	800ec2c <xQueueGenericSendFromISR>
 8010c58:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3728      	adds	r7, #40	; 0x28
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	2000218c 	.word	0x2000218c

08010c68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b088      	sub	sp, #32
 8010c6c:	af02      	add	r7, sp, #8
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c72:	4b22      	ldr	r3, [pc, #136]	; (8010cfc <prvProcessExpiredTimer+0x94>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	68db      	ldr	r3, [r3, #12]
 8010c78:	68db      	ldr	r3, [r3, #12]
 8010c7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	3304      	adds	r3, #4
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7fd fc57 	bl	800e534 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c8c:	f003 0304 	and.w	r3, r3, #4
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d021      	beq.n	8010cd8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	699a      	ldr	r2, [r3, #24]
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	18d1      	adds	r1, r2, r3
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	683a      	ldr	r2, [r7, #0]
 8010ca0:	6978      	ldr	r0, [r7, #20]
 8010ca2:	f000 f8d1 	bl	8010e48 <prvInsertTimerInActiveList>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d01e      	beq.n	8010cea <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010cac:	2300      	movs	r3, #0
 8010cae:	9300      	str	r3, [sp, #0]
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	687a      	ldr	r2, [r7, #4]
 8010cb4:	2100      	movs	r1, #0
 8010cb6:	6978      	ldr	r0, [r7, #20]
 8010cb8:	f7ff ff8a 	bl	8010bd0 <xTimerGenericCommand>
 8010cbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d112      	bne.n	8010cea <prvProcessExpiredTimer+0x82>
 8010cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc8:	f383 8811 	msr	BASEPRI, r3
 8010ccc:	f3bf 8f6f 	isb	sy
 8010cd0:	f3bf 8f4f 	dsb	sy
 8010cd4:	60fb      	str	r3, [r7, #12]
 8010cd6:	e7fe      	b.n	8010cd6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cde:	f023 0301 	bic.w	r3, r3, #1
 8010ce2:	b2da      	uxtb	r2, r3
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	6a1b      	ldr	r3, [r3, #32]
 8010cee:	6978      	ldr	r0, [r7, #20]
 8010cf0:	4798      	blx	r3
}
 8010cf2:	bf00      	nop
 8010cf4:	3718      	adds	r7, #24
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}
 8010cfa:	bf00      	nop
 8010cfc:	20002184 	.word	0x20002184

08010d00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b084      	sub	sp, #16
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010d08:	f107 0308 	add.w	r3, r7, #8
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f000 f857 	bl	8010dc0 <prvGetNextExpireTime>
 8010d12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	4619      	mov	r1, r3
 8010d18:	68f8      	ldr	r0, [r7, #12]
 8010d1a:	f000 f803 	bl	8010d24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010d1e:	f000 f8d5 	bl	8010ecc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010d22:	e7f1      	b.n	8010d08 <prvTimerTask+0x8>

08010d24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b084      	sub	sp, #16
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010d2e:	f7fe ff03 	bl	800fb38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d32:	f107 0308 	add.w	r3, r7, #8
 8010d36:	4618      	mov	r0, r3
 8010d38:	f000 f866 	bl	8010e08 <prvSampleTimeNow>
 8010d3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d130      	bne.n	8010da6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d10a      	bne.n	8010d60 <prvProcessTimerOrBlockTask+0x3c>
 8010d4a:	687a      	ldr	r2, [r7, #4]
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d806      	bhi.n	8010d60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010d52:	f7fe ff37 	bl	800fbc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010d56:	68f9      	ldr	r1, [r7, #12]
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f7ff ff85 	bl	8010c68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010d5e:	e024      	b.n	8010daa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d008      	beq.n	8010d78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010d66:	4b13      	ldr	r3, [pc, #76]	; (8010db4 <prvProcessTimerOrBlockTask+0x90>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d101      	bne.n	8010d74 <prvProcessTimerOrBlockTask+0x50>
 8010d70:	2301      	movs	r3, #1
 8010d72:	e000      	b.n	8010d76 <prvProcessTimerOrBlockTask+0x52>
 8010d74:	2300      	movs	r3, #0
 8010d76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010d78:	4b0f      	ldr	r3, [pc, #60]	; (8010db8 <prvProcessTimerOrBlockTask+0x94>)
 8010d7a:	6818      	ldr	r0, [r3, #0]
 8010d7c:	687a      	ldr	r2, [r7, #4]
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	1ad3      	subs	r3, r2, r3
 8010d82:	683a      	ldr	r2, [r7, #0]
 8010d84:	4619      	mov	r1, r3
 8010d86:	f7fe fc6d 	bl	800f664 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010d8a:	f7fe ff1b 	bl	800fbc4 <xTaskResumeAll>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d10a      	bne.n	8010daa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010d94:	4b09      	ldr	r3, [pc, #36]	; (8010dbc <prvProcessTimerOrBlockTask+0x98>)
 8010d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d9a:	601a      	str	r2, [r3, #0]
 8010d9c:	f3bf 8f4f 	dsb	sy
 8010da0:	f3bf 8f6f 	isb	sy
}
 8010da4:	e001      	b.n	8010daa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010da6:	f7fe ff0d 	bl	800fbc4 <xTaskResumeAll>
}
 8010daa:	bf00      	nop
 8010dac:	3710      	adds	r7, #16
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}
 8010db2:	bf00      	nop
 8010db4:	20002188 	.word	0x20002188
 8010db8:	2000218c 	.word	0x2000218c
 8010dbc:	e000ed04 	.word	0xe000ed04

08010dc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010dc0:	b480      	push	{r7}
 8010dc2:	b085      	sub	sp, #20
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010dc8:	4b0e      	ldr	r3, [pc, #56]	; (8010e04 <prvGetNextExpireTime+0x44>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d101      	bne.n	8010dd6 <prvGetNextExpireTime+0x16>
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	e000      	b.n	8010dd8 <prvGetNextExpireTime+0x18>
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d105      	bne.n	8010df0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010de4:	4b07      	ldr	r3, [pc, #28]	; (8010e04 <prvGetNextExpireTime+0x44>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	68db      	ldr	r3, [r3, #12]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	60fb      	str	r3, [r7, #12]
 8010dee:	e001      	b.n	8010df4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010df0:	2300      	movs	r3, #0
 8010df2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010df4:	68fb      	ldr	r3, [r7, #12]
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3714      	adds	r7, #20
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e00:	4770      	bx	lr
 8010e02:	bf00      	nop
 8010e04:	20002184 	.word	0x20002184

08010e08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010e10:	f7fe ff74 	bl	800fcfc <xTaskGetTickCount>
 8010e14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010e16:	4b0b      	ldr	r3, [pc, #44]	; (8010e44 <prvSampleTimeNow+0x3c>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	68fa      	ldr	r2, [r7, #12]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	d205      	bcs.n	8010e2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010e20:	f000 f930 	bl	8011084 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2201      	movs	r2, #1
 8010e28:	601a      	str	r2, [r3, #0]
 8010e2a:	e002      	b.n	8010e32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010e32:	4a04      	ldr	r2, [pc, #16]	; (8010e44 <prvSampleTimeNow+0x3c>)
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010e38:	68fb      	ldr	r3, [r7, #12]
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3710      	adds	r7, #16
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}
 8010e42:	bf00      	nop
 8010e44:	20002194 	.word	0x20002194

08010e48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b086      	sub	sp, #24
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	60f8      	str	r0, [r7, #12]
 8010e50:	60b9      	str	r1, [r7, #8]
 8010e52:	607a      	str	r2, [r7, #4]
 8010e54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010e56:	2300      	movs	r3, #0
 8010e58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	68ba      	ldr	r2, [r7, #8]
 8010e5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	68fa      	ldr	r2, [r7, #12]
 8010e64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010e66:	68ba      	ldr	r2, [r7, #8]
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d812      	bhi.n	8010e94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e6e:	687a      	ldr	r2, [r7, #4]
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	1ad2      	subs	r2, r2, r3
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	699b      	ldr	r3, [r3, #24]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d302      	bcc.n	8010e82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	617b      	str	r3, [r7, #20]
 8010e80:	e01b      	b.n	8010eba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010e82:	4b10      	ldr	r3, [pc, #64]	; (8010ec4 <prvInsertTimerInActiveList+0x7c>)
 8010e84:	681a      	ldr	r2, [r3, #0]
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	3304      	adds	r3, #4
 8010e8a:	4619      	mov	r1, r3
 8010e8c:	4610      	mov	r0, r2
 8010e8e:	f7fd fb18 	bl	800e4c2 <vListInsert>
 8010e92:	e012      	b.n	8010eba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010e94:	687a      	ldr	r2, [r7, #4]
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d206      	bcs.n	8010eaa <prvInsertTimerInActiveList+0x62>
 8010e9c:	68ba      	ldr	r2, [r7, #8]
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d302      	bcc.n	8010eaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010ea4:	2301      	movs	r3, #1
 8010ea6:	617b      	str	r3, [r7, #20]
 8010ea8:	e007      	b.n	8010eba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010eaa:	4b07      	ldr	r3, [pc, #28]	; (8010ec8 <prvInsertTimerInActiveList+0x80>)
 8010eac:	681a      	ldr	r2, [r3, #0]
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	3304      	adds	r3, #4
 8010eb2:	4619      	mov	r1, r3
 8010eb4:	4610      	mov	r0, r2
 8010eb6:	f7fd fb04 	bl	800e4c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010eba:	697b      	ldr	r3, [r7, #20]
}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3718      	adds	r7, #24
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}
 8010ec4:	20002188 	.word	0x20002188
 8010ec8:	20002184 	.word	0x20002184

08010ecc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b08e      	sub	sp, #56	; 0x38
 8010ed0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010ed2:	e0c6      	b.n	8011062 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	da17      	bge.n	8010f0a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010eda:	1d3b      	adds	r3, r7, #4
 8010edc:	3304      	adds	r3, #4
 8010ede:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d109      	bne.n	8010efa <prvProcessReceivedCommands+0x2e>
 8010ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eea:	f383 8811 	msr	BASEPRI, r3
 8010eee:	f3bf 8f6f 	isb	sy
 8010ef2:	f3bf 8f4f 	dsb	sy
 8010ef6:	61fb      	str	r3, [r7, #28]
 8010ef8:	e7fe      	b.n	8010ef8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f00:	6850      	ldr	r0, [r2, #4]
 8010f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f04:	6892      	ldr	r2, [r2, #8]
 8010f06:	4611      	mov	r1, r2
 8010f08:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	f2c0 80a7 	blt.w	8011060 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f18:	695b      	ldr	r3, [r3, #20]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d004      	beq.n	8010f28 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f20:	3304      	adds	r3, #4
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7fd fb06 	bl	800e534 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010f28:	463b      	mov	r3, r7
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7ff ff6c 	bl	8010e08 <prvSampleTimeNow>
 8010f30:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2b09      	cmp	r3, #9
 8010f36:	f200 8094 	bhi.w	8011062 <prvProcessReceivedCommands+0x196>
 8010f3a:	a201      	add	r2, pc, #4	; (adr r2, 8010f40 <prvProcessReceivedCommands+0x74>)
 8010f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f40:	08010f69 	.word	0x08010f69
 8010f44:	08010f69 	.word	0x08010f69
 8010f48:	08010f69 	.word	0x08010f69
 8010f4c:	08010fdb 	.word	0x08010fdb
 8010f50:	08010fef 	.word	0x08010fef
 8010f54:	08011037 	.word	0x08011037
 8010f58:	08010f69 	.word	0x08010f69
 8010f5c:	08010f69 	.word	0x08010f69
 8010f60:	08010fdb 	.word	0x08010fdb
 8010f64:	08010fef 	.word	0x08010fef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f6e:	f043 0301 	orr.w	r3, r3, #1
 8010f72:	b2da      	uxtb	r2, r3
 8010f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010f7a:	68ba      	ldr	r2, [r7, #8]
 8010f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f7e:	699b      	ldr	r3, [r3, #24]
 8010f80:	18d1      	adds	r1, r2, r3
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f88:	f7ff ff5e 	bl	8010e48 <prvInsertTimerInActiveList>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d067      	beq.n	8011062 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f94:	6a1b      	ldr	r3, [r3, #32]
 8010f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fa0:	f003 0304 	and.w	r3, r3, #4
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d05c      	beq.n	8011062 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010fa8:	68ba      	ldr	r2, [r7, #8]
 8010faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fac:	699b      	ldr	r3, [r3, #24]
 8010fae:	441a      	add	r2, r3
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	9300      	str	r3, [sp, #0]
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	2100      	movs	r1, #0
 8010fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fba:	f7ff fe09 	bl	8010bd0 <xTimerGenericCommand>
 8010fbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010fc0:	6a3b      	ldr	r3, [r7, #32]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d14d      	bne.n	8011062 <prvProcessReceivedCommands+0x196>
 8010fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fca:	f383 8811 	msr	BASEPRI, r3
 8010fce:	f3bf 8f6f 	isb	sy
 8010fd2:	f3bf 8f4f 	dsb	sy
 8010fd6:	61bb      	str	r3, [r7, #24]
 8010fd8:	e7fe      	b.n	8010fd8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fe0:	f023 0301 	bic.w	r3, r3, #1
 8010fe4:	b2da      	uxtb	r2, r3
 8010fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010fec:	e039      	b.n	8011062 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ff4:	f043 0301 	orr.w	r3, r3, #1
 8010ff8:	b2da      	uxtb	r2, r3
 8010ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ffc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011000:	68ba      	ldr	r2, [r7, #8]
 8011002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011004:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011008:	699b      	ldr	r3, [r3, #24]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d109      	bne.n	8011022 <prvProcessReceivedCommands+0x156>
 801100e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011012:	f383 8811 	msr	BASEPRI, r3
 8011016:	f3bf 8f6f 	isb	sy
 801101a:	f3bf 8f4f 	dsb	sy
 801101e:	617b      	str	r3, [r7, #20]
 8011020:	e7fe      	b.n	8011020 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011024:	699a      	ldr	r2, [r3, #24]
 8011026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011028:	18d1      	adds	r1, r2, r3
 801102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801102e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011030:	f7ff ff0a 	bl	8010e48 <prvInsertTimerInActiveList>
					break;
 8011034:	e015      	b.n	8011062 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801103c:	f003 0302 	and.w	r3, r3, #2
 8011040:	2b00      	cmp	r3, #0
 8011042:	d103      	bne.n	801104c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8011044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011046:	f000 fbc5 	bl	80117d4 <vPortFree>
 801104a:	e00a      	b.n	8011062 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801104c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801104e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011052:	f023 0301 	bic.w	r3, r3, #1
 8011056:	b2da      	uxtb	r2, r3
 8011058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801105a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801105e:	e000      	b.n	8011062 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011060:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011062:	4b07      	ldr	r3, [pc, #28]	; (8011080 <prvProcessReceivedCommands+0x1b4>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	1d39      	adds	r1, r7, #4
 8011068:	2200      	movs	r2, #0
 801106a:	4618      	mov	r0, r3
 801106c:	f7fd fefc 	bl	800ee68 <xQueueReceive>
 8011070:	4603      	mov	r3, r0
 8011072:	2b00      	cmp	r3, #0
 8011074:	f47f af2e 	bne.w	8010ed4 <prvProcessReceivedCommands+0x8>
	}
}
 8011078:	bf00      	nop
 801107a:	3730      	adds	r7, #48	; 0x30
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	2000218c 	.word	0x2000218c

08011084 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b088      	sub	sp, #32
 8011088:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801108a:	e047      	b.n	801111c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801108c:	4b2d      	ldr	r3, [pc, #180]	; (8011144 <prvSwitchTimerLists+0xc0>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	68db      	ldr	r3, [r3, #12]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011096:	4b2b      	ldr	r3, [pc, #172]	; (8011144 <prvSwitchTimerLists+0xc0>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	68db      	ldr	r3, [r3, #12]
 801109c:	68db      	ldr	r3, [r3, #12]
 801109e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	3304      	adds	r3, #4
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7fd fa45 	bl	800e534 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	6a1b      	ldr	r3, [r3, #32]
 80110ae:	68f8      	ldr	r0, [r7, #12]
 80110b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110b8:	f003 0304 	and.w	r3, r3, #4
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d02d      	beq.n	801111c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	699b      	ldr	r3, [r3, #24]
 80110c4:	693a      	ldr	r2, [r7, #16]
 80110c6:	4413      	add	r3, r2
 80110c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80110ca:	68ba      	ldr	r2, [r7, #8]
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d90e      	bls.n	80110f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	68ba      	ldr	r2, [r7, #8]
 80110d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	68fa      	ldr	r2, [r7, #12]
 80110dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80110de:	4b19      	ldr	r3, [pc, #100]	; (8011144 <prvSwitchTimerLists+0xc0>)
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	3304      	adds	r3, #4
 80110e6:	4619      	mov	r1, r3
 80110e8:	4610      	mov	r0, r2
 80110ea:	f7fd f9ea 	bl	800e4c2 <vListInsert>
 80110ee:	e015      	b.n	801111c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80110f0:	2300      	movs	r3, #0
 80110f2:	9300      	str	r3, [sp, #0]
 80110f4:	2300      	movs	r3, #0
 80110f6:	693a      	ldr	r2, [r7, #16]
 80110f8:	2100      	movs	r1, #0
 80110fa:	68f8      	ldr	r0, [r7, #12]
 80110fc:	f7ff fd68 	bl	8010bd0 <xTimerGenericCommand>
 8011100:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d109      	bne.n	801111c <prvSwitchTimerLists+0x98>
 8011108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801110c:	f383 8811 	msr	BASEPRI, r3
 8011110:	f3bf 8f6f 	isb	sy
 8011114:	f3bf 8f4f 	dsb	sy
 8011118:	603b      	str	r3, [r7, #0]
 801111a:	e7fe      	b.n	801111a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801111c:	4b09      	ldr	r3, [pc, #36]	; (8011144 <prvSwitchTimerLists+0xc0>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d1b2      	bne.n	801108c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011126:	4b07      	ldr	r3, [pc, #28]	; (8011144 <prvSwitchTimerLists+0xc0>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801112c:	4b06      	ldr	r3, [pc, #24]	; (8011148 <prvSwitchTimerLists+0xc4>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	4a04      	ldr	r2, [pc, #16]	; (8011144 <prvSwitchTimerLists+0xc0>)
 8011132:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011134:	4a04      	ldr	r2, [pc, #16]	; (8011148 <prvSwitchTimerLists+0xc4>)
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	6013      	str	r3, [r2, #0]
}
 801113a:	bf00      	nop
 801113c:	3718      	adds	r7, #24
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	20002184 	.word	0x20002184
 8011148:	20002188 	.word	0x20002188

0801114c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b082      	sub	sp, #8
 8011150:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011152:	f000 f963 	bl	801141c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011156:	4b15      	ldr	r3, [pc, #84]	; (80111ac <prvCheckForValidListAndQueue+0x60>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d120      	bne.n	80111a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801115e:	4814      	ldr	r0, [pc, #80]	; (80111b0 <prvCheckForValidListAndQueue+0x64>)
 8011160:	f7fd f95e 	bl	800e420 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011164:	4813      	ldr	r0, [pc, #76]	; (80111b4 <prvCheckForValidListAndQueue+0x68>)
 8011166:	f7fd f95b 	bl	800e420 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801116a:	4b13      	ldr	r3, [pc, #76]	; (80111b8 <prvCheckForValidListAndQueue+0x6c>)
 801116c:	4a10      	ldr	r2, [pc, #64]	; (80111b0 <prvCheckForValidListAndQueue+0x64>)
 801116e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011170:	4b12      	ldr	r3, [pc, #72]	; (80111bc <prvCheckForValidListAndQueue+0x70>)
 8011172:	4a10      	ldr	r2, [pc, #64]	; (80111b4 <prvCheckForValidListAndQueue+0x68>)
 8011174:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011176:	2300      	movs	r3, #0
 8011178:	9300      	str	r3, [sp, #0]
 801117a:	4b11      	ldr	r3, [pc, #68]	; (80111c0 <prvCheckForValidListAndQueue+0x74>)
 801117c:	4a11      	ldr	r2, [pc, #68]	; (80111c4 <prvCheckForValidListAndQueue+0x78>)
 801117e:	2110      	movs	r1, #16
 8011180:	200a      	movs	r0, #10
 8011182:	f7fd fa69 	bl	800e658 <xQueueGenericCreateStatic>
 8011186:	4602      	mov	r2, r0
 8011188:	4b08      	ldr	r3, [pc, #32]	; (80111ac <prvCheckForValidListAndQueue+0x60>)
 801118a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801118c:	4b07      	ldr	r3, [pc, #28]	; (80111ac <prvCheckForValidListAndQueue+0x60>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d005      	beq.n	80111a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011194:	4b05      	ldr	r3, [pc, #20]	; (80111ac <prvCheckForValidListAndQueue+0x60>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	490b      	ldr	r1, [pc, #44]	; (80111c8 <prvCheckForValidListAndQueue+0x7c>)
 801119a:	4618      	mov	r0, r3
 801119c:	f7fe fa10 	bl	800f5c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80111a0:	f000 f96a 	bl	8011478 <vPortExitCritical>
}
 80111a4:	bf00      	nop
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
 80111aa:	bf00      	nop
 80111ac:	2000218c 	.word	0x2000218c
 80111b0:	2000215c 	.word	0x2000215c
 80111b4:	20002170 	.word	0x20002170
 80111b8:	20002184 	.word	0x20002184
 80111bc:	20002188 	.word	0x20002188
 80111c0:	20002238 	.word	0x20002238
 80111c4:	20002198 	.word	0x20002198
 80111c8:	08013608 	.word	0x08013608

080111cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80111cc:	b480      	push	{r7}
 80111ce:	b085      	sub	sp, #20
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	60f8      	str	r0, [r7, #12]
 80111d4:	60b9      	str	r1, [r7, #8]
 80111d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	3b04      	subs	r3, #4
 80111dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80111e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	3b04      	subs	r3, #4
 80111ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	f023 0201 	bic.w	r2, r3, #1
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	3b04      	subs	r3, #4
 80111fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80111fc:	4a0c      	ldr	r2, [pc, #48]	; (8011230 <pxPortInitialiseStack+0x64>)
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	3b14      	subs	r3, #20
 8011206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011208:	687a      	ldr	r2, [r7, #4]
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	3b04      	subs	r3, #4
 8011212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	f06f 0202 	mvn.w	r2, #2
 801121a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	3b20      	subs	r3, #32
 8011220:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011222:	68fb      	ldr	r3, [r7, #12]
}
 8011224:	4618      	mov	r0, r3
 8011226:	3714      	adds	r7, #20
 8011228:	46bd      	mov	sp, r7
 801122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122e:	4770      	bx	lr
 8011230:	08011235 	.word	0x08011235

08011234 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011234:	b480      	push	{r7}
 8011236:	b085      	sub	sp, #20
 8011238:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801123a:	2300      	movs	r3, #0
 801123c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801123e:	4b11      	ldr	r3, [pc, #68]	; (8011284 <prvTaskExitError+0x50>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011246:	d009      	beq.n	801125c <prvTaskExitError+0x28>
 8011248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801124c:	f383 8811 	msr	BASEPRI, r3
 8011250:	f3bf 8f6f 	isb	sy
 8011254:	f3bf 8f4f 	dsb	sy
 8011258:	60fb      	str	r3, [r7, #12]
 801125a:	e7fe      	b.n	801125a <prvTaskExitError+0x26>
 801125c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011260:	f383 8811 	msr	BASEPRI, r3
 8011264:	f3bf 8f6f 	isb	sy
 8011268:	f3bf 8f4f 	dsb	sy
 801126c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801126e:	bf00      	nop
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d0fc      	beq.n	8011270 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011276:	bf00      	nop
 8011278:	3714      	adds	r7, #20
 801127a:	46bd      	mov	sp, r7
 801127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011280:	4770      	bx	lr
 8011282:	bf00      	nop
 8011284:	2000013c 	.word	0x2000013c
	...

08011290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011290:	4b07      	ldr	r3, [pc, #28]	; (80112b0 <pxCurrentTCBConst2>)
 8011292:	6819      	ldr	r1, [r3, #0]
 8011294:	6808      	ldr	r0, [r1, #0]
 8011296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801129a:	f380 8809 	msr	PSP, r0
 801129e:	f3bf 8f6f 	isb	sy
 80112a2:	f04f 0000 	mov.w	r0, #0
 80112a6:	f380 8811 	msr	BASEPRI, r0
 80112aa:	4770      	bx	lr
 80112ac:	f3af 8000 	nop.w

080112b0 <pxCurrentTCBConst2>:
 80112b0:	20001c5c 	.word	0x20001c5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80112b4:	bf00      	nop
 80112b6:	bf00      	nop

080112b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80112b8:	4808      	ldr	r0, [pc, #32]	; (80112dc <prvPortStartFirstTask+0x24>)
 80112ba:	6800      	ldr	r0, [r0, #0]
 80112bc:	6800      	ldr	r0, [r0, #0]
 80112be:	f380 8808 	msr	MSP, r0
 80112c2:	f04f 0000 	mov.w	r0, #0
 80112c6:	f380 8814 	msr	CONTROL, r0
 80112ca:	b662      	cpsie	i
 80112cc:	b661      	cpsie	f
 80112ce:	f3bf 8f4f 	dsb	sy
 80112d2:	f3bf 8f6f 	isb	sy
 80112d6:	df00      	svc	0
 80112d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80112da:	bf00      	nop
 80112dc:	e000ed08 	.word	0xe000ed08

080112e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b086      	sub	sp, #24
 80112e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80112e6:	4b44      	ldr	r3, [pc, #272]	; (80113f8 <xPortStartScheduler+0x118>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	4a44      	ldr	r2, [pc, #272]	; (80113fc <xPortStartScheduler+0x11c>)
 80112ec:	4293      	cmp	r3, r2
 80112ee:	d109      	bne.n	8011304 <xPortStartScheduler+0x24>
 80112f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112f4:	f383 8811 	msr	BASEPRI, r3
 80112f8:	f3bf 8f6f 	isb	sy
 80112fc:	f3bf 8f4f 	dsb	sy
 8011300:	613b      	str	r3, [r7, #16]
 8011302:	e7fe      	b.n	8011302 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011304:	4b3c      	ldr	r3, [pc, #240]	; (80113f8 <xPortStartScheduler+0x118>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	4a3d      	ldr	r2, [pc, #244]	; (8011400 <xPortStartScheduler+0x120>)
 801130a:	4293      	cmp	r3, r2
 801130c:	d109      	bne.n	8011322 <xPortStartScheduler+0x42>
 801130e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011312:	f383 8811 	msr	BASEPRI, r3
 8011316:	f3bf 8f6f 	isb	sy
 801131a:	f3bf 8f4f 	dsb	sy
 801131e:	60fb      	str	r3, [r7, #12]
 8011320:	e7fe      	b.n	8011320 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011322:	4b38      	ldr	r3, [pc, #224]	; (8011404 <xPortStartScheduler+0x124>)
 8011324:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	781b      	ldrb	r3, [r3, #0]
 801132a:	b2db      	uxtb	r3, r3
 801132c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	22ff      	movs	r2, #255	; 0xff
 8011332:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011334:	697b      	ldr	r3, [r7, #20]
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	b2db      	uxtb	r3, r3
 801133a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801133c:	78fb      	ldrb	r3, [r7, #3]
 801133e:	b2db      	uxtb	r3, r3
 8011340:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011344:	b2da      	uxtb	r2, r3
 8011346:	4b30      	ldr	r3, [pc, #192]	; (8011408 <xPortStartScheduler+0x128>)
 8011348:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801134a:	4b30      	ldr	r3, [pc, #192]	; (801140c <xPortStartScheduler+0x12c>)
 801134c:	2207      	movs	r2, #7
 801134e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011350:	e009      	b.n	8011366 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011352:	4b2e      	ldr	r3, [pc, #184]	; (801140c <xPortStartScheduler+0x12c>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	3b01      	subs	r3, #1
 8011358:	4a2c      	ldr	r2, [pc, #176]	; (801140c <xPortStartScheduler+0x12c>)
 801135a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801135c:	78fb      	ldrb	r3, [r7, #3]
 801135e:	b2db      	uxtb	r3, r3
 8011360:	005b      	lsls	r3, r3, #1
 8011362:	b2db      	uxtb	r3, r3
 8011364:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011366:	78fb      	ldrb	r3, [r7, #3]
 8011368:	b2db      	uxtb	r3, r3
 801136a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801136e:	2b80      	cmp	r3, #128	; 0x80
 8011370:	d0ef      	beq.n	8011352 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011372:	4b26      	ldr	r3, [pc, #152]	; (801140c <xPortStartScheduler+0x12c>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	f1c3 0307 	rsb	r3, r3, #7
 801137a:	2b04      	cmp	r3, #4
 801137c:	d009      	beq.n	8011392 <xPortStartScheduler+0xb2>
 801137e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011382:	f383 8811 	msr	BASEPRI, r3
 8011386:	f3bf 8f6f 	isb	sy
 801138a:	f3bf 8f4f 	dsb	sy
 801138e:	60bb      	str	r3, [r7, #8]
 8011390:	e7fe      	b.n	8011390 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011392:	4b1e      	ldr	r3, [pc, #120]	; (801140c <xPortStartScheduler+0x12c>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	021b      	lsls	r3, r3, #8
 8011398:	4a1c      	ldr	r2, [pc, #112]	; (801140c <xPortStartScheduler+0x12c>)
 801139a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801139c:	4b1b      	ldr	r3, [pc, #108]	; (801140c <xPortStartScheduler+0x12c>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80113a4:	4a19      	ldr	r2, [pc, #100]	; (801140c <xPortStartScheduler+0x12c>)
 80113a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	b2da      	uxtb	r2, r3
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80113b0:	4b17      	ldr	r3, [pc, #92]	; (8011410 <xPortStartScheduler+0x130>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	4a16      	ldr	r2, [pc, #88]	; (8011410 <xPortStartScheduler+0x130>)
 80113b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80113ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80113bc:	4b14      	ldr	r3, [pc, #80]	; (8011410 <xPortStartScheduler+0x130>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	4a13      	ldr	r2, [pc, #76]	; (8011410 <xPortStartScheduler+0x130>)
 80113c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80113c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80113c8:	f000 f8d6 	bl	8011578 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80113cc:	4b11      	ldr	r3, [pc, #68]	; (8011414 <xPortStartScheduler+0x134>)
 80113ce:	2200      	movs	r2, #0
 80113d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80113d2:	f000 f8f5 	bl	80115c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80113d6:	4b10      	ldr	r3, [pc, #64]	; (8011418 <xPortStartScheduler+0x138>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	4a0f      	ldr	r2, [pc, #60]	; (8011418 <xPortStartScheduler+0x138>)
 80113dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80113e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80113e2:	f7ff ff69 	bl	80112b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80113e6:	f7fe fd51 	bl	800fe8c <vTaskSwitchContext>
	prvTaskExitError();
 80113ea:	f7ff ff23 	bl	8011234 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80113ee:	2300      	movs	r3, #0
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3718      	adds	r7, #24
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	e000ed00 	.word	0xe000ed00
 80113fc:	410fc271 	.word	0x410fc271
 8011400:	410fc270 	.word	0x410fc270
 8011404:	e000e400 	.word	0xe000e400
 8011408:	20002288 	.word	0x20002288
 801140c:	2000228c 	.word	0x2000228c
 8011410:	e000ed20 	.word	0xe000ed20
 8011414:	2000013c 	.word	0x2000013c
 8011418:	e000ef34 	.word	0xe000ef34

0801141c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801141c:	b480      	push	{r7}
 801141e:	b083      	sub	sp, #12
 8011420:	af00      	add	r7, sp, #0
 8011422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011426:	f383 8811 	msr	BASEPRI, r3
 801142a:	f3bf 8f6f 	isb	sy
 801142e:	f3bf 8f4f 	dsb	sy
 8011432:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011434:	4b0e      	ldr	r3, [pc, #56]	; (8011470 <vPortEnterCritical+0x54>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	3301      	adds	r3, #1
 801143a:	4a0d      	ldr	r2, [pc, #52]	; (8011470 <vPortEnterCritical+0x54>)
 801143c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801143e:	4b0c      	ldr	r3, [pc, #48]	; (8011470 <vPortEnterCritical+0x54>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	2b01      	cmp	r3, #1
 8011444:	d10e      	bne.n	8011464 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011446:	4b0b      	ldr	r3, [pc, #44]	; (8011474 <vPortEnterCritical+0x58>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	b2db      	uxtb	r3, r3
 801144c:	2b00      	cmp	r3, #0
 801144e:	d009      	beq.n	8011464 <vPortEnterCritical+0x48>
 8011450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011454:	f383 8811 	msr	BASEPRI, r3
 8011458:	f3bf 8f6f 	isb	sy
 801145c:	f3bf 8f4f 	dsb	sy
 8011460:	603b      	str	r3, [r7, #0]
 8011462:	e7fe      	b.n	8011462 <vPortEnterCritical+0x46>
	}
}
 8011464:	bf00      	nop
 8011466:	370c      	adds	r7, #12
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr
 8011470:	2000013c 	.word	0x2000013c
 8011474:	e000ed04 	.word	0xe000ed04

08011478 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011478:	b480      	push	{r7}
 801147a:	b083      	sub	sp, #12
 801147c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801147e:	4b11      	ldr	r3, [pc, #68]	; (80114c4 <vPortExitCritical+0x4c>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d109      	bne.n	801149a <vPortExitCritical+0x22>
 8011486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801148a:	f383 8811 	msr	BASEPRI, r3
 801148e:	f3bf 8f6f 	isb	sy
 8011492:	f3bf 8f4f 	dsb	sy
 8011496:	607b      	str	r3, [r7, #4]
 8011498:	e7fe      	b.n	8011498 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801149a:	4b0a      	ldr	r3, [pc, #40]	; (80114c4 <vPortExitCritical+0x4c>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	3b01      	subs	r3, #1
 80114a0:	4a08      	ldr	r2, [pc, #32]	; (80114c4 <vPortExitCritical+0x4c>)
 80114a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80114a4:	4b07      	ldr	r3, [pc, #28]	; (80114c4 <vPortExitCritical+0x4c>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d104      	bne.n	80114b6 <vPortExitCritical+0x3e>
 80114ac:	2300      	movs	r3, #0
 80114ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80114b6:	bf00      	nop
 80114b8:	370c      	adds	r7, #12
 80114ba:	46bd      	mov	sp, r7
 80114bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c0:	4770      	bx	lr
 80114c2:	bf00      	nop
 80114c4:	2000013c 	.word	0x2000013c
	...

080114d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80114d0:	f3ef 8009 	mrs	r0, PSP
 80114d4:	f3bf 8f6f 	isb	sy
 80114d8:	4b15      	ldr	r3, [pc, #84]	; (8011530 <pxCurrentTCBConst>)
 80114da:	681a      	ldr	r2, [r3, #0]
 80114dc:	f01e 0f10 	tst.w	lr, #16
 80114e0:	bf08      	it	eq
 80114e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80114e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114ea:	6010      	str	r0, [r2, #0]
 80114ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80114f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80114f4:	f380 8811 	msr	BASEPRI, r0
 80114f8:	f3bf 8f4f 	dsb	sy
 80114fc:	f3bf 8f6f 	isb	sy
 8011500:	f7fe fcc4 	bl	800fe8c <vTaskSwitchContext>
 8011504:	f04f 0000 	mov.w	r0, #0
 8011508:	f380 8811 	msr	BASEPRI, r0
 801150c:	bc09      	pop	{r0, r3}
 801150e:	6819      	ldr	r1, [r3, #0]
 8011510:	6808      	ldr	r0, [r1, #0]
 8011512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011516:	f01e 0f10 	tst.w	lr, #16
 801151a:	bf08      	it	eq
 801151c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011520:	f380 8809 	msr	PSP, r0
 8011524:	f3bf 8f6f 	isb	sy
 8011528:	4770      	bx	lr
 801152a:	bf00      	nop
 801152c:	f3af 8000 	nop.w

08011530 <pxCurrentTCBConst>:
 8011530:	20001c5c 	.word	0x20001c5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011534:	bf00      	nop
 8011536:	bf00      	nop

08011538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b082      	sub	sp, #8
 801153c:	af00      	add	r7, sp, #0
	__asm volatile
 801153e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011542:	f383 8811 	msr	BASEPRI, r3
 8011546:	f3bf 8f6f 	isb	sy
 801154a:	f3bf 8f4f 	dsb	sy
 801154e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011550:	f7fe fbe4 	bl	800fd1c <xTaskIncrementTick>
 8011554:	4603      	mov	r3, r0
 8011556:	2b00      	cmp	r3, #0
 8011558:	d003      	beq.n	8011562 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801155a:	4b06      	ldr	r3, [pc, #24]	; (8011574 <SysTick_Handler+0x3c>)
 801155c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011560:	601a      	str	r2, [r3, #0]
 8011562:	2300      	movs	r3, #0
 8011564:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801156c:	bf00      	nop
 801156e:	3708      	adds	r7, #8
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}
 8011574:	e000ed04 	.word	0xe000ed04

08011578 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011578:	b480      	push	{r7}
 801157a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801157c:	4b0b      	ldr	r3, [pc, #44]	; (80115ac <vPortSetupTimerInterrupt+0x34>)
 801157e:	2200      	movs	r2, #0
 8011580:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011582:	4b0b      	ldr	r3, [pc, #44]	; (80115b0 <vPortSetupTimerInterrupt+0x38>)
 8011584:	2200      	movs	r2, #0
 8011586:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011588:	4b0a      	ldr	r3, [pc, #40]	; (80115b4 <vPortSetupTimerInterrupt+0x3c>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	4a0a      	ldr	r2, [pc, #40]	; (80115b8 <vPortSetupTimerInterrupt+0x40>)
 801158e:	fba2 2303 	umull	r2, r3, r2, r3
 8011592:	099b      	lsrs	r3, r3, #6
 8011594:	4a09      	ldr	r2, [pc, #36]	; (80115bc <vPortSetupTimerInterrupt+0x44>)
 8011596:	3b01      	subs	r3, #1
 8011598:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801159a:	4b04      	ldr	r3, [pc, #16]	; (80115ac <vPortSetupTimerInterrupt+0x34>)
 801159c:	2207      	movs	r2, #7
 801159e:	601a      	str	r2, [r3, #0]
}
 80115a0:	bf00      	nop
 80115a2:	46bd      	mov	sp, r7
 80115a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a8:	4770      	bx	lr
 80115aa:	bf00      	nop
 80115ac:	e000e010 	.word	0xe000e010
 80115b0:	e000e018 	.word	0xe000e018
 80115b4:	20000020 	.word	0x20000020
 80115b8:	10624dd3 	.word	0x10624dd3
 80115bc:	e000e014 	.word	0xe000e014

080115c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80115c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80115d0 <vPortEnableVFP+0x10>
 80115c4:	6801      	ldr	r1, [r0, #0]
 80115c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80115ca:	6001      	str	r1, [r0, #0]
 80115cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80115ce:	bf00      	nop
 80115d0:	e000ed88 	.word	0xe000ed88

080115d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80115d4:	b480      	push	{r7}
 80115d6:	b085      	sub	sp, #20
 80115d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80115da:	f3ef 8305 	mrs	r3, IPSR
 80115de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	2b0f      	cmp	r3, #15
 80115e4:	d913      	bls.n	801160e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80115e6:	4a16      	ldr	r2, [pc, #88]	; (8011640 <vPortValidateInterruptPriority+0x6c>)
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	4413      	add	r3, r2
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80115f0:	4b14      	ldr	r3, [pc, #80]	; (8011644 <vPortValidateInterruptPriority+0x70>)
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	7afa      	ldrb	r2, [r7, #11]
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d209      	bcs.n	801160e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80115fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115fe:	f383 8811 	msr	BASEPRI, r3
 8011602:	f3bf 8f6f 	isb	sy
 8011606:	f3bf 8f4f 	dsb	sy
 801160a:	607b      	str	r3, [r7, #4]
 801160c:	e7fe      	b.n	801160c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801160e:	4b0e      	ldr	r3, [pc, #56]	; (8011648 <vPortValidateInterruptPriority+0x74>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011616:	4b0d      	ldr	r3, [pc, #52]	; (801164c <vPortValidateInterruptPriority+0x78>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	429a      	cmp	r2, r3
 801161c:	d909      	bls.n	8011632 <vPortValidateInterruptPriority+0x5e>
 801161e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011622:	f383 8811 	msr	BASEPRI, r3
 8011626:	f3bf 8f6f 	isb	sy
 801162a:	f3bf 8f4f 	dsb	sy
 801162e:	603b      	str	r3, [r7, #0]
 8011630:	e7fe      	b.n	8011630 <vPortValidateInterruptPriority+0x5c>
	}
 8011632:	bf00      	nop
 8011634:	3714      	adds	r7, #20
 8011636:	46bd      	mov	sp, r7
 8011638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163c:	4770      	bx	lr
 801163e:	bf00      	nop
 8011640:	e000e3f0 	.word	0xe000e3f0
 8011644:	20002288 	.word	0x20002288
 8011648:	e000ed0c 	.word	0xe000ed0c
 801164c:	2000228c 	.word	0x2000228c

08011650 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b08a      	sub	sp, #40	; 0x28
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011658:	2300      	movs	r3, #0
 801165a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801165c:	f7fe fa6c 	bl	800fb38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011660:	4b57      	ldr	r3, [pc, #348]	; (80117c0 <pvPortMalloc+0x170>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d101      	bne.n	801166c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011668:	f000 f90c 	bl	8011884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801166c:	4b55      	ldr	r3, [pc, #340]	; (80117c4 <pvPortMalloc+0x174>)
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	4013      	ands	r3, r2
 8011674:	2b00      	cmp	r3, #0
 8011676:	f040 808c 	bne.w	8011792 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d01c      	beq.n	80116ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8011680:	2208      	movs	r2, #8
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	4413      	add	r3, r2
 8011686:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f003 0307 	and.w	r3, r3, #7
 801168e:	2b00      	cmp	r3, #0
 8011690:	d013      	beq.n	80116ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f023 0307 	bic.w	r3, r3, #7
 8011698:	3308      	adds	r3, #8
 801169a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f003 0307 	and.w	r3, r3, #7
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d009      	beq.n	80116ba <pvPortMalloc+0x6a>
 80116a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116aa:	f383 8811 	msr	BASEPRI, r3
 80116ae:	f3bf 8f6f 	isb	sy
 80116b2:	f3bf 8f4f 	dsb	sy
 80116b6:	617b      	str	r3, [r7, #20]
 80116b8:	e7fe      	b.n	80116b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d068      	beq.n	8011792 <pvPortMalloc+0x142>
 80116c0:	4b41      	ldr	r3, [pc, #260]	; (80117c8 <pvPortMalloc+0x178>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d863      	bhi.n	8011792 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80116ca:	4b40      	ldr	r3, [pc, #256]	; (80117cc <pvPortMalloc+0x17c>)
 80116cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80116ce:	4b3f      	ldr	r3, [pc, #252]	; (80117cc <pvPortMalloc+0x17c>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80116d4:	e004      	b.n	80116e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80116d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80116da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80116e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	687a      	ldr	r2, [r7, #4]
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d903      	bls.n	80116f2 <pvPortMalloc+0xa2>
 80116ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d1f1      	bne.n	80116d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80116f2:	4b33      	ldr	r3, [pc, #204]	; (80117c0 <pvPortMalloc+0x170>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d04a      	beq.n	8011792 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80116fc:	6a3b      	ldr	r3, [r7, #32]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	2208      	movs	r2, #8
 8011702:	4413      	add	r3, r2
 8011704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011708:	681a      	ldr	r2, [r3, #0]
 801170a:	6a3b      	ldr	r3, [r7, #32]
 801170c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011710:	685a      	ldr	r2, [r3, #4]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	1ad2      	subs	r2, r2, r3
 8011716:	2308      	movs	r3, #8
 8011718:	005b      	lsls	r3, r3, #1
 801171a:	429a      	cmp	r2, r3
 801171c:	d91e      	bls.n	801175c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801171e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	4413      	add	r3, r2
 8011724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011726:	69bb      	ldr	r3, [r7, #24]
 8011728:	f003 0307 	and.w	r3, r3, #7
 801172c:	2b00      	cmp	r3, #0
 801172e:	d009      	beq.n	8011744 <pvPortMalloc+0xf4>
 8011730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011734:	f383 8811 	msr	BASEPRI, r3
 8011738:	f3bf 8f6f 	isb	sy
 801173c:	f3bf 8f4f 	dsb	sy
 8011740:	613b      	str	r3, [r7, #16]
 8011742:	e7fe      	b.n	8011742 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011746:	685a      	ldr	r2, [r3, #4]
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	1ad2      	subs	r2, r2, r3
 801174c:	69bb      	ldr	r3, [r7, #24]
 801174e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011752:	687a      	ldr	r2, [r7, #4]
 8011754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011756:	69b8      	ldr	r0, [r7, #24]
 8011758:	f000 f8f6 	bl	8011948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801175c:	4b1a      	ldr	r3, [pc, #104]	; (80117c8 <pvPortMalloc+0x178>)
 801175e:	681a      	ldr	r2, [r3, #0]
 8011760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	1ad3      	subs	r3, r2, r3
 8011766:	4a18      	ldr	r2, [pc, #96]	; (80117c8 <pvPortMalloc+0x178>)
 8011768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801176a:	4b17      	ldr	r3, [pc, #92]	; (80117c8 <pvPortMalloc+0x178>)
 801176c:	681a      	ldr	r2, [r3, #0]
 801176e:	4b18      	ldr	r3, [pc, #96]	; (80117d0 <pvPortMalloc+0x180>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	429a      	cmp	r2, r3
 8011774:	d203      	bcs.n	801177e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011776:	4b14      	ldr	r3, [pc, #80]	; (80117c8 <pvPortMalloc+0x178>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	4a15      	ldr	r2, [pc, #84]	; (80117d0 <pvPortMalloc+0x180>)
 801177c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011780:	685a      	ldr	r2, [r3, #4]
 8011782:	4b10      	ldr	r3, [pc, #64]	; (80117c4 <pvPortMalloc+0x174>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	431a      	orrs	r2, r3
 8011788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801178a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801178e:	2200      	movs	r2, #0
 8011790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011792:	f7fe fa17 	bl	800fbc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011796:	69fb      	ldr	r3, [r7, #28]
 8011798:	f003 0307 	and.w	r3, r3, #7
 801179c:	2b00      	cmp	r3, #0
 801179e:	d009      	beq.n	80117b4 <pvPortMalloc+0x164>
 80117a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a4:	f383 8811 	msr	BASEPRI, r3
 80117a8:	f3bf 8f6f 	isb	sy
 80117ac:	f3bf 8f4f 	dsb	sy
 80117b0:	60fb      	str	r3, [r7, #12]
 80117b2:	e7fe      	b.n	80117b2 <pvPortMalloc+0x162>
	return pvReturn;
 80117b4:	69fb      	ldr	r3, [r7, #28]
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	3728      	adds	r7, #40	; 0x28
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}
 80117be:	bf00      	nop
 80117c0:	200049a8 	.word	0x200049a8
 80117c4:	200049b4 	.word	0x200049b4
 80117c8:	200049ac 	.word	0x200049ac
 80117cc:	200049a0 	.word	0x200049a0
 80117d0:	200049b0 	.word	0x200049b0

080117d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b086      	sub	sp, #24
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d046      	beq.n	8011874 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80117e6:	2308      	movs	r3, #8
 80117e8:	425b      	negs	r3, r3
 80117ea:	697a      	ldr	r2, [r7, #20]
 80117ec:	4413      	add	r3, r2
 80117ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	685a      	ldr	r2, [r3, #4]
 80117f8:	4b20      	ldr	r3, [pc, #128]	; (801187c <vPortFree+0xa8>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	4013      	ands	r3, r2
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d109      	bne.n	8011816 <vPortFree+0x42>
 8011802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011806:	f383 8811 	msr	BASEPRI, r3
 801180a:	f3bf 8f6f 	isb	sy
 801180e:	f3bf 8f4f 	dsb	sy
 8011812:	60fb      	str	r3, [r7, #12]
 8011814:	e7fe      	b.n	8011814 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d009      	beq.n	8011832 <vPortFree+0x5e>
 801181e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011822:	f383 8811 	msr	BASEPRI, r3
 8011826:	f3bf 8f6f 	isb	sy
 801182a:	f3bf 8f4f 	dsb	sy
 801182e:	60bb      	str	r3, [r7, #8]
 8011830:	e7fe      	b.n	8011830 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	685a      	ldr	r2, [r3, #4]
 8011836:	4b11      	ldr	r3, [pc, #68]	; (801187c <vPortFree+0xa8>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	4013      	ands	r3, r2
 801183c:	2b00      	cmp	r3, #0
 801183e:	d019      	beq.n	8011874 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d115      	bne.n	8011874 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	685a      	ldr	r2, [r3, #4]
 801184c:	4b0b      	ldr	r3, [pc, #44]	; (801187c <vPortFree+0xa8>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	43db      	mvns	r3, r3
 8011852:	401a      	ands	r2, r3
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011858:	f7fe f96e 	bl	800fb38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	685a      	ldr	r2, [r3, #4]
 8011860:	4b07      	ldr	r3, [pc, #28]	; (8011880 <vPortFree+0xac>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	4413      	add	r3, r2
 8011866:	4a06      	ldr	r2, [pc, #24]	; (8011880 <vPortFree+0xac>)
 8011868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801186a:	6938      	ldr	r0, [r7, #16]
 801186c:	f000 f86c 	bl	8011948 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011870:	f7fe f9a8 	bl	800fbc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011874:	bf00      	nop
 8011876:	3718      	adds	r7, #24
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}
 801187c:	200049b4 	.word	0x200049b4
 8011880:	200049ac 	.word	0x200049ac

08011884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011884:	b480      	push	{r7}
 8011886:	b085      	sub	sp, #20
 8011888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801188a:	f242 7310 	movw	r3, #10000	; 0x2710
 801188e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011890:	4b27      	ldr	r3, [pc, #156]	; (8011930 <prvHeapInit+0xac>)
 8011892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f003 0307 	and.w	r3, r3, #7
 801189a:	2b00      	cmp	r3, #0
 801189c:	d00c      	beq.n	80118b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	3307      	adds	r3, #7
 80118a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	f023 0307 	bic.w	r3, r3, #7
 80118aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80118ac:	68ba      	ldr	r2, [r7, #8]
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	1ad3      	subs	r3, r2, r3
 80118b2:	4a1f      	ldr	r2, [pc, #124]	; (8011930 <prvHeapInit+0xac>)
 80118b4:	4413      	add	r3, r2
 80118b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80118bc:	4a1d      	ldr	r2, [pc, #116]	; (8011934 <prvHeapInit+0xb0>)
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80118c2:	4b1c      	ldr	r3, [pc, #112]	; (8011934 <prvHeapInit+0xb0>)
 80118c4:	2200      	movs	r2, #0
 80118c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	68ba      	ldr	r2, [r7, #8]
 80118cc:	4413      	add	r3, r2
 80118ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80118d0:	2208      	movs	r2, #8
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	1a9b      	subs	r3, r3, r2
 80118d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	f023 0307 	bic.w	r3, r3, #7
 80118de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	4a15      	ldr	r2, [pc, #84]	; (8011938 <prvHeapInit+0xb4>)
 80118e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80118e6:	4b14      	ldr	r3, [pc, #80]	; (8011938 <prvHeapInit+0xb4>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	2200      	movs	r2, #0
 80118ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80118ee:	4b12      	ldr	r3, [pc, #72]	; (8011938 <prvHeapInit+0xb4>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	2200      	movs	r2, #0
 80118f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	68fa      	ldr	r2, [r7, #12]
 80118fe:	1ad2      	subs	r2, r2, r3
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011904:	4b0c      	ldr	r3, [pc, #48]	; (8011938 <prvHeapInit+0xb4>)
 8011906:	681a      	ldr	r2, [r3, #0]
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	685b      	ldr	r3, [r3, #4]
 8011910:	4a0a      	ldr	r2, [pc, #40]	; (801193c <prvHeapInit+0xb8>)
 8011912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	685b      	ldr	r3, [r3, #4]
 8011918:	4a09      	ldr	r2, [pc, #36]	; (8011940 <prvHeapInit+0xbc>)
 801191a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801191c:	4b09      	ldr	r3, [pc, #36]	; (8011944 <prvHeapInit+0xc0>)
 801191e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011922:	601a      	str	r2, [r3, #0]
}
 8011924:	bf00      	nop
 8011926:	3714      	adds	r7, #20
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr
 8011930:	20002290 	.word	0x20002290
 8011934:	200049a0 	.word	0x200049a0
 8011938:	200049a8 	.word	0x200049a8
 801193c:	200049b0 	.word	0x200049b0
 8011940:	200049ac 	.word	0x200049ac
 8011944:	200049b4 	.word	0x200049b4

08011948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011948:	b480      	push	{r7}
 801194a:	b085      	sub	sp, #20
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011950:	4b28      	ldr	r3, [pc, #160]	; (80119f4 <prvInsertBlockIntoFreeList+0xac>)
 8011952:	60fb      	str	r3, [r7, #12]
 8011954:	e002      	b.n	801195c <prvInsertBlockIntoFreeList+0x14>
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	60fb      	str	r3, [r7, #12]
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	687a      	ldr	r2, [r7, #4]
 8011962:	429a      	cmp	r2, r3
 8011964:	d8f7      	bhi.n	8011956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	68ba      	ldr	r2, [r7, #8]
 8011970:	4413      	add	r3, r2
 8011972:	687a      	ldr	r2, [r7, #4]
 8011974:	429a      	cmp	r2, r3
 8011976:	d108      	bne.n	801198a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	685a      	ldr	r2, [r3, #4]
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	685b      	ldr	r3, [r3, #4]
 8011980:	441a      	add	r2, r3
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	685b      	ldr	r3, [r3, #4]
 8011992:	68ba      	ldr	r2, [r7, #8]
 8011994:	441a      	add	r2, r3
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	429a      	cmp	r2, r3
 801199c:	d118      	bne.n	80119d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	681a      	ldr	r2, [r3, #0]
 80119a2:	4b15      	ldr	r3, [pc, #84]	; (80119f8 <prvInsertBlockIntoFreeList+0xb0>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d00d      	beq.n	80119c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	685a      	ldr	r2, [r3, #4]
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	685b      	ldr	r3, [r3, #4]
 80119b4:	441a      	add	r2, r3
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	681a      	ldr	r2, [r3, #0]
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	601a      	str	r2, [r3, #0]
 80119c4:	e008      	b.n	80119d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80119c6:	4b0c      	ldr	r3, [pc, #48]	; (80119f8 <prvInsertBlockIntoFreeList+0xb0>)
 80119c8:	681a      	ldr	r2, [r3, #0]
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	601a      	str	r2, [r3, #0]
 80119ce:	e003      	b.n	80119d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	681a      	ldr	r2, [r3, #0]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80119d8:	68fa      	ldr	r2, [r7, #12]
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	429a      	cmp	r2, r3
 80119de:	d002      	beq.n	80119e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	687a      	ldr	r2, [r7, #4]
 80119e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80119e6:	bf00      	nop
 80119e8:	3714      	adds	r7, #20
 80119ea:	46bd      	mov	sp, r7
 80119ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f0:	4770      	bx	lr
 80119f2:	bf00      	nop
 80119f4:	200049a0 	.word	0x200049a0
 80119f8:	200049a8 	.word	0x200049a8

080119fc <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b082      	sub	sp, #8
 8011a00:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8011a02:	f000 f985 	bl	8011d10 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8011a06:	480e      	ldr	r0, [pc, #56]	; (8011a40 <APP_THREAD_Init+0x44>)
 8011a08:	f000 fbe8 	bl	80121dc <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8011a0c:	2101      	movs	r1, #1
 8011a0e:	2002      	movs	r0, #2
 8011a10:	f001 fd24 	bl	801345c <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8011a14:	f000 fcda 	bl	80123cc <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8011a18:	f000 fcc6 	bl	80123a8 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8011a1c:	f7fa f968 	bl	800bcf0 <SHCI_C2_THREAD_Init>
 8011a20:	4603      	mov	r3, r0
 8011a22:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8011a24:	4a07      	ldr	r2, [pc, #28]	; (8011a44 <APP_THREAD_Init+0x48>)
 8011a26:	2100      	movs	r1, #0
 8011a28:	4807      	ldr	r0, [pc, #28]	; (8011a48 <APP_THREAD_Init+0x4c>)
 8011a2a:	f7fc f857 	bl	800dadc <osThreadNew>
 8011a2e:	4602      	mov	r2, r0
 8011a30:	4b06      	ldr	r3, [pc, #24]	; (8011a4c <APP_THREAD_Init+0x50>)
 8011a32:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8011a34:	f000 f86c 	bl	8011b10 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 8011a38:	bf00      	nop
 8011a3a:	3708      	adds	r7, #8
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}
 8011a40:	20030834 	.word	0x20030834
 8011a44:	080139dc 	.word	0x080139dc
 8011a48:	08011dcd 	.word	0x08011dcd
 8011a4c:	20004acc 	.word	0x20004acc

08011a50 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2b07      	cmp	r3, #7
 8011a5e:	d83b      	bhi.n	8011ad8 <APP_THREAD_Error+0x88>
 8011a60:	a201      	add	r2, pc, #4	; (adr r2, 8011a68 <APP_THREAD_Error+0x18>)
 8011a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a66:	bf00      	nop
 8011a68:	08011a89 	.word	0x08011a89
 8011a6c:	08011a93 	.word	0x08011a93
 8011a70:	08011a9d 	.word	0x08011a9d
 8011a74:	08011aa7 	.word	0x08011aa7
 8011a78:	08011ab1 	.word	0x08011ab1
 8011a7c:	08011abb 	.word	0x08011abb
 8011a80:	08011ac5 	.word	0x08011ac5
 8011a84:	08011acf 	.word	0x08011acf
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8011a88:	6839      	ldr	r1, [r7, #0]
 8011a8a:	4818      	ldr	r0, [pc, #96]	; (8011aec <APP_THREAD_Error+0x9c>)
 8011a8c:	f000 f934 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011a90:	e027      	b.n	8011ae2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8011a92:	6839      	ldr	r1, [r7, #0]
 8011a94:	4816      	ldr	r0, [pc, #88]	; (8011af0 <APP_THREAD_Error+0xa0>)
 8011a96:	f000 f92f 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011a9a:	e022      	b.n	8011ae2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8011a9c:	6839      	ldr	r1, [r7, #0]
 8011a9e:	4815      	ldr	r0, [pc, #84]	; (8011af4 <APP_THREAD_Error+0xa4>)
 8011aa0:	f000 f92a 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011aa4:	e01d      	b.n	8011ae2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8011aa6:	6839      	ldr	r1, [r7, #0]
 8011aa8:	4813      	ldr	r0, [pc, #76]	; (8011af8 <APP_THREAD_Error+0xa8>)
 8011aaa:	f000 f925 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011aae:	e018      	b.n	8011ae2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8011ab0:	6839      	ldr	r1, [r7, #0]
 8011ab2:	4812      	ldr	r0, [pc, #72]	; (8011afc <APP_THREAD_Error+0xac>)
 8011ab4:	f000 f920 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011ab8:	e013      	b.n	8011ae2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8011aba:	6839      	ldr	r1, [r7, #0]
 8011abc:	4810      	ldr	r0, [pc, #64]	; (8011b00 <APP_THREAD_Error+0xb0>)
 8011abe:	f000 f91b 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011ac2:	e00e      	b.n	8011ae2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8011ac4:	6839      	ldr	r1, [r7, #0]
 8011ac6:	480f      	ldr	r0, [pc, #60]	; (8011b04 <APP_THREAD_Error+0xb4>)
 8011ac8:	f000 f916 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011acc:	e009      	b.n	8011ae2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8011ace:	6839      	ldr	r1, [r7, #0]
 8011ad0:	480d      	ldr	r0, [pc, #52]	; (8011b08 <APP_THREAD_Error+0xb8>)
 8011ad2:	f000 f911 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011ad6:	e004      	b.n	8011ae2 <APP_THREAD_Error+0x92>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8011ad8:	2100      	movs	r1, #0
 8011ada:	480c      	ldr	r0, [pc, #48]	; (8011b0c <APP_THREAD_Error+0xbc>)
 8011adc:	f000 f90c 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011ae0:	bf00      	nop
  }
}
 8011ae2:	bf00      	nop
 8011ae4:	3708      	adds	r7, #8
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd80      	pop	{r7, pc}
 8011aea:	bf00      	nop
 8011aec:	08013664 	.word	0x08013664
 8011af0:	08013688 	.word	0x08013688
 8011af4:	080136ac 	.word	0x080136ac
 8011af8:	080136cc 	.word	0x080136cc
 8011afc:	080136ec 	.word	0x080136ec
 8011b00:	0801370c 	.word	0x0801370c
 8011b04:	08013728 	.word	0x08013728
 8011b08:	08013754 	.word	0x08013754
 8011b0c:	08013778 	.word	0x08013778

08011b10 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b082      	sub	sp, #8
 8011b14:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8011b16:	2000      	movs	r0, #0
 8011b18:	f7fb f920 	bl	800cd5c <otInstanceErasePersistentInfo>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011b20:	79fb      	ldrb	r3, [r7, #7]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d004      	beq.n	8011b30 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8011b26:	79fb      	ldrb	r3, [r7, #7]
 8011b28:	4619      	mov	r1, r3
 8011b2a:	2006      	movs	r0, #6
 8011b2c:	f7ff ff90 	bl	8011a50 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8011b30:	2000      	movs	r0, #0
 8011b32:	f7fb f8b7 	bl	800cca4 <otInstanceFinalize>
  otInstanceInitSingle();
 8011b36:	f7fb f88e 	bl	800cc56 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	4955      	ldr	r1, [pc, #340]	; (8011c94 <APP_THREAD_DeviceConfig+0x184>)
 8011b3e:	2000      	movs	r0, #0
 8011b40:	f7fb f8d6 	bl	800ccf0 <otSetStateChangedCallback>
 8011b44:	4603      	mov	r3, r0
 8011b46:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011b48:	79fb      	ldrb	r3, [r7, #7]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d004      	beq.n	8011b58 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 8011b4e:	79fb      	ldrb	r3, [r7, #7]
 8011b50:	4619      	mov	r1, r3
 8011b52:	2001      	movs	r0, #1
 8011b54:	f7ff ff7c 	bl	8011a50 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8011b58:	2117      	movs	r1, #23
 8011b5a:	2000      	movs	r0, #0
 8011b5c:	f7fb fa06 	bl	800cf6c <otLinkSetChannel>
 8011b60:	4603      	mov	r3, r0
 8011b62:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011b64:	79fb      	ldrb	r3, [r7, #7]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d004      	beq.n	8011b74 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8011b6a:	79fb      	ldrb	r3, [r7, #7]
 8011b6c:	4619      	mov	r1, r3
 8011b6e:	2002      	movs	r0, #2
 8011b70:	f7ff ff6e 	bl	8011a50 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8011b74:	f241 2134 	movw	r1, #4660	; 0x1234
 8011b78:	2000      	movs	r0, #0
 8011b7a:	f7fb fa27 	bl	800cfcc <otLinkSetPanId>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011b82:	79fb      	ldrb	r3, [r7, #7]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d004      	beq.n	8011b92 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8011b88:	79fb      	ldrb	r3, [r7, #7]
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	2003      	movs	r0, #3
 8011b8e:	f7ff ff5f 	bl	8011a50 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8011b92:	2101      	movs	r1, #1
 8011b94:	2000      	movs	r0, #0
 8011b96:	f7fb f90a 	bl	800cdae <otIp6SetEnabled>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011b9e:	79fb      	ldrb	r3, [r7, #7]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d004      	beq.n	8011bae <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8011ba4:	79fb      	ldrb	r3, [r7, #7]
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	2004      	movs	r0, #4
 8011baa:	f7ff ff51 	bl	8011a50 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8011bae:	2101      	movs	r1, #1
 8011bb0:	2000      	movs	r0, #0
 8011bb2:	f7fb fd40 	bl	800d636 <otThreadSetEnabled>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011bba:	79fb      	ldrb	r3, [r7, #7]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d004      	beq.n	8011bca <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8011bc0:	79fb      	ldrb	r3, [r7, #7]
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	2005      	movs	r0, #5
 8011bc6:	f7ff ff43 	bl	8011a50 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
  error = otThreadSetEnabled(NULL, false);
 8011bca:	2100      	movs	r1, #0
 8011bcc:	2000      	movs	r0, #0
 8011bce:	f7fb fd32 	bl	800d636 <otThreadSetEnabled>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011bd6:	79fb      	ldrb	r3, [r7, #7]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d004      	beq.n	8011be6 <APP_THREAD_DeviceConfig+0xd6>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 8011bdc:	79fb      	ldrb	r3, [r7, #7]
 8011bde:	4619      	mov	r1, r3
 8011be0:	2005      	movs	r0, #5
 8011be2:	f7ff ff35 	bl	8011a50 <APP_THREAD_Error>
  	}


  	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 8011be6:	2106      	movs	r1, #6
 8011be8:	2000      	movs	r0, #0
 8011bea:	f7fb fcf1 	bl	800d5d0 <otPlatRadioSetTransmitPower>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011bf2:	79fb      	ldrb	r3, [r7, #7]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d004      	beq.n	8011c02 <APP_THREAD_DeviceConfig+0xf2>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8011bf8:	79fb      	ldrb	r3, [r7, #7]
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	2002      	movs	r0, #2
 8011bfe:	f7ff ff27 	bl	8011a50 <APP_THREAD_Error>
  	}

  	otThreadSetChildTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 8011c02:	2103      	movs	r1, #3
 8011c04:	2000      	movs	r0, #0
 8011c06:	f7fb fd46 	bl	800d696 <otThreadSetChildTimeout>
//  	error = otThreadSetMasterKey(NULL, &masterKey);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otThreadSetNetworkName(NULL, networkName);
 8011c0a:	4923      	ldr	r1, [pc, #140]	; (8011c98 <APP_THREAD_DeviceConfig+0x188>)
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	f7fb fdbe 	bl	800d78e <otThreadSetNetworkName>
 8011c12:	4603      	mov	r3, r0
 8011c14:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011c16:	79fb      	ldrb	r3, [r7, #7]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d004      	beq.n	8011c26 <APP_THREAD_DeviceConfig+0x116>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8011c1c:	79fb      	ldrb	r3, [r7, #7]
 8011c1e:	4619      	mov	r1, r3
 8011c20:	2002      	movs	r0, #2
 8011c22:	f7ff ff15 	bl	8011a50 <APP_THREAD_Error>
//  	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otIp6SetEnabled(NULL, true);
 8011c26:	2101      	movs	r1, #1
 8011c28:	2000      	movs	r0, #0
 8011c2a:	f7fb f8c0 	bl	800cdae <otIp6SetEnabled>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011c32:	79fb      	ldrb	r3, [r7, #7]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d004      	beq.n	8011c42 <APP_THREAD_DeviceConfig+0x132>
  		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8011c38:	79fb      	ldrb	r3, [r7, #7]
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	2004      	movs	r0, #4
 8011c3e:	f7ff ff07 	bl	8011a50 <APP_THREAD_Error>
  	}

  	error = otThreadSetEnabled(NULL, true);
 8011c42:	2101      	movs	r1, #1
 8011c44:	2000      	movs	r0, #0
 8011c46:	f7fb fcf6 	bl	800d636 <otThreadSetEnabled>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011c4e:	79fb      	ldrb	r3, [r7, #7]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d004      	beq.n	8011c5e <APP_THREAD_DeviceConfig+0x14e>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 8011c54:	79fb      	ldrb	r3, [r7, #7]
 8011c56:	4619      	mov	r1, r3
 8011c58:	2005      	movs	r0, #5
 8011c5a:	f7ff fef9 	bl	8011a50 <APP_THREAD_Error>
  	}

  	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8011c5e:	f241 6133 	movw	r1, #5683	; 0x1633
 8011c62:	2000      	movs	r0, #0
 8011c64:	f7fa ff65 	bl	800cb32 <otCoapStart>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	71fb      	strb	r3, [r7, #7]
//  	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);

  	error = otCoapAddResource(NULL, &OT_Node_Cal_Ressource);
 8011c6c:	490b      	ldr	r1, [pc, #44]	; (8011c9c <APP_THREAD_DeviceConfig+0x18c>)
 8011c6e:	2000      	movs	r0, #0
 8011c70:	f7fa ff8f 	bl	800cb92 <otCoapAddResource>
 8011c74:	4603      	mov	r3, r0
 8011c76:	71fb      	strb	r3, [r7, #7]
  	error = otCoapAddResource(NULL, &OT_Node_Spot_Ressource);
 8011c78:	4909      	ldr	r1, [pc, #36]	; (8011ca0 <APP_THREAD_DeviceConfig+0x190>)
 8011c7a:	2000      	movs	r0, #0
 8011c7c:	f7fa ff89 	bl	800cb92 <otCoapAddResource>
 8011c80:	4603      	mov	r3, r0
 8011c82:	71fb      	strb	r3, [r7, #7]
  #ifndef DONGLE_CODE
//      error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
  #endif
  	// set default multicast address for border router
  //    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
  	otIp6AddressFromString("ff03::1", &multicastAddr);
 8011c84:	4907      	ldr	r1, [pc, #28]	; (8011ca4 <APP_THREAD_DeviceConfig+0x194>)
 8011c86:	4808      	ldr	r0, [pc, #32]	; (8011ca8 <APP_THREAD_DeviceConfig+0x198>)
 8011c88:	f7fb f93e 	bl	800cf08 <otIp6AddressFromString>
  	// set UID in local state variable
  //	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
  //	 = UID64_BASE;
//  	stm32UID(msgSendMyIP.uid);
  /* USER CODE END DEVICECONFIG */
}
 8011c8c:	bf00      	nop
 8011c8e:	3708      	adds	r7, #8
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}
 8011c94:	08011cad 	.word	0x08011cad
 8011c98:	08013a24 	.word	0x08013a24
 8011c9c:	20000140 	.word	0x20000140
 8011ca0:	20000150 	.word	0x20000150
 8011ca4:	20005010 	.word	0x20005010
 8011ca8:	08013788 	.word	0x08013788

08011cac <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b082      	sub	sp, #8
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f003 0304 	and.w	r3, r3, #4
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d013      	beq.n	8011ce8 <APP_THREAD_StateNotif+0x3c>
  {
    switch (otThreadGetDeviceRole(NULL))
 8011cc0:	2000      	movs	r0, #0
 8011cc2:	f7fb fd93 	bl	800d7ec <otThreadGetDeviceRole>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	2b04      	cmp	r3, #4
 8011cca:	d80f      	bhi.n	8011cec <APP_THREAD_StateNotif+0x40>
 8011ccc:	a201      	add	r2, pc, #4	; (adr r2, 8011cd4 <APP_THREAD_StateNotif+0x28>)
 8011cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cd2:	bf00      	nop
 8011cd4:	08011ced 	.word	0x08011ced
 8011cd8:	08011ced 	.word	0x08011ced
 8011cdc:	08011ced 	.word	0x08011ced
 8011ce0:	08011ced 	.word	0x08011ced
 8011ce4:	08011ced 	.word	0x08011ced
      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */
      break;
    }
  }
 8011ce8:	bf00      	nop
 8011cea:	e000      	b.n	8011cee <APP_THREAD_StateNotif+0x42>
      break;
 8011cec:	bf00      	nop
}
 8011cee:	bf00      	nop
 8011cf0:	3708      	adds	r7, #8
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}
 8011cf6:	bf00      	nop

08011cf8 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 8011d02:	bf00      	nop
 8011d04:	370c      	adds	r7, #12
 8011d06:	46bd      	mov	sp, r7
 8011d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0c:	4770      	bx	lr
	...

08011d10 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b088      	sub	sp, #32
 8011d14:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8011d16:	1d3b      	adds	r3, r7, #4
 8011d18:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8011d1a:	6978      	ldr	r0, [r7, #20]
 8011d1c:	f7fa f814 	bl	800bd48 <SHCI_GetWirelessFwInfo>
 8011d20:	4603      	mov	r3, r0
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d004      	beq.n	8011d30 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8011d26:	2101      	movs	r1, #1
 8011d28:	2007      	movs	r0, #7
 8011d2a:	f7ff fe91 	bl	8011a50 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 8011d2e:	e03d      	b.n	8011dac <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 8011d30:	4a20      	ldr	r2, [pc, #128]	; (8011db4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8011d32:	2101      	movs	r1, #1
 8011d34:	2000      	movs	r0, #0
 8011d36:	f7f0 fe05 	bl	8002944 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 8011d3a:	4a1f      	ldr	r2, [pc, #124]	; (8011db8 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 8011d3c:	2101      	movs	r1, #1
 8011d3e:	2000      	movs	r0, #0
 8011d40:	f7f0 fe00 	bl	8002944 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	4619      	mov	r1, r3
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	785b      	ldrb	r3, [r3, #1]
 8011d4e:	461a      	mov	r2, r3
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	789b      	ldrb	r3, [r3, #2]
 8011d54:	9301      	str	r3, [sp, #4]
 8011d56:	9200      	str	r2, [sp, #0]
 8011d58:	460b      	mov	r3, r1
 8011d5a:	4a18      	ldr	r2, [pc, #96]	; (8011dbc <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8011d5c:	2101      	movs	r1, #1
 8011d5e:	2000      	movs	r0, #0
 8011d60:	f7f0 fdf0 	bl	8002944 <logApplication>
    switch(p_wireless_info->StackType)
 8011d64:	697b      	ldr	r3, [r7, #20]
 8011d66:	7a5b      	ldrb	r3, [r3, #9]
 8011d68:	2b11      	cmp	r3, #17
 8011d6a:	d009      	beq.n	8011d80 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 8011d6c:	2b50      	cmp	r3, #80	; 0x50
 8011d6e:	d00d      	beq.n	8011d8c <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 8011d70:	2b10      	cmp	r3, #16
 8011d72:	d111      	bne.n	8011d98 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8011d74:	4a12      	ldr	r2, [pc, #72]	; (8011dc0 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8011d76:	2101      	movs	r1, #1
 8011d78:	2000      	movs	r0, #0
 8011d7a:	f7f0 fde3 	bl	8002944 <logApplication>
      break;
 8011d7e:	e010      	b.n	8011da2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 8011d80:	4a10      	ldr	r2, [pc, #64]	; (8011dc4 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 8011d82:	2101      	movs	r1, #1
 8011d84:	2000      	movs	r0, #0
 8011d86:	f7f0 fddd 	bl	8002944 <logApplication>
      break;
 8011d8a:	e00a      	b.n	8011da2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8011d8c:	4a0e      	ldr	r2, [pc, #56]	; (8011dc8 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 8011d8e:	2101      	movs	r1, #1
 8011d90:	2000      	movs	r0, #0
 8011d92:	f7f0 fdd7 	bl	8002944 <logApplication>
      break;
 8011d96:	e004      	b.n	8011da2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8011d98:	2101      	movs	r1, #1
 8011d9a:	2007      	movs	r0, #7
 8011d9c:	f7ff fe58 	bl	8011a50 <APP_THREAD_Error>
      break;
 8011da0:	bf00      	nop
    APP_DBG("**********************************************************");
 8011da2:	4a04      	ldr	r2, [pc, #16]	; (8011db4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8011da4:	2101      	movs	r1, #1
 8011da6:	2000      	movs	r0, #0
 8011da8:	f7f0 fdcc 	bl	8002944 <logApplication>
}
 8011dac:	bf00      	nop
 8011dae:	3718      	adds	r7, #24
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}
 8011db4:	08013790 	.word	0x08013790
 8011db8:	080137cc 	.word	0x080137cc
 8011dbc:	080137e8 	.word	0x080137e8
 8011dc0:	08013800 	.word	0x08013800
 8011dc4:	08013818 	.word	0x08013818
 8011dc8:	08013830 	.word	0x08013830

08011dcc <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b082      	sub	sp, #8
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8011dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8011dd8:	2101      	movs	r1, #1
 8011dda:	2001      	movs	r0, #1
 8011ddc:	f7fb ff86 	bl	800dcec <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 8011de0:	f000 fb26 	bl	8012430 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8011de4:	e7f6      	b.n	8011dd4 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

08011de6 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 8011de6:	b580      	push	{r7, lr}
 8011de8:	b082      	sub	sp, #8
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8011dee:	f04f 32ff 	mov.w	r2, #4294967295
 8011df2:	2101      	movs	r1, #1
 8011df4:	2001      	movs	r0, #1
 8011df6:	f7fb ff79 	bl	800dcec <osThreadFlagsWait>
    Send_CLI_To_M0();
 8011dfa:	f000 fa9b 	bl	8012334 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8011dfe:	e7f6      	b.n	8011dee <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

08011e00 <APP_THREAD_CoapNodeSpotRequestHandler>:
//}

static void APP_THREAD_CoapNodeSpotRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b08a      	sub	sp, #40	; 0x28
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	60f8      	str	r0, [r7, #12]
 8011e08:	60b9      	str	r1, [r7, #8]
 8011e0a:	607a      	str	r2, [r7, #4]
 8011e0c:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		struct MeasMsg receivedMeasMsg;
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedMeasMsg, sizeof(receivedMeasMsg))
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f7fb f937 	bl	800d082 <otMessageGetOffset>
 8011e14:	4603      	mov	r3, r0
 8011e16:	4619      	mov	r1, r3
 8011e18:	f107 0214 	add.w	r2, r7, #20
 8011e1c:	2314      	movs	r3, #20
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f7fb f994 	bl	800d14c <otMessageRead>
 8011e24:	4603      	mov	r3, r0
 8011e26:	2b14      	cmp	r3, #20
 8011e28:	d119      	bne.n	8011e5e <APP_THREAD_CoapNodeSpotRequestHandler+0x5e>
				== sizeof(receivedMeasMsg)) {


			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8011e2a:	68b8      	ldr	r0, [r7, #8]
 8011e2c:	f7fa fd62 	bl	800c8f4 <otCoapHeaderGetCode>
 8011e30:	4603      	mov	r3, r0
 8011e32:	2b03      	cmp	r3, #3
 8011e34:	d109      	bne.n	8011e4a <APP_THREAD_CoapNodeSpotRequestHandler+0x4a>
			{
				measMsgReceivedFromNode(&receivedMeasMsg);
 8011e36:	f107 0314 	add.w	r3, r7, #20
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7f0 fc48 	bl	80026d0 <measMsgReceivedFromNode>
				toggleLed(0,0,1);
 8011e40:	2201      	movs	r2, #1
 8011e42:	2100      	movs	r1, #0
 8011e44:	2000      	movs	r0, #0
 8011e46:	f7f0 f835 	bl	8001eb4 <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8011e4a:	68b8      	ldr	r0, [r7, #8]
 8011e4c:	f7fa fd24 	bl	800c898 <otCoapHeaderGetType>
 8011e50:	4603      	mov	r3, r0
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d103      	bne.n	8011e5e <APP_THREAD_CoapNodeSpotRequestHandler+0x5e>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 8011e56:	6839      	ldr	r1, [r7, #0]
 8011e58:	68b8      	ldr	r0, [r7, #8]
 8011e5a:	f000 f843 	bl	8011ee4 <APP_THREAD_CoapSendDataResponse>
			}

		}
}
 8011e5e:	bf00      	nop
 8011e60:	3728      	adds	r7, #40	; 0x28
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}
	...

08011e68 <APP_THREAD_CoapNodeCalRequestHandler>:

struct CalMsg receivedCalMsg;
static void APP_THREAD_CoapNodeCalRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b084      	sub	sp, #16
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	60f8      	str	r0, [r7, #12]
 8011e70:	60b9      	str	r1, [r7, #8]
 8011e72:	607a      	str	r2, [r7, #4]
 8011e74:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedCalMsg, sizeof(receivedCalMsg))
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	f7fb f903 	bl	800d082 <otMessageGetOffset>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	4619      	mov	r1, r3
 8011e80:	230c      	movs	r3, #12
 8011e82:	4a17      	ldr	r2, [pc, #92]	; (8011ee0 <APP_THREAD_CoapNodeCalRequestHandler+0x78>)
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f7fb f961 	bl	800d14c <otMessageRead>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	2b0c      	cmp	r3, #12
 8011e8e:	d122      	bne.n	8011ed6 <APP_THREAD_CoapNodeCalRequestHandler+0x6e>
				== sizeof(receivedCalMsg)) {

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8011e90:	68b8      	ldr	r0, [r7, #8]
 8011e92:	f7fa fd2f 	bl	800c8f4 <otCoapHeaderGetCode>
 8011e96:	4603      	mov	r3, r0
 8011e98:	2b03      	cmp	r3, #3
 8011e9a:	d107      	bne.n	8011eac <APP_THREAD_CoapNodeCalRequestHandler+0x44>
			{
				if(receivedCalMsg.cal_fcn == CALIBRATION_START_COMMAND){
 8011e9c:	4b10      	ldr	r3, [pc, #64]	; (8011ee0 <APP_THREAD_CoapNodeCalRequestHandler+0x78>)
 8011e9e:	789b      	ldrb	r3, [r3, #2]
 8011ea0:	2b01      	cmp	r3, #1
					// TODO: start calibration

				}else if(receivedCalMsg.cal_fcn == CALIBRATION_STOP_COMMAND){
					// TODO: stop calibration
				}
				toggleLed(0,0,1);
 8011ea2:	2201      	movs	r2, #1
 8011ea4:	2100      	movs	r1, #0
 8011ea6:	2000      	movs	r0, #0
 8011ea8:	f7f0 f804 	bl	8001eb4 <toggleLed>
			}

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET)
 8011eac:	68b8      	ldr	r0, [r7, #8]
 8011eae:	f7fa fd21 	bl	800c8f4 <otCoapHeaderGetCode>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	2b01      	cmp	r3, #1
 8011eb6:	d104      	bne.n	8011ec2 <APP_THREAD_CoapNodeCalRequestHandler+0x5a>
					// 		TODO this can be done in an ACK but doing it now in a separate PUT request to the nodeSpot resource
#ifdef SOLAR_SENSOR_NODE
					sendPowerMeasurement(pMessageInfo->mPeerAddr, receivedCalMsg.angle_1, receivedCalMsg.angle_2);
#endif
				}
				toggleLed(1,0,0);
 8011eb8:	2200      	movs	r2, #0
 8011eba:	2100      	movs	r1, #0
 8011ebc:	2001      	movs	r0, #1
 8011ebe:	f7ef fff9 	bl	8001eb4 <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8011ec2:	68b8      	ldr	r0, [r7, #8]
 8011ec4:	f7fa fce8 	bl	800c898 <otCoapHeaderGetType>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d103      	bne.n	8011ed6 <APP_THREAD_CoapNodeCalRequestHandler+0x6e>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 8011ece:	6839      	ldr	r1, [r7, #0]
 8011ed0:	68b8      	ldr	r0, [r7, #8]
 8011ed2:	f000 f807 	bl	8011ee4 <APP_THREAD_CoapSendDataResponse>
//
//		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
//			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
//		}

}
 8011ed6:	bf00      	nop
 8011ed8:	3710      	adds	r7, #16
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}
 8011ede:	bf00      	nop
 8011ee0:	2000502c 	.word	0x2000502c

08011ee4 <APP_THREAD_CoapSendDataResponse>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_CoapSendDataResponse(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 8011ee4:	b590      	push	{r4, r7, lr}
 8011ee6:	b085      	sub	sp, #20
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
 8011eec:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	73fb      	strb	r3, [r7, #15]

  do{
    APP_DBG(" ********* APP_THREAD_CoapSendDataResponse ********* ");
 8011ef2:	4a25      	ldr	r2, [pc, #148]	; (8011f88 <APP_THREAD_CoapSendDataResponse+0xa4>)
 8011ef4:	2101      	movs	r1, #1
 8011ef6:	2000      	movs	r0, #0
 8011ef8:	f7f0 fd24 	bl	8002944 <logApplication>
    otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8011efc:	2244      	movs	r2, #68	; 0x44
 8011efe:	2120      	movs	r1, #32
 8011f00:	4822      	ldr	r0, [pc, #136]	; (8011f8c <APP_THREAD_CoapSendDataResponse+0xa8>)
 8011f02:	f7fa fb6d 	bl	800c5e0 <otCoapHeaderInit>
    otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f7fa fd22 	bl	800c950 <otCoapHeaderGetMessageId>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	4619      	mov	r1, r3
 8011f10:	481e      	ldr	r0, [pc, #120]	; (8011f8c <APP_THREAD_CoapSendDataResponse+0xa8>)
 8011f12:	f7fa fc91 	bl	800c838 <otCoapHeaderSetMessageId>
    otCoapHeaderSetToken(&OT_Header,
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f7fa fd76 	bl	800ca08 <otCoapHeaderGetToken>
 8011f1c:	4604      	mov	r4, r0
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	f7fa fd44 	bl	800c9ac <otCoapHeaderGetTokenLength>
 8011f24:	4603      	mov	r3, r0
 8011f26:	461a      	mov	r2, r3
 8011f28:	4621      	mov	r1, r4
 8011f2a:	4818      	ldr	r0, [pc, #96]	; (8011f8c <APP_THREAD_CoapSendDataResponse+0xa8>)
 8011f2c:	f7fa fb8d 	bl	800c64a <otCoapHeaderSetToken>
        otCoapHeaderGetToken(pRequestHeader),
        otCoapHeaderGetTokenLength(pRequestHeader));

    pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8011f30:	4916      	ldr	r1, [pc, #88]	; (8011f8c <APP_THREAD_CoapSendDataResponse+0xa8>)
 8011f32:	2000      	movs	r0, #0
 8011f34:	f7fa fd95 	bl	800ca62 <otCoapNewMessage>
 8011f38:	4602      	mov	r2, r0
 8011f3a:	4b15      	ldr	r3, [pc, #84]	; (8011f90 <APP_THREAD_CoapSendDataResponse+0xac>)
 8011f3c:	601a      	str	r2, [r3, #0]
    if (pOT_Message == NULL)
 8011f3e:	4b14      	ldr	r3, [pc, #80]	; (8011f90 <APP_THREAD_CoapSendDataResponse+0xac>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d106      	bne.n	8011f54 <APP_THREAD_CoapSendDataResponse+0x70>
    {
      APP_DBG("WARNING : pOT_Message = NULL ! -> exit now");
 8011f46:	4a13      	ldr	r2, [pc, #76]	; (8011f94 <APP_THREAD_CoapSendDataResponse+0xb0>)
 8011f48:	2101      	movs	r1, #1
 8011f4a:	2000      	movs	r0, #0
 8011f4c:	f7f0 fcfa 	bl	8002944 <logApplication>
      break;
 8011f50:	bf00      	nop
    {
      otMessageFree(pOT_Message);
//      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
    }
  }while(false);
}
 8011f52:	e014      	b.n	8011f7e <APP_THREAD_CoapSendDataResponse+0x9a>
    error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8011f54:	4b0e      	ldr	r3, [pc, #56]	; (8011f90 <APP_THREAD_CoapSendDataResponse+0xac>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	683a      	ldr	r2, [r7, #0]
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	2000      	movs	r0, #0
 8011f5e:	f7fa fe47 	bl	800cbf0 <otCoapSendResponse>
 8011f62:	4603      	mov	r3, r0
 8011f64:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE && pOT_Message != NULL)
 8011f66:	7bfb      	ldrb	r3, [r7, #15]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d008      	beq.n	8011f7e <APP_THREAD_CoapSendDataResponse+0x9a>
 8011f6c:	4b08      	ldr	r3, [pc, #32]	; (8011f90 <APP_THREAD_CoapSendDataResponse+0xac>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d004      	beq.n	8011f7e <APP_THREAD_CoapSendDataResponse+0x9a>
      otMessageFree(pOT_Message);
 8011f74:	4b06      	ldr	r3, [pc, #24]	; (8011f90 <APP_THREAD_CoapSendDataResponse+0xac>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f7fb f857 	bl	800d02c <otMessageFree>
}
 8011f7e:	bf00      	nop
 8011f80:	3714      	adds	r7, #20
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd90      	pop	{r4, r7, pc}
 8011f86:	bf00      	nop
 8011f88:	0801385c 	.word	0x0801385c
 8011f8c:	20004b24 	.word	0x20004b24
 8011f90:	20004ad4 	.word	0x20004ad4
 8011f94:	08013894 	.word	0x08013894

08011f98 <APP_THREAD_SendCoapMsg>:
//		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
//	}
//}

void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, const char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8011f98:	b590      	push	{r4, r7, lr}
 8011f9a:	b087      	sub	sp, #28
 8011f9c:	af02      	add	r7, sp, #8
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	607a      	str	r2, [r7, #4]
 8011fa2:	603b      	str	r3, [r7, #0]
 8011fa4:	460b      	mov	r3, r1
 8011fa6:	817b      	strh	r3, [r7, #10]
	/************ SET MESSAGE INFO (WHERE THE PACKET GOES) ************/
	// https://openthread.io/reference/struct/ot-message-info.html#structot_message_info
	do {
		// REMOVE BELOW CALLS (ONLY FOR DEBUGGING)
			  myRloc16 = otThreadGetRloc16(NULL);
 8011fa8:	2000      	movs	r0, #0
 8011faa:	f7fb fc48 	bl	800d83e <otThreadGetRloc16>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	4b7e      	ldr	r3, [pc, #504]	; (80121ac <APP_THREAD_SendCoapMsg+0x214>)
 8011fb4:	801a      	strh	r2, [r3, #0]
			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 8011fb6:	2000      	movs	r0, #0
 8011fb8:	f7fa ff56 	bl	800ce68 <otIp6GetUnicastAddresses>
 8011fbc:	4602      	mov	r2, r0
 8011fbe:	4b7c      	ldr	r3, [pc, #496]	; (80121b0 <APP_THREAD_SendCoapMsg+0x218>)
 8011fc0:	601a      	str	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 8011fc2:	2000      	movs	r0, #0
 8011fc4:	f7fa ff23 	bl	800ce0e <otIp6IsEnabled>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	461a      	mov	r2, r3
 8011fcc:	4b79      	ldr	r3, [pc, #484]	; (80121b4 <APP_THREAD_SendCoapMsg+0x21c>)
 8011fce:	701a      	strb	r2, [r3, #0]
			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
 8011fd0:	2000      	movs	r0, #0
 8011fd2:	f7fa ff71 	bl	800ceb8 <otIp6GetMulticastAddresses>
 8011fd6:	4602      	mov	r2, r0
 8011fd8:	4b77      	ldr	r3, [pc, #476]	; (80121b8 <APP_THREAD_SendCoapMsg+0x220>)
 8011fda:	601a      	str	r2, [r3, #0]
			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
 8011fdc:	2000      	movs	r0, #0
 8011fde:	f7fb fb86 	bl	800d6ee <otThreadGetMeshLocalEid>
 8011fe2:	4602      	mov	r2, r0
 8011fe4:	4b75      	ldr	r3, [pc, #468]	; (80121bc <APP_THREAD_SendCoapMsg+0x224>)
 8011fe6:	601a      	str	r2, [r3, #0]
			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);
 8011fe8:	2000      	movs	r0, #0
 8011fea:	f7fb fba8 	bl	800d73e <otThreadGetLinkLocalIp6Address>
 8011fee:	4602      	mov	r2, r0
 8011ff0:	4b73      	ldr	r3, [pc, #460]	; (80121c0 <APP_THREAD_SendCoapMsg+0x228>)
 8011ff2:	601a      	str	r2, [r3, #0]

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8011ff4:	222c      	movs	r2, #44	; 0x2c
 8011ff6:	2100      	movs	r1, #0
 8011ff8:	4872      	ldr	r0, [pc, #456]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 8011ffa:	f001 fa8c 	bl	8013516 <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 8011ffe:	897b      	ldrh	r3, [r7, #10]
 8012000:	2b64      	cmp	r3, #100	; 0x64
 8012002:	d914      	bls.n	801202e <APP_THREAD_SendCoapMsg+0x96>
#ifndef BORDER_ROUTER_NODE_TRANSMITTER
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 8012004:	4b6f      	ldr	r3, [pc, #444]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 8012006:	4a70      	ldr	r2, [pc, #448]	; (80121c8 <APP_THREAD_SendCoapMsg+0x230>)
 8012008:	f103 0410 	add.w	r4, r3, #16
 801200c:	4613      	mov	r3, r2
 801200e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8012014:	2000      	movs	r0, #0
 8012016:	f7fb fb6a 	bl	800d6ee <otThreadGetMeshLocalEid>
 801201a:	4602      	mov	r2, r0
 801201c:	4b69      	ldr	r3, [pc, #420]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 801201e:	461c      	mov	r4, r3
 8012020:	4613      	mov	r3, r2
 8012022:	6818      	ldr	r0, [r3, #0]
 8012024:	6859      	ldr	r1, [r3, #4]
 8012026:	689a      	ldr	r2, [r3, #8]
 8012028:	68db      	ldr	r3, [r3, #12]
 801202a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801202c:	e015      	b.n	801205a <APP_THREAD_SendCoapMsg+0xc2>
//			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
#else
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
#endif
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 801202e:	4b65      	ldr	r3, [pc, #404]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 8012030:	4a66      	ldr	r2, [pc, #408]	; (80121cc <APP_THREAD_SendCoapMsg+0x234>)
 8012032:	f103 0410 	add.w	r4, r3, #16
 8012036:	4613      	mov	r3, r2
 8012038:	6818      	ldr	r0, [r3, #0]
 801203a:	6859      	ldr	r1, [r3, #4]
 801203c:	689a      	ldr	r2, [r3, #8]
 801203e:	68db      	ldr	r3, [r3, #12]
 8012040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8012042:	2000      	movs	r0, #0
 8012044:	f7fb fb53 	bl	800d6ee <otThreadGetMeshLocalEid>
 8012048:	4602      	mov	r2, r0
 801204a:	4b5e      	ldr	r3, [pc, #376]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 801204c:	461c      	mov	r4, r3
 801204e:	4613      	mov	r3, r2
 8012050:	6818      	ldr	r0, [r3, #0]
 8012052:	6859      	ldr	r1, [r3, #4]
 8012054:	689a      	ldr	r2, [r3, #8]
 8012056:	68db      	ldr	r3, [r3, #12]
 8012058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 801205a:	4b5a      	ldr	r3, [pc, #360]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 801205c:	2201      	movs	r2, #1
 801205e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8012062:	4b58      	ldr	r3, [pc, #352]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 8012064:	f241 6233 	movw	r2, #5683	; 0x1633
 8012068:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 801206a:	4b56      	ldr	r3, [pc, #344]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 801206c:	2240      	movs	r2, #64	; 0x40
 801206e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8012072:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d009      	beq.n	801208e <APP_THREAD_SendCoapMsg+0xf6>
 801207a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801207e:	2b03      	cmp	r3, #3
 8012080:	d105      	bne.n	801208e <APP_THREAD_SendCoapMsg+0xf6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8012082:	2203      	movs	r2, #3
 8012084:	2100      	movs	r1, #0
 8012086:	4852      	ldr	r0, [pc, #328]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 8012088:	f7fa faaa 	bl	800c5e0 <otCoapHeaderInit>
 801208c:	e04a      	b.n	8012124 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 801208e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d009      	beq.n	80120aa <APP_THREAD_SendCoapMsg+0x112>
 8012096:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801209a:	2b01      	cmp	r3, #1
 801209c:	d105      	bne.n	80120aa <APP_THREAD_SendCoapMsg+0x112>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 801209e:	2201      	movs	r2, #1
 80120a0:	2100      	movs	r1, #0
 80120a2:	484b      	ldr	r0, [pc, #300]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 80120a4:	f7fa fa9c 	bl	800c5e0 <otCoapHeaderInit>
 80120a8:	e03c      	b.n	8012124 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 80120aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d009      	beq.n	80120c6 <APP_THREAD_SendCoapMsg+0x12e>
 80120b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80120b6:	2b02      	cmp	r3, #2
 80120b8:	d105      	bne.n	80120c6 <APP_THREAD_SendCoapMsg+0x12e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 80120ba:	2202      	movs	r2, #2
 80120bc:	2100      	movs	r1, #0
 80120be:	4844      	ldr	r0, [pc, #272]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 80120c0:	f7fa fa8e 	bl	800c5e0 <otCoapHeaderInit>
 80120c4:	e02e      	b.n	8012124 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 80120c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d109      	bne.n	80120e2 <APP_THREAD_SendCoapMsg+0x14a>
 80120ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80120d2:	2b03      	cmp	r3, #3
 80120d4:	d105      	bne.n	80120e2 <APP_THREAD_SendCoapMsg+0x14a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 80120d6:	2203      	movs	r2, #3
 80120d8:	2110      	movs	r1, #16
 80120da:	483d      	ldr	r0, [pc, #244]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 80120dc:	f7fa fa80 	bl	800c5e0 <otCoapHeaderInit>
 80120e0:	e020      	b.n	8012124 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 80120e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d109      	bne.n	80120fe <APP_THREAD_SendCoapMsg+0x166>
 80120ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80120ee:	2b01      	cmp	r3, #1
 80120f0:	d105      	bne.n	80120fe <APP_THREAD_SendCoapMsg+0x166>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 80120f2:	2201      	movs	r2, #1
 80120f4:	2110      	movs	r1, #16
 80120f6:	4836      	ldr	r0, [pc, #216]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 80120f8:	f7fa fa72 	bl	800c5e0 <otCoapHeaderInit>
 80120fc:	e012      	b.n	8012124 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 80120fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d109      	bne.n	801211a <APP_THREAD_SendCoapMsg+0x182>
 8012106:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801210a:	2b02      	cmp	r3, #2
 801210c:	d105      	bne.n	801211a <APP_THREAD_SendCoapMsg+0x182>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 801210e:	2202      	movs	r2, #2
 8012110:	2110      	movs	r1, #16
 8012112:	482f      	ldr	r0, [pc, #188]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 8012114:	f7fa fa64 	bl	800c5e0 <otCoapHeaderInit>
 8012118:	e004      	b.n	8012124 <APP_THREAD_SendCoapMsg+0x18c>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 801211a:	2102      	movs	r1, #2
 801211c:	482c      	ldr	r0, [pc, #176]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 801211e:	f7fa fac8 	bl	800c6b2 <otCoapHeaderGenerateToken>
 8012122:	e040      	b.n	80121a6 <APP_THREAD_SendCoapMsg+0x20e>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8012124:	6839      	ldr	r1, [r7, #0]
 8012126:	482a      	ldr	r0, [pc, #168]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 8012128:	f7fa fb26 	bl	800c778 <otCoapHeaderAppendUriPathOptions>
 801212c:	4603      	mov	r3, r0
 801212e:	461a      	mov	r2, r3
 8012130:	4b28      	ldr	r3, [pc, #160]	; (80121d4 <APP_THREAD_SendCoapMsg+0x23c>)
 8012132:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8012134:	212a      	movs	r1, #42	; 0x2a
 8012136:	4826      	ldr	r0, [pc, #152]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 8012138:	f7fa faeb 	bl	800c712 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		if (msgSize > 0) {
 801213c:	897b      	ldrh	r3, [r7, #10]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d002      	beq.n	8012148 <APP_THREAD_SendCoapMsg+0x1b0>
			otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 8012142:	4823      	ldr	r0, [pc, #140]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 8012144:	f7fa fb4a 	bl	800c7dc <otCoapHeaderSetPayloadMarker>
		}

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8012148:	4921      	ldr	r1, [pc, #132]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 801214a:	2000      	movs	r0, #0
 801214c:	f7fa fc89 	bl	800ca62 <otCoapNewMessage>
 8012150:	4602      	mov	r2, r0
 8012152:	4b21      	ldr	r3, [pc, #132]	; (80121d8 <APP_THREAD_SendCoapMsg+0x240>)
 8012154:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 8012156:	897b      	ldrh	r3, [r7, #10]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d00a      	beq.n	8012172 <APP_THREAD_SendCoapMsg+0x1da>
			error = otMessageAppend(pOT_Message, message, msgSize);
 801215c:	4b1e      	ldr	r3, [pc, #120]	; (80121d8 <APP_THREAD_SendCoapMsg+0x240>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	897a      	ldrh	r2, [r7, #10]
 8012162:	68f9      	ldr	r1, [r7, #12]
 8012164:	4618      	mov	r0, r3
 8012166:	f7fa ffba 	bl	800d0de <otMessageAppend>
 801216a:	4603      	mov	r3, r0
 801216c:	461a      	mov	r2, r3
 801216e:	4b19      	ldr	r3, [pc, #100]	; (80121d4 <APP_THREAD_SendCoapMsg+0x23c>)
 8012170:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 8012172:	4b19      	ldr	r3, [pc, #100]	; (80121d8 <APP_THREAD_SendCoapMsg+0x240>)
 8012174:	6819      	ldr	r1, [r3, #0]
 8012176:	2300      	movs	r3, #0
 8012178:	9300      	str	r3, [sp, #0]
 801217a:	2300      	movs	r3, #0
 801217c:	4a11      	ldr	r2, [pc, #68]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 801217e:	2000      	movs	r0, #0
 8012180:	f7fa fc9d 	bl	800cabe <otCoapSendRequest>
 8012184:	4603      	mov	r3, r0
 8012186:	461a      	mov	r2, r3
 8012188:	4b12      	ldr	r3, [pc, #72]	; (80121d4 <APP_THREAD_SendCoapMsg+0x23c>)
 801218a:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 801218c:	4b11      	ldr	r3, [pc, #68]	; (80121d4 <APP_THREAD_SendCoapMsg+0x23c>)
 801218e:	781b      	ldrb	r3, [r3, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d008      	beq.n	80121a6 <APP_THREAD_SendCoapMsg+0x20e>
 8012194:	4b10      	ldr	r3, [pc, #64]	; (80121d8 <APP_THREAD_SendCoapMsg+0x240>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d004      	beq.n	80121a6 <APP_THREAD_SendCoapMsg+0x20e>
			otMessageFree(pOT_Message);
 801219c:	4b0e      	ldr	r3, [pc, #56]	; (80121d8 <APP_THREAD_SendCoapMsg+0x240>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	4618      	mov	r0, r3
 80121a2:	f7fa ff43 	bl	800d02c <otMessageFree>
		}

	} while (false);
}
 80121a6:	3714      	adds	r7, #20
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd90      	pop	{r4, r7, pc}
 80121ac:	2000503c 	.word	0x2000503c
 80121b0:	20005040 	.word	0x20005040
 80121b4:	20005020 	.word	0x20005020
 80121b8:	20005008 	.word	0x20005008
 80121bc:	20005038 	.word	0x20005038
 80121c0:	2000500c 	.word	0x2000500c
 80121c4:	20004af8 	.word	0x20004af8
 80121c8:	20004ae0 	.word	0x20004ae0
 80121cc:	20005010 	.word	0x20005010
 80121d0:	20004b24 	.word	0x20004b24
 80121d4:	20004ad8 	.word	0x20004ad8
 80121d8:	20004ad4 	.word	0x20004ad4

080121dc <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 80121dc:	b480      	push	{r7}
 80121de:	b083      	sub	sp, #12
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 80121e4:	4a04      	ldr	r2, [pc, #16]	; (80121f8 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	6013      	str	r3, [r2, #0]
}
 80121ea:	bf00      	nop
 80121ec:	370c      	adds	r7, #12
 80121ee:	46bd      	mov	sp, r7
 80121f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f4:	4770      	bx	lr
 80121f6:	bf00      	nop
 80121f8:	20004abc 	.word	0x20004abc

080121fc <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 80121fc:	b480      	push	{r7}
 80121fe:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8012200:	4b03      	ldr	r3, [pc, #12]	; (8012210 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	330c      	adds	r3, #12
}
 8012206:	4618      	mov	r0, r3
 8012208:	46bd      	mov	sp, r7
 801220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220e:	4770      	bx	lr
 8012210:	20004abc 	.word	0x20004abc

08012214 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8012214:	b480      	push	{r7}
 8012216:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8012218:	4b03      	ldr	r3, [pc, #12]	; (8012228 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	330b      	adds	r3, #11
}
 801221e:	4618      	mov	r0, r3
 8012220:	46bd      	mov	sp, r7
 8012222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012226:	4770      	bx	lr
 8012228:	20004abc 	.word	0x20004abc

0801222c <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 801222c:	b480      	push	{r7}
 801222e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8012230:	4b03      	ldr	r3, [pc, #12]	; (8012240 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	330b      	adds	r3, #11
}
 8012236:	4618      	mov	r0, r3
 8012238:	46bd      	mov	sp, r7
 801223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223e:	4770      	bx	lr
 8012240:	20004ac0 	.word	0x20004ac0

08012244 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b082      	sub	sp, #8
 8012248:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 801224a:	4b0f      	ldr	r3, [pc, #60]	; (8012288 <Ot_Cmd_Transfer+0x44>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	2200      	movs	r2, #0
 8012250:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012254:	725a      	strb	r2, [r3, #9]
 8012256:	2200      	movs	r2, #0
 8012258:	f042 0202 	orr.w	r2, r2, #2
 801225c:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 801225e:	4b0a      	ldr	r3, [pc, #40]	; (8012288 <Ot_Cmd_Transfer+0x44>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	330c      	adds	r3, #12
 8012264:	685b      	ldr	r3, [r3, #4]
 8012266:	3302      	adds	r3, #2
 8012268:	009b      	lsls	r3, r3, #2
 801226a:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 801226c:	4b06      	ldr	r3, [pc, #24]	; (8012288 <Ot_Cmd_Transfer+0x44>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	687a      	ldr	r2, [r7, #4]
 8012272:	b2d2      	uxtb	r2, r2
 8012274:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 8012276:	f7fa f85d 	bl	800c334 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 801227a:	f000 f829 	bl	80122d0 <Wait_Getting_Ack_From_M0>
}
 801227e:	bf00      	nop
 8012280:	3708      	adds	r7, #8
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}
 8012286:	bf00      	nop
 8012288:	20004abc 	.word	0x20004abc

0801228c <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b082      	sub	sp, #8
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8012294:	f000 f82e 	bl	80122f4 <Receive_Ack_From_M0>
}
 8012298:	bf00      	nop
 801229a:	3708      	adds	r7, #8
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}

080122a0 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b082      	sub	sp, #8
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 80122a8:	4a04      	ldr	r2, [pc, #16]	; (80122bc <TL_THREAD_NotReceived+0x1c>)
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 80122ae:	f000 f82d 	bl	801230c <Receive_Notification_From_M0>
}
 80122b2:	bf00      	nop
 80122b4:	3708      	adds	r7, #8
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	20004ac0 	.word	0x20004ac0

080122c0 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 80122c0:	b480      	push	{r7}
 80122c2:	af00      	add	r7, sp, #0

}
 80122c4:	bf00      	nop
 80122c6:	46bd      	mov	sp, r7
 80122c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122cc:	4770      	bx	lr
	...

080122d0 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 80122d0:	b480      	push	{r7}
 80122d2:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 80122d4:	bf00      	nop
 80122d6:	4b06      	ldr	r3, [pc, #24]	; (80122f0 <Wait_Getting_Ack_From_M0+0x20>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d0fb      	beq.n	80122d6 <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 80122de:	4b04      	ldr	r3, [pc, #16]	; (80122f0 <Wait_Getting_Ack_From_M0+0x20>)
 80122e0:	2200      	movs	r2, #0
 80122e2:	601a      	str	r2, [r3, #0]
}
 80122e4:	bf00      	nop
 80122e6:	46bd      	mov	sp, r7
 80122e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ec:	4770      	bx	lr
 80122ee:	bf00      	nop
 80122f0:	20004ac8 	.word	0x20004ac8

080122f4 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 80122f4:	b480      	push	{r7}
 80122f6:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 80122f8:	4b03      	ldr	r3, [pc, #12]	; (8012308 <Receive_Ack_From_M0+0x14>)
 80122fa:	2201      	movs	r2, #1
 80122fc:	601a      	str	r2, [r3, #0]
}
 80122fe:	bf00      	nop
 8012300:	46bd      	mov	sp, r7
 8012302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012306:	4770      	bx	lr
 8012308:	20004ac8 	.word	0x20004ac8

0801230c <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8012310:	4b06      	ldr	r3, [pc, #24]	; (801232c <Receive_Notification_From_M0+0x20>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	3301      	adds	r3, #1
 8012316:	4a05      	ldr	r2, [pc, #20]	; (801232c <Receive_Notification_From_M0+0x20>)
 8012318:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 801231a:	4b05      	ldr	r3, [pc, #20]	; (8012330 <Receive_Notification_From_M0+0x24>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	2101      	movs	r1, #1
 8012320:	4618      	mov	r0, r3
 8012322:	f7fb fc81 	bl	800dc28 <osThreadFlagsSet>
}
 8012326:	bf00      	nop
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	20004ac4 	.word	0x20004ac4
 8012330:	20004acc 	.word	0x20004acc

08012334 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 8012338:	22ff      	movs	r2, #255	; 0xff
 801233a:	2100      	movs	r1, #0
 801233c:	4812      	ldr	r0, [pc, #72]	; (8012388 <Send_CLI_To_M0+0x54>)
 801233e:	f001 f8ea 	bl	8013516 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8012342:	4b12      	ldr	r3, [pc, #72]	; (801238c <Send_CLI_To_M0+0x58>)
 8012344:	881b      	ldrh	r3, [r3, #0]
 8012346:	b29b      	uxth	r3, r3
 8012348:	461a      	mov	r2, r3
 801234a:	4911      	ldr	r1, [pc, #68]	; (8012390 <Send_CLI_To_M0+0x5c>)
 801234c:	480e      	ldr	r0, [pc, #56]	; (8012388 <Send_CLI_To_M0+0x54>)
 801234e:	f001 f8d7 	bl	8013500 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8012352:	4b0e      	ldr	r3, [pc, #56]	; (801238c <Send_CLI_To_M0+0x58>)
 8012354:	881b      	ldrh	r3, [r3, #0]
 8012356:	b29b      	uxth	r3, r3
 8012358:	b2da      	uxtb	r2, r3
 801235a:	4b0e      	ldr	r3, [pc, #56]	; (8012394 <Send_CLI_To_M0+0x60>)
 801235c:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 801235e:	4b0d      	ldr	r3, [pc, #52]	; (8012394 <Send_CLI_To_M0+0x60>)
 8012360:	2200      	movs	r2, #0
 8012362:	725a      	strb	r2, [r3, #9]
 8012364:	2200      	movs	r2, #0
 8012366:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8012368:	4b0b      	ldr	r3, [pc, #44]	; (8012398 <Send_CLI_To_M0+0x64>)
 801236a:	2200      	movs	r2, #0
 801236c:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 801236e:	4b07      	ldr	r3, [pc, #28]	; (801238c <Send_CLI_To_M0+0x58>)
 8012370:	2200      	movs	r2, #0
 8012372:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8012374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012378:	2100      	movs	r1, #0
 801237a:	4805      	ldr	r0, [pc, #20]	; (8012390 <Send_CLI_To_M0+0x5c>)
 801237c:	f001 f8cb 	bl	8013516 <memset>

  TL_CLI_SendCmd();
 8012380:	f7f9 ffe6 	bl	800c350 <TL_CLI_SendCmd>
}
 8012384:	bf00      	nop
 8012386:	bd80      	pop	{r7, pc}
 8012388:	20030a58 	.word	0x20030a58
 801238c:	20004ab8 	.word	0x20004ab8
 8012390:	200049b8 	.word	0x200049b8
 8012394:	20030a4c 	.word	0x20030a4c
 8012398:	20004aba 	.word	0x20004aba

0801239c <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 80123a0:	f7f9 fff2 	bl	800c388 <TL_THREAD_CliSendAck>
}
 80123a4:	bf00      	nop
 80123a6:	bd80      	pop	{r7, pc}

080123a8 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 80123ac:	4a04      	ldr	r2, [pc, #16]	; (80123c0 <APP_THREAD_Init_UART_CLI+0x18>)
 80123ae:	2100      	movs	r1, #0
 80123b0:	4804      	ldr	r0, [pc, #16]	; (80123c4 <APP_THREAD_Init_UART_CLI+0x1c>)
 80123b2:	f7fb fb93 	bl	800dadc <osThreadNew>
 80123b6:	4602      	mov	r2, r0
 80123b8:	4b03      	ldr	r3, [pc, #12]	; (80123c8 <APP_THREAD_Init_UART_CLI+0x20>)
 80123ba:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 80123bc:	bf00      	nop
 80123be:	bd80      	pop	{r7, pc}
 80123c0:	08013a00 	.word	0x08013a00
 80123c4:	08011de7 	.word	0x08011de7
 80123c8:	20004ad0 	.word	0x20004ad0

080123cc <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 80123d0:	4b06      	ldr	r3, [pc, #24]	; (80123ec <APP_THREAD_TL_THREAD_INIT+0x20>)
 80123d2:	4a07      	ldr	r2, [pc, #28]	; (80123f0 <APP_THREAD_TL_THREAD_INIT+0x24>)
 80123d4:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 80123d6:	4b05      	ldr	r3, [pc, #20]	; (80123ec <APP_THREAD_TL_THREAD_INIT+0x20>)
 80123d8:	4a06      	ldr	r2, [pc, #24]	; (80123f4 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80123da:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 80123dc:	4b03      	ldr	r3, [pc, #12]	; (80123ec <APP_THREAD_TL_THREAD_INIT+0x20>)
 80123de:	4a06      	ldr	r2, [pc, #24]	; (80123f8 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 80123e0:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 80123e2:	4802      	ldr	r0, [pc, #8]	; (80123ec <APP_THREAD_TL_THREAD_INIT+0x20>)
 80123e4:	f7f9 ff8a 	bl	800c2fc <TL_THREAD_Init>
}
 80123e8:	bf00      	nop
 80123ea:	bd80      	pop	{r7, pc}
 80123ec:	200300d4 	.word	0x200300d4
 80123f0:	20030834 	.word	0x20030834
 80123f4:	20030940 	.word	0x20030940
 80123f8:	20030a4c 	.word	0x20030a4c

080123fc <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b084      	sub	sp, #16
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	7adb      	ldrb	r3, [r3, #11]
 801240c:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	330c      	adds	r3, #12
 8012412:	4906      	ldr	r1, [pc, #24]	; (801242c <TL_THREAD_CliNotReceived+0x30>)
 8012414:	4618      	mov	r0, r3
 8012416:	f7ed feb3 	bl	8000180 <strcmp>
 801241a:	4603      	mov	r3, r0
 801241c:	2b00      	cmp	r3, #0
 801241e:	d101      	bne.n	8012424 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8012420:	f7ff ffbc 	bl	801239c <Send_CLI_Ack_For_OT>
  }
}
 8012424:	bf00      	nop
 8012426:	3710      	adds	r7, #16
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}
 801242c:	080138c0 	.word	0x080138c0

08012430 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8012434:	4b09      	ldr	r3, [pc, #36]	; (801245c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d00d      	beq.n	8012458 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 801243c:	4b07      	ldr	r3, [pc, #28]	; (801245c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	2b01      	cmp	r3, #1
 8012442:	d904      	bls.n	801244e <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8012444:	2100      	movs	r1, #0
 8012446:	2000      	movs	r0, #0
 8012448:	f7ff fb02 	bl	8011a50 <APP_THREAD_Error>
 801244c:	e001      	b.n	8012452 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 801244e:	f7fa feb9 	bl	800d1c4 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8012452:	4b02      	ldr	r3, [pc, #8]	; (801245c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8012454:	2200      	movs	r2, #0
 8012456:	601a      	str	r2, [r3, #0]
  }
}
 8012458:	bf00      	nop
 801245a:	bd80      	pop	{r7, pc}
 801245c:	20004ac4 	.word	0x20004ac4

08012460 <LL_PWR_EnableBootC2>:
{
 8012460:	b480      	push	{r7}
 8012462:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8012464:	4b05      	ldr	r3, [pc, #20]	; (801247c <LL_PWR_EnableBootC2+0x1c>)
 8012466:	68db      	ldr	r3, [r3, #12]
 8012468:	4a04      	ldr	r2, [pc, #16]	; (801247c <LL_PWR_EnableBootC2+0x1c>)
 801246a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801246e:	60d3      	str	r3, [r2, #12]
}
 8012470:	bf00      	nop
 8012472:	46bd      	mov	sp, r7
 8012474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012478:	4770      	bx	lr
 801247a:	bf00      	nop
 801247c:	58000400 	.word	0x58000400

08012480 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8012480:	b480      	push	{r7}
 8012482:	b083      	sub	sp, #12
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8012488:	4b06      	ldr	r3, [pc, #24]	; (80124a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801248a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 801248e:	4905      	ldr	r1, [pc, #20]	; (80124a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	4313      	orrs	r3, r2
 8012494:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8012498:	bf00      	nop
 801249a:	370c      	adds	r7, #12
 801249c:	46bd      	mov	sp, r7
 801249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a2:	4770      	bx	lr
 80124a4:	58000800 	.word	0x58000800

080124a8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80124a8:	b480      	push	{r7}
 80124aa:	b083      	sub	sp, #12
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80124b0:	4b05      	ldr	r3, [pc, #20]	; (80124c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80124b2:	6a1a      	ldr	r2, [r3, #32]
 80124b4:	4904      	ldr	r1, [pc, #16]	; (80124c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	4313      	orrs	r3, r2
 80124ba:	620b      	str	r3, [r1, #32]
}
 80124bc:	bf00      	nop
 80124be:	370c      	adds	r7, #12
 80124c0:	46bd      	mov	sp, r7
 80124c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c6:	4770      	bx	lr
 80124c8:	58000800 	.word	0x58000800

080124cc <LL_AHB3_GRP1_EnableClock>:
{
 80124cc:	b480      	push	{r7}
 80124ce:	b085      	sub	sp, #20
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80124d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80124d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80124da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	4313      	orrs	r3, r2
 80124e2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80124e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80124e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	4013      	ands	r3, r2
 80124ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80124f0:	68fb      	ldr	r3, [r7, #12]
}
 80124f2:	bf00      	nop
 80124f4:	3714      	adds	r7, #20
 80124f6:	46bd      	mov	sp, r7
 80124f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fc:	4770      	bx	lr

080124fe <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80124fe:	b480      	push	{r7}
 8012500:	b085      	sub	sp, #20
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8012506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801250a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 801250e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	4313      	orrs	r3, r2
 8012516:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801251e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	4013      	ands	r3, r2
 8012526:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012528:	68fb      	ldr	r3, [r7, #12]
}
 801252a:	bf00      	nop
 801252c:	3714      	adds	r7, #20
 801252e:	46bd      	mov	sp, r7
 8012530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012534:	4770      	bx	lr

08012536 <LL_C1_IPCC_EnableIT_TXF>:
{
 8012536:	b480      	push	{r7}
 8012538:	b083      	sub	sp, #12
 801253a:	af00      	add	r7, sp, #0
 801253c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	601a      	str	r2, [r3, #0]
}
 801254a:	bf00      	nop
 801254c:	370c      	adds	r7, #12
 801254e:	46bd      	mov	sp, r7
 8012550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012554:	4770      	bx	lr

08012556 <LL_C1_IPCC_EnableIT_RXO>:
{
 8012556:	b480      	push	{r7}
 8012558:	b083      	sub	sp, #12
 801255a:	af00      	add	r7, sp, #0
 801255c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	f043 0201 	orr.w	r2, r3, #1
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	601a      	str	r2, [r3, #0]
}
 801256a:	bf00      	nop
 801256c:	370c      	adds	r7, #12
 801256e:	46bd      	mov	sp, r7
 8012570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012574:	4770      	bx	lr

08012576 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8012576:	b480      	push	{r7}
 8012578:	b083      	sub	sp, #12
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
 801257e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	685a      	ldr	r2, [r3, #4]
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	041b      	lsls	r3, r3, #16
 8012588:	43db      	mvns	r3, r3
 801258a:	401a      	ands	r2, r3
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	605a      	str	r2, [r3, #4]
}
 8012590:	bf00      	nop
 8012592:	370c      	adds	r7, #12
 8012594:	46bd      	mov	sp, r7
 8012596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259a:	4770      	bx	lr

0801259c <LL_C1_IPCC_DisableTransmitChannel>:
{
 801259c:	b480      	push	{r7}
 801259e:	b083      	sub	sp, #12
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	685a      	ldr	r2, [r3, #4]
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	041b      	lsls	r3, r3, #16
 80125ae:	431a      	orrs	r2, r3
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	605a      	str	r2, [r3, #4]
}
 80125b4:	bf00      	nop
 80125b6:	370c      	adds	r7, #12
 80125b8:	46bd      	mov	sp, r7
 80125ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125be:	4770      	bx	lr

080125c0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80125c0:	b480      	push	{r7}
 80125c2:	b083      	sub	sp, #12
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	685a      	ldr	r2, [r3, #4]
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	43db      	mvns	r3, r3
 80125d2:	401a      	ands	r2, r3
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	605a      	str	r2, [r3, #4]
}
 80125d8:	bf00      	nop
 80125da:	370c      	adds	r7, #12
 80125dc:	46bd      	mov	sp, r7
 80125de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e2:	4770      	bx	lr

080125e4 <LL_C1_IPCC_DisableReceiveChannel>:
{
 80125e4:	b480      	push	{r7}
 80125e6:	b083      	sub	sp, #12
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	685a      	ldr	r2, [r3, #4]
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	431a      	orrs	r2, r3
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	605a      	str	r2, [r3, #4]
}
 80125fa:	bf00      	nop
 80125fc:	370c      	adds	r7, #12
 80125fe:	46bd      	mov	sp, r7
 8012600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012604:	4770      	bx	lr

08012606 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8012606:	b480      	push	{r7}
 8012608:	b083      	sub	sp, #12
 801260a:	af00      	add	r7, sp, #0
 801260c:	6078      	str	r0, [r7, #4]
 801260e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	683a      	ldr	r2, [r7, #0]
 8012614:	609a      	str	r2, [r3, #8]
}
 8012616:	bf00      	nop
 8012618:	370c      	adds	r7, #12
 801261a:	46bd      	mov	sp, r7
 801261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012620:	4770      	bx	lr

08012622 <LL_C1_IPCC_SetFlag_CHx>:
{
 8012622:	b480      	push	{r7}
 8012624:	b083      	sub	sp, #12
 8012626:	af00      	add	r7, sp, #0
 8012628:	6078      	str	r0, [r7, #4]
 801262a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	041a      	lsls	r2, r3, #16
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	609a      	str	r2, [r3, #8]
}
 8012634:	bf00      	nop
 8012636:	370c      	adds	r7, #12
 8012638:	46bd      	mov	sp, r7
 801263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263e:	4770      	bx	lr

08012640 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8012640:	b480      	push	{r7}
 8012642:	b083      	sub	sp, #12
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
 8012648:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	68da      	ldr	r2, [r3, #12]
 801264e:	683b      	ldr	r3, [r7, #0]
 8012650:	4013      	ands	r3, r2
 8012652:	683a      	ldr	r2, [r7, #0]
 8012654:	429a      	cmp	r2, r3
 8012656:	d101      	bne.n	801265c <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8012658:	2301      	movs	r3, #1
 801265a:	e000      	b.n	801265e <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801265c:	2300      	movs	r3, #0
}
 801265e:	4618      	mov	r0, r3
 8012660:	370c      	adds	r7, #12
 8012662:	46bd      	mov	sp, r7
 8012664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012668:	4770      	bx	lr

0801266a <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801266a:	b480      	push	{r7}
 801266c:	b083      	sub	sp, #12
 801266e:	af00      	add	r7, sp, #0
 8012670:	6078      	str	r0, [r7, #4]
 8012672:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	69da      	ldr	r2, [r3, #28]
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	4013      	ands	r3, r2
 801267c:	683a      	ldr	r2, [r7, #0]
 801267e:	429a      	cmp	r2, r3
 8012680:	d101      	bne.n	8012686 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8012682:	2301      	movs	r3, #1
 8012684:	e000      	b.n	8012688 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8012686:	2300      	movs	r3, #0
}
 8012688:	4618      	mov	r0, r3
 801268a:	370c      	adds	r7, #12
 801268c:	46bd      	mov	sp, r7
 801268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012692:	4770      	bx	lr

08012694 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8012694:	b580      	push	{r7, lr}
 8012696:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8012698:	2102      	movs	r1, #2
 801269a:	482a      	ldr	r0, [pc, #168]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 801269c:	f7ff ffe5 	bl	801266a <LL_C2_IPCC_IsActiveFlag_CHx>
 80126a0:	4603      	mov	r3, r0
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d009      	beq.n	80126ba <HW_IPCC_Rx_Handler+0x26>
 80126a6:	4b27      	ldr	r3, [pc, #156]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	43db      	mvns	r3, r3
 80126ac:	f003 0302 	and.w	r3, r3, #2
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d002      	beq.n	80126ba <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80126b4:	f000 f90a 	bl	80128cc <HW_IPCC_SYS_EvtHandler>
 80126b8:	e041      	b.n	801273e <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 80126ba:	2104      	movs	r1, #4
 80126bc:	4821      	ldr	r0, [pc, #132]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 80126be:	f7ff ffd4 	bl	801266a <LL_C2_IPCC_IsActiveFlag_CHx>
 80126c2:	4603      	mov	r3, r0
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d009      	beq.n	80126dc <HW_IPCC_Rx_Handler+0x48>
 80126c8:	4b1e      	ldr	r3, [pc, #120]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 80126ca:	685b      	ldr	r3, [r3, #4]
 80126cc:	43db      	mvns	r3, r3
 80126ce:	f003 0304 	and.w	r3, r3, #4
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d002      	beq.n	80126dc <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 80126d6:	f000 f953 	bl	8012980 <HW_IPCC_THREAD_NotEvtHandler>
 80126da:	e030      	b.n	801273e <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 80126dc:	2110      	movs	r1, #16
 80126de:	4819      	ldr	r0, [pc, #100]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 80126e0:	f7ff ffc3 	bl	801266a <LL_C2_IPCC_IsActiveFlag_CHx>
 80126e4:	4603      	mov	r3, r0
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d009      	beq.n	80126fe <HW_IPCC_Rx_Handler+0x6a>
 80126ea:	4b16      	ldr	r3, [pc, #88]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	43db      	mvns	r3, r3
 80126f0:	f003 0310 	and.w	r3, r3, #16
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d002      	beq.n	80126fe <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 80126f8:	f000 f94e 	bl	8012998 <HW_IPCC_THREAD_CliNotEvtHandler>
 80126fc:	e01f      	b.n	801273e <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80126fe:	2101      	movs	r1, #1
 8012700:	4810      	ldr	r0, [pc, #64]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 8012702:	f7ff ffb2 	bl	801266a <LL_C2_IPCC_IsActiveFlag_CHx>
 8012706:	4603      	mov	r3, r0
 8012708:	2b00      	cmp	r3, #0
 801270a:	d008      	beq.n	801271e <HW_IPCC_Rx_Handler+0x8a>
 801270c:	4b0d      	ldr	r3, [pc, #52]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	f003 0301 	and.w	r3, r3, #1
 8012714:	2b00      	cmp	r3, #0
 8012716:	d102      	bne.n	801271e <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8012718:	f000 f89c 	bl	8012854 <HW_IPCC_BLE_EvtHandler>
 801271c:	e00f      	b.n	801273e <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 801271e:	2108      	movs	r1, #8
 8012720:	4808      	ldr	r0, [pc, #32]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 8012722:	f7ff ffa2 	bl	801266a <LL_C2_IPCC_IsActiveFlag_CHx>
 8012726:	4603      	mov	r3, r0
 8012728:	2b00      	cmp	r3, #0
 801272a:	d009      	beq.n	8012740 <HW_IPCC_Rx_Handler+0xac>
 801272c:	4b05      	ldr	r3, [pc, #20]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	43db      	mvns	r3, r3
 8012732:	f003 0308 	and.w	r3, r3, #8
 8012736:	2b00      	cmp	r3, #0
 8012738:	d002      	beq.n	8012740 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 801273a:	f000 f979 	bl	8012a30 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 801273e:	bf00      	nop
 8012740:	bf00      	nop
}
 8012742:	bd80      	pop	{r7, pc}
 8012744:	58000c00 	.word	0x58000c00

08012748 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8012748:	b580      	push	{r7, lr}
 801274a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 801274c:	2102      	movs	r1, #2
 801274e:	482b      	ldr	r0, [pc, #172]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 8012750:	f7ff ff76 	bl	8012640 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012754:	4603      	mov	r3, r0
 8012756:	2b00      	cmp	r3, #0
 8012758:	d109      	bne.n	801276e <HW_IPCC_Tx_Handler+0x26>
 801275a:	4b28      	ldr	r3, [pc, #160]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 801275c:	685b      	ldr	r3, [r3, #4]
 801275e:	43db      	mvns	r3, r3
 8012760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012764:	2b00      	cmp	r3, #0
 8012766:	d002      	beq.n	801276e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8012768:	f000 f8a4 	bl	80128b4 <HW_IPCC_SYS_CmdEvtHandler>
 801276c:	e042      	b.n	80127f4 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 801276e:	2104      	movs	r1, #4
 8012770:	4822      	ldr	r0, [pc, #136]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 8012772:	f7ff ff65 	bl	8012640 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012776:	4603      	mov	r3, r0
 8012778:	2b00      	cmp	r3, #0
 801277a:	d109      	bne.n	8012790 <HW_IPCC_Tx_Handler+0x48>
 801277c:	4b1f      	ldr	r3, [pc, #124]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	43db      	mvns	r3, r3
 8012782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012786:	2b00      	cmp	r3, #0
 8012788:	d002      	beq.n	8012790 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 801278a:	f000 f8ed 	bl	8012968 <HW_IPCC_OT_CmdEvtHandler>
 801278e:	e031      	b.n	80127f4 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8012790:	2102      	movs	r1, #2
 8012792:	481a      	ldr	r0, [pc, #104]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 8012794:	f7ff ff54 	bl	8012640 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012798:	4603      	mov	r3, r0
 801279a:	2b00      	cmp	r3, #0
 801279c:	d109      	bne.n	80127b2 <HW_IPCC_Tx_Handler+0x6a>
 801279e:	4b17      	ldr	r3, [pc, #92]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 80127a0:	685b      	ldr	r3, [r3, #4]
 80127a2:	43db      	mvns	r3, r3
 80127a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d002      	beq.n	80127b2 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80127ac:	f000 f882 	bl	80128b4 <HW_IPCC_SYS_CmdEvtHandler>
 80127b0:	e020      	b.n	80127f4 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80127b2:	2108      	movs	r1, #8
 80127b4:	4811      	ldr	r0, [pc, #68]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 80127b6:	f7ff ff43 	bl	8012640 <LL_C1_IPCC_IsActiveFlag_CHx>
 80127ba:	4603      	mov	r3, r0
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d109      	bne.n	80127d4 <HW_IPCC_Tx_Handler+0x8c>
 80127c0:	4b0e      	ldr	r3, [pc, #56]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 80127c2:	685b      	ldr	r3, [r3, #4]
 80127c4:	43db      	mvns	r3, r3
 80127c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d002      	beq.n	80127d4 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 80127ce:	f000 f911 	bl	80129f4 <HW_IPCC_MM_FreeBufHandler>
 80127d2:	e00f      	b.n	80127f4 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80127d4:	2120      	movs	r1, #32
 80127d6:	4809      	ldr	r0, [pc, #36]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 80127d8:	f7ff ff32 	bl	8012640 <LL_C1_IPCC_IsActiveFlag_CHx>
 80127dc:	4603      	mov	r3, r0
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d109      	bne.n	80127f6 <HW_IPCC_Tx_Handler+0xae>
 80127e2:	4b06      	ldr	r3, [pc, #24]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	43db      	mvns	r3, r3
 80127e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d002      	beq.n	80127f6 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80127f0:	f000 f83c 	bl	801286c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80127f4:	bf00      	nop
 80127f6:	bf00      	nop
}
 80127f8:	bd80      	pop	{r7, pc}
 80127fa:	bf00      	nop
 80127fc:	58000c00 	.word	0x58000c00

08012800 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8012800:	b580      	push	{r7, lr}
 8012802:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8012804:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012808:	f7ff fe79 	bl	80124fe <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 801280c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012810:	f7ff fe36 	bl	8012480 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8012814:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012818:	f7ff fe46 	bl	80124a8 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 801281c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801281e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8012820:	f7ff fe1e 	bl	8012460 <LL_PWR_EnableBootC2>

  return;
 8012824:	bf00      	nop
}
 8012826:	bd80      	pop	{r7, pc}

08012828 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8012828:	b580      	push	{r7, lr}
 801282a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 801282c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012830:	f7ff fe4c 	bl	80124cc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8012834:	4806      	ldr	r0, [pc, #24]	; (8012850 <HW_IPCC_Init+0x28>)
 8012836:	f7ff fe8e 	bl	8012556 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801283a:	4805      	ldr	r0, [pc, #20]	; (8012850 <HW_IPCC_Init+0x28>)
 801283c:	f7ff fe7b 	bl	8012536 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8012840:	202c      	movs	r0, #44	; 0x2c
 8012842:	f7f1 fec6 	bl	80045d2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8012846:	202d      	movs	r0, #45	; 0x2d
 8012848:	f7f1 fec3 	bl	80045d2 <HAL_NVIC_EnableIRQ>

  return;
 801284c:	bf00      	nop
}
 801284e:	bd80      	pop	{r7, pc}
 8012850:	58000c00 	.word	0x58000c00

08012854 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8012854:	b580      	push	{r7, lr}
 8012856:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8012858:	f7f9 fc98 	bl	800c18c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801285c:	2101      	movs	r1, #1
 801285e:	4802      	ldr	r0, [pc, #8]	; (8012868 <HW_IPCC_BLE_EvtHandler+0x14>)
 8012860:	f7ff fed1 	bl	8012606 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012864:	bf00      	nop
}
 8012866:	bd80      	pop	{r7, pc}
 8012868:	58000c00 	.word	0x58000c00

0801286c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 801286c:	b580      	push	{r7, lr}
 801286e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8012870:	2120      	movs	r1, #32
 8012872:	4803      	ldr	r0, [pc, #12]	; (8012880 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8012874:	f7ff fe92 	bl	801259c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8012878:	f7f9 fcb8 	bl	800c1ec <HW_IPCC_BLE_AclDataAckNot>

  return;
 801287c:	bf00      	nop
}
 801287e:	bd80      	pop	{r7, pc}
 8012880:	58000c00 	.word	0x58000c00

08012884 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8012884:	b580      	push	{r7, lr}
 8012886:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012888:	2102      	movs	r1, #2
 801288a:	4802      	ldr	r0, [pc, #8]	; (8012894 <HW_IPCC_SYS_Init+0x10>)
 801288c:	f7ff fe98 	bl	80125c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012890:	bf00      	nop
}
 8012892:	bd80      	pop	{r7, pc}
 8012894:	58000c00 	.word	0x58000c00

08012898 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8012898:	b580      	push	{r7, lr}
 801289a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801289c:	2102      	movs	r1, #2
 801289e:	4804      	ldr	r0, [pc, #16]	; (80128b0 <HW_IPCC_SYS_SendCmd+0x18>)
 80128a0:	f7ff febf 	bl	8012622 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80128a4:	2102      	movs	r1, #2
 80128a6:	4802      	ldr	r0, [pc, #8]	; (80128b0 <HW_IPCC_SYS_SendCmd+0x18>)
 80128a8:	f7ff fe65 	bl	8012576 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80128ac:	bf00      	nop
}
 80128ae:	bd80      	pop	{r7, pc}
 80128b0:	58000c00 	.word	0x58000c00

080128b4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80128b8:	2102      	movs	r1, #2
 80128ba:	4803      	ldr	r0, [pc, #12]	; (80128c8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80128bc:	f7ff fe6e 	bl	801259c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80128c0:	f7f9 fce4 	bl	800c28c <HW_IPCC_SYS_CmdEvtNot>

  return;
 80128c4:	bf00      	nop
}
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	58000c00 	.word	0x58000c00

080128cc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80128d0:	f7f9 fcf2 	bl	800c2b8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80128d4:	2102      	movs	r1, #2
 80128d6:	4802      	ldr	r0, [pc, #8]	; (80128e0 <HW_IPCC_SYS_EvtHandler+0x14>)
 80128d8:	f7ff fe95 	bl	8012606 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80128dc:	bf00      	nop
}
 80128de:	bd80      	pop	{r7, pc}
 80128e0:	58000c00 	.word	0x58000c00

080128e4 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80128e8:	2104      	movs	r1, #4
 80128ea:	4804      	ldr	r0, [pc, #16]	; (80128fc <HW_IPCC_THREAD_Init+0x18>)
 80128ec:	f7ff fe68 	bl	80125c0 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80128f0:	2110      	movs	r1, #16
 80128f2:	4802      	ldr	r0, [pc, #8]	; (80128fc <HW_IPCC_THREAD_Init+0x18>)
 80128f4:	f7ff fe64 	bl	80125c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80128f8:	bf00      	nop
}
 80128fa:	bd80      	pop	{r7, pc}
 80128fc:	58000c00 	.word	0x58000c00

08012900 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8012900:	b580      	push	{r7, lr}
 8012902:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8012904:	2104      	movs	r1, #4
 8012906:	4804      	ldr	r0, [pc, #16]	; (8012918 <HW_IPCC_OT_SendCmd+0x18>)
 8012908:	f7ff fe8b 	bl	8012622 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 801290c:	2104      	movs	r1, #4
 801290e:	4802      	ldr	r0, [pc, #8]	; (8012918 <HW_IPCC_OT_SendCmd+0x18>)
 8012910:	f7ff fe31 	bl	8012576 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8012914:	bf00      	nop
}
 8012916:	bd80      	pop	{r7, pc}
 8012918:	58000c00 	.word	0x58000c00

0801291c <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 801291c:	b580      	push	{r7, lr}
 801291e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8012920:	2110      	movs	r1, #16
 8012922:	4802      	ldr	r0, [pc, #8]	; (801292c <HW_IPCC_CLI_SendCmd+0x10>)
 8012924:	f7ff fe7d 	bl	8012622 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012928:	bf00      	nop
}
 801292a:	bd80      	pop	{r7, pc}
 801292c:	58000c00 	.word	0x58000c00

08012930 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8012930:	b580      	push	{r7, lr}
 8012932:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8012934:	2104      	movs	r1, #4
 8012936:	4804      	ldr	r0, [pc, #16]	; (8012948 <HW_IPCC_THREAD_SendAck+0x18>)
 8012938:	f7ff fe65 	bl	8012606 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 801293c:	2104      	movs	r1, #4
 801293e:	4802      	ldr	r0, [pc, #8]	; (8012948 <HW_IPCC_THREAD_SendAck+0x18>)
 8012940:	f7ff fe3e 	bl	80125c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012944:	bf00      	nop
}
 8012946:	bd80      	pop	{r7, pc}
 8012948:	58000c00 	.word	0x58000c00

0801294c <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 801294c:	b580      	push	{r7, lr}
 801294e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8012950:	2110      	movs	r1, #16
 8012952:	4804      	ldr	r0, [pc, #16]	; (8012964 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8012954:	f7ff fe57 	bl	8012606 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8012958:	2110      	movs	r1, #16
 801295a:	4802      	ldr	r0, [pc, #8]	; (8012964 <HW_IPCC_THREAD_CliSendAck+0x18>)
 801295c:	f7ff fe30 	bl	80125c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012960:	bf00      	nop
}
 8012962:	bd80      	pop	{r7, pc}
 8012964:	58000c00 	.word	0x58000c00

08012968 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8012968:	b580      	push	{r7, lr}
 801296a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 801296c:	2104      	movs	r1, #4
 801296e:	4803      	ldr	r0, [pc, #12]	; (801297c <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8012970:	f7ff fe14 	bl	801259c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8012974:	f7f9 fd16 	bl	800c3a4 <HW_IPCC_OT_CmdEvtNot>

  return;
 8012978:	bf00      	nop
}
 801297a:	bd80      	pop	{r7, pc}
 801297c:	58000c00 	.word	0x58000c00

08012980 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8012980:	b580      	push	{r7, lr}
 8012982:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8012984:	2104      	movs	r1, #4
 8012986:	4803      	ldr	r0, [pc, #12]	; (8012994 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8012988:	f7ff fe2c 	bl	80125e4 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 801298c:	f7f9 fd16 	bl	800c3bc <HW_IPCC_THREAD_EvtNot>

  return;
 8012990:	bf00      	nop
}
 8012992:	bd80      	pop	{r7, pc}
 8012994:	58000c00 	.word	0x58000c00

08012998 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8012998:	b580      	push	{r7, lr}
 801299a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 801299c:	2110      	movs	r1, #16
 801299e:	4803      	ldr	r0, [pc, #12]	; (80129ac <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 80129a0:	f7ff fe20 	bl	80125e4 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 80129a4:	f7f9 fd16 	bl	800c3d4 <HW_IPCC_THREAD_CliEvtNot>

  return;
 80129a8:	bf00      	nop
}
 80129aa:	bd80      	pop	{r7, pc}
 80129ac:	58000c00 	.word	0x58000c00

080129b0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b082      	sub	sp, #8
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80129b8:	2108      	movs	r1, #8
 80129ba:	480c      	ldr	r0, [pc, #48]	; (80129ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80129bc:	f7ff fe40 	bl	8012640 <LL_C1_IPCC_IsActiveFlag_CHx>
 80129c0:	4603      	mov	r3, r0
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d007      	beq.n	80129d6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80129c6:	4a0a      	ldr	r2, [pc, #40]	; (80129f0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80129cc:	2108      	movs	r1, #8
 80129ce:	4807      	ldr	r0, [pc, #28]	; (80129ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80129d0:	f7ff fdd1 	bl	8012576 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80129d4:	e006      	b.n	80129e4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80129da:	2108      	movs	r1, #8
 80129dc:	4803      	ldr	r0, [pc, #12]	; (80129ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80129de:	f7ff fe20 	bl	8012622 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80129e2:	bf00      	nop
}
 80129e4:	3708      	adds	r7, #8
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
 80129ea:	bf00      	nop
 80129ec:	58000c00 	.word	0x58000c00
 80129f0:	20004bb4 	.word	0x20004bb4

080129f4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80129f8:	2108      	movs	r1, #8
 80129fa:	4806      	ldr	r0, [pc, #24]	; (8012a14 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80129fc:	f7ff fdce 	bl	801259c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8012a00:	4b05      	ldr	r3, [pc, #20]	; (8012a18 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012a06:	2108      	movs	r1, #8
 8012a08:	4802      	ldr	r0, [pc, #8]	; (8012a14 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012a0a:	f7ff fe0a 	bl	8012622 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012a0e:	bf00      	nop
}
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	58000c00 	.word	0x58000c00
 8012a18:	20004bb4 	.word	0x20004bb4

08012a1c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012a20:	2108      	movs	r1, #8
 8012a22:	4802      	ldr	r0, [pc, #8]	; (8012a2c <HW_IPCC_TRACES_Init+0x10>)
 8012a24:	f7ff fdcc 	bl	80125c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012a28:	bf00      	nop
}
 8012a2a:	bd80      	pop	{r7, pc}
 8012a2c:	58000c00 	.word	0x58000c00

08012a30 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8012a34:	f7f9 fd60 	bl	800c4f8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012a38:	2108      	movs	r1, #8
 8012a3a:	4802      	ldr	r0, [pc, #8]	; (8012a44 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8012a3c:	f7ff fde3 	bl	8012606 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012a40:	bf00      	nop
}
 8012a42:	bd80      	pop	{r7, pc}
 8012a44:	58000c00 	.word	0x58000c00

08012a48 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	4912      	ldr	r1, [pc, #72]	; (8012a98 <MX_USB_Device_Init+0x50>)
 8012a50:	4812      	ldr	r0, [pc, #72]	; (8012a9c <MX_USB_Device_Init+0x54>)
 8012a52:	f7f8 f865 	bl	800ab20 <USBD_Init>
 8012a56:	4603      	mov	r3, r0
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d001      	beq.n	8012a60 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012a5c:	f7ef fbb8 	bl	80021d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012a60:	490f      	ldr	r1, [pc, #60]	; (8012aa0 <MX_USB_Device_Init+0x58>)
 8012a62:	480e      	ldr	r0, [pc, #56]	; (8012a9c <MX_USB_Device_Init+0x54>)
 8012a64:	f7f8 f88c 	bl	800ab80 <USBD_RegisterClass>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d001      	beq.n	8012a72 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012a6e:	f7ef fbaf 	bl	80021d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012a72:	490c      	ldr	r1, [pc, #48]	; (8012aa4 <MX_USB_Device_Init+0x5c>)
 8012a74:	4809      	ldr	r0, [pc, #36]	; (8012a9c <MX_USB_Device_Init+0x54>)
 8012a76:	f7f7 ffad 	bl	800a9d4 <USBD_CDC_RegisterInterface>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d001      	beq.n	8012a84 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012a80:	f7ef fba6 	bl	80021d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012a84:	4805      	ldr	r0, [pc, #20]	; (8012a9c <MX_USB_Device_Init+0x54>)
 8012a86:	f7f8 f8a2 	bl	800abce <USBD_Start>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d001      	beq.n	8012a94 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012a90:	f7ef fb9e 	bl	80021d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012a94:	bf00      	nop
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	20000174 	.word	0x20000174
 8012a9c:	20005044 	.word	0x20005044
 8012aa0:	20000038 	.word	0x20000038
 8012aa4:	20000160 	.word	0x20000160

08012aa8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012aac:	2200      	movs	r2, #0
 8012aae:	4905      	ldr	r1, [pc, #20]	; (8012ac4 <CDC_Init_FS+0x1c>)
 8012ab0:	4805      	ldr	r0, [pc, #20]	; (8012ac8 <CDC_Init_FS+0x20>)
 8012ab2:	f7f7 ffa4 	bl	800a9fe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012ab6:	4905      	ldr	r1, [pc, #20]	; (8012acc <CDC_Init_FS+0x24>)
 8012ab8:	4803      	ldr	r0, [pc, #12]	; (8012ac8 <CDC_Init_FS+0x20>)
 8012aba:	f7f7 ffbe 	bl	800aa3a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012abe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	bd80      	pop	{r7, pc}
 8012ac4:	20005b14 	.word	0x20005b14
 8012ac8:	20005044 	.word	0x20005044
 8012acc:	20005314 	.word	0x20005314

08012ad0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012ad0:	b480      	push	{r7}
 8012ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012ad4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ade:	4770      	bx	lr

08012ae0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012ae0:	b480      	push	{r7}
 8012ae2:	b083      	sub	sp, #12
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	6039      	str	r1, [r7, #0]
 8012aea:	71fb      	strb	r3, [r7, #7]
 8012aec:	4613      	mov	r3, r2
 8012aee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012af0:	79fb      	ldrb	r3, [r7, #7]
 8012af2:	2b23      	cmp	r3, #35	; 0x23
 8012af4:	d84a      	bhi.n	8012b8c <CDC_Control_FS+0xac>
 8012af6:	a201      	add	r2, pc, #4	; (adr r2, 8012afc <CDC_Control_FS+0x1c>)
 8012af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012afc:	08012b8d 	.word	0x08012b8d
 8012b00:	08012b8d 	.word	0x08012b8d
 8012b04:	08012b8d 	.word	0x08012b8d
 8012b08:	08012b8d 	.word	0x08012b8d
 8012b0c:	08012b8d 	.word	0x08012b8d
 8012b10:	08012b8d 	.word	0x08012b8d
 8012b14:	08012b8d 	.word	0x08012b8d
 8012b18:	08012b8d 	.word	0x08012b8d
 8012b1c:	08012b8d 	.word	0x08012b8d
 8012b20:	08012b8d 	.word	0x08012b8d
 8012b24:	08012b8d 	.word	0x08012b8d
 8012b28:	08012b8d 	.word	0x08012b8d
 8012b2c:	08012b8d 	.word	0x08012b8d
 8012b30:	08012b8d 	.word	0x08012b8d
 8012b34:	08012b8d 	.word	0x08012b8d
 8012b38:	08012b8d 	.word	0x08012b8d
 8012b3c:	08012b8d 	.word	0x08012b8d
 8012b40:	08012b8d 	.word	0x08012b8d
 8012b44:	08012b8d 	.word	0x08012b8d
 8012b48:	08012b8d 	.word	0x08012b8d
 8012b4c:	08012b8d 	.word	0x08012b8d
 8012b50:	08012b8d 	.word	0x08012b8d
 8012b54:	08012b8d 	.word	0x08012b8d
 8012b58:	08012b8d 	.word	0x08012b8d
 8012b5c:	08012b8d 	.word	0x08012b8d
 8012b60:	08012b8d 	.word	0x08012b8d
 8012b64:	08012b8d 	.word	0x08012b8d
 8012b68:	08012b8d 	.word	0x08012b8d
 8012b6c:	08012b8d 	.word	0x08012b8d
 8012b70:	08012b8d 	.word	0x08012b8d
 8012b74:	08012b8d 	.word	0x08012b8d
 8012b78:	08012b8d 	.word	0x08012b8d
 8012b7c:	08012b8d 	.word	0x08012b8d
 8012b80:	08012b8d 	.word	0x08012b8d
 8012b84:	08012b8d 	.word	0x08012b8d
 8012b88:	08012b8d 	.word	0x08012b8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012b8c:	bf00      	nop
  }

  return (USBD_OK);
 8012b8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	370c      	adds	r7, #12
 8012b94:	46bd      	mov	sp, r7
 8012b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9a:	4770      	bx	lr

08012b9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012ba6:	6879      	ldr	r1, [r7, #4]
 8012ba8:	4805      	ldr	r0, [pc, #20]	; (8012bc0 <CDC_Receive_FS+0x24>)
 8012baa:	f7f7 ff46 	bl	800aa3a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012bae:	4804      	ldr	r0, [pc, #16]	; (8012bc0 <CDC_Receive_FS+0x24>)
 8012bb0:	f7f7 ff8c 	bl	800aacc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012bb4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3708      	adds	r7, #8
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	20005044 	.word	0x20005044

08012bc4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b084      	sub	sp, #16
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	460b      	mov	r3, r1
 8012bce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012bd4:	4b0d      	ldr	r3, [pc, #52]	; (8012c0c <CDC_Transmit_FS+0x48>)
 8012bd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012bda:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d001      	beq.n	8012bea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012be6:	2301      	movs	r3, #1
 8012be8:	e00b      	b.n	8012c02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012bea:	887b      	ldrh	r3, [r7, #2]
 8012bec:	461a      	mov	r2, r3
 8012bee:	6879      	ldr	r1, [r7, #4]
 8012bf0:	4806      	ldr	r0, [pc, #24]	; (8012c0c <CDC_Transmit_FS+0x48>)
 8012bf2:	f7f7 ff04 	bl	800a9fe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012bf6:	4805      	ldr	r0, [pc, #20]	; (8012c0c <CDC_Transmit_FS+0x48>)
 8012bf8:	f7f7 ff38 	bl	800aa6c <USBD_CDC_TransmitPacket>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3710      	adds	r7, #16
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}
 8012c0a:	bf00      	nop
 8012c0c:	20005044 	.word	0x20005044

08012c10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012c10:	b480      	push	{r7}
 8012c12:	b087      	sub	sp, #28
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	60f8      	str	r0, [r7, #12]
 8012c18:	60b9      	str	r1, [r7, #8]
 8012c1a:	4613      	mov	r3, r2
 8012c1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	371c      	adds	r7, #28
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c30:	4770      	bx	lr
	...

08012c34 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c34:	b480      	push	{r7}
 8012c36:	b083      	sub	sp, #12
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	6039      	str	r1, [r7, #0]
 8012c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	2212      	movs	r2, #18
 8012c44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8012c46:	4b03      	ldr	r3, [pc, #12]	; (8012c54 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8012c48:	4618      	mov	r0, r3
 8012c4a:	370c      	adds	r7, #12
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c52:	4770      	bx	lr
 8012c54:	20000190 	.word	0x20000190

08012c58 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c58:	b480      	push	{r7}
 8012c5a:	b083      	sub	sp, #12
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	4603      	mov	r3, r0
 8012c60:	6039      	str	r1, [r7, #0]
 8012c62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	2204      	movs	r2, #4
 8012c68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012c6a:	4b03      	ldr	r3, [pc, #12]	; (8012c78 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	370c      	adds	r7, #12
 8012c70:	46bd      	mov	sp, r7
 8012c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c76:	4770      	bx	lr
 8012c78:	200001a4 	.word	0x200001a4

08012c7c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b082      	sub	sp, #8
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	4603      	mov	r3, r0
 8012c84:	6039      	str	r1, [r7, #0]
 8012c86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012c88:	79fb      	ldrb	r3, [r7, #7]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d105      	bne.n	8012c9a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012c8e:	683a      	ldr	r2, [r7, #0]
 8012c90:	4907      	ldr	r1, [pc, #28]	; (8012cb0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012c92:	4808      	ldr	r0, [pc, #32]	; (8012cb4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012c94:	f7f8 ff4c 	bl	800bb30 <USBD_GetString>
 8012c98:	e004      	b.n	8012ca4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012c9a:	683a      	ldr	r2, [r7, #0]
 8012c9c:	4904      	ldr	r1, [pc, #16]	; (8012cb0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012c9e:	4805      	ldr	r0, [pc, #20]	; (8012cb4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012ca0:	f7f8 ff46 	bl	800bb30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012ca4:	4b02      	ldr	r3, [pc, #8]	; (8012cb0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	3708      	adds	r7, #8
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd80      	pop	{r7, pc}
 8012cae:	bf00      	nop
 8012cb0:	20006314 	.word	0x20006314
 8012cb4:	080138c4 	.word	0x080138c4

08012cb8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	6039      	str	r1, [r7, #0]
 8012cc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012cc4:	683a      	ldr	r2, [r7, #0]
 8012cc6:	4904      	ldr	r1, [pc, #16]	; (8012cd8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8012cc8:	4804      	ldr	r0, [pc, #16]	; (8012cdc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8012cca:	f7f8 ff31 	bl	800bb30 <USBD_GetString>
  return USBD_StrDesc;
 8012cce:	4b02      	ldr	r3, [pc, #8]	; (8012cd8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	3708      	adds	r7, #8
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}
 8012cd8:	20006314 	.word	0x20006314
 8012cdc:	080138d0 	.word	0x080138d0

08012ce0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b082      	sub	sp, #8
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	6039      	str	r1, [r7, #0]
 8012cea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012cec:	683b      	ldr	r3, [r7, #0]
 8012cee:	221a      	movs	r2, #26
 8012cf0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012cf2:	f000 f843 	bl	8012d7c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012cf6:	4b02      	ldr	r3, [pc, #8]	; (8012d00 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	3708      	adds	r7, #8
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}
 8012d00:	200001a8 	.word	0x200001a8

08012d04 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b082      	sub	sp, #8
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	6039      	str	r1, [r7, #0]
 8012d0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012d10:	79fb      	ldrb	r3, [r7, #7]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d105      	bne.n	8012d22 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012d16:	683a      	ldr	r2, [r7, #0]
 8012d18:	4907      	ldr	r1, [pc, #28]	; (8012d38 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012d1a:	4808      	ldr	r0, [pc, #32]	; (8012d3c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012d1c:	f7f8 ff08 	bl	800bb30 <USBD_GetString>
 8012d20:	e004      	b.n	8012d2c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012d22:	683a      	ldr	r2, [r7, #0]
 8012d24:	4904      	ldr	r1, [pc, #16]	; (8012d38 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012d26:	4805      	ldr	r0, [pc, #20]	; (8012d3c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012d28:	f7f8 ff02 	bl	800bb30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d2c:	4b02      	ldr	r3, [pc, #8]	; (8012d38 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3708      	adds	r7, #8
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}
 8012d36:	bf00      	nop
 8012d38:	20006314 	.word	0x20006314
 8012d3c:	080138d8 	.word	0x080138d8

08012d40 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	4603      	mov	r3, r0
 8012d48:	6039      	str	r1, [r7, #0]
 8012d4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012d4c:	79fb      	ldrb	r3, [r7, #7]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d105      	bne.n	8012d5e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012d52:	683a      	ldr	r2, [r7, #0]
 8012d54:	4907      	ldr	r1, [pc, #28]	; (8012d74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012d56:	4808      	ldr	r0, [pc, #32]	; (8012d78 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012d58:	f7f8 feea 	bl	800bb30 <USBD_GetString>
 8012d5c:	e004      	b.n	8012d68 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012d5e:	683a      	ldr	r2, [r7, #0]
 8012d60:	4904      	ldr	r1, [pc, #16]	; (8012d74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012d62:	4805      	ldr	r0, [pc, #20]	; (8012d78 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012d64:	f7f8 fee4 	bl	800bb30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d68:	4b02      	ldr	r3, [pc, #8]	; (8012d74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	3708      	adds	r7, #8
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}
 8012d72:	bf00      	nop
 8012d74:	20006314 	.word	0x20006314
 8012d78:	080138e4 	.word	0x080138e4

08012d7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b084      	sub	sp, #16
 8012d80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012d82:	4b0f      	ldr	r3, [pc, #60]	; (8012dc0 <Get_SerialNum+0x44>)
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012d88:	4b0e      	ldr	r3, [pc, #56]	; (8012dc4 <Get_SerialNum+0x48>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012d8e:	4b0e      	ldr	r3, [pc, #56]	; (8012dc8 <Get_SerialNum+0x4c>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012d94:	68fa      	ldr	r2, [r7, #12]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	4413      	add	r3, r2
 8012d9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d009      	beq.n	8012db6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012da2:	2208      	movs	r2, #8
 8012da4:	4909      	ldr	r1, [pc, #36]	; (8012dcc <Get_SerialNum+0x50>)
 8012da6:	68f8      	ldr	r0, [r7, #12]
 8012da8:	f000 f814 	bl	8012dd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012dac:	2204      	movs	r2, #4
 8012dae:	4908      	ldr	r1, [pc, #32]	; (8012dd0 <Get_SerialNum+0x54>)
 8012db0:	68b8      	ldr	r0, [r7, #8]
 8012db2:	f000 f80f 	bl	8012dd4 <IntToUnicode>
  }
}
 8012db6:	bf00      	nop
 8012db8:	3710      	adds	r7, #16
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}
 8012dbe:	bf00      	nop
 8012dc0:	1fff7590 	.word	0x1fff7590
 8012dc4:	1fff7594 	.word	0x1fff7594
 8012dc8:	1fff7598 	.word	0x1fff7598
 8012dcc:	200001aa 	.word	0x200001aa
 8012dd0:	200001ba 	.word	0x200001ba

08012dd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b087      	sub	sp, #28
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	60b9      	str	r1, [r7, #8]
 8012dde:	4613      	mov	r3, r2
 8012de0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012de2:	2300      	movs	r3, #0
 8012de4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012de6:	2300      	movs	r3, #0
 8012de8:	75fb      	strb	r3, [r7, #23]
 8012dea:	e027      	b.n	8012e3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	0f1b      	lsrs	r3, r3, #28
 8012df0:	2b09      	cmp	r3, #9
 8012df2:	d80b      	bhi.n	8012e0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	0f1b      	lsrs	r3, r3, #28
 8012df8:	b2da      	uxtb	r2, r3
 8012dfa:	7dfb      	ldrb	r3, [r7, #23]
 8012dfc:	005b      	lsls	r3, r3, #1
 8012dfe:	4619      	mov	r1, r3
 8012e00:	68bb      	ldr	r3, [r7, #8]
 8012e02:	440b      	add	r3, r1
 8012e04:	3230      	adds	r2, #48	; 0x30
 8012e06:	b2d2      	uxtb	r2, r2
 8012e08:	701a      	strb	r2, [r3, #0]
 8012e0a:	e00a      	b.n	8012e22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	0f1b      	lsrs	r3, r3, #28
 8012e10:	b2da      	uxtb	r2, r3
 8012e12:	7dfb      	ldrb	r3, [r7, #23]
 8012e14:	005b      	lsls	r3, r3, #1
 8012e16:	4619      	mov	r1, r3
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	440b      	add	r3, r1
 8012e1c:	3237      	adds	r2, #55	; 0x37
 8012e1e:	b2d2      	uxtb	r2, r2
 8012e20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	011b      	lsls	r3, r3, #4
 8012e26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012e28:	7dfb      	ldrb	r3, [r7, #23]
 8012e2a:	005b      	lsls	r3, r3, #1
 8012e2c:	3301      	adds	r3, #1
 8012e2e:	68ba      	ldr	r2, [r7, #8]
 8012e30:	4413      	add	r3, r2
 8012e32:	2200      	movs	r2, #0
 8012e34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012e36:	7dfb      	ldrb	r3, [r7, #23]
 8012e38:	3301      	adds	r3, #1
 8012e3a:	75fb      	strb	r3, [r7, #23]
 8012e3c:	7dfa      	ldrb	r2, [r7, #23]
 8012e3e:	79fb      	ldrb	r3, [r7, #7]
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d3d3      	bcc.n	8012dec <IntToUnicode+0x18>
  }
}
 8012e44:	bf00      	nop
 8012e46:	371c      	adds	r7, #28
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr

08012e50 <LL_AHB2_GRP1_EnableClock>:
{
 8012e50:	b480      	push	{r7}
 8012e52:	b085      	sub	sp, #20
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8012e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012e5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	4313      	orrs	r3, r2
 8012e66:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8012e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012e6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	4013      	ands	r3, r2
 8012e72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012e74:	68fb      	ldr	r3, [r7, #12]
}
 8012e76:	bf00      	nop
 8012e78:	3714      	adds	r7, #20
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e80:	4770      	bx	lr

08012e82 <LL_APB1_GRP1_EnableClock>:
{
 8012e82:	b480      	push	{r7}
 8012e84:	b085      	sub	sp, #20
 8012e86:	af00      	add	r7, sp, #0
 8012e88:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8012e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012e8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	4313      	orrs	r3, r2
 8012e98:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8012e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012e9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	4013      	ands	r3, r2
 8012ea4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
}
 8012ea8:	bf00      	nop
 8012eaa:	3714      	adds	r7, #20
 8012eac:	46bd      	mov	sp, r7
 8012eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb2:	4770      	bx	lr

08012eb4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b088      	sub	sp, #32
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012ebc:	f107 030c 	add.w	r3, r7, #12
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	601a      	str	r2, [r3, #0]
 8012ec4:	605a      	str	r2, [r3, #4]
 8012ec6:	609a      	str	r2, [r3, #8]
 8012ec8:	60da      	str	r2, [r3, #12]
 8012eca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	4a13      	ldr	r2, [pc, #76]	; (8012f20 <HAL_PCD_MspInit+0x6c>)
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	d120      	bne.n	8012f18 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012ed6:	2001      	movs	r0, #1
 8012ed8:	f7ff ffba 	bl	8012e50 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012edc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012ee0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ee2:	2302      	movs	r3, #2
 8012ee4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012eea:	2303      	movs	r3, #3
 8012eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8012eee:	230a      	movs	r3, #10
 8012ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012ef2:	f107 030c 	add.w	r3, r7, #12
 8012ef6:	4619      	mov	r1, r3
 8012ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012efc:	f7f1 fe1a 	bl	8004b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012f00:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8012f04:	f7ff ffbd 	bl	8012e82 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8012f08:	2200      	movs	r2, #0
 8012f0a:	2105      	movs	r1, #5
 8012f0c:	2014      	movs	r0, #20
 8012f0e:	f7f1 fb46 	bl	800459e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8012f12:	2014      	movs	r0, #20
 8012f14:	f7f1 fb5d 	bl	80045d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012f18:	bf00      	nop
 8012f1a:	3720      	adds	r7, #32
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}
 8012f20:	40006800 	.word	0x40006800

08012f24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b082      	sub	sp, #8
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8012f38:	4619      	mov	r1, r3
 8012f3a:	4610      	mov	r0, r2
 8012f3c:	f7f7 fe92 	bl	800ac64 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012f40:	bf00      	nop
 8012f42:	3708      	adds	r7, #8
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	460b      	mov	r3, r1
 8012f52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8012f5a:	78fb      	ldrb	r3, [r7, #3]
 8012f5c:	687a      	ldr	r2, [r7, #4]
 8012f5e:	015b      	lsls	r3, r3, #5
 8012f60:	4413      	add	r3, r2
 8012f62:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8012f66:	681a      	ldr	r2, [r3, #0]
 8012f68:	78fb      	ldrb	r3, [r7, #3]
 8012f6a:	4619      	mov	r1, r3
 8012f6c:	f7f7 fecd 	bl	800ad0a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8012f70:	bf00      	nop
 8012f72:	3708      	adds	r7, #8
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}

08012f78 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	460b      	mov	r3, r1
 8012f82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8012f8a:	78fb      	ldrb	r3, [r7, #3]
 8012f8c:	687a      	ldr	r2, [r7, #4]
 8012f8e:	015b      	lsls	r3, r3, #5
 8012f90:	4413      	add	r3, r2
 8012f92:	333c      	adds	r3, #60	; 0x3c
 8012f94:	681a      	ldr	r2, [r3, #0]
 8012f96:	78fb      	ldrb	r3, [r7, #3]
 8012f98:	4619      	mov	r1, r3
 8012f9a:	f7f7 ff19 	bl	800add0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8012f9e:	bf00      	nop
 8012fa0:	3708      	adds	r7, #8
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}

08012fa6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fa6:	b580      	push	{r7, lr}
 8012fa8:	b082      	sub	sp, #8
 8012faa:	af00      	add	r7, sp, #0
 8012fac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f7f8 f82d 	bl	800b014 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8012fba:	bf00      	nop
 8012fbc:	3708      	adds	r7, #8
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}

08012fc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fc2:	b580      	push	{r7, lr}
 8012fc4:	b084      	sub	sp, #16
 8012fc6:	af00      	add	r7, sp, #0
 8012fc8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012fca:	2301      	movs	r3, #1
 8012fcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	689b      	ldr	r3, [r3, #8]
 8012fd2:	2b02      	cmp	r3, #2
 8012fd4:	d001      	beq.n	8012fda <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012fd6:	f7ef f8fb 	bl	80021d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012fe0:	7bfa      	ldrb	r2, [r7, #15]
 8012fe2:	4611      	mov	r1, r2
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7f7 ffd7 	bl	800af98 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f7f7 ff83 	bl	800aefc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8012ff6:	bf00      	nop
 8012ff8:	3710      	adds	r7, #16
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
	...

08013000 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b082      	sub	sp, #8
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801300e:	4618      	mov	r0, r3
 8013010:	f7f7 ffd2 	bl	800afb8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	699b      	ldr	r3, [r3, #24]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d005      	beq.n	8013028 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801301c:	4b04      	ldr	r3, [pc, #16]	; (8013030 <HAL_PCD_SuspendCallback+0x30>)
 801301e:	691b      	ldr	r3, [r3, #16]
 8013020:	4a03      	ldr	r2, [pc, #12]	; (8013030 <HAL_PCD_SuspendCallback+0x30>)
 8013022:	f043 0306 	orr.w	r3, r3, #6
 8013026:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8013028:	bf00      	nop
 801302a:	3708      	adds	r7, #8
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}
 8013030:	e000ed00 	.word	0xe000ed00

08013034 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b082      	sub	sp, #8
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	699b      	ldr	r3, [r3, #24]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d007      	beq.n	8013054 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013044:	4b08      	ldr	r3, [pc, #32]	; (8013068 <HAL_PCD_ResumeCallback+0x34>)
 8013046:	691b      	ldr	r3, [r3, #16]
 8013048:	4a07      	ldr	r2, [pc, #28]	; (8013068 <HAL_PCD_ResumeCallback+0x34>)
 801304a:	f023 0306 	bic.w	r3, r3, #6
 801304e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013050:	f000 f9be 	bl	80133d0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801305a:	4618      	mov	r0, r3
 801305c:	f7f7 ffc2 	bl	800afe4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8013060:	bf00      	nop
 8013062:	3708      	adds	r7, #8
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}
 8013068:	e000ed00 	.word	0xe000ed00

0801306c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b082      	sub	sp, #8
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013074:	4a2c      	ldr	r2, [pc, #176]	; (8013128 <USBD_LL_Init+0xbc>)
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	4a2a      	ldr	r2, [pc, #168]	; (8013128 <USBD_LL_Init+0xbc>)
 8013080:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8013084:	f7f2 fe66 	bl	8005d54 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8013088:	4b27      	ldr	r3, [pc, #156]	; (8013128 <USBD_LL_Init+0xbc>)
 801308a:	4a28      	ldr	r2, [pc, #160]	; (801312c <USBD_LL_Init+0xc0>)
 801308c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801308e:	4b26      	ldr	r3, [pc, #152]	; (8013128 <USBD_LL_Init+0xbc>)
 8013090:	2208      	movs	r2, #8
 8013092:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8013094:	4b24      	ldr	r3, [pc, #144]	; (8013128 <USBD_LL_Init+0xbc>)
 8013096:	2202      	movs	r2, #2
 8013098:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801309a:	4b23      	ldr	r3, [pc, #140]	; (8013128 <USBD_LL_Init+0xbc>)
 801309c:	2202      	movs	r2, #2
 801309e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80130a0:	4b21      	ldr	r3, [pc, #132]	; (8013128 <USBD_LL_Init+0xbc>)
 80130a2:	2200      	movs	r2, #0
 80130a4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80130a6:	4b20      	ldr	r3, [pc, #128]	; (8013128 <USBD_LL_Init+0xbc>)
 80130a8:	2200      	movs	r2, #0
 80130aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80130ac:	4b1e      	ldr	r3, [pc, #120]	; (8013128 <USBD_LL_Init+0xbc>)
 80130ae:	2200      	movs	r2, #0
 80130b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80130b2:	4b1d      	ldr	r3, [pc, #116]	; (8013128 <USBD_LL_Init+0xbc>)
 80130b4:	2200      	movs	r2, #0
 80130b6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80130b8:	481b      	ldr	r0, [pc, #108]	; (8013128 <USBD_LL_Init+0xbc>)
 80130ba:	f7f1 fee7 	bl	8004e8c <HAL_PCD_Init>
 80130be:	4603      	mov	r3, r0
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d001      	beq.n	80130c8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80130c4:	f7ef f884 	bl	80021d0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80130ce:	2318      	movs	r3, #24
 80130d0:	2200      	movs	r2, #0
 80130d2:	2100      	movs	r1, #0
 80130d4:	f7f2 fdac 	bl	8005c30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80130de:	2358      	movs	r3, #88	; 0x58
 80130e0:	2200      	movs	r2, #0
 80130e2:	2180      	movs	r1, #128	; 0x80
 80130e4:	f7f2 fda4 	bl	8005c30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80130ee:	23c0      	movs	r3, #192	; 0xc0
 80130f0:	2200      	movs	r2, #0
 80130f2:	2181      	movs	r1, #129	; 0x81
 80130f4:	f7f2 fd9c 	bl	8005c30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80130fe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013102:	2200      	movs	r2, #0
 8013104:	2101      	movs	r1, #1
 8013106:	f7f2 fd93 	bl	8005c30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013114:	2200      	movs	r2, #0
 8013116:	2182      	movs	r1, #130	; 0x82
 8013118:	f7f2 fd8a 	bl	8005c30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801311c:	2300      	movs	r3, #0
}
 801311e:	4618      	mov	r0, r3
 8013120:	3708      	adds	r7, #8
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}
 8013126:	bf00      	nop
 8013128:	20006514 	.word	0x20006514
 801312c:	40006800 	.word	0x40006800

08013130 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b084      	sub	sp, #16
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013138:	2300      	movs	r3, #0
 801313a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801313c:	2300      	movs	r3, #0
 801313e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013146:	4618      	mov	r0, r3
 8013148:	f7f1 ff5b 	bl	8005002 <HAL_PCD_Start>
 801314c:	4603      	mov	r3, r0
 801314e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013150:	7bfb      	ldrb	r3, [r7, #15]
 8013152:	4618      	mov	r0, r3
 8013154:	f000 f944 	bl	80133e0 <USBD_Get_USB_Status>
 8013158:	4603      	mov	r3, r0
 801315a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801315c:	7bbb      	ldrb	r3, [r7, #14]
}
 801315e:	4618      	mov	r0, r3
 8013160:	3710      	adds	r7, #16
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013166:	b580      	push	{r7, lr}
 8013168:	b084      	sub	sp, #16
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
 801316e:	4608      	mov	r0, r1
 8013170:	4611      	mov	r1, r2
 8013172:	461a      	mov	r2, r3
 8013174:	4603      	mov	r3, r0
 8013176:	70fb      	strb	r3, [r7, #3]
 8013178:	460b      	mov	r3, r1
 801317a:	70bb      	strb	r3, [r7, #2]
 801317c:	4613      	mov	r3, r2
 801317e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013180:	2300      	movs	r3, #0
 8013182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013184:	2300      	movs	r3, #0
 8013186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801318e:	78bb      	ldrb	r3, [r7, #2]
 8013190:	883a      	ldrh	r2, [r7, #0]
 8013192:	78f9      	ldrb	r1, [r7, #3]
 8013194:	f7f2 f8ca 	bl	800532c <HAL_PCD_EP_Open>
 8013198:	4603      	mov	r3, r0
 801319a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801319c:	7bfb      	ldrb	r3, [r7, #15]
 801319e:	4618      	mov	r0, r3
 80131a0:	f000 f91e 	bl	80133e0 <USBD_Get_USB_Status>
 80131a4:	4603      	mov	r3, r0
 80131a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80131a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3710      	adds	r7, #16
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}

080131b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80131b2:	b580      	push	{r7, lr}
 80131b4:	b084      	sub	sp, #16
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	6078      	str	r0, [r7, #4]
 80131ba:	460b      	mov	r3, r1
 80131bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131be:	2300      	movs	r3, #0
 80131c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131c2:	2300      	movs	r3, #0
 80131c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80131cc:	78fa      	ldrb	r2, [r7, #3]
 80131ce:	4611      	mov	r1, r2
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7f2 f90b 	bl	80053ec <HAL_PCD_EP_Close>
 80131d6:	4603      	mov	r3, r0
 80131d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80131da:	7bfb      	ldrb	r3, [r7, #15]
 80131dc:	4618      	mov	r0, r3
 80131de:	f000 f8ff 	bl	80133e0 <USBD_Get_USB_Status>
 80131e2:	4603      	mov	r3, r0
 80131e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80131e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80131e8:	4618      	mov	r0, r3
 80131ea:	3710      	adds	r7, #16
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}

080131f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b084      	sub	sp, #16
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
 80131f8:	460b      	mov	r3, r1
 80131fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131fc:	2300      	movs	r3, #0
 80131fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013200:	2300      	movs	r3, #0
 8013202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801320a:	78fa      	ldrb	r2, [r7, #3]
 801320c:	4611      	mov	r1, r2
 801320e:	4618      	mov	r0, r3
 8013210:	f7f2 f9b6 	bl	8005580 <HAL_PCD_EP_SetStall>
 8013214:	4603      	mov	r3, r0
 8013216:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013218:	7bfb      	ldrb	r3, [r7, #15]
 801321a:	4618      	mov	r0, r3
 801321c:	f000 f8e0 	bl	80133e0 <USBD_Get_USB_Status>
 8013220:	4603      	mov	r3, r0
 8013222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013224:	7bbb      	ldrb	r3, [r7, #14]
}
 8013226:	4618      	mov	r0, r3
 8013228:	3710      	adds	r7, #16
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}

0801322e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801322e:	b580      	push	{r7, lr}
 8013230:	b084      	sub	sp, #16
 8013232:	af00      	add	r7, sp, #0
 8013234:	6078      	str	r0, [r7, #4]
 8013236:	460b      	mov	r3, r1
 8013238:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801323a:	2300      	movs	r3, #0
 801323c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801323e:	2300      	movs	r3, #0
 8013240:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013248:	78fa      	ldrb	r2, [r7, #3]
 801324a:	4611      	mov	r1, r2
 801324c:	4618      	mov	r0, r3
 801324e:	f7f2 f9f1 	bl	8005634 <HAL_PCD_EP_ClrStall>
 8013252:	4603      	mov	r3, r0
 8013254:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013256:	7bfb      	ldrb	r3, [r7, #15]
 8013258:	4618      	mov	r0, r3
 801325a:	f000 f8c1 	bl	80133e0 <USBD_Get_USB_Status>
 801325e:	4603      	mov	r3, r0
 8013260:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013262:	7bbb      	ldrb	r3, [r7, #14]
}
 8013264:	4618      	mov	r0, r3
 8013266:	3710      	adds	r7, #16
 8013268:	46bd      	mov	sp, r7
 801326a:	bd80      	pop	{r7, pc}

0801326c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801326c:	b480      	push	{r7}
 801326e:	b085      	sub	sp, #20
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
 8013274:	460b      	mov	r3, r1
 8013276:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801327e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013284:	2b00      	cmp	r3, #0
 8013286:	da08      	bge.n	801329a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013288:	78fb      	ldrb	r3, [r7, #3]
 801328a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801328e:	68fa      	ldr	r2, [r7, #12]
 8013290:	015b      	lsls	r3, r3, #5
 8013292:	4413      	add	r3, r2
 8013294:	332a      	adds	r3, #42	; 0x2a
 8013296:	781b      	ldrb	r3, [r3, #0]
 8013298:	e008      	b.n	80132ac <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801329a:	78fb      	ldrb	r3, [r7, #3]
 801329c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132a0:	68fa      	ldr	r2, [r7, #12]
 80132a2:	015b      	lsls	r3, r3, #5
 80132a4:	4413      	add	r3, r2
 80132a6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80132aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3714      	adds	r7, #20
 80132b0:	46bd      	mov	sp, r7
 80132b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b6:	4770      	bx	lr

080132b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b084      	sub	sp, #16
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
 80132c0:	460b      	mov	r3, r1
 80132c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132c4:	2300      	movs	r3, #0
 80132c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132c8:	2300      	movs	r3, #0
 80132ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80132d2:	78fa      	ldrb	r2, [r7, #3]
 80132d4:	4611      	mov	r1, r2
 80132d6:	4618      	mov	r0, r3
 80132d8:	f7f2 f803 	bl	80052e2 <HAL_PCD_SetAddress>
 80132dc:	4603      	mov	r3, r0
 80132de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132e0:	7bfb      	ldrb	r3, [r7, #15]
 80132e2:	4618      	mov	r0, r3
 80132e4:	f000 f87c 	bl	80133e0 <USBD_Get_USB_Status>
 80132e8:	4603      	mov	r3, r0
 80132ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80132ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	3710      	adds	r7, #16
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}

080132f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80132f6:	b580      	push	{r7, lr}
 80132f8:	b086      	sub	sp, #24
 80132fa:	af00      	add	r7, sp, #0
 80132fc:	60f8      	str	r0, [r7, #12]
 80132fe:	607a      	str	r2, [r7, #4]
 8013300:	603b      	str	r3, [r7, #0]
 8013302:	460b      	mov	r3, r1
 8013304:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013306:	2300      	movs	r3, #0
 8013308:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801330a:	2300      	movs	r3, #0
 801330c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013314:	7af9      	ldrb	r1, [r7, #11]
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	687a      	ldr	r2, [r7, #4]
 801331a:	f7f2 f8f8 	bl	800550e <HAL_PCD_EP_Transmit>
 801331e:	4603      	mov	r3, r0
 8013320:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013322:	7dfb      	ldrb	r3, [r7, #23]
 8013324:	4618      	mov	r0, r3
 8013326:	f000 f85b 	bl	80133e0 <USBD_Get_USB_Status>
 801332a:	4603      	mov	r3, r0
 801332c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801332e:	7dbb      	ldrb	r3, [r7, #22]
}
 8013330:	4618      	mov	r0, r3
 8013332:	3718      	adds	r7, #24
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}

08013338 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b086      	sub	sp, #24
 801333c:	af00      	add	r7, sp, #0
 801333e:	60f8      	str	r0, [r7, #12]
 8013340:	607a      	str	r2, [r7, #4]
 8013342:	603b      	str	r3, [r7, #0]
 8013344:	460b      	mov	r3, r1
 8013346:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013348:	2300      	movs	r3, #0
 801334a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801334c:	2300      	movs	r3, #0
 801334e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013356:	7af9      	ldrb	r1, [r7, #11]
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	687a      	ldr	r2, [r7, #4]
 801335c:	f7f2 f888 	bl	8005470 <HAL_PCD_EP_Receive>
 8013360:	4603      	mov	r3, r0
 8013362:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013364:	7dfb      	ldrb	r3, [r7, #23]
 8013366:	4618      	mov	r0, r3
 8013368:	f000 f83a 	bl	80133e0 <USBD_Get_USB_Status>
 801336c:	4603      	mov	r3, r0
 801336e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013370:	7dbb      	ldrb	r3, [r7, #22]
}
 8013372:	4618      	mov	r0, r3
 8013374:	3718      	adds	r7, #24
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}

0801337a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801337a:	b580      	push	{r7, lr}
 801337c:	b082      	sub	sp, #8
 801337e:	af00      	add	r7, sp, #0
 8013380:	6078      	str	r0, [r7, #4]
 8013382:	460b      	mov	r3, r1
 8013384:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801338c:	78fa      	ldrb	r2, [r7, #3]
 801338e:	4611      	mov	r1, r2
 8013390:	4618      	mov	r0, r3
 8013392:	f7f2 f8a7 	bl	80054e4 <HAL_PCD_EP_GetRxCount>
 8013396:	4603      	mov	r3, r0
}
 8013398:	4618      	mov	r0, r3
 801339a:	3708      	adds	r7, #8
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}

080133a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80133a0:	b480      	push	{r7}
 80133a2:	b083      	sub	sp, #12
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80133a8:	4b03      	ldr	r3, [pc, #12]	; (80133b8 <USBD_static_malloc+0x18>)
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	370c      	adds	r7, #12
 80133ae:	46bd      	mov	sp, r7
 80133b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b4:	4770      	bx	lr
 80133b6:	bf00      	nop
 80133b8:	20004bb8 	.word	0x20004bb8

080133bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80133bc:	b480      	push	{r7}
 80133be:	b083      	sub	sp, #12
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]

}
 80133c4:	bf00      	nop
 80133c6:	370c      	adds	r7, #12
 80133c8:	46bd      	mov	sp, r7
 80133ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ce:	4770      	bx	lr

080133d0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80133d0:	b480      	push	{r7}
 80133d2:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 80133d4:	bf00      	nop
 80133d6:	46bd      	mov	sp, r7
 80133d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133dc:	4770      	bx	lr
	...

080133e0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80133e0:	b480      	push	{r7}
 80133e2:	b085      	sub	sp, #20
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	4603      	mov	r3, r0
 80133e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133ea:	2300      	movs	r3, #0
 80133ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80133ee:	79fb      	ldrb	r3, [r7, #7]
 80133f0:	2b03      	cmp	r3, #3
 80133f2:	d817      	bhi.n	8013424 <USBD_Get_USB_Status+0x44>
 80133f4:	a201      	add	r2, pc, #4	; (adr r2, 80133fc <USBD_Get_USB_Status+0x1c>)
 80133f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133fa:	bf00      	nop
 80133fc:	0801340d 	.word	0x0801340d
 8013400:	08013413 	.word	0x08013413
 8013404:	08013419 	.word	0x08013419
 8013408:	0801341f 	.word	0x0801341f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801340c:	2300      	movs	r3, #0
 801340e:	73fb      	strb	r3, [r7, #15]
    break;
 8013410:	e00b      	b.n	801342a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013412:	2303      	movs	r3, #3
 8013414:	73fb      	strb	r3, [r7, #15]
    break;
 8013416:	e008      	b.n	801342a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013418:	2301      	movs	r3, #1
 801341a:	73fb      	strb	r3, [r7, #15]
    break;
 801341c:	e005      	b.n	801342a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801341e:	2303      	movs	r3, #3
 8013420:	73fb      	strb	r3, [r7, #15]
    break;
 8013422:	e002      	b.n	801342a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013424:	2303      	movs	r3, #3
 8013426:	73fb      	strb	r3, [r7, #15]
    break;
 8013428:	bf00      	nop
  }
  return usb_status;
 801342a:	7bfb      	ldrb	r3, [r7, #15]
}
 801342c:	4618      	mov	r0, r3
 801342e:	3714      	adds	r7, #20
 8013430:	46bd      	mov	sp, r7
 8013432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013436:	4770      	bx	lr

08013438 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8013438:	b480      	push	{r7}
 801343a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801343c:	4b05      	ldr	r3, [pc, #20]	; (8013454 <UTIL_LPM_Init+0x1c>)
 801343e:	2200      	movs	r2, #0
 8013440:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013442:	4b05      	ldr	r3, [pc, #20]	; (8013458 <UTIL_LPM_Init+0x20>)
 8013444:	2200      	movs	r2, #0
 8013446:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8013448:	bf00      	nop
 801344a:	46bd      	mov	sp, r7
 801344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013450:	4770      	bx	lr
 8013452:	bf00      	nop
 8013454:	20004dd8 	.word	0x20004dd8
 8013458:	20004ddc 	.word	0x20004ddc

0801345c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801345c:	b480      	push	{r7}
 801345e:	b087      	sub	sp, #28
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
 8013464:	460b      	mov	r3, r1
 8013466:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013468:	f3ef 8310 	mrs	r3, PRIMASK
 801346c:	613b      	str	r3, [r7, #16]
  return(result);
 801346e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8013470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013472:	b672      	cpsid	i
  
  switch(state)
 8013474:	78fb      	ldrb	r3, [r7, #3]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d009      	beq.n	801348e <UTIL_LPM_SetOffMode+0x32>
 801347a:	2b01      	cmp	r3, #1
 801347c:	d000      	beq.n	8013480 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 801347e:	e00e      	b.n	801349e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8013480:	4b0c      	ldr	r3, [pc, #48]	; (80134b4 <UTIL_LPM_SetOffMode+0x58>)
 8013482:	681a      	ldr	r2, [r3, #0]
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	4313      	orrs	r3, r2
 8013488:	4a0a      	ldr	r2, [pc, #40]	; (80134b4 <UTIL_LPM_SetOffMode+0x58>)
 801348a:	6013      	str	r3, [r2, #0]
      break;
 801348c:	e007      	b.n	801349e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	43da      	mvns	r2, r3
 8013492:	4b08      	ldr	r3, [pc, #32]	; (80134b4 <UTIL_LPM_SetOffMode+0x58>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	4013      	ands	r3, r2
 8013498:	4a06      	ldr	r2, [pc, #24]	; (80134b4 <UTIL_LPM_SetOffMode+0x58>)
 801349a:	6013      	str	r3, [r2, #0]
      break;
 801349c:	bf00      	nop
 801349e:	697b      	ldr	r3, [r7, #20]
 80134a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80134a8:	bf00      	nop
 80134aa:	371c      	adds	r7, #28
 80134ac:	46bd      	mov	sp, r7
 80134ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b2:	4770      	bx	lr
 80134b4:	20004ddc 	.word	0x20004ddc

080134b8 <__libc_init_array>:
 80134b8:	b570      	push	{r4, r5, r6, lr}
 80134ba:	4e0d      	ldr	r6, [pc, #52]	; (80134f0 <__libc_init_array+0x38>)
 80134bc:	4c0d      	ldr	r4, [pc, #52]	; (80134f4 <__libc_init_array+0x3c>)
 80134be:	1ba4      	subs	r4, r4, r6
 80134c0:	10a4      	asrs	r4, r4, #2
 80134c2:	2500      	movs	r5, #0
 80134c4:	42a5      	cmp	r5, r4
 80134c6:	d109      	bne.n	80134dc <__libc_init_array+0x24>
 80134c8:	4e0b      	ldr	r6, [pc, #44]	; (80134f8 <__libc_init_array+0x40>)
 80134ca:	4c0c      	ldr	r4, [pc, #48]	; (80134fc <__libc_init_array+0x44>)
 80134cc:	f000 f82c 	bl	8013528 <_init>
 80134d0:	1ba4      	subs	r4, r4, r6
 80134d2:	10a4      	asrs	r4, r4, #2
 80134d4:	2500      	movs	r5, #0
 80134d6:	42a5      	cmp	r5, r4
 80134d8:	d105      	bne.n	80134e6 <__libc_init_array+0x2e>
 80134da:	bd70      	pop	{r4, r5, r6, pc}
 80134dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80134e0:	4798      	blx	r3
 80134e2:	3501      	adds	r5, #1
 80134e4:	e7ee      	b.n	80134c4 <__libc_init_array+0xc>
 80134e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80134ea:	4798      	blx	r3
 80134ec:	3501      	adds	r5, #1
 80134ee:	e7f2      	b.n	80134d6 <__libc_init_array+0x1e>
 80134f0:	08013a48 	.word	0x08013a48
 80134f4:	08013a48 	.word	0x08013a48
 80134f8:	08013a48 	.word	0x08013a48
 80134fc:	08013a4c 	.word	0x08013a4c

08013500 <memcpy>:
 8013500:	b510      	push	{r4, lr}
 8013502:	1e43      	subs	r3, r0, #1
 8013504:	440a      	add	r2, r1
 8013506:	4291      	cmp	r1, r2
 8013508:	d100      	bne.n	801350c <memcpy+0xc>
 801350a:	bd10      	pop	{r4, pc}
 801350c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013510:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013514:	e7f7      	b.n	8013506 <memcpy+0x6>

08013516 <memset>:
 8013516:	4402      	add	r2, r0
 8013518:	4603      	mov	r3, r0
 801351a:	4293      	cmp	r3, r2
 801351c:	d100      	bne.n	8013520 <memset+0xa>
 801351e:	4770      	bx	lr
 8013520:	f803 1b01 	strb.w	r1, [r3], #1
 8013524:	e7f9      	b.n	801351a <memset+0x4>
	...

08013528 <_init>:
 8013528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801352a:	bf00      	nop
 801352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801352e:	bc08      	pop	{r3}
 8013530:	469e      	mov	lr, r3
 8013532:	4770      	bx	lr

08013534 <_fini>:
 8013534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013536:	bf00      	nop
 8013538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801353a:	bc08      	pop	{r3}
 801353c:	469e      	mov	lr, r3
 801353e:	4770      	bx	lr

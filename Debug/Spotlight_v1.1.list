
Spotlight_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013734  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  08013874  08013874  00023874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013dc8  08013dc8  00023dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08013dcc  08013dcc  00023dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001bc  20000004  08013dd0  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  200001c0  08013f8c  000301c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  2000025c  08014025  0003025c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00006518  20000270  08014036  00030270  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20006788  08014036  00036788  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003026d  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000000b8  20030028  20030028  00040000  2**2
                  ALLOC
 13 MB_MEM2       00000a77  200300e0  200300e0  00040000  2**2
                  ALLOC
 14 .debug_info   0005cac9  00000000  00000000  0003029d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000a402  00000000  00000000  0008cd66  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000038a0  00000000  00000000  00097168  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003448  00000000  00000000  0009aa08  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038b87  00000000  00000000  0009de50  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0003a9a2  00000000  00000000  000d69d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0011660a  00000000  00000000  00111379  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00227983  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e774  00000000  00000000  00227a00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000270 	.word	0x20000270
 800015c:	00000000 	.word	0x00000000
 8000160:	0801385c 	.word	0x0801385c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000274 	.word	0x20000274
 800017c:	0801385c 	.word	0x0801385c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>:
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
//Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
//                                      int motor_pin_3, int motor_pin_4)
Stepper::Stepper(int32_t number_of_steps, 	GPIO_TypeDef* motor_pin_1_port, uint16_t motor_pin_1,
 8000194:	b480      	push	{r7}
 8000196:	b085      	sub	sp, #20
 8000198:	af00      	add	r7, sp, #0
 800019a:	60f8      	str	r0, [r7, #12]
 800019c:	60b9      	str	r1, [r7, #8]
 800019e:	607a      	str	r2, [r7, #4]
 80001a0:	807b      	strh	r3, [r7, #2]
											GPIO_TypeDef* motor_pin_2_port, uint16_t motor_pin_2,
											GPIO_TypeDef* motor_pin_3_port, uint16_t motor_pin_3,
											GPIO_TypeDef* motor_pin_4_port, uint16_t motor_pin_4,
											volatile uint16_t* stop_sensor, uint8_t motor_direction)
{
  this->step_number = 0;    // which step the motor is on
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	2200      	movs	r2, #0
 80001a6:	611a      	str	r2, [r3, #16]
  this->direction = 0;      // motor direction
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	2200      	movs	r2, #0
 80001b2:	649a      	str	r2, [r3, #72]	; 0x48
  this->number_of_steps = number_of_steps; // total number of steps for this motor
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	68ba      	ldr	r2, [r7, #8]
 80001b8:	609a      	str	r2, [r3, #8]

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	887a      	ldrh	r2, [r7, #2]
 80001be:	841a      	strh	r2, [r3, #32]
  this->motor_pin_2 = motor_pin_2;
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	8bba      	ldrh	r2, [r7, #28]
 80001c4:	845a      	strh	r2, [r3, #34]	; 0x22
  this->motor_pin_3 = motor_pin_3;
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80001ca:	849a      	strh	r2, [r3, #36]	; 0x24
  this->motor_pin_4 = motor_pin_4;
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80001d0:	84da      	strh	r2, [r3, #38]	; 0x26

  // Arduino ports for the motor control pin connection:
  this->motor_pin_1_port = motor_pin_1_port;
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	687a      	ldr	r2, [r7, #4]
 80001d6:	62da      	str	r2, [r3, #44]	; 0x2c
  this->motor_pin_2_port = motor_pin_2_port;
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	69ba      	ldr	r2, [r7, #24]
 80001dc:	631a      	str	r2, [r3, #48]	; 0x30
  this->motor_pin_3_port = motor_pin_3_port;
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	6a3a      	ldr	r2, [r7, #32]
 80001e2:	635a      	str	r2, [r3, #52]	; 0x34
  this->motor_pin_4_port = motor_pin_4_port;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80001e8:	639a      	str	r2, [r3, #56]	; 0x38

  this->motor_dir = motor_direction;
 80001ea:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
//  pinMode(this->motor_pin_2, OUTPUT);
//  pinMode(this->motor_pin_3, OUTPUT);
//  pinMode(this->motor_pin_4, OUTPUT);

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	2200      	movs	r2, #0
 80001f8:	851a      	strh	r2, [r3, #40]	; 0x28

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	2204      	movs	r2, #4
 80001fe:	60da      	str	r2, [r3, #12]

  // pin that is continously updated via DMA on the magnetic end stop value (0 means the magnet is directly aligned with the sensor)
  this->end_stop = stop_sensor;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000204:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	4618      	mov	r0, r3
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <_ZN7Stepper8setSpeedEl>:

/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	689b      	ldr	r3, [r3, #8]
 8000222:	4a07      	ldr	r2, [pc, #28]	; (8000240 <_ZN7Stepper8setSpeedEl+0x2c>)
 8000224:	fb92 f2f3 	sdiv	r2, r2, r3
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	fb92 f3f3 	sdiv	r3, r2, r3
 800022e:	461a      	mov	r2, r3
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	605a      	str	r2, [r3, #4]
}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	03938700 	.word	0x03938700

08000244 <_ZN7Stepper12setStepBoundEl>:
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */

void Stepper::setStepBound(int32_t max_step){
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
	this->max_step = max_step;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	615a      	str	r2, [r3, #20]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr

08000260 <_ZN7Stepper4stepEi>:

uint32_t Stepper::step(int steps_to_move)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
	// break if requested steps exceed maximum range
	if( ((this->step_tracker + steps_to_move) > this->max_step) || (this->step_tracker - steps_to_move) < 0 ){
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	699a      	ldr	r2, [r3, #24]
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	4413      	add	r3, r2
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	6952      	ldr	r2, [r2, #20]
 8000276:	4293      	cmp	r3, r2
 8000278:	d901      	bls.n	800027e <_ZN7Stepper4stepEi+0x1e>
		return 0;
 800027a:	2300      	movs	r3, #0
 800027c:	e07f      	b.n	800037e <_ZN7Stepper4stepEi+0x11e>
	}

	this->step_tracker += steps_to_move;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	699a      	ldr	r2, [r3, #24]
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	441a      	add	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	619a      	str	r2, [r3, #24]

	// compensate in case motor direction is flipped
	steps_to_move = steps_to_move * this->motor_dir;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 8000290:	461a      	mov	r2, r3
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	fb02 f303 	mul.w	r3, r2, r3
 8000298:	603b      	str	r3, [r7, #0]

	// if requesting to go to 0th position, hone axis to limit drift
	if(this->step_tracker == 0){
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d103      	bne.n	80002aa <_ZN7Stepper4stepEi+0x4a>
		honeAxis();
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f000 fb26 	bl	80008f4 <_ZN7Stepper8honeAxisEv>
 80002a8:	e068      	b.n	800037c <_ZN7Stepper4stepEi+0x11c>
	}
	else{
		uint32_t steps_left = abs(steps_to_move);  // how many steps to take
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	bfb8      	it	lt
 80002b0:	425b      	neglt	r3, r3
 80002b2:	60fb      	str	r3, [r7, #12]
	//	uint32_t steps_left;
	  // determine direction based on whether steps_to_mode is + or -:
	  if (steps_to_move > 0) { this->direction = 1; }
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	dd02      	ble.n	80002c0 <_ZN7Stepper4stepEi+0x60>
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2201      	movs	r2, #1
 80002be:	601a      	str	r2, [r3, #0]
	  if (steps_to_move < 0) { this->direction = 0; }
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	da02      	bge.n	80002cc <_ZN7Stepper4stepEi+0x6c>
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]


	  // decrement the number of steps, moving one step each time:
	  while (steps_left > 0)
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d054      	beq.n	800037c <_ZN7Stepper4stepEi+0x11c>
	  {
			  //    unsigned long now = micros();
		  uint32_t now = __HAL_TIM_GET_COUNTER(&htim2);
 80002d2:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <_ZN7Stepper4stepEi+0x128>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d8:	60bb      	str	r3, [r7, #8]
		// move only if the appropriate delay has passed:
		 if (now - this->last_step_time >= this->step_delay)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002de:	68ba      	ldr	r2, [r7, #8]
 80002e0:	1ad2      	subs	r2, r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d3f0      	bcc.n	80002cc <_ZN7Stepper4stepEi+0x6c>
		{
		  // get the timeStamp of when you stepped:
		  this->last_step_time = now;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	68ba      	ldr	r2, [r7, #8]
 80002ee:	649a      	str	r2, [r3, #72]	; 0x48
		  // increment or decrement the step number,
		  // depending on direction:
		  if (this->direction == 1)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d10e      	bne.n	8000316 <_ZN7Stepper4stepEi+0xb6>
		  {
			this->step_number++;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	1c5a      	adds	r2, r3, #1
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	611a      	str	r2, [r3, #16]
			if (this->step_number == this->number_of_steps) {
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	691a      	ldr	r2, [r3, #16]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	429a      	cmp	r2, r3
 800030c:	d110      	bne.n	8000330 <_ZN7Stepper4stepEi+0xd0>
			  this->step_number = 0;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
 8000314:	e00c      	b.n	8000330 <_ZN7Stepper4stepEi+0xd0>
			}
		  }
		  else
		  {
			if (this->step_number == 0) {
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	691b      	ldr	r3, [r3, #16]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d103      	bne.n	8000326 <_ZN7Stepper4stepEi+0xc6>
			  this->step_number = this->number_of_steps;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	689a      	ldr	r2, [r3, #8]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	611a      	str	r2, [r3, #16]
			}
			this->step_number--;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	691b      	ldr	r3, [r3, #16]
 800032a:	1e5a      	subs	r2, r3, #1
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	611a      	str	r2, [r3, #16]
		  }
		  // decrement the steps left:
		  steps_left--;
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	3b01      	subs	r3, #1
 8000334:	60fb      	str	r3, [r7, #12]
		  // step the motor to step number 0, 1, ..., {3 or 10}
		  if (this->pin_count == 5)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	68db      	ldr	r3, [r3, #12]
 800033a:	2b05      	cmp	r3, #5
 800033c:	d110      	bne.n	8000360 <_ZN7Stepper4stepEi+0x100>
			stepMotor(this->step_number % 10);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	691a      	ldr	r2, [r3, #16]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <_ZN7Stepper4stepEi+0x12c>)
 8000344:	fb83 1302 	smull	r1, r3, r3, r2
 8000348:	1099      	asrs	r1, r3, #2
 800034a:	17d3      	asrs	r3, r2, #31
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	460b      	mov	r3, r1
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	440b      	add	r3, r1
 8000354:	005b      	lsls	r3, r3, #1
 8000356:	1ad1      	subs	r1, r2, r3
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f000 f819 	bl	8000390 <_ZN7Stepper9stepMotorEi>
 800035e:	e7b5      	b.n	80002cc <_ZN7Stepper4stepEi+0x6c>
		  else
			stepMotor(this->step_number % 4);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	425a      	negs	r2, r3
 8000366:	f003 0303 	and.w	r3, r3, #3
 800036a:	f002 0203 	and.w	r2, r2, #3
 800036e:	bf58      	it	pl
 8000370:	4253      	negpl	r3, r2
 8000372:	4619      	mov	r1, r3
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f000 f80b 	bl	8000390 <_ZN7Stepper9stepMotorEi>
	  while (steps_left > 0)
 800037a:	e7a7      	b.n	80002cc <_ZN7Stepper4stepEi+0x6c>
		}
	  }
	}
  return 1;
 800037c:	2301      	movs	r3, #1
}
 800037e:	4618      	mov	r0, r3
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20004f6c 	.word	0x20004f6c
 800038c:	66666667 	.word	0x66666667

08000390 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  if (this->pin_count == 2) {
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d152      	bne.n	8000448 <_ZN7Stepper9stepMotorEi+0xb8>
    switch (thisStep) {
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	2b03      	cmp	r3, #3
 80003a6:	d84f      	bhi.n	8000448 <_ZN7Stepper9stepMotorEi+0xb8>
 80003a8:	a201      	add	r2, pc, #4	; (adr r2, 80003b0 <_ZN7Stepper9stepMotorEi+0x20>)
 80003aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ae:	bf00      	nop
 80003b0:	080003c1 	.word	0x080003c1
 80003b4:	080003e3 	.word	0x080003e3
 80003b8:	08000405 	.word	0x08000405
 80003bc:	08000427 	.word	0x08000427
      case 0:  // 01
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	8c1b      	ldrh	r3, [r3, #32]
 80003c8:	2200      	movs	r2, #0
 80003ca:	4619      	mov	r1, r3
 80003cc:	f004 fd44 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80003d8:	2201      	movs	r2, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	f004 fd3c 	bl	8004e58 <HAL_GPIO_WritePin>
      break;
 80003e0:	e032      	b.n	8000448 <_ZN7Stepper9stepMotorEi+0xb8>
      case 1:  // 11
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	8c1b      	ldrh	r3, [r3, #32]
 80003ea:	2201      	movs	r2, #1
 80003ec:	4619      	mov	r1, r3
 80003ee:	f004 fd33 	bl	8004e58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80003fa:	2201      	movs	r2, #1
 80003fc:	4619      	mov	r1, r3
 80003fe:	f004 fd2b 	bl	8004e58 <HAL_GPIO_WritePin>
      break;
 8000402:	e021      	b.n	8000448 <_ZN7Stepper9stepMotorEi+0xb8>
      case 2:  // 10
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	8c1b      	ldrh	r3, [r3, #32]
 800040c:	2201      	movs	r2, #1
 800040e:	4619      	mov	r1, r3
 8000410:	f004 fd22 	bl	8004e58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800041c:	2200      	movs	r2, #0
 800041e:	4619      	mov	r1, r3
 8000420:	f004 fd1a 	bl	8004e58 <HAL_GPIO_WritePin>
      break;
 8000424:	e010      	b.n	8000448 <_ZN7Stepper9stepMotorEi+0xb8>
      case 3:  // 00
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	8c1b      	ldrh	r3, [r3, #32]
 800042e:	2200      	movs	r2, #0
 8000430:	4619      	mov	r1, r3
 8000432:	f004 fd11 	bl	8004e58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800043e:	2200      	movs	r2, #0
 8000440:	4619      	mov	r1, r3
 8000442:	f004 fd09 	bl	8004e58 <HAL_GPIO_WritePin>
      break;
 8000446:	bf00      	nop
    }
  }
  if (this->pin_count == 4) {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	2b04      	cmp	r3, #4
 800044e:	f040 8093 	bne.w	8000578 <_ZN7Stepper9stepMotorEi+0x1e8>
    switch (thisStep) {
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	2b03      	cmp	r3, #3
 8000456:	f200 808f 	bhi.w	8000578 <_ZN7Stepper9stepMotorEi+0x1e8>
 800045a:	a201      	add	r2, pc, #4	; (adr r2, 8000460 <_ZN7Stepper9stepMotorEi+0xd0>)
 800045c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000460:	08000471 	.word	0x08000471
 8000464:	080004b3 	.word	0x080004b3
 8000468:	080004f5 	.word	0x080004f5
 800046c:	08000537 	.word	0x08000537
      case 0:  // 1010
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	8c1b      	ldrh	r3, [r3, #32]
 8000478:	2201      	movs	r2, #1
 800047a:	4619      	mov	r1, r3
 800047c:	f004 fcec 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000488:	2200      	movs	r2, #0
 800048a:	4619      	mov	r1, r3
 800048c:	f004 fce4 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000498:	2201      	movs	r2, #1
 800049a:	4619      	mov	r1, r3
 800049c:	f004 fcdc 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80004a8:	2200      	movs	r2, #0
 80004aa:	4619      	mov	r1, r3
 80004ac:	f004 fcd4 	bl	8004e58 <HAL_GPIO_WritePin>
      break;
 80004b0:	e062      	b.n	8000578 <_ZN7Stepper9stepMotorEi+0x1e8>
      case 1:  // 0110
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	8c1b      	ldrh	r3, [r3, #32]
 80004ba:	2200      	movs	r2, #0
 80004bc:	4619      	mov	r1, r3
 80004be:	f004 fccb 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80004ca:	2201      	movs	r2, #1
 80004cc:	4619      	mov	r1, r3
 80004ce:	f004 fcc3 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80004da:	2201      	movs	r2, #1
 80004dc:	4619      	mov	r1, r3
 80004de:	f004 fcbb 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80004ea:	2200      	movs	r2, #0
 80004ec:	4619      	mov	r1, r3
 80004ee:	f004 fcb3 	bl	8004e58 <HAL_GPIO_WritePin>
      break;
 80004f2:	e041      	b.n	8000578 <_ZN7Stepper9stepMotorEi+0x1e8>
      case 2:  //0101
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	8c1b      	ldrh	r3, [r3, #32]
 80004fc:	2200      	movs	r2, #0
 80004fe:	4619      	mov	r1, r3
 8000500:	f004 fcaa 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800050c:	2201      	movs	r2, #1
 800050e:	4619      	mov	r1, r3
 8000510:	f004 fca2 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800051c:	2200      	movs	r2, #0
 800051e:	4619      	mov	r1, r3
 8000520:	f004 fc9a 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800052c:	2201      	movs	r2, #1
 800052e:	4619      	mov	r1, r3
 8000530:	f004 fc92 	bl	8004e58 <HAL_GPIO_WritePin>
      break;
 8000534:	e020      	b.n	8000578 <_ZN7Stepper9stepMotorEi+0x1e8>
      case 3:  //1001
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	8c1b      	ldrh	r3, [r3, #32]
 800053e:	2201      	movs	r2, #1
 8000540:	4619      	mov	r1, r3
 8000542:	f004 fc89 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f004 fc81 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800055e:	2200      	movs	r2, #0
 8000560:	4619      	mov	r1, r3
 8000562:	f004 fc79 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	f004 fc71 	bl	8004e58 <HAL_GPIO_WritePin>
      break;
 8000576:	bf00      	nop
    }
  }

  if (this->pin_count == 5) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	2b05      	cmp	r3, #5
 800057e:	f040 81b5 	bne.w	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
    switch (thisStep) {
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	2b09      	cmp	r3, #9
 8000586:	f200 81b1 	bhi.w	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
 800058a:	a201      	add	r2, pc, #4	; (adr r2, 8000590 <_ZN7Stepper9stepMotorEi+0x200>)
 800058c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000590:	080005b9 	.word	0x080005b9
 8000594:	0800060b 	.word	0x0800060b
 8000598:	0800065d 	.word	0x0800065d
 800059c:	080006af 	.word	0x080006af
 80005a0:	08000701 	.word	0x08000701
 80005a4:	08000753 	.word	0x08000753
 80005a8:	080007a5 	.word	0x080007a5
 80005ac:	080007f7 	.word	0x080007f7
 80005b0:	08000849 	.word	0x08000849
 80005b4:	0800089b 	.word	0x0800089b
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	8c1b      	ldrh	r3, [r3, #32]
 80005c0:	2200      	movs	r2, #0
 80005c2:	4619      	mov	r1, r3
 80005c4:	f004 fc48 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	f004 fc40 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	f004 fc38 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80005f0:	2200      	movs	r2, #0
 80005f2:	4619      	mov	r1, r3
 80005f4:	f004 fc30 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	f004 fc28 	bl	8004e58 <HAL_GPIO_WritePin>
        break;
 8000608:	e170      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	8c1b      	ldrh	r3, [r3, #32]
 8000612:	2200      	movs	r2, #0
 8000614:	4619      	mov	r1, r3
 8000616:	f004 fc1f 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000622:	2201      	movs	r2, #1
 8000624:	4619      	mov	r1, r3
 8000626:	f004 fc17 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000632:	2200      	movs	r2, #0
 8000634:	4619      	mov	r1, r3
 8000636:	f004 fc0f 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000642:	2200      	movs	r2, #0
 8000644:	4619      	mov	r1, r3
 8000646:	f004 fc07 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000652:	2201      	movs	r2, #1
 8000654:	4619      	mov	r1, r3
 8000656:	f004 fbff 	bl	8004e58 <HAL_GPIO_WritePin>
        break;
 800065a:	e147      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	8c1b      	ldrh	r3, [r3, #32]
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	f004 fbf6 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000674:	2201      	movs	r2, #1
 8000676:	4619      	mov	r1, r3
 8000678:	f004 fbee 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000684:	2200      	movs	r2, #0
 8000686:	4619      	mov	r1, r3
 8000688:	f004 fbe6 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000694:	2201      	movs	r2, #1
 8000696:	4619      	mov	r1, r3
 8000698:	f004 fbde 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	f004 fbd6 	bl	8004e58 <HAL_GPIO_WritePin>
        break;
 80006ac:	e11e      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	8c1b      	ldrh	r3, [r3, #32]
 80006b6:	2200      	movs	r2, #0
 80006b8:	4619      	mov	r1, r3
 80006ba:	f004 fbcd 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80006c6:	2201      	movs	r2, #1
 80006c8:	4619      	mov	r1, r3
 80006ca:	f004 fbc5 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80006d6:	2200      	movs	r2, #0
 80006d8:	4619      	mov	r1, r3
 80006da:	f004 fbbd 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80006e6:	2201      	movs	r2, #1
 80006e8:	4619      	mov	r1, r3
 80006ea:	f004 fbb5 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	f004 fbad 	bl	8004e58 <HAL_GPIO_WritePin>
        break;
 80006fe:	e0f5      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	8c1b      	ldrh	r3, [r3, #32]
 8000708:	2201      	movs	r2, #1
 800070a:	4619      	mov	r1, r3
 800070c:	f004 fba4 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000718:	2201      	movs	r2, #1
 800071a:	4619      	mov	r1, r3
 800071c:	f004 fb9c 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	f004 fb94 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000738:	2201      	movs	r2, #1
 800073a:	4619      	mov	r1, r3
 800073c:	f004 fb8c 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000748:	2200      	movs	r2, #0
 800074a:	4619      	mov	r1, r3
 800074c:	f004 fb84 	bl	8004e58 <HAL_GPIO_WritePin>
        break;
 8000750:	e0cc      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	8c1b      	ldrh	r3, [r3, #32]
 800075a:	2201      	movs	r2, #1
 800075c:	4619      	mov	r1, r3
 800075e:	f004 fb7b 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	f004 fb73 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800077a:	2200      	movs	r2, #0
 800077c:	4619      	mov	r1, r3
 800077e:	f004 fb6b 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	f004 fb63 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800079a:	2200      	movs	r2, #0
 800079c:	4619      	mov	r1, r3
 800079e:	f004 fb5b 	bl	8004e58 <HAL_GPIO_WritePin>
        break;
 80007a2:	e0a3      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	8c1b      	ldrh	r3, [r3, #32]
 80007ac:	2201      	movs	r2, #1
 80007ae:	4619      	mov	r1, r3
 80007b0:	f004 fb52 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	f004 fb4a 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	f004 fb42 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80007dc:	2201      	movs	r2, #1
 80007de:	4619      	mov	r1, r3
 80007e0:	f004 fb3a 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80007ec:	2200      	movs	r2, #0
 80007ee:	4619      	mov	r1, r3
 80007f0:	f004 fb32 	bl	8004e58 <HAL_GPIO_WritePin>
        break;
 80007f4:	e07a      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	8c1b      	ldrh	r3, [r3, #32]
 80007fe:	2201      	movs	r2, #1
 8000800:	4619      	mov	r1, r3
 8000802:	f004 fb29 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	f004 fb21 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800081e:	2201      	movs	r2, #1
 8000820:	4619      	mov	r1, r3
 8000822:	f004 fb19 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	f004 fb11 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800083e:	2200      	movs	r2, #0
 8000840:	4619      	mov	r1, r3
 8000842:	f004 fb09 	bl	8004e58 <HAL_GPIO_WritePin>
        break;
 8000846:	e051      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	8c1b      	ldrh	r3, [r3, #32]
 8000850:	2201      	movs	r2, #1
 8000852:	4619      	mov	r1, r3
 8000854:	f004 fb00 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000860:	2200      	movs	r2, #0
 8000862:	4619      	mov	r1, r3
 8000864:	f004 faf8 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000870:	2201      	movs	r2, #1
 8000872:	4619      	mov	r1, r3
 8000874:	f004 faf0 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000880:	2200      	movs	r2, #0
 8000882:	4619      	mov	r1, r3
 8000884:	f004 fae8 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000890:	2201      	movs	r2, #1
 8000892:	4619      	mov	r1, r3
 8000894:	f004 fae0 	bl	8004e58 <HAL_GPIO_WritePin>
        break;
 8000898:	e028      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	8c1b      	ldrh	r3, [r3, #32]
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	f004 fad7 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80008b2:	2200      	movs	r2, #0
 80008b4:	4619      	mov	r1, r3
 80008b6:	f004 facf 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008c2:	2201      	movs	r2, #1
 80008c4:	4619      	mov	r1, r3
 80008c6:	f004 fac7 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80008d2:	2200      	movs	r2, #0
 80008d4:	4619      	mov	r1, r3
 80008d6:	f004 fabf 	bl	8004e58 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80008e2:	2201      	movs	r2, #1
 80008e4:	4619      	mov	r1, r3
 80008e6:	f004 fab7 	bl	8004e58 <HAL_GPIO_WritePin>
        break;
 80008ea:	bf00      	nop
    }
  }
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <_ZN7Stepper8honeAxisEv>:

void Stepper::honeAxis(void){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

	// set step tracker to max step to bypass over step protection in step()
	this->step_tracker = this->max_step;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	461a      	mov	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	619a      	str	r2, [r3, #24]

	while(*(this->end_stop) != 0){
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	b29b      	uxth	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	bf14      	ite	ne
 8000912:	2301      	movne	r3, #1
 8000914:	2300      	moveq	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d008      	beq.n	800092e <_ZN7Stepper8honeAxisEv+0x3a>
		// give time for the end stop value to be updated by the ADC via DMA
		//todo: optimize this to make this quicker (i.e., increase ADC sample frequency)
		HAL_Delay(1);
 800091c:	2001      	movs	r0, #1
 800091e:	f002 fa7b 	bl	8002e18 <HAL_Delay>



		step(-1);
 8000922:	f04f 31ff 	mov.w	r1, #4294967295
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff fc9a 	bl	8000260 <_ZN7Stepper4stepEi>
	while(*(this->end_stop) != 0){
 800092c:	e7eb      	b.n	8000906 <_ZN7Stepper8honeAxisEv+0x12>
	}

	step_tracker = 0;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <_ZN7Stepper9setAbsPosEl>:

void Stepper::setAbsPos(int32_t step_cnt){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	this->steps_to_move = step_cnt - this->step_tracker;
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	1ad2      	subs	r2, r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	61da      	str	r2, [r3, #28]
	step(this->steps_to_move);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4619      	mov	r1, r3
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fc81 	bl	8000260 <_ZN7Stepper4stepEi>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000966:	b480      	push	{r7}
 8000968:	b085      	sub	sp, #20
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800096e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4313      	orrs	r3, r2
 800097c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800097e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4013      	ands	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800099e:	463b      	mov	r3, r7
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009ae:	4b3f      	ldr	r3, [pc, #252]	; (8000aac <MX_ADC1_Init+0x114>)
 80009b0:	4a3f      	ldr	r2, [pc, #252]	; (8000ab0 <MX_ADC1_Init+0x118>)
 80009b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80009b4:	4b3d      	ldr	r3, [pc, #244]	; (8000aac <MX_ADC1_Init+0x114>)
 80009b6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80009ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009bc:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <MX_ADC1_Init+0x114>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009c2:	4b3a      	ldr	r3, [pc, #232]	; (8000aac <MX_ADC1_Init+0x114>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009c8:	4b38      	ldr	r3, [pc, #224]	; (8000aac <MX_ADC1_Init+0x114>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009ce:	4b37      	ldr	r3, [pc, #220]	; (8000aac <MX_ADC1_Init+0x114>)
 80009d0:	2208      	movs	r2, #8
 80009d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009d4:	4b35      	ldr	r3, [pc, #212]	; (8000aac <MX_ADC1_Init+0x114>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009da:	4b34      	ldr	r3, [pc, #208]	; (8000aac <MX_ADC1_Init+0x114>)
 80009dc:	2201      	movs	r2, #1
 80009de:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80009e0:	4b32      	ldr	r3, [pc, #200]	; (8000aac <MX_ADC1_Init+0x114>)
 80009e2:	2204      	movs	r2, #4
 80009e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e6:	4b31      	ldr	r3, [pc, #196]	; (8000aac <MX_ADC1_Init+0x114>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ee:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <MX_ADC1_Init+0x114>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f4:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <MX_ADC1_Init+0x114>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009fa:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <MX_ADC1_Init+0x114>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a0a:	4b28      	ldr	r3, [pc, #160]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a12:	4826      	ldr	r0, [pc, #152]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a14:	f002 fc0a 	bl	800322c <HAL_ADC_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a1e:	f001 fbf9 	bl	8002214 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a22:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <MX_ADC1_Init+0x11c>)
 8000a24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a26:	2306      	movs	r3, #6
 8000a28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a2e:	237f      	movs	r3, #127	; 0x7f
 8000a30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a32:	2304      	movs	r3, #4
 8000a34:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481b      	ldr	r0, [pc, #108]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a40:	f002 ffa0 	bl	8003984 <HAL_ADC_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000a4a:	f001 fbe3 	bl	8002214 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_ADC1_Init+0x120>)
 8000a50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a52:	230c      	movs	r3, #12
 8000a54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4814      	ldr	r0, [pc, #80]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a5c:	f002 ff92 	bl	8003984 <HAL_ADC_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000a66:	f001 fbd5 	bl	8002214 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_ADC1_Init+0x124>)
 8000a6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a6e:	2312      	movs	r3, #18
 8000a70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a72:	463b      	mov	r3, r7
 8000a74:	4619      	mov	r1, r3
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a78:	f002 ff84 	bl	8003984 <HAL_ADC_ConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000a82:	f001 fbc7 	bl	8002214 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_ADC1_Init+0x128>)
 8000a88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a8a:	2318      	movs	r3, #24
 8000a8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8e:	463b      	mov	r3, r7
 8000a90:	4619      	mov	r1, r3
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a94:	f002 ff76 	bl	8003984 <HAL_ADC_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000a9e:	f001 fbb9 	bl	8002214 <Error_Handler>
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20004de0 	.word	0x20004de0
 8000ab0:	50040000 	.word	0x50040000
 8000ab4:	04300002 	.word	0x04300002
 8000ab8:	08600004 	.word	0x08600004
 8000abc:	0c900008 	.word	0x0c900008
 8000ac0:	1d500080 	.word	0x1d500080

08000ac4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a2e      	ldr	r2, [pc, #184]	; (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d155      	bne.n	8000b92 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ae6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000aea:	f7ff ff3c 	bl	8000966 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	2004      	movs	r0, #4
 8000af0:	f7ff ff39 	bl	8000966 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	2001      	movs	r0, #1
 8000af6:	f7ff ff36 	bl	8000966 <LL_AHB2_GRP1_EnableClock>
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = MAG_BASE_Pin|MAG_LIGHT_Pin|MAIN_BOARD_TEMP_Pin;
 8000afa:	2307      	movs	r3, #7
 8000afc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afe:	2303      	movs	r3, #3
 8000b00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4824      	ldr	r0, [pc, #144]	; (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000b0e:	f004 f833 	bl	8004b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_TEMP_Pin;
 8000b12:	2304      	movs	r3, #4
 8000b14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b16:	2303      	movs	r3, #3
 8000b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4619      	mov	r1, r3
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b28:	f004 f826 	bl	8004b78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b30:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b34:	2205      	movs	r2, #5
 8000b36:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b50:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b66:	480f      	ldr	r0, [pc, #60]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b68:	f003 fd92 	bl	8004690 <HAL_DMA_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000b72:	f001 fb4f 	bl	8002214 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b7a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b7c:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2105      	movs	r1, #5
 8000b86:	2012      	movs	r0, #18
 8000b88:	f003 fd2b 	bl	80045e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000b8c:	2012      	movs	r0, #18
 8000b8e:	f003 fd42 	bl	8004616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b92:	bf00      	nop
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	50040000 	.word	0x50040000
 8000ba0:	48000800 	.word	0x48000800
 8000ba4:	20004e44 	.word	0x20004e44
 8000ba8:	40020008 	.word	0x40020008

08000bac <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bba:	f023 0207 	bic.w	r2, r3, #7
 8000bbe:	4905      	ldr	r1, [pc, #20]	; (8000bd4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	58000400 	.word	0x58000400

08000bd8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	608b      	str	r3, [r1, #8]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000c04:	f000 f80a 	bl	8000c1c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000c08:	4903      	ldr	r1, [pc, #12]	; (8000c18 <APPE_Init+0x18>)
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 ff70 	bl	8001af0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000c10:	f000 f812 	bl	8000c38 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000c14:	bf00      	nop
}
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20004eb0 	.word	0x20004eb0

08000c1c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000c20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c24:	f7ff ffd8 	bl	8000bd8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000c28:	f012 fda0 	bl	801376c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000c2c:	2004      	movs	r0, #4
 8000c2e:	f7ff ffbd 	bl	8000bac <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000c32:	bf00      	nop
}
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000c3e:	f00b fa8d 	bl	800c15c <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8000c42:	2000      	movs	r0, #0
 8000c44:	f00d f936 	bl	800deb4 <osMutexNew>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <appe_Tl_Init+0x70>)
 8000c4c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2001      	movs	r0, #1
 8000c54:	f00d fa76 	bl	800e144 <osSemaphoreNew>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <appe_Tl_Init+0x74>)
 8000c5c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8000c5e:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <appe_Tl_Init+0x78>)
 8000c60:	2100      	movs	r1, #0
 8000c62:	4814      	ldr	r0, [pc, #80]	; (8000cb4 <appe_Tl_Init+0x7c>)
 8000c64:	f00c ff5c 	bl	800db20 <osThreadNew>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <appe_Tl_Init+0x80>)
 8000c6c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <appe_Tl_Init+0x84>)
 8000c70:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <appe_Tl_Init+0x88>)
 8000c74:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c76:	463b      	mov	r3, r7
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <appe_Tl_Init+0x8c>)
 8000c7c:	f00b f934 	bl	800bee8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <appe_Tl_Init+0x90>)
 8000c86:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <appe_Tl_Init+0x94>)
 8000c8a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c8c:	f240 533c 	movw	r3, #1340	; 0x53c
 8000c90:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	4618      	mov	r0, r3
 8000c98:	f00b fbca 	bl	800c430 <TL_MM_Init>

  TL_Enable();
 8000c9c:	f00b fa58 	bl	800c150 <TL_Enable>

  return;
 8000ca0:	bf00      	nop
}
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20004ea4 	.word	0x20004ea4
 8000cac:	20004eac 	.word	0x20004eac
 8000cb0:	08013c38 	.word	0x08013c38
 8000cb4:	08000db9 	.word	0x08000db9
 8000cb8:	20004ea8 	.word	0x20004ea8
 8000cbc:	2003061c 	.word	0x2003061c
 8000cc0:	08000cd1 	.word	0x08000cd1
 8000cc4:	08000d11 	.word	0x08000d11
 8000cc8:	20030728 	.word	0x20030728
 8000ccc:	200300e0 	.word	0x200300e0

08000cd0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <APPE_SysStatusNot+0x16>
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d008      	beq.n	8000cf6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8000ce4:	e00d      	b.n	8000d02 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <APPE_SysStatusNot+0x3c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f04f 31ff 	mov.w	r1, #4294967295
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f00d f97a 	bl	800dfe8 <osMutexAcquire>
      break;
 8000cf4:	e005      	b.n	8000d02 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <APPE_SysStatusNot+0x3c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f00d f9d2 	bl	800e0a4 <osMutexRelease>
      break;
 8000d00:	bf00      	nop
  }
  return;
 8000d02:	bf00      	nop
}
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20004ea4 	.word	0x20004ea4

08000d10 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	330b      	adds	r3, #11
 8000d1e:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8000d2a:	d004      	beq.n	8000d36 <APPE_SysUserEvtRx+0x26>
 8000d2c:	f249 2201 	movw	r2, #37377	; 0x9201
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d003      	beq.n	8000d3c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8000d34:	e008      	b.n	8000d48 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8000d36:	f000 f833 	bl	8000da0 <APPE_SysEvtReadyProcessing>
         break;
 8000d3a:	e005      	b.n	8000d48 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	789b      	ldrb	r3, [r3, #2]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 f805 	bl	8000d50 <APPE_SysEvtError>
         break;
 8000d46:	bf00      	nop
  }
  return;
 8000d48:	bf00      	nop
}
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	2b7d      	cmp	r3, #125	; 0x7d
 8000d5e:	d002      	beq.n	8000d66 <APPE_SysEvtError+0x16>
 8000d60:	2b7e      	cmp	r3, #126	; 0x7e
 8000d62:	d006      	beq.n	8000d72 <APPE_SysEvtError+0x22>
 8000d64:	e00b      	b.n	8000d7e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8000d66:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <APPE_SysEvtError+0x44>)
 8000d68:	2101      	movs	r1, #1
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f001 fe0c 	bl	8002988 <logApplication>
       break;
 8000d70:	e00c      	b.n	8000d8c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8000d72:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <APPE_SysEvtError+0x48>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	2000      	movs	r0, #0
 8000d78:	f001 fe06 	bl	8002988 <logApplication>
       break;
 8000d7c:	e006      	b.n	8000d8c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <APPE_SysEvtError+0x4c>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	2000      	movs	r0, #0
 8000d86:	f001 fdff 	bl	8002988 <logApplication>
       break;
 8000d8a:	bf00      	nop
  }
  return;
 8000d8c:	bf00      	nop
}
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	0801388c 	.word	0x0801388c
 8000d98:	080138b0 	.word	0x080138b0
 8000d9c:	080138d0 	.word	0x080138d0

08000da0 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000da4:	f00b fbb8 	bl	800c518 <TL_TRACES_Init>

  APP_THREAD_Init();
 8000da8:	f010 ffb8 	bl	8011d1c <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000dac:	2100      	movs	r1, #0
 8000dae:	2001      	movs	r0, #1
 8000db0:	f012 fcee 	bl	8013790 <UTIL_LPM_SetOffMode>
  return;
 8000db4:	bf00      	nop
}
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f00c ffb2 	bl	800dd30 <osThreadFlagsWait>
     shci_user_evt_proc();
 8000dcc:	f00b f8a8 	bl	800bf20 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000dd0:	e7f6      	b.n	8000dc0 <ShciUserEvtProcess+0x8>
	...

08000dd4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <shci_notify_asynch_evt+0x1c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2101      	movs	r1, #1
 8000de2:	4618      	mov	r0, r3
 8000de4:	f00c ff42 	bl	800dc6c <osThreadFlagsSet>
  return;
 8000de8:	bf00      	nop
}
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20004ea8 	.word	0x20004ea8

08000df4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <shci_cmd_resp_release+0x1c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f00d faa3 	bl	800e34c <osSemaphoreRelease>
  return;
 8000e06:	bf00      	nop
}
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20004eac 	.word	0x20004eac

08000e14 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <shci_cmd_resp_wait+0x20>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00d fa2b 	bl	800e280 <osSemaphoreAcquire>
  return;
 8000e2a:	bf00      	nop
}
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20004eac 	.word	0x20004eac

08000e38 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f00b fb31 	bl	800c4a8 <TL_MM_EvtDone>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <_Z16MX_FREERTOS_Initv+0x3c>)
 8000e56:	2100      	movs	r1, #0
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <_Z16MX_FREERTOS_Initv+0x40>)
 8000e5a:	f00c fe61 	bl	800db20 <osThreadNew>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <_Z16MX_FREERTOS_Initv+0x44>)
 8000e62:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
#ifndef SOLAR_SENSOR_NODE
  msgTaskHandle = osThreadNew(MsgTask, NULL, &msgTask_attributes);
 8000e64:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <_Z16MX_FREERTOS_Initv+0x48>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <_Z16MX_FREERTOS_Initv+0x4c>)
 8000e6a:	f00c fe59 	bl	800db20 <osThreadNew>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <_Z16MX_FREERTOS_Initv+0x50>)
 8000e72:	601a      	str	r2, [r3, #0]

  msgQueueHandle = osMessageQueueNew (10, sizeof(struct MeasMsg), &msgQueue_attributes);
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <_Z16MX_FREERTOS_Initv+0x54>)
 8000e76:	2114      	movs	r1, #20
 8000e78:	200a      	movs	r0, #10
 8000e7a:	f00d fabf 	bl	800e3fc <osMessageQueueNew>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <_Z16MX_FREERTOS_Initv+0x58>)
 8000e82:	601a      	str	r2, [r3, #0]
#endif

  APPE_Init();
 8000e84:	f7ff febc 	bl	8000c00 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	08013c5c 	.word	0x08013c5c
 8000e90:	08000ead 	.word	0x08000ead
 8000e94:	2000028c 	.word	0x2000028c
 8000e98:	08013c80 	.word	0x08013c80
 8000e9c:	08002715 	.word	0x08002715
 8000ea0:	20000290 	.word	0x20000290
 8000ea4:	08013ca4 	.word	0x08013ca4
 8000ea8:	20000294 	.word	0x20000294

08000eac <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	osDelay(100);
 8000eb4:	2064      	movs	r0, #100	; 0x64
 8000eb6:	f00c ffcf 	bl	800de58 <osDelay>
	myMain();
 8000eba:	f001 fab7 	bl	800242c <_Z6myMainv>
  for(;;)
  {
	  osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8000ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f00c ff33 	bl	800dd30 <osThreadFlagsWait>
 8000eca:	e7f8      	b.n	8000ebe <_Z16StartDefaultTaskPv+0x12>

08000ecc <startCal>:
 */
#ifndef SOLAR_SENSOR_NODE

void startCal(float angle_base_min, float angle_base_max,
		float angle_led_min, float angle_led_max,
				Stepper& motor_base, Stepper& motor_led){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	ed87 0a05 	vstr	s0, [r7, #20]
 8000ed6:	edc7 0a04 	vstr	s1, [r7, #16]
 8000eda:	ed87 1a03 	vstr	s2, [r7, #12]
 8000ede:	edc7 1a02 	vstr	s3, [r7, #8]
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]

	// configure calMsg packet
	calMsg.UID = SPOTLIGHT_UID;
 8000ee6:	4b58      	ldr	r3, [pc, #352]	; (8001048 <startCal+0x17c>)
 8000ee8:	2218      	movs	r2, #24
 8000eea:	701a      	strb	r2, [r3, #0]
	calMsg.cal_code = CALIBRATION_START_COMMAND;
 8000eec:	4b56      	ldr	r3, [pc, #344]	; (8001048 <startCal+0x17c>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	705a      	strb	r2, [r3, #1]

	/* (1) hone axis */
	motor_base.honeAxis();
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fcfe 	bl	80008f4 <_ZN7Stepper8honeAxisEv>
	motor_led.honeAxis();
 8000ef8:	6838      	ldr	r0, [r7, #0]
 8000efa:	f7ff fcfb 	bl	80008f4 <_ZN7Stepper8honeAxisEv>

	/* (2) multicast that calibration will begin */

	// clear current calibration table
	memset(calibration_table,0,sizeof(calibration_table));
 8000efe:	2250      	movs	r2, #80	; 0x50
 8000f00:	2100      	movs	r1, #0
 8000f02:	4852      	ldr	r0, [pc, #328]	; (800104c <startCal+0x180>)
 8000f04:	f012 fca1 	bl	801384a <memset>

	broadcastCalStart(&calMsg); //TODO: implement
 8000f08:	484f      	ldr	r0, [pc, #316]	; (8001048 <startCal+0x17c>)
 8000f0a:	f000 f8a9 	bl	8001060 <broadcastCalStart>
	/* (3) wait for nodes to ACK and populate a table with the UIDs */

	// note: nodes will be replying to a Coap server (code exists in app_thread.c for populating of table)

	// wait for nodes to reply with their IDs
	osDelay(CAL_INIT_CAL_TIMEOUT);
 8000f0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f12:	f00c ffa1 	bl	800de58 <osDelay>
	/* (4) Run through each position, sending an msg to each node indicating the angle is set
	 * and waiting for said nodes to respond with their solar power measurements. If node does
	 * not reply within CAL_POS_TIMEOUT, re-send msg and wait one more cycle before continuing.
	 */
		// calculate step bounds for each axis
		int32_t min_led_axis_step = (((angle_led_min) * LED_STEP_RANGE));
 8000f16:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f1a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001050 <startCal+0x184>
 8000f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f26:	ee17 3a90 	vmov	r3, s15
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
		int32_t max_led_axis_step = (((angle_led_max) * LED_STEP_RANGE));
 8000f2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f30:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001050 <startCal+0x184>
 8000f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f3c:	ee17 3a90 	vmov	r3, s15
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
		int32_t min_base_axis_step = (((angle_led_min) * BASE_STEP_RANGE));
 8000f42:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f46:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001054 <startCal+0x188>
 8000f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f52:	ee17 3a90 	vmov	r3, s15
 8000f56:	623b      	str	r3, [r7, #32]
		int32_t max_base_axis_step = (((angle_led_max) * BASE_STEP_RANGE));
 8000f58:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f5c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001054 <startCal+0x188>
 8000f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f68:	ee17 3a90 	vmov	r3, s15
 8000f6c:	61fb      	str	r3, [r7, #28]

		// move to desired angle
		uint8_t flip_dir = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(base_step = min_base_axis_step; base_step <= max_base_axis_step; base_step += (BASE_CAL_STEP_MULTI * BASE_MIN_ANGLE_STEP)){
 8000f74:	4a38      	ldr	r2, [pc, #224]	; (8001058 <startCal+0x18c>)
 8000f76:	6a3b      	ldr	r3, [r7, #32]
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b37      	ldr	r3, [pc, #220]	; (8001058 <startCal+0x18c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	db5a      	blt.n	800103a <startCal+0x16e>
			motor_base.setAbsPos(base_step);
 8000f84:	4b34      	ldr	r3, [pc, #208]	; (8001058 <startCal+0x18c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff fcd6 	bl	800093c <_ZN7Stepper9setAbsPosEl>

			if(flip_dir == 0){
 8000f90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d125      	bne.n	8000fe4 <startCal+0x118>
				for(led_step = min_led_axis_step; led_step <= max_led_axis_step; led_step += (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8000f98:	4a30      	ldr	r2, [pc, #192]	; (800105c <startCal+0x190>)
 8000f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <startCal+0x190>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	db19      	blt.n	8000fdc <startCal+0x110>
					motor_led.setAbsPos(led_step);
 8000fa8:	4b2c      	ldr	r3, [pc, #176]	; (800105c <startCal+0x190>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	6838      	ldr	r0, [r7, #0]
 8000fb0:	f7ff fcc4 	bl	800093c <_ZN7Stepper9setAbsPosEl>
					getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <startCal+0x18c>)
 8000fb6:	6819      	ldr	r1, [r3, #0]
 8000fb8:	4b28      	ldr	r3, [pc, #160]	; (800105c <startCal+0x190>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4822      	ldr	r0, [pc, #136]	; (8001048 <startCal+0x17c>)
 8000fc0:	f000 f892 	bl	80010e8 <getMeasurementsFromNodes>

					// wait CAL_POS_TIMEOUT milliseconds for nodes to reply with power values
#ifndef DEBUG_SERIAL
					osThreadFlagsWait (CAL_THREAD_FLAG, osFlagsWaitAny, CAL_POS_TIMEOUT);
 8000fc4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2003      	movs	r0, #3
 8000fcc:	f00c feb0 	bl	800dd30 <osThreadFlagsWait>
				for(led_step = min_led_axis_step; led_step <= max_led_axis_step; led_step += (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <startCal+0x190>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	331e      	adds	r3, #30
 8000fd6:	4a21      	ldr	r2, [pc, #132]	; (800105c <startCal+0x190>)
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e7e0      	b.n	8000f9e <startCal+0xd2>
#else
					osDelay(100);
#endif
				}
				flip_dir = 1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000fe2:	e024      	b.n	800102e <startCal+0x162>
			}
			else{
				for(led_step = max_led_axis_step; led_step >= min_led_axis_step; led_step -= (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8000fe4:	4a1d      	ldr	r2, [pc, #116]	; (800105c <startCal+0x190>)
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <startCal+0x190>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	dc19      	bgt.n	8001028 <startCal+0x15c>
					motor_led.setAbsPos(led_step);
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <startCal+0x190>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6838      	ldr	r0, [r7, #0]
 8000ffc:	f7ff fc9e 	bl	800093c <_ZN7Stepper9setAbsPosEl>
					getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <startCal+0x18c>)
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <startCal+0x190>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	480f      	ldr	r0, [pc, #60]	; (8001048 <startCal+0x17c>)
 800100c:	f000 f86c 	bl	80010e8 <getMeasurementsFromNodes>

					// wait CAL_POS_TIMEOUT milliseconds for nodes to reply with power values
#ifndef DEBUG_SERIAL
					osThreadFlagsWait (CAL_THREAD_FLAG, osFlagsWaitAny, CAL_POS_TIMEOUT);
 8001010:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001014:	2100      	movs	r1, #0
 8001016:	2003      	movs	r0, #3
 8001018:	f00c fe8a 	bl	800dd30 <osThreadFlagsWait>
				for(led_step = max_led_axis_step; led_step >= min_led_axis_step; led_step -= (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <startCal+0x190>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3b1e      	subs	r3, #30
 8001022:	4a0e      	ldr	r2, [pc, #56]	; (800105c <startCal+0x190>)
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e7e0      	b.n	8000fea <startCal+0x11e>
#else
					osDelay(100);
#endif
				}
				flip_dir = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(base_step = min_base_axis_step; base_step <= max_base_axis_step; base_step += (BASE_CAL_STEP_MULTI * BASE_MIN_ANGLE_STEP)){
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <startCal+0x18c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	330a      	adds	r3, #10
 8001034:	4a08      	ldr	r2, [pc, #32]	; (8001058 <startCal+0x18c>)
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	e79f      	b.n	8000f7a <startCal+0xae>
			}
		}


//	/* (5) send calibration complete message to all nodes */
		broadcastCalComplete(&calMsg);
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <startCal+0x17c>)
 800103c:	f000 f832 	bl	80010a4 <broadcastCalComplete>

}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200002e8 	.word	0x200002e8
 800104c:	20000298 	.word	0x20000298
 8001050:	46f24600 	.word	0x46f24600
 8001054:	45c06000 	.word	0x45c06000
 8001058:	200002f8 	.word	0x200002f8
 800105c:	200002f4 	.word	0x200002f4

08001060 <broadcastCalStart>:
#endif


void broadcastCalStart(CalMsg* msg){
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af04      	add	r7, sp, #16
 8001066:	6078      	str	r0, [r7, #4]

	msg->cal_fcn = CALIBRATION_START_COMMAND;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
	msg->angle_2 = 0;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]

	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 800107a:	2301      	movs	r3, #1
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2303      	movs	r3, #3
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	2301      	movs	r3, #1
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <broadcastCalStart+0x3c>)
 8001088:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <broadcastCalStart+0x40>)
 800108a:	210c      	movs	r1, #12
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f011 f91d 	bl	80122cc <APP_THREAD_SendCoapMsg>
			&multicastAddr, nodeCalResource,
			REQUEST_ACK, OT_COAP_CODE_PUT, 1U);

	return;
 8001092:	bf00      	nop
}
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	08013db8 	.word	0x08013db8
 80010a0:	20005010 	.word	0x20005010

080010a4 <broadcastCalComplete>:

void broadcastCalComplete(CalMsg* msg){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af04      	add	r7, sp, #16
 80010aa:	6078      	str	r0, [r7, #4]

	msg->cal_fcn = CALIBRATION_START_COMMAND;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
	msg->angle_2 = 0;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]

	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 80010be:	2301      	movs	r3, #1
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2303      	movs	r3, #3
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <broadcastCalComplete+0x3c>)
 80010cc:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <broadcastCalComplete+0x40>)
 80010ce:	210c      	movs	r1, #12
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f011 f8fb 	bl	80122cc <APP_THREAD_SendCoapMsg>
			&multicastAddr, nodeCalResource,
			REQUEST_ACK, OT_COAP_CODE_PUT, 1U);

	return;
 80010d6:	bf00      	nop
}
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	08013db8 	.word	0x08013db8
 80010e4:	20005010 	.word	0x20005010

080010e8 <getMeasurementsFromNodes>:

void getMeasurementsFromNodes(CalMsg* msg, int32_t angle_1, int32_t angle_2){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]

	msg->cal_fcn = CALIBRATION_GET_MEAS;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2202      	movs	r2, #2
 80010f8:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = angle_1;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	605a      	str	r2, [r3, #4]
	msg->angle_2 = angle_2;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	609a      	str	r2, [r3, #8]

#ifndef DEBUG_SERIAL
	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 8001106:	2301      	movs	r3, #1
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	2301      	movs	r3, #1
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	2301      	movs	r3, #1
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <getMeasurementsFromNodes+0x40>)
 8001114:	4a05      	ldr	r2, [pc, #20]	; (800112c <getMeasurementsFromNodes+0x44>)
 8001116:	210c      	movs	r1, #12
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f011 f8d7 	bl	80122cc <APP_THREAD_SendCoapMsg>
#else
	// TODO REMOVE!!!
	measMsgReceivedFromNode(&measMsg);
#endif

	return;
 800111e:	bf00      	nop
}
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	08013db8 	.word	0x08013db8
 800112c:	20005010 	.word	0x20005010

08001130 <LL_AHB1_GRP1_EnableClock>:
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800113e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4313      	orrs	r3, r2
 8001146:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4013      	ands	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001154:	68fb      	ldr	r3, [r7, #12]
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001166:	2004      	movs	r0, #4
 8001168:	f7ff ffe2 	bl	8001130 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff ffdf 	bl	8001130 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2105      	movs	r1, #5
 8001176:	200b      	movs	r0, #11
 8001178:	f003 fa33 	bl	80045e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800117c:	200b      	movs	r0, #11
 800117e:	f003 fa4a 	bl	8004616 <HAL_NVIC_EnableIRQ>

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}

08001186 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <LL_AHB2_GRP1_EnableClock>:
{
 800119a:	b480      	push	{r7}
 800119c:	b085      	sub	sp, #20
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4013      	ands	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e0:	2004      	movs	r0, #4
 80011e2:	f7ff ffda 	bl	800119a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2002      	movs	r0, #2
 80011e8:	f7ff ffd7 	bl	800119a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff ffd4 	bl	800119a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f2:	2010      	movs	r0, #16
 80011f4:	f7ff ffd1 	bl	800119a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 80011f8:	2200      	movs	r2, #0
 80011fa:	f240 3193 	movw	r1, #915	; 0x393
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001202:	f003 fe29 	bl	8004e58 <HAL_GPIO_WritePin>
                          |AIN1_1_Pin|BIN1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BIN1_2_Pin|BIN2_2_Pin|BIN2_1_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 4198 	mov.w	r1, #19456	; 0x4c00
 800120c:	4823      	ldr	r0, [pc, #140]	; (800129c <MX_GPIO_Init+0xd0>)
 800120e:	f003 fe23 	bl	8004e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLUE_LED_Pin|GREEN_LED_Pin, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	2103      	movs	r1, #3
 8001216:	4821      	ldr	r0, [pc, #132]	; (800129c <MX_GPIO_Init+0xd0>)
 8001218:	f003 fe1e 	bl	8004e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	2110      	movs	r1, #16
 8001220:	481f      	ldr	r0, [pc, #124]	; (80012a0 <MX_GPIO_Init+0xd4>)
 8001222:	f003 fe19 	bl	8004e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 8001226:	f240 3393 	movw	r3, #915	; 0x393
 800122a:	607b      	str	r3, [r7, #4]
                          |AIN1_1_Pin|BIN1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4619      	mov	r1, r3
 800123c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001240:	f003 fc9a 	bl	8004b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_LED_DISC_Pin;
 8001244:	2308      	movs	r3, #8
 8001246:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(INT_LED_DISC_GPIO_Port, &GPIO_InitStruct);
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001258:	f003 fc8e 	bl	8004b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BIN1_2_Pin|BIN2_2_Pin|BLUE_LED_Pin|GREEN_LED_Pin
 800125c:	f644 4303 	movw	r3, #19459	; 0x4c03
 8001260:	607b      	str	r3, [r7, #4]
                          |BIN2_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2301      	movs	r3, #1
 8001264:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	4619      	mov	r1, r3
 8001272:	480a      	ldr	r0, [pc, #40]	; (800129c <MX_GPIO_Init+0xd0>)
 8001274:	f003 fc80 	bl	8004b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8001278:	2310      	movs	r3, #16
 800127a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	4619      	mov	r1, r3
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_GPIO_Init+0xd4>)
 800128e:	f003 fc73 	bl	8004b78 <HAL_GPIO_Init>

}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	48000400 	.word	0x48000400
 80012a0:	48001000 	.word	0x48001000

080012a4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80012ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80012b2:	4905      	ldr	r1, [pc, #20]	; (80012c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	58000800 	.word	0x58000800

080012cc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4904      	ldr	r1, [pc, #16]	; (80012ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]

}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	58000800 	.word	0x58000800

080012f0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <ReadRtcSsrValue+0x3c>)
 80012f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <ReadRtcSsrValue+0x3c>)
 8001300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001302:	b29b      	uxth	r3, r3
 8001304:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001306:	e005      	b.n	8001314 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <ReadRtcSsrValue+0x3c>)
 800130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001310:	b29b      	uxth	r3, r3
 8001312:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d1f5      	bne.n	8001308 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800131c:	683b      	ldr	r3, [r7, #0]
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40002800 	.word	0x40002800

08001330 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	460a      	mov	r2, r1
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	4613      	mov	r3, r2
 800133e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001340:	79ba      	ldrb	r2, [r7, #6]
 8001342:	491d      	ldr	r1, [pc, #116]	; (80013b8 <LinkTimerAfter+0x88>)
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	440b      	add	r3, r1
 800134e:	3315      	adds	r3, #21
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	2b06      	cmp	r3, #6
 8001358:	d009      	beq.n	800136e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	4916      	ldr	r1, [pc, #88]	; (80013b8 <LinkTimerAfter+0x88>)
 800135e:	4613      	mov	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	440b      	add	r3, r1
 8001368:	3314      	adds	r3, #20
 800136a:	79fa      	ldrb	r2, [r7, #7]
 800136c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800136e:	79fa      	ldrb	r2, [r7, #7]
 8001370:	4911      	ldr	r1, [pc, #68]	; (80013b8 <LinkTimerAfter+0x88>)
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	440b      	add	r3, r1
 800137c:	3315      	adds	r3, #21
 800137e:	7bfa      	ldrb	r2, [r7, #15]
 8001380:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001382:	79fa      	ldrb	r2, [r7, #7]
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <LinkTimerAfter+0x88>)
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	440b      	add	r3, r1
 8001390:	3314      	adds	r3, #20
 8001392:	79ba      	ldrb	r2, [r7, #6]
 8001394:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001396:	79ba      	ldrb	r2, [r7, #6]
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <LinkTimerAfter+0x88>)
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	440b      	add	r3, r1
 80013a4:	3315      	adds	r3, #21
 80013a6:	79fa      	ldrb	r2, [r7, #7]
 80013a8:	701a      	strb	r2, [r3, #0]

  return;
 80013aa:	bf00      	nop
}
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	200001c0 	.word	0x200001c0

080013bc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	71fb      	strb	r3, [r7, #7]
 80013c8:	4613      	mov	r3, r2
 80013ca:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80013cc:	4b29      	ldr	r3, [pc, #164]	; (8001474 <LinkTimerBefore+0xb8>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	79ba      	ldrb	r2, [r7, #6]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d032      	beq.n	800143e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	4927      	ldr	r1, [pc, #156]	; (8001478 <LinkTimerBefore+0xbc>)
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	3314      	adds	r3, #20
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	4922      	ldr	r1, [pc, #136]	; (8001478 <LinkTimerBefore+0xbc>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3315      	adds	r3, #21
 80013fc:	79fa      	ldrb	r2, [r7, #7]
 80013fe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001400:	79fa      	ldrb	r2, [r7, #7]
 8001402:	491d      	ldr	r1, [pc, #116]	; (8001478 <LinkTimerBefore+0xbc>)
 8001404:	4613      	mov	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3315      	adds	r3, #21
 8001410:	79ba      	ldrb	r2, [r7, #6]
 8001412:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001414:	79fa      	ldrb	r2, [r7, #7]
 8001416:	4918      	ldr	r1, [pc, #96]	; (8001478 <LinkTimerBefore+0xbc>)
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3314      	adds	r3, #20
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001428:	79ba      	ldrb	r2, [r7, #6]
 800142a:	4913      	ldr	r1, [pc, #76]	; (8001478 <LinkTimerBefore+0xbc>)
 800142c:	4613      	mov	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	440b      	add	r3, r1
 8001436:	3314      	adds	r3, #20
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800143c:	e014      	b.n	8001468 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800143e:	79fa      	ldrb	r2, [r7, #7]
 8001440:	490d      	ldr	r1, [pc, #52]	; (8001478 <LinkTimerBefore+0xbc>)
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	440b      	add	r3, r1
 800144c:	3315      	adds	r3, #21
 800144e:	79ba      	ldrb	r2, [r7, #6]
 8001450:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001452:	79ba      	ldrb	r2, [r7, #6]
 8001454:	4908      	ldr	r1, [pc, #32]	; (8001478 <LinkTimerBefore+0xbc>)
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	3314      	adds	r3, #20
 8001462:	79fa      	ldrb	r2, [r7, #7]
 8001464:	701a      	strb	r2, [r3, #0]
  return;
 8001466:	bf00      	nop
}
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000250 	.word	0x20000250
 8001478:	200001c0 	.word	0x200001c0

0800147c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001486:	4b4e      	ldr	r3, [pc, #312]	; (80015c0 <linkTimer+0x144>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b06      	cmp	r3, #6
 800148e:	d118      	bne.n	80014c2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001490:	4b4b      	ldr	r3, [pc, #300]	; (80015c0 <linkTimer+0x144>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4b4b      	ldr	r3, [pc, #300]	; (80015c4 <linkTimer+0x148>)
 8001498:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800149a:	4a49      	ldr	r2, [pc, #292]	; (80015c0 <linkTimer+0x144>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80014a0:	79fa      	ldrb	r2, [r7, #7]
 80014a2:	4949      	ldr	r1, [pc, #292]	; (80015c8 <linkTimer+0x14c>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	3315      	adds	r3, #21
 80014b0:	2206      	movs	r2, #6
 80014b2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80014b4:	4b45      	ldr	r3, [pc, #276]	; (80015cc <linkTimer+0x150>)
 80014b6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ba:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	81fb      	strh	r3, [r7, #14]
 80014c0:	e078      	b.n	80015b4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80014c2:	f000 f909 	bl	80016d8 <ReturnTimeElapsed>
 80014c6:	4603      	mov	r3, r0
 80014c8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80014ca:	79fa      	ldrb	r2, [r7, #7]
 80014cc:	493e      	ldr	r1, [pc, #248]	; (80015c8 <linkTimer+0x14c>)
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	3308      	adds	r3, #8
 80014da:	6819      	ldr	r1, [r3, #0]
 80014dc:	89fb      	ldrh	r3, [r7, #14]
 80014de:	79fa      	ldrb	r2, [r7, #7]
 80014e0:	4419      	add	r1, r3
 80014e2:	4839      	ldr	r0, [pc, #228]	; (80015c8 <linkTimer+0x14c>)
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4403      	add	r3, r0
 80014ee:	3308      	adds	r3, #8
 80014f0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80014f2:	79fa      	ldrb	r2, [r7, #7]
 80014f4:	4934      	ldr	r1, [pc, #208]	; (80015c8 <linkTimer+0x14c>)
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	440b      	add	r3, r1
 8001500:	3308      	adds	r3, #8
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001506:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <linkTimer+0x144>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4619      	mov	r1, r3
 800150e:	4a2e      	ldr	r2, [pc, #184]	; (80015c8 <linkTimer+0x14c>)
 8001510:	460b      	mov	r3, r1
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	440b      	add	r3, r1
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4413      	add	r3, r2
 800151a:	3308      	adds	r3, #8
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	429a      	cmp	r2, r3
 8001522:	d337      	bcc.n	8001594 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001524:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <linkTimer+0x144>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800152a:	7b7a      	ldrb	r2, [r7, #13]
 800152c:	4926      	ldr	r1, [pc, #152]	; (80015c8 <linkTimer+0x14c>)
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	3315      	adds	r3, #21
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800153e:	e013      	b.n	8001568 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001540:	7b7a      	ldrb	r2, [r7, #13]
 8001542:	4921      	ldr	r1, [pc, #132]	; (80015c8 <linkTimer+0x14c>)
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	3315      	adds	r3, #21
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001554:	7b7a      	ldrb	r2, [r7, #13]
 8001556:	491c      	ldr	r1, [pc, #112]	; (80015c8 <linkTimer+0x14c>)
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	440b      	add	r3, r1
 8001562:	3315      	adds	r3, #21
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001568:	7b3b      	ldrb	r3, [r7, #12]
 800156a:	2b06      	cmp	r3, #6
 800156c:	d00b      	beq.n	8001586 <linkTimer+0x10a>
 800156e:	7b3a      	ldrb	r2, [r7, #12]
 8001570:	4915      	ldr	r1, [pc, #84]	; (80015c8 <linkTimer+0x14c>)
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	3308      	adds	r3, #8
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	429a      	cmp	r2, r3
 8001584:	d2dc      	bcs.n	8001540 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001586:	7b7a      	ldrb	r2, [r7, #13]
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fecf 	bl	8001330 <LinkTimerAfter>
 8001592:	e00f      	b.n	80015b4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <linkTimer+0x144>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ff0c 	bl	80013bc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <linkTimer+0x144>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <linkTimer+0x148>)
 80015ac:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <linkTimer+0x144>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80015b4:	89fb      	ldrh	r3, [r7, #14]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000250 	.word	0x20000250
 80015c4:	20000251 	.word	0x20000251
 80015c8:	200001c0 	.word	0x200001c0
 80015cc:	20000254 	.word	0x20000254

080015d0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	460a      	mov	r2, r1
 80015da:	71fb      	strb	r3, [r7, #7]
 80015dc:	4613      	mov	r3, r2
 80015de:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80015e0:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <UnlinkTimer+0xf8>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	79fa      	ldrb	r2, [r7, #7]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d111      	bne.n	8001610 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80015ec:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <UnlinkTimer+0xf8>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b36      	ldr	r3, [pc, #216]	; (80016cc <UnlinkTimer+0xfc>)
 80015f4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	4935      	ldr	r1, [pc, #212]	; (80016d0 <UnlinkTimer+0x100>)
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	3315      	adds	r3, #21
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <UnlinkTimer+0xf8>)
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e03e      	b.n	800168e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001610:	79fa      	ldrb	r2, [r7, #7]
 8001612:	492f      	ldr	r1, [pc, #188]	; (80016d0 <UnlinkTimer+0x100>)
 8001614:	4613      	mov	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	440b      	add	r3, r1
 800161e:	3314      	adds	r3, #20
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001624:	79fa      	ldrb	r2, [r7, #7]
 8001626:	492a      	ldr	r1, [pc, #168]	; (80016d0 <UnlinkTimer+0x100>)
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	440b      	add	r3, r1
 8001632:	3315      	adds	r3, #21
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001638:	79f9      	ldrb	r1, [r7, #7]
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	4824      	ldr	r0, [pc, #144]	; (80016d0 <UnlinkTimer+0x100>)
 800163e:	460b      	mov	r3, r1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	440b      	add	r3, r1
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4403      	add	r3, r0
 8001648:	3315      	adds	r3, #21
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b2d8      	uxtb	r0, r3
 800164e:	4920      	ldr	r1, [pc, #128]	; (80016d0 <UnlinkTimer+0x100>)
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	3315      	adds	r3, #21
 800165c:	4602      	mov	r2, r0
 800165e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001660:	7bbb      	ldrb	r3, [r7, #14]
 8001662:	2b06      	cmp	r3, #6
 8001664:	d013      	beq.n	800168e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001666:	79f9      	ldrb	r1, [r7, #7]
 8001668:	7bba      	ldrb	r2, [r7, #14]
 800166a:	4819      	ldr	r0, [pc, #100]	; (80016d0 <UnlinkTimer+0x100>)
 800166c:	460b      	mov	r3, r1
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	440b      	add	r3, r1
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4403      	add	r3, r0
 8001676:	3314      	adds	r3, #20
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	b2d8      	uxtb	r0, r3
 800167c:	4914      	ldr	r1, [pc, #80]	; (80016d0 <UnlinkTimer+0x100>)
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	3314      	adds	r3, #20
 800168a:	4602      	mov	r2, r0
 800168c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800168e:	79fa      	ldrb	r2, [r7, #7]
 8001690:	490f      	ldr	r1, [pc, #60]	; (80016d0 <UnlinkTimer+0x100>)
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	440b      	add	r3, r1
 800169c:	330c      	adds	r3, #12
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <UnlinkTimer+0xf8>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b06      	cmp	r3, #6
 80016aa:	d107      	bne.n	80016bc <UnlinkTimer+0xec>
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d104      	bne.n	80016bc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <UnlinkTimer+0x104>)
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295
 80016b8:	601a      	str	r2, [r3, #0]
  }

  return;
 80016ba:	bf00      	nop
 80016bc:	bf00      	nop
}
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	20000250 	.word	0x20000250
 80016cc:	20000251 	.word	0x20000251
 80016d0:	200001c0 	.word	0x200001c0
 80016d4:	20000254 	.word	0x20000254

080016d8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <ReturnTimeElapsed+0x70>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e6:	d026      	beq.n	8001736 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80016e8:	f7ff fe02 	bl	80012f0 <ReadRtcSsrValue>
 80016ec:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <ReturnTimeElapsed+0x70>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d805      	bhi.n	8001704 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <ReturnTimeElapsed+0x70>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	e00a      	b.n	800171a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <ReturnTimeElapsed+0x74>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <ReturnTimeElapsed+0x70>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	4413      	add	r3, r2
 8001718:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <ReturnTimeElapsed+0x78>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <ReturnTimeElapsed+0x7c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	40d3      	lsrs	r3, r2
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	e001      	b.n	800173a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	b29b      	uxth	r3, r3
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000254 	.word	0x20000254
 800174c:	20000302 	.word	0x20000302
 8001750:	20000301 	.word	0x20000301
 8001754:	20000300 	.word	0x20000300

08001758 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d108      	bne.n	800177a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001768:	f7ff fdc2 	bl	80012f0 <ReadRtcSsrValue>
 800176c:	4602      	mov	r2, r0
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <RestartWakeupCounter+0xa8>)
 8001770:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001772:	2003      	movs	r0, #3
 8001774:	f002 ff6f 	bl	8004656 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001778:	e03e      	b.n	80017f8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d803      	bhi.n	8001788 <RestartWakeupCounter+0x30>
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <RestartWakeupCounter+0xac>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d002      	beq.n	800178e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	3b01      	subs	r3, #1
 800178c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800178e:	bf00      	nop
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <RestartWakeupCounter+0xb0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f7      	beq.n	8001790 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <RestartWakeupCounter+0xb0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <RestartWakeupCounter+0xb0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80017b4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <RestartWakeupCounter+0xb4>)
 80017b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017bc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80017be:	2003      	movs	r0, #3
 80017c0:	f002 ff57 	bl	8004672 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <RestartWakeupCounter+0xb8>)
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	0c1b      	lsrs	r3, r3, #16
 80017ca:	041b      	lsls	r3, r3, #16
 80017cc:	88fa      	ldrh	r2, [r7, #6]
 80017ce:	4910      	ldr	r1, [pc, #64]	; (8001810 <RestartWakeupCounter+0xb8>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80017d4:	f7ff fd8c 	bl	80012f0 <ReadRtcSsrValue>
 80017d8:	4602      	mov	r2, r0
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <RestartWakeupCounter+0xa8>)
 80017dc:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <RestartWakeupCounter+0xb0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <RestartWakeupCounter+0xb0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017f0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80017f2:	f3af 8000 	nop.w
  return ;
 80017f6:	bf00      	nop
}
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000254 	.word	0x20000254
 8001804:	20000300 	.word	0x20000300
 8001808:	200002fc 	.word	0x200002fc
 800180c:	58000800 	.word	0x58000800
 8001810:	40002800 	.word	0x40002800

08001814 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800181a:	4b47      	ldr	r3, [pc, #284]	; (8001938 <RescheduleTimerList+0x124>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001826:	d108      	bne.n	800183a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001828:	bf00      	nop
 800182a:	4b44      	ldr	r3, [pc, #272]	; (800193c <RescheduleTimerList+0x128>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f7      	bne.n	800182a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800183a:	4b40      	ldr	r3, [pc, #256]	; (800193c <RescheduleTimerList+0x128>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	4b3e      	ldr	r3, [pc, #248]	; (800193c <RescheduleTimerList+0x128>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800184c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800184e:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <RescheduleTimerList+0x12c>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	493b      	ldr	r1, [pc, #236]	; (8001944 <RescheduleTimerList+0x130>)
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	3308      	adds	r3, #8
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001868:	f7ff ff36 	bl	80016d8 <ReturnTimeElapsed>
 800186c:	4603      	mov	r3, r0
 800186e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	429a      	cmp	r2, r3
 8001876:	d205      	bcs.n	8001884 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <RescheduleTimerList+0x134>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e04d      	b.n	8001920 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	4a31      	ldr	r2, [pc, #196]	; (800194c <RescheduleTimerList+0x138>)
 8001888:	8812      	ldrh	r2, [r2, #0]
 800188a:	b292      	uxth	r2, r2
 800188c:	4413      	add	r3, r2
 800188e:	461a      	mov	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4293      	cmp	r3, r2
 8001894:	d906      	bls.n	80018a4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <RescheduleTimerList+0x138>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800189c:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <RescheduleTimerList+0x134>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	e03d      	b.n	8001920 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <RescheduleTimerList+0x134>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018b4:	e034      	b.n	8001920 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	4922      	ldr	r1, [pc, #136]	; (8001944 <RescheduleTimerList+0x130>)
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	3308      	adds	r3, #8
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d20a      	bcs.n	80018e4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	491c      	ldr	r1, [pc, #112]	; (8001944 <RescheduleTimerList+0x130>)
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	440b      	add	r3, r1
 80018dc:	3308      	adds	r3, #8
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	e013      	b.n	800190c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	4917      	ldr	r1, [pc, #92]	; (8001944 <RescheduleTimerList+0x130>)
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	3308      	adds	r3, #8
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	1ac9      	subs	r1, r1, r3
 80018fc:	4811      	ldr	r0, [pc, #68]	; (8001944 <RescheduleTimerList+0x130>)
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4403      	add	r3, r0
 8001908:	3308      	adds	r3, #8
 800190a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	490d      	ldr	r1, [pc, #52]	; (8001944 <RescheduleTimerList+0x130>)
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	3315      	adds	r3, #21
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	2b06      	cmp	r3, #6
 8001924:	d1c7      	bne.n	80018b6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001926:	89bb      	ldrh	r3, [r7, #12]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff15 	bl	8001758 <RestartWakeupCounter>

  return ;
 800192e:	bf00      	nop
}
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40002800 	.word	0x40002800
 800193c:	200002fc 	.word	0x200002fc
 8001940:	20000250 	.word	0x20000250
 8001944:	200001c0 	.word	0x200001c0
 8001948:	20000258 	.word	0x20000258
 800194c:	20000304 	.word	0x20000304

08001950 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001956:	f3ef 8310 	mrs	r3, PRIMASK
 800195a:	617b      	str	r3, [r7, #20]
  return(result);
 800195c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001962:	4b5e      	ldr	r3, [pc, #376]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	22ca      	movs	r2, #202	; 0xca
 800196a:	625a      	str	r2, [r3, #36]	; 0x24
 800196c:	4b5b      	ldr	r3, [pc, #364]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2253      	movs	r2, #83	; 0x53
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001976:	4b59      	ldr	r3, [pc, #356]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	4b57      	ldr	r3, [pc, #348]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001988:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800198a:	4b55      	ldr	r3, [pc, #340]	; (8001ae0 <HW_TS_RTC_Wakeup_Handler+0x190>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001992:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001996:	4953      	ldr	r1, [pc, #332]	; (8001ae4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	440b      	add	r3, r1
 80019a2:	330c      	adds	r3, #12
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d170      	bne.n	8001a8e <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80019ac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019b0:	494c      	ldr	r1, [pc, #304]	; (8001ae4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	440b      	add	r3, r1
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80019c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019c4:	4947      	ldr	r1, [pc, #284]	; (8001ae4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	3310      	adds	r3, #16
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80019d6:	4b44      	ldr	r3, [pc, #272]	; (8001ae8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d04e      	beq.n	8001a7e <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80019e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019e4:	493f      	ldr	r1, [pc, #252]	; (8001ae4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	440b      	add	r3, r1
 80019f0:	330d      	adds	r3, #13
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d125      	bne.n	8001a46 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80019fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019fe:	2101      	movs	r1, #1
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fde5 	bl	80015d0 <UnlinkTimer>
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001a10:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001a14:	4933      	ldr	r1, [pc, #204]	; (8001ae4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	440b      	add	r3, r1
 8001a20:	3304      	adds	r3, #4
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f9d0 	bl	8001dd0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a30:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	22ca      	movs	r2, #202	; 0xca
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
 8001a3a:	4b28      	ldr	r3, [pc, #160]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2253      	movs	r2, #83	; 0x53
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
 8001a44:	e013      	b.n	8001a6e <HW_TS_RTC_Wakeup_Handler+0x11e>
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001a50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f931 	bl	8001cbc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	22ca      	movs	r2, #202	; 0xca
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
 8001a64:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2253      	movs	r2, #83	; 0x53
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001a6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	4619      	mov	r1, r3
 8001a76:	69b8      	ldr	r0, [r7, #24]
 8001a78:	f000 fa30 	bl	8001edc <HW_TS_RTC_Int_AppNot>
 8001a7c:	e024      	b.n	8001ac8 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8001a7e:	f7ff fec9 	bl	8001814 <RescheduleTimerList>
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	f383 8810 	msr	PRIMASK, r3
 8001a8c:	e01c      	b.n	8001ac8 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001a8e:	bf00      	nop
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f7      	beq.n	8001a90 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001ab4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001ab8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	22ff      	movs	r2, #255	; 0xff
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001ad2:	bf00      	nop
}
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200002fc 	.word	0x200002fc
 8001ae0:	20000250 	.word	0x20000250
 8001ae4:	200001c0 	.word	0x200001c0
 8001ae8:	20000258 	.word	0x20000258
 8001aec:	58000800 	.word	0x58000800

08001af0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001afc:	4a64      	ldr	r2, [pc, #400]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001b02:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	22ca      	movs	r2, #202	; 0xca
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24
 8001b0c:	4b60      	ldr	r3, [pc, #384]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2253      	movs	r2, #83	; 0x53
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001b16:	4b5f      	ldr	r3, [pc, #380]	; (8001c94 <HW_TS_Init+0x1a4>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4a5e      	ldr	r2, [pc, #376]	; (8001c94 <HW_TS_Init+0x1a4>)
 8001b1c:	f043 0320 	orr.w	r3, r3, #32
 8001b20:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001b22:	4b5c      	ldr	r3, [pc, #368]	; (8001c94 <HW_TS_Init+0x1a4>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f1c3 0304 	rsb	r3, r3, #4
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b58      	ldr	r3, [pc, #352]	; (8001c98 <HW_TS_Init+0x1a8>)
 8001b36:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001b38:	4b56      	ldr	r3, [pc, #344]	; (8001c94 <HW_TS_Init+0x1a4>)
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b40:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001b44:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	fa92 f2a2 	rbit	r2, r2
 8001b4c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	2a00      	cmp	r2, #0
 8001b56:	d101      	bne.n	8001b5c <HW_TS_Init+0x6c>
  {
    return 32U;
 8001b58:	2220      	movs	r2, #32
 8001b5a:	e003      	b.n	8001b64 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	fab2 f282 	clz	r2, r2
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	40d3      	lsrs	r3, r2
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	3301      	adds	r3, #1
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	4b4b      	ldr	r3, [pc, #300]	; (8001c9c <HW_TS_Init+0x1ac>)
 8001b6e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001b70:	4b48      	ldr	r3, [pc, #288]	; (8001c94 <HW_TS_Init+0x1a4>)
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HW_TS_Init+0x1b0>)
 8001b82:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001b84:	4b46      	ldr	r3, [pc, #280]	; (8001ca0 <HW_TS_Init+0x1b0>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	4a44      	ldr	r2, [pc, #272]	; (8001c9c <HW_TS_Init+0x1ac>)
 8001b8c:	7812      	ldrb	r2, [r2, #0]
 8001b8e:	fb02 f303 	mul.w	r3, r2, r3
 8001b92:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b96:	4a40      	ldr	r2, [pc, #256]	; (8001c98 <HW_TS_Init+0x1a8>)
 8001b98:	7812      	ldrb	r2, [r2, #0]
 8001b9a:	40d3      	lsrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d904      	bls.n	8001bb2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	; (8001ca4 <HW_TS_Init+0x1b4>)
 8001baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bae:	801a      	strh	r2, [r3, #0]
 8001bb0:	e003      	b.n	8001bba <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <HW_TS_Init+0x1b4>)
 8001bb8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001bba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001bbe:	f7ff fb85 	bl	80012cc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001bc2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001bc6:	f7ff fb6d 	bl	80012a4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d143      	bne.n	8001c58 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001bd0:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <HW_TS_Init+0x1b8>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001bd6:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HW_TS_Init+0x1bc>)
 8001bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bdc:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	77fb      	strb	r3, [r7, #31]
 8001be2:	e00c      	b.n	8001bfe <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001be4:	7ffa      	ldrb	r2, [r7, #31]
 8001be6:	4932      	ldr	r1, [pc, #200]	; (8001cb0 <HW_TS_Init+0x1c0>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	330c      	adds	r3, #12
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001bf8:	7ffb      	ldrb	r3, [r7, #31]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	77fb      	strb	r3, [r7, #31]
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	2b05      	cmp	r3, #5
 8001c02:	d9ef      	bls.n	8001be4 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001c04:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <HW_TS_Init+0x1c4>)
 8001c06:	2206      	movs	r2, #6
 8001c08:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001c0a:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c1c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c32:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001c34:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <HW_TS_Init+0x1c8>)
 8001c36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c3a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f002 fd18 	bl	8004672 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	e00a      	b.n	8001c6e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001c58:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f002 fcf4 	bl	8004656 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	22ff      	movs	r2, #255	; 0xff
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2106      	movs	r1, #6
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f002 fcb0 	bl	80045e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c82:	2003      	movs	r0, #3
 8001c84:	f002 fcc7 	bl	8004616 <HAL_NVIC_EnableIRQ>

  return;
 8001c88:	bf00      	nop
}
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200002fc 	.word	0x200002fc
 8001c94:	40002800 	.word	0x40002800
 8001c98:	20000300 	.word	0x20000300
 8001c9c:	20000301 	.word	0x20000301
 8001ca0:	20000302 	.word	0x20000302
 8001ca4:	20000304 	.word	0x20000304
 8001ca8:	20000258 	.word	0x20000258
 8001cac:	20000254 	.word	0x20000254
 8001cb0:	200001c0 	.word	0x200001c0
 8001cb4:	20000250 	.word	0x20000250
 8001cb8:	58000800 	.word	0x58000800

08001cbc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8001cca:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001cce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	f002 fcad 	bl	8004632 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001cd8:	4b37      	ldr	r3, [pc, #220]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	22ca      	movs	r2, #202	; 0xca
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
 8001ce2:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2253      	movs	r2, #83	; 0x53
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001cec:	79fa      	ldrb	r2, [r7, #7]
 8001cee:	4933      	ldr	r1, [pc, #204]	; (8001dbc <HW_TS_Stop+0x100>)
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4413      	add	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	440b      	add	r3, r1
 8001cfa:	330c      	adds	r3, #12
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d148      	bne.n	8001d96 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fc61 	bl	80015d0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001d0e:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <HW_TS_Stop+0x104>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d14:	7cfb      	ldrb	r3, [r7, #19]
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d135      	bne.n	8001d86 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <HW_TS_Stop+0x108>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d26:	d108      	bne.n	8001d3a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001d28:	bf00      	nop
 8001d2a:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f7      	bne.n	8001d2a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001d4e:	bf00      	nop
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f7      	beq.n	8001d50 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d74:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <HW_TS_Stop+0x10c>)
 8001d78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d7c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001d7e:	2003      	movs	r0, #3
 8001d80:	f002 fc77 	bl	8004672 <HAL_NVIC_ClearPendingIRQ>
 8001d84:	e007      	b.n	8001d96 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HW_TS_Stop+0x110>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	7cfa      	ldrb	r2, [r7, #19]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d001      	beq.n	8001d96 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001d92:	f7ff fd3f 	bl	8001814 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	22ff      	movs	r2, #255	; 0xff
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001da0:	2003      	movs	r0, #3
 8001da2:	f002 fc38 	bl	8004616 <HAL_NVIC_EnableIRQ>
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001db0:	bf00      	nop
}
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	200002fc 	.word	0x200002fc
 8001dbc:	200001c0 	.word	0x200001c0
 8001dc0:	20000250 	.word	0x20000250
 8001dc4:	40002800 	.word	0x40002800
 8001dc8:	58000800 	.word	0x58000800
 8001dcc:	20000251 	.word	0x20000251

08001dd0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001ddc:	79fa      	ldrb	r2, [r7, #7]
 8001dde:	493b      	ldr	r1, [pc, #236]	; (8001ecc <HW_TS_Start+0xfc>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	440b      	add	r3, r1
 8001dea:	330c      	adds	r3, #12
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d103      	bne.n	8001dfc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff60 	bl	8001cbc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8001e00:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e02:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e06:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001e08:	2003      	movs	r0, #3
 8001e0a:	f002 fc12 	bl	8004632 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001e0e:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <HW_TS_Start+0x100>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	22ca      	movs	r2, #202	; 0xca
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24
 8001e18:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <HW_TS_Start+0x100>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2253      	movs	r2, #83	; 0x53
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001e22:	79fa      	ldrb	r2, [r7, #7]
 8001e24:	4929      	ldr	r1, [pc, #164]	; (8001ecc <HW_TS_Start+0xfc>)
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	330c      	adds	r3, #12
 8001e32:	2202      	movs	r2, #2
 8001e34:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001e36:	79fa      	ldrb	r2, [r7, #7]
 8001e38:	4924      	ldr	r1, [pc, #144]	; (8001ecc <HW_TS_Start+0xfc>)
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	3308      	adds	r3, #8
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001e4a:	79fa      	ldrb	r2, [r7, #7]
 8001e4c:	491f      	ldr	r1, [pc, #124]	; (8001ecc <HW_TS_Start+0xfc>)
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	3304      	adds	r3, #4
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fb0b 	bl	800147c <linkTimer>
 8001e66:	4603      	mov	r3, r0
 8001e68:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HW_TS_Start+0x104>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HW_TS_Start+0x108>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	7c7a      	ldrb	r2, [r7, #17]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d002      	beq.n	8001e82 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001e7c:	f7ff fcca 	bl	8001814 <RescheduleTimerList>
 8001e80:	e013      	b.n	8001eaa <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001e82:	79fa      	ldrb	r2, [r7, #7]
 8001e84:	4911      	ldr	r1, [pc, #68]	; (8001ecc <HW_TS_Start+0xfc>)
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	440b      	add	r3, r1
 8001e90:	3308      	adds	r3, #8
 8001e92:	6819      	ldr	r1, [r3, #0]
 8001e94:	8a7b      	ldrh	r3, [r7, #18]
 8001e96:	79fa      	ldrb	r2, [r7, #7]
 8001e98:	1ac9      	subs	r1, r1, r3
 8001e9a:	480c      	ldr	r0, [pc, #48]	; (8001ecc <HW_TS_Start+0xfc>)
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4403      	add	r3, r0
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HW_TS_Start+0x100>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	22ff      	movs	r2, #255	; 0xff
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f002 fbae 	bl	8004616 <HAL_NVIC_EnableIRQ>
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001ec4:	bf00      	nop
}
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200001c0 	.word	0x200001c0
 8001ed0:	200002fc 	.word	0x200002fc
 8001ed4:	20000250 	.word	0x20000250
 8001ed8:	20000251 	.word	0x20000251

08001edc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4798      	blx	r3

  return;
 8001eee:	bf00      	nop
}
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <toggleLed>:
 *      Author: patrick
 */

#include "led.h"

void toggleLed(uint8_t red, uint8_t green, uint8_t blue){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
 8001f02:	460b      	mov	r3, r1
 8001f04:	71bb      	strb	r3, [r7, #6]
 8001f06:	4613      	mov	r3, r2
 8001f08:	717b      	strb	r3, [r7, #5]
	if(red){
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <toggleLed+0x24>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2110      	movs	r1, #16
 8001f14:	4814      	ldr	r0, [pc, #80]	; (8001f68 <toggleLed+0x70>)
 8001f16:	f002 ff9f 	bl	8004e58 <HAL_GPIO_WritePin>
 8001f1a:	e004      	b.n	8001f26 <toggleLed+0x2e>
	}
	else{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	2110      	movs	r1, #16
 8001f20:	4811      	ldr	r0, [pc, #68]	; (8001f68 <toggleLed+0x70>)
 8001f22:	f002 ff99 	bl	8004e58 <HAL_GPIO_WritePin>
	}

	if(blue){
 8001f26:	797b      	ldrb	r3, [r7, #5]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <toggleLed+0x40>
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2101      	movs	r1, #1
 8001f30:	480e      	ldr	r0, [pc, #56]	; (8001f6c <toggleLed+0x74>)
 8001f32:	f002 ff91 	bl	8004e58 <HAL_GPIO_WritePin>
 8001f36:	e004      	b.n	8001f42 <toggleLed+0x4a>
		}
		else{
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	480b      	ldr	r0, [pc, #44]	; (8001f6c <toggleLed+0x74>)
 8001f3e:	f002 ff8b 	bl	8004e58 <HAL_GPIO_WritePin>
		}

	if(green){
 8001f42:	79bb      	ldrb	r3, [r7, #6]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <toggleLed+0x5c>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	4807      	ldr	r0, [pc, #28]	; (8001f6c <toggleLed+0x74>)
 8001f4e:	f002 ff83 	bl	8004e58 <HAL_GPIO_WritePin>
		}
		else{
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
		}
}
 8001f52:	e004      	b.n	8001f5e <toggleLed+0x66>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001f54:	2201      	movs	r2, #1
 8001f56:	2102      	movs	r1, #2
 8001f58:	4804      	ldr	r0, [pc, #16]	; (8001f6c <toggleLed+0x74>)
 8001f5a:	f002 ff7d 	bl	8004e58 <HAL_GPIO_WritePin>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	48001000 	.word	0x48001000
 8001f6c:	48000400 	.word	0x48000400

08001f70 <LL_RCC_HSI48_Enable>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_RCC_HSI48_IsReady>:
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d101      	bne.n	8001faa <LL_RCC_HSI48_IsReady+0x18>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <LL_RCC_HSI48_IsReady+0x1a>
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_RCC_LSE_SetDriveCapability>:
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	f023 0218 	bic.w	r2, r3, #24
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	3220      	adds	r2, #32
 8001ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff8:	4a05      	ldr	r2, [pc, #20]	; (8002010 <LL_HSEM_1StepLock+0x2c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d001      	beq.n	8002002 <LL_HSEM_1StepLock+0x1e>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <LL_HSEM_1StepLock+0x20>
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	80000400 	.word	0x80000400

08002014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  /**
	   * The OPTVERR flag is wrongly set at power on
	   * It shall be cleared before using any HAL_FLASH_xxx() api
	   */
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <main+0x50>)
 800201a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800201e:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002020:	f000 feae 	bl	8002d80 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8002024:	f000 fab2 	bl	800258c <_Z12Reset_Devicev>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002028:	f000 f81e 	bl	8002068 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  Init_Exti( );
 800202c:	f000 fad8 	bl	80025e0 <_Z9Init_Extiv>
  initClk();
 8002030:	f000 fae2 	bl	80025f8 <_Z7initClkv>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002034:	f7ff f8ca 	bl	80011cc <MX_GPIO_Init>
  MX_DMA_Init();
 8002038:	f7ff f893 	bl	8001162 <MX_DMA_Init>
  MX_TIM2_Init();
 800203c:	f000 fd56 	bl	8002aec <MX_TIM2_Init>
  MX_TIM17_Init();
 8002040:	f000 fda2 	bl	8002b88 <MX_TIM17_Init>
  MX_ADC1_Init();
 8002044:	f7fe fca8 	bl	8000998 <MX_ADC1_Init>
  MX_USB_Device_Init();
 8002048:	f010 fe98 	bl	8012d7c <MX_USB_Device_Init>
  MX_RF_Init();
 800204c:	f000 faf0 	bl	8002630 <MX_RF_Init>
  MX_RTC_Init();
 8002050:	f000 fb20 	bl	8002694 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002054:	f00b fcfa 	bl	800da4c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002058:	f7fe fefa 	bl	8000e50 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 800205c:	f00b fd2a 	bl	800dab4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002060:	e7fe      	b.n	8002060 <main+0x4c>
 8002062:	bf00      	nop
 8002064:	58004000 	.word	0x58004000

08002068 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b0ae      	sub	sp, #184	; 0xb8
 800206c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800206e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002072:	2248      	movs	r2, #72	; 0x48
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f011 fbe7 	bl	801384a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800207c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
 800208c:	615a      	str	r2, [r3, #20]
 800208e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	2250      	movs	r2, #80	; 0x50
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f011 fbd7 	bl	801384a <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ba:	f043 0303 	orr.w	r3, r3, #3
 80020be:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80020c0:	f003 fe4c 	bl	8005d5c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff ff76 	bl	8001fb6 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <_Z18SystemClock_Configv+0x180>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020d2:	4a45      	ldr	r2, [pc, #276]	; (80021e8 <_Z18SystemClock_Configv+0x180>)
 80020d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <_Z18SystemClock_Configv+0x180>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80020e6:	2307      	movs	r3, #7
 80020e8:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ee:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020f0:	2301      	movs	r3, #1
 80020f2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020fa:	2340      	movs	r3, #64	; 0x40
 80020fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002106:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800210a:	4618      	mov	r0, r3
 800210c:	f004 f9d6 	bl	80064bc <HAL_RCC_OscConfig>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf14      	ite	ne
 8002116:	2301      	movne	r3, #1
 8002118:	2300      	moveq	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8002120:	f000 f878 	bl	8002214 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002124:	236f      	movs	r3, #111	; 0x6f
 8002126:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002128:	2302      	movs	r3, #2
 800212a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800212c:	2300      	movs	r3, #0
 800212e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002130:	2300      	movs	r3, #0
 8002132:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002134:	2300      	movs	r3, #0
 8002136:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002138:	2300      	movs	r3, #0
 800213a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800213c:	2300      	movs	r3, #0
 800213e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002140:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002144:	2101      	movs	r1, #1
 8002146:	4618      	mov	r0, r3
 8002148:	f004 fd44 	bl	8006bd4 <HAL_RCC_ClockConfig>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf14      	ite	ne
 8002152:	2301      	movne	r3, #1
 8002154:	2300      	moveq	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 800215c:	f000 f85a 	bl	8002214 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002160:	f44f 5374 	mov.w	r3, #15616	; 0x3d00
 8002164:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8002166:	2306      	movs	r3, #6
 8002168:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800216a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002170:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002174:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002176:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800217a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800217c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002180:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002182:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002188:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800218c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800218e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002192:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002194:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002198:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800219a:	2300      	movs	r3, #0
 800219c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800219e:	2310      	movs	r3, #16
 80021a0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	4618      	mov	r0, r3
 80021a6:	f005 f970 	bl	800748a <HAL_RCCEx_PeriphCLKConfig>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <_Z18SystemClock_Configv+0x156>
  {
    Error_Handler();
 80021ba:	f000 f82b 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  //https://community.st.com/s/question/0D50X0000C0wdqe/stm32wb55-ble-hid?t=1591239574627
  LL_HSEM_1StepLock(HSEM, 5 );
 80021be:	2105      	movs	r1, #5
 80021c0:	480a      	ldr	r0, [pc, #40]	; (80021ec <_Z18SystemClock_Configv+0x184>)
 80021c2:	f7ff ff0f 	bl	8001fe4 <LL_HSEM_1StepLock>
  LL_RCC_HSI48_Enable();
 80021c6:	f7ff fed3 	bl	8001f70 <LL_RCC_HSI48_Enable>
  while(!LL_RCC_HSI48_IsReady());
 80021ca:	f7ff fee2 	bl	8001f92 <LL_RCC_HSI48_IsReady>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d000      	beq.n	80021e0 <_Z18SystemClock_Configv+0x178>
 80021de:	e7f4      	b.n	80021ca <_Z18SystemClock_Configv+0x162>
  /* USER CODE END Smps */
}
 80021e0:	bf00      	nop
 80021e2:	37b8      	adds	r7, #184	; 0xb8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	58000400 	.word	0x58000400
 80021ec:	58001400 	.word	0x58001400

080021f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a04      	ldr	r2, [pc, #16]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002202:	f000 fddd 	bl	8002dc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40012c00 	.word	0x40012c00

08002214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002218:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800221a:	e7fe      	b.n	800221a <Error_Handler+0x6>

0800221c <LL_EXTI_DisableIT_0_31>:
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <LL_EXTI_DisableIT_0_31+0x28>)
 8002226:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	43db      	mvns	r3, r3
 800222e:	4905      	ldr	r1, [pc, #20]	; (8002244 <LL_EXTI_DisableIT_0_31+0x28>)
 8002230:	4013      	ands	r3, r2
 8002232:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	58000800 	.word	0x58000800

08002248 <LL_EXTI_DisableIT_32_63>:
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002250:	4b07      	ldr	r3, [pc, #28]	; (8002270 <LL_EXTI_DisableIT_32_63+0x28>)
 8002252:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	43db      	mvns	r3, r3
 800225a:	4905      	ldr	r1, [pc, #20]	; (8002270 <LL_EXTI_DisableIT_32_63+0x28>)
 800225c:	4013      	ands	r3, r2
 800225e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	58000800 	.word	0x58000800

08002274 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800229a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80022ae:	bf00      	nop
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80022bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022cc:	d101      	bne.n	80022d2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80022e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022f2:	d101      	bne.n	80022f8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800230c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002318:	4313      	orrs	r3, r2
 800231a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800231c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002320:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4013      	ands	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002328:	68fb      	ldr	r3, [r7, #12]
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	041b      	lsls	r3, r3, #16
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	605a      	str	r2, [r3, #4]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	605a      	str	r2, [r3, #4]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	041b      	lsls	r3, r3, #16
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	615a      	str	r2, [r3, #20]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	615a      	str	r2, [r3, #20]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	609a      	str	r2, [r3, #8]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	619a      	str	r2, [r3, #24]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <LL_HSEM_1StepLock>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	3220      	adds	r2, #32
 800240c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002410:	4a05      	ldr	r2, [pc, #20]	; (8002428 <LL_HSEM_1StepLock+0x2c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d001      	beq.n	800241a <LL_HSEM_1StepLock+0x1e>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <LL_HSEM_1StepLock+0x20>
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	80000400 	.word	0x80000400

0800242c <_Z6myMainv>:

struct ADC_DATA adc_data;

//uint16_t adc_data[4];

int myMain(void){
 800242c:	b580      	push	{r7, lr}
 800242e:	b0b0      	sub	sp, #192	; 0xc0
 8002430:	af08      	add	r7, sp, #32
		powerMeasSetup();
		HAL_Delay(100);

	#endif
#else
	HAL_TIM_Base_Start_IT(&htim2);
 8002432:	4840      	ldr	r0, [pc, #256]	; (8002534 <_Z6myMainv+0x108>)
 8002434:	f005 fc3a 	bl	8007cac <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, GPIO_PIN_SET);
 8002438:	2201      	movs	r2, #1
 800243a:	2110      	movs	r1, #16
 800243c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002440:	f002 fd0a 	bl	8004e58 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim17);
 8002444:	483c      	ldr	r0, [pc, #240]	; (8002538 <_Z6myMainv+0x10c>)
 8002446:	f005 fbeb 	bl	8007c20 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800244a:	2100      	movs	r1, #0
 800244c:	483a      	ldr	r0, [pc, #232]	; (8002538 <_Z6myMainv+0x10c>)
 800244e:	f005 fcdd 	bl	8007e0c <HAL_TIM_PWM_Start>

	Stepper motor_base(STEPS, AIN1_1_GPIO_Port, AIN1_1_Pin,
			AIN2_1_GPIO_Port, AIN2_1_Pin,
			BIN1_1_GPIO_Port, BIN1_1_Pin,
			BIN2_1_GPIO_Port, BIN2_1_Pin, &adc_data.mag_base, NON_INVERTED);
 8002452:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002456:	2301      	movs	r3, #1
 8002458:	9307      	str	r3, [sp, #28]
 800245a:	4b38      	ldr	r3, [pc, #224]	; (800253c <_Z6myMainv+0x110>)
 800245c:	9306      	str	r3, [sp, #24]
 800245e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002462:	9305      	str	r3, [sp, #20]
 8002464:	4b36      	ldr	r3, [pc, #216]	; (8002540 <_Z6myMainv+0x114>)
 8002466:	9304      	str	r3, [sp, #16]
 8002468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800246c:	9303      	str	r3, [sp, #12]
 800246e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002472:	9302      	str	r3, [sp, #8]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002482:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002486:	f640 0104 	movw	r1, #2052	; 0x804
 800248a:	f7fd fe83 	bl	8000194 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>
	motor_base.setSpeed(12);
 800248e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002492:	210c      	movs	r1, #12
 8002494:	4618      	mov	r0, r3
 8002496:	f7fd febd 	bl	8000214 <_ZN7Stepper8setSpeedEl>
	motor_base.setStepBound(BASE_STEP_RANGE);
 800249a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800249e:	f641 010c 	movw	r1, #6156	; 0x180c
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fd fece 	bl	8000244 <_ZN7Stepper12setStepBoundEl>

	Stepper motor_led(STEPS, AIN1_2_GPIO_Port, AIN1_2_Pin,
				AIN2_2_GPIO_Port, AIN2_2_Pin,
				BIN1_2_GPIO_Port, BIN1_2_Pin,
				BIN2_2_GPIO_Port, BIN2_2_Pin,  &adc_data.mag_led, INVERTED);
 80024a8:	1d38      	adds	r0, r7, #4
 80024aa:	23ff      	movs	r3, #255	; 0xff
 80024ac:	9307      	str	r3, [sp, #28]
 80024ae:	4b25      	ldr	r3, [pc, #148]	; (8002544 <_Z6myMainv+0x118>)
 80024b0:	9306      	str	r3, [sp, #24]
 80024b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024b6:	9305      	str	r3, [sp, #20]
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <_Z6myMainv+0x114>)
 80024ba:	9304      	str	r3, [sp, #16]
 80024bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024c0:	9303      	str	r3, [sp, #12]
 80024c2:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <_Z6myMainv+0x114>)
 80024c4:	9302      	str	r3, [sp, #8]
 80024c6:	2301      	movs	r3, #1
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2302      	movs	r3, #2
 80024d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024d6:	f640 0104 	movw	r1, #2052	; 0x804
 80024da:	f7fd fe5b 	bl	8000194 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>
	motor_led.setSpeed(16);
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	2110      	movs	r1, #16
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fd fe96 	bl	8000214 <_ZN7Stepper8setSpeedEl>
	motor_led.setStepBound(LED_STEP_RANGE);
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	f647 1123 	movw	r1, #31011	; 0x7923
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fd fea8 	bl	8000244 <_ZN7Stepper12setStepBoundEl>

	uint32_t counter = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_data, 4);
 80024fa:	2204      	movs	r2, #4
 80024fc:	490f      	ldr	r1, [pc, #60]	; (800253c <_Z6myMainv+0x110>)
 80024fe:	4812      	ldr	r0, [pc, #72]	; (8002548 <_Z6myMainv+0x11c>)
 8002500:	f000 ffde 	bl	80034c0 <HAL_ADC_Start_DMA>
	HAL_Delay(100);
 8002504:	2064      	movs	r0, #100	; 0x64
 8002506:	f000 fc87 	bl	8002e18 <HAL_Delay>

	while (1)
		  {
			counter += 1;
 800250a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800250e:	3301      	adds	r3, #1
 8002510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
//			while(1){
//				motor_base.honeAxis();
//				motor_base.step(-3078);
//				motor_base.step(-3078);
//			}
			startCal(0, 0.5, 0, 0.3, motor_base, motor_led);
 8002514:	1d3a      	adds	r2, r7, #4
 8002516:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	eddf 1a0b 	vldr	s3, [pc, #44]	; 800254c <_Z6myMainv+0x120>
 8002522:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8002550 <_Z6myMainv+0x124>
 8002526:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800252a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002550 <_Z6myMainv+0x124>
 800252e:	f7fe fccd 	bl	8000ecc <startCal>

			while(1){};
 8002532:	e7fe      	b.n	8002532 <_Z6myMainv+0x106>
 8002534:	20004f6c 	.word	0x20004f6c
 8002538:	20004f20 	.word	0x20004f20
 800253c:	20000308 	.word	0x20000308
 8002540:	48000400 	.word	0x48000400
 8002544:	2000030a 	.word	0x2000030a
 8002548:	20004de0 	.word	0x20004de0
 800254c:	3e99999a 	.word	0x3e99999a
 8002550:	00000000 	.word	0x00000000

08002554 <_Z18Reset_BackupDomainv>:




void Reset_BackupDomain( void )
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8002558:	f7ff feae 	bl	80022b8 <LL_RCC_IsActiveFlag_PINRST>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d006      	beq.n	8002570 <_Z18Reset_BackupDomainv+0x1c>
 8002562:	f7ff febc 	bl	80022de <LL_RCC_IsActiveFlag_SFTRST>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <_Z18Reset_BackupDomainv+0x1c>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <_Z18Reset_BackupDomainv+0x1e>
 8002570:	2300      	movs	r3, #0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d008      	beq.n	8002588 <_Z18Reset_BackupDomainv+0x34>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002576:	f003 fbf1 	bl	8005d5c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800257a:	f003 fbef 	bl	8005d5c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800257e:	f7ff fe79 	bl	8002274 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8002582:	f7ff fe88 	bl	8002296 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8002586:	bf00      	nop
 8002588:	bf00      	nop
}
 800258a:	bd80      	pop	{r7, pc}

0800258c <_Z12Reset_Devicev>:

void Reset_Device( void )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8002590:	f7ff ffe0 	bl	8002554 <_Z18Reset_BackupDomainv>

  Reset_IPCC();
 8002594:	f000 f802 	bl	800259c <_Z10Reset_IPCCv>
#endif

  return;
 8002598:	bf00      	nop
}
 800259a:	bd80      	pop	{r7, pc}

0800259c <_Z10Reset_IPCCv>:

void Reset_IPCC( void )
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80025a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80025a4:	f7ff feae 	bl	8002304 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80025a8:	213f      	movs	r1, #63	; 0x3f
 80025aa:	480c      	ldr	r0, [pc, #48]	; (80025dc <_Z10Reset_IPCCv+0x40>)
 80025ac:	f7ff ff09 	bl	80023c2 <LL_C1_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80025b0:	213f      	movs	r1, #63	; 0x3f
 80025b2:	480a      	ldr	r0, [pc, #40]	; (80025dc <_Z10Reset_IPCCv+0x40>)
 80025b4:	f7ff ff13 	bl	80023de <LL_C2_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80025b8:	213f      	movs	r1, #63	; 0x3f
 80025ba:	4808      	ldr	r0, [pc, #32]	; (80025dc <_Z10Reset_IPCCv+0x40>)
 80025bc:	f7ff febb 	bl	8002336 <LL_C1_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80025c0:	213f      	movs	r1, #63	; 0x3f
 80025c2:	4806      	ldr	r0, [pc, #24]	; (80025dc <_Z10Reset_IPCCv+0x40>)
 80025c4:	f7ff feda 	bl	800237c <LL_C2_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80025c8:	213f      	movs	r1, #63	; 0x3f
 80025ca:	4804      	ldr	r0, [pc, #16]	; (80025dc <_Z10Reset_IPCCv+0x40>)
 80025cc:	f7ff fec5 	bl	800235a <LL_C1_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80025d0:	213f      	movs	r1, #63	; 0x3f
 80025d2:	4802      	ldr	r0, [pc, #8]	; (80025dc <_Z10Reset_IPCCv+0x40>)
 80025d4:	f7ff fee4 	bl	80023a0 <LL_C2_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80025d8:	bf00      	nop
}
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	58000c00 	.word	0x58000c00

080025e0 <_Z9Init_Extiv>:

void Init_Exti( void )
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	f7ff fe18 	bl	800221c <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 80025ec:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80025f0:	f7ff fe2a 	bl	8002248 <LL_EXTI_DisableIT_32_63>

  return;
 80025f4:	bf00      	nop
}
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <_Z7initClkv>:

  return;
}

void initClk (void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b092      	sub	sp, #72	; 0x48
 80025fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef st_oscInit = {0};
 80025fe:	463b      	mov	r3, r7
 8002600:	2248      	movs	r2, #72	; 0x48
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f011 f920 	bl	801384a <memset>

  /* Get mutex */
  LL_HSEM_1StepLock(HSEM, 5);
 800260a:	2105      	movs	r1, #5
 800260c:	4807      	ldr	r0, [pc, #28]	; (800262c <_Z7initClkv+0x34>)
 800260e:	f7ff fef5 	bl	80023fc <LL_HSEM_1StepLock>

  st_oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8002612:	2340      	movs	r3, #64	; 0x40
 8002614:	603b      	str	r3, [r7, #0]
  st_oscInit.HSI48State     = RCC_HSI48_ON; /* Used by USB */
 8002616:	2301      	movs	r3, #1
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_RCC_OscConfig(&st_oscInit);
 800261a:	463b      	mov	r3, r7
 800261c:	4618      	mov	r0, r3
 800261e:	f003 ff4d 	bl	80064bc <HAL_RCC_OscConfig>
}
 8002622:	bf00      	nop
 8002624:	3748      	adds	r7, #72	; 0x48
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	58001400 	.word	0x58001400

08002630 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0

}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_RCC_EnableRTC>:
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800264e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800266e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4313      	orrs	r3, r2
 8002676:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4013      	ands	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002684:	68fb      	ldr	r3, [r7, #12]
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <MX_RTC_Init+0x4c>)
 800269a:	4a12      	ldr	r2, [pc, #72]	; (80026e4 <MX_RTC_Init+0x50>)
 800269c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <MX_RTC_Init+0x4c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80026a4:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <MX_RTC_Init+0x4c>)
 80026a6:	220f      	movs	r2, #15
 80026a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80026aa:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <MX_RTC_Init+0x4c>)
 80026ac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80026b0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <MX_RTC_Init+0x4c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <MX_RTC_Init+0x4c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <MX_RTC_Init+0x4c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <MX_RTC_Init+0x4c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026ca:	4805      	ldr	r0, [pc, #20]	; (80026e0 <MX_RTC_Init+0x4c>)
 80026cc:	f005 f963 	bl	8007996 <HAL_RTC_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80026d6:	f7ff fd9d 	bl	8002214 <Error_Handler>
  }

}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20004eb0 	.word	0x20004eb0
 80026e4:	40002800 	.word	0x40002800

080026e8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a06      	ldr	r2, [pc, #24]	; (8002710 <HAL_RTC_MspInit+0x28>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d105      	bne.n	8002706 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026fa:	f7ff ffa0 	bl	800263e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80026fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002702:	f7ff ffad 	bl	8002660 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40002800 	.word	0x40002800

08002714 <MsgTask>:

char* endOfLine = "\n\r";

#ifndef SOLAR_SENSOR_NODE
void MsgTask(void *argument)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	struct MeasMsg msg;

	while(1){
		// grab message from queue
		osMessageQueueGet (msgQueueHandle, &msg, NULL, osWaitForever);
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <MsgTask+0x28>)
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	f107 010c 	add.w	r1, r7, #12
 8002724:	f04f 33ff 	mov.w	r3, #4294967295
 8002728:	2200      	movs	r2, #0
 800272a:	f00b ff61 	bl	800e5f0 <osMessageQueueGet>

		// operate on said message
		measMsgReceivedFromNode(&msg);
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f804 	bl	8002740 <measMsgReceivedFromNode>
		osMessageQueueGet (msgQueueHandle, &msg, NULL, osWaitForever);
 8002738:	e7f0      	b.n	800271c <MsgTask+0x8>
 800273a:	bf00      	nop
 800273c:	20000294 	.word	0x20000294

08002740 <measMsgReceivedFromNode>:
	}
}
#endif

void measMsgReceivedFromNode(struct MeasMsg* msg){
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

	// send over UART if USB UART active
#if USB_UART_ACTIVE
	int8_t retry = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	73fb      	strb	r3, [r7, #15]
//	CDC_Transmit_FS(position, sizeof(position));
//	taskENTER_CRITICAL();
	memcpy((struct MeasMsg*) &serialMsg.measMsg, msg, sizeof(struct MeasMsg));
 800274c:	2214      	movs	r2, #20
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4811      	ldr	r0, [pc, #68]	; (8002798 <measMsgReceivedFromNode+0x58>)
 8002752:	f011 f86f 	bl	8013834 <memcpy>

	while(CDC_Transmit_FS((uint8_t* ) &serialMsg, sizeof(serialMsg)-2) != USBD_OK){
 8002756:	e00d      	b.n	8002774 <measMsgReceivedFromNode+0x34>
			if(retry == 5){
 8002758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275c:	2b05      	cmp	r3, #5
 800275e:	d102      	bne.n	8002766 <measMsgReceivedFromNode+0x26>
				retry = -1;
 8002760:	23ff      	movs	r3, #255	; 0xff
 8002762:	73fb      	strb	r3, [r7, #15]
				break;
 8002764:	e00d      	b.n	8002782 <measMsgReceivedFromNode+0x42>
			}
	//		osDelay(1);
			HAL_Delay(1);
 8002766:	2001      	movs	r0, #1
 8002768:	f000 fb56 	bl	8002e18 <HAL_Delay>
			retry+=1;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	3301      	adds	r3, #1
 8002770:	b2db      	uxtb	r3, r3
 8002772:	73fb      	strb	r3, [r7, #15]
	while(CDC_Transmit_FS((uint8_t* ) &serialMsg, sizeof(serialMsg)-2) != USBD_OK){
 8002774:	2116      	movs	r1, #22
 8002776:	4808      	ldr	r0, [pc, #32]	; (8002798 <measMsgReceivedFromNode+0x58>)
 8002778:	f010 fbbe 	bl	8012ef8 <CDC_Transmit_FS>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1ea      	bne.n	8002758 <measMsgReceivedFromNode+0x18>

	// TODO check if power rating in table is lower than current one
	//		if so, replace and record current angle measurements

	// TODO if all expected nodes have replied, move to next Spotlight position
	osThreadFlagsSet (defaultTaskHandle, CAL_THREAD_FLAG);
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <measMsgReceivedFromNode+0x5c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2103      	movs	r1, #3
 8002788:	4618      	mov	r0, r3
 800278a:	f00b fa6f 	bl	800dc6c <osThreadFlagsSet>
}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000004 	.word	0x20000004
 800279c:	2000028c 	.word	0x2000028c

080027a0 <LL_AHB3_GRP1_EnableClock>:
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80027a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80027b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027c4:	68fb      	ldr	r3, [r7, #12]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80027d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80027da:	f7ff ffe1 	bl	80027a0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	210f      	movs	r1, #15
 80027e2:	f06f 0001 	mvn.w	r0, #1
 80027e6:	f001 fefc 	bl	80045e2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2105      	movs	r1, #5
 80027ee:	202e      	movs	r0, #46	; 0x2e
 80027f0:	f001 fef7 	bl	80045e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80027f4:	202e      	movs	r0, #46	; 0x2e
 80027f6:	f001 ff0e 	bl	8004616 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	210f      	movs	r1, #15
 80027fe:	202c      	movs	r0, #44	; 0x2c
 8002800:	f001 feef 	bl	80045e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8002804:	2200      	movs	r2, #0
 8002806:	210f      	movs	r1, #15
 8002808:	202d      	movs	r0, #45	; 0x2d
 800280a:	f001 feea 	bl	80045e2 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}

08002812 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800281a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4313      	orrs	r3, r2
 8002828:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800282a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4013      	ands	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002836:	68fb      	ldr	r3, [r7, #12]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08c      	sub	sp, #48	; 0x30
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8002854:	2200      	movs	r2, #0
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	2019      	movs	r0, #25
 800285a:	f001 fec2 	bl	80045e2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800285e:	2019      	movs	r0, #25
 8002860:	f001 fed9 	bl	8004616 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002864:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002868:	f7ff ffd3 	bl	8002812 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800286c:	f107 0208 	add.w	r2, r7, #8
 8002870:	f107 030c 	add.w	r3, r7, #12
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f004 fb80 	bl	8006f7c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800287c:	f004 fb68 	bl	8006f50 <HAL_RCC_GetPCLK2Freq>
 8002880:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <HAL_InitTick+0x8c>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	0c9b      	lsrs	r3, r3, #18
 800288c:	3b01      	subs	r3, #1
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002890:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <HAL_InitTick+0x90>)
 8002892:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <HAL_InitTick+0x94>)
 8002894:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <HAL_InitTick+0x90>)
 8002898:	f240 32e7 	movw	r2, #999	; 0x3e7
 800289c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800289e:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <HAL_InitTick+0x90>)
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_InitTick+0x90>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_InitTick+0x90>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80028b0:	4808      	ldr	r0, [pc, #32]	; (80028d4 <HAL_InitTick+0x90>)
 80028b2:	f005 f95e 	bl	8007b72 <HAL_TIM_Base_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d104      	bne.n	80028c6 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80028bc:	4805      	ldr	r0, [pc, #20]	; (80028d4 <HAL_InitTick+0x90>)
 80028be:	f005 f9f5 	bl	8007cac <HAL_TIM_Base_Start_IT>
 80028c2:	4603      	mov	r3, r0
 80028c4:	e000      	b.n	80028c8 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3730      	adds	r7, #48	; 0x30
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	431bde83 	.word	0x431bde83
 80028d4:	20004ed4 	.word	0x20004ed4
 80028d8:	40012c00 	.word	0x40012c00

080028dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <NMI_Handler+0x4>

080028e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e6:	e7fe      	b.n	80028e6 <HardFault_Handler+0x4>

080028e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028ec:	e7fe      	b.n	80028ec <MemManage_Handler+0x4>

080028ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f2:	e7fe      	b.n	80028f2 <BusFault_Handler+0x4>

080028f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f8:	e7fe      	b.n	80028f8 <UsageFault_Handler+0x4>

080028fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800290c:	4802      	ldr	r0, [pc, #8]	; (8002918 <DMA1_Channel1_IRQHandler+0x10>)
 800290e:	f001 ffe2 	bl	80048d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20004e44 	.word	0x20004e44

0800291c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <ADC1_IRQHandler+0x10>)
 8002922:	f000 fe51 	bl	80035c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20004de0 	.word	0x20004de0

08002930 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <USB_LP_IRQHandler+0x10>)
 8002936:	f002 fba8 	bl	800508a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20006514 	.word	0x20006514

08002944 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800294a:	f005 fb39 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20004ed4 	.word	0x20004ed4

08002958 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800295c:	f002 fa94 	bl	8004e88 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}

08002964 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8002968:	f7fe fff2 	bl	8001950 <HW_TS_RTC_Wakeup_Handler>
}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}

08002970 <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8002974:	f010 f882 	bl	8012a7c <HW_IPCC_Tx_Handler>
  return;
 8002978:	bf00      	nop
}
 800297a:	bd80      	pop	{r7, pc}

0800297c <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8002980:	f010 f822 	bl	80129c8 <HW_IPCC_Rx_Handler>
  return;
 8002984:	bf00      	nop
}
 8002986:	bd80      	pop	{r7, pc}

08002988 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8002988:	b40c      	push	{r2, r3}
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	460a      	mov	r2, r1
 8002994:	71fb      	strb	r3, [r7, #7]
 8002996:	4613      	mov	r3, r2
 8002998:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	b002      	add	sp, #8
 80029a6:	4770      	bx	lr

080029a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80029ac:	4b26      	ldr	r3, [pc, #152]	; (8002a48 <SystemInit+0xa0>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <SystemInit+0xa0>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <SystemInit+0xa0>)
 80029ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80029c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80029da:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80029dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029e6:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <SystemInit+0xa4>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f8:	f023 0305 	bic.w	r3, r3, #5
 80029fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a18:	4a0d      	ldr	r2, [pc, #52]	; (8002a50 <SystemInit+0xa8>)
 8002a1a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a20:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <SystemInit+0xa8>)
 8002a22:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000ed00 	.word	0xe000ed00
 8002a4c:	faf6fefb 	.word	0xfaf6fefb
 8002a50:	22041000 	.word	0x22041000

08002a54 <LL_AHB2_GRP1_EnableClock>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4013      	ands	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a78:	68fb      	ldr	r3, [r7, #12]
}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <LL_APB1_GRP1_EnableClock>:
{
 8002a86:	b480      	push	{r7}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_APB2_GRP1_EnableClock>:
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002adc:	68fb      	ldr	r3, [r7, #12]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002af2:	f107 0310 	add.w	r3, r7, #16
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	609a      	str	r2, [r3, #8]
 8002afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <MX_TIM2_Init+0x98>)
 8002b0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8002b12:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <MX_TIM2_Init+0x98>)
 8002b14:	221f      	movs	r2, #31
 8002b16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b18:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <MX_TIM2_Init+0x98>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002b1e:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <MX_TIM2_Init+0x98>)
 8002b20:	f04f 32ff 	mov.w	r2, #4294967295
 8002b24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <MX_TIM2_Init+0x98>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b2c:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <MX_TIM2_Init+0x98>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b32:	4814      	ldr	r0, [pc, #80]	; (8002b84 <MX_TIM2_Init+0x98>)
 8002b34:	f005 f81d 	bl	8007b72 <HAL_TIM_Base_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002b3e:	f7ff fb69 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b48:	f107 0310 	add.w	r3, r7, #16
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	480d      	ldr	r0, [pc, #52]	; (8002b84 <MX_TIM2_Init+0x98>)
 8002b50:	f005 fc66 	bl	8008420 <HAL_TIM_ConfigClockSource>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002b5a:	f7ff fb5b 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4806      	ldr	r0, [pc, #24]	; (8002b84 <MX_TIM2_Init+0x98>)
 8002b6c:	f006 f8de 	bl	8008d2c <HAL_TIMEx_MasterConfigSynchronization>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b76:	f7ff fb4d 	bl	8002214 <Error_Handler>
  }

}
 8002b7a:	bf00      	nop
 8002b7c:	3720      	adds	r7, #32
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20004f6c 	.word	0x20004f6c

08002b88 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b094      	sub	sp, #80	; 0x50
 8002b8c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	60da      	str	r2, [r3, #12]
 8002b9c:	611a      	str	r2, [r3, #16]
 8002b9e:	615a      	str	r2, [r3, #20]
 8002ba0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ba2:	463b      	mov	r3, r7
 8002ba4:	2234      	movs	r2, #52	; 0x34
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f010 fe4e 	bl	801384a <memset>

  htim17.Instance = TIM17;
 8002bae:	4b31      	ldr	r3, [pc, #196]	; (8002c74 <MX_TIM17_Init+0xec>)
 8002bb0:	4a31      	ldr	r2, [pc, #196]	; (8002c78 <MX_TIM17_Init+0xf0>)
 8002bb2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3199;
 8002bb4:	4b2f      	ldr	r3, [pc, #188]	; (8002c74 <MX_TIM17_Init+0xec>)
 8002bb6:	f640 427f 	movw	r2, #3199	; 0xc7f
 8002bba:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <MX_TIM17_Init+0xec>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8002bc2:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <MX_TIM17_Init+0xec>)
 8002bc4:	2264      	movs	r2, #100	; 0x64
 8002bc6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bc8:	4b2a      	ldr	r3, [pc, #168]	; (8002c74 <MX_TIM17_Init+0xec>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002bce:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <MX_TIM17_Init+0xec>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bd4:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <MX_TIM17_Init+0xec>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002bda:	4826      	ldr	r0, [pc, #152]	; (8002c74 <MX_TIM17_Init+0xec>)
 8002bdc:	f004 ffc9 	bl	8007b72 <HAL_TIM_Base_Init>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002be6:	f7ff fb15 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002bea:	4822      	ldr	r0, [pc, #136]	; (8002c74 <MX_TIM17_Init+0xec>)
 8002bec:	f005 f8ac 	bl	8007d48 <HAL_TIM_PWM_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002bf6:	f7ff fb0d 	bl	8002214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bfa:	2360      	movs	r3, #96	; 0x60
 8002bfc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 1;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c02:	2300      	movs	r3, #0
 8002c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c06:	2300      	movs	r3, #0
 8002c08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4815      	ldr	r0, [pc, #84]	; (8002c74 <MX_TIM17_Init+0xec>)
 8002c20:	f005 faee 	bl	8008200 <HAL_TIM_PWM_ConfigChannel>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002c2a:	f7ff faf3 	bl	8002214 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002c50:	463b      	mov	r3, r7
 8002c52:	4619      	mov	r1, r3
 8002c54:	4807      	ldr	r0, [pc, #28]	; (8002c74 <MX_TIM17_Init+0xec>)
 8002c56:	f006 f8c9 	bl	8008dec <HAL_TIMEx_ConfigBreakDeadTime>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8002c60:	f7ff fad8 	bl	8002214 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 8002c64:	4803      	ldr	r0, [pc, #12]	; (8002c74 <MX_TIM17_Init+0xec>)
 8002c66:	f000 f825 	bl	8002cb4 <HAL_TIM_MspPostInit>

}
 8002c6a:	bf00      	nop
 8002c6c:	3750      	adds	r7, #80	; 0x50
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20004f20 	.word	0x20004f20
 8002c78:	40014800 	.word	0x40014800

08002c7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8c:	d103      	bne.n	8002c96 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c8e:	2001      	movs	r0, #1
 8002c90:	f7ff fef9 	bl	8002a86 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002c94:	e008      	b.n	8002ca8 <HAL_TIM_Base_MspInit+0x2c>
  else if(tim_baseHandle->Instance==TIM17)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <HAL_TIM_Base_MspInit+0x34>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d103      	bne.n	8002ca8 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002ca0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002ca4:	f7ff ff08 	bl	8002ab8 <LL_APB2_GRP1_EnableClock>
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40014800 	.word	0x40014800

08002cb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM17)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <HAL_TIM_MspPostInit+0x54>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d113      	bne.n	8002cfe <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd6:	2002      	movs	r0, #2
 8002cd8:	f7ff febc 	bl	8002a54 <LL_AHB2_GRP1_EnableClock>
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8002cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8002cee:	230e      	movs	r3, #14
 8002cf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8002cf2:	f107 030c 	add.w	r3, r7, #12
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4804      	ldr	r0, [pc, #16]	; (8002d0c <HAL_TIM_MspPostInit+0x58>)
 8002cfa:	f001 ff3d 	bl	8004b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002cfe:	bf00      	nop
 8002d00:	3720      	adds	r7, #32
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40014800 	.word	0x40014800
 8002d0c:	48000400 	.word	0x48000400

08002d10 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002d10:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d12:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d14:	3304      	adds	r3, #4

08002d16 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d16:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d18:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002d1a:	d3f9      	bcc.n	8002d10 <CopyDataInit>
  bx lr
 8002d1c:	4770      	bx	lr

08002d1e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002d1e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002d20:	3004      	adds	r0, #4

08002d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002d22:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002d24:	d3fb      	bcc.n	8002d1e <FillZerobss>
  bx lr
 8002d26:	4770      	bx	lr

08002d28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d28:	480c      	ldr	r0, [pc, #48]	; (8002d5c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002d2a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d2c:	f7ff fe3c 	bl	80029a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002d30:	480b      	ldr	r0, [pc, #44]	; (8002d60 <LoopForever+0x8>)
 8002d32:	490c      	ldr	r1, [pc, #48]	; (8002d64 <LoopForever+0xc>)
 8002d34:	4a0c      	ldr	r2, [pc, #48]	; (8002d68 <LoopForever+0x10>)
 8002d36:	2300      	movs	r3, #0
 8002d38:	f7ff ffed 	bl	8002d16 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002d3c:	480b      	ldr	r0, [pc, #44]	; (8002d6c <LoopForever+0x14>)
 8002d3e:	490c      	ldr	r1, [pc, #48]	; (8002d70 <LoopForever+0x18>)
 8002d40:	2300      	movs	r3, #0
 8002d42:	f7ff ffee 	bl	8002d22 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002d46:	480b      	ldr	r0, [pc, #44]	; (8002d74 <LoopForever+0x1c>)
 8002d48:	490b      	ldr	r1, [pc, #44]	; (8002d78 <LoopForever+0x20>)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f7ff ffe9 	bl	8002d22 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d50:	f010 fd4c 	bl	80137ec <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002d54:	f7ff f95e 	bl	8002014 <main>

08002d58 <LoopForever>:

LoopForever:
  b LoopForever
 8002d58:	e7fe      	b.n	8002d58 <LoopForever>
 8002d5a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002d5c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002d60:	20000004 	.word	0x20000004
 8002d64:	200001c0 	.word	0x200001c0
 8002d68:	08013dd0 	.word	0x08013dd0
  INIT_BSS _sbss, _ebss
 8002d6c:	20000270 	.word	0x20000270
 8002d70:	20006788 	.word	0x20006788
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002d74:	200300e0 	.word	0x200300e0
 8002d78:	20030b57 	.word	0x20030b57

08002d7c <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d7c:	e7fe      	b.n	8002d7c <AES1_IRQHandler>
	...

08002d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <HAL_Init+0x3c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a0b      	ldr	r2, [pc, #44]	; (8002dbc <HAL_Init+0x3c>)
 8002d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d96:	2003      	movs	r0, #3
 8002d98:	f001 fc18 	bl	80045cc <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7ff fd51 	bl	8002844 <HAL_InitTick>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	71fb      	strb	r3, [r7, #7]
 8002dac:	e001      	b.n	8002db2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dae:	f7ff fd10 	bl	80027d2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002db2:	79fb      	ldrb	r3, [r7, #7]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	58004000 	.word	0x58004000

08002dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_IncTick+0x20>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_IncTick+0x24>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <HAL_IncTick+0x24>)
 8002dd2:	6013      	str	r3, [r2, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000024 	.word	0x20000024
 8002de4:	20004fb8 	.word	0x20004fb8

08002de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return uwTick;
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <HAL_GetTick+0x14>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20004fb8 	.word	0x20004fb8

08002e00 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <HAL_GetTickPrio+0x14>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000020 	.word	0x20000020

08002e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002e20:	f7ff ffe2 	bl	8002de8 <HAL_GetTick>
 8002e24:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d005      	beq.n	8002e3e <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_Delay+0x40>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8002e3e:	bf00      	nop
 8002e40:	f7ff ffd2 	bl	8002de8 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d8f7      	bhi.n	8002e40 <HAL_Delay+0x28>
    {
    }
  }
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000024 	.word	0x20000024

08002e5c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	609a      	str	r2, [r3, #8]
#endif
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3360      	adds	r3, #96	; 0x60
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <LL_ADC_SetOffset+0x44>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002efc:	bf00      	nop
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	03fff000 	.word	0x03fff000

08002f0c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3360      	adds	r3, #96	; 0x60
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3360      	adds	r3, #96	; 0x60
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f86:	2300      	movs	r3, #0
#endif
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3330      	adds	r3, #48	; 0x30
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	4413      	add	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	211f      	movs	r1, #31
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	0e9b      	lsrs	r3, r3, #26
 8002fcc:	f003 011f 	and.w	r1, r3, #31
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
#endif
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003014:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800302e:	b480      	push	{r7}
 8003030:	b087      	sub	sp, #28
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3314      	adds	r3, #20
 800303e:	461a      	mov	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	0e5b      	lsrs	r3, r3, #25
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	4413      	add	r3, r2
 800304c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	0d1b      	lsrs	r3, r3, #20
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	2107      	movs	r1, #7
 800305c:	fa01 f303 	lsl.w	r3, r1, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	401a      	ands	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	0d1b      	lsrs	r3, r3, #20
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	fa01 f303 	lsl.w	r3, r1, r3
 8003072:	431a      	orrs	r2, r3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8003078:	bf00      	nop
 800307a:	371c      	adds	r7, #28
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309c:	43db      	mvns	r3, r3
 800309e:	401a      	ands	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0318 	and.w	r3, r3, #24
 80030a6:	4908      	ldr	r1, [pc, #32]	; (80030c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030a8:	40d9      	lsrs	r1, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	400b      	ands	r3, r1
 80030ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b2:	431a      	orrs	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	0007ffff 	.word	0x0007ffff

080030cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80030dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6093      	str	r3, [r2, #8]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003104:	d101      	bne.n	800310a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003128:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800312c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003154:	d101      	bne.n	800315a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003178:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800317c:	f043 0201 	orr.w	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <LL_ADC_IsEnabled+0x18>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <LL_ADC_IsEnabled+0x1a>
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031ca:	f043 0204 	orr.w	r2, r3, #4
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d101      	bne.n	80031f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b08      	cmp	r3, #8
 8003216:	d101      	bne.n	800321c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8003238:	2300      	movs	r3, #0
 800323a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800323c:	2300      	movs	r3, #0
 800323e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e12c      	b.n	80034a4 <HAL_ADC_Init+0x278>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7fd fc33 	bl	8000ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff3d 	bl	80030f0 <LL_ADC_IsDeepPowerDownEnabled>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d004      	beq.n	8003286 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff23 	bl	80030cc <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff ff58 	bl	8003140 <LL_ADC_IsInternalRegulatorEnabled>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d113      	bne.n	80032be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ff3c 	bl	8003118 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80032a0:	4b82      	ldr	r3, [pc, #520]	; (80034ac <HAL_ADC_Init+0x280>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	099b      	lsrs	r3, r3, #6
 80032a6:	4a82      	ldr	r2, [pc, #520]	; (80034b0 <HAL_ADC_Init+0x284>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	099b      	lsrs	r3, r3, #6
 80032ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032b0:	e002      	b.n	80032b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f9      	bne.n	80032b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff ff3c 	bl	8003140 <LL_ADC_IsInternalRegulatorEnabled>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10d      	bne.n	80032ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff ff75 	bl	80031de <LL_ADC_REG_IsConversionOngoing>
 80032f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 80c7 	bne.w	8003492 <HAL_ADC_Init+0x266>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f040 80c3 	bne.w	8003492 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003314:	f043 0202 	orr.w	r2, r3, #2
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ff35 	bl	8003190 <LL_ADC_IsEnabled>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10b      	bne.n	8003344 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800332c:	4861      	ldr	r0, [pc, #388]	; (80034b4 <HAL_ADC_Init+0x288>)
 800332e:	f7ff ff2f 	bl	8003190 <LL_ADC_IsEnabled>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d105      	bne.n	8003344 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4619      	mov	r1, r3
 800333e:	485e      	ldr	r0, [pc, #376]	; (80034b8 <HAL_ADC_Init+0x28c>)
 8003340:	f7ff fd8c 	bl	8002e5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	7e5b      	ldrb	r3, [r3, #25]
 8003348:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800334e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003354:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800335a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003362:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8003364:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d106      	bne.n	8003384 <HAL_ADC_Init+0x158>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	3b01      	subs	r3, #1
 800337c:	045b      	lsls	r3, r3, #17
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	2b00      	cmp	r3, #0
 800338a:	d009      	beq.n	80033a0 <HAL_ADC_Init+0x174>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	4b45      	ldr	r3, [pc, #276]	; (80034bc <HAL_ADC_Init+0x290>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	69b9      	ldr	r1, [r7, #24]
 80033b0:	430b      	orrs	r3, r1
 80033b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff10 	bl	80031de <LL_ADC_REG_IsConversionOngoing>
 80033be:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff1d 	bl	8003204 <LL_ADC_INJ_IsConversionOngoing>
 80033ca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d13d      	bne.n	800344e <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d13a      	bne.n	800344e <HAL_ADC_Init+0x222>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033dc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033e4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033f4:	f023 0302 	bic.w	r3, r3, #2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	69b9      	ldr	r1, [r7, #24]
 80033fe:	430b      	orrs	r3, r1
 8003400:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003408:	2b01      	cmp	r3, #1
 800340a:	d118      	bne.n	800343e <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003416:	f023 0304 	bic.w	r3, r3, #4
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003422:	4311      	orrs	r1, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003428:	4311      	orrs	r1, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800342e:	430a      	orrs	r2, r1
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	611a      	str	r2, [r3, #16]
 800343c:	e007      	b.n	800344e <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d10c      	bne.n	8003470 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	f023 010f 	bic.w	r1, r3, #15
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	1e5a      	subs	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
 800346e:	e007      	b.n	8003480 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 020f 	bic.w	r2, r2, #15
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003484:	f023 0303 	bic.w	r3, r3, #3
 8003488:	f043 0201 	orr.w	r2, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	655a      	str	r2, [r3, #84]	; 0x54
 8003490:	e007      	b.n	80034a2 <HAL_ADC_Init+0x276>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003496:	f043 0210 	orr.w	r2, r3, #16
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3720      	adds	r7, #32
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	2000001c 	.word	0x2000001c
 80034b0:	053e2d63 	.word	0x053e2d63
 80034b4:	50040000 	.word	0x50040000
 80034b8:	50040300 	.word	0x50040300
 80034bc:	fff0c007 	.word	0xfff0c007

080034c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fe84 	bl	80031de <LL_ADC_REG_IsConversionOngoing>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d167      	bne.n	80035ac <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_ADC_Start_DMA+0x2a>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e063      	b.n	80035b2 <HAL_ADC_Start_DMA+0xf2>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 fe0a 	bl	800410c <ADC_Enable>
 80034f8:	4603      	mov	r3, r0
 80034fa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d14f      	bne.n	80035a2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003506:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800350a:	f023 0301 	bic.w	r3, r3, #1
 800350e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d006      	beq.n	8003530 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003526:	f023 0206 	bic.w	r2, r3, #6
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	659a      	str	r2, [r3, #88]	; 0x58
 800352e:	e002      	b.n	8003536 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	4a20      	ldr	r2, [pc, #128]	; (80035bc <HAL_ADC_Start_DMA+0xfc>)
 800353c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003542:	4a1f      	ldr	r2, [pc, #124]	; (80035c0 <HAL_ADC_Start_DMA+0x100>)
 8003544:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354a:	4a1e      	ldr	r2, [pc, #120]	; (80035c4 <HAL_ADC_Start_DMA+0x104>)
 800354c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	221c      	movs	r2, #28
 8003554:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0210 	orr.w	r2, r2, #16
 800356c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0201 	orr.w	r2, r2, #1
 800357c:	60da      	str	r2, [r3, #12]
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3340      	adds	r3, #64	; 0x40
 8003588:	4619      	mov	r1, r3
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f001 f927 	bl	80047e0 <HAL_DMA_Start_IT>
 8003592:	4603      	mov	r3, r0
 8003594:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fe0b 	bl	80031b6 <LL_ADC_REG_StartConversion>
 80035a0:	e006      	b.n	80035b0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80035aa:	e001      	b.n	80035b0 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035ac:	2302      	movs	r3, #2
 80035ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	08004201 	.word	0x08004201
 80035c0:	080042d9 	.word	0x080042d9
 80035c4:	080042f5 	.word	0x080042f5

080035c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80035d0:	2300      	movs	r3, #0
 80035d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d017      	beq.n	800361e <HAL_ADC_IRQHandler+0x56>
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d012      	beq.n	800361e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b00      	cmp	r3, #0
 8003602:	d105      	bne.n	8003610 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003608:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 feb1 	bl	8004378 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2202      	movs	r2, #2
 800361c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d004      	beq.n	8003632 <HAL_ADC_IRQHandler+0x6a>
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003638:	2b00      	cmp	r3, #0
 800363a:	d05d      	beq.n	80036f8 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d058      	beq.n	80036f8 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	d105      	bne.n	800365e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003656:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff fc83 	bl	8002f6e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d03d      	beq.n	80036ea <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if defined (ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367c:	d035      	beq.n	80036ea <HAL_ADC_IRQHandler+0x122>
#endif
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b08      	cmp	r3, #8
 800368a:	d12e      	bne.n	80036ea <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fda4 	bl	80031de <LL_ADC_REG_IsConversionOngoing>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d11a      	bne.n	80036d2 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 020c 	bic.w	r2, r2, #12
 80036aa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d112      	bne.n	80036ea <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	f043 0201 	orr.w	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
 80036d0:	e00b      	b.n	80036ea <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	f043 0210 	orr.w	r2, r3, #16
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f922 	bl	8003934 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	220c      	movs	r2, #12
 80036f6:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d004      	beq.n	800370c <HAL_ADC_IRQHandler+0x144>
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003712:	2b00      	cmp	r3, #0
 8003714:	d074      	beq.n	8003800 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d06f      	beq.n	8003800 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b00      	cmp	r3, #0
 800372a:	d105      	bne.n	8003738 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003730:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff fc63 	bl	8003008 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003742:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff fc10 	bl	8002f6e <LL_ADC_REG_IsTriggerSourceSWStart>
 800374e:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d049      	beq.n	80037f2 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <HAL_ADC_IRQHandler+0x1b0>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d041      	beq.n	80037f2 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003774:	2b00      	cmp	r3, #0
 8003776:	d13c      	bne.n	80037f2 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	d135      	bne.n	80037f2 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d12e      	bne.n	80037f2 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fd33 	bl	8003204 <LL_ADC_INJ_IsConversionOngoing>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d11a      	bne.n	80037da <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037b2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d112      	bne.n	80037f2 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	f043 0201 	orr.w	r2, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	655a      	str	r2, [r3, #84]	; 0x54
 80037d8:	e00b      	b.n	80037f2 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037de:	f043 0210 	orr.w	r2, r3, #16
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ea:	f043 0201 	orr.w	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fd98 	bl	8004328 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2260      	movs	r2, #96	; 0x60
 80037fe:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003806:	2b00      	cmp	r3, #0
 8003808:	d011      	beq.n	800382e <HAL_ADC_IRQHandler+0x266>
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00c      	beq.n	800382e <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003818:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f89b 	bl	800395c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2280      	movs	r2, #128	; 0x80
 800382c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003834:	2b00      	cmp	r3, #0
 8003836:	d012      	beq.n	800385e <HAL_ADC_IRQHandler+0x296>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00d      	beq.n	800385e <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003846:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fd7e 	bl	8004350 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f44f 7280 	mov.w	r2, #256	; 0x100
 800385c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003864:	2b00      	cmp	r3, #0
 8003866:	d012      	beq.n	800388e <HAL_ADC_IRQHandler+0x2c6>
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00d      	beq.n	800388e <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003876:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fd70 	bl	8004364 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800388c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02b      	beq.n	80038f0 <HAL_ADC_IRQHandler+0x328>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f003 0310 	and.w	r3, r3, #16
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d026      	beq.n	80038f0 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80038aa:	2301      	movs	r3, #1
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	e009      	b.n	80038c4 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fb99 	bl	8002fec <LL_ADC_REG_GetDMATransfer>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 80038c0:	2301      	movs	r3, #1
 80038c2:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d10e      	bne.n	80038e8 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ce:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	f043 0202 	orr.w	r2, r3, #2
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f844 	bl	8003970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2210      	movs	r2, #16
 80038ee:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d018      	beq.n	800392c <HAL_ADC_IRQHandler+0x364>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003900:	2b00      	cmp	r3, #0
 8003902:	d013      	beq.n	800392c <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	f043 0208 	orr.w	r2, r3, #8
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003924:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fd08 	bl	800433c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 800392c:	bf00      	nop
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b0b6      	sub	sp, #216	; 0xd8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x22>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e39e      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x760>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff fc13 	bl	80031de <LL_ADC_REG_IsConversionOngoing>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f040 8383 	bne.w	80040c6 <HAL_ADC_ConfigChannel+0x742>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	f7ff fae1 	bl	8002f94 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fc01 	bl	80031de <LL_ADC_REG_IsConversionOngoing>
 80039dc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fc0d 	bl	8003204 <LL_ADC_INJ_IsConversionOngoing>
 80039ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f040 81a6 	bne.w	8003d44 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f040 81a1 	bne.w	8003d44 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6819      	ldr	r1, [r3, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f7ff fb0d 	bl	800302e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	08db      	lsrs	r3, r3, #3
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d00a      	beq.n	8003a4c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6919      	ldr	r1, [r3, #16]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a46:	f7ff fa3d 	bl	8002ec4 <LL_ADC_SetOffset>
 8003a4a:	e17b      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2100      	movs	r1, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff fa5a 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0xf4>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2100      	movs	r1, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fa4f 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	0e9b      	lsrs	r3, r3, #26
 8003a72:	f003 021f 	and.w	r2, r3, #31
 8003a76:	e01e      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0x132>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fa44 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a8e:	fa93 f3a3 	rbit	r3, r3
 8003a92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8003a96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003a9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8003aa6:	2320      	movs	r3, #32
 8003aa8:	e004      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8003aaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003aae:	fab3 f383 	clz	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x14a>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	0e9b      	lsrs	r3, r3, #26
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	e018      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x17c>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003aea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003af2:	2320      	movs	r3, #32
 8003af4:	e004      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8003af6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003afa:	fab3 f383 	clz	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d106      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fa13 	bl	8002f38 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2101      	movs	r1, #1
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff f9f7 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x1ba>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff f9ec 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003b34:	4603      	mov	r3, r0
 8003b36:	0e9b      	lsrs	r3, r3, #26
 8003b38:	f003 021f 	and.w	r2, r3, #31
 8003b3c:	e01e      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x1f8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2101      	movs	r1, #1
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff f9e1 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b54:	fa93 f3a3 	rbit	r3, r3
 8003b58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003b5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003b64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003b6c:	2320      	movs	r3, #32
 8003b6e:	e004      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003b70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b74:	fab3 f383 	clz	r3, r3
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d105      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x210>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0e9b      	lsrs	r3, r3, #26
 8003b8e:	f003 031f 	and.w	r3, r3, #31
 8003b92:	e018      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x242>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003ba8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003bb8:	2320      	movs	r3, #32
 8003bba:	e004      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bc0:	fab3 f383 	clz	r3, r3
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d106      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff f9b0 	bl	8002f38 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2102      	movs	r1, #2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff f994 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x280>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff f989 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	0e9b      	lsrs	r3, r3, #26
 8003bfe:	f003 021f 	and.w	r2, r3, #31
 8003c02:	e01e      	b.n	8003c42 <HAL_ADC_ConfigChannel+0x2be>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2102      	movs	r1, #2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff f97e 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c1a:	fa93 f3a3 	rbit	r3, r3
 8003c1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003c22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003c2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8003c32:	2320      	movs	r3, #32
 8003c34:	e004      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003c36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c3a:	fab3 f383 	clz	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d105      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x2d6>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	0e9b      	lsrs	r3, r3, #26
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	e016      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x304>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c66:	fa93 f3a3 	rbit	r3, r3
 8003c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003c72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003c7a:	2320      	movs	r3, #32
 8003c7c:	e004      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c82:	fab3 f383 	clz	r3, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d106      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2200      	movs	r2, #0
 8003c92:	2102      	movs	r1, #2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff f94f 	bl	8002f38 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2103      	movs	r1, #3
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff f933 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <HAL_ADC_ConfigChannel+0x342>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2103      	movs	r1, #3
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff f928 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	0e9b      	lsrs	r3, r3, #26
 8003cc0:	f003 021f 	and.w	r2, r3, #31
 8003cc4:	e017      	b.n	8003cf6 <HAL_ADC_ConfigChannel+0x372>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2103      	movs	r1, #3
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff f91d 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd8:	fa93 f3a3 	rbit	r3, r3
 8003cdc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ce0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003ce2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003ce8:	2320      	movs	r3, #32
 8003cea:	e003      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003cec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d105      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x38a>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	0e9b      	lsrs	r3, r3, #26
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	e011      	b.n	8003d32 <HAL_ADC_ConfigChannel+0x3ae>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d16:	fa93 f3a3 	rbit	r3, r3
 8003d1a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003d26:	2320      	movs	r3, #32
 8003d28:	e003      	b.n	8003d32 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2c:	fab3 f383 	clz	r3, r3
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d106      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2103      	movs	r1, #3
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff f8fa 	bl	8002f38 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fa21 	bl	8003190 <LL_ADC_IsEnabled>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f040 81c1 	bne.w	80040d8 <HAL_ADC_ConfigChannel+0x754>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6819      	ldr	r1, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	461a      	mov	r2, r3
 8003d64:	f7ff f98e 	bl	8003084 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4a8e      	ldr	r2, [pc, #568]	; (8003fa8 <HAL_ADC_ConfigChannel+0x624>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	f040 8130 	bne.w	8003fd4 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10b      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x418>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	0e9b      	lsrs	r3, r3, #26
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	f003 031f 	and.w	r3, r3, #31
 8003d90:	2b09      	cmp	r3, #9
 8003d92:	bf94      	ite	ls
 8003d94:	2301      	movls	r3, #1
 8003d96:	2300      	movhi	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e019      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x44c>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da4:	fa93 f3a3 	rbit	r3, r3
 8003da8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003daa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003db4:	2320      	movs	r3, #32
 8003db6:	e003      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003db8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dba:	fab3 f383 	clz	r3, r3
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2b09      	cmp	r3, #9
 8003dc8:	bf94      	ite	ls
 8003dca:	2301      	movls	r3, #1
 8003dcc:	2300      	movhi	r3, #0
 8003dce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d079      	beq.n	8003ec8 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d107      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x46c>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	0e9b      	lsrs	r3, r3, #26
 8003de6:	3301      	adds	r3, #1
 8003de8:	069b      	lsls	r3, r3, #26
 8003dea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dee:	e015      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x498>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df8:	fa93 f3a3 	rbit	r3, r3
 8003dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e00:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003e08:	2320      	movs	r3, #32
 8003e0a:	e003      	b.n	8003e14 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	3301      	adds	r3, #1
 8003e16:	069b      	lsls	r3, r3, #26
 8003e18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d109      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x4b8>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	0e9b      	lsrs	r3, r3, #26
 8003e2e:	3301      	adds	r3, #1
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	2101      	movs	r1, #1
 8003e36:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3a:	e017      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x4e8>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e44:	fa93 f3a3 	rbit	r3, r3
 8003e48:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e4c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003e54:	2320      	movs	r3, #32
 8003e56:	e003      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	3301      	adds	r3, #1
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	2101      	movs	r1, #1
 8003e68:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6c:	ea42 0103 	orr.w	r1, r2, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x50e>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	0e9b      	lsrs	r3, r3, #26
 8003e82:	3301      	adds	r3, #1
 8003e84:	f003 021f 	and.w	r2, r3, #31
 8003e88:	4613      	mov	r3, r2
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	4413      	add	r3, r2
 8003e8e:	051b      	lsls	r3, r3, #20
 8003e90:	e018      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x540>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9a:	fa93 f3a3 	rbit	r3, r3
 8003e9e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003eaa:	2320      	movs	r3, #32
 8003eac:	e003      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	f003 021f 	and.w	r2, r3, #31
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	4413      	add	r3, r2
 8003ec2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	e080      	b.n	8003fca <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d107      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x560>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	0e9b      	lsrs	r3, r3, #26
 8003eda:	3301      	adds	r3, #1
 8003edc:	069b      	lsls	r3, r3, #26
 8003ede:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ee2:	e015      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x58c>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	fa93 f3a3 	rbit	r3, r3
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003efc:	2320      	movs	r3, #32
 8003efe:	e003      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f02:	fab3 f383 	clz	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	3301      	adds	r3, #1
 8003f0a:	069b      	lsls	r3, r3, #26
 8003f0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d109      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x5ac>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	0e9b      	lsrs	r3, r3, #26
 8003f22:	3301      	adds	r3, #1
 8003f24:	f003 031f 	and.w	r3, r3, #31
 8003f28:	2101      	movs	r1, #1
 8003f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2e:	e017      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x5dc>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	fa93 f3a3 	rbit	r3, r3
 8003f3c:	61fb      	str	r3, [r7, #28]
  return result;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003f48:	2320      	movs	r3, #32
 8003f4a:	e003      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	fab3 f383 	clz	r3, r3
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	3301      	adds	r3, #1
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f60:	ea42 0103 	orr.w	r1, r2, r3
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10d      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x608>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	0e9b      	lsrs	r3, r3, #26
 8003f76:	3301      	adds	r3, #1
 8003f78:	f003 021f 	and.w	r2, r3, #31
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	4413      	add	r3, r2
 8003f82:	3b1e      	subs	r3, #30
 8003f84:	051b      	lsls	r3, r3, #20
 8003f86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	e01d      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x644>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	fa93 f3a3 	rbit	r3, r3
 8003f98:	613b      	str	r3, [r7, #16]
  return result;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d103      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003fa4:	2320      	movs	r3, #32
 8003fa6:	e005      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x630>
 8003fa8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	fab3 f383 	clz	r3, r3
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	f003 021f 	and.w	r2, r3, #31
 8003fba:	4613      	mov	r3, r2
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3b1e      	subs	r3, #30
 8003fc2:	051b      	lsls	r3, r3, #20
 8003fc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	6892      	ldr	r2, [r2, #8]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	f7ff f82d 	bl	800302e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4b44      	ldr	r3, [pc, #272]	; (80040ec <HAL_ADC_ConfigChannel+0x768>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d07b      	beq.n	80040d8 <HAL_ADC_ConfigChannel+0x754>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fe0:	4843      	ldr	r0, [pc, #268]	; (80040f0 <HAL_ADC_ConfigChannel+0x76c>)
 8003fe2:	f7fe ff61 	bl	8002ea8 <LL_ADC_GetCommonPathInternalCh>
 8003fe6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fea:	4842      	ldr	r0, [pc, #264]	; (80040f4 <HAL_ADC_ConfigChannel+0x770>)
 8003fec:	f7ff f8d0 	bl	8003190 <LL_ADC_IsEnabled>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d15d      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x72e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a3f      	ldr	r2, [pc, #252]	; (80040f8 <HAL_ADC_ConfigChannel+0x774>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d126      	bne.n	800404e <HAL_ADC_ConfigChannel+0x6ca>
 8004000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004004:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d120      	bne.n	800404e <HAL_ADC_ConfigChannel+0x6ca>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a38      	ldr	r2, [pc, #224]	; (80040f4 <HAL_ADC_ConfigChannel+0x770>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d160      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004016:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800401a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800401e:	4619      	mov	r1, r3
 8004020:	4833      	ldr	r0, [pc, #204]	; (80040f0 <HAL_ADC_ConfigChannel+0x76c>)
 8004022:	f7fe ff2e 	bl	8002e82 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004026:	4b35      	ldr	r3, [pc, #212]	; (80040fc <HAL_ADC_ConfigChannel+0x778>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	099b      	lsrs	r3, r3, #6
 800402c:	4a34      	ldr	r2, [pc, #208]	; (8004100 <HAL_ADC_ConfigChannel+0x77c>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	099a      	lsrs	r2, r3, #6
 8004034:	4613      	mov	r3, r2
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800403e:	e002      	b.n	8004046 <HAL_ADC_ConfigChannel+0x6c2>
              {
                wait_loop_index--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3b01      	subs	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f9      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x6bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800404c:	e044      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x754>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a2c      	ldr	r2, [pc, #176]	; (8004104 <HAL_ADC_ConfigChannel+0x780>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d113      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x6fc>
 8004058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800405c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10d      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x6fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <HAL_ADC_ConfigChannel+0x770>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d134      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800406e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004076:	4619      	mov	r1, r3
 8004078:	481d      	ldr	r0, [pc, #116]	; (80040f0 <HAL_ADC_ConfigChannel+0x76c>)
 800407a:	f7fe ff02 	bl	8002e82 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800407e:	e02b      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x754>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a20      	ldr	r2, [pc, #128]	; (8004108 <HAL_ADC_ConfigChannel+0x784>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d126      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x754>
 800408a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800408e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d120      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x754>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a16      	ldr	r2, [pc, #88]	; (80040f4 <HAL_ADC_ConfigChannel+0x770>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d11b      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80040a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040a8:	4619      	mov	r1, r3
 80040aa:	4811      	ldr	r0, [pc, #68]	; (80040f0 <HAL_ADC_ConfigChannel+0x76c>)
 80040ac:	f7fe fee9 	bl	8002e82 <LL_ADC_SetCommonPathInternalCh>
 80040b0:	e012      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x754>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f043 0220 	orr.w	r2, r3, #32
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80040c4:	e008      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x754>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ca:	f043 0220 	orr.w	r2, r3, #32
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80040e0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	37d8      	adds	r7, #216	; 0xd8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	80080000 	.word	0x80080000
 80040f0:	50040300 	.word	0x50040300
 80040f4:	50040000 	.word	0x50040000
 80040f8:	c7520000 	.word	0xc7520000
 80040fc:	2000001c 	.word	0x2000001c
 8004100:	053e2d63 	.word	0x053e2d63
 8004104:	cb840000 	.word	0xcb840000
 8004108:	80000001 	.word	0x80000001

0800410c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004114:	2300      	movs	r3, #0
 8004116:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff f837 	bl	8003190 <LL_ADC_IsEnabled>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d15e      	bne.n	80041e6 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	4b30      	ldr	r3, [pc, #192]	; (80041f0 <ADC_Enable+0xe4>)
 8004130:	4013      	ands	r3, r2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00d      	beq.n	8004152 <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	f043 0210 	orr.w	r2, r3, #16
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	f043 0201 	orr.w	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e04a      	b.n	80041e8 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff f806 	bl	8003168 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800415c:	4825      	ldr	r0, [pc, #148]	; (80041f4 <ADC_Enable+0xe8>)
 800415e:	f7fe fea3 	bl	8002ea8 <LL_ADC_GetCommonPathInternalCh>
 8004162:	4603      	mov	r3, r0
 8004164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00f      	beq.n	800418c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800416c:	4b22      	ldr	r3, [pc, #136]	; (80041f8 <ADC_Enable+0xec>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	099b      	lsrs	r3, r3, #6
 8004172:	4a22      	ldr	r2, [pc, #136]	; (80041fc <ADC_Enable+0xf0>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	099b      	lsrs	r3, r3, #6
 800417a:	3301      	adds	r3, #1
 800417c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800417e:	e002      	b.n	8004186 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	3b01      	subs	r3, #1
 8004184:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f9      	bne.n	8004180 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800418c:	f7fe fe2c 	bl	8002de8 <HAL_GetTick>
 8004190:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004192:	e021      	b.n	80041d8 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f7fe fff9 	bl	8003190 <LL_ADC_IsEnabled>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d104      	bne.n	80041ae <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe ffdd 	bl	8003168 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041ae:	f7fe fe1b 	bl	8002de8 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d90d      	bls.n	80041d8 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c0:	f043 0210 	orr.w	r2, r3, #16
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	f043 0201 	orr.w	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e007      	b.n	80041e8 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d1d6      	bne.n	8004194 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	8000003f 	.word	0x8000003f
 80041f4:	50040300 	.word	0x50040300
 80041f8:	2000001c 	.word	0x2000001c
 80041fc:	053e2d63 	.word	0x053e2d63

08004200 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004216:	2b00      	cmp	r3, #0
 8004218:	d14b      	bne.n	80042b2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d021      	beq.n	8004278 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe fe98 	bl	8002f6e <LL_ADC_REG_IsTriggerSourceSWStart>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d032      	beq.n	80042aa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d12b      	bne.n	80042aa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d11f      	bne.n	80042aa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	f043 0201 	orr.w	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
 8004276:	e018      	b.n	80042aa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d111      	bne.n	80042aa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d105      	bne.n	80042aa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a2:	f043 0201 	orr.w	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f7ff fb42 	bl	8003934 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80042b0:	e00e      	b.n	80042d0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f7ff fb56 	bl	8003970 <HAL_ADC_ErrorCallback>
}
 80042c4:	e004      	b.n	80042d0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	4798      	blx	r3
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7ff fb2e 	bl	8003948 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ec:	bf00      	nop
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004306:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004312:	f043 0204 	orr.w	r2, r3, #4
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff fb28 	bl	8003970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800439c:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <__NVIC_SetPriorityGrouping+0x44>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043a8:	4013      	ands	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043be:	4a04      	ldr	r2, [pc, #16]	; (80043d0 <__NVIC_SetPriorityGrouping+0x44>)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	60d3      	str	r3, [r2, #12]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	e000ed00 	.word	0xe000ed00

080043d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043d8:	4b04      	ldr	r3, [pc, #16]	; (80043ec <__NVIC_GetPriorityGrouping+0x18>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	0a1b      	lsrs	r3, r3, #8
 80043de:	f003 0307 	and.w	r3, r3, #7
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	db0b      	blt.n	800441a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	f003 021f 	and.w	r2, r3, #31
 8004408:	4907      	ldr	r1, [pc, #28]	; (8004428 <__NVIC_EnableIRQ+0x38>)
 800440a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	2001      	movs	r0, #1
 8004412:	fa00 f202 	lsl.w	r2, r0, r2
 8004416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	e000e100 	.word	0xe000e100

0800442c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443a:	2b00      	cmp	r3, #0
 800443c:	db10      	blt.n	8004460 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	f003 021f 	and.w	r2, r3, #31
 8004444:	4909      	ldr	r1, [pc, #36]	; (800446c <__NVIC_DisableIRQ+0x40>)
 8004446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	2001      	movs	r0, #1
 800444e:	fa00 f202 	lsl.w	r2, r0, r2
 8004452:	3320      	adds	r3, #32
 8004454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004458:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800445c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	e000e100 	.word	0xe000e100

08004470 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	2b00      	cmp	r3, #0
 8004480:	db0c      	blt.n	800449c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	f003 021f 	and.w	r2, r3, #31
 8004488:	4907      	ldr	r1, [pc, #28]	; (80044a8 <__NVIC_SetPendingIRQ+0x38>)
 800448a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	2001      	movs	r0, #1
 8004492:	fa00 f202 	lsl.w	r2, r0, r2
 8004496:	3340      	adds	r3, #64	; 0x40
 8004498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	e000e100 	.word	0xe000e100

080044ac <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	db0c      	blt.n	80044d8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	f003 021f 	and.w	r2, r3, #31
 80044c4:	4907      	ldr	r1, [pc, #28]	; (80044e4 <__NVIC_ClearPendingIRQ+0x38>)
 80044c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	2001      	movs	r0, #1
 80044ce:	fa00 f202 	lsl.w	r2, r0, r2
 80044d2:	3360      	adds	r3, #96	; 0x60
 80044d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000e100 	.word	0xe000e100

080044e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	6039      	str	r1, [r7, #0]
 80044f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	db0a      	blt.n	8004512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	490c      	ldr	r1, [pc, #48]	; (8004534 <__NVIC_SetPriority+0x4c>)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	0112      	lsls	r2, r2, #4
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	440b      	add	r3, r1
 800450c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004510:	e00a      	b.n	8004528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	4908      	ldr	r1, [pc, #32]	; (8004538 <__NVIC_SetPriority+0x50>)
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	3b04      	subs	r3, #4
 8004520:	0112      	lsls	r2, r2, #4
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	440b      	add	r3, r1
 8004526:	761a      	strb	r2, [r3, #24]
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	e000e100 	.word	0xe000e100
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800453c:	b480      	push	{r7}
 800453e:	b089      	sub	sp, #36	; 0x24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f1c3 0307 	rsb	r3, r3, #7
 8004556:	2b04      	cmp	r3, #4
 8004558:	bf28      	it	cs
 800455a:	2304      	movcs	r3, #4
 800455c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3304      	adds	r3, #4
 8004562:	2b06      	cmp	r3, #6
 8004564:	d902      	bls.n	800456c <NVIC_EncodePriority+0x30>
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3b03      	subs	r3, #3
 800456a:	e000      	b.n	800456e <NVIC_EncodePriority+0x32>
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004570:	f04f 32ff 	mov.w	r2, #4294967295
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	43da      	mvns	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	401a      	ands	r2, r3
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004584:	f04f 31ff 	mov.w	r1, #4294967295
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	fa01 f303 	lsl.w	r3, r1, r3
 800458e:	43d9      	mvns	r1, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004594:	4313      	orrs	r3, r2
         );
}
 8004596:	4618      	mov	r0, r3
 8004598:	3724      	adds	r7, #36	; 0x24
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80045a8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <__NVIC_SystemReset+0x20>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80045b4:	4903      	ldr	r1, [pc, #12]	; (80045c4 <__NVIC_SystemReset+0x20>)
 80045b6:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <__NVIC_SystemReset+0x24>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60cb      	str	r3, [r1, #12]
 80045bc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80045c0:	bf00      	nop
 80045c2:	e7fd      	b.n	80045c0 <__NVIC_SystemReset+0x1c>
 80045c4:	e000ed00 	.word	0xe000ed00
 80045c8:	05fa0004 	.word	0x05fa0004

080045cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff fed9 	bl	800438c <__NVIC_SetPriorityGrouping>
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b086      	sub	sp, #24
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	4603      	mov	r3, r0
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
 80045ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045f0:	f7ff fef0 	bl	80043d4 <__NVIC_GetPriorityGrouping>
 80045f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	6978      	ldr	r0, [r7, #20]
 80045fc:	f7ff ff9e 	bl	800453c <NVIC_EncodePriority>
 8004600:	4602      	mov	r2, r0
 8004602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004606:	4611      	mov	r1, r2
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff ff6d 	bl	80044e8 <__NVIC_SetPriority>
}
 800460e:	bf00      	nop
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	4603      	mov	r3, r0
 800461e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fee3 	bl	80043f0 <__NVIC_EnableIRQ>
}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	4603      	mov	r3, r0
 800463a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800463c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff fef3 	bl	800442c <__NVIC_DisableIRQ>
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004652:	f7ff ffa7 	bl	80045a4 <__NVIC_SystemReset>

08004656 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	4603      	mov	r3, r0
 800465e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff ff03 	bl	8004470 <__NVIC_SetPendingIRQ>
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	4603      	mov	r3, r0
 800467a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800467c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff ff13 	bl	80044ac <__NVIC_ClearPendingIRQ>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e08e      	b.n	80047c0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	4b47      	ldr	r3, [pc, #284]	; (80047c8 <HAL_DMA_Init+0x138>)
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d80f      	bhi.n	80046ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	4b45      	ldr	r3, [pc, #276]	; (80047cc <HAL_DMA_Init+0x13c>)
 80046b6:	4413      	add	r3, r2
 80046b8:	4a45      	ldr	r2, [pc, #276]	; (80047d0 <HAL_DMA_Init+0x140>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	091b      	lsrs	r3, r3, #4
 80046c0:	009a      	lsls	r2, r3, #2
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a42      	ldr	r2, [pc, #264]	; (80047d4 <HAL_DMA_Init+0x144>)
 80046ca:	641a      	str	r2, [r3, #64]	; 0x40
 80046cc:	e00e      	b.n	80046ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	4b40      	ldr	r3, [pc, #256]	; (80047d8 <HAL_DMA_Init+0x148>)
 80046d6:	4413      	add	r3, r2
 80046d8:	4a3d      	ldr	r2, [pc, #244]	; (80047d0 <HAL_DMA_Init+0x140>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	091b      	lsrs	r3, r3, #4
 80046e0:	009a      	lsls	r2, r3, #2
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a3c      	ldr	r2, [pc, #240]	; (80047dc <HAL_DMA_Init+0x14c>)
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004706:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800471c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f9b6 	bl	8004ab0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800474c:	d102      	bne.n	8004754 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800475c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004760:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800476a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d010      	beq.n	8004796 <HAL_DMA_Init+0x106>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b04      	cmp	r3, #4
 800477a:	d80c      	bhi.n	8004796 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f9d5 	bl	8004b2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004792:	605a      	str	r2, [r3, #4]
 8004794:	e008      	b.n	80047a8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40020407 	.word	0x40020407
 80047cc:	bffdfff8 	.word	0xbffdfff8
 80047d0:	cccccccd 	.word	0xcccccccd
 80047d4:	40020000 	.word	0x40020000
 80047d8:	bffdfbf8 	.word	0xbffdfbf8
 80047dc:	40020400 	.word	0x40020400

080047e0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_DMA_Start_IT+0x20>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e066      	b.n	80048ce <HAL_DMA_Start_IT+0xee>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	d155      	bne.n	80048c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f8fb 	bl	8004a34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	2b00      	cmp	r3, #0
 8004844:	d008      	beq.n	8004858 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 020e 	orr.w	r2, r2, #14
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e00f      	b.n	8004878 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0204 	bic.w	r2, r2, #4
 8004866:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 020a 	orr.w	r2, r2, #10
 8004876:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004894:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0201 	orr.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	e005      	b.n	80048cc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
 80048ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b084      	sub	sp, #16
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	f003 031c 	and.w	r3, r3, #28
 80048f6:	2204      	movs	r2, #4
 80048f8:	409a      	lsls	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d026      	beq.n	8004950 <HAL_DMA_IRQHandler+0x7a>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d021      	beq.n	8004950 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d107      	bne.n	800492a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0204 	bic.w	r2, r2, #4
 8004928:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492e:	f003 021c 	and.w	r2, r3, #28
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	2104      	movs	r1, #4
 8004938:	fa01 f202 	lsl.w	r2, r1, r2
 800493c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	2b00      	cmp	r3, #0
 8004944:	d071      	beq.n	8004a2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800494e:	e06c      	b.n	8004a2a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004954:	f003 031c 	and.w	r3, r3, #28
 8004958:	2202      	movs	r2, #2
 800495a:	409a      	lsls	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d02e      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xec>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d029      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10b      	bne.n	8004994 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 020a 	bic.w	r2, r2, #10
 800498a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004998:	f003 021c 	and.w	r2, r3, #28
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	2102      	movs	r1, #2
 80049a2:	fa01 f202 	lsl.w	r2, r1, r2
 80049a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d038      	beq.n	8004a2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80049c0:	e033      	b.n	8004a2a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	f003 031c 	and.w	r3, r3, #28
 80049ca:	2208      	movs	r2, #8
 80049cc:	409a      	lsls	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4013      	ands	r3, r2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d02a      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x156>
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d025      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 020e 	bic.w	r2, r2, #14
 80049ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f4:	f003 021c 	and.w	r2, r3, #28
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	2101      	movs	r1, #1
 80049fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004a02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d004      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
}
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a4a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d004      	beq.n	8004a5e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a5c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a62:	f003 021c 	and.w	r2, r3, #28
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b10      	cmp	r3, #16
 8004a80:	d108      	bne.n	8004a94 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a92:	e007      	b.n	8004aa4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	60da      	str	r2, [r3, #12]
}
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d80a      	bhi.n	8004ada <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac8:	089b      	lsrs	r3, r3, #2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ad0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6493      	str	r3, [r2, #72]	; 0x48
 8004ad8:	e007      	b.n	8004aea <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	089b      	lsrs	r3, r3, #2
 8004ae0:	009a      	lsls	r2, r3, #2
 8004ae2:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004ae4:	4413      	add	r3, r2
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	3b08      	subs	r3, #8
 8004af2:	4a0c      	ldr	r2, [pc, #48]	; (8004b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004af4:	fba2 2303 	umull	r2, r3, r2, r3
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a0a      	ldr	r2, [pc, #40]	; (8004b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004b00:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	2201      	movs	r2, #1
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40020407 	.word	0x40020407
 8004b20:	4002081c 	.word	0x4002081c
 8004b24:	cccccccd 	.word	0xcccccccd
 8004b28:	40020880 	.word	0x40020880

08004b2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	461a      	mov	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a09      	ldr	r2, [pc, #36]	; (8004b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004b50:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004b62:	bf00      	nop
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	1000823f 	.word	0x1000823f
 8004b74:	40020940 	.word	0x40020940

08004b78 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b86:	e14c      	b.n	8004e22 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	fa01 f303 	lsl.w	r3, r1, r3
 8004b94:	4013      	ands	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 813e 	beq.w	8004e1c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d00b      	beq.n	8004bc0 <HAL_GPIO_Init+0x48>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d007      	beq.n	8004bc0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bb4:	2b11      	cmp	r3, #17
 8004bb6:	d003      	beq.n	8004bc0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b12      	cmp	r3, #18
 8004bbe:	d130      	bne.n	8004c22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	2203      	movs	r2, #3
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4013      	ands	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	f003 0201 	and.w	r2, r3, #1
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	43db      	mvns	r3, r3
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4013      	ands	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d003      	beq.n	8004c62 <HAL_GPIO_Init+0xea>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b12      	cmp	r3, #18
 8004c60:	d123      	bne.n	8004caa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	08da      	lsrs	r2, r3, #3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3208      	adds	r2, #8
 8004c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	220f      	movs	r2, #15
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4013      	ands	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	08da      	lsrs	r2, r3, #3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3208      	adds	r2, #8
 8004ca4:	6939      	ldr	r1, [r7, #16]
 8004ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f003 0203 	and.w	r2, r3, #3
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 8098 	beq.w	8004e1c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004cec:	4a54      	ldr	r2, [pc, #336]	; (8004e40 <HAL_GPIO_Init+0x2c8>)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	089b      	lsrs	r3, r3, #2
 8004cf2:	3302      	adds	r3, #2
 8004cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	220f      	movs	r2, #15
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d16:	d019      	beq.n	8004d4c <HAL_GPIO_Init+0x1d4>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a4a      	ldr	r2, [pc, #296]	; (8004e44 <HAL_GPIO_Init+0x2cc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d013      	beq.n	8004d48 <HAL_GPIO_Init+0x1d0>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a49      	ldr	r2, [pc, #292]	; (8004e48 <HAL_GPIO_Init+0x2d0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00d      	beq.n	8004d44 <HAL_GPIO_Init+0x1cc>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a48      	ldr	r2, [pc, #288]	; (8004e4c <HAL_GPIO_Init+0x2d4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d007      	beq.n	8004d40 <HAL_GPIO_Init+0x1c8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a47      	ldr	r2, [pc, #284]	; (8004e50 <HAL_GPIO_Init+0x2d8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d101      	bne.n	8004d3c <HAL_GPIO_Init+0x1c4>
 8004d38:	2304      	movs	r3, #4
 8004d3a:	e008      	b.n	8004d4e <HAL_GPIO_Init+0x1d6>
 8004d3c:	2307      	movs	r3, #7
 8004d3e:	e006      	b.n	8004d4e <HAL_GPIO_Init+0x1d6>
 8004d40:	2303      	movs	r3, #3
 8004d42:	e004      	b.n	8004d4e <HAL_GPIO_Init+0x1d6>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e002      	b.n	8004d4e <HAL_GPIO_Init+0x1d6>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <HAL_GPIO_Init+0x1d6>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	f002 0203 	and.w	r2, r2, #3
 8004d54:	0092      	lsls	r2, r2, #2
 8004d56:	4093      	lsls	r3, r2
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d5e:	4938      	ldr	r1, [pc, #224]	; (8004e40 <HAL_GPIO_Init+0x2c8>)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	089b      	lsrs	r3, r3, #2
 8004d64:	3302      	adds	r3, #2
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d6c:	4b39      	ldr	r3, [pc, #228]	; (8004e54 <HAL_GPIO_Init+0x2dc>)
 8004d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	43db      	mvns	r3, r3
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d92:	4a30      	ldr	r2, [pc, #192]	; (8004e54 <HAL_GPIO_Init+0x2dc>)
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004d9a:	4b2e      	ldr	r3, [pc, #184]	; (8004e54 <HAL_GPIO_Init+0x2dc>)
 8004d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	43db      	mvns	r3, r3
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4013      	ands	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004dc0:	4a24      	ldr	r2, [pc, #144]	; (8004e54 <HAL_GPIO_Init+0x2dc>)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dc8:	4b22      	ldr	r3, [pc, #136]	; (8004e54 <HAL_GPIO_Init+0x2dc>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004dec:	4a19      	ldr	r2, [pc, #100]	; (8004e54 <HAL_GPIO_Init+0x2dc>)
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004df2:	4b18      	ldr	r3, [pc, #96]	; (8004e54 <HAL_GPIO_Init+0x2dc>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e16:	4a0f      	ldr	r2, [pc, #60]	; (8004e54 <HAL_GPIO_Init+0x2dc>)
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f47f aeab 	bne.w	8004b88 <HAL_GPIO_Init+0x10>
  }
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40010000 	.word	0x40010000
 8004e44:	48000400 	.word	0x48000400
 8004e48:	48000800 	.word	0x48000800
 8004e4c:	48000c00 	.word	0x48000c00
 8004e50:	48001000 	.word	0x48001000
 8004e54:	58000800 	.word	0x58000800

08004e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	807b      	strh	r3, [r7, #2]
 8004e64:	4613      	mov	r3, r2
 8004e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e68:	787b      	ldrb	r3, [r7, #1]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e6e:	887a      	ldrh	r2, [r7, #2]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e74:	e002      	b.n	8004e7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e76:	887a      	ldrh	r2, [r7, #2]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004e8e:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <HAL_HSEM_IRQHandler+0x30>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004e94:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <HAL_HSEM_IRQHandler+0x30>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	4906      	ldr	r1, [pc, #24]	; (8004eb8 <HAL_HSEM_IRQHandler+0x30>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004ea2:	4a05      	ldr	r2, [pc, #20]	; (8004eb8 <HAL_HSEM_IRQHandler+0x30>)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f807 	bl	8004ebc <HAL_HSEM_FreeCallback>
}
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	58001500 	.word	0x58001500

08004ebc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed2:	b08b      	sub	sp, #44	; 0x2c
 8004ed4:	af06      	add	r7, sp, #24
 8004ed6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e0ad      	b.n	800503e <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f00e f976 	bl	80131e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2203      	movs	r2, #3
 8004f00:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f004 f836 	bl	8008f7a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f0e:	2300      	movs	r3, #0
 8004f10:	73fb      	strb	r3, [r7, #15]
 8004f12:	e035      	b.n	8004f80 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	015b      	lsls	r3, r3, #5
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3329      	adds	r3, #41	; 0x29
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	015b      	lsls	r3, r3, #5
 8004f28:	4413      	add	r3, r2
 8004f2a:	3328      	adds	r3, #40	; 0x28
 8004f2c:	7bfa      	ldrb	r2, [r7, #15]
 8004f2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	7bfa      	ldrb	r2, [r7, #15]
 8004f34:	b291      	uxth	r1, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	015b      	lsls	r3, r3, #5
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3336      	adds	r3, #54	; 0x36
 8004f3e:	460a      	mov	r2, r1
 8004f40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	015b      	lsls	r3, r3, #5
 8004f48:	4413      	add	r3, r2
 8004f4a:	332b      	adds	r3, #43	; 0x2b
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	015b      	lsls	r3, r3, #5
 8004f56:	4413      	add	r3, r2
 8004f58:	3338      	adds	r3, #56	; 0x38
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	015b      	lsls	r3, r3, #5
 8004f64:	4413      	add	r3, r2
 8004f66:	333c      	adds	r3, #60	; 0x3c
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	3302      	adds	r3, #2
 8004f72:	015b      	lsls	r3, r3, #5
 8004f74:	4413      	add	r3, r2
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
 8004f80:	7bfa      	ldrb	r2, [r7, #15]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d3c4      	bcc.n	8004f14 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	73fb      	strb	r3, [r7, #15]
 8004f8e:	e031      	b.n	8004ff4 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	015b      	lsls	r3, r3, #5
 8004f96:	4413      	add	r3, r2
 8004f98:	f203 1329 	addw	r3, r3, #297	; 0x129
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	015b      	lsls	r3, r3, #5
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004fac:	7bfa      	ldrb	r2, [r7, #15]
 8004fae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	015b      	lsls	r3, r3, #5
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	015b      	lsls	r3, r3, #5
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	015b      	lsls	r3, r3, #5
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	330a      	adds	r3, #10
 8004fe6:	015b      	lsls	r3, r3, #5
 8004fe8:	4413      	add	r3, r2
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
 8004ff4:	7bfa      	ldrb	r2, [r7, #15]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d3c8      	bcc.n	8004f90 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	687e      	ldr	r6, [r7, #4]
 8005006:	466d      	mov	r5, sp
 8005008:	f106 0410 	add.w	r4, r6, #16
 800500c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800500e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	602b      	str	r3, [r5, #0]
 8005014:	1d33      	adds	r3, r6, #4
 8005016:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005018:	6838      	ldr	r0, [r7, #0]
 800501a:	f003 ffc9 	bl	8008fb0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d102      	bne.n	800503c <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fe59 	bl	8005cee <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005046 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_PCD_Start+0x16>
 8005058:	2302      	movs	r3, #2
 800505a:	e012      	b.n	8005082 <HAL_PCD_Start+0x3c>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f005 f999 	bl	800a3a0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f003 ff68 	bl	8008f48 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b082      	sub	sp, #8
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f005 f999 	bl	800a3ce <USB_ReadInterrupts>
 800509c:	4603      	mov	r3, r0
 800509e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a6:	d102      	bne.n	80050ae <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fb33 	bl	8005714 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f005 f98b 	bl	800a3ce <USB_ReadInterrupts>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c2:	d112      	bne.n	80050ea <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d6:	b292      	uxth	r2, r2
 80050d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f00e f90a 	bl	80132f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80050e2:	2100      	movs	r1, #0
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f91e 	bl	8005326 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f005 f96d 	bl	800a3ce <USB_ReadInterrupts>
 80050f4:	4603      	mov	r3, r0
 80050f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050fe:	d10b      	bne.n	8005118 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005108:	b29a      	uxth	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005112:	b292      	uxth	r2, r2
 8005114:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4618      	mov	r0, r3
 800511e:	f005 f956 	bl	800a3ce <USB_ReadInterrupts>
 8005122:	4603      	mov	r3, r0
 8005124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512c:	d10b      	bne.n	8005146 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005136:	b29a      	uxth	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005140:	b292      	uxth	r2, r2
 8005142:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f005 f93f 	bl	800a3ce <USB_ReadInterrupts>
 8005150:	4603      	mov	r3, r0
 8005152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515a:	d133      	bne.n	80051c4 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005164:	b29a      	uxth	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0204 	bic.w	r2, r2, #4
 800516e:	b292      	uxth	r2, r2
 8005170:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800517c:	b29a      	uxth	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0208 	bic.w	r2, r2, #8
 8005186:	b292      	uxth	r2, r2
 8005188:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005192:	2b01      	cmp	r3, #1
 8005194:	d107      	bne.n	80051a6 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800519e:	2100      	movs	r1, #0
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fdce 	bl	8005d42 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f00e f8de 	bl	8013368 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051be:	b292      	uxth	r2, r2
 80051c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f005 f900 	bl	800a3ce <USB_ReadInterrupts>
 80051ce:	4603      	mov	r3, r0
 80051d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d8:	d126      	bne.n	8005228 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f042 0208 	orr.w	r2, r2, #8
 80051ec:	b292      	uxth	r2, r2
 80051ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005204:	b292      	uxth	r2, r2
 8005206:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005212:	b29a      	uxth	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0204 	orr.w	r2, r2, #4
 800521c:	b292      	uxth	r2, r2
 800521e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f00e f886 	bl	8013334 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f005 f8ce 	bl	800a3ce <USB_ReadInterrupts>
 8005232:	4603      	mov	r3, r0
 8005234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005238:	2b80      	cmp	r3, #128	; 0x80
 800523a:	d13f      	bne.n	80052bc <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005244:	b29a      	uxth	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800524e:	b292      	uxth	r2, r2
 8005250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800525a:	2b00      	cmp	r3, #0
 800525c:	d12b      	bne.n	80052b6 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005266:	b29a      	uxth	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0204 	orr.w	r2, r2, #4
 8005270:	b292      	uxth	r2, r2
 8005272:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800527e:	b29a      	uxth	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0208 	orr.w	r2, r2, #8
 8005288:	b292      	uxth	r2, r2
 800528a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800529e:	b29b      	uxth	r3, r3
 80052a0:	089b      	lsrs	r3, r3, #2
 80052a2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80052ac:	2101      	movs	r1, #1
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fd47 	bl	8005d42 <HAL_PCDEx_LPM_Callback>
 80052b4:	e002      	b.n	80052bc <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f00e f83c 	bl	8013334 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f005 f884 	bl	800a3ce <USB_ReadInterrupts>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d0:	d10e      	bne.n	80052f0 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052da:	b29a      	uxth	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052e4:	b292      	uxth	r2, r2
 80052e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f00d fff5 	bl	80132da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f005 f86a 	bl	800a3ce <USB_ReadInterrupts>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005304:	d10b      	bne.n	800531e <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800530e:	b29a      	uxth	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005318:	b292      	uxth	r2, r2
 800531a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800531e:	bf00      	nop
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	460b      	mov	r3, r1
 8005330:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_PCD_SetAddress+0x1a>
 800533c:	2302      	movs	r3, #2
 800533e:	e013      	b.n	8005368 <HAL_PCD_SetAddress+0x42>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	78fa      	ldrb	r2, [r7, #3]
 800534c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	78fa      	ldrb	r2, [r7, #3]
 8005356:	4611      	mov	r1, r2
 8005358:	4618      	mov	r0, r3
 800535a:	f005 f80d 	bl	800a378 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	4608      	mov	r0, r1
 800537a:	4611      	mov	r1, r2
 800537c:	461a      	mov	r2, r3
 800537e:	4603      	mov	r3, r0
 8005380:	70fb      	strb	r3, [r7, #3]
 8005382:	460b      	mov	r3, r1
 8005384:	803b      	strh	r3, [r7, #0]
 8005386:	4613      	mov	r3, r2
 8005388:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800538e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005392:	2b00      	cmp	r3, #0
 8005394:	da0b      	bge.n	80053ae <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005396:	78fb      	ldrb	r3, [r7, #3]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	015b      	lsls	r3, r3, #5
 800539e:	3328      	adds	r3, #40	; 0x28
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	4413      	add	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2201      	movs	r2, #1
 80053aa:	705a      	strb	r2, [r3, #1]
 80053ac:	e00b      	b.n	80053c6 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053ae:	78fb      	ldrb	r3, [r7, #3]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	015b      	lsls	r3, r3, #5
 80053b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	4413      	add	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80053c6:	78fb      	ldrb	r3, [r7, #3]
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80053d2:	883a      	ldrh	r2, [r7, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	78ba      	ldrb	r2, [r7, #2]
 80053dc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	785b      	ldrb	r3, [r3, #1]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d004      	beq.n	80053f0 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80053f0:	78bb      	ldrb	r3, [r7, #2]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d102      	bne.n	80053fc <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_PCD_EP_Open+0x9a>
 8005406:	2302      	movs	r3, #2
 8005408:	e00e      	b.n	8005428 <HAL_PCD_EP_Open+0xb8>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68f9      	ldr	r1, [r7, #12]
 8005418:	4618      	mov	r0, r3
 800541a:	f003 fded 	bl	8008ff8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8005426:	7afb      	ldrb	r3, [r7, #11]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800543c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005440:	2b00      	cmp	r3, #0
 8005442:	da0b      	bge.n	800545c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	015b      	lsls	r3, r3, #5
 800544c:	3328      	adds	r3, #40	; 0x28
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	4413      	add	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2201      	movs	r2, #1
 8005458:	705a      	strb	r2, [r3, #1]
 800545a:	e00b      	b.n	8005474 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	015b      	lsls	r3, r3, #5
 8005464:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	4413      	add	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	b2da      	uxtb	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_PCD_EP_Close+0x5e>
 800548a:	2302      	movs	r3, #2
 800548c:	e00e      	b.n	80054ac <HAL_PCD_EP_Close+0x7c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68f9      	ldr	r1, [r7, #12]
 800549c:	4618      	mov	r0, r3
 800549e:	f004 f959 	bl	8009754 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	460b      	mov	r3, r1
 80054c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054c4:	7afb      	ldrb	r3, [r7, #11]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	015b      	lsls	r3, r3, #5
 80054cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	2200      	movs	r2, #0
 80054e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2200      	movs	r2, #0
 80054ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054ee:	7afb      	ldrb	r3, [r7, #11]
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054fa:	7afb      	ldrb	r3, [r7, #11]
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	2b00      	cmp	r3, #0
 8005502:	d106      	bne.n	8005512 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6979      	ldr	r1, [r7, #20]
 800550a:	4618      	mov	r0, r3
 800550c:	f004 fb0f 	bl	8009b2e <USB_EPStartXfer>
 8005510:	e005      	b.n	800551e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6979      	ldr	r1, [r7, #20]
 8005518:	4618      	mov	r0, r3
 800551a:	f004 fb08 	bl	8009b2e <USB_EPStartXfer>
  }

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	330a      	adds	r3, #10
 800553e:	015b      	lsls	r3, r3, #5
 8005540:	4413      	add	r3, r2
 8005542:	3304      	adds	r3, #4
 8005544:	681b      	ldr	r3, [r3, #0]
}
 8005546:	4618      	mov	r0, r3
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b086      	sub	sp, #24
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
 800555e:	460b      	mov	r3, r1
 8005560:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005562:	7afb      	ldrb	r3, [r7, #11]
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	015b      	lsls	r3, r3, #5
 800556a:	3328      	adds	r3, #40	; 0x28
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2200      	movs	r2, #0
 8005582:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2201      	movs	r2, #1
 8005588:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800558a:	7afb      	ldrb	r3, [r7, #11]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	b2da      	uxtb	r2, r3
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005596:	7afb      	ldrb	r3, [r7, #11]
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	2b00      	cmp	r3, #0
 800559e:	d106      	bne.n	80055ae <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6979      	ldr	r1, [r7, #20]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f004 fac1 	bl	8009b2e <USB_EPStartXfer>
 80055ac:	e005      	b.n	80055ba <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6979      	ldr	r1, [r7, #20]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f004 faba 	bl	8009b2e <USB_EPStartXfer>
  }

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80055d0:	78fb      	ldrb	r3, [r7, #3]
 80055d2:	f003 0207 	and.w	r2, r3, #7
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d901      	bls.n	80055e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e046      	b.n	8005670 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	da0b      	bge.n	8005602 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ea:	78fb      	ldrb	r3, [r7, #3]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	015b      	lsls	r3, r3, #5
 80055f2:	3328      	adds	r3, #40	; 0x28
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	4413      	add	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	705a      	strb	r2, [r3, #1]
 8005600:	e009      	b.n	8005616 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005602:	78fb      	ldrb	r3, [r7, #3]
 8005604:	015b      	lsls	r3, r3, #5
 8005606:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	4413      	add	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2201      	movs	r2, #1
 800561a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	b2da      	uxtb	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_PCD_EP_SetStall+0x72>
 8005632:	2302      	movs	r3, #2
 8005634:	e01c      	b.n	8005670 <HAL_PCD_EP_SetStall+0xac>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68f9      	ldr	r1, [r7, #12]
 8005644:	4618      	mov	r0, r3
 8005646:	f004 fd98 	bl	800a17a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	2b00      	cmp	r3, #0
 8005652:	d108      	bne.n	8005666 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800565e:	4619      	mov	r1, r3
 8005660:	4610      	mov	r0, r2
 8005662:	f004 fec4 	bl	800a3ee <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	f003 020f 	and.w	r2, r3, #15
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	429a      	cmp	r2, r3
 8005690:	d901      	bls.n	8005696 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e03a      	b.n	800570c <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800569a:	2b00      	cmp	r3, #0
 800569c:	da0b      	bge.n	80056b6 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	015b      	lsls	r3, r3, #5
 80056a6:	3328      	adds	r3, #40	; 0x28
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	4413      	add	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	705a      	strb	r2, [r3, #1]
 80056b4:	e00b      	b.n	80056ce <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	015b      	lsls	r3, r3, #5
 80056be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	4413      	add	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_PCD_EP_ClrStall+0x76>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e00e      	b.n	800570c <HAL_PCD_EP_ClrStall+0x94>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f004 fd8d 	bl	800a21c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08e      	sub	sp, #56	; 0x38
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800571c:	e29c      	b.n	8005c58 <PCD_EP_ISR_Handler+0x544>
  {
    wIstr = hpcd->Instance->ISTR;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005726:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005728:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800572a:	b2db      	uxtb	r3, r3
 800572c:	f003 030f 	and.w	r3, r3, #15
 8005730:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005734:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005738:	2b00      	cmp	r3, #0
 800573a:	f040 8152 	bne.w	80059e2 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800573e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b00      	cmp	r3, #0
 8005746:	d150      	bne.n	80057ea <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b29b      	uxth	r3, r3
 8005750:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005758:	81fb      	strh	r3, [r7, #14]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	89fb      	ldrh	r3, [r7, #14]
 8005760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005768:	b29b      	uxth	r3, r3
 800576a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3328      	adds	r3, #40	; 0x28
 8005770:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800577a:	b29b      	uxth	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	4413      	add	r3, r2
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	4413      	add	r3, r2
 800578c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	695a      	ldr	r2, [r3, #20]
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	441a      	add	r2, r3
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80057a8:	2100      	movs	r1, #0
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f00d fd7e 	bl	80132ac <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 824d 	beq.w	8005c58 <PCD_EP_ISR_Handler+0x544>
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f040 8248 	bne.w	8005c58 <PCD_EP_ISR_Handler+0x544>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	b292      	uxth	r2, r2
 80057dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80057e8:	e236      	b.n	8005c58 <PCD_EP_ISR_Handler+0x544>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80057fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80057fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005800:	2b00      	cmp	r3, #0
 8005802:	d032      	beq.n	800586a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580c:	b29b      	uxth	r3, r3
 800580e:	461a      	mov	r2, r3
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4413      	add	r3, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	4413      	add	r3, r2
 800581e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800583e:	b29b      	uxth	r3, r3
 8005840:	f004 fe22 	bl	800a488 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	b29a      	uxth	r2, r3
 800584c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005850:	4013      	ands	r3, r2
 8005852:	823b      	strh	r3, [r7, #16]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	8a3a      	ldrh	r2, [r7, #16]
 800585a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800585e:	b292      	uxth	r2, r2
 8005860:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f00d fcf8 	bl	8013258 <HAL_PCD_SetupStageCallback>
 8005868:	e1f6      	b.n	8005c58 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800586a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800586e:	2b00      	cmp	r3, #0
 8005870:	f280 81f2 	bge.w	8005c58 <PCD_EP_ISR_Handler+0x544>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29a      	uxth	r2, r3
 800587c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005880:	4013      	ands	r3, r2
 8005882:	83fb      	strh	r3, [r7, #30]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	8bfa      	ldrh	r2, [r7, #30]
 800588a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800588e:	b292      	uxth	r2, r2
 8005890:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800589a:	b29b      	uxth	r3, r3
 800589c:	461a      	mov	r2, r3
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	4413      	add	r3, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	4413      	add	r3, r2
 80058ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d019      	beq.n	80058f6 <PCD_EP_ISR_Handler+0x1e2>
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d015      	beq.n	80058f6 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	6959      	ldr	r1, [r3, #20]
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f004 fdd4 	bl	800a488 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	695a      	ldr	r2, [r3, #20]
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	441a      	add	r2, r3
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80058ee:	2100      	movs	r1, #0
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f00d fcc3 	bl	801327c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005904:	b29b      	uxth	r3, r3
 8005906:	461a      	mov	r2, r3
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	4413      	add	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d112      	bne.n	8005944 <PCD_EP_ISR_Handler+0x230>
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005928:	b29a      	uxth	r2, r3
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	b29b      	uxth	r3, r3
 8005934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800593c:	b29a      	uxth	r2, r3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	801a      	strh	r2, [r3, #0]
 8005942:	e02f      	b.n	80059a4 <PCD_EP_ISR_Handler+0x290>
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	2b3e      	cmp	r3, #62	; 0x3e
 800594a:	d813      	bhi.n	8005974 <PCD_EP_ISR_Handler+0x260>
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	085b      	lsrs	r3, r3, #1
 8005952:	633b      	str	r3, [r7, #48]	; 0x30
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <PCD_EP_ISR_Handler+0x252>
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	3301      	adds	r3, #1
 8005964:	633b      	str	r3, [r7, #48]	; 0x30
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	b29b      	uxth	r3, r3
 800596a:	029b      	lsls	r3, r3, #10
 800596c:	b29a      	uxth	r2, r3
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	e017      	b.n	80059a4 <PCD_EP_ISR_Handler+0x290>
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	633b      	str	r3, [r7, #48]	; 0x30
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	f003 031f 	and.w	r3, r3, #31
 8005984:	2b00      	cmp	r3, #0
 8005986:	d102      	bne.n	800598e <PCD_EP_ISR_Handler+0x27a>
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	3b01      	subs	r3, #1
 800598c:	633b      	str	r3, [r7, #48]	; 0x30
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	b29b      	uxth	r3, r3
 8005992:	029b      	lsls	r3, r3, #10
 8005994:	b29b      	uxth	r3, r3
 8005996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800599a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800599e:	b29a      	uxth	r2, r3
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b4:	827b      	strh	r3, [r7, #18]
 80059b6:	8a7b      	ldrh	r3, [r7, #18]
 80059b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80059bc:	827b      	strh	r3, [r7, #18]
 80059be:	8a7b      	ldrh	r3, [r7, #18]
 80059c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059c4:	827b      	strh	r3, [r7, #18]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	8a7b      	ldrh	r3, [r7, #18]
 80059cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059dc:	b29b      	uxth	r3, r3
 80059de:	8013      	strh	r3, [r2, #0]
 80059e0:	e13a      	b.n	8005c58 <PCD_EP_ISR_Handler+0x544>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	857b      	strh	r3, [r7, #42]	; 0x2a
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80059f4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f280 80d6 	bge.w	8005baa <PCD_EP_ISR_Handler+0x496>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005a14:	4013      	ands	r3, r2
 8005a16:	853b      	strh	r3, [r7, #40]	; 0x28
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005a28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a2c:	b292      	uxth	r2, r2
 8005a2e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005a30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a34:	015b      	lsls	r3, r3, #5
 8005a36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	7b1b      	ldrb	r3, [r3, #12]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11f      	bne.n	8005a88 <PCD_EP_ISR_Handler+0x374>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	461a      	mov	r2, r3
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	4413      	add	r3, r2
 8005a62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a6c:	86fb      	strh	r3, [r7, #54]	; 0x36
          if (count != 0U)
 8005a6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d075      	beq.n	8005b60 <PCD_EP_ISR_Handler+0x44c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6818      	ldr	r0, [r3, #0]
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	6959      	ldr	r1, [r3, #20]
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	88da      	ldrh	r2, [r3, #6]
 8005a80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a82:	f004 fd01 	bl	800a488 <USB_ReadPMA>
 8005a86:	e06b      	b.n	8005b60 <PCD_EP_ISR_Handler+0x44c>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa2:	847b      	strh	r3, [r7, #34]	; 0x22
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d01f      	beq.n	8005b22 <PCD_EP_ISR_Handler+0x40e>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4413      	add	r3, r2
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	4413      	add	r3, r2
 8005afc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b06:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8005b08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d028      	beq.n	8005b60 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	6959      	ldr	r1, [r3, #20]
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	891a      	ldrh	r2, [r3, #8]
 8005b1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b1c:	f004 fcb4 	bl	800a488 <USB_ReadPMA>
 8005b20:	e01e      	b.n	8005b60 <PCD_EP_ISR_Handler+0x44c>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	4413      	add	r3, r2
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	6812      	ldr	r2, [r2, #0]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b46:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8005b48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6818      	ldr	r0, [r3, #0]
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	6959      	ldr	r1, [r3, #20]
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	895a      	ldrh	r2, [r3, #10]
 8005b5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b5c:	f004 fc94 	bl	800a488 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b66:	441a      	add	r2, r3
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	695a      	ldr	r2, [r3, #20]
 8005b70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b72:	441a      	add	r2, r3
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d004      	beq.n	8005b8a <PCD_EP_ISR_Handler+0x476>
 8005b80:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d206      	bcs.n	8005b98 <PCD_EP_ISR_Handler+0x484>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f00d fb73 	bl	801327c <HAL_PCD_DataOutStageCallback>
 8005b96:	e008      	b.n	8005baa <PCD_EP_ISR_Handler+0x496>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	7819      	ldrb	r1, [r3, #0]
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	695a      	ldr	r2, [r3, #20]
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff fc85 	bl	80054b4 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005baa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d051      	beq.n	8005c58 <PCD_EP_ISR_Handler+0x544>
      {
        ep = &hpcd->IN_ep[epindex];
 8005bb4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005bb8:	015b      	lsls	r3, r3, #5
 8005bba:	3328      	adds	r3, #40	; 0x28
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bdc:	843b      	strh	r3, [r7, #32]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	441a      	add	r2, r3
 8005bec:	8c3b      	ldrh	r3, [r7, #32]
 8005bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	4413      	add	r3, r2
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6812      	ldr	r2, [r2, #0]
 8005c12:	4413      	add	r3, r2
 8005c14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	695a      	ldr	r2, [r3, #20]
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	441a      	add	r2, r3
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d106      	bne.n	8005c46 <PCD_EP_ISR_Handler+0x532>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f00d fb34 	bl	80132ac <HAL_PCD_DataInStageCallback>
 8005c44:	e008      	b.n	8005c58 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	7819      	ldrb	r1, [r3, #0]
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	695a      	ldr	r2, [r3, #20]
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7ff fc7d 	bl	8005552 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	b21b      	sxth	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f6ff ad5a 	blt.w	800571e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3738      	adds	r7, #56	; 0x38
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	607b      	str	r3, [r7, #4]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	817b      	strh	r3, [r7, #10]
 8005c82:	4613      	mov	r3, r2
 8005c84:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c86:	897b      	ldrh	r3, [r7, #10]
 8005c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d008      	beq.n	8005ca4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c92:	897b      	ldrh	r3, [r7, #10]
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	015b      	lsls	r3, r3, #5
 8005c9a:	3328      	adds	r3, #40	; 0x28
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	e006      	b.n	8005cb2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ca4:	897b      	ldrh	r3, [r7, #10]
 8005ca6:	015b      	lsls	r3, r3, #5
 8005ca8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005cb2:	893b      	ldrh	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d107      	bne.n	8005cc8 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	80da      	strh	r2, [r3, #6]
 8005cc6:	e00b      	b.n	8005ce0 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	0c1b      	lsrs	r3, r3, #16
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	f043 0301 	orr.w	r3, r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f043 0302 	orr.w	r3, r3, #2
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d60:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a04      	ldr	r2, [pc, #16]	; (8005d78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6a:	6013      	str	r3, [r2, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	58000400 	.word	0x58000400

08005d7c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005d80:	4b04      	ldr	r3, [pc, #16]	; (8005d94 <HAL_PWREx_GetVoltageRange+0x18>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	58000400 	.word	0x58000400

08005d98 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005d9c:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	4a04      	ldr	r2, [pc, #16]	; (8005db4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005da6:	6053      	str	r3, [r2, #4]
}
 8005da8:	bf00      	nop
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	58000400 	.word	0x58000400

08005db8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dca:	d101      	bne.n	8005dd0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e000      	b.n	8005dd2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <LL_RCC_HSE_Enable>:
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dee:	6013      	str	r3, [r2, #0]
}
 8005df0:	bf00      	nop
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <LL_RCC_HSE_Disable>:
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e0c:	6013      	str	r3, [r2, #0]
}
 8005e0e:	bf00      	nop
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <LL_RCC_HSE_IsReady>:
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e2a:	d101      	bne.n	8005e30 <LL_RCC_HSE_IsReady+0x18>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e000      	b.n	8005e32 <LL_RCC_HSE_IsReady+0x1a>
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <LL_RCC_HSI_Enable>:
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e4e:	6013      	str	r3, [r2, #0]
}
 8005e50:	bf00      	nop
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <LL_RCC_HSI_Disable>:
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e6c:	6013      	str	r3, [r2, #0]
}
 8005e6e:	bf00      	nop
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <LL_RCC_HSI_IsReady>:
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e8a:	d101      	bne.n	8005e90 <LL_RCC_HSI_IsReady+0x18>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <LL_RCC_HSI_IsReady+0x1a>
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <LL_RCC_HSI_SetCalibTrimming>:
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	061b      	lsls	r3, r3, #24
 8005eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	604b      	str	r3, [r1, #4]
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <LL_RCC_HSI48_Enable>:
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ed6:	f043 0301 	orr.w	r3, r3, #1
 8005eda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005ede:	bf00      	nop
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <LL_RCC_HSI48_Disable>:
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ef8:	f023 0301 	bic.w	r3, r3, #1
 8005efc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005f00:	bf00      	nop
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <LL_RCC_HSI48_IsReady>:
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d101      	bne.n	8005f22 <LL_RCC_HSI48_IsReady+0x18>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <LL_RCC_HSI48_IsReady+0x1a>
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <LL_RCC_LSE_Enable>:
{
 8005f2e:	b480      	push	{r7}
 8005f30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f3e:	f043 0301 	orr.w	r3, r3, #1
 8005f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f46:	bf00      	nop
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <LL_RCC_LSE_Disable>:
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f60:	f023 0301 	bic.w	r3, r3, #1
 8005f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f68:	bf00      	nop
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <LL_RCC_LSE_EnableBypass>:
{
 8005f72:	b480      	push	{r7}
 8005f74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f82:	f043 0304 	orr.w	r3, r3, #4
 8005f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f8a:	bf00      	nop
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <LL_RCC_LSE_DisableBypass>:
{
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fa4:	f023 0304 	bic.w	r3, r3, #4
 8005fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005fac:	bf00      	nop
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <LL_RCC_LSE_IsReady>:
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d101      	bne.n	8005fce <LL_RCC_LSE_IsReady+0x18>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e000      	b.n	8005fd0 <LL_RCC_LSE_IsReady+0x1a>
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <LL_RCC_LSI1_Enable>:
{
 8005fda:	b480      	push	{r7}
 8005fdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005ff2:	bf00      	nop
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <LL_RCC_LSI1_Disable>:
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006014:	bf00      	nop
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <LL_RCC_LSI1_IsReady>:
{
 800601e:	b480      	push	{r7}
 8006020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b02      	cmp	r3, #2
 8006030:	d101      	bne.n	8006036 <LL_RCC_LSI1_IsReady+0x18>
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <LL_RCC_LSI1_IsReady+0x1a>
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <LL_RCC_LSI2_Enable>:
{
 8006042:	b480      	push	{r7}
 8006044:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800604a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800604e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006052:	f043 0304 	orr.w	r3, r3, #4
 8006056:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800605a:	bf00      	nop
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <LL_RCC_LSI2_Disable>:
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800606c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006074:	f023 0304 	bic.w	r3, r3, #4
 8006078:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800607c:	bf00      	nop
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <LL_RCC_LSI2_IsReady>:
{
 8006086:	b480      	push	{r7}
 8006088:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800608a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800608e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b08      	cmp	r3, #8
 8006098:	d101      	bne.n	800609e <LL_RCC_LSI2_IsReady+0x18>
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <LL_RCC_LSI2_IsReady+0x1a>
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <LL_RCC_LSI2_SetTrimming>:
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80060b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	021b      	lsls	r3, r3, #8
 80060c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <LL_RCC_MSI_Enable>:
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80060dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	6013      	str	r3, [r2, #0]
}
 80060ec:	bf00      	nop
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <LL_RCC_MSI_Disable>:
{
 80060f6:	b480      	push	{r7}
 80060f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80060fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006104:	f023 0301 	bic.w	r3, r3, #1
 8006108:	6013      	str	r3, [r2, #0]
}
 800610a:	bf00      	nop
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <LL_RCC_MSI_IsReady>:
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b02      	cmp	r3, #2
 8006124:	d101      	bne.n	800612a <LL_RCC_MSI_IsReady+0x16>
 8006126:	2301      	movs	r3, #1
 8006128:	e000      	b.n	800612c <LL_RCC_MSI_IsReady+0x18>
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <LL_RCC_MSI_SetRange>:
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800613e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006148:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4313      	orrs	r3, r2
 8006150:	600b      	str	r3, [r1, #0]
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <LL_RCC_MSI_GetRange>:
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800616e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2bb0      	cmp	r3, #176	; 0xb0
 8006174:	d901      	bls.n	800617a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006176:	23b0      	movs	r3, #176	; 0xb0
 8006178:	607b      	str	r3, [r7, #4]
  return msiRange;
 800617a:	687b      	ldr	r3, [r7, #4]
}
 800617c:	4618      	mov	r0, r3
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061a2:	4313      	orrs	r3, r2
 80061a4:	604b      	str	r3, [r1, #4]
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <LL_RCC_SetSysClkSource>:
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80061ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f023 0203 	bic.w	r2, r3, #3
 80061c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	608b      	str	r3, [r1, #8]
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <LL_RCC_GetSysClkSource>:
{
 80061da:	b480      	push	{r7}
 80061dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80061de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f003 030c 	and.w	r3, r3, #12
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <LL_RCC_SetAHBPrescaler>:
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80061fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006204:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4313      	orrs	r3, r2
 800620c:	608b      	str	r3, [r1, #8]
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <LL_C2_RCC_SetAHBPrescaler>:
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006226:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800622a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800622e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4313      	orrs	r3, r2
 8006236:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <LL_RCC_SetAHB4Prescaler>:
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800624e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006252:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006256:	f023 020f 	bic.w	r2, r3, #15
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	091b      	lsrs	r3, r3, #4
 800625e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006262:	4313      	orrs	r3, r2
 8006264:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <LL_RCC_SetAPB1Prescaler>:
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800627c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4313      	orrs	r3, r2
 800628e:	608b      	str	r3, [r1, #8]
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <LL_RCC_SetAPB2Prescaler>:
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80062a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	608b      	str	r3, [r1, #8]
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <LL_RCC_GetAHBPrescaler>:
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80062c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <LL_C2_RCC_GetAHBPrescaler>:
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80062e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80062e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <LL_RCC_GetAHB4Prescaler>:
{
 80062f6:	b480      	push	{r7}
 80062f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80062fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006308:	4618      	mov	r0, r3
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <LL_RCC_GetAPB1Prescaler>:
{
 8006312:	b480      	push	{r7}
 8006314:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006320:	4618      	mov	r0, r3
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <LL_RCC_GetAPB2Prescaler>:
{
 800632a:	b480      	push	{r7}
 800632c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800632e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006338:	4618      	mov	r0, r3
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <LL_RCC_PLL_Enable>:
{
 8006342:	b480      	push	{r7}
 8006344:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006354:	6013      	str	r3, [r2, #0]
}
 8006356:	bf00      	nop
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <LL_RCC_PLL_Disable>:
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800636e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006372:	6013      	str	r3, [r2, #0]
}
 8006374:	bf00      	nop
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <LL_RCC_PLL_IsReady>:
{
 800637e:	b480      	push	{r7}
 8006380:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800638c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006390:	d101      	bne.n	8006396 <LL_RCC_PLL_IsReady+0x18>
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <LL_RCC_PLL_IsReady+0x1a>
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <LL_RCC_PLL_GetN>:
{
 80063a2:	b480      	push	{r7}
 80063a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80063a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	0a1b      	lsrs	r3, r3, #8
 80063ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <LL_RCC_PLL_GetR>:
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80063c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <LL_RCC_PLL_GetDivider>:
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80063d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <LL_RCC_PLL_GetMainSource>:
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80063f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f003 0303 	and.w	r3, r3, #3
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <LL_RCC_IsActiveFlag_HPRE>:
{
 8006404:	b480      	push	{r7}
 8006406:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006416:	d101      	bne.n	800641c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006418:	2301      	movs	r3, #1
 800641a:	e000      	b.n	800641e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800642c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006430:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800643c:	d101      	bne.n	8006442 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800644e:	b480      	push	{r7}
 8006450:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006456:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800645a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800645e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006462:	d101      	bne.n	8006468 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006464:	2301      	movs	r3, #1
 8006466:	e000      	b.n	800646a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006482:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006486:	d101      	bne.n	800648c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800649c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064aa:	d101      	bne.n	80064b0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80064ac:	2301      	movs	r3, #1
 80064ae:	e000      	b.n	80064b2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064bc:	b590      	push	{r4, r7, lr}
 80064be:	b08d      	sub	sp, #52	; 0x34
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e37e      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 8092 	beq.w	8006600 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064dc:	f7ff fe7d 	bl	80061da <LL_RCC_GetSysClkSource>
 80064e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064e2:	f7ff ff83 	bl	80063ec <LL_RCC_PLL_GetMainSource>
 80064e6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <HAL_RCC_OscConfig+0x3e>
 80064ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f0:	2b0c      	cmp	r3, #12
 80064f2:	d14c      	bne.n	800658e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80064f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d149      	bne.n	800658e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064fa:	f7ff fe0b 	bl	8006114 <LL_RCC_MSI_IsReady>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <HAL_RCC_OscConfig+0x54>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e35d      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006514:	f7ff fe23 	bl	800615e <LL_RCC_MSI_GetRange>
 8006518:	4603      	mov	r3, r0
 800651a:	429c      	cmp	r4, r3
 800651c:	d914      	bls.n	8006548 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fd5c 	bl	8006fe0 <RCC_SetFlashLatencyFromMSIRange>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e34c      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff fdfd 	bl	8006136 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff fe21 	bl	8006188 <LL_RCC_MSI_SetCalibTrimming>
 8006546:	e013      	b.n	8006570 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	4618      	mov	r0, r3
 800654e:	f7ff fdf2 	bl	8006136 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff fe16 	bl	8006188 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	4618      	mov	r0, r3
 8006562:	f000 fd3d 	bl	8006fe0 <RCC_SetFlashLatencyFromMSIRange>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e32d      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006570:	f000 fcda 	bl	8006f28 <HAL_RCC_GetHCLKFreq>
 8006574:	4602      	mov	r2, r0
 8006576:	4bb3      	ldr	r3, [pc, #716]	; (8006844 <HAL_RCC_OscConfig+0x388>)
 8006578:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800657a:	4bb3      	ldr	r3, [pc, #716]	; (8006848 <HAL_RCC_OscConfig+0x38c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f7fc f960 	bl	8002844 <HAL_InitTick>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d039      	beq.n	80065fe <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e31e      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01e      	beq.n	80065d4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006596:	f7ff fd9f 	bl	80060d8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800659a:	f7fc fc25 	bl	8002de8 <HAL_GetTick>
 800659e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80065a0:	e008      	b.n	80065b4 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065a2:	f7fc fc21 	bl	8002de8 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d901      	bls.n	80065b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e30b      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80065b4:	f7ff fdae 	bl	8006114 <LL_RCC_MSI_IsReady>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f1      	beq.n	80065a2 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff fdb7 	bl	8006136 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff fddb 	bl	8006188 <LL_RCC_MSI_SetCalibTrimming>
 80065d2:	e015      	b.n	8006600 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80065d4:	f7ff fd8f 	bl	80060f6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065d8:	f7fc fc06 	bl	8002de8 <HAL_GetTick>
 80065dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065e0:	f7fc fc02 	bl	8002de8 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e2ec      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80065f2:	f7ff fd8f 	bl	8006114 <LL_RCC_MSI_IsReady>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1f1      	bne.n	80065e0 <HAL_RCC_OscConfig+0x124>
 80065fc:	e000      	b.n	8006600 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d04e      	beq.n	80066aa <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800660c:	f7ff fde5 	bl	80061da <LL_RCC_GetSysClkSource>
 8006610:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006612:	f7ff feeb 	bl	80063ec <LL_RCC_PLL_GetMainSource>
 8006616:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	2b08      	cmp	r3, #8
 800661c:	d005      	beq.n	800662a <HAL_RCC_OscConfig+0x16e>
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	2b0c      	cmp	r3, #12
 8006622:	d10d      	bne.n	8006640 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	2b03      	cmp	r3, #3
 8006628:	d10a      	bne.n	8006640 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800662a:	f7ff fbf5 	bl	8005e18 <LL_RCC_HSE_IsReady>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d039      	beq.n	80066a8 <HAL_RCC_OscConfig+0x1ec>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d135      	bne.n	80066a8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e2c5      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006648:	d102      	bne.n	8006650 <HAL_RCC_OscConfig+0x194>
 800664a:	f7ff fbc7 	bl	8005ddc <LL_RCC_HSE_Enable>
 800664e:	e001      	b.n	8006654 <HAL_RCC_OscConfig+0x198>
 8006650:	f7ff fbd3 	bl	8005dfa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d012      	beq.n	8006682 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800665c:	f7fc fbc4 	bl	8002de8 <HAL_GetTick>
 8006660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006662:	e008      	b.n	8006676 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006664:	f7fc fbc0 	bl	8002de8 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b64      	cmp	r3, #100	; 0x64
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e2aa      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006676:	f7ff fbcf 	bl	8005e18 <LL_RCC_HSE_IsReady>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0f1      	beq.n	8006664 <HAL_RCC_OscConfig+0x1a8>
 8006680:	e013      	b.n	80066aa <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006682:	f7fc fbb1 	bl	8002de8 <HAL_GetTick>
 8006686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006688:	e008      	b.n	800669c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800668a:	f7fc fbad 	bl	8002de8 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b64      	cmp	r3, #100	; 0x64
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e297      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 800669c:	f7ff fbbc 	bl	8005e18 <LL_RCC_HSE_IsReady>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1f1      	bne.n	800668a <HAL_RCC_OscConfig+0x1ce>
 80066a6:	e000      	b.n	80066aa <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d051      	beq.n	800675a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066b6:	f7ff fd90 	bl	80061da <LL_RCC_GetSysClkSource>
 80066ba:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066bc:	f7ff fe96 	bl	80063ec <LL_RCC_PLL_GetMainSource>
 80066c0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d005      	beq.n	80066d4 <HAL_RCC_OscConfig+0x218>
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	2b0c      	cmp	r3, #12
 80066cc:	d113      	bne.n	80066f6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d110      	bne.n	80066f6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066d4:	f7ff fbd0 	bl	8005e78 <LL_RCC_HSI_IsReady>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <HAL_RCC_OscConfig+0x22e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e270      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff fbd4 	bl	8005e9c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066f4:	e031      	b.n	800675a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d019      	beq.n	8006732 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066fe:	f7ff fb9d 	bl	8005e3c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006702:	f7fc fb71 	bl	8002de8 <HAL_GetTick>
 8006706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800670a:	f7fc fb6d 	bl	8002de8 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e257      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 800671c:	f7ff fbac 	bl	8005e78 <LL_RCC_HSI_IsReady>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0f1      	beq.n	800670a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	4618      	mov	r0, r3
 800672c:	f7ff fbb6 	bl	8005e9c <LL_RCC_HSI_SetCalibTrimming>
 8006730:	e013      	b.n	800675a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006732:	f7ff fb92 	bl	8005e5a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006736:	f7fc fb57 	bl	8002de8 <HAL_GetTick>
 800673a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800673c:	e008      	b.n	8006750 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800673e:	f7fc fb53 	bl	8002de8 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e23d      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006750:	f7ff fb92 	bl	8005e78 <LL_RCC_HSI_IsReady>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f1      	bne.n	800673e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0308 	and.w	r3, r3, #8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 80a3 	beq.w	80068ba <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d076      	beq.n	800686a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0310 	and.w	r3, r3, #16
 8006784:	2b00      	cmp	r3, #0
 8006786:	d046      	beq.n	8006816 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006788:	f7ff fc49 	bl	800601e <LL_RCC_LSI1_IsReady>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d113      	bne.n	80067ba <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006792:	f7ff fc22 	bl	8005fda <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006796:	f7fc fb27 	bl	8002de8 <HAL_GetTick>
 800679a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800679c:	e008      	b.n	80067b0 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800679e:	f7fc fb23 	bl	8002de8 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d901      	bls.n	80067b0 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e20d      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80067b0:	f7ff fc35 	bl	800601e <LL_RCC_LSI1_IsReady>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d0f1      	beq.n	800679e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80067ba:	f7ff fc42 	bl	8006042 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067be:	f7fc fb13 	bl	8002de8 <HAL_GetTick>
 80067c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80067c4:	e008      	b.n	80067d8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80067c6:	f7fc fb0f 	bl	8002de8 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e1f9      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80067d8:	f7ff fc55 	bl	8006086 <LL_RCC_LSI2_IsReady>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0f1      	beq.n	80067c6 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff fc5f 	bl	80060aa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80067ec:	f7ff fc06 	bl	8005ffc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f0:	f7fc fafa 	bl	8002de8 <HAL_GetTick>
 80067f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80067f8:	f7fc faf6 	bl	8002de8 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e1e0      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800680a:	f7ff fc08 	bl	800601e <LL_RCC_LSI1_IsReady>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1f1      	bne.n	80067f8 <HAL_RCC_OscConfig+0x33c>
 8006814:	e051      	b.n	80068ba <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006816:	f7ff fbe0 	bl	8005fda <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681a:	f7fc fae5 	bl	8002de8 <HAL_GetTick>
 800681e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006820:	e008      	b.n	8006834 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006822:	f7fc fae1 	bl	8002de8 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e1cb      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006834:	f7ff fbf3 	bl	800601e <LL_RCC_LSI1_IsReady>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0f1      	beq.n	8006822 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800683e:	f7ff fc11 	bl	8006064 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006842:	e00c      	b.n	800685e <HAL_RCC_OscConfig+0x3a2>
 8006844:	2000001c 	.word	0x2000001c
 8006848:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800684c:	f7fc facc 	bl	8002de8 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b03      	cmp	r3, #3
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e1b6      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800685e:	f7ff fc12 	bl	8006086 <LL_RCC_LSI2_IsReady>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1f1      	bne.n	800684c <HAL_RCC_OscConfig+0x390>
 8006868:	e027      	b.n	80068ba <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800686a:	f7ff fbfb 	bl	8006064 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686e:	f7fc fabb 	bl	8002de8 <HAL_GetTick>
 8006872:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006874:	e008      	b.n	8006888 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006876:	f7fc fab7 	bl	8002de8 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b03      	cmp	r3, #3
 8006882:	d901      	bls.n	8006888 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e1a1      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006888:	f7ff fbfd 	bl	8006086 <LL_RCC_LSI2_IsReady>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1f1      	bne.n	8006876 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006892:	f7ff fbb3 	bl	8005ffc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006896:	f7fc faa7 	bl	8002de8 <HAL_GetTick>
 800689a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800689c:	e008      	b.n	80068b0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800689e:	f7fc faa3 	bl	8002de8 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e18d      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80068b0:	f7ff fbb5 	bl	800601e <LL_RCC_LSI1_IsReady>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1f1      	bne.n	800689e <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0304 	and.w	r3, r3, #4
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d05b      	beq.n	800697e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068c6:	4bb5      	ldr	r3, [pc, #724]	; (8006b9c <HAL_RCC_OscConfig+0x6e0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d114      	bne.n	80068fc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80068d2:	f7ff fa43 	bl	8005d5c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068d6:	f7fc fa87 	bl	8002de8 <HAL_GetTick>
 80068da:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068dc:	e008      	b.n	80068f0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068de:	f7fc fa83 	bl	8002de8 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e16d      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068f0:	4baa      	ldr	r3, [pc, #680]	; (8006b9c <HAL_RCC_OscConfig+0x6e0>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0f0      	beq.n	80068de <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d102      	bne.n	800690a <HAL_RCC_OscConfig+0x44e>
 8006904:	f7ff fb13 	bl	8005f2e <LL_RCC_LSE_Enable>
 8006908:	e00c      	b.n	8006924 <HAL_RCC_OscConfig+0x468>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	2b05      	cmp	r3, #5
 8006910:	d104      	bne.n	800691c <HAL_RCC_OscConfig+0x460>
 8006912:	f7ff fb2e 	bl	8005f72 <LL_RCC_LSE_EnableBypass>
 8006916:	f7ff fb0a 	bl	8005f2e <LL_RCC_LSE_Enable>
 800691a:	e003      	b.n	8006924 <HAL_RCC_OscConfig+0x468>
 800691c:	f7ff fb18 	bl	8005f50 <LL_RCC_LSE_Disable>
 8006920:	f7ff fb38 	bl	8005f94 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d014      	beq.n	8006956 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800692c:	f7fc fa5c 	bl	8002de8 <HAL_GetTick>
 8006930:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006932:	e00a      	b.n	800694a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006934:	f7fc fa58 	bl	8002de8 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006942:	4293      	cmp	r3, r2
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e140      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800694a:	f7ff fb34 	bl	8005fb6 <LL_RCC_LSE_IsReady>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0ef      	beq.n	8006934 <HAL_RCC_OscConfig+0x478>
 8006954:	e013      	b.n	800697e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006956:	f7fc fa47 	bl	8002de8 <HAL_GetTick>
 800695a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800695c:	e00a      	b.n	8006974 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800695e:	f7fc fa43 	bl	8002de8 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	f241 3288 	movw	r2, #5000	; 0x1388
 800696c:	4293      	cmp	r3, r2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e12b      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006974:	f7ff fb1f 	bl	8005fb6 <LL_RCC_LSE_IsReady>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1ef      	bne.n	800695e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d02c      	beq.n	80069e4 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698e:	2b00      	cmp	r3, #0
 8006990:	d014      	beq.n	80069bc <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006992:	f7ff fa98 	bl	8005ec6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006996:	f7fc fa27 	bl	8002de8 <HAL_GetTick>
 800699a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800699c:	e008      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800699e:	f7fc fa23 	bl	8002de8 <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d901      	bls.n	80069b0 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e10d      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80069b0:	f7ff faab 	bl	8005f0a <LL_RCC_HSI48_IsReady>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0f1      	beq.n	800699e <HAL_RCC_OscConfig+0x4e2>
 80069ba:	e013      	b.n	80069e4 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069bc:	f7ff fa94 	bl	8005ee8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c0:	f7fc fa12 	bl	8002de8 <HAL_GetTick>
 80069c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069c8:	f7fc fa0e 	bl	8002de8 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e0f8      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80069da:	f7ff fa96 	bl	8005f0a <LL_RCC_HSI48_IsReady>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1f1      	bne.n	80069c8 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 80ee 	beq.w	8006bca <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069ee:	f7ff fbf4 	bl	80061da <LL_RCC_GetSysClkSource>
 80069f2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80069f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	f040 80af 	bne.w	8006b64 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f003 0203 	and.w	r2, r3, #3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d123      	bne.n	8006a5c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d11c      	bne.n	8006a5c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	0a1b      	lsrs	r3, r3, #8
 8006a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d114      	bne.n	8006a5c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d10d      	bne.n	8006a5c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d106      	bne.n	8006a5c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d05d      	beq.n	8006b18 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	2b0c      	cmp	r3, #12
 8006a60:	d058      	beq.n	8006b14 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e0ab      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006a74:	f7ff fc74 	bl	8006360 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a78:	f7fc f9b6 	bl	8002de8 <HAL_GetTick>
 8006a7c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a80:	f7fc f9b2 	bl	8002de8 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e09c      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1ef      	bne.n	8006a80 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	4b3e      	ldr	r3, [pc, #248]	; (8006ba0 <HAL_RCC_OscConfig+0x6e4>)
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ab2:	4311      	orrs	r1, r2
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ab8:	0212      	lsls	r2, r2, #8
 8006aba:	4311      	orrs	r1, r2
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ac0:	4311      	orrs	r1, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006ac6:	4311      	orrs	r1, r2
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006acc:	430a      	orrs	r2, r1
 8006ace:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006ad6:	f7ff fc34 	bl	8006342 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ae8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006aea:	f7fc f97d 	bl	8002de8 <HAL_GetTick>
 8006aee:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006af0:	e008      	b.n	8006b04 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006af2:	f7fc f979 	bl	8002de8 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d901      	bls.n	8006b04 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e063      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0ef      	beq.n	8006af2 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b12:	e05a      	b.n	8006bca <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e059      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d151      	bne.n	8006bca <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006b26:	f7ff fc0c 	bl	8006342 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b38:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b3a:	f7fc f955 	bl	8002de8 <HAL_GetTick>
 8006b3e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b42:	f7fc f951 	bl	8002de8 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e03b      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0ef      	beq.n	8006b42 <HAL_RCC_OscConfig+0x686>
 8006b62:	e032      	b.n	8006bca <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2b0c      	cmp	r3, #12
 8006b68:	d02d      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b6a:	f7ff fbf9 	bl	8006360 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b78:	f023 0303 	bic.w	r3, r3, #3
 8006b7c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8006b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b88:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b90:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b92:	f7fc f929 	bl	8002de8 <HAL_GetTick>
 8006b96:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b98:	e00d      	b.n	8006bb6 <HAL_RCC_OscConfig+0x6fa>
 8006b9a:	bf00      	nop
 8006b9c:	58000400 	.word	0x58000400
 8006ba0:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba4:	f7fc f920 	bl	8002de8 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e00a      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1ef      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x6e8>
 8006bc4:	e001      	b.n	8006bca <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e000      	b.n	8006bcc <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3734      	adds	r7, #52	; 0x34
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd90      	pop	{r4, r7, pc}

08006bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e12d      	b.n	8006e44 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006be8:	4b98      	ldr	r3, [pc, #608]	; (8006e4c <HAL_RCC_ClockConfig+0x278>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0307 	and.w	r3, r3, #7
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d91b      	bls.n	8006c2e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bf6:	4b95      	ldr	r3, [pc, #596]	; (8006e4c <HAL_RCC_ClockConfig+0x278>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f023 0207 	bic.w	r2, r3, #7
 8006bfe:	4993      	ldr	r1, [pc, #588]	; (8006e4c <HAL_RCC_ClockConfig+0x278>)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c06:	f7fc f8ef 	bl	8002de8 <HAL_GetTick>
 8006c0a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c0c:	e008      	b.n	8006c20 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006c0e:	f7fc f8eb 	bl	8002de8 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e111      	b.n	8006e44 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c20:	4b8a      	ldr	r3, [pc, #552]	; (8006e4c <HAL_RCC_ClockConfig+0x278>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0307 	and.w	r3, r3, #7
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d1ef      	bne.n	8006c0e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d016      	beq.n	8006c68 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff fad7 	bl	80061f2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006c44:	f7fc f8d0 	bl	8002de8 <HAL_GetTick>
 8006c48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c4c:	f7fc f8cc 	bl	8002de8 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e0f2      	b.n	8006e44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006c5e:	f7ff fbd1 	bl	8006404 <LL_RCC_IsActiveFlag_HPRE>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0f1      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d016      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff face 	bl	800621a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006c7e:	f7fc f8b3 	bl	8002de8 <HAL_GetTick>
 8006c82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006c84:	e008      	b.n	8006c98 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c86:	f7fc f8af 	bl	8002de8 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d901      	bls.n	8006c98 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e0d5      	b.n	8006e44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006c98:	f7ff fbc6 	bl	8006428 <LL_RCC_IsActiveFlag_C2HPRE>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0f1      	beq.n	8006c86 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d016      	beq.n	8006cdc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff fac7 	bl	8006246 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006cb8:	f7fc f896 	bl	8002de8 <HAL_GetTick>
 8006cbc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006cc0:	f7fc f892 	bl	8002de8 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e0b8      	b.n	8006e44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006cd2:	f7ff fbbc 	bl	800644e <LL_RCC_IsActiveFlag_SHDHPRE>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0f1      	beq.n	8006cc0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d016      	beq.n	8006d16 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7ff fac1 	bl	8006274 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006cf2:	f7fc f879 	bl	8002de8 <HAL_GetTick>
 8006cf6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006cf8:	e008      	b.n	8006d0c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006cfa:	f7fc f875 	bl	8002de8 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e09b      	b.n	8006e44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006d0c:	f7ff fbb2 	bl	8006474 <LL_RCC_IsActiveFlag_PPRE1>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f1      	beq.n	8006cfa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d017      	beq.n	8006d52 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff fab7 	bl	800629c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d2e:	f7fc f85b 	bl	8002de8 <HAL_GetTick>
 8006d32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006d34:	e008      	b.n	8006d48 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d36:	f7fc f857 	bl	8002de8 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d901      	bls.n	8006d48 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e07d      	b.n	8006e44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006d48:	f7ff fba6 	bl	8006498 <LL_RCC_IsActiveFlag_PPRE2>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0f1      	beq.n	8006d36 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d043      	beq.n	8006de6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d106      	bne.n	8006d74 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006d66:	f7ff f857 	bl	8005e18 <LL_RCC_HSE_IsReady>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d11e      	bne.n	8006dae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e067      	b.n	8006e44 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d106      	bne.n	8006d8a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006d7c:	f7ff faff 	bl	800637e <LL_RCC_PLL_IsReady>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d113      	bne.n	8006dae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e05c      	b.n	8006e44 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006d92:	f7ff f9bf 	bl	8006114 <LL_RCC_MSI_IsReady>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d108      	bne.n	8006dae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e051      	b.n	8006e44 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006da0:	f7ff f86a 	bl	8005e78 <LL_RCC_HSI_IsReady>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e04a      	b.n	8006e44 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff f9fd 	bl	80061b2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006db8:	f7fc f816 	bl	8002de8 <HAL_GetTick>
 8006dbc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dbe:	e00a      	b.n	8006dd6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc0:	f7fc f812 	bl	8002de8 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d901      	bls.n	8006dd6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e036      	b.n	8006e44 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd6:	f7ff fa00 	bl	80061da <LL_RCC_GetSysClkSource>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d1ec      	bne.n	8006dc0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006de6:	4b19      	ldr	r3, [pc, #100]	; (8006e4c <HAL_RCC_ClockConfig+0x278>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d21b      	bcs.n	8006e2c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df4:	4b15      	ldr	r3, [pc, #84]	; (8006e4c <HAL_RCC_ClockConfig+0x278>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f023 0207 	bic.w	r2, r3, #7
 8006dfc:	4913      	ldr	r1, [pc, #76]	; (8006e4c <HAL_RCC_ClockConfig+0x278>)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e04:	f7fb fff0 	bl	8002de8 <HAL_GetTick>
 8006e08:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e0a:	e008      	b.n	8006e1e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e0c:	f7fb ffec 	bl	8002de8 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d901      	bls.n	8006e1e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e012      	b.n	8006e44 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e1e:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <HAL_RCC_ClockConfig+0x278>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0307 	and.w	r3, r3, #7
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d1ef      	bne.n	8006e0c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006e2c:	f000 f87c 	bl	8006f28 <HAL_RCC_GetHCLKFreq>
 8006e30:	4602      	mov	r2, r0
 8006e32:	4b07      	ldr	r3, [pc, #28]	; (8006e50 <HAL_RCC_ClockConfig+0x27c>)
 8006e34:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006e36:	f7fb ffe3 	bl	8002e00 <HAL_GetTickPrio>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fb fd01 	bl	8002844 <HAL_InitTick>
 8006e42:	4603      	mov	r3, r0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	58004000 	.word	0x58004000
 8006e50:	2000001c 	.word	0x2000001c

08006e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e54:	b590      	push	{r4, r7, lr}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e5a:	f7ff f9be 	bl	80061da <LL_RCC_GetSysClkSource>
 8006e5e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006e66:	f7ff f97a 	bl	800615e <LL_RCC_MSI_GetRange>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	091b      	lsrs	r3, r3, #4
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	4a2a      	ldr	r2, [pc, #168]	; (8006f1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	e04a      	b.n	8006f12 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d102      	bne.n	8006e88 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e82:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006e84:	60fb      	str	r3, [r7, #12]
 8006e86:	e044      	b.n	8006f12 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b08      	cmp	r3, #8
 8006e8c:	d10a      	bne.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006e8e:	f7fe ff93 	bl	8005db8 <LL_RCC_HSE_IsEnabledDiv2>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d102      	bne.n	8006e9e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006e98:	4b21      	ldr	r3, [pc, #132]	; (8006f20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	e039      	b.n	8006f12 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006e9e:	4b21      	ldr	r3, [pc, #132]	; (8006f24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	e036      	b.n	8006f12 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006ea4:	f7ff faa2 	bl	80063ec <LL_RCC_PLL_GetMainSource>
 8006ea8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d002      	beq.n	8006eb6 <HAL_RCC_GetSysClockFreq+0x62>
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d003      	beq.n	8006ebc <HAL_RCC_GetSysClockFreq+0x68>
 8006eb4:	e00d      	b.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006eb6:	4b1a      	ldr	r3, [pc, #104]	; (8006f20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006eb8:	60bb      	str	r3, [r7, #8]
        break;
 8006eba:	e015      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006ebc:	f7fe ff7c 	bl	8005db8 <LL_RCC_HSE_IsEnabledDiv2>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d102      	bne.n	8006ecc <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006ec6:	4b16      	ldr	r3, [pc, #88]	; (8006f20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006ec8:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006eca:	e00d      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8006ecc:	4b15      	ldr	r3, [pc, #84]	; (8006f24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006ece:	60bb      	str	r3, [r7, #8]
        break;
 8006ed0:	e00a      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006ed2:	f7ff f944 	bl	800615e <LL_RCC_MSI_GetRange>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	091b      	lsrs	r3, r3, #4
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	4a0f      	ldr	r2, [pc, #60]	; (8006f1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ee4:	60bb      	str	r3, [r7, #8]
        break;
 8006ee6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8006ee8:	f7ff fa5b 	bl	80063a2 <LL_RCC_PLL_GetN>
 8006eec:	4602      	mov	r2, r0
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	fb03 f402 	mul.w	r4, r3, r2
 8006ef4:	f7ff fa6e 	bl	80063d4 <LL_RCC_PLL_GetDivider>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	091b      	lsrs	r3, r3, #4
 8006efc:	3301      	adds	r3, #1
 8006efe:	fbb4 f4f3 	udiv	r4, r4, r3
 8006f02:	f7ff fa5b 	bl	80063bc <LL_RCC_PLL_GetR>
 8006f06:	4603      	mov	r3, r0
 8006f08:	0f5b      	lsrs	r3, r3, #29
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	fbb4 f3f3 	udiv	r3, r4, r3
 8006f10:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8006f12:	68fb      	ldr	r3, [r7, #12]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd90      	pop	{r4, r7, pc}
 8006f1c:	08013d1c 	.word	0x08013d1c
 8006f20:	00f42400 	.word	0x00f42400
 8006f24:	01e84800 	.word	0x01e84800

08006f28 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f28:	b598      	push	{r3, r4, r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006f2c:	f7ff ff92 	bl	8006e54 <HAL_RCC_GetSysClockFreq>
 8006f30:	4604      	mov	r4, r0
 8006f32:	f7ff f9c7 	bl	80062c4 <LL_RCC_GetAHBPrescaler>
 8006f36:	4603      	mov	r3, r0
 8006f38:	091b      	lsrs	r3, r3, #4
 8006f3a:	f003 030f 	and.w	r3, r3, #15
 8006f3e:	4a03      	ldr	r2, [pc, #12]	; (8006f4c <HAL_RCC_GetHCLKFreq+0x24>)
 8006f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f44:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd98      	pop	{r3, r4, r7, pc}
 8006f4c:	08013cbc 	.word	0x08013cbc

08006f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f50:	b598      	push	{r3, r4, r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006f54:	f7ff ffe8 	bl	8006f28 <HAL_RCC_GetHCLKFreq>
 8006f58:	4604      	mov	r4, r0
 8006f5a:	f7ff f9e6 	bl	800632a <LL_RCC_GetAPB2Prescaler>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	0adb      	lsrs	r3, r3, #11
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	4a04      	ldr	r2, [pc, #16]	; (8006f78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f6c:	f003 031f 	and.w	r3, r3, #31
 8006f70:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	bd98      	pop	{r3, r4, r7, pc}
 8006f78:	08013cfc 	.word	0x08013cfc

08006f7c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	226f      	movs	r2, #111	; 0x6f
 8006f8a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8006f8c:	f7ff f925 	bl	80061da <LL_RCC_GetSysClkSource>
 8006f90:	4602      	mov	r2, r0
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8006f96:	f7ff f995 	bl	80062c4 <LL_RCC_GetAHBPrescaler>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8006fa0:	f7ff f9b7 	bl	8006312 <LL_RCC_GetAPB1Prescaler>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8006faa:	f7ff f9be 	bl	800632a <LL_RCC_GetAPB2Prescaler>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8006fb4:	f7ff f992 	bl	80062dc <LL_C2_RCC_GetAHBPrescaler>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8006fbe:	f7ff f99a 	bl	80062f6 <LL_RCC_GetAHB4Prescaler>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006fc8:	4b04      	ldr	r3, [pc, #16]	; (8006fdc <HAL_RCC_GetClockConfig+0x60>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0207 	and.w	r2, r3, #7
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	601a      	str	r2, [r3, #0]
}
 8006fd4:	bf00      	nop
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	58004000 	.word	0x58004000

08006fe0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006fe0:	b590      	push	{r4, r7, lr}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2bb0      	cmp	r3, #176	; 0xb0
 8006fec:	d903      	bls.n	8006ff6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006fee:	4b15      	ldr	r3, [pc, #84]	; (8007044 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	e007      	b.n	8007006 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	091b      	lsrs	r3, r3, #4
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	4a11      	ldr	r2, [pc, #68]	; (8007044 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007004:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007006:	f7ff f976 	bl	80062f6 <LL_RCC_GetAHB4Prescaler>
 800700a:	4603      	mov	r3, r0
 800700c:	091b      	lsrs	r3, r3, #4
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	4a0d      	ldr	r2, [pc, #52]	; (8007048 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	fbb2 f3f3 	udiv	r3, r2, r3
 800701e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4a0a      	ldr	r2, [pc, #40]	; (800704c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007024:	fba2 2303 	umull	r2, r3, r2, r3
 8007028:	0c9c      	lsrs	r4, r3, #18
 800702a:	f7fe fea7 	bl	8005d7c <HAL_PWREx_GetVoltageRange>
 800702e:	4603      	mov	r3, r0
 8007030:	4619      	mov	r1, r3
 8007032:	4620      	mov	r0, r4
 8007034:	f000 f80c 	bl	8007050 <RCC_SetFlashLatency>
 8007038:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	bd90      	pop	{r4, r7, pc}
 8007042:	bf00      	nop
 8007044:	08013d1c 	.word	0x08013d1c
 8007048:	08013cbc 	.word	0x08013cbc
 800704c:	431bde83 	.word	0x431bde83

08007050 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007050:	b590      	push	{r4, r7, lr}
 8007052:	b093      	sub	sp, #76	; 0x4c
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800705a:	4b39      	ldr	r3, [pc, #228]	; (8007140 <RCC_SetFlashLatency+0xf0>)
 800705c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007060:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007062:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007066:	4a37      	ldr	r2, [pc, #220]	; (8007144 <RCC_SetFlashLatency+0xf4>)
 8007068:	f107 031c 	add.w	r3, r7, #28
 800706c:	ca07      	ldmia	r2, {r0, r1, r2}
 800706e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007072:	4b35      	ldr	r3, [pc, #212]	; (8007148 <RCC_SetFlashLatency+0xf8>)
 8007074:	f107 040c 	add.w	r4, r7, #12
 8007078:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800707a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800707e:	2300      	movs	r3, #0
 8007080:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007088:	d11c      	bne.n	80070c4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800708a:	2300      	movs	r3, #0
 800708c:	643b      	str	r3, [r7, #64]	; 0x40
 800708e:	e015      	b.n	80070bc <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007098:	4413      	add	r3, r2
 800709a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d808      	bhi.n	80070b6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80070a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80070ac:	4413      	add	r3, r2
 80070ae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80070b2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80070b4:	e022      	b.n	80070fc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80070b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070b8:	3301      	adds	r3, #1
 80070ba:	643b      	str	r3, [r7, #64]	; 0x40
 80070bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d9e6      	bls.n	8007090 <RCC_SetFlashLatency+0x40>
 80070c2:	e01b      	b.n	80070fc <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80070c4:	2300      	movs	r3, #0
 80070c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070c8:	e015      	b.n	80070f6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80070ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80070d2:	4413      	add	r3, r2
 80070d4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d808      	bhi.n	80070f0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80070de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80070e6:	4413      	add	r3, r2
 80070e8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80070ec:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80070ee:	e005      	b.n	80070fc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80070f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f2:	3301      	adds	r3, #1
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d9e6      	bls.n	80070ca <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80070fc:	4b13      	ldr	r3, [pc, #76]	; (800714c <RCC_SetFlashLatency+0xfc>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f023 0207 	bic.w	r2, r3, #7
 8007104:	4911      	ldr	r1, [pc, #68]	; (800714c <RCC_SetFlashLatency+0xfc>)
 8007106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007108:	4313      	orrs	r3, r2
 800710a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800710c:	f7fb fe6c 	bl	8002de8 <HAL_GetTick>
 8007110:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007112:	e008      	b.n	8007126 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007114:	f7fb fe68 	bl	8002de8 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d901      	bls.n	8007126 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e007      	b.n	8007136 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007126:	4b09      	ldr	r3, [pc, #36]	; (800714c <RCC_SetFlashLatency+0xfc>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0307 	and.w	r3, r3, #7
 800712e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007130:	429a      	cmp	r2, r3
 8007132:	d1ef      	bne.n	8007114 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	374c      	adds	r7, #76	; 0x4c
 800713a:	46bd      	mov	sp, r7
 800713c:	bd90      	pop	{r4, r7, pc}
 800713e:	bf00      	nop
 8007140:	08013910 	.word	0x08013910
 8007144:	08013920 	.word	0x08013920
 8007148:	0801392c 	.word	0x0801392c
 800714c:	58004000 	.word	0x58004000

08007150 <LL_RCC_LSE_IsEnabled>:
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	2b01      	cmp	r3, #1
 8007162:	d101      	bne.n	8007168 <LL_RCC_LSE_IsEnabled+0x18>
 8007164:	2301      	movs	r3, #1
 8007166:	e000      	b.n	800716a <LL_RCC_LSE_IsEnabled+0x1a>
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <LL_RCC_LSE_IsReady>:
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800717c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	2b02      	cmp	r3, #2
 8007186:	d101      	bne.n	800718c <LL_RCC_LSE_IsReady+0x18>
 8007188:	2301      	movs	r3, #1
 800718a:	e000      	b.n	800718e <LL_RCC_LSE_IsReady+0x1a>
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <LL_RCC_SetRFWKPClockSource>:
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80071a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <LL_RCC_SetSMPSClockSource>:
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80071cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	f023 0203 	bic.w	r2, r3, #3
 80071d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4313      	orrs	r3, r2
 80071de:	624b      	str	r3, [r1, #36]	; 0x24
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <LL_RCC_SetSMPSPrescaler>:
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80071f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4313      	orrs	r3, r2
 8007206:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <LL_RCC_SetUSARTClockSource>:
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800721c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007224:	f023 0203 	bic.w	r2, r3, #3
 8007228:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4313      	orrs	r3, r2
 8007230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <LL_RCC_SetLPUARTClockSource>:
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800724c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007250:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007254:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4313      	orrs	r3, r2
 800725c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <LL_RCC_SetI2CClockSource>:
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007278:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	091b      	lsrs	r3, r3, #4
 8007280:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007284:	43db      	mvns	r3, r3
 8007286:	401a      	ands	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	011b      	lsls	r3, r3, #4
 800728c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007290:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007294:	4313      	orrs	r3, r2
 8007296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800729a:	bf00      	nop
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <LL_RCC_SetLPTIMClockSource>:
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80072ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	0c1b      	lsrs	r3, r3, #16
 80072ba:	041b      	lsls	r3, r3, #16
 80072bc:	43db      	mvns	r3, r3
 80072be:	401a      	ands	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	041b      	lsls	r3, r3, #16
 80072c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80072ce:	bf00      	nop
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <LL_RCC_SetSAIClockSource>:
{
 80072da:	b480      	push	{r7}
 80072dc:	b083      	sub	sp, #12
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80072e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80072fa:	bf00      	nop
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <LL_RCC_SetRNGClockSource>:
{
 8007306:	b480      	push	{r7}
 8007308:	b083      	sub	sp, #12
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800730e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007316:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800731a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4313      	orrs	r3, r2
 8007322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <LL_RCC_SetCLK48ClockSource>:
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800733a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800733e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007342:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007346:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4313      	orrs	r3, r2
 800734e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <LL_RCC_SetUSBClockSource>:
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff ffe3 	bl	8007332 <LL_RCC_SetCLK48ClockSource>
}
 800736c:	bf00      	nop
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <LL_RCC_SetADCClockSource>:
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800737c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007384:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007388:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4313      	orrs	r3, r2
 8007390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <LL_RCC_SetRTCClockSource>:
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80073a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <LL_RCC_GetRTCClockSource>:
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80073d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80073dc:	4618      	mov	r0, r3
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <LL_RCC_ForceBackupDomainReset>:
{
 80073e6:	b480      	push	{r7}
 80073e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80073ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80073fe:	bf00      	nop
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800740c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007414:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800741c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007420:	bf00      	nop
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <LL_RCC_PLLSAI1_Enable>:
{
 800742a:	b480      	push	{r7}
 800742c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800742e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007438:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800743c:	6013      	str	r3, [r2, #0]
}
 800743e:	bf00      	nop
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <LL_RCC_PLLSAI1_Disable>:
{
 8007448:	b480      	push	{r7}
 800744a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800744c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007456:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800745a:	6013      	str	r3, [r2, #0]
}
 800745c:	bf00      	nop
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <LL_RCC_PLLSAI1_IsReady>:
{
 8007466:	b480      	push	{r7}
 8007468:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800746a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007478:	d101      	bne.n	800747e <LL_RCC_PLLSAI1_IsReady+0x18>
 800747a:	2301      	movs	r3, #1
 800747c:	e000      	b.n	8007480 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b088      	sub	sp, #32
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007492:	2300      	movs	r3, #0
 8007494:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007496:	2300      	movs	r3, #0
 8007498:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d033      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074ae:	d00c      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x40>
 80074b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074b4:	d802      	bhi.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x32>
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d010      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x52>
 80074ba:	e017      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x62>
 80074bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074c0:	d017      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80074c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80074c6:	d016      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80074c8:	e010      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80074ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074d8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80074da:	e00d      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3304      	adds	r3, #4
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 f947 	bl	8007774 <RCCEx_PLLSAI1_ConfigNP>
 80074e6:	4603      	mov	r3, r0
 80074e8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80074ea:	e005      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	77fb      	strb	r3, [r7, #31]
        break;
 80074f0:	e002      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80074f2:	bf00      	nop
 80074f4:	e000      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80074f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074f8:	7ffb      	ldrb	r3, [r7, #31]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d105      	bne.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	4618      	mov	r0, r3
 8007504:	f7ff fee9 	bl	80072da <LL_RCC_SetSAIClockSource>
 8007508:	e001      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750a:	7ffb      	ldrb	r3, [r7, #31]
 800750c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007516:	2b00      	cmp	r3, #0
 8007518:	d046      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800751a:	f7ff ff57 	bl	80073cc <LL_RCC_GetRTCClockSource>
 800751e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	429a      	cmp	r2, r3
 8007528:	d03c      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800752a:	f7fe fc17 	bl	8005d5c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d105      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff ff31 	bl	80073a0 <LL_RCC_SetRTCClockSource>
 800753e:	e02e      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007548:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800754a:	f7ff ff4c 	bl	80073e6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800754e:	f7ff ff5b 	bl	8007408 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755c:	4313      	orrs	r3, r2
 800755e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800756a:	f7ff fdf1 	bl	8007150 <LL_RCC_LSE_IsEnabled>
 800756e:	4603      	mov	r3, r0
 8007570:	2b01      	cmp	r3, #1
 8007572:	d114      	bne.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007574:	f7fb fc38 	bl	8002de8 <HAL_GetTick>
 8007578:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800757a:	e00b      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800757c:	f7fb fc34 	bl	8002de8 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	f241 3288 	movw	r2, #5000	; 0x1388
 800758a:	4293      	cmp	r3, r2
 800758c:	d902      	bls.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	77fb      	strb	r3, [r7, #31]
              break;
 8007592:	e004      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007594:	f7ff fdee 	bl	8007174 <LL_RCC_LSE_IsReady>
 8007598:	4603      	mov	r3, r0
 800759a:	2b01      	cmp	r3, #1
 800759c:	d1ee      	bne.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800759e:	7ffb      	ldrb	r3, [r7, #31]
 80075a0:	77bb      	strb	r3, [r7, #30]
 80075a2:	e001      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a4:	7ffb      	ldrb	r3, [r7, #31]
 80075a6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d004      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff fe2b 	bl	8007214 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d004      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7ff fe36 	bl	8007240 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d004      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff fe5e 	bl	80072a6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0320 	and.w	r3, r3, #32
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d004      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff fe53 	bl	80072a6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0304 	and.w	r3, r3, #4
 8007608:	2b00      	cmp	r3, #0
 800760a:	d004      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	4618      	mov	r0, r3
 8007612:	f7ff fe2b 	bl	800726c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b00      	cmp	r3, #0
 8007620:	d004      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	4618      	mov	r0, r3
 8007628:	f7ff fe20 	bl	800726c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007634:	2b00      	cmp	r3, #0
 8007636:	d022      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff fe8e 	bl	800735e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800764a:	d107      	bne.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800764c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800765a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007664:	d10b      	bne.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3304      	adds	r3, #4
 800766a:	4618      	mov	r0, r3
 800766c:	f000 f8dd 	bl	800782a <RCCEx_PLLSAI1_ConfigNQ>
 8007670:	4603      	mov	r3, r0
 8007672:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007674:	7ffb      	ldrb	r3, [r7, #31]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d001      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 800767a:	7ffb      	ldrb	r3, [r7, #31]
 800767c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007686:	2b00      	cmp	r3, #0
 8007688:	d02b      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007692:	d008      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800769c:	d003      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d105      	bne.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff fe2b 	bl	8007306 <LL_RCC_SetRNGClockSource>
 80076b0:	e00a      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	2000      	movs	r0, #0
 80076be:	f7ff fe22 	bl	8007306 <LL_RCC_SetRNGClockSource>
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f7ff fe35 	bl	8007332 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076cc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80076d0:	d107      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80076d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076e0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d022      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7ff fe3e 	bl	8007374 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007700:	d107      	bne.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800770c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007710:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800771a:	d10b      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3304      	adds	r3, #4
 8007720:	4618      	mov	r0, r3
 8007722:	f000 f8dd 	bl	80078e0 <RCCEx_PLLSAI1_ConfigNR>
 8007726:	4603      	mov	r3, r0
 8007728:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800772a:	7ffb      	ldrb	r3, [r7, #31]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8007730:	7ffb      	ldrb	r3, [r7, #31]
 8007732:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d004      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007744:	4618      	mov	r0, r3
 8007746:	f7ff fd27 	bl	8007198 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d009      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff fd46 	bl	80071ec <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007764:	4618      	mov	r0, r3
 8007766:	f7ff fd2d 	bl	80071c4 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800776a:	7fbb      	ldrb	r3, [r7, #30]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3720      	adds	r7, #32
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007780:	f7ff fe62 	bl	8007448 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007784:	f7fb fb30 	bl	8002de8 <HAL_GetTick>
 8007788:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800778a:	e009      	b.n	80077a0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800778c:	f7fb fb2c 	bl	8002de8 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b02      	cmp	r3, #2
 8007798:	d902      	bls.n	80077a0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	73fb      	strb	r3, [r7, #15]
      break;
 800779e:	e004      	b.n	80077aa <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80077a0:	f7ff fe61 	bl	8007466 <LL_RCC_PLLSAI1_IsReady>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1f0      	bne.n	800778c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d137      	bne.n	8007820 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80077b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	021b      	lsls	r3, r3, #8
 80077c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077c4:	4313      	orrs	r3, r2
 80077c6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80077c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077da:	4313      	orrs	r3, r2
 80077dc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80077de:	f7ff fe24 	bl	800742a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077e2:	f7fb fb01 	bl	8002de8 <HAL_GetTick>
 80077e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80077e8:	e009      	b.n	80077fe <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077ea:	f7fb fafd 	bl	8002de8 <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d902      	bls.n	80077fe <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	73fb      	strb	r3, [r7, #15]
        break;
 80077fc:	e004      	b.n	8007808 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80077fe:	f7ff fe32 	bl	8007466 <LL_RCC_PLLSAI1_IsReady>
 8007802:	4603      	mov	r3, r0
 8007804:	2b01      	cmp	r3, #1
 8007806:	d1f0      	bne.n	80077ea <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d108      	bne.n	8007820 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800780e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007812:	691a      	ldr	r2, [r3, #16]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800781c:	4313      	orrs	r3, r2
 800781e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007820:	7bfb      	ldrb	r3, [r7, #15]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b084      	sub	sp, #16
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007836:	f7ff fe07 	bl	8007448 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800783a:	f7fb fad5 	bl	8002de8 <HAL_GetTick>
 800783e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007840:	e009      	b.n	8007856 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007842:	f7fb fad1 	bl	8002de8 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d902      	bls.n	8007856 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	73fb      	strb	r3, [r7, #15]
      break;
 8007854:	e004      	b.n	8007860 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007856:	f7ff fe06 	bl	8007466 <LL_RCC_PLLSAI1_IsReady>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1f0      	bne.n	8007842 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007860:	7bfb      	ldrb	r3, [r7, #15]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d137      	bne.n	80078d6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	021b      	lsls	r3, r3, #8
 8007876:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800787a:	4313      	orrs	r3, r2
 800787c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800787e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007890:	4313      	orrs	r3, r2
 8007892:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007894:	f7ff fdc9 	bl	800742a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007898:	f7fb faa6 	bl	8002de8 <HAL_GetTick>
 800789c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800789e:	e009      	b.n	80078b4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078a0:	f7fb faa2 	bl	8002de8 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d902      	bls.n	80078b4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	73fb      	strb	r3, [r7, #15]
        break;
 80078b2:	e004      	b.n	80078be <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80078b4:	f7ff fdd7 	bl	8007466 <LL_RCC_PLLSAI1_IsReady>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d1f0      	bne.n	80078a0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80078be:	7bfb      	ldrb	r3, [r7, #15]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d108      	bne.n	80078d6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80078c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078c8:	691a      	ldr	r2, [r3, #16]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078d2:	4313      	orrs	r3, r2
 80078d4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80078ec:	f7ff fdac 	bl	8007448 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078f0:	f7fb fa7a 	bl	8002de8 <HAL_GetTick>
 80078f4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80078f6:	e009      	b.n	800790c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078f8:	f7fb fa76 	bl	8002de8 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b02      	cmp	r3, #2
 8007904:	d902      	bls.n	800790c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	73fb      	strb	r3, [r7, #15]
      break;
 800790a:	e004      	b.n	8007916 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800790c:	f7ff fdab 	bl	8007466 <LL_RCC_PLLSAI1_IsReady>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1f0      	bne.n	80078f8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d137      	bne.n	800798c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800791c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	021b      	lsls	r3, r3, #8
 800792c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007930:	4313      	orrs	r3, r2
 8007932:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007946:	4313      	orrs	r3, r2
 8007948:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800794a:	f7ff fd6e 	bl	800742a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800794e:	f7fb fa4b 	bl	8002de8 <HAL_GetTick>
 8007952:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007954:	e009      	b.n	800796a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007956:	f7fb fa47 	bl	8002de8 <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	2b02      	cmp	r3, #2
 8007962:	d902      	bls.n	800796a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	73fb      	strb	r3, [r7, #15]
        break;
 8007968:	e004      	b.n	8007974 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800796a:	f7ff fd7c 	bl	8007466 <LL_RCC_PLLSAI1_IsReady>
 800796e:	4603      	mov	r3, r0
 8007970:	2b01      	cmp	r3, #1
 8007972:	d1f0      	bne.n	8007956 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007974:	7bfb      	ldrb	r3, [r7, #15]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d108      	bne.n	800798c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800797a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800797e:	691a      	ldr	r2, [r3, #16]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007988:	4313      	orrs	r3, r2
 800798a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b082      	sub	sp, #8
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e090      	b.n	8007aca <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d106      	bne.n	80079c2 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7fa fe93 	bl	80026e8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2202      	movs	r2, #2
 80079c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	22ca      	movs	r2, #202	; 0xca
 80079d0:	625a      	str	r2, [r3, #36]	; 0x24
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2253      	movs	r2, #83	; 0x53
 80079d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f89f 	bl	8007b1e <RTC_EnterInitMode>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d009      	beq.n	80079fa <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	22ff      	movs	r2, #255	; 0xff
 80079ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2204      	movs	r2, #4
 80079f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e067      	b.n	8007aca <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6812      	ldr	r2, [r2, #0]
 8007a04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a0c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6899      	ldr	r1, [r3, #8]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	431a      	orrs	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	68d2      	ldr	r2, [r2, #12]
 8007a34:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6919      	ldr	r1, [r3, #16]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	041a      	lsls	r2, r3, #16
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a58:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 0203 	bic.w	r2, r2, #3
 8007a68:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	69da      	ldr	r2, [r3, #28]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f003 0320 	and.w	r3, r3, #32
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d113      	bne.n	8007ab8 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f81e 	bl	8007ad2 <HAL_RTC_WaitForSynchro>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00d      	beq.n	8007ab8 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	22ff      	movs	r2, #255	; 0xff
 8007aa2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2204      	movs	r2, #4
 8007aa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e008      	b.n	8007aca <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	22ff      	movs	r2, #255	; 0xff
 8007abe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
  }
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68da      	ldr	r2, [r3, #12]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007ae8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007aea:	f7fb f97d 	bl	8002de8 <HAL_GetTick>
 8007aee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007af0:	e009      	b.n	8007b06 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007af2:	f7fb f979 	bl	8002de8 <HAL_GetTick>
 8007af6:	4602      	mov	r2, r0
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b00:	d901      	bls.n	8007b06 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e007      	b.n	8007b16 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f003 0320 	and.w	r3, r3, #32
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d0ee      	beq.n	8007af2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d119      	bne.n	8007b68 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f04f 32ff 	mov.w	r2, #4294967295
 8007b3c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007b3e:	f7fb f953 	bl	8002de8 <HAL_GetTick>
 8007b42:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b44:	e009      	b.n	8007b5a <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007b46:	f7fb f94f 	bl	8002de8 <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b54:	d901      	bls.n	8007b5a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	e007      	b.n	8007b6a <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0ee      	beq.n	8007b46 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b082      	sub	sp, #8
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e049      	b.n	8007c18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d106      	bne.n	8007b9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7fb f86f 	bl	8002c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3304      	adds	r3, #4
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	f000 fd17 	bl	80085e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d001      	beq.n	8007c38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e02e      	b.n	8007c96 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a17      	ldr	r2, [pc, #92]	; (8007ca4 <HAL_TIM_Base_Start+0x84>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d004      	beq.n	8007c54 <HAL_TIM_Base_Start+0x34>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c52:	d115      	bne.n	8007c80 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	4b13      	ldr	r3, [pc, #76]	; (8007ca8 <HAL_TIM_Base_Start+0x88>)
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2b06      	cmp	r3, #6
 8007c64:	d015      	beq.n	8007c92 <HAL_TIM_Base_Start+0x72>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c6c:	d011      	beq.n	8007c92 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f042 0201 	orr.w	r2, r2, #1
 8007c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c7e:	e008      	b.n	8007c92 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 0201 	orr.w	r2, r2, #1
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	e000      	b.n	8007c94 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	40012c00 	.word	0x40012c00
 8007ca8:	00010007 	.word	0x00010007

08007cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d001      	beq.n	8007cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e036      	b.n	8007d32 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68da      	ldr	r2, [r3, #12]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f042 0201 	orr.w	r2, r2, #1
 8007cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a17      	ldr	r2, [pc, #92]	; (8007d40 <HAL_TIM_Base_Start_IT+0x94>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d004      	beq.n	8007cf0 <HAL_TIM_Base_Start_IT+0x44>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cee:	d115      	bne.n	8007d1c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	689a      	ldr	r2, [r3, #8]
 8007cf6:	4b13      	ldr	r3, [pc, #76]	; (8007d44 <HAL_TIM_Base_Start_IT+0x98>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b06      	cmp	r3, #6
 8007d00:	d015      	beq.n	8007d2e <HAL_TIM_Base_Start_IT+0x82>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d08:	d011      	beq.n	8007d2e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f042 0201 	orr.w	r2, r2, #1
 8007d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d1a:	e008      	b.n	8007d2e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	e000      	b.n	8007d30 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	40012c00 	.word	0x40012c00
 8007d44:	00010007 	.word	0x00010007

08007d48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e049      	b.n	8007dee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d106      	bne.n	8007d74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f841 	bl	8007df6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2202      	movs	r2, #2
 8007d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	3304      	adds	r3, #4
 8007d84:	4619      	mov	r1, r3
 8007d86:	4610      	mov	r0, r2
 8007d88:	f000 fc2c 	bl	80085e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
	...

08007e0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d109      	bne.n	8007e30 <HAL_TIM_PWM_Start+0x24>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	bf14      	ite	ne
 8007e28:	2301      	movne	r3, #1
 8007e2a:	2300      	moveq	r3, #0
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	e03c      	b.n	8007eaa <HAL_TIM_PWM_Start+0x9e>
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	d109      	bne.n	8007e4a <HAL_TIM_PWM_Start+0x3e>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	bf14      	ite	ne
 8007e42:	2301      	movne	r3, #1
 8007e44:	2300      	moveq	r3, #0
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	e02f      	b.n	8007eaa <HAL_TIM_PWM_Start+0x9e>
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d109      	bne.n	8007e64 <HAL_TIM_PWM_Start+0x58>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	bf14      	ite	ne
 8007e5c:	2301      	movne	r3, #1
 8007e5e:	2300      	moveq	r3, #0
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	e022      	b.n	8007eaa <HAL_TIM_PWM_Start+0x9e>
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2b0c      	cmp	r3, #12
 8007e68:	d109      	bne.n	8007e7e <HAL_TIM_PWM_Start+0x72>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	bf14      	ite	ne
 8007e76:	2301      	movne	r3, #1
 8007e78:	2300      	moveq	r3, #0
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	e015      	b.n	8007eaa <HAL_TIM_PWM_Start+0x9e>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b10      	cmp	r3, #16
 8007e82:	d109      	bne.n	8007e98 <HAL_TIM_PWM_Start+0x8c>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	bf14      	ite	ne
 8007e90:	2301      	movne	r3, #1
 8007e92:	2300      	moveq	r3, #0
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	e008      	b.n	8007eaa <HAL_TIM_PWM_Start+0x9e>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	bf14      	ite	ne
 8007ea4:	2301      	movne	r3, #1
 8007ea6:	2300      	moveq	r3, #0
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e079      	b.n	8007fa6 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d104      	bne.n	8007ec2 <HAL_TIM_PWM_Start+0xb6>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ec0:	e023      	b.n	8007f0a <HAL_TIM_PWM_Start+0xfe>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	d104      	bne.n	8007ed2 <HAL_TIM_PWM_Start+0xc6>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ed0:	e01b      	b.n	8007f0a <HAL_TIM_PWM_Start+0xfe>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d104      	bne.n	8007ee2 <HAL_TIM_PWM_Start+0xd6>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ee0:	e013      	b.n	8007f0a <HAL_TIM_PWM_Start+0xfe>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b0c      	cmp	r3, #12
 8007ee6:	d104      	bne.n	8007ef2 <HAL_TIM_PWM_Start+0xe6>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ef0:	e00b      	b.n	8007f0a <HAL_TIM_PWM_Start+0xfe>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b10      	cmp	r3, #16
 8007ef6:	d104      	bne.n	8007f02 <HAL_TIM_PWM_Start+0xf6>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f00:	e003      	b.n	8007f0a <HAL_TIM_PWM_Start+0xfe>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2202      	movs	r2, #2
 8007f06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 fee4 	bl	8008ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a24      	ldr	r2, [pc, #144]	; (8007fb0 <HAL_TIM_PWM_Start+0x1a4>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d009      	beq.n	8007f36 <HAL_TIM_PWM_Start+0x12a>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a23      	ldr	r2, [pc, #140]	; (8007fb4 <HAL_TIM_PWM_Start+0x1a8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d004      	beq.n	8007f36 <HAL_TIM_PWM_Start+0x12a>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a21      	ldr	r2, [pc, #132]	; (8007fb8 <HAL_TIM_PWM_Start+0x1ac>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d101      	bne.n	8007f3a <HAL_TIM_PWM_Start+0x12e>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e000      	b.n	8007f3c <HAL_TIM_PWM_Start+0x130>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d007      	beq.n	8007f50 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a16      	ldr	r2, [pc, #88]	; (8007fb0 <HAL_TIM_PWM_Start+0x1a4>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d004      	beq.n	8007f64 <HAL_TIM_PWM_Start+0x158>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f62:	d115      	bne.n	8007f90 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	4b14      	ldr	r3, [pc, #80]	; (8007fbc <HAL_TIM_PWM_Start+0x1b0>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b06      	cmp	r3, #6
 8007f74:	d015      	beq.n	8007fa2 <HAL_TIM_PWM_Start+0x196>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f7c:	d011      	beq.n	8007fa2 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f042 0201 	orr.w	r2, r2, #1
 8007f8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8e:	e008      	b.n	8007fa2 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0201 	orr.w	r2, r2, #1
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	e000      	b.n	8007fa4 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fa2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	40012c00 	.word	0x40012c00
 8007fb4:	40014400 	.word	0x40014400
 8007fb8:	40014800 	.word	0x40014800
 8007fbc:	00010007 	.word	0x00010007

08007fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d122      	bne.n	800801c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f003 0302 	and.w	r3, r3, #2
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d11b      	bne.n	800801c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0202 	mvn.w	r2, #2
 8007fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	f003 0303 	and.w	r3, r3, #3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 facf 	bl	80085a6 <HAL_TIM_IC_CaptureCallback>
 8008008:	e005      	b.n	8008016 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fac1 	bl	8008592 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fad2 	bl	80085ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	f003 0304 	and.w	r3, r3, #4
 8008026:	2b04      	cmp	r3, #4
 8008028:	d122      	bne.n	8008070 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b04      	cmp	r3, #4
 8008036:	d11b      	bne.n	8008070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f06f 0204 	mvn.w	r2, #4
 8008040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2202      	movs	r2, #2
 8008046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 faa5 	bl	80085a6 <HAL_TIM_IC_CaptureCallback>
 800805c:	e005      	b.n	800806a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fa97 	bl	8008592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 faa8 	bl	80085ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f003 0308 	and.w	r3, r3, #8
 800807a:	2b08      	cmp	r3, #8
 800807c:	d122      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f003 0308 	and.w	r3, r3, #8
 8008088:	2b08      	cmp	r3, #8
 800808a:	d11b      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0208 	mvn.w	r2, #8
 8008094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2204      	movs	r2, #4
 800809a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fa7b 	bl	80085a6 <HAL_TIM_IC_CaptureCallback>
 80080b0:	e005      	b.n	80080be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fa6d 	bl	8008592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fa7e 	bl	80085ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f003 0310 	and.w	r3, r3, #16
 80080ce:	2b10      	cmp	r3, #16
 80080d0:	d122      	bne.n	8008118 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f003 0310 	and.w	r3, r3, #16
 80080dc:	2b10      	cmp	r3, #16
 80080de:	d11b      	bne.n	8008118 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f06f 0210 	mvn.w	r2, #16
 80080e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2208      	movs	r2, #8
 80080ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa51 	bl	80085a6 <HAL_TIM_IC_CaptureCallback>
 8008104:	e005      	b.n	8008112 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa43 	bl	8008592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fa54 	bl	80085ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	2b01      	cmp	r3, #1
 8008124:	d10e      	bne.n	8008144 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b01      	cmp	r3, #1
 8008132:	d107      	bne.n	8008144 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f06f 0201 	mvn.w	r2, #1
 800813c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7fa f856 	bl	80021f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814e:	2b80      	cmp	r3, #128	; 0x80
 8008150:	d10e      	bne.n	8008170 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815c:	2b80      	cmp	r3, #128	; 0x80
 800815e:	d107      	bne.n	8008170 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fed8 	bl	8008f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800817e:	d10e      	bne.n	800819e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818a:	2b80      	cmp	r3, #128	; 0x80
 800818c:	d107      	bne.n	800819e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fecb 	bl	8008f34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a8:	2b40      	cmp	r3, #64	; 0x40
 80081aa:	d10e      	bne.n	80081ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b6:	2b40      	cmp	r3, #64	; 0x40
 80081b8:	d107      	bne.n	80081ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fa02 	bl	80085ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b20      	cmp	r3, #32
 80081d6:	d10e      	bne.n	80081f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	f003 0320 	and.w	r3, r3, #32
 80081e2:	2b20      	cmp	r3, #32
 80081e4:	d107      	bne.n	80081f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f06f 0220 	mvn.w	r2, #32
 80081ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fe8b 	bl	8008f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081f6:	bf00      	nop
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008212:	2b01      	cmp	r3, #1
 8008214:	d101      	bne.n	800821a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008216:	2302      	movs	r3, #2
 8008218:	e0fd      	b.n	8008416 <HAL_TIM_PWM_ConfigChannel+0x216>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b14      	cmp	r3, #20
 8008226:	f200 80f0 	bhi.w	800840a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800822a:	a201      	add	r2, pc, #4	; (adr r2, 8008230 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800822c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008230:	08008285 	.word	0x08008285
 8008234:	0800840b 	.word	0x0800840b
 8008238:	0800840b 	.word	0x0800840b
 800823c:	0800840b 	.word	0x0800840b
 8008240:	080082c5 	.word	0x080082c5
 8008244:	0800840b 	.word	0x0800840b
 8008248:	0800840b 	.word	0x0800840b
 800824c:	0800840b 	.word	0x0800840b
 8008250:	08008307 	.word	0x08008307
 8008254:	0800840b 	.word	0x0800840b
 8008258:	0800840b 	.word	0x0800840b
 800825c:	0800840b 	.word	0x0800840b
 8008260:	08008347 	.word	0x08008347
 8008264:	0800840b 	.word	0x0800840b
 8008268:	0800840b 	.word	0x0800840b
 800826c:	0800840b 	.word	0x0800840b
 8008270:	08008389 	.word	0x08008389
 8008274:	0800840b 	.word	0x0800840b
 8008278:	0800840b 	.word	0x0800840b
 800827c:	0800840b 	.word	0x0800840b
 8008280:	080083c9 	.word	0x080083c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68b9      	ldr	r1, [r7, #8]
 800828a:	4618      	mov	r0, r3
 800828c:	f000 fa0e 	bl	80086ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	699a      	ldr	r2, [r3, #24]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f042 0208 	orr.w	r2, r2, #8
 800829e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	699a      	ldr	r2, [r3, #24]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 0204 	bic.w	r2, r2, #4
 80082ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6999      	ldr	r1, [r3, #24]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	691a      	ldr	r2, [r3, #16]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	430a      	orrs	r2, r1
 80082c0:	619a      	str	r2, [r3, #24]
      break;
 80082c2:	e0a3      	b.n	800840c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68b9      	ldr	r1, [r7, #8]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fa6a 	bl	80087a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	699a      	ldr	r2, [r3, #24]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	699a      	ldr	r2, [r3, #24]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6999      	ldr	r1, [r3, #24]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	021a      	lsls	r2, r3, #8
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	430a      	orrs	r2, r1
 8008302:	619a      	str	r2, [r3, #24]
      break;
 8008304:	e082      	b.n	800840c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fac3 	bl	8008898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	69da      	ldr	r2, [r3, #28]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f042 0208 	orr.w	r2, r2, #8
 8008320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69da      	ldr	r2, [r3, #28]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f022 0204 	bic.w	r2, r2, #4
 8008330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	69d9      	ldr	r1, [r3, #28]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	691a      	ldr	r2, [r3, #16]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	430a      	orrs	r2, r1
 8008342:	61da      	str	r2, [r3, #28]
      break;
 8008344:	e062      	b.n	800840c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68b9      	ldr	r1, [r7, #8]
 800834c:	4618      	mov	r0, r3
 800834e:	f000 fb1b 	bl	8008988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	69da      	ldr	r2, [r3, #28]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69da      	ldr	r2, [r3, #28]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69d9      	ldr	r1, [r3, #28]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	021a      	lsls	r2, r3, #8
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	61da      	str	r2, [r3, #28]
      break;
 8008386:	e041      	b.n	800840c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68b9      	ldr	r1, [r7, #8]
 800838e:	4618      	mov	r0, r3
 8008390:	f000 fb58 	bl	8008a44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f042 0208 	orr.w	r2, r2, #8
 80083a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f022 0204 	bic.w	r2, r2, #4
 80083b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	691a      	ldr	r2, [r3, #16]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083c6:	e021      	b.n	800840c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68b9      	ldr	r1, [r7, #8]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 fb90 	bl	8008af4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	021a      	lsls	r2, r3, #8
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008408:	e000      	b.n	800840c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800840a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop

08008420 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008430:	2b01      	cmp	r3, #1
 8008432:	d101      	bne.n	8008438 <HAL_TIM_ConfigClockSource+0x18>
 8008434:	2302      	movs	r3, #2
 8008436:	e0a8      	b.n	800858a <HAL_TIM_ConfigClockSource+0x16a>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008456:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800845a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008462:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b40      	cmp	r3, #64	; 0x40
 8008472:	d067      	beq.n	8008544 <HAL_TIM_ConfigClockSource+0x124>
 8008474:	2b40      	cmp	r3, #64	; 0x40
 8008476:	d80b      	bhi.n	8008490 <HAL_TIM_ConfigClockSource+0x70>
 8008478:	2b10      	cmp	r3, #16
 800847a:	d073      	beq.n	8008564 <HAL_TIM_ConfigClockSource+0x144>
 800847c:	2b10      	cmp	r3, #16
 800847e:	d802      	bhi.n	8008486 <HAL_TIM_ConfigClockSource+0x66>
 8008480:	2b00      	cmp	r3, #0
 8008482:	d06f      	beq.n	8008564 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008484:	e078      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008486:	2b20      	cmp	r3, #32
 8008488:	d06c      	beq.n	8008564 <HAL_TIM_ConfigClockSource+0x144>
 800848a:	2b30      	cmp	r3, #48	; 0x30
 800848c:	d06a      	beq.n	8008564 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800848e:	e073      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008490:	2b70      	cmp	r3, #112	; 0x70
 8008492:	d00d      	beq.n	80084b0 <HAL_TIM_ConfigClockSource+0x90>
 8008494:	2b70      	cmp	r3, #112	; 0x70
 8008496:	d804      	bhi.n	80084a2 <HAL_TIM_ConfigClockSource+0x82>
 8008498:	2b50      	cmp	r3, #80	; 0x50
 800849a:	d033      	beq.n	8008504 <HAL_TIM_ConfigClockSource+0xe4>
 800849c:	2b60      	cmp	r3, #96	; 0x60
 800849e:	d041      	beq.n	8008524 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80084a0:	e06a      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80084a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084a6:	d066      	beq.n	8008576 <HAL_TIM_ConfigClockSource+0x156>
 80084a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ac:	d017      	beq.n	80084de <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80084ae:	e063      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	6899      	ldr	r1, [r3, #8]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f000 fbee 	bl	8008ca0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	609a      	str	r2, [r3, #8]
      break;
 80084dc:	e04c      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6818      	ldr	r0, [r3, #0]
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	6899      	ldr	r1, [r3, #8]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	f000 fbd7 	bl	8008ca0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	689a      	ldr	r2, [r3, #8]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008500:	609a      	str	r2, [r3, #8]
      break;
 8008502:	e039      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	6859      	ldr	r1, [r3, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	461a      	mov	r2, r3
 8008512:	f000 fb49 	bl	8008ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2150      	movs	r1, #80	; 0x50
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fba2 	bl	8008c66 <TIM_ITRx_SetConfig>
      break;
 8008522:	e029      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6818      	ldr	r0, [r3, #0]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	6859      	ldr	r1, [r3, #4]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	461a      	mov	r2, r3
 8008532:	f000 fb68 	bl	8008c06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2160      	movs	r1, #96	; 0x60
 800853c:	4618      	mov	r0, r3
 800853e:	f000 fb92 	bl	8008c66 <TIM_ITRx_SetConfig>
      break;
 8008542:	e019      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	6859      	ldr	r1, [r3, #4]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	461a      	mov	r2, r3
 8008552:	f000 fb29 	bl	8008ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2140      	movs	r1, #64	; 0x40
 800855c:	4618      	mov	r0, r3
 800855e:	f000 fb82 	bl	8008c66 <TIM_ITRx_SetConfig>
      break;
 8008562:	e009      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4619      	mov	r1, r3
 800856e:	4610      	mov	r0, r2
 8008570:	f000 fb79 	bl	8008c66 <TIM_ITRx_SetConfig>
        break;
 8008574:	e000      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8008576:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008592:	b480      	push	{r7}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800859a:	bf00      	nop
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b083      	sub	sp, #12
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085ae:	bf00      	nop
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b083      	sub	sp, #12
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085c2:	bf00      	nop
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085d6:	bf00      	nop
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
	...

080085e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a2a      	ldr	r2, [pc, #168]	; (80086a0 <TIM_Base_SetConfig+0xbc>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d003      	beq.n	8008604 <TIM_Base_SetConfig+0x20>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008602:	d108      	bne.n	8008616 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800860a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a21      	ldr	r2, [pc, #132]	; (80086a0 <TIM_Base_SetConfig+0xbc>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d00b      	beq.n	8008636 <TIM_Base_SetConfig+0x52>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008624:	d007      	beq.n	8008636 <TIM_Base_SetConfig+0x52>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a1e      	ldr	r2, [pc, #120]	; (80086a4 <TIM_Base_SetConfig+0xc0>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d003      	beq.n	8008636 <TIM_Base_SetConfig+0x52>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a1d      	ldr	r2, [pc, #116]	; (80086a8 <TIM_Base_SetConfig+0xc4>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d108      	bne.n	8008648 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800863c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	4313      	orrs	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	4313      	orrs	r3, r2
 8008654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a0c      	ldr	r2, [pc, #48]	; (80086a0 <TIM_Base_SetConfig+0xbc>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d007      	beq.n	8008684 <TIM_Base_SetConfig+0xa0>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a0b      	ldr	r2, [pc, #44]	; (80086a4 <TIM_Base_SetConfig+0xc0>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d003      	beq.n	8008684 <TIM_Base_SetConfig+0xa0>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a0a      	ldr	r2, [pc, #40]	; (80086a8 <TIM_Base_SetConfig+0xc4>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d103      	bne.n	800868c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	691a      	ldr	r2, [r3, #16]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	615a      	str	r2, [r3, #20]
}
 8008692:	bf00      	nop
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	40012c00 	.word	0x40012c00
 80086a4:	40014400 	.word	0x40014400
 80086a8:	40014800 	.word	0x40014800

080086ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b087      	sub	sp, #28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	f023 0201 	bic.w	r2, r3, #1
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f023 0303 	bic.w	r3, r3, #3
 80086e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f023 0302 	bic.w	r3, r3, #2
 80086f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	4313      	orrs	r3, r2
 8008702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a24      	ldr	r2, [pc, #144]	; (8008798 <TIM_OC1_SetConfig+0xec>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d007      	beq.n	800871c <TIM_OC1_SetConfig+0x70>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a23      	ldr	r2, [pc, #140]	; (800879c <TIM_OC1_SetConfig+0xf0>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d003      	beq.n	800871c <TIM_OC1_SetConfig+0x70>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a22      	ldr	r2, [pc, #136]	; (80087a0 <TIM_OC1_SetConfig+0xf4>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d10c      	bne.n	8008736 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	f023 0308 	bic.w	r3, r3, #8
 8008722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	4313      	orrs	r3, r2
 800872c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f023 0304 	bic.w	r3, r3, #4
 8008734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a17      	ldr	r2, [pc, #92]	; (8008798 <TIM_OC1_SetConfig+0xec>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d007      	beq.n	800874e <TIM_OC1_SetConfig+0xa2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a17      	ldr	r2, [pc, #92]	; (80087a0 <TIM_OC1_SetConfig+0xf4>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d003      	beq.n	800874e <TIM_OC1_SetConfig+0xa2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a14      	ldr	r2, [pc, #80]	; (800879c <TIM_OC1_SetConfig+0xf0>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d111      	bne.n	8008772 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800875c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	4313      	orrs	r3, r2
 8008766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	4313      	orrs	r3, r2
 8008770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	621a      	str	r2, [r3, #32]
}
 800878c:	bf00      	nop
 800878e:	371c      	adds	r7, #28
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	40012c00 	.word	0x40012c00
 800879c:	40014800 	.word	0x40014800
 80087a0:	40014400 	.word	0x40014400

080087a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	f023 0210 	bic.w	r2, r3, #16
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	021b      	lsls	r3, r3, #8
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	f023 0320 	bic.w	r3, r3, #32
 80087f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	011b      	lsls	r3, r3, #4
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a22      	ldr	r2, [pc, #136]	; (800888c <TIM_OC2_SetConfig+0xe8>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d10d      	bne.n	8008824 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800880e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	011b      	lsls	r3, r3, #4
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	4313      	orrs	r3, r2
 800881a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008822:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a19      	ldr	r2, [pc, #100]	; (800888c <TIM_OC2_SetConfig+0xe8>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d007      	beq.n	800883c <TIM_OC2_SetConfig+0x98>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a18      	ldr	r2, [pc, #96]	; (8008890 <TIM_OC2_SetConfig+0xec>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d003      	beq.n	800883c <TIM_OC2_SetConfig+0x98>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a17      	ldr	r2, [pc, #92]	; (8008894 <TIM_OC2_SetConfig+0xf0>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d113      	bne.n	8008864 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800884a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	4313      	orrs	r3, r2
 8008856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	4313      	orrs	r3, r2
 8008862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	685a      	ldr	r2, [r3, #4]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	621a      	str	r2, [r3, #32]
}
 800887e:	bf00      	nop
 8008880:	371c      	adds	r7, #28
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	40012c00 	.word	0x40012c00
 8008890:	40014400 	.word	0x40014400
 8008894:	40014800 	.word	0x40014800

08008898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f023 0303 	bic.w	r3, r3, #3
 80088d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	4313      	orrs	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	021b      	lsls	r3, r3, #8
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a21      	ldr	r2, [pc, #132]	; (800897c <TIM_OC3_SetConfig+0xe4>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d10d      	bne.n	8008916 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008900:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	021b      	lsls	r3, r3, #8
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	4313      	orrs	r3, r2
 800890c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a18      	ldr	r2, [pc, #96]	; (800897c <TIM_OC3_SetConfig+0xe4>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d007      	beq.n	800892e <TIM_OC3_SetConfig+0x96>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a17      	ldr	r2, [pc, #92]	; (8008980 <TIM_OC3_SetConfig+0xe8>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d003      	beq.n	800892e <TIM_OC3_SetConfig+0x96>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a16      	ldr	r2, [pc, #88]	; (8008984 <TIM_OC3_SetConfig+0xec>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d113      	bne.n	8008956 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800893c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	011b      	lsls	r3, r3, #4
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	4313      	orrs	r3, r2
 8008948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	011b      	lsls	r3, r3, #4
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	4313      	orrs	r3, r2
 8008954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	621a      	str	r2, [r3, #32]
}
 8008970:	bf00      	nop
 8008972:	371c      	adds	r7, #28
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	40012c00 	.word	0x40012c00
 8008980:	40014400 	.word	0x40014400
 8008984:	40014800 	.word	0x40014800

08008988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008988:	b480      	push	{r7}
 800898a:	b087      	sub	sp, #28
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	021b      	lsls	r3, r3, #8
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	031b      	lsls	r3, r3, #12
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a14      	ldr	r2, [pc, #80]	; (8008a38 <TIM_OC4_SetConfig+0xb0>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d007      	beq.n	80089fc <TIM_OC4_SetConfig+0x74>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a13      	ldr	r2, [pc, #76]	; (8008a3c <TIM_OC4_SetConfig+0xb4>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d003      	beq.n	80089fc <TIM_OC4_SetConfig+0x74>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a12      	ldr	r2, [pc, #72]	; (8008a40 <TIM_OC4_SetConfig+0xb8>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d109      	bne.n	8008a10 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	019b      	lsls	r3, r3, #6
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	685a      	ldr	r2, [r3, #4]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	621a      	str	r2, [r3, #32]
}
 8008a2a:	bf00      	nop
 8008a2c:	371c      	adds	r7, #28
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	40012c00 	.word	0x40012c00
 8008a3c:	40014400 	.word	0x40014400
 8008a40:	40014800 	.word	0x40014800

08008a44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	041b      	lsls	r3, r3, #16
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a13      	ldr	r2, [pc, #76]	; (8008ae8 <TIM_OC5_SetConfig+0xa4>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d007      	beq.n	8008aae <TIM_OC5_SetConfig+0x6a>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a12      	ldr	r2, [pc, #72]	; (8008aec <TIM_OC5_SetConfig+0xa8>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d003      	beq.n	8008aae <TIM_OC5_SetConfig+0x6a>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a11      	ldr	r2, [pc, #68]	; (8008af0 <TIM_OC5_SetConfig+0xac>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d109      	bne.n	8008ac2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ab4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	021b      	lsls	r3, r3, #8
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	621a      	str	r2, [r3, #32]
}
 8008adc:	bf00      	nop
 8008ade:	371c      	adds	r7, #28
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	40012c00 	.word	0x40012c00
 8008aec:	40014400 	.word	0x40014400
 8008af0:	40014800 	.word	0x40014800

08008af4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b087      	sub	sp, #28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	021b      	lsls	r3, r3, #8
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	051b      	lsls	r3, r3, #20
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a14      	ldr	r2, [pc, #80]	; (8008b9c <TIM_OC6_SetConfig+0xa8>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d007      	beq.n	8008b60 <TIM_OC6_SetConfig+0x6c>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a13      	ldr	r2, [pc, #76]	; (8008ba0 <TIM_OC6_SetConfig+0xac>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d003      	beq.n	8008b60 <TIM_OC6_SetConfig+0x6c>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a12      	ldr	r2, [pc, #72]	; (8008ba4 <TIM_OC6_SetConfig+0xb0>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d109      	bne.n	8008b74 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	029b      	lsls	r3, r3, #10
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	685a      	ldr	r2, [r3, #4]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	621a      	str	r2, [r3, #32]
}
 8008b8e:	bf00      	nop
 8008b90:	371c      	adds	r7, #28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	40012c00 	.word	0x40012c00
 8008ba0:	40014400 	.word	0x40014400
 8008ba4:	40014800 	.word	0x40014800

08008ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	f023 0201 	bic.w	r2, r3, #1
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	011b      	lsls	r3, r3, #4
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f023 030a 	bic.w	r3, r3, #10
 8008be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	621a      	str	r2, [r3, #32]
}
 8008bfa:	bf00      	nop
 8008bfc:	371c      	adds	r7, #28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b087      	sub	sp, #28
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	60f8      	str	r0, [r7, #12]
 8008c0e:	60b9      	str	r1, [r7, #8]
 8008c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	f023 0210 	bic.w	r2, r3, #16
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6a1b      	ldr	r3, [r3, #32]
 8008c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	031b      	lsls	r3, r3, #12
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	011b      	lsls	r3, r3, #4
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	621a      	str	r2, [r3, #32]
}
 8008c5a:	bf00      	nop
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b085      	sub	sp, #20
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	f043 0307 	orr.w	r3, r3, #7
 8008c8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	609a      	str	r2, [r3, #8]
}
 8008c94:	bf00      	nop
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
 8008cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	021a      	lsls	r2, r3, #8
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	609a      	str	r2, [r3, #8]
}
 8008cd4:	bf00      	nop
 8008cd6:	371c      	adds	r7, #28
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	f003 031f 	and.w	r3, r3, #31
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6a1a      	ldr	r2, [r3, #32]
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	43db      	mvns	r3, r3
 8008d02:	401a      	ands	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6a1a      	ldr	r2, [r3, #32]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	f003 031f 	and.w	r3, r3, #31
 8008d12:	6879      	ldr	r1, [r7, #4]
 8008d14:	fa01 f303 	lsl.w	r3, r1, r3
 8008d18:	431a      	orrs	r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	621a      	str	r2, [r3, #32]
}
 8008d1e:	bf00      	nop
 8008d20:	371c      	adds	r7, #28
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
	...

08008d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d101      	bne.n	8008d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d40:	2302      	movs	r3, #2
 8008d42:	e04a      	b.n	8008dda <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2202      	movs	r2, #2
 8008d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a1f      	ldr	r2, [pc, #124]	; (8008de8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d108      	bne.n	8008d80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a12      	ldr	r2, [pc, #72]	; (8008de8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d004      	beq.n	8008dae <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dac:	d10c      	bne.n	8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3714      	adds	r7, #20
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	40012c00 	.word	0x40012c00

08008dec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d101      	bne.n	8008e08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e04:	2302      	movs	r3, #2
 8008e06:	e078      	b.n	8008efa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	695b      	ldr	r3, [r3, #20]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	041b      	lsls	r3, r3, #16
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a20      	ldr	r2, [pc, #128]	; (8008f08 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d106      	bne.n	8008e9a <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a1a      	ldr	r2, [pc, #104]	; (8008f08 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d121      	bne.n	8008ee8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eae:	051b      	lsls	r3, r3, #20
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a0c      	ldr	r2, [pc, #48]	; (8008f08 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d106      	bne.n	8008ee8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	40012c00 	.word	0x40012c00

08008f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f50:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008f54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	4313      	orrs	r3, r2
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b085      	sub	sp, #20
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f82:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008f86:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	43db      	mvns	r3, r3
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	4013      	ands	r3, r2
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008fb0:	b084      	sub	sp, #16
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	f107 0014 	add.w	r0, r7, #20
 8008fbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7ff ffb0 	bl	8008f48 <USB_EnableGlobalInt>

  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ff4:	b004      	add	sp, #16
 8008ff6:	4770      	bx	lr

08008ff8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b09d      	sub	sp, #116	; 0x74
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	b29b      	uxth	r3, r3
 8009016:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800901a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800901e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	78db      	ldrb	r3, [r3, #3]
 8009026:	2b03      	cmp	r3, #3
 8009028:	d81f      	bhi.n	800906a <USB_ActivateEndpoint+0x72>
 800902a:	a201      	add	r2, pc, #4	; (adr r2, 8009030 <USB_ActivateEndpoint+0x38>)
 800902c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009030:	08009041 	.word	0x08009041
 8009034:	0800905d 	.word	0x0800905d
 8009038:	08009073 	.word	0x08009073
 800903c:	0800904f 	.word	0x0800904f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009040:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009048:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800904c:	e012      	b.n	8009074 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800904e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009052:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009056:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800905a:	e00b      	b.n	8009074 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800905c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009060:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009064:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009068:	e004      	b.n	8009074 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009070:	e000      	b.n	8009074 <USB_ActivateEndpoint+0x7c>
      break;
 8009072:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	441a      	add	r2, r3
 800907e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800908a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800908e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009092:	b29b      	uxth	r3, r3
 8009094:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	b21b      	sxth	r3, r3
 80090a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ae:	b21a      	sxth	r2, r3
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	b21b      	sxth	r3, r3
 80090b6:	4313      	orrs	r3, r2
 80090b8:	b21b      	sxth	r3, r3
 80090ba:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	441a      	add	r2, r3
 80090c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80090cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090dc:	b29b      	uxth	r3, r3
 80090de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	7b1b      	ldrb	r3, [r3, #12]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f040 8149 	bne.w	800937c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	785b      	ldrb	r3, [r3, #1]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f000 8084 	beq.w	80091fc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	61bb      	str	r3, [r7, #24]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090fe:	b29b      	uxth	r3, r3
 8009100:	461a      	mov	r2, r3
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	4413      	add	r3, r2
 8009106:	61bb      	str	r3, [r7, #24]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	00da      	lsls	r2, r3, #3
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	4413      	add	r3, r2
 8009112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009116:	617b      	str	r3, [r7, #20]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	88db      	ldrh	r3, [r3, #6]
 800911c:	085b      	lsrs	r3, r3, #1
 800911e:	b29b      	uxth	r3, r3
 8009120:	005b      	lsls	r3, r3, #1
 8009122:	b29a      	uxth	r2, r3
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4413      	add	r3, r2
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	827b      	strh	r3, [r7, #18]
 8009136:	8a7b      	ldrh	r3, [r7, #18]
 8009138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800913c:	2b00      	cmp	r3, #0
 800913e:	d01b      	beq.n	8009178 <USB_ActivateEndpoint+0x180>
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4413      	add	r3, r2
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	b29b      	uxth	r3, r3
 800914e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009156:	823b      	strh	r3, [r7, #16]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	441a      	add	r2, r3
 8009162:	8a3b      	ldrh	r3, [r7, #16]
 8009164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800916c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009170:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009174:	b29b      	uxth	r3, r3
 8009176:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	78db      	ldrb	r3, [r3, #3]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d020      	beq.n	80091c2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	881b      	ldrh	r3, [r3, #0]
 800918c:	b29b      	uxth	r3, r3
 800918e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009196:	81bb      	strh	r3, [r7, #12]
 8009198:	89bb      	ldrh	r3, [r7, #12]
 800919a:	f083 0320 	eor.w	r3, r3, #32
 800919e:	81bb      	strh	r3, [r7, #12]
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	441a      	add	r2, r3
 80091aa:	89bb      	ldrh	r3, [r7, #12]
 80091ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091bc:	b29b      	uxth	r3, r3
 80091be:	8013      	strh	r3, [r2, #0]
 80091c0:	e2bf      	b.n	8009742 <USB_ActivateEndpoint+0x74a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	4413      	add	r3, r2
 80091cc:	881b      	ldrh	r3, [r3, #0]
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091d8:	81fb      	strh	r3, [r7, #14]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	441a      	add	r2, r3
 80091e4:	89fb      	ldrh	r3, [r7, #14]
 80091e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	8013      	strh	r3, [r2, #0]
 80091fa:	e2a2      	b.n	8009742 <USB_ActivateEndpoint+0x74a>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	633b      	str	r3, [r7, #48]	; 0x30
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009206:	b29b      	uxth	r3, r3
 8009208:	461a      	mov	r2, r3
 800920a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920c:	4413      	add	r3, r2
 800920e:	633b      	str	r3, [r7, #48]	; 0x30
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	00da      	lsls	r2, r3, #3
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	4413      	add	r3, r2
 800921a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800921e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	88db      	ldrh	r3, [r3, #6]
 8009224:	085b      	lsrs	r3, r3, #1
 8009226:	b29b      	uxth	r3, r3
 8009228:	005b      	lsls	r3, r3, #1
 800922a:	b29a      	uxth	r2, r3
 800922c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922e:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	62bb      	str	r3, [r7, #40]	; 0x28
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800923a:	b29b      	uxth	r3, r3
 800923c:	461a      	mov	r2, r3
 800923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009240:	4413      	add	r3, r2
 8009242:	62bb      	str	r3, [r7, #40]	; 0x28
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	00da      	lsls	r2, r3, #3
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	4413      	add	r3, r2
 800924e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009252:	627b      	str	r3, [r7, #36]	; 0x24
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d112      	bne.n	8009282 <USB_ActivateEndpoint+0x28a>
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	881b      	ldrh	r3, [r3, #0]
 8009260:	b29b      	uxth	r3, r3
 8009262:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009266:	b29a      	uxth	r2, r3
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	801a      	strh	r2, [r3, #0]
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	b29b      	uxth	r3, r3
 8009272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800927a:	b29a      	uxth	r2, r3
 800927c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927e:	801a      	strh	r2, [r3, #0]
 8009280:	e02f      	b.n	80092e2 <USB_ActivateEndpoint+0x2ea>
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	2b3e      	cmp	r3, #62	; 0x3e
 8009288:	d813      	bhi.n	80092b2 <USB_ActivateEndpoint+0x2ba>
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	085b      	lsrs	r3, r3, #1
 8009290:	66bb      	str	r3, [r7, #104]	; 0x68
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	2b00      	cmp	r3, #0
 800929c:	d002      	beq.n	80092a4 <USB_ActivateEndpoint+0x2ac>
 800929e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092a0:	3301      	adds	r3, #1
 80092a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80092a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	029b      	lsls	r3, r3, #10
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	801a      	strh	r2, [r3, #0]
 80092b0:	e017      	b.n	80092e2 <USB_ActivateEndpoint+0x2ea>
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	095b      	lsrs	r3, r3, #5
 80092b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	f003 031f 	and.w	r3, r3, #31
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d102      	bne.n	80092cc <USB_ActivateEndpoint+0x2d4>
 80092c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092c8:	3b01      	subs	r3, #1
 80092ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80092cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	029b      	lsls	r3, r3, #10
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092dc:	b29a      	uxth	r2, r3
 80092de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4413      	add	r3, r2
 80092ec:	881b      	ldrh	r3, [r3, #0]
 80092ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80092f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d01b      	beq.n	8009332 <USB_ActivateEndpoint+0x33a>
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4413      	add	r3, r2
 8009304:	881b      	ldrh	r3, [r3, #0]
 8009306:	b29b      	uxth	r3, r3
 8009308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800930c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009310:	843b      	strh	r3, [r7, #32]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	441a      	add	r2, r3
 800931c:	8c3b      	ldrh	r3, [r7, #32]
 800931e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009326:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800932a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800932e:	b29b      	uxth	r3, r3
 8009330:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	b29b      	uxth	r3, r3
 8009340:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009348:	83fb      	strh	r3, [r7, #30]
 800934a:	8bfb      	ldrh	r3, [r7, #30]
 800934c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009350:	83fb      	strh	r3, [r7, #30]
 8009352:	8bfb      	ldrh	r3, [r7, #30]
 8009354:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009358:	83fb      	strh	r3, [r7, #30]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	441a      	add	r2, r3
 8009364:	8bfb      	ldrh	r3, [r7, #30]
 8009366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800936a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800936e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009376:	b29b      	uxth	r3, r3
 8009378:	8013      	strh	r3, [r2, #0]
 800937a:	e1e2      	b.n	8009742 <USB_ActivateEndpoint+0x74a>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	b29b      	uxth	r3, r3
 800938a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800938e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009392:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	441a      	add	r2, r3
 80093a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80093a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093ac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80093b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	663b      	str	r3, [r7, #96]	; 0x60
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	461a      	mov	r2, r3
 80093c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093c8:	4413      	add	r3, r2
 80093ca:	663b      	str	r3, [r7, #96]	; 0x60
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	00da      	lsls	r2, r3, #3
 80093d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093d4:	4413      	add	r3, r2
 80093d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	891b      	ldrh	r3, [r3, #8]
 80093e0:	085b      	lsrs	r3, r3, #1
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093ea:	801a      	strh	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	461a      	mov	r2, r3
 80093fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093fc:	4413      	add	r3, r2
 80093fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	00da      	lsls	r2, r3, #3
 8009406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009408:	4413      	add	r3, r2
 800940a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800940e:	657b      	str	r3, [r7, #84]	; 0x54
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	895b      	ldrh	r3, [r3, #10]
 8009414:	085b      	lsrs	r3, r3, #1
 8009416:	b29b      	uxth	r3, r3
 8009418:	005b      	lsls	r3, r3, #1
 800941a:	b29a      	uxth	r2, r3
 800941c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800941e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	785b      	ldrb	r3, [r3, #1]
 8009424:	2b00      	cmp	r3, #0
 8009426:	f040 80b1 	bne.w	800958c <USB_ActivateEndpoint+0x594>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4413      	add	r3, r2
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800943a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800943e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d01d      	beq.n	8009482 <USB_ActivateEndpoint+0x48a>
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	b29b      	uxth	r3, r3
 8009454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800945c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	441a      	add	r2, r3
 800946a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800946e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009476:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800947a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800947e:	b29b      	uxth	r3, r3
 8009480:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	4413      	add	r3, r2
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009490:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009496:	2b00      	cmp	r3, #0
 8009498:	d01b      	beq.n	80094d2 <USB_ActivateEndpoint+0x4da>
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	881b      	ldrh	r3, [r3, #0]
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	441a      	add	r2, r3
 80094bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80094be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	b29b      	uxth	r3, r3
 80094e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094e8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	441a      	add	r2, r3
 80094f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80094f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009502:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009506:	b29b      	uxth	r3, r3
 8009508:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4413      	add	r3, r2
 8009514:	881b      	ldrh	r3, [r3, #0]
 8009516:	b29b      	uxth	r3, r3
 8009518:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800951c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009520:	873b      	strh	r3, [r7, #56]	; 0x38
 8009522:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009524:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009528:	873b      	strh	r3, [r7, #56]	; 0x38
 800952a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800952c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009530:	873b      	strh	r3, [r7, #56]	; 0x38
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	441a      	add	r2, r3
 800953c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800953e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800954a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800954e:	b29b      	uxth	r3, r3
 8009550:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	881b      	ldrh	r3, [r3, #0]
 800955e:	b29b      	uxth	r3, r3
 8009560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009568:	86fb      	strh	r3, [r7, #54]	; 0x36
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	441a      	add	r2, r3
 8009574:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800957a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800957e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009586:	b29b      	uxth	r3, r3
 8009588:	8013      	strh	r3, [r2, #0]
 800958a:	e0da      	b.n	8009742 <USB_ActivateEndpoint+0x74a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800959c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80095a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d01d      	beq.n	80095e4 <USB_ActivateEndpoint+0x5ec>
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095be:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	441a      	add	r2, r3
 80095cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80095d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80095f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80095f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d01d      	beq.n	800963c <USB_ActivateEndpoint+0x644>
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4413      	add	r3, r2
 800960a:	881b      	ldrh	r3, [r3, #0]
 800960c:	b29b      	uxth	r3, r3
 800960e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009616:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	441a      	add	r2, r3
 8009624:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800962c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009634:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009638:	b29b      	uxth	r3, r3
 800963a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	b29b      	uxth	r3, r3
 800964a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800964e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009652:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	441a      	add	r2, r3
 8009660:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800966c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009674:	b29b      	uxth	r3, r3
 8009676:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	78db      	ldrb	r3, [r3, #3]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d024      	beq.n	80096ca <USB_ActivateEndpoint+0x6d2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	881b      	ldrh	r3, [r3, #0]
 800968c:	b29b      	uxth	r3, r3
 800968e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009696:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800969a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800969e:	f083 0320 	eor.w	r3, r3, #32
 80096a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	441a      	add	r2, r3
 80096b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80096b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	8013      	strh	r3, [r2, #0]
 80096c8:	e01d      	b.n	8009706 <USB_ActivateEndpoint+0x70e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096e0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	441a      	add	r2, r3
 80096ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80096f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009702:	b29b      	uxth	r3, r3
 8009704:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	881b      	ldrh	r3, [r3, #0]
 8009712:	b29b      	uxth	r3, r3
 8009714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800971c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	441a      	add	r2, r3
 800972a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800972e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800973a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800973e:	b29b      	uxth	r3, r3
 8009740:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009742:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009746:	4618      	mov	r0, r3
 8009748:	3774      	adds	r7, #116	; 0x74
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop

08009754 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009754:	b480      	push	{r7}
 8009756:	b08d      	sub	sp, #52	; 0x34
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	7b1b      	ldrb	r3, [r3, #12]
 8009762:	2b00      	cmp	r3, #0
 8009764:	f040 808e 	bne.w	8009884 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	785b      	ldrb	r3, [r3, #1]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d044      	beq.n	80097fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	881b      	ldrh	r3, [r3, #0]
 800977c:	81bb      	strh	r3, [r7, #12]
 800977e:	89bb      	ldrh	r3, [r7, #12]
 8009780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009784:	2b00      	cmp	r3, #0
 8009786:	d01b      	beq.n	80097c0 <USB_DeactivateEndpoint+0x6c>
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	b29b      	uxth	r3, r3
 8009796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800979a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800979e:	817b      	strh	r3, [r7, #10]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	441a      	add	r2, r3
 80097aa:	897b      	ldrh	r3, [r7, #10]
 80097ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097bc:	b29b      	uxth	r3, r3
 80097be:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	881b      	ldrh	r3, [r3, #0]
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097d6:	813b      	strh	r3, [r7, #8]
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	441a      	add	r2, r3
 80097e2:	893b      	ldrh	r3, [r7, #8]
 80097e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	8013      	strh	r3, [r2, #0]
 80097f8:	e192      	b.n	8009b20 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	881b      	ldrh	r3, [r3, #0]
 8009806:	827b      	strh	r3, [r7, #18]
 8009808:	8a7b      	ldrh	r3, [r7, #18]
 800980a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d01b      	beq.n	800984a <USB_DeactivateEndpoint+0xf6>
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	881b      	ldrh	r3, [r3, #0]
 800981e:	b29b      	uxth	r3, r3
 8009820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009828:	823b      	strh	r3, [r7, #16]
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	441a      	add	r2, r3
 8009834:	8a3b      	ldrh	r3, [r7, #16]
 8009836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800983a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800983e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009846:	b29b      	uxth	r3, r3
 8009848:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4413      	add	r3, r2
 8009854:	881b      	ldrh	r3, [r3, #0]
 8009856:	b29b      	uxth	r3, r3
 8009858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800985c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009860:	81fb      	strh	r3, [r7, #14]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	441a      	add	r2, r3
 800986c:	89fb      	ldrh	r3, [r7, #14]
 800986e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800987a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800987e:	b29b      	uxth	r3, r3
 8009880:	8013      	strh	r3, [r2, #0]
 8009882:	e14d      	b.n	8009b20 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	785b      	ldrb	r3, [r3, #1]
 8009888:	2b00      	cmp	r3, #0
 800988a:	f040 80a5 	bne.w	80099d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	881b      	ldrh	r3, [r3, #0]
 800989a:	843b      	strh	r3, [r7, #32]
 800989c:	8c3b      	ldrh	r3, [r7, #32]
 800989e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d01b      	beq.n	80098de <USB_DeactivateEndpoint+0x18a>
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098bc:	83fb      	strh	r3, [r7, #30]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	441a      	add	r2, r3
 80098c8:	8bfb      	ldrh	r3, [r7, #30]
 80098ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098da:	b29b      	uxth	r3, r3
 80098dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	881b      	ldrh	r3, [r3, #0]
 80098ea:	83bb      	strh	r3, [r7, #28]
 80098ec:	8bbb      	ldrh	r3, [r7, #28]
 80098ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d01b      	beq.n	800992e <USB_DeactivateEndpoint+0x1da>
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	b29b      	uxth	r3, r3
 8009904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800990c:	837b      	strh	r3, [r7, #26]
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	441a      	add	r2, r3
 8009918:	8b7b      	ldrh	r3, [r7, #26]
 800991a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800991e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009926:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800992a:	b29b      	uxth	r3, r3
 800992c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	b29b      	uxth	r3, r3
 800993c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009944:	833b      	strh	r3, [r7, #24]
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	441a      	add	r2, r3
 8009950:	8b3b      	ldrh	r3, [r7, #24]
 8009952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800995a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800995e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009962:	b29b      	uxth	r3, r3
 8009964:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4413      	add	r3, r2
 8009970:	881b      	ldrh	r3, [r3, #0]
 8009972:	b29b      	uxth	r3, r3
 8009974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800997c:	82fb      	strh	r3, [r7, #22]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	441a      	add	r2, r3
 8009988:	8afb      	ldrh	r3, [r7, #22]
 800998a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800998e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800999a:	b29b      	uxth	r3, r3
 800999c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	881b      	ldrh	r3, [r3, #0]
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099b4:	82bb      	strh	r3, [r7, #20]
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	441a      	add	r2, r3
 80099c0:	8abb      	ldrh	r3, [r7, #20]
 80099c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	8013      	strh	r3, [r2, #0]
 80099d6:	e0a3      	b.n	8009b20 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80099e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d01b      	beq.n	8009a28 <USB_DeactivateEndpoint+0x2d4>
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	881b      	ldrh	r3, [r3, #0]
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a06:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	441a      	add	r2, r3
 8009a12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	4413      	add	r3, r2
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009a36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d01b      	beq.n	8009a78 <USB_DeactivateEndpoint+0x324>
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	881b      	ldrh	r3, [r3, #0]
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a56:	853b      	strh	r3, [r7, #40]	; 0x28
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	441a      	add	r2, r3
 8009a62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	881b      	ldrh	r3, [r3, #0]
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a8e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	441a      	add	r2, r3
 8009a9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4413      	add	r3, r2
 8009aba:	881b      	ldrh	r3, [r3, #0]
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ac6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	441a      	add	r2, r3
 8009ad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	881b      	ldrh	r3, [r3, #0]
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009afe:	847b      	strh	r3, [r7, #34]	; 0x22
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	441a      	add	r2, r3
 8009b0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3734      	adds	r7, #52	; 0x34
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr

08009b2e <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b0a0      	sub	sp, #128	; 0x80
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
 8009b36:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	785b      	ldrb	r3, [r3, #1]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	f040 81a1 	bne.w	8009e84 <USB_EPStartXfer+0x356>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	699a      	ldr	r2, [r3, #24]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d909      	bls.n	8009b62 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	699a      	ldr	r2, [r3, #24]
 8009b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b5a:	1ad2      	subs	r2, r2, r3
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	619a      	str	r2, [r3, #24]
 8009b60:	e005      	b.n	8009b6e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	7b1b      	ldrb	r3, [r3, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d11f      	bne.n	8009bb6 <USB_EPStartXfer+0x88>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	6959      	ldr	r1, [r3, #20]
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	88da      	ldrh	r2, [r3, #6]
 8009b7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fc3f 	bl	800a406 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	613b      	str	r3, [r7, #16]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	461a      	mov	r2, r3
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	4413      	add	r3, r2
 8009b9a:	613b      	str	r3, [r7, #16]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	00da      	lsls	r2, r3, #3
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009baa:	60fb      	str	r3, [r7, #12]
 8009bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	801a      	strh	r2, [r3, #0]
 8009bb4:	e141      	b.n	8009e3a <USB_EPStartXfer+0x30c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	881b      	ldrh	r3, [r3, #0]
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d076      	beq.n	8009cba <USB_EPStartXfer+0x18c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	627b      	str	r3, [r7, #36]	; 0x24
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	785b      	ldrb	r3, [r3, #1]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d153      	bne.n	8009c80 <USB_EPStartXfer+0x152>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	61fb      	str	r3, [r7, #28]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	461a      	mov	r2, r3
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	4413      	add	r3, r2
 8009bea:	61fb      	str	r3, [r7, #28]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	00da      	lsls	r2, r3, #3
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bfa:	61bb      	str	r3, [r7, #24]
 8009bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d112      	bne.n	8009c28 <USB_EPStartXfer+0xfa>
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	801a      	strh	r2, [r3, #0]
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	801a      	strh	r2, [r3, #0]
 8009c26:	e043      	b.n	8009cb0 <USB_EPStartXfer+0x182>
 8009c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c2a:	2b3e      	cmp	r3, #62	; 0x3e
 8009c2c:	d811      	bhi.n	8009c52 <USB_EPStartXfer+0x124>
 8009c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c30:	085b      	lsrs	r3, r3, #1
 8009c32:	677b      	str	r3, [r7, #116]	; 0x74
 8009c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d002      	beq.n	8009c44 <USB_EPStartXfer+0x116>
 8009c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c40:	3301      	adds	r3, #1
 8009c42:	677b      	str	r3, [r7, #116]	; 0x74
 8009c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	029b      	lsls	r3, r3, #10
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	801a      	strh	r2, [r3, #0]
 8009c50:	e02e      	b.n	8009cb0 <USB_EPStartXfer+0x182>
 8009c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c54:	095b      	lsrs	r3, r3, #5
 8009c56:	677b      	str	r3, [r7, #116]	; 0x74
 8009c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c5a:	f003 031f 	and.w	r3, r3, #31
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d102      	bne.n	8009c68 <USB_EPStartXfer+0x13a>
 8009c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c64:	3b01      	subs	r3, #1
 8009c66:	677b      	str	r3, [r7, #116]	; 0x74
 8009c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	029b      	lsls	r3, r3, #10
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	801a      	strh	r2, [r3, #0]
 8009c7e:	e017      	b.n	8009cb0 <USB_EPStartXfer+0x182>
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	785b      	ldrb	r3, [r3, #1]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d113      	bne.n	8009cb0 <USB_EPStartXfer+0x182>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	461a      	mov	r2, r3
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	4413      	add	r3, r2
 8009c96:	627b      	str	r3, [r7, #36]	; 0x24
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	00da      	lsls	r2, r3, #3
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ca6:	623b      	str	r3, [r7, #32]
 8009ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	895b      	ldrh	r3, [r3, #10]
 8009cb4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8009cb8:	e075      	b.n	8009da6 <USB_EPStartXfer+0x278>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	785b      	ldrb	r3, [r3, #1]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d153      	bne.n	8009d6a <USB_EPStartXfer+0x23c>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	461a      	mov	r2, r3
 8009cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd2:	4413      	add	r3, r2
 8009cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	00da      	lsls	r2, r3, #3
 8009cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cde:	4413      	add	r3, r2
 8009ce0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d112      	bne.n	8009d12 <USB_EPStartXfer+0x1e4>
 8009cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cee:	881b      	ldrh	r3, [r3, #0]
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfa:	801a      	strh	r2, [r3, #0]
 8009cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0e:	801a      	strh	r2, [r3, #0]
 8009d10:	e045      	b.n	8009d9e <USB_EPStartXfer+0x270>
 8009d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d14:	2b3e      	cmp	r3, #62	; 0x3e
 8009d16:	d811      	bhi.n	8009d3c <USB_EPStartXfer+0x20e>
 8009d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d1a:	085b      	lsrs	r3, r3, #1
 8009d1c:	673b      	str	r3, [r7, #112]	; 0x70
 8009d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <USB_EPStartXfer+0x200>
 8009d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	673b      	str	r3, [r7, #112]	; 0x70
 8009d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	029b      	lsls	r3, r3, #10
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d38:	801a      	strh	r2, [r3, #0]
 8009d3a:	e030      	b.n	8009d9e <USB_EPStartXfer+0x270>
 8009d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d3e:	095b      	lsrs	r3, r3, #5
 8009d40:	673b      	str	r3, [r7, #112]	; 0x70
 8009d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d44:	f003 031f 	and.w	r3, r3, #31
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d102      	bne.n	8009d52 <USB_EPStartXfer+0x224>
 8009d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	673b      	str	r3, [r7, #112]	; 0x70
 8009d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	029b      	lsls	r3, r3, #10
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	801a      	strh	r2, [r3, #0]
 8009d68:	e019      	b.n	8009d9e <USB_EPStartXfer+0x270>
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	785b      	ldrb	r3, [r3, #1]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d115      	bne.n	8009d9e <USB_EPStartXfer+0x270>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	637b      	str	r3, [r7, #52]	; 0x34
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	461a      	mov	r2, r3
 8009d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d82:	4413      	add	r3, r2
 8009d84:	637b      	str	r3, [r7, #52]	; 0x34
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	00da      	lsls	r2, r3, #3
 8009d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d8e:	4413      	add	r3, r2
 8009d90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d94:	633b      	str	r3, [r7, #48]	; 0x30
 8009d96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d98:	b29a      	uxth	r2, r3
 8009d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	891b      	ldrh	r3, [r3, #8]
 8009da2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	6959      	ldr	r1, [r3, #20]
 8009daa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 fb27 	bl	800a406 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	785b      	ldrb	r3, [r3, #1]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d11c      	bne.n	8009dfa <USB_EPStartXfer+0x2cc>
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dd6:	82bb      	strh	r3, [r7, #20]
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	441a      	add	r2, r3
 8009de2:	8abb      	ldrh	r3, [r7, #20]
 8009de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009df0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	8013      	strh	r3, [r2, #0]
 8009df8:	e01f      	b.n	8009e3a <USB_EPStartXfer+0x30c>
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	785b      	ldrb	r3, [r3, #1]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d11b      	bne.n	8009e3a <USB_EPStartXfer+0x30c>
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4413      	add	r3, r2
 8009e0c:	881b      	ldrh	r3, [r3, #0]
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e18:	82fb      	strh	r3, [r7, #22]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	441a      	add	r2, r3
 8009e24:	8afb      	ldrh	r3, [r7, #22]
 8009e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	4413      	add	r3, r2
 8009e44:	881b      	ldrh	r3, [r3, #0]
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e50:	817b      	strh	r3, [r7, #10]
 8009e52:	897b      	ldrh	r3, [r7, #10]
 8009e54:	f083 0310 	eor.w	r3, r3, #16
 8009e58:	817b      	strh	r3, [r7, #10]
 8009e5a:	897b      	ldrh	r3, [r7, #10]
 8009e5c:	f083 0320 	eor.w	r3, r3, #32
 8009e60:	817b      	strh	r3, [r7, #10]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	441a      	add	r2, r3
 8009e6c:	897b      	ldrh	r3, [r7, #10]
 8009e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	8013      	strh	r3, [r2, #0]
 8009e82:	e175      	b.n	800a170 <USB_EPStartXfer+0x642>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	699a      	ldr	r2, [r3, #24]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d909      	bls.n	8009ea4 <USB_EPStartXfer+0x376>
    {
      len = ep->maxpacket;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	699a      	ldr	r2, [r3, #24]
 8009e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e9c:	1ad2      	subs	r2, r2, r3
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	619a      	str	r2, [r3, #24]
 8009ea2:	e005      	b.n	8009eb0 <USB_EPStartXfer+0x382>
    }
    else
    {
      len = ep->xfer_len;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	2200      	movs	r2, #0
 8009eae:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	7b1b      	ldrb	r3, [r3, #12]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d153      	bne.n	8009f60 <USB_EPStartXfer+0x432>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	643b      	str	r3, [r7, #64]	; 0x40
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ec8:	4413      	add	r3, r2
 8009eca:	643b      	str	r3, [r7, #64]	; 0x40
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	00da      	lsls	r2, r3, #3
 8009ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ed4:	4413      	add	r3, r2
 8009ed6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d112      	bne.n	8009f08 <USB_EPStartXfer+0x3da>
 8009ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee4:	881b      	ldrh	r3, [r3, #0]
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ef0:	801a      	strh	r2, [r3, #0]
 8009ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ef4:	881b      	ldrh	r3, [r3, #0]
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f04:	801a      	strh	r2, [r3, #0]
 8009f06:	e10f      	b.n	800a128 <USB_EPStartXfer+0x5fa>
 8009f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f0a:	2b3e      	cmp	r3, #62	; 0x3e
 8009f0c:	d811      	bhi.n	8009f32 <USB_EPStartXfer+0x404>
 8009f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f10:	085b      	lsrs	r3, r3, #1
 8009f12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <USB_EPStartXfer+0x3f6>
 8009f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f20:	3301      	adds	r3, #1
 8009f22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	029b      	lsls	r3, r3, #10
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f2e:	801a      	strh	r2, [r3, #0]
 8009f30:	e0fa      	b.n	800a128 <USB_EPStartXfer+0x5fa>
 8009f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f34:	095b      	lsrs	r3, r3, #5
 8009f36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f3a:	f003 031f 	and.w	r3, r3, #31
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d102      	bne.n	8009f48 <USB_EPStartXfer+0x41a>
 8009f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f44:	3b01      	subs	r3, #1
 8009f46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	029b      	lsls	r3, r3, #10
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f5c:	801a      	strh	r2, [r3, #0]
 8009f5e:	e0e3      	b.n	800a128 <USB_EPStartXfer+0x5fa>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	785b      	ldrb	r3, [r3, #1]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d153      	bne.n	800a010 <USB_EPStartXfer+0x4e2>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	461a      	mov	r2, r3
 8009f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f78:	4413      	add	r3, r2
 8009f7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	00da      	lsls	r2, r3, #3
 8009f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f84:	4413      	add	r3, r2
 8009f86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8009f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d112      	bne.n	8009fb8 <USB_EPStartXfer+0x48a>
 8009f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f94:	881b      	ldrh	r3, [r3, #0]
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fa0:	801a      	strh	r2, [r3, #0]
 8009fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fb4:	801a      	strh	r2, [r3, #0]
 8009fb6:	e045      	b.n	800a044 <USB_EPStartXfer+0x516>
 8009fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fba:	2b3e      	cmp	r3, #62	; 0x3e
 8009fbc:	d811      	bhi.n	8009fe2 <USB_EPStartXfer+0x4b4>
 8009fbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fc0:	085b      	lsrs	r3, r3, #1
 8009fc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fc6:	f003 0301 	and.w	r3, r3, #1
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d002      	beq.n	8009fd4 <USB_EPStartXfer+0x4a6>
 8009fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	029b      	lsls	r3, r3, #10
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fde:	801a      	strh	r2, [r3, #0]
 8009fe0:	e030      	b.n	800a044 <USB_EPStartXfer+0x516>
 8009fe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fe4:	095b      	lsrs	r3, r3, #5
 8009fe6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fea:	f003 031f 	and.w	r3, r3, #31
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d102      	bne.n	8009ff8 <USB_EPStartXfer+0x4ca>
 8009ff2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	029b      	lsls	r3, r3, #10
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a008:	b29a      	uxth	r2, r3
 800a00a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a00c:	801a      	strh	r2, [r3, #0]
 800a00e:	e019      	b.n	800a044 <USB_EPStartXfer+0x516>
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	785b      	ldrb	r3, [r3, #1]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d115      	bne.n	800a044 <USB_EPStartXfer+0x516>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	663b      	str	r3, [r7, #96]	; 0x60
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a022:	b29b      	uxth	r3, r3
 800a024:	461a      	mov	r2, r3
 800a026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a028:	4413      	add	r3, r2
 800a02a:	663b      	str	r3, [r7, #96]	; 0x60
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	00da      	lsls	r2, r3, #3
 800a032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a034:	4413      	add	r3, r2
 800a036:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a03a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a03c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a03e:	b29a      	uxth	r2, r3
 800a040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a042:	801a      	strh	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	653b      	str	r3, [r7, #80]	; 0x50
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	785b      	ldrb	r3, [r3, #1]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d153      	bne.n	800a0f8 <USB_EPStartXfer+0x5ca>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	64bb      	str	r3, [r7, #72]	; 0x48
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	461a      	mov	r2, r3
 800a05e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a060:	4413      	add	r3, r2
 800a062:	64bb      	str	r3, [r7, #72]	; 0x48
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	00da      	lsls	r2, r3, #3
 800a06a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a06c:	4413      	add	r3, r2
 800a06e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a072:	647b      	str	r3, [r7, #68]	; 0x44
 800a074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a076:	2b00      	cmp	r3, #0
 800a078:	d112      	bne.n	800a0a0 <USB_EPStartXfer+0x572>
 800a07a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a07c:	881b      	ldrh	r3, [r3, #0]
 800a07e:	b29b      	uxth	r3, r3
 800a080:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a084:	b29a      	uxth	r2, r3
 800a086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a088:	801a      	strh	r2, [r3, #0]
 800a08a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a08c:	881b      	ldrh	r3, [r3, #0]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a098:	b29a      	uxth	r2, r3
 800a09a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a09c:	801a      	strh	r2, [r3, #0]
 800a09e:	e043      	b.n	800a128 <USB_EPStartXfer+0x5fa>
 800a0a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0a2:	2b3e      	cmp	r3, #62	; 0x3e
 800a0a4:	d811      	bhi.n	800a0ca <USB_EPStartXfer+0x59c>
 800a0a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0a8:	085b      	lsrs	r3, r3, #1
 800a0aa:	667b      	str	r3, [r7, #100]	; 0x64
 800a0ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d002      	beq.n	800a0bc <USB_EPStartXfer+0x58e>
 800a0b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	667b      	str	r3, [r7, #100]	; 0x64
 800a0bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	029b      	lsls	r3, r3, #10
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0c6:	801a      	strh	r2, [r3, #0]
 800a0c8:	e02e      	b.n	800a128 <USB_EPStartXfer+0x5fa>
 800a0ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0cc:	095b      	lsrs	r3, r3, #5
 800a0ce:	667b      	str	r3, [r7, #100]	; 0x64
 800a0d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0d2:	f003 031f 	and.w	r3, r3, #31
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d102      	bne.n	800a0e0 <USB_EPStartXfer+0x5b2>
 800a0da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	667b      	str	r3, [r7, #100]	; 0x64
 800a0e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	029b      	lsls	r3, r3, #10
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0f4:	801a      	strh	r2, [r3, #0]
 800a0f6:	e017      	b.n	800a128 <USB_EPStartXfer+0x5fa>
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	785b      	ldrb	r3, [r3, #1]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d113      	bne.n	800a128 <USB_EPStartXfer+0x5fa>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a106:	b29b      	uxth	r3, r3
 800a108:	461a      	mov	r2, r3
 800a10a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a10c:	4413      	add	r3, r2
 800a10e:	653b      	str	r3, [r7, #80]	; 0x50
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	00da      	lsls	r2, r3, #3
 800a116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a118:	4413      	add	r3, r2
 800a11a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a11e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a122:	b29a      	uxth	r2, r3
 800a124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a126:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	b29b      	uxth	r3, r3
 800a136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a13a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a13e:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a140:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a142:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a146:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a148:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a14a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a14e:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	441a      	add	r2, r3
 800a15a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a15c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3780      	adds	r7, #128	; 0x80
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a17a:	b480      	push	{r7}
 800a17c:	b085      	sub	sp, #20
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	785b      	ldrb	r3, [r3, #1]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d020      	beq.n	800a1ce <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	881b      	ldrh	r3, [r3, #0]
 800a198:	b29b      	uxth	r3, r3
 800a19a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a19e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1a2:	81bb      	strh	r3, [r7, #12]
 800a1a4:	89bb      	ldrh	r3, [r7, #12]
 800a1a6:	f083 0310 	eor.w	r3, r3, #16
 800a1aa:	81bb      	strh	r3, [r7, #12]
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	441a      	add	r2, r3
 800a1b6:	89bb      	ldrh	r3, [r7, #12]
 800a1b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	8013      	strh	r3, [r2, #0]
 800a1cc:	e01f      	b.n	800a20e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4413      	add	r3, r2
 800a1d8:	881b      	ldrh	r3, [r3, #0]
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1e4:	81fb      	strh	r3, [r7, #14]
 800a1e6:	89fb      	ldrh	r3, [r7, #14]
 800a1e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1ec:	81fb      	strh	r3, [r7, #14]
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	441a      	add	r2, r3
 800a1f8:	89fb      	ldrh	r3, [r7, #14]
 800a1fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3714      	adds	r7, #20
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	7b1b      	ldrb	r3, [r3, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f040 809d 	bne.w	800a36a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	785b      	ldrb	r3, [r3, #1]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d04c      	beq.n	800a2d2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	4413      	add	r3, r2
 800a242:	881b      	ldrh	r3, [r3, #0]
 800a244:	823b      	strh	r3, [r7, #16]
 800a246:	8a3b      	ldrh	r3, [r7, #16]
 800a248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d01b      	beq.n	800a288 <USB_EPClearStall+0x6c>
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a266:	81fb      	strh	r3, [r7, #14]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	441a      	add	r2, r3
 800a272:	89fb      	ldrh	r3, [r7, #14]
 800a274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a27c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a280:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a284:	b29b      	uxth	r3, r3
 800a286:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	78db      	ldrb	r3, [r3, #3]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d06c      	beq.n	800a36a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	4413      	add	r3, r2
 800a29a:	881b      	ldrh	r3, [r3, #0]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2a6:	81bb      	strh	r3, [r7, #12]
 800a2a8:	89bb      	ldrh	r3, [r7, #12]
 800a2aa:	f083 0320 	eor.w	r3, r3, #32
 800a2ae:	81bb      	strh	r3, [r7, #12]
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	441a      	add	r2, r3
 800a2ba:	89bb      	ldrh	r3, [r7, #12]
 800a2bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	8013      	strh	r3, [r2, #0]
 800a2d0:	e04b      	b.n	800a36a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	4413      	add	r3, r2
 800a2dc:	881b      	ldrh	r3, [r3, #0]
 800a2de:	82fb      	strh	r3, [r7, #22]
 800a2e0:	8afb      	ldrh	r3, [r7, #22]
 800a2e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d01b      	beq.n	800a322 <USB_EPClearStall+0x106>
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a300:	82bb      	strh	r3, [r7, #20]
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	441a      	add	r2, r3
 800a30c:	8abb      	ldrh	r3, [r7, #20]
 800a30e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a316:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a31a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a31e:	b29b      	uxth	r3, r3
 800a320:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	881b      	ldrh	r3, [r3, #0]
 800a32e:	b29b      	uxth	r3, r3
 800a330:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a338:	827b      	strh	r3, [r7, #18]
 800a33a:	8a7b      	ldrh	r3, [r7, #18]
 800a33c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a340:	827b      	strh	r3, [r7, #18]
 800a342:	8a7b      	ldrh	r3, [r7, #18]
 800a344:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a348:	827b      	strh	r3, [r7, #18]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	441a      	add	r2, r3
 800a354:	8a7b      	ldrh	r3, [r7, #18]
 800a356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a35a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a35e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a366:	b29b      	uxth	r3, r3
 800a368:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	371c      	adds	r7, #28
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d103      	bne.n	800a392 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2280      	movs	r2, #128	; 0x80
 800a38e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	370c      	adds	r7, #12
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b085      	sub	sp, #20
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3714      	adds	r7, #20
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr

0800a3ee <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b083      	sub	sp, #12
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a406:	b480      	push	{r7}
 800a408:	b08d      	sub	sp, #52	; 0x34
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	60f8      	str	r0, [r7, #12]
 800a40e:	60b9      	str	r1, [r7, #8]
 800a410:	4611      	mov	r1, r2
 800a412:	461a      	mov	r2, r3
 800a414:	460b      	mov	r3, r1
 800a416:	80fb      	strh	r3, [r7, #6]
 800a418:	4613      	mov	r3, r2
 800a41a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a41c:	88bb      	ldrh	r3, [r7, #4]
 800a41e:	3301      	adds	r3, #1
 800a420:	085b      	lsrs	r3, r3, #1
 800a422:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a42c:	88fa      	ldrh	r2, [r7, #6]
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	4413      	add	r3, r2
 800a432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a436:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a438:	6a3b      	ldr	r3, [r7, #32]
 800a43a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a43c:	e01b      	b.n	800a476 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800a43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	3301      	adds	r3, #1
 800a448:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	b29b      	uxth	r3, r3
 800a450:	021b      	lsls	r3, r3, #8
 800a452:	b29b      	uxth	r3, r3
 800a454:	461a      	mov	r2, r3
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	4313      	orrs	r3, r2
 800a45a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	b29a      	uxth	r2, r3
 800a460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a462:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a466:	3302      	adds	r3, #2
 800a468:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46c:	3301      	adds	r3, #1
 800a46e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a472:	3b01      	subs	r3, #1
 800a474:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1e0      	bne.n	800a43e <USB_WritePMA+0x38>
  }
}
 800a47c:	bf00      	nop
 800a47e:	3734      	adds	r7, #52	; 0x34
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a488:	b480      	push	{r7}
 800a48a:	b08b      	sub	sp, #44	; 0x2c
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	4611      	mov	r1, r2
 800a494:	461a      	mov	r2, r3
 800a496:	460b      	mov	r3, r1
 800a498:	80fb      	strh	r3, [r7, #6]
 800a49a:	4613      	mov	r3, r2
 800a49c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a49e:	88bb      	ldrh	r3, [r7, #4]
 800a4a0:	085b      	lsrs	r3, r3, #1
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a4ae:	88fa      	ldrh	r2, [r7, #6]
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4b8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a4be:	e018      	b.n	800a4f2 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a4c0:	6a3b      	ldr	r3, [r7, #32]
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a4c8:	6a3b      	ldr	r3, [r7, #32]
 800a4ca:	3302      	adds	r3, #2
 800a4cc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	b2da      	uxtb	r2, r3
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	0a1b      	lsrs	r3, r3, #8
 800a4e0:	b2da      	uxtb	r2, r3
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1e3      	bne.n	800a4c0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a4f8:	88bb      	ldrh	r3, [r7, #4]
 800a4fa:	f003 0301 	and.w	r3, r3, #1
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	2b00      	cmp	r3, #0
 800a502:	d007      	beq.n	800a514 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800a504:	6a3b      	ldr	r3, [r7, #32]
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	b29b      	uxth	r3, r3
 800a50a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	701a      	strb	r2, [r3, #0]
  }
}
 800a514:	bf00      	nop
 800a516:	372c      	adds	r7, #44	; 0x2c
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	460b      	mov	r3, r1
 800a52a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a52c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a530:	f009 f8d0 	bl	80136d4 <USBD_static_malloc>
 800a534:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d105      	bne.n	800a548 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a544:	2302      	movs	r3, #2
 800a546:	e066      	b.n	800a616 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	7c1b      	ldrb	r3, [r3, #16]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d119      	bne.n	800a58c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a55c:	2202      	movs	r2, #2
 800a55e:	2181      	movs	r1, #129	; 0x81
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f008 ff9a 	bl	801349a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a56c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a570:	2202      	movs	r2, #2
 800a572:	2101      	movs	r1, #1
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f008 ff90 	bl	801349a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2210      	movs	r2, #16
 800a586:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a58a:	e016      	b.n	800a5ba <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a58c:	2340      	movs	r3, #64	; 0x40
 800a58e:	2202      	movs	r2, #2
 800a590:	2181      	movs	r1, #129	; 0x81
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f008 ff81 	bl	801349a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a59e:	2340      	movs	r3, #64	; 0x40
 800a5a0:	2202      	movs	r2, #2
 800a5a2:	2101      	movs	r1, #1
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f008 ff78 	bl	801349a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2210      	movs	r2, #16
 800a5b6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a5ba:	2308      	movs	r3, #8
 800a5bc:	2203      	movs	r2, #3
 800a5be:	2182      	movs	r1, #130	; 0x82
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f008 ff6a 	bl	801349a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	7c1b      	ldrb	r3, [r3, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d109      	bne.n	800a604 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5fa:	2101      	movs	r1, #1
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f009 f835 	bl	801366c <USBD_LL_PrepareReceive>
 800a602:	e007      	b.n	800a614 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a60a:	2340      	movs	r3, #64	; 0x40
 800a60c:	2101      	movs	r1, #1
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f009 f82c 	bl	801366c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b082      	sub	sp, #8
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	460b      	mov	r3, r1
 800a628:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a62a:	2181      	movs	r1, #129	; 0x81
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f008 ff5a 	bl	80134e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a638:	2101      	movs	r1, #1
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f008 ff53 	bl	80134e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a648:	2182      	movs	r1, #130	; 0x82
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f008 ff4b 	bl	80134e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00e      	beq.n	800a688 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a67a:	4618      	mov	r0, r3
 800a67c:	f009 f838 	bl	80136f0 <USBD_static_free>
    pdev->pClassData = NULL;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
	...

0800a694 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d101      	bne.n	800a6bc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	e0af      	b.n	800a81c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d03f      	beq.n	800a748 <USBD_CDC_Setup+0xb4>
 800a6c8:	2b20      	cmp	r3, #32
 800a6ca:	f040 809f 	bne.w	800a80c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	88db      	ldrh	r3, [r3, #6]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d02e      	beq.n	800a734 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	b25b      	sxtb	r3, r3
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	da16      	bge.n	800a70e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a6ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	88d2      	ldrh	r2, [r2, #6]
 800a6f2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	88db      	ldrh	r3, [r3, #6]
 800a6f8:	2b07      	cmp	r3, #7
 800a6fa:	bf28      	it	cs
 800a6fc:	2307      	movcs	r3, #7
 800a6fe:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	89fa      	ldrh	r2, [r7, #14]
 800a704:	4619      	mov	r1, r3
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f001 fa94 	bl	800bc34 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a70c:	e085      	b.n	800a81a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	785a      	ldrb	r2, [r3, #1]
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	88db      	ldrh	r3, [r3, #6]
 800a71c:	b2da      	uxtb	r2, r3
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a724:	6939      	ldr	r1, [r7, #16]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	88db      	ldrh	r3, [r3, #6]
 800a72a:	461a      	mov	r2, r3
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f001 faad 	bl	800bc8c <USBD_CtlPrepareRx>
      break;
 800a732:	e072      	b.n	800a81a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	683a      	ldr	r2, [r7, #0]
 800a73e:	7850      	ldrb	r0, [r2, #1]
 800a740:	2200      	movs	r2, #0
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	4798      	blx	r3
      break;
 800a746:	e068      	b.n	800a81a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	785b      	ldrb	r3, [r3, #1]
 800a74c:	2b0b      	cmp	r3, #11
 800a74e:	d852      	bhi.n	800a7f6 <USBD_CDC_Setup+0x162>
 800a750:	a201      	add	r2, pc, #4	; (adr r2, 800a758 <USBD_CDC_Setup+0xc4>)
 800a752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a756:	bf00      	nop
 800a758:	0800a789 	.word	0x0800a789
 800a75c:	0800a805 	.word	0x0800a805
 800a760:	0800a7f7 	.word	0x0800a7f7
 800a764:	0800a7f7 	.word	0x0800a7f7
 800a768:	0800a7f7 	.word	0x0800a7f7
 800a76c:	0800a7f7 	.word	0x0800a7f7
 800a770:	0800a7f7 	.word	0x0800a7f7
 800a774:	0800a7f7 	.word	0x0800a7f7
 800a778:	0800a7f7 	.word	0x0800a7f7
 800a77c:	0800a7f7 	.word	0x0800a7f7
 800a780:	0800a7b3 	.word	0x0800a7b3
 800a784:	0800a7dd 	.word	0x0800a7dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	2b03      	cmp	r3, #3
 800a792:	d107      	bne.n	800a7a4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a794:	f107 030a 	add.w	r3, r7, #10
 800a798:	2202      	movs	r2, #2
 800a79a:	4619      	mov	r1, r3
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f001 fa49 	bl	800bc34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a7a2:	e032      	b.n	800a80a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a7a4:	6839      	ldr	r1, [r7, #0]
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f001 f9d3 	bl	800bb52 <USBD_CtlError>
            ret = USBD_FAIL;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	75fb      	strb	r3, [r7, #23]
          break;
 800a7b0:	e02b      	b.n	800a80a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	d107      	bne.n	800a7ce <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a7be:	f107 030d 	add.w	r3, r7, #13
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f001 fa34 	bl	800bc34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a7cc:	e01d      	b.n	800a80a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f001 f9be 	bl	800bb52 <USBD_CtlError>
            ret = USBD_FAIL;
 800a7d6:	2303      	movs	r3, #3
 800a7d8:	75fb      	strb	r3, [r7, #23]
          break;
 800a7da:	e016      	b.n	800a80a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b03      	cmp	r3, #3
 800a7e6:	d00f      	beq.n	800a808 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f001 f9b1 	bl	800bb52 <USBD_CtlError>
            ret = USBD_FAIL;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a7f4:	e008      	b.n	800a808 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a7f6:	6839      	ldr	r1, [r7, #0]
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f001 f9aa 	bl	800bb52 <USBD_CtlError>
          ret = USBD_FAIL;
 800a7fe:	2303      	movs	r3, #3
 800a800:	75fb      	strb	r3, [r7, #23]
          break;
 800a802:	e002      	b.n	800a80a <USBD_CDC_Setup+0x176>
          break;
 800a804:	bf00      	nop
 800a806:	e008      	b.n	800a81a <USBD_CDC_Setup+0x186>
          break;
 800a808:	bf00      	nop
      }
      break;
 800a80a:	e006      	b.n	800a81a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f001 f99f 	bl	800bb52 <USBD_CtlError>
      ret = USBD_FAIL;
 800a814:	2303      	movs	r3, #3
 800a816:	75fb      	strb	r3, [r7, #23]
      break;
 800a818:	bf00      	nop
  }

  return (uint8_t)ret;
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3718      	adds	r7, #24
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	460b      	mov	r3, r1
 800a82e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a836:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d101      	bne.n	800a846 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a842:	2303      	movs	r3, #3
 800a844:	e04c      	b.n	800a8e0 <USBD_CDC_DataIn+0xbc>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a84c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a84e:	78fa      	ldrb	r2, [r7, #3]
 800a850:	6879      	ldr	r1, [r7, #4]
 800a852:	4613      	mov	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4413      	add	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	440b      	add	r3, r1
 800a85c:	3318      	adds	r3, #24
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d026      	beq.n	800a8b2 <USBD_CDC_DataIn+0x8e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a864:	78fa      	ldrb	r2, [r7, #3]
 800a866:	6879      	ldr	r1, [r7, #4]
 800a868:	4613      	mov	r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4413      	add	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	440b      	add	r3, r1
 800a872:	3318      	adds	r3, #24
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	78fa      	ldrb	r2, [r7, #3]
 800a878:	68f9      	ldr	r1, [r7, #12]
 800a87a:	0152      	lsls	r2, r2, #5
 800a87c:	440a      	add	r2, r1
 800a87e:	3238      	adds	r2, #56	; 0x38
 800a880:	6812      	ldr	r2, [r2, #0]
 800a882:	fbb3 f1f2 	udiv	r1, r3, r2
 800a886:	fb02 f201 	mul.w	r2, r2, r1
 800a88a:	1a9b      	subs	r3, r3, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d110      	bne.n	800a8b2 <USBD_CDC_DataIn+0x8e>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a890:	78fa      	ldrb	r2, [r7, #3]
 800a892:	6879      	ldr	r1, [r7, #4]
 800a894:	4613      	mov	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4413      	add	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	440b      	add	r3, r1
 800a89e:	3318      	adds	r3, #24
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a8a4:	78f9      	ldrb	r1, [r7, #3]
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f008 febd 	bl	801362a <USBD_LL_Transmit>
 800a8b0:	e015      	b.n	800a8de <USBD_CDC_DataIn+0xba>
  }
  else
  {
    hcdc->TxState = 0U;
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00b      	beq.n	800a8de <USBD_CDC_DataIn+0xba>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a8d4:	68ba      	ldr	r2, [r7, #8]
 800a8d6:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a8da:	78fa      	ldrb	r2, [r7, #3]
 800a8dc:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a8de:	2300      	movs	r3, #0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a906:	2303      	movs	r3, #3
 800a908:	e015      	b.n	800a936 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a90a:	78fb      	ldrb	r3, [r7, #3]
 800a90c:	4619      	mov	r1, r3
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f008 fecd 	bl	80136ae <USBD_LL_GetRxDataSize>
 800a914:	4602      	mov	r2, r0
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a930:	4611      	mov	r1, r2
 800a932:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b084      	sub	sp, #16
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a94c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d101      	bne.n	800a958 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a954:	2303      	movs	r3, #3
 800a956:	e01b      	b.n	800a990 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d015      	beq.n	800a98e <USBD_CDC_EP0_RxReady+0x50>
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a968:	2bff      	cmp	r3, #255	; 0xff
 800a96a:	d010      	beq.n	800a98e <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a97a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a982:	b292      	uxth	r2, r2
 800a984:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	22ff      	movs	r2, #255	; 0xff
 800a98a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2243      	movs	r2, #67	; 0x43
 800a9a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a9a6:	4b03      	ldr	r3, [pc, #12]	; (800a9b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	200000b0 	.word	0x200000b0

0800a9b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2243      	movs	r2, #67	; 0x43
 800a9c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a9c6:	4b03      	ldr	r3, [pc, #12]	; (800a9d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr
 800a9d4:	2000006c 	.word	0x2000006c

0800a9d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2243      	movs	r2, #67	; 0x43
 800a9e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a9e6:	4b03      	ldr	r3, [pc, #12]	; (800a9f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	200000f4 	.word	0x200000f4

0800a9f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	220a      	movs	r2, #10
 800aa04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aa06:	4b03      	ldr	r3, [pc, #12]	; (800aa14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	20000028 	.word	0x20000028

0800aa18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d101      	bne.n	800aa2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	e004      	b.n	800aa36 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b087      	sub	sp, #28
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	60f8      	str	r0, [r7, #12]
 800aa4a:	60b9      	str	r1, [r7, #8]
 800aa4c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa54:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d101      	bne.n	800aa60 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	e008      	b.n	800aa72 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	68ba      	ldr	r2, [r7, #8]
 800aa64:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	371c      	adds	r7, #28
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr

0800aa7e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aa7e:	b480      	push	{r7}
 800aa80:	b085      	sub	sp, #20
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa8e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d101      	bne.n	800aa9a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800aa96:	2303      	movs	r3, #3
 800aa98:	e004      	b.n	800aaa4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3714      	adds	r7, #20
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aabe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800aac0:	2301      	movs	r3, #1
 800aac2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d101      	bne.n	800aad2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aace:	2303      	movs	r3, #3
 800aad0:	e01a      	b.n	800ab08 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d114      	bne.n	800ab06 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2201      	movs	r2, #1
 800aae0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aafa:	2181      	movs	r1, #129	; 0x81
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f008 fd94 	bl	801362a <USBD_LL_Transmit>

    ret = USBD_OK;
 800ab02:	2300      	movs	r3, #0
 800ab04:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d101      	bne.n	800ab2e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ab2a:	2303      	movs	r3, #3
 800ab2c:	e016      	b.n	800ab5c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	7c1b      	ldrb	r3, [r3, #16]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d109      	bne.n	800ab4a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab40:	2101      	movs	r1, #1
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f008 fd92 	bl	801366c <USBD_LL_PrepareReceive>
 800ab48:	e007      	b.n	800ab5a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab50:	2340      	movs	r3, #64	; 0x40
 800ab52:	2101      	movs	r1, #1
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f008 fd89 	bl	801366c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b086      	sub	sp, #24
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	4613      	mov	r3, r2
 800ab70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e01f      	b.n	800abbc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d003      	beq.n	800aba2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	68ba      	ldr	r2, [r7, #8]
 800ab9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	79fa      	ldrb	r2, [r7, #7]
 800abae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f008 fbf5 	bl	80133a0 <USBD_LL_Init>
 800abb6:	4603      	mov	r3, r0
 800abb8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800abba:	7dfb      	ldrb	r3, [r7, #23]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3718      	adds	r7, #24
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abce:	2300      	movs	r3, #0
 800abd0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800abd8:	2303      	movs	r3, #3
 800abda:	e016      	b.n	800ac0a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00b      	beq.n	800ac08 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf8:	f107 020e 	add.w	r2, r7, #14
 800abfc:	4610      	mov	r0, r2
 800abfe:	4798      	blx	r3
 800ac00:	4602      	mov	r2, r0
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b082      	sub	sp, #8
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f008 fc22 	bl	8013464 <USBD_LL_Start>
 800ac20:	4603      	mov	r3, r0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b083      	sub	sp, #12
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d009      	beq.n	800ac6e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	78fa      	ldrb	r2, [r7, #3]
 800ac64:	4611      	mov	r1, r2
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	4798      	blx	r3
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ac6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	460b      	mov	r3, r1
 800ac82:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d007      	beq.n	800ac9e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	78fa      	ldrb	r2, [r7, #3]
 800ac98:	4611      	mov	r1, r2
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	4798      	blx	r3
  }

  return USBD_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800acb8:	6839      	ldr	r1, [r7, #0]
 800acba:	4618      	mov	r0, r3
 800acbc:	f000 ff0f 	bl	800bade <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800acce:	461a      	mov	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800acdc:	f003 031f 	and.w	r3, r3, #31
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d00e      	beq.n	800ad02 <USBD_LL_SetupStage+0x5a>
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d302      	bcc.n	800acee <USBD_LL_SetupStage+0x46>
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d014      	beq.n	800ad16 <USBD_LL_SetupStage+0x6e>
 800acec:	e01d      	b.n	800ad2a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800acf4:	4619      	mov	r1, r3
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f9ee 	bl	800b0d8 <USBD_StdDevReq>
 800acfc:	4603      	mov	r3, r0
 800acfe:	73fb      	strb	r3, [r7, #15]
      break;
 800ad00:	e020      	b.n	800ad44 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad08:	4619      	mov	r1, r3
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fa52 	bl	800b1b4 <USBD_StdItfReq>
 800ad10:	4603      	mov	r3, r0
 800ad12:	73fb      	strb	r3, [r7, #15]
      break;
 800ad14:	e016      	b.n	800ad44 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fa8f 	bl	800b242 <USBD_StdEPReq>
 800ad24:	4603      	mov	r3, r0
 800ad26:	73fb      	strb	r3, [r7, #15]
      break;
 800ad28:	e00c      	b.n	800ad44 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ad30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	4619      	mov	r1, r3
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f008 fbf3 	bl	8013524 <USBD_LL_StallEP>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	73fb      	strb	r3, [r7, #15]
      break;
 800ad42:	bf00      	nop
  }

  return ret;
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b086      	sub	sp, #24
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	60f8      	str	r0, [r7, #12]
 800ad56:	460b      	mov	r3, r1
 800ad58:	607a      	str	r2, [r7, #4]
 800ad5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ad5c:	7afb      	ldrb	r3, [r7, #11]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d138      	bne.n	800add4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ad68:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad70:	2b03      	cmp	r3, #3
 800ad72:	d14a      	bne.n	800ae0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	689a      	ldr	r2, [r3, #8]
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d913      	bls.n	800ada8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	689a      	ldr	r2, [r3, #8]
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	1ad2      	subs	r2, r2, r3
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	68da      	ldr	r2, [r3, #12]
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	4293      	cmp	r3, r2
 800ad98:	bf28      	it	cs
 800ad9a:	4613      	movcs	r3, r2
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	6879      	ldr	r1, [r7, #4]
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f000 ff90 	bl	800bcc6 <USBD_CtlContinueRx>
 800ada6:	e030      	b.n	800ae0a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	2b03      	cmp	r3, #3
 800adb2:	d10b      	bne.n	800adcc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d005      	beq.n	800adcc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f000 ff8b 	bl	800bce8 <USBD_CtlSendStatus>
 800add2:	e01a      	b.n	800ae0a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b03      	cmp	r3, #3
 800adde:	d114      	bne.n	800ae0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade6:	699b      	ldr	r3, [r3, #24]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d00e      	beq.n	800ae0a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adf2:	699b      	ldr	r3, [r3, #24]
 800adf4:	7afa      	ldrb	r2, [r7, #11]
 800adf6:	4611      	mov	r1, r2
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	4798      	blx	r3
 800adfc:	4603      	mov	r3, r0
 800adfe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ae00:	7dfb      	ldrb	r3, [r7, #23]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d001      	beq.n	800ae0a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ae06:	7dfb      	ldrb	r3, [r7, #23]
 800ae08:	e000      	b.n	800ae0c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3718      	adds	r7, #24
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	607a      	str	r2, [r7, #4]
 800ae20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ae22:	7afb      	ldrb	r3, [r7, #11]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d16b      	bne.n	800af00 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	3314      	adds	r3, #20
 800ae2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d156      	bne.n	800aee6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	689a      	ldr	r2, [r3, #8]
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d914      	bls.n	800ae6e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	689a      	ldr	r2, [r3, #8]
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	1ad2      	subs	r2, r2, r3
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	461a      	mov	r2, r3
 800ae58:	6879      	ldr	r1, [r7, #4]
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f000 ff05 	bl	800bc6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae60:	2300      	movs	r3, #0
 800ae62:	2200      	movs	r2, #0
 800ae64:	2100      	movs	r1, #0
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f008 fc00 	bl	801366c <USBD_LL_PrepareReceive>
 800ae6c:	e03b      	b.n	800aee6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	68da      	ldr	r2, [r3, #12]
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d11c      	bne.n	800aeb4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	685a      	ldr	r2, [r3, #4]
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d316      	bcc.n	800aeb4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	685a      	ldr	r2, [r3, #4]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d20f      	bcs.n	800aeb4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ae94:	2200      	movs	r2, #0
 800ae96:	2100      	movs	r1, #0
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f000 fee6 	bl	800bc6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aea6:	2300      	movs	r3, #0
 800aea8:	2200      	movs	r2, #0
 800aeaa:	2100      	movs	r1, #0
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f008 fbdd 	bl	801366c <USBD_LL_PrepareReceive>
 800aeb2:	e018      	b.n	800aee6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	2b03      	cmp	r3, #3
 800aebe:	d10b      	bne.n	800aed8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d005      	beq.n	800aed8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aed8:	2180      	movs	r1, #128	; 0x80
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f008 fb22 	bl	8013524 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f000 ff14 	bl	800bd0e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d122      	bne.n	800af36 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f7ff fe9a 	bl	800ac2a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aefe:	e01a      	b.n	800af36 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af06:	b2db      	uxtb	r3, r3
 800af08:	2b03      	cmp	r3, #3
 800af0a:	d114      	bne.n	800af36 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af12:	695b      	ldr	r3, [r3, #20]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00e      	beq.n	800af36 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af1e:	695b      	ldr	r3, [r3, #20]
 800af20:	7afa      	ldrb	r2, [r7, #11]
 800af22:	4611      	mov	r1, r2
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	4798      	blx	r3
 800af28:	4603      	mov	r3, r0
 800af2a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800af2c:	7dfb      	ldrb	r3, [r7, #23]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d001      	beq.n	800af36 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800af32:	7dfb      	ldrb	r3, [r7, #23]
 800af34:	e000      	b.n	800af38 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3718      	adds	r7, #24
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d101      	bne.n	800af74 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800af70:	2303      	movs	r3, #3
 800af72:	e02f      	b.n	800afd4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00f      	beq.n	800af9e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d009      	beq.n	800af9e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	6852      	ldr	r2, [r2, #4]
 800af96:	b2d2      	uxtb	r2, r2
 800af98:	4611      	mov	r1, r2
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af9e:	2340      	movs	r3, #64	; 0x40
 800afa0:	2200      	movs	r2, #0
 800afa2:	2100      	movs	r1, #0
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f008 fa78 	bl	801349a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2201      	movs	r2, #1
 800afae:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2240      	movs	r2, #64	; 0x40
 800afb6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afba:	2340      	movs	r3, #64	; 0x40
 800afbc:	2200      	movs	r2, #0
 800afbe:	2180      	movs	r1, #128	; 0x80
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f008 fa6a 	bl	801349a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2201      	movs	r2, #1
 800afca:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2240      	movs	r2, #64	; 0x40
 800afd0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	78fa      	ldrb	r2, [r7, #3]
 800afec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b00a:	b2da      	uxtb	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2204      	movs	r2, #4
 800b016:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b04      	cmp	r3, #4
 800b03a:	d106      	bne.n	800b04a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b042:	b2da      	uxtb	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b066:	2b00      	cmp	r3, #0
 800b068:	d101      	bne.n	800b06e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b06a:	2303      	movs	r3, #3
 800b06c:	e012      	b.n	800b094 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b074:	b2db      	uxtb	r3, r3
 800b076:	2b03      	cmp	r3, #3
 800b078:	d10b      	bne.n	800b092 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b080:	69db      	ldr	r3, [r3, #28]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d005      	beq.n	800b092 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b08c:	69db      	ldr	r3, [r3, #28]
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3708      	adds	r7, #8
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b0ba:	8a3b      	ldrh	r3, [r7, #16]
 800b0bc:	021b      	lsls	r3, r3, #8
 800b0be:	b21a      	sxth	r2, r3
 800b0c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	b21b      	sxth	r3, r3
 800b0c8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b0ca:	89fb      	ldrh	r3, [r7, #14]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	371c      	adds	r7, #28
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0ee:	2b20      	cmp	r3, #32
 800b0f0:	d004      	beq.n	800b0fc <USBD_StdDevReq+0x24>
 800b0f2:	2b40      	cmp	r3, #64	; 0x40
 800b0f4:	d002      	beq.n	800b0fc <USBD_StdDevReq+0x24>
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00a      	beq.n	800b110 <USBD_StdDevReq+0x38>
 800b0fa:	e050      	b.n	800b19e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	6839      	ldr	r1, [r7, #0]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	4798      	blx	r3
 800b10a:	4603      	mov	r3, r0
 800b10c:	73fb      	strb	r3, [r7, #15]
      break;
 800b10e:	e04b      	b.n	800b1a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	785b      	ldrb	r3, [r3, #1]
 800b114:	2b09      	cmp	r3, #9
 800b116:	d83c      	bhi.n	800b192 <USBD_StdDevReq+0xba>
 800b118:	a201      	add	r2, pc, #4	; (adr r2, 800b120 <USBD_StdDevReq+0x48>)
 800b11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b11e:	bf00      	nop
 800b120:	0800b175 	.word	0x0800b175
 800b124:	0800b189 	.word	0x0800b189
 800b128:	0800b193 	.word	0x0800b193
 800b12c:	0800b17f 	.word	0x0800b17f
 800b130:	0800b193 	.word	0x0800b193
 800b134:	0800b153 	.word	0x0800b153
 800b138:	0800b149 	.word	0x0800b149
 800b13c:	0800b193 	.word	0x0800b193
 800b140:	0800b16b 	.word	0x0800b16b
 800b144:	0800b15d 	.word	0x0800b15d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b148:	6839      	ldr	r1, [r7, #0]
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f9d4 	bl	800b4f8 <USBD_GetDescriptor>
          break;
 800b150:	e024      	b.n	800b19c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 fb39 	bl	800b7cc <USBD_SetAddress>
          break;
 800b15a:	e01f      	b.n	800b19c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b15c:	6839      	ldr	r1, [r7, #0]
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fb78 	bl	800b854 <USBD_SetConfig>
 800b164:	4603      	mov	r3, r0
 800b166:	73fb      	strb	r3, [r7, #15]
          break;
 800b168:	e018      	b.n	800b19c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b16a:	6839      	ldr	r1, [r7, #0]
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 fc17 	bl	800b9a0 <USBD_GetConfig>
          break;
 800b172:	e013      	b.n	800b19c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b174:	6839      	ldr	r1, [r7, #0]
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fc47 	bl	800ba0a <USBD_GetStatus>
          break;
 800b17c:	e00e      	b.n	800b19c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b17e:	6839      	ldr	r1, [r7, #0]
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 fc76 	bl	800ba72 <USBD_SetFeature>
          break;
 800b186:	e009      	b.n	800b19c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b188:	6839      	ldr	r1, [r7, #0]
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 fc85 	bl	800ba9a <USBD_ClrFeature>
          break;
 800b190:	e004      	b.n	800b19c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fcdc 	bl	800bb52 <USBD_CtlError>
          break;
 800b19a:	bf00      	nop
      }
      break;
 800b19c:	e004      	b.n	800b1a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fcd6 	bl	800bb52 <USBD_CtlError>
      break;
 800b1a6:	bf00      	nop
  }

  return ret;
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3710      	adds	r7, #16
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop

0800b1b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1ca:	2b20      	cmp	r3, #32
 800b1cc:	d003      	beq.n	800b1d6 <USBD_StdItfReq+0x22>
 800b1ce:	2b40      	cmp	r3, #64	; 0x40
 800b1d0:	d001      	beq.n	800b1d6 <USBD_StdItfReq+0x22>
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d12b      	bne.n	800b22e <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d81d      	bhi.n	800b220 <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	889b      	ldrh	r3, [r3, #4]
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d813      	bhi.n	800b216 <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	6839      	ldr	r1, [r7, #0]
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	4798      	blx	r3
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	88db      	ldrh	r3, [r3, #6]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d110      	bne.n	800b22a <USBD_StdItfReq+0x76>
 800b208:	7bfb      	ldrb	r3, [r7, #15]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d10d      	bne.n	800b22a <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fd6a 	bl	800bce8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b214:	e009      	b.n	800b22a <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fc9a 	bl	800bb52 <USBD_CtlError>
          break;
 800b21e:	e004      	b.n	800b22a <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 fc95 	bl	800bb52 <USBD_CtlError>
          break;
 800b228:	e000      	b.n	800b22c <USBD_StdItfReq+0x78>
          break;
 800b22a:	bf00      	nop
      }
      break;
 800b22c:	e004      	b.n	800b238 <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 800b22e:	6839      	ldr	r1, [r7, #0]
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fc8e 	bl	800bb52 <USBD_CtlError>
      break;
 800b236:	bf00      	nop
  }

  return ret;
 800b238:	7bfb      	ldrb	r3, [r7, #15]
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b084      	sub	sp, #16
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	889b      	ldrh	r3, [r3, #4]
 800b254:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b25e:	2b20      	cmp	r3, #32
 800b260:	d004      	beq.n	800b26c <USBD_StdEPReq+0x2a>
 800b262:	2b40      	cmp	r3, #64	; 0x40
 800b264:	d002      	beq.n	800b26c <USBD_StdEPReq+0x2a>
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00a      	beq.n	800b280 <USBD_StdEPReq+0x3e>
 800b26a:	e13a      	b.n	800b4e2 <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	6839      	ldr	r1, [r7, #0]
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	4798      	blx	r3
 800b27a:	4603      	mov	r3, r0
 800b27c:	73fb      	strb	r3, [r7, #15]
      break;
 800b27e:	e135      	b.n	800b4ec <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	785b      	ldrb	r3, [r3, #1]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d03f      	beq.n	800b308 <USBD_StdEPReq+0xc6>
 800b288:	2b03      	cmp	r3, #3
 800b28a:	d002      	beq.n	800b292 <USBD_StdEPReq+0x50>
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d07b      	beq.n	800b388 <USBD_StdEPReq+0x146>
 800b290:	e121      	b.n	800b4d6 <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d002      	beq.n	800b2a4 <USBD_StdEPReq+0x62>
 800b29e:	2b03      	cmp	r3, #3
 800b2a0:	d015      	beq.n	800b2ce <USBD_StdEPReq+0x8c>
 800b2a2:	e02b      	b.n	800b2fc <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2a4:	7bbb      	ldrb	r3, [r7, #14]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00c      	beq.n	800b2c4 <USBD_StdEPReq+0x82>
 800b2aa:	7bbb      	ldrb	r3, [r7, #14]
 800b2ac:	2b80      	cmp	r3, #128	; 0x80
 800b2ae:	d009      	beq.n	800b2c4 <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2b0:	7bbb      	ldrb	r3, [r7, #14]
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f008 f935 	bl	8013524 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2ba:	2180      	movs	r1, #128	; 0x80
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f008 f931 	bl	8013524 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b2c2:	e020      	b.n	800b306 <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 800b2c4:	6839      	ldr	r1, [r7, #0]
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fc43 	bl	800bb52 <USBD_CtlError>
              break;
 800b2cc:	e01b      	b.n	800b306 <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	885b      	ldrh	r3, [r3, #2]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10e      	bne.n	800b2f4 <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b2d6:	7bbb      	ldrb	r3, [r7, #14]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00b      	beq.n	800b2f4 <USBD_StdEPReq+0xb2>
 800b2dc:	7bbb      	ldrb	r3, [r7, #14]
 800b2de:	2b80      	cmp	r3, #128	; 0x80
 800b2e0:	d008      	beq.n	800b2f4 <USBD_StdEPReq+0xb2>
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	88db      	ldrh	r3, [r3, #6]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d104      	bne.n	800b2f4 <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2ea:	7bbb      	ldrb	r3, [r7, #14]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f008 f918 	bl	8013524 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 fcf7 	bl	800bce8 <USBD_CtlSendStatus>

              break;
 800b2fa:	e004      	b.n	800b306 <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 fc27 	bl	800bb52 <USBD_CtlError>
              break;
 800b304:	bf00      	nop
          }
          break;
 800b306:	e0eb      	b.n	800b4e0 <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	2b02      	cmp	r3, #2
 800b312:	d002      	beq.n	800b31a <USBD_StdEPReq+0xd8>
 800b314:	2b03      	cmp	r3, #3
 800b316:	d015      	beq.n	800b344 <USBD_StdEPReq+0x102>
 800b318:	e02f      	b.n	800b37a <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b31a:	7bbb      	ldrb	r3, [r7, #14]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00c      	beq.n	800b33a <USBD_StdEPReq+0xf8>
 800b320:	7bbb      	ldrb	r3, [r7, #14]
 800b322:	2b80      	cmp	r3, #128	; 0x80
 800b324:	d009      	beq.n	800b33a <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b326:	7bbb      	ldrb	r3, [r7, #14]
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f008 f8fa 	bl	8013524 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b330:	2180      	movs	r1, #128	; 0x80
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f008 f8f6 	bl	8013524 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b338:	e025      	b.n	800b386 <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fc08 	bl	800bb52 <USBD_CtlError>
              break;
 800b342:	e020      	b.n	800b386 <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	885b      	ldrh	r3, [r3, #2]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d11b      	bne.n	800b384 <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b34c:	7bbb      	ldrb	r3, [r7, #14]
 800b34e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b352:	2b00      	cmp	r3, #0
 800b354:	d004      	beq.n	800b360 <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b356:	7bbb      	ldrb	r3, [r7, #14]
 800b358:	4619      	mov	r1, r3
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f008 f901 	bl	8013562 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fcc1 	bl	800bce8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	6839      	ldr	r1, [r7, #0]
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	4798      	blx	r3
 800b374:	4603      	mov	r3, r0
 800b376:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b378:	e004      	b.n	800b384 <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 800b37a:	6839      	ldr	r1, [r7, #0]
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 fbe8 	bl	800bb52 <USBD_CtlError>
              break;
 800b382:	e000      	b.n	800b386 <USBD_StdEPReq+0x144>
              break;
 800b384:	bf00      	nop
          }
          break;
 800b386:	e0ab      	b.n	800b4e0 <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	2b02      	cmp	r3, #2
 800b392:	d002      	beq.n	800b39a <USBD_StdEPReq+0x158>
 800b394:	2b03      	cmp	r3, #3
 800b396:	d032      	beq.n	800b3fe <USBD_StdEPReq+0x1bc>
 800b398:	e097      	b.n	800b4ca <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b39a:	7bbb      	ldrb	r3, [r7, #14]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d007      	beq.n	800b3b0 <USBD_StdEPReq+0x16e>
 800b3a0:	7bbb      	ldrb	r3, [r7, #14]
 800b3a2:	2b80      	cmp	r3, #128	; 0x80
 800b3a4:	d004      	beq.n	800b3b0 <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 800b3a6:	6839      	ldr	r1, [r7, #0]
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 fbd2 	bl	800bb52 <USBD_CtlError>
                break;
 800b3ae:	e091      	b.n	800b4d4 <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	da0b      	bge.n	800b3d0 <USBD_StdEPReq+0x18e>
 800b3b8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3be:	4613      	mov	r3, r2
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	4413      	add	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	3310      	adds	r3, #16
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	e00b      	b.n	800b3e8 <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b3d0:	7bbb      	ldrb	r3, [r7, #14]
 800b3d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	4413      	add	r3, r2
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	3304      	adds	r3, #4
 800b3e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	2202      	movs	r2, #2
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 fc1c 	bl	800bc34 <USBD_CtlSendData>
              break;
 800b3fc:	e06a      	b.n	800b4d4 <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b3fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b402:	2b00      	cmp	r3, #0
 800b404:	da11      	bge.n	800b42a <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b406:	7bbb      	ldrb	r3, [r7, #14]
 800b408:	f003 020f 	and.w	r2, r3, #15
 800b40c:	6879      	ldr	r1, [r7, #4]
 800b40e:	4613      	mov	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4413      	add	r3, r2
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	440b      	add	r3, r1
 800b418:	3324      	adds	r3, #36	; 0x24
 800b41a:	881b      	ldrh	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d117      	bne.n	800b450 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fb95 	bl	800bb52 <USBD_CtlError>
                  break;
 800b428:	e054      	b.n	800b4d4 <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b42a:	7bbb      	ldrb	r3, [r7, #14]
 800b42c:	f003 020f 	and.w	r2, r3, #15
 800b430:	6879      	ldr	r1, [r7, #4]
 800b432:	4613      	mov	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4413      	add	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	440b      	add	r3, r1
 800b43c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b440:	881b      	ldrh	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d104      	bne.n	800b450 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 fb82 	bl	800bb52 <USBD_CtlError>
                  break;
 800b44e:	e041      	b.n	800b4d4 <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b454:	2b00      	cmp	r3, #0
 800b456:	da0b      	bge.n	800b470 <USBD_StdEPReq+0x22e>
 800b458:	7bbb      	ldrb	r3, [r7, #14]
 800b45a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b45e:	4613      	mov	r3, r2
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	4413      	add	r3, r2
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	3310      	adds	r3, #16
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	4413      	add	r3, r2
 800b46c:	3304      	adds	r3, #4
 800b46e:	e00b      	b.n	800b488 <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b470:	7bbb      	ldrb	r3, [r7, #14]
 800b472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b476:	4613      	mov	r3, r2
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	4413      	add	r3, r2
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	4413      	add	r3, r2
 800b486:	3304      	adds	r3, #4
 800b488:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b48a:	7bbb      	ldrb	r3, [r7, #14]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d002      	beq.n	800b496 <USBD_StdEPReq+0x254>
 800b490:	7bbb      	ldrb	r3, [r7, #14]
 800b492:	2b80      	cmp	r3, #128	; 0x80
 800b494:	d103      	bne.n	800b49e <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	2200      	movs	r2, #0
 800b49a:	601a      	str	r2, [r3, #0]
 800b49c:	e00e      	b.n	800b4bc <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b49e:	7bbb      	ldrb	r3, [r7, #14]
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f008 f87c 	bl	80135a0 <USBD_LL_IsStallEP>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d003      	beq.n	800b4b6 <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	e002      	b.n	800b4bc <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 fbb6 	bl	800bc34 <USBD_CtlSendData>
              break;
 800b4c8:	e004      	b.n	800b4d4 <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 800b4ca:	6839      	ldr	r1, [r7, #0]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 fb40 	bl	800bb52 <USBD_CtlError>
              break;
 800b4d2:	bf00      	nop
          }
          break;
 800b4d4:	e004      	b.n	800b4e0 <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 800b4d6:	6839      	ldr	r1, [r7, #0]
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 fb3a 	bl	800bb52 <USBD_CtlError>
          break;
 800b4de:	bf00      	nop
      }
      break;
 800b4e0:	e004      	b.n	800b4ec <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 800b4e2:	6839      	ldr	r1, [r7, #0]
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 fb34 	bl	800bb52 <USBD_CtlError>
      break;
 800b4ea:	bf00      	nop
  }

  return ret;
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
	...

0800b4f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b502:	2300      	movs	r3, #0
 800b504:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b506:	2300      	movs	r3, #0
 800b508:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b50a:	2300      	movs	r3, #0
 800b50c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	885b      	ldrh	r3, [r3, #2]
 800b512:	0a1b      	lsrs	r3, r3, #8
 800b514:	b29b      	uxth	r3, r3
 800b516:	3b01      	subs	r3, #1
 800b518:	2b06      	cmp	r3, #6
 800b51a:	f200 8128 	bhi.w	800b76e <USBD_GetDescriptor+0x276>
 800b51e:	a201      	add	r2, pc, #4	; (adr r2, 800b524 <USBD_GetDescriptor+0x2c>)
 800b520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b524:	0800b541 	.word	0x0800b541
 800b528:	0800b559 	.word	0x0800b559
 800b52c:	0800b599 	.word	0x0800b599
 800b530:	0800b76f 	.word	0x0800b76f
 800b534:	0800b76f 	.word	0x0800b76f
 800b538:	0800b70f 	.word	0x0800b70f
 800b53c:	0800b73b 	.word	0x0800b73b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	7c12      	ldrb	r2, [r2, #16]
 800b54c:	f107 0108 	add.w	r1, r7, #8
 800b550:	4610      	mov	r0, r2
 800b552:	4798      	blx	r3
 800b554:	60f8      	str	r0, [r7, #12]
      break;
 800b556:	e112      	b.n	800b77e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	7c1b      	ldrb	r3, [r3, #16]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10d      	bne.n	800b57c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b568:	f107 0208 	add.w	r2, r7, #8
 800b56c:	4610      	mov	r0, r2
 800b56e:	4798      	blx	r3
 800b570:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	3301      	adds	r3, #1
 800b576:	2202      	movs	r2, #2
 800b578:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b57a:	e100      	b.n	800b77e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b584:	f107 0208 	add.w	r2, r7, #8
 800b588:	4610      	mov	r0, r2
 800b58a:	4798      	blx	r3
 800b58c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	3301      	adds	r3, #1
 800b592:	2202      	movs	r2, #2
 800b594:	701a      	strb	r2, [r3, #0]
      break;
 800b596:	e0f2      	b.n	800b77e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	885b      	ldrh	r3, [r3, #2]
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	2b05      	cmp	r3, #5
 800b5a0:	f200 80ac 	bhi.w	800b6fc <USBD_GetDescriptor+0x204>
 800b5a4:	a201      	add	r2, pc, #4	; (adr r2, 800b5ac <USBD_GetDescriptor+0xb4>)
 800b5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5aa:	bf00      	nop
 800b5ac:	0800b5c5 	.word	0x0800b5c5
 800b5b0:	0800b5f9 	.word	0x0800b5f9
 800b5b4:	0800b62d 	.word	0x0800b62d
 800b5b8:	0800b661 	.word	0x0800b661
 800b5bc:	0800b695 	.word	0x0800b695
 800b5c0:	0800b6c9 	.word	0x0800b6c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00b      	beq.n	800b5e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	7c12      	ldrb	r2, [r2, #16]
 800b5dc:	f107 0108 	add.w	r1, r7, #8
 800b5e0:	4610      	mov	r0, r2
 800b5e2:	4798      	blx	r3
 800b5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5e6:	e091      	b.n	800b70c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5e8:	6839      	ldr	r1, [r7, #0]
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fab1 	bl	800bb52 <USBD_CtlError>
            err++;
 800b5f0:	7afb      	ldrb	r3, [r7, #11]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b5f6:	e089      	b.n	800b70c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00b      	beq.n	800b61c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	7c12      	ldrb	r2, [r2, #16]
 800b610:	f107 0108 	add.w	r1, r7, #8
 800b614:	4610      	mov	r0, r2
 800b616:	4798      	blx	r3
 800b618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b61a:	e077      	b.n	800b70c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b61c:	6839      	ldr	r1, [r7, #0]
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 fa97 	bl	800bb52 <USBD_CtlError>
            err++;
 800b624:	7afb      	ldrb	r3, [r7, #11]
 800b626:	3301      	adds	r3, #1
 800b628:	72fb      	strb	r3, [r7, #11]
          break;
 800b62a:	e06f      	b.n	800b70c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00b      	beq.n	800b650 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	7c12      	ldrb	r2, [r2, #16]
 800b644:	f107 0108 	add.w	r1, r7, #8
 800b648:	4610      	mov	r0, r2
 800b64a:	4798      	blx	r3
 800b64c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b64e:	e05d      	b.n	800b70c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b650:	6839      	ldr	r1, [r7, #0]
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fa7d 	bl	800bb52 <USBD_CtlError>
            err++;
 800b658:	7afb      	ldrb	r3, [r7, #11]
 800b65a:	3301      	adds	r3, #1
 800b65c:	72fb      	strb	r3, [r7, #11]
          break;
 800b65e:	e055      	b.n	800b70c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00b      	beq.n	800b684 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	7c12      	ldrb	r2, [r2, #16]
 800b678:	f107 0108 	add.w	r1, r7, #8
 800b67c:	4610      	mov	r0, r2
 800b67e:	4798      	blx	r3
 800b680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b682:	e043      	b.n	800b70c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b684:	6839      	ldr	r1, [r7, #0]
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 fa63 	bl	800bb52 <USBD_CtlError>
            err++;
 800b68c:	7afb      	ldrb	r3, [r7, #11]
 800b68e:	3301      	adds	r3, #1
 800b690:	72fb      	strb	r3, [r7, #11]
          break;
 800b692:	e03b      	b.n	800b70c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b69a:	695b      	ldr	r3, [r3, #20]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00b      	beq.n	800b6b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6a6:	695b      	ldr	r3, [r3, #20]
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	7c12      	ldrb	r2, [r2, #16]
 800b6ac:	f107 0108 	add.w	r1, r7, #8
 800b6b0:	4610      	mov	r0, r2
 800b6b2:	4798      	blx	r3
 800b6b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6b6:	e029      	b.n	800b70c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6b8:	6839      	ldr	r1, [r7, #0]
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 fa49 	bl	800bb52 <USBD_CtlError>
            err++;
 800b6c0:	7afb      	ldrb	r3, [r7, #11]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b6c6:	e021      	b.n	800b70c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6ce:	699b      	ldr	r3, [r3, #24]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00b      	beq.n	800b6ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6da:	699b      	ldr	r3, [r3, #24]
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	7c12      	ldrb	r2, [r2, #16]
 800b6e0:	f107 0108 	add.w	r1, r7, #8
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	4798      	blx	r3
 800b6e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6ea:	e00f      	b.n	800b70c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6ec:	6839      	ldr	r1, [r7, #0]
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fa2f 	bl	800bb52 <USBD_CtlError>
            err++;
 800b6f4:	7afb      	ldrb	r3, [r7, #11]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b6fa:	e007      	b.n	800b70c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b6fc:	6839      	ldr	r1, [r7, #0]
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 fa27 	bl	800bb52 <USBD_CtlError>
          err++;
 800b704:	7afb      	ldrb	r3, [r7, #11]
 800b706:	3301      	adds	r3, #1
 800b708:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b70a:	bf00      	nop
      }
      break;
 800b70c:	e037      	b.n	800b77e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	7c1b      	ldrb	r3, [r3, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d109      	bne.n	800b72a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b71c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b71e:	f107 0208 	add.w	r2, r7, #8
 800b722:	4610      	mov	r0, r2
 800b724:	4798      	blx	r3
 800b726:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b728:	e029      	b.n	800b77e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b72a:	6839      	ldr	r1, [r7, #0]
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fa10 	bl	800bb52 <USBD_CtlError>
        err++;
 800b732:	7afb      	ldrb	r3, [r7, #11]
 800b734:	3301      	adds	r3, #1
 800b736:	72fb      	strb	r3, [r7, #11]
      break;
 800b738:	e021      	b.n	800b77e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	7c1b      	ldrb	r3, [r3, #16]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10d      	bne.n	800b75e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b74a:	f107 0208 	add.w	r2, r7, #8
 800b74e:	4610      	mov	r0, r2
 800b750:	4798      	blx	r3
 800b752:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	3301      	adds	r3, #1
 800b758:	2207      	movs	r2, #7
 800b75a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b75c:	e00f      	b.n	800b77e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b75e:	6839      	ldr	r1, [r7, #0]
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 f9f6 	bl	800bb52 <USBD_CtlError>
        err++;
 800b766:	7afb      	ldrb	r3, [r7, #11]
 800b768:	3301      	adds	r3, #1
 800b76a:	72fb      	strb	r3, [r7, #11]
      break;
 800b76c:	e007      	b.n	800b77e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b76e:	6839      	ldr	r1, [r7, #0]
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 f9ee 	bl	800bb52 <USBD_CtlError>
      err++;
 800b776:	7afb      	ldrb	r3, [r7, #11]
 800b778:	3301      	adds	r3, #1
 800b77a:	72fb      	strb	r3, [r7, #11]
      break;
 800b77c:	bf00      	nop
  }

  if (err != 0U)
 800b77e:	7afb      	ldrb	r3, [r7, #11]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d11e      	bne.n	800b7c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	88db      	ldrh	r3, [r3, #6]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d016      	beq.n	800b7ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b78c:	893b      	ldrh	r3, [r7, #8]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00e      	beq.n	800b7b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	88da      	ldrh	r2, [r3, #6]
 800b796:	893b      	ldrh	r3, [r7, #8]
 800b798:	4293      	cmp	r3, r2
 800b79a:	bf28      	it	cs
 800b79c:	4613      	movcs	r3, r2
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b7a2:	893b      	ldrh	r3, [r7, #8]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	68f9      	ldr	r1, [r7, #12]
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fa43 	bl	800bc34 <USBD_CtlSendData>
 800b7ae:	e009      	b.n	800b7c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b7b0:	6839      	ldr	r1, [r7, #0]
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f9cd 	bl	800bb52 <USBD_CtlError>
 800b7b8:	e004      	b.n	800b7c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fa94 	bl	800bce8 <USBD_CtlSendStatus>
 800b7c0:	e000      	b.n	800b7c4 <USBD_GetDescriptor+0x2cc>
    return;
 800b7c2:	bf00      	nop
  }
}
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop

0800b7cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	889b      	ldrh	r3, [r3, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d131      	bne.n	800b842 <USBD_SetAddress+0x76>
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	88db      	ldrh	r3, [r3, #6]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d12d      	bne.n	800b842 <USBD_SetAddress+0x76>
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	885b      	ldrh	r3, [r3, #2]
 800b7ea:	2b7f      	cmp	r3, #127	; 0x7f
 800b7ec:	d829      	bhi.n	800b842 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	885b      	ldrh	r3, [r3, #2]
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b800:	b2db      	uxtb	r3, r3
 800b802:	2b03      	cmp	r3, #3
 800b804:	d104      	bne.n	800b810 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 f9a2 	bl	800bb52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b80e:	e01c      	b.n	800b84a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	7bfa      	ldrb	r2, [r7, #15]
 800b814:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b818:	7bfb      	ldrb	r3, [r7, #15]
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f007 fee5 	bl	80135ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 fa60 	bl	800bce8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b828:	7bfb      	ldrb	r3, [r7, #15]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d004      	beq.n	800b838 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2202      	movs	r2, #2
 800b832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b836:	e008      	b.n	800b84a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b840:	e003      	b.n	800b84a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b842:	6839      	ldr	r1, [r7, #0]
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 f984 	bl	800bb52 <USBD_CtlError>
  }
}
 800b84a:	bf00      	nop
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
	...

0800b854 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	885b      	ldrh	r3, [r3, #2]
 800b866:	b2da      	uxtb	r2, r3
 800b868:	4b4c      	ldr	r3, [pc, #304]	; (800b99c <USBD_SetConfig+0x148>)
 800b86a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b86c:	4b4b      	ldr	r3, [pc, #300]	; (800b99c <USBD_SetConfig+0x148>)
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d905      	bls.n	800b880 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b874:	6839      	ldr	r1, [r7, #0]
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f96b 	bl	800bb52 <USBD_CtlError>
    return USBD_FAIL;
 800b87c:	2303      	movs	r3, #3
 800b87e:	e088      	b.n	800b992 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b886:	b2db      	uxtb	r3, r3
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d002      	beq.n	800b892 <USBD_SetConfig+0x3e>
 800b88c:	2b03      	cmp	r3, #3
 800b88e:	d025      	beq.n	800b8dc <USBD_SetConfig+0x88>
 800b890:	e071      	b.n	800b976 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b892:	4b42      	ldr	r3, [pc, #264]	; (800b99c <USBD_SetConfig+0x148>)
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d01c      	beq.n	800b8d4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b89a:	4b40      	ldr	r3, [pc, #256]	; (800b99c <USBD_SetConfig+0x148>)
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8a4:	4b3d      	ldr	r3, [pc, #244]	; (800b99c <USBD_SetConfig+0x148>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7ff f9c8 	bl	800ac40 <USBD_SetClassConfig>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b8b4:	7bfb      	ldrb	r3, [r7, #15]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d004      	beq.n	800b8c4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b8ba:	6839      	ldr	r1, [r7, #0]
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 f948 	bl	800bb52 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b8c2:	e065      	b.n	800b990 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 fa0f 	bl	800bce8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2203      	movs	r2, #3
 800b8ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b8d2:	e05d      	b.n	800b990 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fa07 	bl	800bce8 <USBD_CtlSendStatus>
      break;
 800b8da:	e059      	b.n	800b990 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b8dc:	4b2f      	ldr	r3, [pc, #188]	; (800b99c <USBD_SetConfig+0x148>)
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d112      	bne.n	800b90a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b8ec:	4b2b      	ldr	r3, [pc, #172]	; (800b99c <USBD_SetConfig+0x148>)
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8f6:	4b29      	ldr	r3, [pc, #164]	; (800b99c <USBD_SetConfig+0x148>)
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7ff f9bb 	bl	800ac78 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 f9f0 	bl	800bce8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b908:	e042      	b.n	800b990 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b90a:	4b24      	ldr	r3, [pc, #144]	; (800b99c <USBD_SetConfig+0x148>)
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	461a      	mov	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	429a      	cmp	r2, r3
 800b916:	d02a      	beq.n	800b96e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	4619      	mov	r1, r3
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7ff f9a9 	bl	800ac78 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b926:	4b1d      	ldr	r3, [pc, #116]	; (800b99c <USBD_SetConfig+0x148>)
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	461a      	mov	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b930:	4b1a      	ldr	r3, [pc, #104]	; (800b99c <USBD_SetConfig+0x148>)
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff f982 	bl	800ac40 <USBD_SetClassConfig>
 800b93c:	4603      	mov	r3, r0
 800b93e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b940:	7bfb      	ldrb	r3, [r7, #15]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00f      	beq.n	800b966 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b946:	6839      	ldr	r1, [r7, #0]
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 f902 	bl	800bb52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	b2db      	uxtb	r3, r3
 800b954:	4619      	mov	r1, r3
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f7ff f98e 	bl	800ac78 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2202      	movs	r2, #2
 800b960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b964:	e014      	b.n	800b990 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 f9be 	bl	800bce8 <USBD_CtlSendStatus>
      break;
 800b96c:	e010      	b.n	800b990 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 f9ba 	bl	800bce8 <USBD_CtlSendStatus>
      break;
 800b974:	e00c      	b.n	800b990 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b976:	6839      	ldr	r1, [r7, #0]
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 f8ea 	bl	800bb52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b97e:	4b07      	ldr	r3, [pc, #28]	; (800b99c <USBD_SetConfig+0x148>)
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	4619      	mov	r1, r3
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f7ff f977 	bl	800ac78 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b98a:	2303      	movs	r3, #3
 800b98c:	73fb      	strb	r3, [r7, #15]
      break;
 800b98e:	bf00      	nop
  }

  return ret;
 800b990:	7bfb      	ldrb	r3, [r7, #15]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	20000310 	.word	0x20000310

0800b9a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	88db      	ldrh	r3, [r3, #6]
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d004      	beq.n	800b9bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b9b2:	6839      	ldr	r1, [r7, #0]
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 f8cc 	bl	800bb52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b9ba:	e022      	b.n	800ba02 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	db17      	blt.n	800b9f8 <USBD_GetConfig+0x58>
 800b9c8:	2b02      	cmp	r3, #2
 800b9ca:	dd02      	ble.n	800b9d2 <USBD_GetConfig+0x32>
 800b9cc:	2b03      	cmp	r3, #3
 800b9ce:	d00b      	beq.n	800b9e8 <USBD_GetConfig+0x48>
 800b9d0:	e012      	b.n	800b9f8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	3308      	adds	r3, #8
 800b9dc:	2201      	movs	r2, #1
 800b9de:	4619      	mov	r1, r3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 f927 	bl	800bc34 <USBD_CtlSendData>
        break;
 800b9e6:	e00c      	b.n	800ba02 <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	3304      	adds	r3, #4
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f91f 	bl	800bc34 <USBD_CtlSendData>
        break;
 800b9f6:	e004      	b.n	800ba02 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b9f8:	6839      	ldr	r1, [r7, #0]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f8a9 	bl	800bb52 <USBD_CtlError>
        break;
 800ba00:	bf00      	nop
}
 800ba02:	bf00      	nop
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b082      	sub	sp, #8
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
 800ba12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d81e      	bhi.n	800ba60 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	88db      	ldrh	r3, [r3, #6]
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	d004      	beq.n	800ba34 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ba2a:	6839      	ldr	r1, [r7, #0]
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 f890 	bl	800bb52 <USBD_CtlError>
        break;
 800ba32:	e01a      	b.n	800ba6a <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d005      	beq.n	800ba50 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	f043 0202 	orr.w	r2, r3, #2
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	330c      	adds	r3, #12
 800ba54:	2202      	movs	r2, #2
 800ba56:	4619      	mov	r1, r3
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 f8eb 	bl	800bc34 <USBD_CtlSendData>
      break;
 800ba5e:	e004      	b.n	800ba6a <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ba60:	6839      	ldr	r1, [r7, #0]
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f875 	bl	800bb52 <USBD_CtlError>
      break;
 800ba68:	bf00      	nop
  }
}
 800ba6a:	bf00      	nop
 800ba6c:	3708      	adds	r7, #8
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b082      	sub	sp, #8
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	885b      	ldrh	r3, [r3, #2]
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d106      	bne.n	800ba92 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f92b 	bl	800bce8 <USBD_CtlSendStatus>
  }
}
 800ba92:	bf00      	nop
 800ba94:	3708      	adds	r7, #8
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b082      	sub	sp, #8
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	3b01      	subs	r3, #1
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d80b      	bhi.n	800baca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	885b      	ldrh	r3, [r3, #2]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d10c      	bne.n	800bad4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2200      	movs	r2, #0
 800babe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f910 	bl	800bce8 <USBD_CtlSendStatus>
      }
      break;
 800bac8:	e004      	b.n	800bad4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800baca:	6839      	ldr	r1, [r7, #0]
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 f840 	bl	800bb52 <USBD_CtlError>
      break;
 800bad2:	e000      	b.n	800bad6 <USBD_ClrFeature+0x3c>
      break;
 800bad4:	bf00      	nop
  }
}
 800bad6:	bf00      	nop
 800bad8:	3708      	adds	r7, #8
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b084      	sub	sp, #16
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	781a      	ldrb	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	3301      	adds	r3, #1
 800baf8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	781a      	ldrb	r2, [r3, #0]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	3301      	adds	r3, #1
 800bb06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f7ff fac7 	bl	800b09c <SWAPBYTE>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	461a      	mov	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f7ff faba 	bl	800b09c <SWAPBYTE>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	3301      	adds	r3, #1
 800bb34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7ff faad 	bl	800b09c <SWAPBYTE>
 800bb42:	4603      	mov	r3, r0
 800bb44:	461a      	mov	r2, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	80da      	strh	r2, [r3, #6]
}
 800bb4a:	bf00      	nop
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
 800bb5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb5c:	2180      	movs	r1, #128	; 0x80
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f007 fce0 	bl	8013524 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bb64:	2100      	movs	r1, #0
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f007 fcdc 	bl	8013524 <USBD_LL_StallEP>
}
 800bb6c:	bf00      	nop
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b086      	sub	sp, #24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bb80:	2300      	movs	r3, #0
 800bb82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d036      	beq.n	800bbf8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bb8e:	6938      	ldr	r0, [r7, #16]
 800bb90:	f000 f836 	bl	800bc00 <USBD_GetLen>
 800bb94:	4603      	mov	r3, r0
 800bb96:	3301      	adds	r3, #1
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	005b      	lsls	r3, r3, #1
 800bb9c:	b29a      	uxth	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bba2:	7dfb      	ldrb	r3, [r7, #23]
 800bba4:	68ba      	ldr	r2, [r7, #8]
 800bba6:	4413      	add	r3, r2
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	7812      	ldrb	r2, [r2, #0]
 800bbac:	701a      	strb	r2, [r3, #0]
  idx++;
 800bbae:	7dfb      	ldrb	r3, [r7, #23]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bbb4:	7dfb      	ldrb	r3, [r7, #23]
 800bbb6:	68ba      	ldr	r2, [r7, #8]
 800bbb8:	4413      	add	r3, r2
 800bbba:	2203      	movs	r2, #3
 800bbbc:	701a      	strb	r2, [r3, #0]
  idx++;
 800bbbe:	7dfb      	ldrb	r3, [r7, #23]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bbc4:	e013      	b.n	800bbee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bbc6:	7dfb      	ldrb	r3, [r7, #23]
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	4413      	add	r3, r2
 800bbcc:	693a      	ldr	r2, [r7, #16]
 800bbce:	7812      	ldrb	r2, [r2, #0]
 800bbd0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	613b      	str	r3, [r7, #16]
    idx++;
 800bbd8:	7dfb      	ldrb	r3, [r7, #23]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bbde:	7dfb      	ldrb	r3, [r7, #23]
 800bbe0:	68ba      	ldr	r2, [r7, #8]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	701a      	strb	r2, [r3, #0]
    idx++;
 800bbe8:	7dfb      	ldrb	r3, [r7, #23]
 800bbea:	3301      	adds	r3, #1
 800bbec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1e7      	bne.n	800bbc6 <USBD_GetString+0x52>
 800bbf6:	e000      	b.n	800bbfa <USBD_GetString+0x86>
    return;
 800bbf8:	bf00      	nop
  }
}
 800bbfa:	3718      	adds	r7, #24
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bc10:	e005      	b.n	800bc1e <USBD_GetLen+0x1e>
  {
    len++;
 800bc12:	7bfb      	ldrb	r3, [r7, #15]
 800bc14:	3301      	adds	r3, #1
 800bc16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1f5      	bne.n	800bc12 <USBD_GetLen+0x12>
  }

  return len;
 800bc26:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3714      	adds	r7, #20
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2202      	movs	r2, #2
 800bc44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	68ba      	ldr	r2, [r7, #8]
 800bc58:	2100      	movs	r1, #0
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	f007 fce5 	bl	801362a <USBD_LL_Transmit>

  return USBD_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b084      	sub	sp, #16
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	60f8      	str	r0, [r7, #12]
 800bc72:	60b9      	str	r1, [r7, #8]
 800bc74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f007 fcd4 	bl	801362a <USBD_LL_Transmit>

  return USBD_OK;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3710      	adds	r7, #16
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2203      	movs	r2, #3
 800bc9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	68ba      	ldr	r2, [r7, #8]
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	f007 fcd8 	bl	801366c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}

0800bcc6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b084      	sub	sp, #16
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	60f8      	str	r0, [r7, #12]
 800bcce:	60b9      	str	r1, [r7, #8]
 800bcd0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f007 fcc7 	bl	801366c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2204      	movs	r2, #4
 800bcf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f007 fc93 	bl	801362a <USBD_LL_Transmit>

  return USBD_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b082      	sub	sp, #8
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2205      	movs	r2, #5
 800bd1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd1e:	2300      	movs	r3, #0
 800bd20:	2200      	movs	r2, #0
 800bd22:	2100      	movs	r1, #0
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f007 fca1 	bl	801366c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd2a:	2300      	movs	r3, #0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bd3a:	1d3b      	adds	r3, r7, #4
 800bd3c:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	2200      	movs	r2, #0
 800bd42:	2100      	movs	r1, #0
 800bd44:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800bd48:	f000 f938 	bl	800bfbc <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	330b      	adds	r3, #11
 800bd50:	78db      	ldrb	r3, [r3, #3]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3718      	adds	r7, #24
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b088      	sub	sp, #32
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	4603      	mov	r3, r0
 800bd62:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bd64:	f107 030c 	add.w	r3, r7, #12
 800bd68:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800bd6a:	79fb      	ldrb	r3, [r7, #7]
 800bd6c:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800bd6e:	f107 020c 	add.w	r2, r7, #12
 800bd72:	69fb      	ldr	r3, [r7, #28]
 800bd74:	2101      	movs	r1, #1
 800bd76:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800bd7a:	f000 f91f 	bl	800bfbc <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bd7e:	69fb      	ldr	r3, [r7, #28]
 800bd80:	330b      	adds	r3, #11
 800bd82:	78db      	ldrb	r3, [r3, #3]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3720      	adds	r7, #32
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b08b      	sub	sp, #44	; 0x2c
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800bd94:	2300      	movs	r3, #0
 800bd96:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800bda0:	2300      	movs	r3, #0
 800bda2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800bda4:	2300      	movs	r3, #0
 800bda6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800bdac:	2300      	movs	r3, #0
 800bdae:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800bdb4:	4b4a      	ldr	r3, [pc, #296]	; (800bee0 <SHCI_GetWirelessFwInfo+0x154>)
 800bdb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bdbc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bdc6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a44      	ldr	r2, [pc, #272]	; (800bee4 <SHCI_GetWirelessFwInfo+0x158>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d10f      	bne.n	800bdf8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	695b      	ldr	r3, [r3, #20]
 800bddc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	699b      	ldr	r3, [r3, #24]
 800bde2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	69db      	ldr	r3, [r3, #28]
 800bde8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	617b      	str	r3, [r7, #20]
 800bdf6:	e01a      	b.n	800be2e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800be00:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800be04:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	691b      	ldr	r3, [r3, #16]
 800be0c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	695b      	ldr	r3, [r3, #20]
 800be14:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	699b      	ldr	r3, [r3, #24]
 800be1c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800be2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be30:	0e1b      	lsrs	r3, r3, #24
 800be32:	b2da      	uxtb	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800be38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3a:	0c1b      	lsrs	r3, r3, #16
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800be42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be44:	0a1b      	lsrs	r3, r3, #8
 800be46:	b2da      	uxtb	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800be4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4e:	091b      	lsrs	r3, r3, #4
 800be50:	b2db      	uxtb	r3, r3
 800be52:	f003 030f 	and.w	r3, r3, #15
 800be56:	b2da      	uxtb	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800be5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	f003 030f 	and.w	r3, r3, #15
 800be64:	b2da      	uxtb	r2, r3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800be6a:	6a3b      	ldr	r3, [r7, #32]
 800be6c:	0e1b      	lsrs	r3, r3, #24
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800be74:	6a3b      	ldr	r3, [r7, #32]
 800be76:	0c1b      	lsrs	r3, r3, #16
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800be7e:	6a3b      	ldr	r3, [r7, #32]
 800be80:	0a1b      	lsrs	r3, r3, #8
 800be82:	b2da      	uxtb	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800be88:	6a3b      	ldr	r3, [r7, #32]
 800be8a:	b2da      	uxtb	r2, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	b2da      	uxtb	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	0e1b      	lsrs	r3, r3, #24
 800be9c:	b2da      	uxtb	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	0c1b      	lsrs	r3, r3, #16
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	0a1b      	lsrs	r3, r3, #8
 800beb0:	b2da      	uxtb	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	0e1b      	lsrs	r3, r3, #24
 800beba:	b2da      	uxtb	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	0c1b      	lsrs	r3, r3, #16
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	b2da      	uxtb	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	372c      	adds	r7, #44	; 0x2c
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr
 800bee0:	58004000 	.word	0x58004000
 800bee4:	a94656b9 	.word	0xa94656b9

0800bee8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	4a08      	ldr	r2, [pc, #32]	; (800bf18 <shci_init+0x30>)
 800bef8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800befa:	4a08      	ldr	r2, [pc, #32]	; (800bf1c <shci_init+0x34>)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800bf00:	4806      	ldr	r0, [pc, #24]	; (800bf1c <shci_init+0x34>)
 800bf02:	f000 f911 	bl	800c128 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f000 f894 	bl	800c038 <TlInit>

  return;
 800bf10:	bf00      	nop
}
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	20000334 	.word	0x20000334
 800bf1c:	20000314 	.word	0x20000314

0800bf20 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bf26:	4822      	ldr	r0, [pc, #136]	; (800bfb0 <shci_user_evt_proc+0x90>)
 800bf28:	f001 fce4 	bl	800d8f4 <LST_is_empty>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d12b      	bne.n	800bf8a <shci_user_evt_proc+0x6a>
 800bf32:	4b20      	ldr	r3, [pc, #128]	; (800bfb4 <shci_user_evt_proc+0x94>)
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d027      	beq.n	800bf8a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bf3a:	f107 030c 	add.w	r3, r7, #12
 800bf3e:	4619      	mov	r1, r3
 800bf40:	481b      	ldr	r0, [pc, #108]	; (800bfb0 <shci_user_evt_proc+0x90>)
 800bf42:	f001 fd5e 	bl	800da02 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800bf46:	4b1c      	ldr	r3, [pc, #112]	; (800bfb8 <shci_user_evt_proc+0x98>)
 800bf48:	69db      	ldr	r3, [r3, #28]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00c      	beq.n	800bf68 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800bf52:	2301      	movs	r3, #1
 800bf54:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bf56:	4b18      	ldr	r3, [pc, #96]	; (800bfb8 <shci_user_evt_proc+0x98>)
 800bf58:	69db      	ldr	r3, [r3, #28]
 800bf5a:	1d3a      	adds	r2, r7, #4
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800bf60:	793a      	ldrb	r2, [r7, #4]
 800bf62:	4b14      	ldr	r3, [pc, #80]	; (800bfb4 <shci_user_evt_proc+0x94>)
 800bf64:	701a      	strb	r2, [r3, #0]
 800bf66:	e002      	b.n	800bf6e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bf68:	4b12      	ldr	r3, [pc, #72]	; (800bfb4 <shci_user_evt_proc+0x94>)
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800bf6e:	4b11      	ldr	r3, [pc, #68]	; (800bfb4 <shci_user_evt_proc+0x94>)
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d004      	beq.n	800bf80 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 fa95 	bl	800c4a8 <TL_MM_EvtDone>
 800bf7e:	e004      	b.n	800bf8a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	4619      	mov	r1, r3
 800bf84:	480a      	ldr	r0, [pc, #40]	; (800bfb0 <shci_user_evt_proc+0x90>)
 800bf86:	f001 fcd5 	bl	800d934 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bf8a:	4809      	ldr	r0, [pc, #36]	; (800bfb0 <shci_user_evt_proc+0x90>)
 800bf8c:	f001 fcb2 	bl	800d8f4 <LST_is_empty>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d107      	bne.n	800bfa6 <shci_user_evt_proc+0x86>
 800bf96:	4b07      	ldr	r3, [pc, #28]	; (800bfb4 <shci_user_evt_proc+0x94>)
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d003      	beq.n	800bfa6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800bf9e:	4804      	ldr	r0, [pc, #16]	; (800bfb0 <shci_user_evt_proc+0x90>)
 800bfa0:	f7f4 ff18 	bl	8000dd4 <shci_notify_asynch_evt>
  }


  return;
 800bfa4:	bf00      	nop
 800bfa6:	bf00      	nop
}
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	2000025c 	.word	0x2000025c
 800bfb4:	2000026c 	.word	0x2000026c
 800bfb8:	20000314 	.word	0x20000314

0800bfbc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60ba      	str	r2, [r7, #8]
 800bfc4:	607b      	str	r3, [r7, #4]
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	81fb      	strh	r3, [r7, #14]
 800bfca:	460b      	mov	r3, r1
 800bfcc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800bfce:	2000      	movs	r0, #0
 800bfd0:	f000 f864 	bl	800c09c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800bfd4:	4b16      	ldr	r3, [pc, #88]	; (800c030 <shci_send+0x74>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	89fa      	ldrh	r2, [r7, #14]
 800bfda:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800bfde:	4b14      	ldr	r3, [pc, #80]	; (800c030 <shci_send+0x74>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	7b7a      	ldrb	r2, [r7, #13]
 800bfe4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800bfe6:	4b12      	ldr	r3, [pc, #72]	; (800c030 <shci_send+0x74>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	330c      	adds	r3, #12
 800bfec:	7b7a      	ldrb	r2, [r7, #13]
 800bfee:	68b9      	ldr	r1, [r7, #8]
 800bff0:	4618      	mov	r0, r3
 800bff2:	f007 fc1f 	bl	8013834 <memcpy>

  shciContext.io.Send(0,0);
 800bff6:	4b0f      	ldr	r3, [pc, #60]	; (800c034 <shci_send+0x78>)
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	2100      	movs	r1, #0
 800bffc:	2000      	movs	r0, #0
 800bffe:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c000:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c004:	f7f4 ff06 	bl	8000e14 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f103 0008 	add.w	r0, r3, #8
 800c00e:	4b08      	ldr	r3, [pc, #32]	; (800c030 <shci_send+0x74>)
 800c010:	6819      	ldr	r1, [r3, #0]
 800c012:	4b07      	ldr	r3, [pc, #28]	; (800c030 <shci_send+0x74>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	789b      	ldrb	r3, [r3, #2]
 800c018:	3303      	adds	r3, #3
 800c01a:	461a      	mov	r2, r3
 800c01c:	f007 fc0a 	bl	8013834 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c020:	2001      	movs	r0, #1
 800c022:	f000 f83b 	bl	800c09c <Cmd_SetStatus>

  return;
 800c026:	bf00      	nop
}
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	20000268 	.word	0x20000268
 800c034:	20000314 	.word	0x20000314

0800c038 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b086      	sub	sp, #24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c040:	4a10      	ldr	r2, [pc, #64]	; (800c084 <TlInit+0x4c>)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c046:	4810      	ldr	r0, [pc, #64]	; (800c088 <TlInit+0x50>)
 800c048:	f001 fc44 	bl	800d8d4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c04c:	2001      	movs	r0, #1
 800c04e:	f000 f825 	bl	800c09c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c052:	4b0e      	ldr	r3, [pc, #56]	; (800c08c <TlInit+0x54>)
 800c054:	2201      	movs	r2, #1
 800c056:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c058:	4b0d      	ldr	r3, [pc, #52]	; (800c090 <TlInit+0x58>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00c      	beq.n	800c07a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c064:	4b0b      	ldr	r3, [pc, #44]	; (800c094 <TlInit+0x5c>)
 800c066:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c068:	4b0b      	ldr	r3, [pc, #44]	; (800c098 <TlInit+0x60>)
 800c06a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c06c:	4b08      	ldr	r3, [pc, #32]	; (800c090 <TlInit+0x58>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f107 020c 	add.w	r2, r7, #12
 800c074:	4610      	mov	r0, r2
 800c076:	4798      	blx	r3
  }

  return;
 800c078:	bf00      	nop
 800c07a:	bf00      	nop
}
 800c07c:	3718      	adds	r7, #24
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	20000268 	.word	0x20000268
 800c088:	2000025c 	.word	0x2000025c
 800c08c:	2000026c 	.word	0x2000026c
 800c090:	20000314 	.word	0x20000314
 800c094:	0800c0ed 	.word	0x0800c0ed
 800c098:	0800c105 	.word	0x0800c105

0800c09c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c0a6:	79fb      	ldrb	r3, [r7, #7]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10b      	bne.n	800c0c4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c0ac:	4b0d      	ldr	r3, [pc, #52]	; (800c0e4 <Cmd_SetStatus+0x48>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d003      	beq.n	800c0bc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c0b4:	4b0b      	ldr	r3, [pc, #44]	; (800c0e4 <Cmd_SetStatus+0x48>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	; (800c0e8 <Cmd_SetStatus+0x4c>)
 800c0be:	2200      	movs	r2, #0
 800c0c0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c0c2:	e00b      	b.n	800c0dc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c0c4:	4b08      	ldr	r3, [pc, #32]	; (800c0e8 <Cmd_SetStatus+0x4c>)
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c0ca:	4b06      	ldr	r3, [pc, #24]	; (800c0e4 <Cmd_SetStatus+0x48>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d004      	beq.n	800c0dc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c0d2:	4b04      	ldr	r3, [pc, #16]	; (800c0e4 <Cmd_SetStatus+0x48>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2001      	movs	r0, #1
 800c0d8:	4798      	blx	r3
  return;
 800c0da:	bf00      	nop
 800c0dc:	bf00      	nop
}
 800c0de:	3708      	adds	r7, #8
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	20000334 	.word	0x20000334
 800c0e8:	20000264 	.word	0x20000264

0800c0ec <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	f7f4 fe7d 	bl	8000df4 <shci_cmd_resp_release>

  return;
 800c0fa:	bf00      	nop
}
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
	...

0800c104 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c10c:	6879      	ldr	r1, [r7, #4]
 800c10e:	4805      	ldr	r0, [pc, #20]	; (800c124 <TlUserEvtReceived+0x20>)
 800c110:	f001 fc34 	bl	800d97c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c114:	4803      	ldr	r0, [pc, #12]	; (800c124 <TlUserEvtReceived+0x20>)
 800c116:	f7f4 fe5d 	bl	8000dd4 <shci_notify_asynch_evt>

  return;
 800c11a:	bf00      	nop
}
 800c11c:	3708      	adds	r7, #8
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	2000025c 	.word	0x2000025c

0800c128 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4a05      	ldr	r2, [pc, #20]	; (800c148 <shci_register_io_bus+0x20>)
 800c134:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a04      	ldr	r2, [pc, #16]	; (800c14c <shci_register_io_bus+0x24>)
 800c13a:	611a      	str	r2, [r3, #16]

  return;
 800c13c:	bf00      	nop
}
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	0800c245 	.word	0x0800c245
 800c14c:	0800c299 	.word	0x0800c299

0800c150 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c154:	f006 fcee 	bl	8012b34 <HW_IPCC_Enable>

  return;
 800c158:	bf00      	nop
}
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <TL_Init>:


void TL_Init( void )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c160:	4b10      	ldr	r3, [pc, #64]	; (800c1a4 <TL_Init+0x48>)
 800c162:	4a11      	ldr	r2, [pc, #68]	; (800c1a8 <TL_Init+0x4c>)
 800c164:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c166:	4b0f      	ldr	r3, [pc, #60]	; (800c1a4 <TL_Init+0x48>)
 800c168:	4a10      	ldr	r2, [pc, #64]	; (800c1ac <TL_Init+0x50>)
 800c16a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c16c:	4b0d      	ldr	r3, [pc, #52]	; (800c1a4 <TL_Init+0x48>)
 800c16e:	4a10      	ldr	r2, [pc, #64]	; (800c1b0 <TL_Init+0x54>)
 800c170:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c172:	4b0c      	ldr	r3, [pc, #48]	; (800c1a4 <TL_Init+0x48>)
 800c174:	4a0f      	ldr	r2, [pc, #60]	; (800c1b4 <TL_Init+0x58>)
 800c176:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800c178:	4b0a      	ldr	r3, [pc, #40]	; (800c1a4 <TL_Init+0x48>)
 800c17a:	4a0f      	ldr	r2, [pc, #60]	; (800c1b8 <TL_Init+0x5c>)
 800c17c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c17e:	4b09      	ldr	r3, [pc, #36]	; (800c1a4 <TL_Init+0x48>)
 800c180:	4a0e      	ldr	r2, [pc, #56]	; (800c1bc <TL_Init+0x60>)
 800c182:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c184:	4b07      	ldr	r3, [pc, #28]	; (800c1a4 <TL_Init+0x48>)
 800c186:	4a0e      	ldr	r2, [pc, #56]	; (800c1c0 <TL_Init+0x64>)
 800c188:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c18a:	4b06      	ldr	r3, [pc, #24]	; (800c1a4 <TL_Init+0x48>)
 800c18c:	4a0d      	ldr	r2, [pc, #52]	; (800c1c4 <TL_Init+0x68>)
 800c18e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c190:	4b04      	ldr	r3, [pc, #16]	; (800c1a4 <TL_Init+0x48>)
 800c192:	4a0d      	ldr	r2, [pc, #52]	; (800c1c8 <TL_Init+0x6c>)
 800c194:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c196:	4b03      	ldr	r3, [pc, #12]	; (800c1a4 <TL_Init+0x48>)
 800c198:	4a0c      	ldr	r2, [pc, #48]	; (800c1cc <TL_Init+0x70>)
 800c19a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c19c:	f006 fcde 	bl	8012b5c <HW_IPCC_Init>

  return;
 800c1a0:	bf00      	nop
}
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	20030000 	.word	0x20030000
 800c1a8:	20030028 	.word	0x20030028
 800c1ac:	20030048 	.word	0x20030048
 800c1b0:	20030058 	.word	0x20030058
 800c1b4:	20030064 	.word	0x20030064
 800c1b8:	2003006c 	.word	0x2003006c
 800c1bc:	20030074 	.word	0x20030074
 800c1c0:	2003007c 	.word	0x2003007c
 800c1c4:	20030098 	.word	0x20030098
 800c1c8:	2003009c 	.word	0x2003009c
 800c1cc:	200300a8 	.word	0x200300a8

0800c1d0 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c1d6:	e01c      	b.n	800c212 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c1d8:	1d3b      	adds	r3, r7, #4
 800c1da:	4619      	mov	r1, r3
 800c1dc:	4812      	ldr	r0, [pc, #72]	; (800c228 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c1de:	f001 fc10 	bl	800da02 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	7a5b      	ldrb	r3, [r3, #9]
 800c1e6:	2b0f      	cmp	r3, #15
 800c1e8:	d003      	beq.n	800c1f2 <HW_IPCC_BLE_RxEvtNot+0x22>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	7a5b      	ldrb	r3, [r3, #9]
 800c1ee:	2b0e      	cmp	r3, #14
 800c1f0:	d105      	bne.n	800c1fe <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	2002      	movs	r0, #2
 800c1f8:	f000 f9ba 	bl	800c570 <OutputDbgTrace>
 800c1fc:	e004      	b.n	800c208 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4619      	mov	r1, r3
 800c202:	2003      	movs	r0, #3
 800c204:	f000 f9b4 	bl	800c570 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c208:	4b08      	ldr	r3, [pc, #32]	; (800c22c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	4610      	mov	r0, r2
 800c210:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c212:	4805      	ldr	r0, [pc, #20]	; (800c228 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c214:	f001 fb6e 	bl	800d8f4 <LST_is_empty>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d0dc      	beq.n	800c1d8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c21e:	bf00      	nop
}
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	200300c4 	.word	0x200300c4
 800c22c:	20000340 	.word	0x20000340

0800c230 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c234:	4b02      	ldr	r3, [pc, #8]	; (800c240 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4798      	blx	r3

  return;
 800c23a:	bf00      	nop
}
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	20000344 	.word	0x20000344

0800c244 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c250:	480d      	ldr	r0, [pc, #52]	; (800c288 <TL_SYS_Init+0x44>)
 800c252:	f001 fb3f 	bl	800d8d4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c256:	4b0d      	ldr	r3, [pc, #52]	; (800c28c <TL_SYS_Init+0x48>)
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	689a      	ldr	r2, [r3, #8]
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	4a08      	ldr	r2, [pc, #32]	; (800c288 <TL_SYS_Init+0x44>)
 800c268:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c26a:	f006 fca5 	bl	8012bb8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4a07      	ldr	r2, [pc, #28]	; (800c290 <TL_SYS_Init+0x4c>)
 800c274:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	4a06      	ldr	r2, [pc, #24]	; (800c294 <TL_SYS_Init+0x50>)
 800c27c:	6013      	str	r3, [r2, #0]

  return 0;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	200300cc 	.word	0x200300cc
 800c28c:	20030000 	.word	0x20030000
 800c290:	20000348 	.word	0x20000348
 800c294:	2000034c 	.word	0x2000034c

0800c298 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c2a4:	4b09      	ldr	r3, [pc, #36]	; (800c2cc <TL_SYS_SendCmd+0x34>)
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2210      	movs	r2, #16
 800c2ac:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c2ae:	4b07      	ldr	r3, [pc, #28]	; (800c2cc <TL_SYS_SendCmd+0x34>)
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	2004      	movs	r0, #4
 800c2b8:	f000 f95a 	bl	800c570 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c2bc:	f006 fc86 	bl	8012bcc <HW_IPCC_SYS_SendCmd>

  return 0;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	20030000 	.word	0x20030000

0800c2d0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c2d4:	4b07      	ldr	r3, [pc, #28]	; (800c2f4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4619      	mov	r1, r3
 800c2dc:	2005      	movs	r0, #5
 800c2de:	f000 f947 	bl	800c570 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c2e2:	4b05      	ldr	r3, [pc, #20]	; (800c2f8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a03      	ldr	r2, [pc, #12]	; (800c2f4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c2e8:	68d2      	ldr	r2, [r2, #12]
 800c2ea:	6812      	ldr	r2, [r2, #0]
 800c2ec:	4610      	mov	r0, r2
 800c2ee:	4798      	blx	r3

  return;
 800c2f0:	bf00      	nop
}
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	20030000 	.word	0x20030000
 800c2f8:	20000348 	.word	0x20000348

0800c2fc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c302:	e00e      	b.n	800c322 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c304:	1d3b      	adds	r3, r7, #4
 800c306:	4619      	mov	r1, r3
 800c308:	480b      	ldr	r0, [pc, #44]	; (800c338 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c30a:	f001 fb7a 	bl	800da02 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4619      	mov	r1, r3
 800c312:	2006      	movs	r0, #6
 800c314:	f000 f92c 	bl	800c570 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c318:	4b08      	ldr	r3, [pc, #32]	; (800c33c <HW_IPCC_SYS_EvtNot+0x40>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	4610      	mov	r0, r2
 800c320:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c322:	4805      	ldr	r0, [pc, #20]	; (800c338 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c324:	f001 fae6 	bl	800d8f4 <LST_is_empty>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d0ea      	beq.n	800c304 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c32e:	bf00      	nop
}
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	200300cc 	.word	0x200300cc
 800c33c:	2000034c 	.word	0x2000034c

0800c340 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800c348:	4b0a      	ldr	r3, [pc, #40]	; (800c374 <TL_THREAD_Init+0x34>)
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	685a      	ldr	r2, [r3, #4]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	689a      	ldr	r2, [r3, #8]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 800c366:	f006 fc57 	bl	8012c18 <HW_IPCC_THREAD_Init>

  return;
 800c36a:	bf00      	nop
}
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20030000 	.word	0x20030000

0800c378 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800c37c:	4b04      	ldr	r3, [pc, #16]	; (800c390 <TL_OT_SendCmd+0x18>)
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	2208      	movs	r2, #8
 800c384:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800c386:	f006 fc55 	bl	8012c34 <HW_IPCC_OT_SendCmd>

  return;
 800c38a:	bf00      	nop
}
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	20030000 	.word	0x20030000

0800c394 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800c398:	4b04      	ldr	r3, [pc, #16]	; (800c3ac <TL_CLI_SendCmd+0x18>)
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	220a      	movs	r2, #10
 800c3a0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 800c3a2:	f006 fc55 	bl	8012c50 <HW_IPCC_CLI_SendCmd>

  return;
 800c3a6:	bf00      	nop
}
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	20030000 	.word	0x20030000

0800c3b0 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c3b4:	4b04      	ldr	r3, [pc, #16]	; (800c3c8 <TL_THREAD_SendAck+0x18>)
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	220d      	movs	r2, #13
 800c3bc:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800c3be:	f006 fc51 	bl	8012c64 <HW_IPCC_THREAD_SendAck>

  return;
 800c3c2:	bf00      	nop
}
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	20030000 	.word	0x20030000

0800c3cc <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c3d0:	4b04      	ldr	r3, [pc, #16]	; (800c3e4 <TL_THREAD_CliSendAck+0x18>)
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	220d      	movs	r2, #13
 800c3d8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800c3da:	f006 fc51 	bl	8012c80 <HW_IPCC_THREAD_CliSendAck>

  return;
 800c3de:	bf00      	nop
}
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	20030000 	.word	0x20030000

0800c3e8 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800c3ec:	4b03      	ldr	r3, [pc, #12]	; (800c3fc <HW_IPCC_OT_CmdEvtNot+0x14>)
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f006 f8e4 	bl	80125c0 <TL_OT_CmdEvtReceived>

  return;
 800c3f8:	bf00      	nop
}
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	20030000 	.word	0x20030000

0800c400 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800c404:	4b03      	ldr	r3, [pc, #12]	; (800c414 <HW_IPCC_THREAD_EvtNot+0x14>)
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f006 f8e2 	bl	80125d4 <TL_THREAD_NotReceived>

  return;
 800c410:	bf00      	nop
}
 800c412:	bd80      	pop	{r7, pc}
 800c414:	20030000 	.word	0x20030000

0800c418 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 800c41c:	4b03      	ldr	r3, [pc, #12]	; (800c42c <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	4618      	mov	r0, r3
 800c424:	f006 f984 	bl	8012730 <TL_THREAD_CliNotReceived>

  return;
 800c428:	bf00      	nop
}
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	20030000 	.word	0x20030000

0800c430 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c438:	4817      	ldr	r0, [pc, #92]	; (800c498 <TL_MM_Init+0x68>)
 800c43a:	f001 fa4b 	bl	800d8d4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c43e:	4817      	ldr	r0, [pc, #92]	; (800c49c <TL_MM_Init+0x6c>)
 800c440:	f001 fa48 	bl	800d8d4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c444:	4b16      	ldr	r3, [pc, #88]	; (800c4a0 <TL_MM_Init+0x70>)
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	4a16      	ldr	r2, [pc, #88]	; (800c4a4 <TL_MM_Init+0x74>)
 800c44a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c44c:	4b15      	ldr	r3, [pc, #84]	; (800c4a4 <TL_MM_Init+0x74>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	6892      	ldr	r2, [r2, #8]
 800c454:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c456:	4b13      	ldr	r3, [pc, #76]	; (800c4a4 <TL_MM_Init+0x74>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	68d2      	ldr	r2, [r2, #12]
 800c45e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c460:	4b10      	ldr	r3, [pc, #64]	; (800c4a4 <TL_MM_Init+0x74>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a0c      	ldr	r2, [pc, #48]	; (800c498 <TL_MM_Init+0x68>)
 800c466:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c468:	4b0e      	ldr	r3, [pc, #56]	; (800c4a4 <TL_MM_Init+0x74>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	6812      	ldr	r2, [r2, #0]
 800c470:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c472:	4b0c      	ldr	r3, [pc, #48]	; (800c4a4 <TL_MM_Init+0x74>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	6852      	ldr	r2, [r2, #4]
 800c47a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c47c:	4b09      	ldr	r3, [pc, #36]	; (800c4a4 <TL_MM_Init+0x74>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	6912      	ldr	r2, [r2, #16]
 800c484:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c486:	4b07      	ldr	r3, [pc, #28]	; (800c4a4 <TL_MM_Init+0x74>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	6952      	ldr	r2, [r2, #20]
 800c48e:	619a      	str	r2, [r3, #24]

  return;
 800c490:	bf00      	nop
}
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	200300b4 	.word	0x200300b4
 800c49c:	20000338 	.word	0x20000338
 800c4a0:	20030000 	.word	0x20030000
 800c4a4:	20000350 	.word	0x20000350

0800c4a8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c4b0:	6879      	ldr	r1, [r7, #4]
 800c4b2:	4807      	ldr	r0, [pc, #28]	; (800c4d0 <TL_MM_EvtDone+0x28>)
 800c4b4:	f001 fa62 	bl	800d97c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c4b8:	6879      	ldr	r1, [r7, #4]
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	f000 f858 	bl	800c570 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c4c0:	4804      	ldr	r0, [pc, #16]	; (800c4d4 <TL_MM_EvtDone+0x2c>)
 800c4c2:	f006 fc0f 	bl	8012ce4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c4c6:	bf00      	nop
}
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	20000338 	.word	0x20000338
 800c4d4:	0800c4d9 	.word	0x0800c4d9

0800c4d8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c4de:	e00c      	b.n	800c4fa <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c4e0:	1d3b      	adds	r3, r7, #4
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	480a      	ldr	r0, [pc, #40]	; (800c510 <SendFreeBuf+0x38>)
 800c4e6:	f001 fa8c 	bl	800da02 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c4ea:	4b0a      	ldr	r3, [pc, #40]	; (800c514 <SendFreeBuf+0x3c>)
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f001 fa41 	bl	800d97c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c4fa:	4805      	ldr	r0, [pc, #20]	; (800c510 <SendFreeBuf+0x38>)
 800c4fc:	f001 f9fa 	bl	800d8f4 <LST_is_empty>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d0ec      	beq.n	800c4e0 <SendFreeBuf+0x8>
  }

  return;
 800c506:	bf00      	nop
}
 800c508:	3708      	adds	r7, #8
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	20000338 	.word	0x20000338
 800c514:	20030000 	.word	0x20030000

0800c518 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c51c:	4805      	ldr	r0, [pc, #20]	; (800c534 <TL_TRACES_Init+0x1c>)
 800c51e:	f001 f9d9 	bl	800d8d4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c522:	4b05      	ldr	r3, [pc, #20]	; (800c538 <TL_TRACES_Init+0x20>)
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	4a03      	ldr	r2, [pc, #12]	; (800c534 <TL_TRACES_Init+0x1c>)
 800c528:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c52a:	f006 fc11 	bl	8012d50 <HW_IPCC_TRACES_Init>

  return;
 800c52e:	bf00      	nop
}
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	200300bc 	.word	0x200300bc
 800c538:	20030000 	.word	0x20030000

0800c53c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c542:	e008      	b.n	800c556 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c544:	1d3b      	adds	r3, r7, #4
 800c546:	4619      	mov	r1, r3
 800c548:	4808      	ldr	r0, [pc, #32]	; (800c56c <HW_IPCC_TRACES_EvtNot+0x30>)
 800c54a:	f001 fa5a 	bl	800da02 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4618      	mov	r0, r3
 800c552:	f7f4 fc71 	bl	8000e38 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c556:	4805      	ldr	r0, [pc, #20]	; (800c56c <HW_IPCC_TRACES_EvtNot+0x30>)
 800c558:	f001 f9cc 	bl	800d8f4 <LST_is_empty>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d0f0      	beq.n	800c544 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c562:	bf00      	nop
}
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	200300bc 	.word	0x200300bc

0800c570 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c570:	b480      	push	{r7}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	4603      	mov	r3, r0
 800c578:	6039      	str	r1, [r7, #0]
 800c57a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c57c:	79fb      	ldrb	r3, [r7, #7]
 800c57e:	2b06      	cmp	r3, #6
 800c580:	d849      	bhi.n	800c616 <OutputDbgTrace+0xa6>
 800c582:	a201      	add	r2, pc, #4	; (adr r2, 800c588 <OutputDbgTrace+0x18>)
 800c584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c588:	0800c5a5 	.word	0x0800c5a5
 800c58c:	0800c5c7 	.word	0x0800c5c7
 800c590:	0800c5cd 	.word	0x0800c5cd
 800c594:	0800c5e7 	.word	0x0800c5e7
 800c598:	0800c5f3 	.word	0x0800c5f3
 800c59c:	0800c5f9 	.word	0x0800c5f9
 800c5a0:	0800c60b 	.word	0x0800c60b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	7a5b      	ldrb	r3, [r3, #9]
 800c5ac:	2b0f      	cmp	r3, #15
 800c5ae:	d004      	beq.n	800c5ba <OutputDbgTrace+0x4a>
 800c5b0:	2bff      	cmp	r3, #255	; 0xff
 800c5b2:	d004      	beq.n	800c5be <OutputDbgTrace+0x4e>
 800c5b4:	2b0e      	cmp	r3, #14
 800c5b6:	d004      	beq.n	800c5c2 <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c5b8:	e004      	b.n	800c5c4 <OutputDbgTrace+0x54>
          break;
 800c5ba:	bf00      	nop
 800c5bc:	e02c      	b.n	800c618 <OutputDbgTrace+0xa8>
          break;
 800c5be:	bf00      	nop
 800c5c0:	e02a      	b.n	800c618 <OutputDbgTrace+0xa8>
          break;
 800c5c2:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c5c4:	e028      	b.n	800c618 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c5ca:	e025      	b.n	800c618 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	7a5b      	ldrb	r3, [r3, #9]
 800c5d4:	2b0e      	cmp	r3, #14
 800c5d6:	d002      	beq.n	800c5de <OutputDbgTrace+0x6e>
 800c5d8:	2b0f      	cmp	r3, #15
 800c5da:	d002      	beq.n	800c5e2 <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c5dc:	e002      	b.n	800c5e4 <OutputDbgTrace+0x74>
          break;
 800c5de:	bf00      	nop
 800c5e0:	e01a      	b.n	800c618 <OutputDbgTrace+0xa8>
          break;
 800c5e2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c5e4:	e018      	b.n	800c618 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	7a5b      	ldrb	r3, [r3, #9]
 800c5ee:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c5f0:	e012      	b.n	800c618 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c5f6:	e00f      	b.n	800c618 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	7a5b      	ldrb	r3, [r3, #9]
 800c600:	2b0e      	cmp	r3, #14
 800c602:	d000      	beq.n	800c606 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c604:	e000      	b.n	800c608 <OutputDbgTrace+0x98>
          break;
 800c606:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c608:	e006      	b.n	800c618 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	7a5b      	ldrb	r3, [r3, #9]
 800c612:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c614:	e000      	b.n	800c618 <OutputDbgTrace+0xa8>

    default:
      break;
 800c616:	bf00      	nop
  }

  return;
 800c618:	bf00      	nop
}
 800c61a:	3714      	adds	r7, #20
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <otCoapHeaderInit>:
extern otCoapRequestHandler defaultCoapRequestHandlerCb;

#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	460b      	mov	r3, r1
 800c62e:	70fb      	strb	r3, [r7, #3]
 800c630:	4613      	mov	r3, r2
 800c632:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800c634:	f005 ffde 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c638:	f005 ff7a 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c63c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2200      	movs	r2, #0
 800c642:	f062 0260 	orn	r2, r2, #96	; 0x60
 800c646:	701a      	strb	r2, [r3, #0]
 800c648:	2200      	movs	r2, #0
 800c64a:	705a      	strb	r2, [r3, #1]
 800c64c:	2200      	movs	r2, #0
 800c64e:	709a      	strb	r2, [r3, #2]
 800c650:	2200      	movs	r2, #0
 800c652:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2200      	movs	r2, #0
 800c658:	f042 0203 	orr.w	r2, r2, #3
 800c65c:	711a      	strb	r2, [r3, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	715a      	strb	r2, [r3, #5]
 800c662:	2200      	movs	r2, #0
 800c664:	719a      	strb	r2, [r3, #6]
 800c666:	2200      	movs	r2, #0
 800c668:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 800c670:	78fa      	ldrb	r2, [r7, #3]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 800c676:	78ba      	ldrb	r2, [r7, #2]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800c67c:	f005 ff7c 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c680:	f005 ff62 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c684:	60f8      	str	r0, [r7, #12]
}
 800c686:	bf00      	nop
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 800c68e:	b580      	push	{r7, lr}
 800c690:	b086      	sub	sp, #24
 800c692:	af00      	add	r7, sp, #0
 800c694:	60f8      	str	r0, [r7, #12]
 800c696:	60b9      	str	r1, [r7, #8]
 800c698:	4613      	mov	r3, r2
 800c69a:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 800c69c:	f005 ffaa 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c6a0:	f005 ff46 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c6a4:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f062 025f 	orn	r2, r2, #95	; 0x5f
 800c6ae:	701a      	strb	r2, [r3, #0]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	705a      	strb	r2, [r3, #1]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	709a      	strb	r2, [r3, #2]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f042 0203 	orr.w	r2, r2, #3
 800c6c4:	711a      	strb	r2, [r3, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	715a      	strb	r2, [r3, #5]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	719a      	strb	r2, [r3, #6]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 800c6d8:	68ba      	ldr	r2, [r7, #8]
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 800c6de:	79fa      	ldrb	r2, [r7, #7]
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800c6e4:	f005 ff48 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c6e8:	f005 ff2e 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c6ec:	6178      	str	r0, [r7, #20]
}
 800c6ee:	bf00      	nop
 800c6f0:	3718      	adds	r7, #24
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b084      	sub	sp, #16
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
 800c6fe:	460b      	mov	r3, r1
 800c700:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800c702:	f005 ff77 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c706:	f005 ff13 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c70a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2200      	movs	r2, #0
 800c710:	f062 025e 	orn	r2, r2, #94	; 0x5e
 800c714:	701a      	strb	r2, [r3, #0]
 800c716:	2200      	movs	r2, #0
 800c718:	705a      	strb	r2, [r3, #1]
 800c71a:	2200      	movs	r2, #0
 800c71c:	709a      	strb	r2, [r3, #2]
 800c71e:	2200      	movs	r2, #0
 800c720:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2200      	movs	r2, #0
 800c726:	f042 0202 	orr.w	r2, r2, #2
 800c72a:	711a      	strb	r2, [r3, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	715a      	strb	r2, [r3, #5]
 800c730:	2200      	movs	r2, #0
 800c732:	719a      	strb	r2, [r3, #6]
 800c734:	2200      	movs	r2, #0
 800c736:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800c73e:	78fa      	ldrb	r2, [r7, #3]
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c744:	f005 ff18 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c748:	f005 fefe 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c74c:	60f8      	str	r0, [r7, #12]
}
 800c74e:	bf00      	nop
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b084      	sub	sp, #16
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	460b      	mov	r3, r1
 800c760:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800c762:	f005 ff47 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c766:	f005 fee3 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c76a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2200      	movs	r2, #0
 800c770:	f062 025d 	orn	r2, r2, #93	; 0x5d
 800c774:	701a      	strb	r2, [r3, #0]
 800c776:	2200      	movs	r2, #0
 800c778:	705a      	strb	r2, [r3, #1]
 800c77a:	2200      	movs	r2, #0
 800c77c:	709a      	strb	r2, [r3, #2]
 800c77e:	2200      	movs	r2, #0
 800c780:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2200      	movs	r2, #0
 800c786:	f042 0202 	orr.w	r2, r2, #2
 800c78a:	711a      	strb	r2, [r3, #4]
 800c78c:	2200      	movs	r2, #0
 800c78e:	715a      	strb	r2, [r3, #5]
 800c790:	2200      	movs	r2, #0
 800c792:	719a      	strb	r2, [r3, #6]
 800c794:	2200      	movs	r2, #0
 800c796:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 800c79e:	78fa      	ldrb	r2, [r7, #3]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c7a4:	f005 fee8 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c7a8:	f005 fece 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c7ac:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	b2db      	uxtb	r3, r3
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800c7c6:	f005 ff15 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c7ca:	f005 feb1 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c7ce:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f062 0250 	orn	r2, r2, #80	; 0x50
 800c7d8:	701a      	strb	r2, [r3, #0]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	705a      	strb	r2, [r3, #1]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	709a      	strb	r2, [r3, #2]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f042 0202 	orr.w	r2, r2, #2
 800c7ee:	711a      	strb	r2, [r3, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	715a      	strb	r2, [r3, #5]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	719a      	strb	r2, [r3, #6]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 800c802:	683a      	ldr	r2, [r7, #0]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c808:	f005 feb6 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c80c:	f005 fe9c 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c810:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	b2db      	uxtb	r3, r3
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3710      	adds	r7, #16
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c828:	f005 fee4 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c82c:	f005 fe80 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c830:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2200      	movs	r2, #0
 800c836:	f062 024d 	orn	r2, r2, #77	; 0x4d
 800c83a:	701a      	strb	r2, [r3, #0]
 800c83c:	2200      	movs	r2, #0
 800c83e:	705a      	strb	r2, [r3, #1]
 800c840:	2200      	movs	r2, #0
 800c842:	709a      	strb	r2, [r3, #2]
 800c844:	2200      	movs	r2, #0
 800c846:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f042 0201 	orr.w	r2, r2, #1
 800c850:	711a      	strb	r2, [r3, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	715a      	strb	r2, [r3, #5]
 800c856:	2200      	movs	r2, #0
 800c858:	719a      	strb	r2, [r3, #6]
 800c85a:	2200      	movs	r2, #0
 800c85c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c864:	f005 fe88 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c868:	f005 fe6e 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c86c:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	b2db      	uxtb	r3, r3
}
 800c874:	4618      	mov	r0, r3
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	460b      	mov	r3, r1
 800c886:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800c888:	f005 feb4 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c88c:	f005 fe50 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c890:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2200      	movs	r2, #0
 800c896:	f062 0256 	orn	r2, r2, #86	; 0x56
 800c89a:	701a      	strb	r2, [r3, #0]
 800c89c:	2200      	movs	r2, #0
 800c89e:	705a      	strb	r2, [r3, #1]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	709a      	strb	r2, [r3, #2]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f042 0202 	orr.w	r2, r2, #2
 800c8b0:	711a      	strb	r2, [r3, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	715a      	strb	r2, [r3, #5]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	719a      	strb	r2, [r3, #6]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 800c8c4:	887a      	ldrh	r2, [r7, #2]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c8ca:	f005 fe55 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c8ce:	f005 fe3b 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c8d2:	60f8      	str	r0, [r7, #12]
}
 800c8d4:	bf00      	nop
 800c8d6:	3710      	adds	r7, #16
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c8e4:	f005 fe86 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c8e8:	f005 fe22 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c8ec:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f062 0261 	orn	r2, r2, #97	; 0x61
 800c8f6:	701a      	strb	r2, [r3, #0]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	705a      	strb	r2, [r3, #1]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	709a      	strb	r2, [r3, #2]
 800c900:	2200      	movs	r2, #0
 800c902:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2200      	movs	r2, #0
 800c908:	f042 0201 	orr.w	r2, r2, #1
 800c90c:	711a      	strb	r2, [r3, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	715a      	strb	r2, [r3, #5]
 800c912:	2200      	movs	r2, #0
 800c914:	719a      	strb	r2, [r3, #6]
 800c916:	2200      	movs	r2, #0
 800c918:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c920:	f005 fe2a 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c924:	f005 fe10 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c928:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	689b      	ldr	r3, [r3, #8]
 800c92e:	b2db      	uxtb	r3, r3
}
 800c930:	4618      	mov	r0, r3
 800c932:	3710      	adds	r7, #16
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c940:	f005 fe58 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c944:	f005 fdf4 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c948:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2200      	movs	r2, #0
 800c94e:	f062 024c 	orn	r2, r2, #76	; 0x4c
 800c952:	701a      	strb	r2, [r3, #0]
 800c954:	2200      	movs	r2, #0
 800c956:	705a      	strb	r2, [r3, #1]
 800c958:	2200      	movs	r2, #0
 800c95a:	709a      	strb	r2, [r3, #2]
 800c95c:	2200      	movs	r2, #0
 800c95e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2200      	movs	r2, #0
 800c964:	f042 0201 	orr.w	r2, r2, #1
 800c968:	711a      	strb	r2, [r3, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	715a      	strb	r2, [r3, #5]
 800c96e:	2200      	movs	r2, #0
 800c970:	719a      	strb	r2, [r3, #6]
 800c972:	2200      	movs	r2, #0
 800c974:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c97c:	f005 fdfc 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c980:	f005 fde2 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c984:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	b2db      	uxtb	r3, r3
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3710      	adds	r7, #16
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c99c:	f005 fe2a 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c9a0:	f005 fdc6 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c9a4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f062 0255 	orn	r2, r2, #85	; 0x55
 800c9ae:	701a      	strb	r2, [r3, #0]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	705a      	strb	r2, [r3, #1]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	709a      	strb	r2, [r3, #2]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f042 0201 	orr.w	r2, r2, #1
 800c9c4:	711a      	strb	r2, [r3, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	715a      	strb	r2, [r3, #5]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	719a      	strb	r2, [r3, #6]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c9d8:	f005 fdce 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c9dc:	f005 fdb4 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c9e0:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	689b      	ldr	r3, [r3, #8]
 800c9e6:	b29b      	uxth	r3, r3
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c9f8:	f005 fdfc 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c9fc:	f005 fd98 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800ca00:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2200      	movs	r2, #0
 800ca06:	f062 0254 	orn	r2, r2, #84	; 0x54
 800ca0a:	701a      	strb	r2, [r3, #0]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	705a      	strb	r2, [r3, #1]
 800ca10:	2200      	movs	r2, #0
 800ca12:	709a      	strb	r2, [r3, #2]
 800ca14:	2200      	movs	r2, #0
 800ca16:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f042 0201 	orr.w	r2, r2, #1
 800ca20:	711a      	strb	r2, [r3, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	715a      	strb	r2, [r3, #5]
 800ca26:	2200      	movs	r2, #0
 800ca28:	719a      	strb	r2, [r3, #6]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ca34:	f005 fda0 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ca38:	f005 fd86 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ca3c:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	689b      	ldr	r3, [r3, #8]
 800ca42:	b2db      	uxtb	r3, r3
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3710      	adds	r7, #16
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ca54:	f005 fdce 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ca58:	f005 fd6a 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800ca5c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f062 0253 	orn	r2, r2, #83	; 0x53
 800ca66:	701a      	strb	r2, [r3, #0]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	705a      	strb	r2, [r3, #1]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	709a      	strb	r2, [r3, #2]
 800ca70:	2200      	movs	r2, #0
 800ca72:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2200      	movs	r2, #0
 800ca78:	f042 0201 	orr.w	r2, r2, #1
 800ca7c:	711a      	strb	r2, [r3, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	715a      	strb	r2, [r3, #5]
 800ca82:	2200      	movs	r2, #0
 800ca84:	719a      	strb	r2, [r3, #6]
 800ca86:	2200      	movs	r2, #0
 800ca88:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ca90:	f005 fd72 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ca94:	f005 fd58 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ca98:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	689b      	ldr	r3, [r3, #8]
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b084      	sub	sp, #16
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
 800caae:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800cab0:	f005 fda0 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cab4:	f005 fd3c 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cab8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2200      	movs	r2, #0
 800cabe:	f062 0259 	orn	r2, r2, #89	; 0x59
 800cac2:	701a      	strb	r2, [r3, #0]
 800cac4:	2200      	movs	r2, #0
 800cac6:	705a      	strb	r2, [r3, #1]
 800cac8:	2200      	movs	r2, #0
 800caca:	709a      	strb	r2, [r3, #2]
 800cacc:	2200      	movs	r2, #0
 800cace:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2200      	movs	r2, #0
 800cad4:	f042 0201 	orr.w	r2, r2, #1
 800cad8:	711a      	strb	r2, [r3, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	715a      	strb	r2, [r3, #5]
 800cade:	2200      	movs	r2, #0
 800cae0:	719a      	strb	r2, [r3, #6]
 800cae2:	2200      	movs	r2, #0
 800cae4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800cae6:	683a      	ldr	r2, [r7, #0]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800caec:	f005 fd44 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800caf0:	f005 fd2a 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800caf4:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	689b      	ldr	r3, [r3, #8]

}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b086      	sub	sp, #24
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	60f8      	str	r0, [r7, #12]
 800cb0a:	60b9      	str	r1, [r7, #8]
 800cb0c:	607a      	str	r2, [r7, #4]
 800cb0e:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 800cb10:	f005 fd70 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cb14:	f005 fd0c 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cb18:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f062 0258 	orn	r2, r2, #88	; 0x58
 800cb22:	701a      	strb	r2, [r3, #0]
 800cb24:	2200      	movs	r2, #0
 800cb26:	705a      	strb	r2, [r3, #1]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	709a      	strb	r2, [r3, #2]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f042 0203 	orr.w	r2, r2, #3
 800cb38:	711a      	strb	r2, [r3, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	715a      	strb	r2, [r3, #5]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	719a      	strb	r2, [r3, #6]
 800cb42:	2200      	movs	r2, #0
 800cb44:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800cb46:	68ba      	ldr	r2, [r7, #8]
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 800cb52:	683a      	ldr	r2, [r7, #0]
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 800cb58:	6a3a      	ldr	r2, [r7, #32]
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800cb5e:	f005 fd0b 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cb62:	f005 fcf1 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cb66:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	b2db      	uxtb	r3, r3
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3718      	adds	r7, #24
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b084      	sub	sp, #16
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	460b      	mov	r3, r1
 800cb80:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800cb82:	f005 fd37 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cb86:	f005 fcd3 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cb8a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f062 024b 	orn	r2, r2, #75	; 0x4b
 800cb94:	701a      	strb	r2, [r3, #0]
 800cb96:	2200      	movs	r2, #0
 800cb98:	705a      	strb	r2, [r3, #1]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	709a      	strb	r2, [r3, #2]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2200      	movs	r2, #0
 800cba6:	f042 0201 	orr.w	r2, r2, #1
 800cbaa:	711a      	strb	r2, [r3, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	715a      	strb	r2, [r3, #5]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	719a      	strb	r2, [r3, #6]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 800cbb8:	887a      	ldrh	r2, [r7, #2]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cbbe:	f005 fcdb 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cbc2:	f005 fcc1 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cbc6:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	b2db      	uxtb	r3, r3
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3710      	adds	r7, #16
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b084      	sub	sp, #16
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
 800cbde:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800cbe0:	f005 fd08 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cbe4:	f005 fca4 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cbe8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f062 0249 	orn	r2, r2, #73	; 0x49
 800cbf2:	701a      	strb	r2, [r3, #0]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	705a      	strb	r2, [r3, #1]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	709a      	strb	r2, [r3, #2]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2200      	movs	r2, #0
 800cc04:	f042 0201 	orr.w	r2, r2, #1
 800cc08:	711a      	strb	r2, [r3, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	715a      	strb	r2, [r3, #5]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	719a      	strb	r2, [r3, #6]
 800cc12:	2200      	movs	r2, #0
 800cc14:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 800cc16:	683a      	ldr	r2, [r7, #0]
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cc1c:	f005 fcac 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cc20:	f005 fc92 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cc24:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	689b      	ldr	r3, [r3, #8]
 800cc2a:	b2db      	uxtb	r3, r3
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3710      	adds	r7, #16
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b086      	sub	sp, #24
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800cc40:	f005 fcd8 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cc44:	f005 fc74 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cc48:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f062 0257 	orn	r2, r2, #87	; 0x57
 800cc52:	701a      	strb	r2, [r3, #0]
 800cc54:	2200      	movs	r2, #0
 800cc56:	705a      	strb	r2, [r3, #1]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	709a      	strb	r2, [r3, #2]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f042 0202 	orr.w	r2, r2, #2
 800cc68:	711a      	strb	r2, [r3, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	715a      	strb	r2, [r3, #5]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	719a      	strb	r2, [r3, #6]
 800cc72:	2200      	movs	r2, #0
 800cc74:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800cc76:	68ba      	ldr	r2, [r7, #8]
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800cc82:	f005 fc79 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cc86:	f005 fc5f 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cc8a:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	b2db      	uxtb	r3, r3
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3718      	adds	r7, #24
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b082      	sub	sp, #8
 800cc9e:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 800cca0:	f005 fca8 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cca4:	f005 fc44 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cca8:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2200      	movs	r2, #0
 800ccae:	f062 026b 	orn	r2, r2, #107	; 0x6b
 800ccb2:	701a      	strb	r2, [r3, #0]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	705a      	strb	r2, [r3, #1]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	709a      	strb	r2, [r3, #2]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	711a      	strb	r2, [r3, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	715a      	strb	r2, [r3, #5]
 800ccca:	2200      	movs	r2, #0
 800cccc:	719a      	strb	r2, [r3, #6]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800ccd2:	f005 fc51 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ccd6:	f005 fc37 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ccda:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	689b      	ldr	r3, [r3, #8]
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ccf0:	f005 fc80 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ccf4:	f005 fc1c 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800ccf8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f062 0269 	orn	r2, r2, #105	; 0x69
 800cd02:	701a      	strb	r2, [r3, #0]
 800cd04:	2200      	movs	r2, #0
 800cd06:	705a      	strb	r2, [r3, #1]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	709a      	strb	r2, [r3, #2]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2200      	movs	r2, #0
 800cd14:	711a      	strb	r2, [r3, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	715a      	strb	r2, [r3, #5]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	719a      	strb	r2, [r3, #6]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800cd22:	f005 fc29 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cd26:	f005 fc0f 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cd2a:	60f8      	str	r0, [r7, #12]
}
 800cd2c:	bf00      	nop
 800cd2e:	3710      	adds	r7, #16
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b086      	sub	sp, #24
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800cd40:	f005 fc58 	bl	80125f4 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 800cd44:	4a15      	ldr	r2, [pc, #84]	; (800cd9c <otSetStateChangedCallback+0x68>)
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cd4a:	f005 fbf1 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cd4e:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	2200      	movs	r2, #0
 800cd54:	f062 0268 	orn	r2, r2, #104	; 0x68
 800cd58:	701a      	strb	r2, [r3, #0]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	705a      	strb	r2, [r3, #1]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	709a      	strb	r2, [r3, #2]
 800cd62:	2200      	movs	r2, #0
 800cd64:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f042 0201 	orr.w	r2, r2, #1
 800cd6e:	711a      	strb	r2, [r3, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	715a      	strb	r2, [r3, #5]
 800cd74:	2200      	movs	r2, #0
 800cd76:	719a      	strb	r2, [r3, #6]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cd82:	f005 fbf9 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cd86:	f005 fbdf 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cd8a:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	689b      	ldr	r3, [r3, #8]
 800cd90:	b2db      	uxtb	r3, r3
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3718      	adds	r7, #24
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	20000354 	.word	0x20000354

0800cda0 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800cda8:	f005 fc24 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cdac:	f005 fbc0 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cdb0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f062 0264 	orn	r2, r2, #100	; 0x64
 800cdba:	701a      	strb	r2, [r3, #0]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	705a      	strb	r2, [r3, #1]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	709a      	strb	r2, [r3, #2]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	711a      	strb	r2, [r3, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	715a      	strb	r2, [r3, #5]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	719a      	strb	r2, [r3, #6]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800cdda:	f005 fbcd 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cdde:	f005 fbb3 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cde2:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	689b      	ldr	r3, [r3, #8]
 800cde8:	b2db      	uxtb	r3, r3
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b084      	sub	sp, #16
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800cdfe:	f005 fbf9 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ce02:	f005 fb95 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800ce06:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800ce10:	701a      	strb	r2, [r3, #0]
 800ce12:	2200      	movs	r2, #0
 800ce14:	705a      	strb	r2, [r3, #1]
 800ce16:	2200      	movs	r2, #0
 800ce18:	709a      	strb	r2, [r3, #2]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2200      	movs	r2, #0
 800ce22:	f042 0201 	orr.w	r2, r2, #1
 800ce26:	711a      	strb	r2, [r3, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	715a      	strb	r2, [r3, #5]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	719a      	strb	r2, [r3, #6]
 800ce30:	2200      	movs	r2, #0
 800ce32:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800ce34:	78fa      	ldrb	r2, [r7, #3]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800ce3a:	f005 fb9d 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ce3e:	f005 fb83 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ce42:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	b2db      	uxtb	r3, r3
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b084      	sub	sp, #16
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800ce5a:	f005 fbcb 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ce5e:	f005 fb67 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800ce62:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800ce6c:	701a      	strb	r2, [r3, #0]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	705a      	strb	r2, [r3, #1]
 800ce72:	2200      	movs	r2, #0
 800ce74:	709a      	strb	r2, [r3, #2]
 800ce76:	2200      	movs	r2, #0
 800ce78:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	711a      	strb	r2, [r3, #4]
 800ce80:	2200      	movs	r2, #0
 800ce82:	715a      	strb	r2, [r3, #5]
 800ce84:	2200      	movs	r2, #0
 800ce86:	719a      	strb	r2, [r3, #6]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800ce8c:	f005 fb74 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ce90:	f005 fb5a 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ce94:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	689b      	ldr	r3, [r3, #8]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	bf14      	ite	ne
 800ce9e:	2301      	movne	r3, #1
 800cea0:	2300      	moveq	r3, #0
 800cea2:	b2db      	uxtb	r3, r3
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800ceb4:	f005 fb9e 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ceb8:	f005 fb3a 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cebc:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2200      	movs	r2, #0
 800cec2:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 800cec6:	701a      	strb	r2, [r3, #0]
 800cec8:	2200      	movs	r2, #0
 800ceca:	705a      	strb	r2, [r3, #1]
 800cecc:	2200      	movs	r2, #0
 800cece:	709a      	strb	r2, [r3, #2]
 800ced0:	2200      	movs	r2, #0
 800ced2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2200      	movs	r2, #0
 800ced8:	711a      	strb	r2, [r3, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	715a      	strb	r2, [r3, #5]
 800cede:	2200      	movs	r2, #0
 800cee0:	719a      	strb	r2, [r3, #6]
 800cee2:	2200      	movs	r2, #0
 800cee4:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800cee6:	f005 fb47 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ceea:	f005 fb2d 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ceee:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	689b      	ldr	r3, [r3, #8]
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <otIp6GetMulticastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otNetifMulticastAddress *otIp6GetMulticastAddresses(otInstance *aInstance)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800cf04:	f005 fb76 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cf08:	f005 fb12 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cf0c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_MULTICAST_ADDRESSES;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
 800cf16:	701a      	strb	r2, [r3, #0]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	705a      	strb	r2, [r3, #1]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	709a      	strb	r2, [r3, #2]
 800cf20:	2200      	movs	r2, #0
 800cf22:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2200      	movs	r2, #0
 800cf28:	711a      	strb	r2, [r3, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	715a      	strb	r2, [r3, #5]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	719a      	strb	r2, [r3, #6]
 800cf32:	2200      	movs	r2, #0
 800cf34:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800cf36:	f005 fb1f 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cf3a:	f005 fb05 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cf3e:	60f8      	str	r0, [r7, #12]
  return (otNetifMulticastAddress *)p_ot_req->Data[0];
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	689b      	ldr	r3, [r3, #8]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3710      	adds	r7, #16
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800cf56:	f005 fb4d 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cf5a:	f005 fae9 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cf5e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2200      	movs	r2, #0
 800cf64:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800cf68:	701a      	strb	r2, [r3, #0]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	705a      	strb	r2, [r3, #1]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	709a      	strb	r2, [r3, #2]
 800cf72:	2200      	movs	r2, #0
 800cf74:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f042 0202 	orr.w	r2, r2, #2
 800cf7e:	711a      	strb	r2, [r3, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	715a      	strb	r2, [r3, #5]
 800cf84:	2200      	movs	r2, #0
 800cf86:	719a      	strb	r2, [r3, #6]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 800cf92:	683a      	ldr	r2, [r7, #0]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800cf98:	f005 faee 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cf9c:	f005 fad4 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cfa0:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	b2db      	uxtb	r3, r3
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	460b      	mov	r3, r1
 800cfba:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800cfbc:	f005 fb1a 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cfc0:	f005 fab6 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cfc4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f042 0208 	orr.w	r2, r2, #8
 800cfce:	701a      	strb	r2, [r3, #0]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	705a      	strb	r2, [r3, #1]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	709a      	strb	r2, [r3, #2]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f042 0201 	orr.w	r2, r2, #1
 800cfe4:	711a      	strb	r2, [r3, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	715a      	strb	r2, [r3, #5]
 800cfea:	2200      	movs	r2, #0
 800cfec:	719a      	strb	r2, [r3, #6]
 800cfee:	2200      	movs	r2, #0
 800cff0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800cff2:	78fa      	ldrb	r2, [r7, #3]
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800cff8:	f005 fabe 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cffc:	f005 faa4 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d000:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	689b      	ldr	r3, [r3, #8]
 800d006:	b2db      	uxtb	r3, r3
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3710      	adds	r7, #16
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	460b      	mov	r3, r1
 800d01a:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800d01c:	f005 faea 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d020:	f005 fa86 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d024:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2200      	movs	r2, #0
 800d02a:	f042 020f 	orr.w	r2, r2, #15
 800d02e:	701a      	strb	r2, [r3, #0]
 800d030:	2200      	movs	r2, #0
 800d032:	705a      	strb	r2, [r3, #1]
 800d034:	2200      	movs	r2, #0
 800d036:	709a      	strb	r2, [r3, #2]
 800d038:	2200      	movs	r2, #0
 800d03a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2200      	movs	r2, #0
 800d040:	f042 0201 	orr.w	r2, r2, #1
 800d044:	711a      	strb	r2, [r3, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	715a      	strb	r2, [r3, #5]
 800d04a:	2200      	movs	r2, #0
 800d04c:	719a      	strb	r2, [r3, #6]
 800d04e:	2200      	movs	r2, #0
 800d050:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800d052:	887a      	ldrh	r2, [r7, #2]
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d058:	f005 fa8e 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d05c:	f005 fa74 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d060:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	b2db      	uxtb	r3, r3
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800d078:	f005 fabc 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d07c:	f005 fa58 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d080:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2200      	movs	r2, #0
 800d086:	f062 0246 	orn	r2, r2, #70	; 0x46
 800d08a:	701a      	strb	r2, [r3, #0]
 800d08c:	2200      	movs	r2, #0
 800d08e:	705a      	strb	r2, [r3, #1]
 800d090:	2200      	movs	r2, #0
 800d092:	709a      	strb	r2, [r3, #2]
 800d094:	2200      	movs	r2, #0
 800d096:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2200      	movs	r2, #0
 800d09c:	f042 0201 	orr.w	r2, r2, #1
 800d0a0:	711a      	strb	r2, [r3, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	715a      	strb	r2, [r3, #5]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	719a      	strb	r2, [r3, #6]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800d0b4:	f005 fa60 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d0b8:	f005 fa46 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d0bc:	60f8      	str	r0, [r7, #12]
}
 800d0be:	bf00      	nop
 800d0c0:	3710      	adds	r7, #16
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b084      	sub	sp, #16
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800d0ce:	f005 fa91 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d0d2:	f005 fa2d 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d0d6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f062 0243 	orn	r2, r2, #67	; 0x43
 800d0e0:	701a      	strb	r2, [r3, #0]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	705a      	strb	r2, [r3, #1]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	709a      	strb	r2, [r3, #2]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f042 0201 	orr.w	r2, r2, #1
 800d0f6:	711a      	strb	r2, [r3, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	715a      	strb	r2, [r3, #5]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	719a      	strb	r2, [r3, #6]
 800d100:	2200      	movs	r2, #0
 800d102:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800d10a:	f005 fa35 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d10e:	f005 fa1b 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d112:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	689b      	ldr	r3, [r3, #8]
 800d118:	b29b      	uxth	r3, r3
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b086      	sub	sp, #24
 800d126:	af00      	add	r7, sp, #0
 800d128:	60f8      	str	r0, [r7, #12]
 800d12a:	60b9      	str	r1, [r7, #8]
 800d12c:	4613      	mov	r3, r2
 800d12e:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 800d130:	f005 fa60 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d134:	f005 f9fc 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d138:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	2200      	movs	r2, #0
 800d13e:	f062 023e 	orn	r2, r2, #62	; 0x3e
 800d142:	701a      	strb	r2, [r3, #0]
 800d144:	2200      	movs	r2, #0
 800d146:	705a      	strb	r2, [r3, #1]
 800d148:	2200      	movs	r2, #0
 800d14a:	709a      	strb	r2, [r3, #2]
 800d14c:	2200      	movs	r2, #0
 800d14e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	2200      	movs	r2, #0
 800d154:	f042 0203 	orr.w	r2, r2, #3
 800d158:	711a      	strb	r2, [r3, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	715a      	strb	r2, [r3, #5]
 800d15e:	2200      	movs	r2, #0
 800d160:	719a      	strb	r2, [r3, #6]
 800d162:	2200      	movs	r2, #0
 800d164:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d166:	68fa      	ldr	r2, [r7, #12]
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 800d16c:	68ba      	ldr	r2, [r7, #8]
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 800d172:	88fa      	ldrh	r2, [r7, #6]
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800d178:	f005 f9fe 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d17c:	f005 f9e4 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d180:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	b2db      	uxtb	r3, r3
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3718      	adds	r7, #24
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b086      	sub	sp, #24
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	607a      	str	r2, [r7, #4]
 800d19a:	461a      	mov	r2, r3
 800d19c:	460b      	mov	r3, r1
 800d19e:	817b      	strh	r3, [r7, #10]
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 800d1a4:	f005 fa26 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d1a8:	f005 f9c2 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d1ac:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f062 023d 	orn	r2, r2, #61	; 0x3d
 800d1b6:	701a      	strb	r2, [r3, #0]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	705a      	strb	r2, [r3, #1]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	709a      	strb	r2, [r3, #2]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f042 0204 	orr.w	r2, r2, #4
 800d1cc:	711a      	strb	r2, [r3, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	715a      	strb	r2, [r3, #5]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	719a      	strb	r2, [r3, #6]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 800d1e0:	897a      	ldrh	r2, [r7, #10]
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 800d1ec:	893a      	ldrh	r2, [r7, #8]
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800d1f2:	f005 f9c1 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d1f6:	f005 f9a7 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d1fa:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	689b      	ldr	r3, [r3, #8]
}
 800d200:	4618      	mov	r0, r3
 800d202:	3718      	adds	r7, #24
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800d208:	b5b0      	push	{r4, r5, r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800d20e:	2300      	movs	r3, #0
 800d210:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800d212:	f005 f9a5 	bl	8012560 <THREAD_Get_NotificationPayloadBuffer>
 800d216:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	3b01      	subs	r3, #1
 800d21e:	2b17      	cmp	r3, #23
 800d220:	f200 81c3 	bhi.w	800d5aa <OpenThread_CallBack_Processing+0x3a2>
 800d224:	a201      	add	r2, pc, #4	; (adr r2, 800d22c <OpenThread_CallBack_Processing+0x24>)
 800d226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d22a:	bf00      	nop
 800d22c:	0800d28d 	.word	0x0800d28d
 800d230:	0800d2a9 	.word	0x0800d2a9
 800d234:	0800d30d 	.word	0x0800d30d
 800d238:	0800d355 	.word	0x0800d355
 800d23c:	0800d361 	.word	0x0800d361
 800d240:	0800d37f 	.word	0x0800d37f
 800d244:	0800d39d 	.word	0x0800d39d
 800d248:	0800d3bb 	.word	0x0800d3bb
 800d24c:	0800d3d9 	.word	0x0800d3d9
 800d250:	0800d3f7 	.word	0x0800d3f7
 800d254:	0800d419 	.word	0x0800d419
 800d258:	0800d437 	.word	0x0800d437
 800d25c:	0800d5ab 	.word	0x0800d5ab
 800d260:	0800d45d 	.word	0x0800d45d
 800d264:	0800d491 	.word	0x0800d491
 800d268:	0800d4b9 	.word	0x0800d4b9
 800d26c:	0800d4d7 	.word	0x0800d4d7
 800d270:	0800d545 	.word	0x0800d545
 800d274:	0800d56d 	.word	0x0800d56d
 800d278:	0800d5ab 	.word	0x0800d5ab
 800d27c:	0800d58b 	.word	0x0800d58b
 800d280:	0800d5ab 	.word	0x0800d5ab
 800d284:	0800d5ab 	.word	0x0800d5ab
 800d288:	0800d2e5 	.word	0x0800d2e5
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 800d28c:	4b9b      	ldr	r3, [pc, #620]	; (800d4fc <OpenThread_CallBack_Processing+0x2f4>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	f000 818d 	beq.w	800d5b0 <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800d296:	4b99      	ldr	r3, [pc, #612]	; (800d4fc <OpenThread_CallBack_Processing+0x2f4>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	683a      	ldr	r2, [r7, #0]
 800d29c:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 800d29e:	683a      	ldr	r2, [r7, #0]
 800d2a0:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800d2a2:	4611      	mov	r1, r2
 800d2a4:	4798      	blx	r3
        }
        break;
 800d2a6:	e183      	b.n	800d5b0 <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	4b94      	ldr	r3, [pc, #592]	; (800d500 <OpenThread_CallBack_Processing+0x2f8>)
 800d2b0:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 800d2b2:	4b93      	ldr	r3, [pc, #588]	; (800d500 <OpenThread_CallBack_Processing+0x2f8>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	4a92      	ldr	r2, [pc, #584]	; (800d504 <OpenThread_CallBack_Processing+0x2fc>)
 800d2ba:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 800d2bc:	4b91      	ldr	r3, [pc, #580]	; (800d504 <OpenThread_CallBack_Processing+0x2fc>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f000 8177 	beq.w	800d5b4 <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d2c6:	4b8f      	ldr	r3, [pc, #572]	; (800d504 <OpenThread_CallBack_Processing+0x2fc>)
 800d2c8:	681c      	ldr	r4, [r3, #0]
 800d2ca:	4b8d      	ldr	r3, [pc, #564]	; (800d500 <OpenThread_CallBack_Processing+0x2f8>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d2d4:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d2da:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d2e0:	47a0      	blx	r4
        }
        break;
 800d2e2:	e167      	b.n	800d5b4 <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 800d2e4:	4b88      	ldr	r3, [pc, #544]	; (800d508 <OpenThread_CallBack_Processing+0x300>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f000 8165 	beq.w	800d5b8 <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d2ee:	4b86      	ldr	r3, [pc, #536]	; (800d508 <OpenThread_CallBack_Processing+0x300>)
 800d2f0:	681c      	ldr	r4, [r3, #0]
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	689b      	ldr	r3, [r3, #8]
 800d2f6:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d2fc:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d302:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d308:	47a0      	blx	r4
        }
        break;
 800d30a:	e155      	b.n	800d5b8 <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	461a      	mov	r2, r3
 800d312:	4b7e      	ldr	r3, [pc, #504]	; (800d50c <OpenThread_CallBack_Processing+0x304>)
 800d314:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800d316:	4b7d      	ldr	r3, [pc, #500]	; (800d50c <OpenThread_CallBack_Processing+0x304>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	4a7c      	ldr	r2, [pc, #496]	; (800d510 <OpenThread_CallBack_Processing+0x308>)
 800d31e:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 800d320:	4b7b      	ldr	r3, [pc, #492]	; (800d510 <OpenThread_CallBack_Processing+0x308>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	f000 8149 	beq.w	800d5bc <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d32a:	4b79      	ldr	r3, [pc, #484]	; (800d510 <OpenThread_CallBack_Processing+0x308>)
 800d32c:	681c      	ldr	r4, [r3, #0]
 800d32e:	4b77      	ldr	r3, [pc, #476]	; (800d50c <OpenThread_CallBack_Processing+0x304>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d338:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d33e:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d344:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	9300      	str	r3, [sp, #0]
 800d34e:	462b      	mov	r3, r5
 800d350:	47a0      	blx	r4
        }
        break;
 800d352:	e133      	b.n	800d5bc <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 800d354:	2001      	movs	r0, #1
 800d356:	f7fe fd00 	bl	800bd5a <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800d35a:	f7f7 f978 	bl	800464e <HAL_NVIC_SystemReset>
        break;
 800d35e:	e14c      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 800d360:	4b6c      	ldr	r3, [pc, #432]	; (800d514 <OpenThread_CallBack_Processing+0x30c>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	f000 812b 	beq.w	800d5c0 <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800d36a:	4b6a      	ldr	r3, [pc, #424]	; (800d514 <OpenThread_CallBack_Processing+0x30c>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	683a      	ldr	r2, [r7, #0]
 800d370:	6892      	ldr	r2, [r2, #8]
 800d372:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d374:	683a      	ldr	r2, [r7, #0]
 800d376:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800d378:	4611      	mov	r1, r2
 800d37a:	4798      	blx	r3
        }
        break;
 800d37c:	e120      	b.n	800d5c0 <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 800d37e:	4b66      	ldr	r3, [pc, #408]	; (800d518 <OpenThread_CallBack_Processing+0x310>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	f000 811e 	beq.w	800d5c4 <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800d388:	4b63      	ldr	r3, [pc, #396]	; (800d518 <OpenThread_CallBack_Processing+0x310>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	683a      	ldr	r2, [r7, #0]
 800d38e:	6892      	ldr	r2, [r2, #8]
 800d390:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 800d392:	683a      	ldr	r2, [r7, #0]
 800d394:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800d396:	2000      	movs	r0, #0
 800d398:	4798      	blx	r3
        }
        break;
 800d39a:	e113      	b.n	800d5c4 <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 800d39c:	4b5f      	ldr	r3, [pc, #380]	; (800d51c <OpenThread_CallBack_Processing+0x314>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	f000 8111 	beq.w	800d5c8 <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800d3a6:	4b5d      	ldr	r3, [pc, #372]	; (800d51c <OpenThread_CallBack_Processing+0x314>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	683a      	ldr	r2, [r7, #0]
 800d3ac:	6892      	ldr	r2, [r2, #8]
 800d3ae:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d3b0:	683a      	ldr	r2, [r7, #0]
 800d3b2:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800d3b4:	4611      	mov	r1, r2
 800d3b6:	4798      	blx	r3
        }
        break;
 800d3b8:	e106      	b.n	800d5c8 <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 800d3ba:	4b59      	ldr	r3, [pc, #356]	; (800d520 <OpenThread_CallBack_Processing+0x318>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	f000 8104 	beq.w	800d5cc <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800d3c4:	4b56      	ldr	r3, [pc, #344]	; (800d520 <OpenThread_CallBack_Processing+0x318>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	683a      	ldr	r2, [r7, #0]
 800d3ca:	6892      	ldr	r2, [r2, #8]
 800d3cc:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d3ce:	683a      	ldr	r2, [r7, #0]
 800d3d0:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800d3d2:	4611      	mov	r1, r2
 800d3d4:	4798      	blx	r3
        }
        break;
 800d3d6:	e0f9      	b.n	800d5cc <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 800d3d8:	4b52      	ldr	r3, [pc, #328]	; (800d524 <OpenThread_CallBack_Processing+0x31c>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f000 80f7 	beq.w	800d5d0 <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800d3e2:	4b50      	ldr	r3, [pc, #320]	; (800d524 <OpenThread_CallBack_Processing+0x31c>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	683a      	ldr	r2, [r7, #0]
 800d3e8:	6892      	ldr	r2, [r2, #8]
 800d3ea:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d3ec:	683a      	ldr	r2, [r7, #0]
 800d3ee:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800d3f0:	4611      	mov	r1, r2
 800d3f2:	4798      	blx	r3
        }
        break;
 800d3f4:	e0ec      	b.n	800d5d0 <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 800d3f6:	4b4c      	ldr	r3, [pc, #304]	; (800d528 <OpenThread_CallBack_Processing+0x320>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f000 80ea 	beq.w	800d5d4 <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800d400:	4b49      	ldr	r3, [pc, #292]	; (800d528 <OpenThread_CallBack_Processing+0x320>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	683a      	ldr	r2, [r7, #0]
 800d406:	6892      	ldr	r2, [r2, #8]
 800d408:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 800d40a:	683a      	ldr	r2, [r7, #0]
 800d40c:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800d40e:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 800d410:	683a      	ldr	r2, [r7, #0]
 800d412:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800d414:	4798      	blx	r3
        }
        break;
 800d416:	e0dd      	b.n	800d5d4 <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 800d418:	4b44      	ldr	r3, [pc, #272]	; (800d52c <OpenThread_CallBack_Processing+0x324>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f000 80db 	beq.w	800d5d8 <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800d422:	4b42      	ldr	r3, [pc, #264]	; (800d52c <OpenThread_CallBack_Processing+0x324>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	683a      	ldr	r2, [r7, #0]
 800d428:	6892      	ldr	r2, [r2, #8]
 800d42a:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 800d42c:	683a      	ldr	r2, [r7, #0]
 800d42e:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800d430:	4611      	mov	r1, r2
 800d432:	4798      	blx	r3
        }
        break;
 800d434:	e0d0      	b.n	800d5d8 <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 800d436:	4b3e      	ldr	r3, [pc, #248]	; (800d530 <OpenThread_CallBack_Processing+0x328>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f000 80ce 	beq.w	800d5dc <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d440:	4b3b      	ldr	r3, [pc, #236]	; (800d530 <OpenThread_CallBack_Processing+0x328>)
 800d442:	681c      	ldr	r4, [r3, #0]
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d44c:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d452:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d458:	47a0      	blx	r4
        }
        break;
 800d45a:	e0bf      	b.n	800d5dc <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 800d45c:	4b35      	ldr	r3, [pc, #212]	; (800d534 <OpenThread_CallBack_Processing+0x32c>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	f000 80bd 	beq.w	800d5e0 <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d466:	4b33      	ldr	r3, [pc, #204]	; (800d534 <OpenThread_CallBack_Processing+0x32c>)
 800d468:	681c      	ldr	r4, [r3, #0]
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	689b      	ldr	r3, [r3, #8]
 800d46e:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d474:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d47a:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d484:	b2db      	uxtb	r3, r3
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	4613      	mov	r3, r2
 800d48a:	462a      	mov	r2, r5
 800d48c:	47a0      	blx	r4
        }
        break;
 800d48e:	e0a7      	b.n	800d5e0 <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 800d490:	4b29      	ldr	r3, [pc, #164]	; (800d538 <OpenThread_CallBack_Processing+0x330>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	f000 80a5 	beq.w	800d5e4 <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d49a:	4b27      	ldr	r3, [pc, #156]	; (800d538 <OpenThread_CallBack_Processing+0x330>)
 800d49c:	681c      	ldr	r4, [r3, #0]
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d4a8:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d4ae:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d4b4:	47a0      	blx	r4
        }
        break;
 800d4b6:	e095      	b.n	800d5e4 <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 800d4b8:	4b20      	ldr	r3, [pc, #128]	; (800d53c <OpenThread_CallBack_Processing+0x334>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f000 8093 	beq.w	800d5e8 <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 800d4c2:	4b1e      	ldr	r3, [pc, #120]	; (800d53c <OpenThread_CallBack_Processing+0x334>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	683a      	ldr	r2, [r7, #0]
 800d4c8:	6892      	ldr	r2, [r2, #8]
 800d4ca:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 800d4cc:	683a      	ldr	r2, [r7, #0]
 800d4ce:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 800d4d0:	4611      	mov	r1, r2
 800d4d2:	4798      	blx	r3
        }
        break;
 800d4d4:	e088      	b.n	800d5e8 <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 800d4d6:	4b1a      	ldr	r3, [pc, #104]	; (800d540 <OpenThread_CallBack_Processing+0x338>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	f000 8086 	beq.w	800d5ec <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d4e0:	4b17      	ldr	r3, [pc, #92]	; (800d540 <OpenThread_CallBack_Processing+0x338>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	683a      	ldr	r2, [r7, #0]
 800d4e6:	6892      	ldr	r2, [r2, #8]
 800d4e8:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 800d4ea:	683a      	ldr	r2, [r7, #0]
 800d4ec:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d4ee:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 800d4f0:	683a      	ldr	r2, [r7, #0]
 800d4f2:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d4f4:	b2d2      	uxtb	r2, r2
 800d4f6:	4798      	blx	r3
        }
        break;
 800d4f8:	e078      	b.n	800d5ec <OpenThread_CallBack_Processing+0x3e4>
 800d4fa:	bf00      	nop
 800d4fc:	20000354 	.word	0x20000354
 800d500:	20004fc0 	.word	0x20004fc0
 800d504:	20000394 	.word	0x20000394
 800d508:	20000398 	.word	0x20000398
 800d50c:	20004fbc 	.word	0x20004fbc
 800d510:	2000039c 	.word	0x2000039c
 800d514:	2000035c 	.word	0x2000035c
 800d518:	20000358 	.word	0x20000358
 800d51c:	20000360 	.word	0x20000360
 800d520:	20000364 	.word	0x20000364
 800d524:	20000368 	.word	0x20000368
 800d528:	2000036c 	.word	0x2000036c
 800d52c:	20000370 	.word	0x20000370
 800d530:	20000374 	.word	0x20000374
 800d534:	20000378 	.word	0x20000378
 800d538:	2000037c 	.word	0x2000037c
 800d53c:	20000380 	.word	0x20000380
 800d540:	20000384 	.word	0x20000384
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 800d544:	4b30      	ldr	r3, [pc, #192]	; (800d608 <OpenThread_CallBack_Processing+0x400>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d051      	beq.n	800d5f0 <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d54c:	4b2e      	ldr	r3, [pc, #184]	; (800d608 <OpenThread_CallBack_Processing+0x400>)
 800d54e:	681c      	ldr	r4, [r3, #0]
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	689b      	ldr	r3, [r3, #8]
 800d554:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d55a:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d560:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d566:	b2db      	uxtb	r3, r3
 800d568:	47a0      	blx	r4
        }
        break;
 800d56a:	e041      	b.n	800d5f0 <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 800d56c:	4b27      	ldr	r3, [pc, #156]	; (800d60c <OpenThread_CallBack_Processing+0x404>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d03f      	beq.n	800d5f4 <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800d574:	4b25      	ldr	r3, [pc, #148]	; (800d60c <OpenThread_CallBack_Processing+0x404>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	683a      	ldr	r2, [r7, #0]
 800d57a:	6892      	ldr	r2, [r2, #8]
 800d57c:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 800d57e:	683a      	ldr	r2, [r7, #0]
 800d580:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800d582:	b252      	sxtb	r2, r2
 800d584:	4611      	mov	r1, r2
 800d586:	4798      	blx	r3
        }
        break;
 800d588:	e034      	b.n	800d5f4 <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 800d58a:	4b21      	ldr	r3, [pc, #132]	; (800d610 <OpenThread_CallBack_Processing+0x408>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d032      	beq.n	800d5f8 <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 800d592:	4b1f      	ldr	r3, [pc, #124]	; (800d610 <OpenThread_CallBack_Processing+0x408>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	683a      	ldr	r2, [r7, #0]
 800d598:	6892      	ldr	r2, [r2, #8]
 800d59a:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 800d59c:	683a      	ldr	r2, [r7, #0]
 800d59e:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800d5a0:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 800d5a2:	683a      	ldr	r2, [r7, #0]
 800d5a4:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800d5a6:	4798      	blx	r3
        }
        break;
 800d5a8:	e026      	b.n	800d5f8 <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	71fb      	strb	r3, [r7, #7]
        break;
 800d5ae:	e024      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5b0:	bf00      	nop
 800d5b2:	e022      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5b4:	bf00      	nop
 800d5b6:	e020      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5b8:	bf00      	nop
 800d5ba:	e01e      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5bc:	bf00      	nop
 800d5be:	e01c      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5c0:	bf00      	nop
 800d5c2:	e01a      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5c4:	bf00      	nop
 800d5c6:	e018      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5c8:	bf00      	nop
 800d5ca:	e016      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5cc:	bf00      	nop
 800d5ce:	e014      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5d0:	bf00      	nop
 800d5d2:	e012      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5d4:	bf00      	nop
 800d5d6:	e010      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5d8:	bf00      	nop
 800d5da:	e00e      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5dc:	bf00      	nop
 800d5de:	e00c      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5e0:	bf00      	nop
 800d5e2:	e00a      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5e4:	bf00      	nop
 800d5e6:	e008      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5e8:	bf00      	nop
 800d5ea:	e006      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5ec:	bf00      	nop
 800d5ee:	e004      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5f0:	bf00      	nop
 800d5f2:	e002      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5f4:	bf00      	nop
 800d5f6:	e000      	b.n	800d5fa <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5f8:	bf00      	nop
    }

    TL_THREAD_SendAck();
 800d5fa:	f7fe fed9 	bl	800c3b0 <TL_THREAD_SendAck>
    return status;
 800d5fe:	79fb      	ldrb	r3, [r7, #7]

}
 800d600:	4618      	mov	r0, r3
 800d602:	3708      	adds	r7, #8
 800d604:	46bd      	mov	sp, r7
 800d606:	bdb0      	pop	{r4, r5, r7, pc}
 800d608:	20000388 	.word	0x20000388
 800d60c:	2000038c 	.word	0x2000038c
 800d610:	20000390 	.word	0x20000390

0800d614 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	460b      	mov	r3, r1
 800d61e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800d620:	f004 ffe8 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d624:	f004 ff84 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d628:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2200      	movs	r2, #0
 800d62e:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 800d632:	701a      	strb	r2, [r3, #0]
 800d634:	2200      	movs	r2, #0
 800d636:	f042 0201 	orr.w	r2, r2, #1
 800d63a:	705a      	strb	r2, [r3, #1]
 800d63c:	2200      	movs	r2, #0
 800d63e:	709a      	strb	r2, [r3, #2]
 800d640:	2200      	movs	r2, #0
 800d642:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2200      	movs	r2, #0
 800d648:	f042 0201 	orr.w	r2, r2, #1
 800d64c:	711a      	strb	r2, [r3, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	715a      	strb	r2, [r3, #5]
 800d652:	2200      	movs	r2, #0
 800d654:	719a      	strb	r2, [r3, #6]
 800d656:	2200      	movs	r2, #0
 800d658:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 800d65a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800d662:	f004 ff89 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d666:	f004 ff6f 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d66a:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	b2db      	uxtb	r3, r3
}
 800d672:	4618      	mov	r0, r3
 800d674:	3710      	adds	r7, #16
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b084      	sub	sp, #16
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
 800d682:	460b      	mov	r3, r1
 800d684:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800d686:	f004 ffb5 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d68a:	f004 ff51 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d68e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2200      	movs	r2, #0
 800d694:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 800d698:	701a      	strb	r2, [r3, #0]
 800d69a:	2200      	movs	r2, #0
 800d69c:	705a      	strb	r2, [r3, #1]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	709a      	strb	r2, [r3, #2]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f042 0201 	orr.w	r2, r2, #1
 800d6ae:	711a      	strb	r2, [r3, #4]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	715a      	strb	r2, [r3, #5]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	719a      	strb	r2, [r3, #6]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800d6bc:	78fa      	ldrb	r2, [r7, #3]
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d6c2:	f004 ff59 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d6c6:	f004 ff3f 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d6ca:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	b2db      	uxtb	r3, r3
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <otThreadSetChildTimeout>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI void OTCALL otThreadSetChildTimeout(otInstance *aInstance, uint32_t aTimeout)
{
 800d6da:	b580      	push	{r7, lr}
 800d6dc:	b084      	sub	sp, #16
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
 800d6e2:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800d6e4:	f004 ff86 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d6e8:	f004 ff22 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d6ec:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_CHILD_TIMEOUT;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 800d6f6:	701a      	strb	r2, [r3, #0]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	705a      	strb	r2, [r3, #1]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	709a      	strb	r2, [r3, #2]
 800d700:	2200      	movs	r2, #0
 800d702:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2200      	movs	r2, #0
 800d708:	f042 0201 	orr.w	r2, r2, #1
 800d70c:	711a      	strb	r2, [r3, #4]
 800d70e:	2200      	movs	r2, #0
 800d710:	715a      	strb	r2, [r3, #5]
 800d712:	2200      	movs	r2, #0
 800d714:	719a      	strb	r2, [r3, #6]
 800d716:	2200      	movs	r2, #0
 800d718:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aTimeout;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	683a      	ldr	r2, [r7, #0]
 800d71e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d720:	f004 ff2a 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d724:	f004 ff10 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d728:	60f8      	str	r0, [r7, #12]
}
 800d72a:	bf00      	nop
 800d72c:	3710      	adds	r7, #16
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <otThreadGetMeshLocalEid>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b084      	sub	sp, #16
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d73a:	f004 ff5b 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d73e:	f004 fef7 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d742:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2200      	movs	r2, #0
 800d748:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 800d74c:	701a      	strb	r2, [r3, #0]
 800d74e:	2200      	movs	r2, #0
 800d750:	705a      	strb	r2, [r3, #1]
 800d752:	2200      	movs	r2, #0
 800d754:	709a      	strb	r2, [r3, #2]
 800d756:	2200      	movs	r2, #0
 800d758:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2200      	movs	r2, #0
 800d75e:	711a      	strb	r2, [r3, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	715a      	strb	r2, [r3, #5]
 800d764:	2200      	movs	r2, #0
 800d766:	719a      	strb	r2, [r3, #6]
 800d768:	2200      	movs	r2, #0
 800d76a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d76c:	f004 ff04 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d770:	f004 feea 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d774:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	689b      	ldr	r3, [r3, #8]
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3710      	adds	r7, #16
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}

0800d782 <otThreadGetLinkLocalIp6Address>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otIp6Address *otThreadGetLinkLocalIp6Address(otInstance *aInstance)
{
 800d782:	b580      	push	{r7, lr}
 800d784:	b084      	sub	sp, #16
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d78a:	f004 ff33 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d78e:	f004 fecf 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d792:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_LINK_LOCAL_IP6_ADDRESS;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2200      	movs	r2, #0
 800d798:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 800d79c:	701a      	strb	r2, [r3, #0]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	705a      	strb	r2, [r3, #1]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	709a      	strb	r2, [r3, #2]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	711a      	strb	r2, [r3, #4]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	715a      	strb	r2, [r3, #5]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	719a      	strb	r2, [r3, #6]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d7bc:	f004 fedc 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d7c0:	f004 fec2 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d7c4:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	689b      	ldr	r3, [r3, #8]
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b084      	sub	sp, #16
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
 800d7da:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800d7dc:	f004 ff0a 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d7e0:	f004 fea6 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d7e4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 800d7ee:	701a      	strb	r2, [r3, #0]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	705a      	strb	r2, [r3, #1]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	709a      	strb	r2, [r3, #2]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2200      	movs	r2, #0
 800d800:	f042 0201 	orr.w	r2, r2, #1
 800d804:	711a      	strb	r2, [r3, #4]
 800d806:	2200      	movs	r2, #0
 800d808:	715a      	strb	r2, [r3, #5]
 800d80a:	2200      	movs	r2, #0
 800d80c:	719a      	strb	r2, [r3, #6]
 800d80e:	2200      	movs	r2, #0
 800d810:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 800d812:	683a      	ldr	r2, [r7, #0]
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d818:	f004 feae 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d81c:	f004 fe94 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d820:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	689b      	ldr	r3, [r3, #8]
 800d826:	b2db      	uxtb	r3, r3
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3710      	adds	r7, #16
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d838:	f004 fedc 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d83c:	f004 fe78 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d840:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2200      	movs	r2, #0
 800d846:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 800d84a:	701a      	strb	r2, [r3, #0]
 800d84c:	2200      	movs	r2, #0
 800d84e:	705a      	strb	r2, [r3, #1]
 800d850:	2200      	movs	r2, #0
 800d852:	709a      	strb	r2, [r3, #2]
 800d854:	2200      	movs	r2, #0
 800d856:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2200      	movs	r2, #0
 800d85c:	711a      	strb	r2, [r3, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	715a      	strb	r2, [r3, #5]
 800d862:	2200      	movs	r2, #0
 800d864:	719a      	strb	r2, [r3, #6]
 800d866:	2200      	movs	r2, #0
 800d868:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d86a:	f004 fe85 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d86e:	f004 fe6b 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d872:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	689b      	ldr	r3, [r3, #8]
 800d878:	b2db      	uxtb	r3, r3
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3710      	adds	r7, #16
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b084      	sub	sp, #16
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d88a:	f004 feb3 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d88e:	f004 fe4f 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d892:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2200      	movs	r2, #0
 800d898:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800d89c:	701a      	strb	r2, [r3, #0]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	705a      	strb	r2, [r3, #1]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	709a      	strb	r2, [r3, #2]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	711a      	strb	r2, [r3, #4]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	715a      	strb	r2, [r3, #5]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	719a      	strb	r2, [r3, #6]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d8bc:	f004 fe5c 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d8c0:	f004 fe42 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d8c4:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	b29b      	uxth	r3, r3
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3710      	adds	r7, #16
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	605a      	str	r2, [r3, #4]
}
 800d8e8:	bf00      	nop
 800d8ea:	370c      	adds	r7, #12
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b087      	sub	sp, #28
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8fc:	f3ef 8310 	mrs	r3, PRIMASK
 800d900:	60fb      	str	r3, [r7, #12]
  return(result);
 800d902:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d904:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d906:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d102      	bne.n	800d918 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800d912:	2301      	movs	r3, #1
 800d914:	75fb      	strb	r3, [r7, #23]
 800d916:	e001      	b.n	800d91c <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800d918:	2300      	movs	r3, #0
 800d91a:	75fb      	strb	r3, [r7, #23]
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800d926:	7dfb      	ldrb	r3, [r7, #23]
}
 800d928:	4618      	mov	r0, r3
 800d92a:	371c      	adds	r7, #28
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr

0800d934 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800d934:	b480      	push	{r7}
 800d936:	b087      	sub	sp, #28
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d93e:	f3ef 8310 	mrs	r3, PRIMASK
 800d942:	60fb      	str	r3, [r7, #12]
  return(result);
 800d944:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d946:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d948:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	683a      	ldr	r2, [r7, #0]
 800d95c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	683a      	ldr	r2, [r7, #0]
 800d964:	605a      	str	r2, [r3, #4]
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d970:	bf00      	nop
 800d972:	371c      	adds	r7, #28
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b087      	sub	sp, #28
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d986:	f3ef 8310 	mrs	r3, PRIMASK
 800d98a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d98c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d98e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d990:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	685a      	ldr	r2, [r3, #4]
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	683a      	ldr	r2, [r7, #0]
 800d9a4:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	683a      	ldr	r2, [r7, #0]
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d9b8:	bf00      	nop
 800d9ba:	371c      	adds	r7, #28
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b087      	sub	sp, #28
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9cc:	f3ef 8310 	mrs	r3, PRIMASK
 800d9d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d9d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d9d6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	6812      	ldr	r2, [r2, #0]
 800d9e0:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	6852      	ldr	r2, [r2, #4]
 800d9ea:	605a      	str	r2, [r3, #4]
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d9f6:	bf00      	nop
 800d9f8:	371c      	adds	r7, #28
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da00:	4770      	bx	lr

0800da02 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b086      	sub	sp, #24
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
 800da0a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da0c:	f3ef 8310 	mrs	r3, PRIMASK
 800da10:	60fb      	str	r3, [r7, #12]
  return(result);
 800da12:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800da14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800da16:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4618      	mov	r0, r3
 800da26:	f7ff ffcd 	bl	800d9c4 <LST_remove_node>
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800da34:	bf00      	nop
 800da36:	3718      	adds	r7, #24
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800da3c:	b480      	push	{r7}
 800da3e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800da40:	bf00      	nop
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr
	...

0800da4c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800da4c:	b480      	push	{r7}
 800da4e:	b085      	sub	sp, #20
 800da50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da52:	f3ef 8305 	mrs	r3, IPSR
 800da56:	60bb      	str	r3, [r7, #8]
  return(result);
 800da58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d10f      	bne.n	800da7e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da5e:	f3ef 8310 	mrs	r3, PRIMASK
 800da62:	607b      	str	r3, [r7, #4]
  return(result);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d105      	bne.n	800da76 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da6a:	f3ef 8311 	mrs	r3, BASEPRI
 800da6e:	603b      	str	r3, [r7, #0]
  return(result);
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d007      	beq.n	800da86 <osKernelInitialize+0x3a>
 800da76:	4b0e      	ldr	r3, [pc, #56]	; (800dab0 <osKernelInitialize+0x64>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2b02      	cmp	r3, #2
 800da7c:	d103      	bne.n	800da86 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800da7e:	f06f 0305 	mvn.w	r3, #5
 800da82:	60fb      	str	r3, [r7, #12]
 800da84:	e00c      	b.n	800daa0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800da86:	4b0a      	ldr	r3, [pc, #40]	; (800dab0 <osKernelInitialize+0x64>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d105      	bne.n	800da9a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800da8e:	4b08      	ldr	r3, [pc, #32]	; (800dab0 <osKernelInitialize+0x64>)
 800da90:	2201      	movs	r2, #1
 800da92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800da94:	2300      	movs	r3, #0
 800da96:	60fb      	str	r3, [r7, #12]
 800da98:	e002      	b.n	800daa0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800da9a:	f04f 33ff 	mov.w	r3, #4294967295
 800da9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800daa0:	68fb      	ldr	r3, [r7, #12]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3714      	adds	r7, #20
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop
 800dab0:	200003a0 	.word	0x200003a0

0800dab4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800daba:	f3ef 8305 	mrs	r3, IPSR
 800dabe:	60bb      	str	r3, [r7, #8]
  return(result);
 800dac0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d10f      	bne.n	800dae6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dac6:	f3ef 8310 	mrs	r3, PRIMASK
 800daca:	607b      	str	r3, [r7, #4]
  return(result);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d105      	bne.n	800dade <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dad2:	f3ef 8311 	mrs	r3, BASEPRI
 800dad6:	603b      	str	r3, [r7, #0]
  return(result);
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d007      	beq.n	800daee <osKernelStart+0x3a>
 800dade:	4b0f      	ldr	r3, [pc, #60]	; (800db1c <osKernelStart+0x68>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2b02      	cmp	r3, #2
 800dae4:	d103      	bne.n	800daee <osKernelStart+0x3a>
    stat = osErrorISR;
 800dae6:	f06f 0305 	mvn.w	r3, #5
 800daea:	60fb      	str	r3, [r7, #12]
 800daec:	e010      	b.n	800db10 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800daee:	4b0b      	ldr	r3, [pc, #44]	; (800db1c <osKernelStart+0x68>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d109      	bne.n	800db0a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800daf6:	f7ff ffa1 	bl	800da3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dafa:	4b08      	ldr	r3, [pc, #32]	; (800db1c <osKernelStart+0x68>)
 800dafc:	2202      	movs	r2, #2
 800dafe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800db00:	f002 f944 	bl	800fd8c <vTaskStartScheduler>
      stat = osOK;
 800db04:	2300      	movs	r3, #0
 800db06:	60fb      	str	r3, [r7, #12]
 800db08:	e002      	b.n	800db10 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800db0a:	f04f 33ff 	mov.w	r3, #4294967295
 800db0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800db10:	68fb      	ldr	r3, [r7, #12]
}
 800db12:	4618      	mov	r0, r3
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	200003a0 	.word	0x200003a0

0800db20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800db20:	b580      	push	{r7, lr}
 800db22:	b090      	sub	sp, #64	; 0x40
 800db24:	af04      	add	r7, sp, #16
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800db2c:	2300      	movs	r3, #0
 800db2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db30:	f3ef 8305 	mrs	r3, IPSR
 800db34:	61fb      	str	r3, [r7, #28]
  return(result);
 800db36:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800db38:	2b00      	cmp	r3, #0
 800db3a:	f040 8090 	bne.w	800dc5e <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db3e:	f3ef 8310 	mrs	r3, PRIMASK
 800db42:	61bb      	str	r3, [r7, #24]
  return(result);
 800db44:	69bb      	ldr	r3, [r7, #24]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d105      	bne.n	800db56 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db4a:	f3ef 8311 	mrs	r3, BASEPRI
 800db4e:	617b      	str	r3, [r7, #20]
  return(result);
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d003      	beq.n	800db5e <osThreadNew+0x3e>
 800db56:	4b44      	ldr	r3, [pc, #272]	; (800dc68 <osThreadNew+0x148>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	2b02      	cmp	r3, #2
 800db5c:	d07f      	beq.n	800dc5e <osThreadNew+0x13e>
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d07c      	beq.n	800dc5e <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800db64:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db68:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800db6a:	2318      	movs	r3, #24
 800db6c:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800db6e:	2300      	movs	r3, #0
 800db70:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800db72:	f04f 33ff 	mov.w	r3, #4294967295
 800db76:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d045      	beq.n	800dc0a <osThreadNew+0xea>
      if (attr->name != NULL) {
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d002      	beq.n	800db8c <osThreadNew+0x6c>
        name = attr->name;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	699b      	ldr	r3, [r3, #24]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d002      	beq.n	800db9a <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	699b      	ldr	r3, [r3, #24]
 800db98:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800db9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d008      	beq.n	800dbb2 <osThreadNew+0x92>
 800dba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba2:	2b38      	cmp	r3, #56	; 0x38
 800dba4:	d805      	bhi.n	800dbb2 <osThreadNew+0x92>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	f003 0301 	and.w	r3, r3, #1
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d001      	beq.n	800dbb6 <osThreadNew+0x96>
        return (NULL);
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	e054      	b.n	800dc60 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	695b      	ldr	r3, [r3, #20]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d003      	beq.n	800dbc6 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	695b      	ldr	r3, [r3, #20]
 800dbc2:	089b      	lsrs	r3, r3, #2
 800dbc4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	689b      	ldr	r3, [r3, #8]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00e      	beq.n	800dbec <osThreadNew+0xcc>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	2b5b      	cmp	r3, #91	; 0x5b
 800dbd4:	d90a      	bls.n	800dbec <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d006      	beq.n	800dbec <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	695b      	ldr	r3, [r3, #20]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d002      	beq.n	800dbec <osThreadNew+0xcc>
        mem = 1;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	623b      	str	r3, [r7, #32]
 800dbea:	e010      	b.n	800dc0e <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	689b      	ldr	r3, [r3, #8]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d10c      	bne.n	800dc0e <osThreadNew+0xee>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d108      	bne.n	800dc0e <osThreadNew+0xee>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	691b      	ldr	r3, [r3, #16]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d104      	bne.n	800dc0e <osThreadNew+0xee>
          mem = 0;
 800dc04:	2300      	movs	r3, #0
 800dc06:	623b      	str	r3, [r7, #32]
 800dc08:	e001      	b.n	800dc0e <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800dc0e:	6a3b      	ldr	r3, [r7, #32]
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d110      	bne.n	800dc36 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dc1c:	9202      	str	r2, [sp, #8]
 800dc1e:	9301      	str	r3, [sp, #4]
 800dc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc2a:	68f8      	ldr	r0, [r7, #12]
 800dc2c:	f001 fedc 	bl	800f9e8 <xTaskCreateStatic>
 800dc30:	4603      	mov	r3, r0
 800dc32:	613b      	str	r3, [r7, #16]
 800dc34:	e013      	b.n	800dc5e <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800dc36:	6a3b      	ldr	r3, [r7, #32]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d110      	bne.n	800dc5e <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3e:	b29a      	uxth	r2, r3
 800dc40:	f107 0310 	add.w	r3, r7, #16
 800dc44:	9301      	str	r3, [sp, #4]
 800dc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f001 ff24 	bl	800fa9c <xTaskCreate>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d001      	beq.n	800dc5e <osThreadNew+0x13e>
          hTask = NULL;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dc5e:	693b      	ldr	r3, [r7, #16]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3730      	adds	r7, #48	; 0x30
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	200003a0 	.word	0x200003a0

0800dc6c <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b08a      	sub	sp, #40	; 0x28
 800dc70:	af02      	add	r7, sp, #8
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d002      	beq.n	800dc86 <osThreadFlagsSet+0x1a>
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	da03      	bge.n	800dc8e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800dc86:	f06f 0303 	mvn.w	r3, #3
 800dc8a:	60fb      	str	r3, [r7, #12]
 800dc8c:	e046      	b.n	800dd1c <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800dc8e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc94:	f3ef 8305 	mrs	r3, IPSR
 800dc98:	61bb      	str	r3, [r7, #24]
  return(result);
 800dc9a:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10f      	bne.n	800dcc0 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dca0:	f3ef 8310 	mrs	r3, PRIMASK
 800dca4:	617b      	str	r3, [r7, #20]
  return(result);
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d105      	bne.n	800dcb8 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dcac:	f3ef 8311 	mrs	r3, BASEPRI
 800dcb0:	613b      	str	r3, [r7, #16]
  return(result);
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d024      	beq.n	800dd02 <osThreadFlagsSet+0x96>
 800dcb8:	4b1b      	ldr	r3, [pc, #108]	; (800dd28 <osThreadFlagsSet+0xbc>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d120      	bne.n	800dd02 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800dcc4:	f107 0308 	add.w	r3, r7, #8
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	2300      	movs	r3, #0
 800dccc:	2201      	movs	r2, #1
 800dcce:	6839      	ldr	r1, [r7, #0]
 800dcd0:	69f8      	ldr	r0, [r7, #28]
 800dcd2:	f002 ff97 	bl	8010c04 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800dcd6:	f107 020c 	add.w	r2, r7, #12
 800dcda:	2300      	movs	r3, #0
 800dcdc:	9300      	str	r3, [sp, #0]
 800dcde:	4613      	mov	r3, r2
 800dce0:	2200      	movs	r2, #0
 800dce2:	2100      	movs	r1, #0
 800dce4:	69f8      	ldr	r0, [r7, #28]
 800dce6:	f002 ff8d 	bl	8010c04 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d015      	beq.n	800dd1c <osThreadFlagsSet+0xb0>
 800dcf0:	4b0e      	ldr	r3, [pc, #56]	; (800dd2c <osThreadFlagsSet+0xc0>)
 800dcf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcf6:	601a      	str	r2, [r3, #0]
 800dcf8:	f3bf 8f4f 	dsb	sy
 800dcfc:	f3bf 8f6f 	isb	sy
 800dd00:	e00c      	b.n	800dd1c <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800dd02:	2300      	movs	r3, #0
 800dd04:	2201      	movs	r2, #1
 800dd06:	6839      	ldr	r1, [r7, #0]
 800dd08:	69f8      	ldr	r0, [r7, #28]
 800dd0a:	f002 fec5 	bl	8010a98 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800dd0e:	f107 030c 	add.w	r3, r7, #12
 800dd12:	2200      	movs	r2, #0
 800dd14:	2100      	movs	r1, #0
 800dd16:	69f8      	ldr	r0, [r7, #28]
 800dd18:	f002 febe 	bl	8010a98 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3720      	adds	r7, #32
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	200003a0 	.word	0x200003a0
 800dd2c:	e000ed04 	.word	0xe000ed04

0800dd30 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b08e      	sub	sp, #56	; 0x38
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd3c:	f3ef 8305 	mrs	r3, IPSR
 800dd40:	61fb      	str	r3, [r7, #28]
  return(result);
 800dd42:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d10f      	bne.n	800dd68 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd48:	f3ef 8310 	mrs	r3, PRIMASK
 800dd4c:	61bb      	str	r3, [r7, #24]
  return(result);
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d105      	bne.n	800dd60 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd54:	f3ef 8311 	mrs	r3, BASEPRI
 800dd58:	617b      	str	r3, [r7, #20]
  return(result);
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d007      	beq.n	800dd70 <osThreadFlagsWait+0x40>
 800dd60:	4b3c      	ldr	r3, [pc, #240]	; (800de54 <osThreadFlagsWait+0x124>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b02      	cmp	r3, #2
 800dd66:	d103      	bne.n	800dd70 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800dd68:	f06f 0305 	mvn.w	r3, #5
 800dd6c:	637b      	str	r3, [r7, #52]	; 0x34
 800dd6e:	e06b      	b.n	800de48 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	da03      	bge.n	800dd7e <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800dd76:	f06f 0303 	mvn.w	r3, #3
 800dd7a:	637b      	str	r3, [r7, #52]	; 0x34
 800dd7c:	e064      	b.n	800de48 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	f003 0302 	and.w	r3, r3, #2
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d002      	beq.n	800dd8e <osThreadFlagsWait+0x5e>
      clear = 0U;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	633b      	str	r3, [r7, #48]	; 0x30
 800dd8c:	e001      	b.n	800dd92 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800dd92:	2300      	movs	r3, #0
 800dd94:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800dd9a:	f002 f93d 	bl	8010018 <xTaskGetTickCount>
 800dd9e:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800dda0:	f107 0210 	add.w	r2, r7, #16
 800dda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dda8:	2000      	movs	r0, #0
 800ddaa:	f002 fe1b 	bl	80109e4 <xTaskNotifyWait>
 800ddae:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800ddb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d137      	bne.n	800de26 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800ddb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	4013      	ands	r3, r2
 800ddbc:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	f003 0301 	and.w	r3, r3, #1
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d00c      	beq.n	800ddea <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800ddd0:	68fa      	ldr	r2, [r7, #12]
 800ddd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddd4:	4013      	ands	r3, r2
 800ddd6:	68fa      	ldr	r2, [r7, #12]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d032      	beq.n	800de42 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d10f      	bne.n	800de02 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800dde2:	f06f 0302 	mvn.w	r3, #2
 800dde6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800dde8:	e02e      	b.n	800de48 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddee:	4013      	ands	r3, r2
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d128      	bne.n	800de46 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d103      	bne.n	800de02 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800ddfa:	f06f 0302 	mvn.w	r3, #2
 800ddfe:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800de00:	e022      	b.n	800de48 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800de02:	f002 f909 	bl	8010018 <xTaskGetTickCount>
 800de06:	4602      	mov	r2, r0
 800de08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0a:	1ad3      	subs	r3, r2, r3
 800de0c:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800de0e:	6a3a      	ldr	r2, [r7, #32]
 800de10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de12:	429a      	cmp	r2, r3
 800de14:	d902      	bls.n	800de1c <osThreadFlagsWait+0xec>
          tout  = 0;
 800de16:	2300      	movs	r3, #0
 800de18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de1a:	e00e      	b.n	800de3a <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800de1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de1e:	6a3b      	ldr	r3, [r7, #32]
 800de20:	1ad3      	subs	r3, r2, r3
 800de22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de24:	e009      	b.n	800de3a <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d103      	bne.n	800de34 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800de2c:	f06f 0302 	mvn.w	r3, #2
 800de30:	637b      	str	r3, [r7, #52]	; 0x34
 800de32:	e002      	b.n	800de3a <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800de34:	f06f 0301 	mvn.w	r3, #1
 800de38:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800de3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d1af      	bne.n	800dda0 <osThreadFlagsWait+0x70>
 800de40:	e002      	b.n	800de48 <osThreadFlagsWait+0x118>
            break;
 800de42:	bf00      	nop
 800de44:	e000      	b.n	800de48 <osThreadFlagsWait+0x118>
            break;
 800de46:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800de48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3738      	adds	r7, #56	; 0x38
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	200003a0 	.word	0x200003a0

0800de58 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800de58:	b580      	push	{r7, lr}
 800de5a:	b086      	sub	sp, #24
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de60:	f3ef 8305 	mrs	r3, IPSR
 800de64:	613b      	str	r3, [r7, #16]
  return(result);
 800de66:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d10f      	bne.n	800de8c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de6c:	f3ef 8310 	mrs	r3, PRIMASK
 800de70:	60fb      	str	r3, [r7, #12]
  return(result);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d105      	bne.n	800de84 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de78:	f3ef 8311 	mrs	r3, BASEPRI
 800de7c:	60bb      	str	r3, [r7, #8]
  return(result);
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d007      	beq.n	800de94 <osDelay+0x3c>
 800de84:	4b0a      	ldr	r3, [pc, #40]	; (800deb0 <osDelay+0x58>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	2b02      	cmp	r3, #2
 800de8a:	d103      	bne.n	800de94 <osDelay+0x3c>
    stat = osErrorISR;
 800de8c:	f06f 0305 	mvn.w	r3, #5
 800de90:	617b      	str	r3, [r7, #20]
 800de92:	e007      	b.n	800dea4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800de94:	2300      	movs	r3, #0
 800de96:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d002      	beq.n	800dea4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f001 ff40 	bl	800fd24 <vTaskDelay>
    }
  }

  return (stat);
 800dea4:	697b      	ldr	r3, [r7, #20]
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3718      	adds	r7, #24
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	200003a0 	.word	0x200003a0

0800deb4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b08a      	sub	sp, #40	; 0x28
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800debc:	2300      	movs	r3, #0
 800debe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dec0:	f3ef 8305 	mrs	r3, IPSR
 800dec4:	613b      	str	r3, [r7, #16]
  return(result);
 800dec6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800dec8:	2b00      	cmp	r3, #0
 800deca:	f040 8085 	bne.w	800dfd8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dece:	f3ef 8310 	mrs	r3, PRIMASK
 800ded2:	60fb      	str	r3, [r7, #12]
  return(result);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d105      	bne.n	800dee6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800deda:	f3ef 8311 	mrs	r3, BASEPRI
 800dede:	60bb      	str	r3, [r7, #8]
  return(result);
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d003      	beq.n	800deee <osMutexNew+0x3a>
 800dee6:	4b3f      	ldr	r3, [pc, #252]	; (800dfe4 <osMutexNew+0x130>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	2b02      	cmp	r3, #2
 800deec:	d074      	beq.n	800dfd8 <osMutexNew+0x124>
    if (attr != NULL) {
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d003      	beq.n	800defc <osMutexNew+0x48>
      type = attr->attr_bits;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	623b      	str	r3, [r7, #32]
 800defa:	e001      	b.n	800df00 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800defc:	2300      	movs	r3, #0
 800defe:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800df00:	6a3b      	ldr	r3, [r7, #32]
 800df02:	f003 0301 	and.w	r3, r3, #1
 800df06:	2b00      	cmp	r3, #0
 800df08:	d002      	beq.n	800df10 <osMutexNew+0x5c>
      rmtx = 1U;
 800df0a:	2301      	movs	r3, #1
 800df0c:	61fb      	str	r3, [r7, #28]
 800df0e:	e001      	b.n	800df14 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800df10:	2300      	movs	r3, #0
 800df12:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800df14:	6a3b      	ldr	r3, [r7, #32]
 800df16:	f003 0308 	and.w	r3, r3, #8
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d15c      	bne.n	800dfd8 <osMutexNew+0x124>
      mem = -1;
 800df1e:	f04f 33ff 	mov.w	r3, #4294967295
 800df22:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d015      	beq.n	800df56 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d006      	beq.n	800df40 <osMutexNew+0x8c>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	68db      	ldr	r3, [r3, #12]
 800df36:	2b4f      	cmp	r3, #79	; 0x4f
 800df38:	d902      	bls.n	800df40 <osMutexNew+0x8c>
          mem = 1;
 800df3a:	2301      	movs	r3, #1
 800df3c:	61bb      	str	r3, [r7, #24]
 800df3e:	e00c      	b.n	800df5a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	689b      	ldr	r3, [r3, #8]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d108      	bne.n	800df5a <osMutexNew+0xa6>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d104      	bne.n	800df5a <osMutexNew+0xa6>
            mem = 0;
 800df50:	2300      	movs	r3, #0
 800df52:	61bb      	str	r3, [r7, #24]
 800df54:	e001      	b.n	800df5a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	2b01      	cmp	r3, #1
 800df5e:	d112      	bne.n	800df86 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800df60:	69fb      	ldr	r3, [r7, #28]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d007      	beq.n	800df76 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	4619      	mov	r1, r3
 800df6c:	2004      	movs	r0, #4
 800df6e:	f000 fe08 	bl	800eb82 <xQueueCreateMutexStatic>
 800df72:	6278      	str	r0, [r7, #36]	; 0x24
 800df74:	e016      	b.n	800dfa4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	4619      	mov	r1, r3
 800df7c:	2001      	movs	r0, #1
 800df7e:	f000 fe00 	bl	800eb82 <xQueueCreateMutexStatic>
 800df82:	6278      	str	r0, [r7, #36]	; 0x24
 800df84:	e00e      	b.n	800dfa4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800df86:	69bb      	ldr	r3, [r7, #24]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d10b      	bne.n	800dfa4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d004      	beq.n	800df9c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800df92:	2004      	movs	r0, #4
 800df94:	f000 fddd 	bl	800eb52 <xQueueCreateMutex>
 800df98:	6278      	str	r0, [r7, #36]	; 0x24
 800df9a:	e003      	b.n	800dfa4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800df9c:	2001      	movs	r0, #1
 800df9e:	f000 fdd8 	bl	800eb52 <xQueueCreateMutex>
 800dfa2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800dfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d00c      	beq.n	800dfc4 <osMutexNew+0x110>
        if (attr != NULL) {
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d003      	beq.n	800dfb8 <osMutexNew+0x104>
          name = attr->name;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	617b      	str	r3, [r7, #20]
 800dfb6:	e001      	b.n	800dfbc <osMutexNew+0x108>
        } else {
          name = NULL;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800dfbc:	6979      	ldr	r1, [r7, #20]
 800dfbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfc0:	f001 fc8c 	bl	800f8dc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d006      	beq.n	800dfd8 <osMutexNew+0x124>
 800dfca:	69fb      	ldr	r3, [r7, #28]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d003      	beq.n	800dfd8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd2:	f043 0301 	orr.w	r3, r3, #1
 800dfd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800dfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3728      	adds	r7, #40	; 0x28
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	200003a0 	.word	0x200003a0

0800dfe8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b088      	sub	sp, #32
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f023 0301 	bic.w	r3, r3, #1
 800dff8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f003 0301 	and.w	r3, r3, #1
 800e000:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e002:	2300      	movs	r3, #0
 800e004:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e006:	f3ef 8305 	mrs	r3, IPSR
 800e00a:	613b      	str	r3, [r7, #16]
  return(result);
 800e00c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d10f      	bne.n	800e032 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e012:	f3ef 8310 	mrs	r3, PRIMASK
 800e016:	60fb      	str	r3, [r7, #12]
  return(result);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d105      	bne.n	800e02a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e01e:	f3ef 8311 	mrs	r3, BASEPRI
 800e022:	60bb      	str	r3, [r7, #8]
  return(result);
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d007      	beq.n	800e03a <osMutexAcquire+0x52>
 800e02a:	4b1d      	ldr	r3, [pc, #116]	; (800e0a0 <osMutexAcquire+0xb8>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b02      	cmp	r3, #2
 800e030:	d103      	bne.n	800e03a <osMutexAcquire+0x52>
    stat = osErrorISR;
 800e032:	f06f 0305 	mvn.w	r3, #5
 800e036:	61fb      	str	r3, [r7, #28]
 800e038:	e02c      	b.n	800e094 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d103      	bne.n	800e048 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800e040:	f06f 0303 	mvn.w	r3, #3
 800e044:	61fb      	str	r3, [r7, #28]
 800e046:	e025      	b.n	800e094 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d011      	beq.n	800e072 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e04e:	6839      	ldr	r1, [r7, #0]
 800e050:	69b8      	ldr	r0, [r7, #24]
 800e052:	f000 fde4 	bl	800ec1e <xQueueTakeMutexRecursive>
 800e056:	4603      	mov	r3, r0
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d01b      	beq.n	800e094 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d003      	beq.n	800e06a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800e062:	f06f 0301 	mvn.w	r3, #1
 800e066:	61fb      	str	r3, [r7, #28]
 800e068:	e014      	b.n	800e094 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e06a:	f06f 0302 	mvn.w	r3, #2
 800e06e:	61fb      	str	r3, [r7, #28]
 800e070:	e010      	b.n	800e094 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e072:	6839      	ldr	r1, [r7, #0]
 800e074:	69b8      	ldr	r0, [r7, #24]
 800e076:	f001 f961 	bl	800f33c <xQueueSemaphoreTake>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d009      	beq.n	800e094 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d003      	beq.n	800e08e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800e086:	f06f 0301 	mvn.w	r3, #1
 800e08a:	61fb      	str	r3, [r7, #28]
 800e08c:	e002      	b.n	800e094 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e08e:	f06f 0302 	mvn.w	r3, #2
 800e092:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e094:	69fb      	ldr	r3, [r7, #28]
}
 800e096:	4618      	mov	r0, r3
 800e098:	3720      	adds	r7, #32
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	200003a0 	.word	0x200003a0

0800e0a4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b088      	sub	sp, #32
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f023 0301 	bic.w	r3, r3, #1
 800e0b2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f003 0301 	and.w	r3, r3, #1
 800e0ba:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0c0:	f3ef 8305 	mrs	r3, IPSR
 800e0c4:	613b      	str	r3, [r7, #16]
  return(result);
 800e0c6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d10f      	bne.n	800e0ec <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0cc:	f3ef 8310 	mrs	r3, PRIMASK
 800e0d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d105      	bne.n	800e0e4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e0d8:	f3ef 8311 	mrs	r3, BASEPRI
 800e0dc:	60bb      	str	r3, [r7, #8]
  return(result);
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d007      	beq.n	800e0f4 <osMutexRelease+0x50>
 800e0e4:	4b16      	ldr	r3, [pc, #88]	; (800e140 <osMutexRelease+0x9c>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b02      	cmp	r3, #2
 800e0ea:	d103      	bne.n	800e0f4 <osMutexRelease+0x50>
    stat = osErrorISR;
 800e0ec:	f06f 0305 	mvn.w	r3, #5
 800e0f0:	61fb      	str	r3, [r7, #28]
 800e0f2:	e01f      	b.n	800e134 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800e0f4:	69bb      	ldr	r3, [r7, #24]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d103      	bne.n	800e102 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800e0fa:	f06f 0303 	mvn.w	r3, #3
 800e0fe:	61fb      	str	r3, [r7, #28]
 800e100:	e018      	b.n	800e134 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d009      	beq.n	800e11c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e108:	69b8      	ldr	r0, [r7, #24]
 800e10a:	f000 fd55 	bl	800ebb8 <xQueueGiveMutexRecursive>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b01      	cmp	r3, #1
 800e112:	d00f      	beq.n	800e134 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e114:	f06f 0302 	mvn.w	r3, #2
 800e118:	61fb      	str	r3, [r7, #28]
 800e11a:	e00b      	b.n	800e134 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e11c:	2300      	movs	r3, #0
 800e11e:	2200      	movs	r2, #0
 800e120:	2100      	movs	r1, #0
 800e122:	69b8      	ldr	r0, [r7, #24]
 800e124:	f000 fe16 	bl	800ed54 <xQueueGenericSend>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b01      	cmp	r3, #1
 800e12c:	d002      	beq.n	800e134 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e12e:	f06f 0302 	mvn.w	r3, #2
 800e132:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800e134:	69fb      	ldr	r3, [r7, #28]
}
 800e136:	4618      	mov	r0, r3
 800e138:	3720      	adds	r7, #32
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	200003a0 	.word	0x200003a0

0800e144 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e144:	b580      	push	{r7, lr}
 800e146:	b08c      	sub	sp, #48	; 0x30
 800e148:	af02      	add	r7, sp, #8
 800e14a:	60f8      	str	r0, [r7, #12]
 800e14c:	60b9      	str	r1, [r7, #8]
 800e14e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e150:	2300      	movs	r3, #0
 800e152:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e154:	f3ef 8305 	mrs	r3, IPSR
 800e158:	61bb      	str	r3, [r7, #24]
  return(result);
 800e15a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	f040 8087 	bne.w	800e270 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e162:	f3ef 8310 	mrs	r3, PRIMASK
 800e166:	617b      	str	r3, [r7, #20]
  return(result);
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d105      	bne.n	800e17a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e16e:	f3ef 8311 	mrs	r3, BASEPRI
 800e172:	613b      	str	r3, [r7, #16]
  return(result);
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d003      	beq.n	800e182 <osSemaphoreNew+0x3e>
 800e17a:	4b40      	ldr	r3, [pc, #256]	; (800e27c <osSemaphoreNew+0x138>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2b02      	cmp	r3, #2
 800e180:	d076      	beq.n	800e270 <osSemaphoreNew+0x12c>
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d073      	beq.n	800e270 <osSemaphoreNew+0x12c>
 800e188:	68ba      	ldr	r2, [r7, #8]
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d86f      	bhi.n	800e270 <osSemaphoreNew+0x12c>
    mem = -1;
 800e190:	f04f 33ff 	mov.w	r3, #4294967295
 800e194:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d015      	beq.n	800e1c8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d006      	beq.n	800e1b2 <osSemaphoreNew+0x6e>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	68db      	ldr	r3, [r3, #12]
 800e1a8:	2b4f      	cmp	r3, #79	; 0x4f
 800e1aa:	d902      	bls.n	800e1b2 <osSemaphoreNew+0x6e>
        mem = 1;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	623b      	str	r3, [r7, #32]
 800e1b0:	e00c      	b.n	800e1cc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	689b      	ldr	r3, [r3, #8]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d108      	bne.n	800e1cc <osSemaphoreNew+0x88>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	68db      	ldr	r3, [r3, #12]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d104      	bne.n	800e1cc <osSemaphoreNew+0x88>
          mem = 0;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	623b      	str	r3, [r7, #32]
 800e1c6:	e001      	b.n	800e1cc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800e1cc:	6a3b      	ldr	r3, [r7, #32]
 800e1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1d2:	d04d      	beq.n	800e270 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d129      	bne.n	800e22e <osSemaphoreNew+0xea>
        if (mem == 1) {
 800e1da:	6a3b      	ldr	r3, [r7, #32]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d10b      	bne.n	800e1f8 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	689a      	ldr	r2, [r3, #8]
 800e1e4:	2303      	movs	r3, #3
 800e1e6:	9300      	str	r3, [sp, #0]
 800e1e8:	4613      	mov	r3, r2
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	2100      	movs	r1, #0
 800e1ee:	2001      	movs	r0, #1
 800e1f0:	f000 fbc0 	bl	800e974 <xQueueGenericCreateStatic>
 800e1f4:	6278      	str	r0, [r7, #36]	; 0x24
 800e1f6:	e005      	b.n	800e204 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800e1f8:	2203      	movs	r2, #3
 800e1fa:	2100      	movs	r1, #0
 800e1fc:	2001      	movs	r0, #1
 800e1fe:	f000 fc2c 	bl	800ea5a <xQueueGenericCreate>
 800e202:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e206:	2b00      	cmp	r3, #0
 800e208:	d022      	beq.n	800e250 <osSemaphoreNew+0x10c>
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d01f      	beq.n	800e250 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e210:	2300      	movs	r3, #0
 800e212:	2200      	movs	r2, #0
 800e214:	2100      	movs	r1, #0
 800e216:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e218:	f000 fd9c 	bl	800ed54 <xQueueGenericSend>
 800e21c:	4603      	mov	r3, r0
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d016      	beq.n	800e250 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800e222:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e224:	f001 fa0f 	bl	800f646 <vQueueDelete>
            hSemaphore = NULL;
 800e228:	2300      	movs	r3, #0
 800e22a:	627b      	str	r3, [r7, #36]	; 0x24
 800e22c:	e010      	b.n	800e250 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800e22e:	6a3b      	ldr	r3, [r7, #32]
 800e230:	2b01      	cmp	r3, #1
 800e232:	d108      	bne.n	800e246 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	461a      	mov	r2, r3
 800e23a:	68b9      	ldr	r1, [r7, #8]
 800e23c:	68f8      	ldr	r0, [r7, #12]
 800e23e:	f000 fd23 	bl	800ec88 <xQueueCreateCountingSemaphoreStatic>
 800e242:	6278      	str	r0, [r7, #36]	; 0x24
 800e244:	e004      	b.n	800e250 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e246:	68b9      	ldr	r1, [r7, #8]
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f000 fd52 	bl	800ecf2 <xQueueCreateCountingSemaphore>
 800e24e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e252:	2b00      	cmp	r3, #0
 800e254:	d00c      	beq.n	800e270 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d003      	beq.n	800e264 <osSemaphoreNew+0x120>
          name = attr->name;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	61fb      	str	r3, [r7, #28]
 800e262:	e001      	b.n	800e268 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800e264:	2300      	movs	r3, #0
 800e266:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e268:	69f9      	ldr	r1, [r7, #28]
 800e26a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e26c:	f001 fb36 	bl	800f8dc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e272:	4618      	mov	r0, r3
 800e274:	3728      	adds	r7, #40	; 0x28
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	200003a0 	.word	0x200003a0

0800e280 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e280:	b580      	push	{r7, lr}
 800e282:	b088      	sub	sp, #32
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e28e:	2300      	movs	r3, #0
 800e290:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d103      	bne.n	800e2a0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e298:	f06f 0303 	mvn.w	r3, #3
 800e29c:	61fb      	str	r3, [r7, #28]
 800e29e:	e04b      	b.n	800e338 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2a0:	f3ef 8305 	mrs	r3, IPSR
 800e2a4:	617b      	str	r3, [r7, #20]
  return(result);
 800e2a6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d10f      	bne.n	800e2cc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2ac:	f3ef 8310 	mrs	r3, PRIMASK
 800e2b0:	613b      	str	r3, [r7, #16]
  return(result);
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d105      	bne.n	800e2c4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e2b8:	f3ef 8311 	mrs	r3, BASEPRI
 800e2bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d026      	beq.n	800e312 <osSemaphoreAcquire+0x92>
 800e2c4:	4b1f      	ldr	r3, [pc, #124]	; (800e344 <osSemaphoreAcquire+0xc4>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d122      	bne.n	800e312 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d003      	beq.n	800e2da <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800e2d2:	f06f 0303 	mvn.w	r3, #3
 800e2d6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e2d8:	e02d      	b.n	800e336 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e2de:	f107 0308 	add.w	r3, r7, #8
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	2100      	movs	r1, #0
 800e2e6:	69b8      	ldr	r0, [r7, #24]
 800e2e8:	f001 f930 	bl	800f54c <xQueueReceiveFromISR>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d003      	beq.n	800e2fa <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800e2f2:	f06f 0302 	mvn.w	r3, #2
 800e2f6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e2f8:	e01d      	b.n	800e336 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d01a      	beq.n	800e336 <osSemaphoreAcquire+0xb6>
 800e300:	4b11      	ldr	r3, [pc, #68]	; (800e348 <osSemaphoreAcquire+0xc8>)
 800e302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e306:	601a      	str	r2, [r3, #0]
 800e308:	f3bf 8f4f 	dsb	sy
 800e30c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800e310:	e011      	b.n	800e336 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e312:	6839      	ldr	r1, [r7, #0]
 800e314:	69b8      	ldr	r0, [r7, #24]
 800e316:	f001 f811 	bl	800f33c <xQueueSemaphoreTake>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d00b      	beq.n	800e338 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d003      	beq.n	800e32e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800e326:	f06f 0301 	mvn.w	r3, #1
 800e32a:	61fb      	str	r3, [r7, #28]
 800e32c:	e004      	b.n	800e338 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800e32e:	f06f 0302 	mvn.w	r3, #2
 800e332:	61fb      	str	r3, [r7, #28]
 800e334:	e000      	b.n	800e338 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800e336:	bf00      	nop
      }
    }
  }

  return (stat);
 800e338:	69fb      	ldr	r3, [r7, #28]
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3720      	adds	r7, #32
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	200003a0 	.word	0x200003a0
 800e348:	e000ed04 	.word	0xe000ed04

0800e34c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b088      	sub	sp, #32
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e358:	2300      	movs	r3, #0
 800e35a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e35c:	69bb      	ldr	r3, [r7, #24]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d103      	bne.n	800e36a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e362:	f06f 0303 	mvn.w	r3, #3
 800e366:	61fb      	str	r3, [r7, #28]
 800e368:	e03e      	b.n	800e3e8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e36a:	f3ef 8305 	mrs	r3, IPSR
 800e36e:	617b      	str	r3, [r7, #20]
  return(result);
 800e370:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e372:	2b00      	cmp	r3, #0
 800e374:	d10f      	bne.n	800e396 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e376:	f3ef 8310 	mrs	r3, PRIMASK
 800e37a:	613b      	str	r3, [r7, #16]
  return(result);
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d105      	bne.n	800e38e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e382:	f3ef 8311 	mrs	r3, BASEPRI
 800e386:	60fb      	str	r3, [r7, #12]
  return(result);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d01e      	beq.n	800e3cc <osSemaphoreRelease+0x80>
 800e38e:	4b19      	ldr	r3, [pc, #100]	; (800e3f4 <osSemaphoreRelease+0xa8>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	2b02      	cmp	r3, #2
 800e394:	d11a      	bne.n	800e3cc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800e396:	2300      	movs	r3, #0
 800e398:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e39a:	f107 0308 	add.w	r3, r7, #8
 800e39e:	4619      	mov	r1, r3
 800e3a0:	69b8      	ldr	r0, [r7, #24]
 800e3a2:	f000 fe65 	bl	800f070 <xQueueGiveFromISR>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d003      	beq.n	800e3b4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800e3ac:	f06f 0302 	mvn.w	r3, #2
 800e3b0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e3b2:	e018      	b.n	800e3e6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d015      	beq.n	800e3e6 <osSemaphoreRelease+0x9a>
 800e3ba:	4b0f      	ldr	r3, [pc, #60]	; (800e3f8 <osSemaphoreRelease+0xac>)
 800e3bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3c0:	601a      	str	r2, [r3, #0]
 800e3c2:	f3bf 8f4f 	dsb	sy
 800e3c6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e3ca:	e00c      	b.n	800e3e6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	69b8      	ldr	r0, [r7, #24]
 800e3d4:	f000 fcbe 	bl	800ed54 <xQueueGenericSend>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	d004      	beq.n	800e3e8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800e3de:	f06f 0302 	mvn.w	r3, #2
 800e3e2:	61fb      	str	r3, [r7, #28]
 800e3e4:	e000      	b.n	800e3e8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e3e6:	bf00      	nop
    }
  }

  return (stat);
 800e3e8:	69fb      	ldr	r3, [r7, #28]
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3720      	adds	r7, #32
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	200003a0 	.word	0x200003a0
 800e3f8:	e000ed04 	.word	0xe000ed04

0800e3fc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b08c      	sub	sp, #48	; 0x30
 800e400:	af02      	add	r7, sp, #8
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e408:	2300      	movs	r3, #0
 800e40a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e40c:	f3ef 8305 	mrs	r3, IPSR
 800e410:	61bb      	str	r3, [r7, #24]
  return(result);
 800e412:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e414:	2b00      	cmp	r3, #0
 800e416:	d170      	bne.n	800e4fa <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e418:	f3ef 8310 	mrs	r3, PRIMASK
 800e41c:	617b      	str	r3, [r7, #20]
  return(result);
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d105      	bne.n	800e430 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e424:	f3ef 8311 	mrs	r3, BASEPRI
 800e428:	613b      	str	r3, [r7, #16]
  return(result);
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d003      	beq.n	800e438 <osMessageQueueNew+0x3c>
 800e430:	4b34      	ldr	r3, [pc, #208]	; (800e504 <osMessageQueueNew+0x108>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2b02      	cmp	r3, #2
 800e436:	d060      	beq.n	800e4fa <osMessageQueueNew+0xfe>
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d05d      	beq.n	800e4fa <osMessageQueueNew+0xfe>
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d05a      	beq.n	800e4fa <osMessageQueueNew+0xfe>
    mem = -1;
 800e444:	f04f 33ff 	mov.w	r3, #4294967295
 800e448:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d029      	beq.n	800e4a4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	689b      	ldr	r3, [r3, #8]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d012      	beq.n	800e47e <osMessageQueueNew+0x82>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	2b4f      	cmp	r3, #79	; 0x4f
 800e45e:	d90e      	bls.n	800e47e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e464:	2b00      	cmp	r3, #0
 800e466:	d00a      	beq.n	800e47e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	695a      	ldr	r2, [r3, #20]
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	68b9      	ldr	r1, [r7, #8]
 800e470:	fb01 f303 	mul.w	r3, r1, r3
 800e474:	429a      	cmp	r2, r3
 800e476:	d302      	bcc.n	800e47e <osMessageQueueNew+0x82>
        mem = 1;
 800e478:	2301      	movs	r3, #1
 800e47a:	623b      	str	r3, [r7, #32]
 800e47c:	e014      	b.n	800e4a8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	689b      	ldr	r3, [r3, #8]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d110      	bne.n	800e4a8 <osMessageQueueNew+0xac>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d10c      	bne.n	800e4a8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e492:	2b00      	cmp	r3, #0
 800e494:	d108      	bne.n	800e4a8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	695b      	ldr	r3, [r3, #20]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d104      	bne.n	800e4a8 <osMessageQueueNew+0xac>
          mem = 0;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	623b      	str	r3, [r7, #32]
 800e4a2:	e001      	b.n	800e4a8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e4a8:	6a3b      	ldr	r3, [r7, #32]
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d10c      	bne.n	800e4c8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	691a      	ldr	r2, [r3, #16]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6899      	ldr	r1, [r3, #8]
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	68b9      	ldr	r1, [r7, #8]
 800e4be:	68f8      	ldr	r0, [r7, #12]
 800e4c0:	f000 fa58 	bl	800e974 <xQueueGenericCreateStatic>
 800e4c4:	6278      	str	r0, [r7, #36]	; 0x24
 800e4c6:	e008      	b.n	800e4da <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800e4c8:	6a3b      	ldr	r3, [r7, #32]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d105      	bne.n	800e4da <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	68b9      	ldr	r1, [r7, #8]
 800e4d2:	68f8      	ldr	r0, [r7, #12]
 800e4d4:	f000 fac1 	bl	800ea5a <xQueueGenericCreate>
 800e4d8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00c      	beq.n	800e4fa <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d003      	beq.n	800e4ee <osMessageQueueNew+0xf2>
        name = attr->name;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	61fb      	str	r3, [r7, #28]
 800e4ec:	e001      	b.n	800e4f2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800e4f2:	69f9      	ldr	r1, [r7, #28]
 800e4f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4f6:	f001 f9f1 	bl	800f8dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3728      	adds	r7, #40	; 0x28
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}
 800e504:	200003a0 	.word	0x200003a0

0800e508 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e508:	b580      	push	{r7, lr}
 800e50a:	b08a      	sub	sp, #40	; 0x28
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	603b      	str	r3, [r7, #0]
 800e514:	4613      	mov	r3, r2
 800e516:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e51c:	2300      	movs	r3, #0
 800e51e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e520:	f3ef 8305 	mrs	r3, IPSR
 800e524:	61fb      	str	r3, [r7, #28]
  return(result);
 800e526:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d10f      	bne.n	800e54c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e52c:	f3ef 8310 	mrs	r3, PRIMASK
 800e530:	61bb      	str	r3, [r7, #24]
  return(result);
 800e532:	69bb      	ldr	r3, [r7, #24]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d105      	bne.n	800e544 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e538:	f3ef 8311 	mrs	r3, BASEPRI
 800e53c:	617b      	str	r3, [r7, #20]
  return(result);
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d02c      	beq.n	800e59e <osMessageQueuePut+0x96>
 800e544:	4b28      	ldr	r3, [pc, #160]	; (800e5e8 <osMessageQueuePut+0xe0>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2b02      	cmp	r3, #2
 800e54a:	d128      	bne.n	800e59e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e54c:	6a3b      	ldr	r3, [r7, #32]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d005      	beq.n	800e55e <osMessageQueuePut+0x56>
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d002      	beq.n	800e55e <osMessageQueuePut+0x56>
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d003      	beq.n	800e566 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800e55e:	f06f 0303 	mvn.w	r3, #3
 800e562:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e564:	e039      	b.n	800e5da <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800e566:	2300      	movs	r3, #0
 800e568:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e56a:	f107 0210 	add.w	r2, r7, #16
 800e56e:	2300      	movs	r3, #0
 800e570:	68b9      	ldr	r1, [r7, #8]
 800e572:	6a38      	ldr	r0, [r7, #32]
 800e574:	f000 fce8 	bl	800ef48 <xQueueGenericSendFromISR>
 800e578:	4603      	mov	r3, r0
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	d003      	beq.n	800e586 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800e57e:	f06f 0302 	mvn.w	r3, #2
 800e582:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e584:	e029      	b.n	800e5da <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d026      	beq.n	800e5da <osMessageQueuePut+0xd2>
 800e58c:	4b17      	ldr	r3, [pc, #92]	; (800e5ec <osMessageQueuePut+0xe4>)
 800e58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e592:	601a      	str	r2, [r3, #0]
 800e594:	f3bf 8f4f 	dsb	sy
 800e598:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e59c:	e01d      	b.n	800e5da <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e59e:	6a3b      	ldr	r3, [r7, #32]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d002      	beq.n	800e5aa <osMessageQueuePut+0xa2>
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d103      	bne.n	800e5b2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800e5aa:	f06f 0303 	mvn.w	r3, #3
 800e5ae:	627b      	str	r3, [r7, #36]	; 0x24
 800e5b0:	e014      	b.n	800e5dc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	683a      	ldr	r2, [r7, #0]
 800e5b6:	68b9      	ldr	r1, [r7, #8]
 800e5b8:	6a38      	ldr	r0, [r7, #32]
 800e5ba:	f000 fbcb 	bl	800ed54 <xQueueGenericSend>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d00b      	beq.n	800e5dc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d003      	beq.n	800e5d2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800e5ca:	f06f 0301 	mvn.w	r3, #1
 800e5ce:	627b      	str	r3, [r7, #36]	; 0x24
 800e5d0:	e004      	b.n	800e5dc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800e5d2:	f06f 0302 	mvn.w	r3, #2
 800e5d6:	627b      	str	r3, [r7, #36]	; 0x24
 800e5d8:	e000      	b.n	800e5dc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e5da:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3728      	adds	r7, #40	; 0x28
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	200003a0 	.word	0x200003a0
 800e5ec:	e000ed04 	.word	0xe000ed04

0800e5f0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b08a      	sub	sp, #40	; 0x28
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	607a      	str	r2, [r7, #4]
 800e5fc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e602:	2300      	movs	r3, #0
 800e604:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e606:	f3ef 8305 	mrs	r3, IPSR
 800e60a:	61fb      	str	r3, [r7, #28]
  return(result);
 800e60c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d10f      	bne.n	800e632 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e612:	f3ef 8310 	mrs	r3, PRIMASK
 800e616:	61bb      	str	r3, [r7, #24]
  return(result);
 800e618:	69bb      	ldr	r3, [r7, #24]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d105      	bne.n	800e62a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e61e:	f3ef 8311 	mrs	r3, BASEPRI
 800e622:	617b      	str	r3, [r7, #20]
  return(result);
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d02c      	beq.n	800e684 <osMessageQueueGet+0x94>
 800e62a:	4b28      	ldr	r3, [pc, #160]	; (800e6cc <osMessageQueueGet+0xdc>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	2b02      	cmp	r3, #2
 800e630:	d128      	bne.n	800e684 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e632:	6a3b      	ldr	r3, [r7, #32]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d005      	beq.n	800e644 <osMessageQueueGet+0x54>
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d002      	beq.n	800e644 <osMessageQueueGet+0x54>
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d003      	beq.n	800e64c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800e644:	f06f 0303 	mvn.w	r3, #3
 800e648:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e64a:	e038      	b.n	800e6be <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800e64c:	2300      	movs	r3, #0
 800e64e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e650:	f107 0310 	add.w	r3, r7, #16
 800e654:	461a      	mov	r2, r3
 800e656:	68b9      	ldr	r1, [r7, #8]
 800e658:	6a38      	ldr	r0, [r7, #32]
 800e65a:	f000 ff77 	bl	800f54c <xQueueReceiveFromISR>
 800e65e:	4603      	mov	r3, r0
 800e660:	2b01      	cmp	r3, #1
 800e662:	d003      	beq.n	800e66c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800e664:	f06f 0302 	mvn.w	r3, #2
 800e668:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e66a:	e028      	b.n	800e6be <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d025      	beq.n	800e6be <osMessageQueueGet+0xce>
 800e672:	4b17      	ldr	r3, [pc, #92]	; (800e6d0 <osMessageQueueGet+0xe0>)
 800e674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e678:	601a      	str	r2, [r3, #0]
 800e67a:	f3bf 8f4f 	dsb	sy
 800e67e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e682:	e01c      	b.n	800e6be <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e684:	6a3b      	ldr	r3, [r7, #32]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d002      	beq.n	800e690 <osMessageQueueGet+0xa0>
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d103      	bne.n	800e698 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800e690:	f06f 0303 	mvn.w	r3, #3
 800e694:	627b      	str	r3, [r7, #36]	; 0x24
 800e696:	e013      	b.n	800e6c0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e698:	683a      	ldr	r2, [r7, #0]
 800e69a:	68b9      	ldr	r1, [r7, #8]
 800e69c:	6a38      	ldr	r0, [r7, #32]
 800e69e:	f000 fd71 	bl	800f184 <xQueueReceive>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	d00b      	beq.n	800e6c0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d003      	beq.n	800e6b6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800e6ae:	f06f 0301 	mvn.w	r3, #1
 800e6b2:	627b      	str	r3, [r7, #36]	; 0x24
 800e6b4:	e004      	b.n	800e6c0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800e6b6:	f06f 0302 	mvn.w	r3, #2
 800e6ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e6bc:	e000      	b.n	800e6c0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e6be:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3728      	adds	r7, #40	; 0x28
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	200003a0 	.word	0x200003a0
 800e6d0:	e000ed04 	.word	0xe000ed04

0800e6d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	4a07      	ldr	r2, [pc, #28]	; (800e700 <vApplicationGetIdleTaskMemory+0x2c>)
 800e6e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	4a06      	ldr	r2, [pc, #24]	; (800e704 <vApplicationGetIdleTaskMemory+0x30>)
 800e6ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e6f2:	601a      	str	r2, [r3, #0]
}
 800e6f4:	bf00      	nop
 800e6f6:	3714      	adds	r7, #20
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr
 800e700:	200003a4 	.word	0x200003a4
 800e704:	20000400 	.word	0x20000400

0800e708 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e708:	b480      	push	{r7}
 800e70a:	b085      	sub	sp, #20
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	60b9      	str	r1, [r7, #8]
 800e712:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	4a07      	ldr	r2, [pc, #28]	; (800e734 <vApplicationGetTimerTaskMemory+0x2c>)
 800e718:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	4a06      	ldr	r2, [pc, #24]	; (800e738 <vApplicationGetTimerTaskMemory+0x30>)
 800e71e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e726:	601a      	str	r2, [r3, #0]
}
 800e728:	bf00      	nop
 800e72a:	3714      	adds	r7, #20
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr
 800e734:	20000c00 	.word	0x20000c00
 800e738:	20000c5c 	.word	0x20000c5c

0800e73c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e73c:	b480      	push	{r7}
 800e73e:	b083      	sub	sp, #12
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f103 0208 	add.w	r2, r3, #8
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f04f 32ff 	mov.w	r2, #4294967295
 800e754:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f103 0208 	add.w	r2, r3, #8
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f103 0208 	add.w	r2, r3, #8
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2200      	movs	r2, #0
 800e76e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e770:	bf00      	nop
 800e772:	370c      	adds	r7, #12
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr

0800e77c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e77c:	b480      	push	{r7}
 800e77e:	b083      	sub	sp, #12
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2200      	movs	r2, #0
 800e788:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e78a:	bf00      	nop
 800e78c:	370c      	adds	r7, #12
 800e78e:	46bd      	mov	sp, r7
 800e790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e794:	4770      	bx	lr

0800e796 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e796:	b480      	push	{r7}
 800e798:	b085      	sub	sp, #20
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
 800e79e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	68fa      	ldr	r2, [r7, #12]
 800e7aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	689a      	ldr	r2, [r3, #8]
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	689b      	ldr	r3, [r3, #8]
 800e7b8:	683a      	ldr	r2, [r7, #0]
 800e7ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	683a      	ldr	r2, [r7, #0]
 800e7c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	687a      	ldr	r2, [r7, #4]
 800e7c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	1c5a      	adds	r2, r3, #1
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	601a      	str	r2, [r3, #0]
}
 800e7d2:	bf00      	nop
 800e7d4:	3714      	adds	r7, #20
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr

0800e7de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e7de:	b480      	push	{r7}
 800e7e0:	b085      	sub	sp, #20
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
 800e7e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f4:	d103      	bne.n	800e7fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	691b      	ldr	r3, [r3, #16]
 800e7fa:	60fb      	str	r3, [r7, #12]
 800e7fc:	e00c      	b.n	800e818 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	3308      	adds	r3, #8
 800e802:	60fb      	str	r3, [r7, #12]
 800e804:	e002      	b.n	800e80c <vListInsert+0x2e>
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	60fb      	str	r3, [r7, #12]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	68ba      	ldr	r2, [r7, #8]
 800e814:	429a      	cmp	r2, r3
 800e816:	d2f6      	bcs.n	800e806 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	685a      	ldr	r2, [r3, #4]
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	683a      	ldr	r2, [r7, #0]
 800e826:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	683a      	ldr	r2, [r7, #0]
 800e832:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	1c5a      	adds	r2, r3, #1
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	601a      	str	r2, [r3, #0]
}
 800e844:	bf00      	nop
 800e846:	3714      	adds	r7, #20
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr

0800e850 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e850:	b480      	push	{r7}
 800e852:	b085      	sub	sp, #20
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	691b      	ldr	r3, [r3, #16]
 800e85c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	6892      	ldr	r2, [r2, #8]
 800e866:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	689b      	ldr	r3, [r3, #8]
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	6852      	ldr	r2, [r2, #4]
 800e870:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d103      	bne.n	800e884 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	689a      	ldr	r2, [r3, #8]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2200      	movs	r2, #0
 800e888:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	1e5a      	subs	r2, r3, #1
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3714      	adds	r7, #20
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr

0800e8a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d109      	bne.n	800e8cc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8bc:	f383 8811 	msr	BASEPRI, r3
 800e8c0:	f3bf 8f6f 	isb	sy
 800e8c4:	f3bf 8f4f 	dsb	sy
 800e8c8:	60bb      	str	r3, [r7, #8]
 800e8ca:	e7fe      	b.n	800e8ca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800e8cc:	f002 ff36 	bl	801173c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8d8:	68f9      	ldr	r1, [r7, #12]
 800e8da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e8dc:	fb01 f303 	mul.w	r3, r1, r3
 800e8e0:	441a      	add	r2, r3
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8fc:	3b01      	subs	r3, #1
 800e8fe:	68f9      	ldr	r1, [r7, #12]
 800e900:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e902:	fb01 f303 	mul.w	r3, r1, r3
 800e906:	441a      	add	r2, r3
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	22ff      	movs	r2, #255	; 0xff
 800e910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	22ff      	movs	r2, #255	; 0xff
 800e918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d114      	bne.n	800e94c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	691b      	ldr	r3, [r3, #16]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d01a      	beq.n	800e960 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	3310      	adds	r3, #16
 800e92e:	4618      	mov	r0, r3
 800e930:	f001 fce4 	bl	80102fc <xTaskRemoveFromEventList>
 800e934:	4603      	mov	r3, r0
 800e936:	2b00      	cmp	r3, #0
 800e938:	d012      	beq.n	800e960 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e93a:	4b0d      	ldr	r3, [pc, #52]	; (800e970 <xQueueGenericReset+0xcc>)
 800e93c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e940:	601a      	str	r2, [r3, #0]
 800e942:	f3bf 8f4f 	dsb	sy
 800e946:	f3bf 8f6f 	isb	sy
 800e94a:	e009      	b.n	800e960 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	3310      	adds	r3, #16
 800e950:	4618      	mov	r0, r3
 800e952:	f7ff fef3 	bl	800e73c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	3324      	adds	r3, #36	; 0x24
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7ff feee 	bl	800e73c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e960:	f002 ff1a 	bl	8011798 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e964:	2301      	movs	r3, #1
}
 800e966:	4618      	mov	r0, r3
 800e968:	3710      	adds	r7, #16
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	e000ed04 	.word	0xe000ed04

0800e974 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e974:	b580      	push	{r7, lr}
 800e976:	b08e      	sub	sp, #56	; 0x38
 800e978:	af02      	add	r7, sp, #8
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	607a      	str	r2, [r7, #4]
 800e980:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d109      	bne.n	800e99c <xQueueGenericCreateStatic+0x28>
 800e988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e98c:	f383 8811 	msr	BASEPRI, r3
 800e990:	f3bf 8f6f 	isb	sy
 800e994:	f3bf 8f4f 	dsb	sy
 800e998:	62bb      	str	r3, [r7, #40]	; 0x28
 800e99a:	e7fe      	b.n	800e99a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d109      	bne.n	800e9b6 <xQueueGenericCreateStatic+0x42>
 800e9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a6:	f383 8811 	msr	BASEPRI, r3
 800e9aa:	f3bf 8f6f 	isb	sy
 800e9ae:	f3bf 8f4f 	dsb	sy
 800e9b2:	627b      	str	r3, [r7, #36]	; 0x24
 800e9b4:	e7fe      	b.n	800e9b4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d002      	beq.n	800e9c2 <xQueueGenericCreateStatic+0x4e>
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d001      	beq.n	800e9c6 <xQueueGenericCreateStatic+0x52>
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	e000      	b.n	800e9c8 <xQueueGenericCreateStatic+0x54>
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d109      	bne.n	800e9e0 <xQueueGenericCreateStatic+0x6c>
 800e9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d0:	f383 8811 	msr	BASEPRI, r3
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	f3bf 8f4f 	dsb	sy
 800e9dc:	623b      	str	r3, [r7, #32]
 800e9de:	e7fe      	b.n	800e9de <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d102      	bne.n	800e9ec <xQueueGenericCreateStatic+0x78>
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d101      	bne.n	800e9f0 <xQueueGenericCreateStatic+0x7c>
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	e000      	b.n	800e9f2 <xQueueGenericCreateStatic+0x7e>
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d109      	bne.n	800ea0a <xQueueGenericCreateStatic+0x96>
 800e9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9fa:	f383 8811 	msr	BASEPRI, r3
 800e9fe:	f3bf 8f6f 	isb	sy
 800ea02:	f3bf 8f4f 	dsb	sy
 800ea06:	61fb      	str	r3, [r7, #28]
 800ea08:	e7fe      	b.n	800ea08 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ea0a:	2350      	movs	r3, #80	; 0x50
 800ea0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	2b50      	cmp	r3, #80	; 0x50
 800ea12:	d009      	beq.n	800ea28 <xQueueGenericCreateStatic+0xb4>
 800ea14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea18:	f383 8811 	msr	BASEPRI, r3
 800ea1c:	f3bf 8f6f 	isb	sy
 800ea20:	f3bf 8f4f 	dsb	sy
 800ea24:	61bb      	str	r3, [r7, #24]
 800ea26:	e7fe      	b.n	800ea26 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ea28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ea2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d00d      	beq.n	800ea50 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ea34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea36:	2201      	movs	r2, #1
 800ea38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea3c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ea40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea42:	9300      	str	r3, [sp, #0]
 800ea44:	4613      	mov	r3, r2
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	68b9      	ldr	r1, [r7, #8]
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f000 f844 	bl	800ead8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3730      	adds	r7, #48	; 0x30
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}

0800ea5a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ea5a:	b580      	push	{r7, lr}
 800ea5c:	b08a      	sub	sp, #40	; 0x28
 800ea5e:	af02      	add	r7, sp, #8
 800ea60:	60f8      	str	r0, [r7, #12]
 800ea62:	60b9      	str	r1, [r7, #8]
 800ea64:	4613      	mov	r3, r2
 800ea66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d109      	bne.n	800ea82 <xQueueGenericCreate+0x28>
 800ea6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea72:	f383 8811 	msr	BASEPRI, r3
 800ea76:	f3bf 8f6f 	isb	sy
 800ea7a:	f3bf 8f4f 	dsb	sy
 800ea7e:	613b      	str	r3, [r7, #16]
 800ea80:	e7fe      	b.n	800ea80 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d102      	bne.n	800ea8e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	61fb      	str	r3, [r7, #28]
 800ea8c:	e004      	b.n	800ea98 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	68ba      	ldr	r2, [r7, #8]
 800ea92:	fb02 f303 	mul.w	r3, r2, r3
 800ea96:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	3350      	adds	r3, #80	; 0x50
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f002 ff67 	bl	8011970 <pvPortMalloc>
 800eaa2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800eaa4:	69bb      	ldr	r3, [r7, #24]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d011      	beq.n	800eace <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800eaaa:	69bb      	ldr	r3, [r7, #24]
 800eaac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	3350      	adds	r3, #80	; 0x50
 800eab2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	2200      	movs	r2, #0
 800eab8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eabc:	79fa      	ldrb	r2, [r7, #7]
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	9300      	str	r3, [sp, #0]
 800eac2:	4613      	mov	r3, r2
 800eac4:	697a      	ldr	r2, [r7, #20]
 800eac6:	68b9      	ldr	r1, [r7, #8]
 800eac8:	68f8      	ldr	r0, [r7, #12]
 800eaca:	f000 f805 	bl	800ead8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800eace:	69bb      	ldr	r3, [r7, #24]
	}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3720      	adds	r7, #32
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	60b9      	str	r1, [r7, #8]
 800eae2:	607a      	str	r2, [r7, #4]
 800eae4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d103      	bne.n	800eaf4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eaec:	69bb      	ldr	r3, [r7, #24]
 800eaee:	69ba      	ldr	r2, [r7, #24]
 800eaf0:	601a      	str	r2, [r3, #0]
 800eaf2:	e002      	b.n	800eafa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800eaf4:	69bb      	ldr	r3, [r7, #24]
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800eafa:	69bb      	ldr	r3, [r7, #24]
 800eafc:	68fa      	ldr	r2, [r7, #12]
 800eafe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eb00:	69bb      	ldr	r3, [r7, #24]
 800eb02:	68ba      	ldr	r2, [r7, #8]
 800eb04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eb06:	2101      	movs	r1, #1
 800eb08:	69b8      	ldr	r0, [r7, #24]
 800eb0a:	f7ff fecb 	bl	800e8a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800eb0e:	69bb      	ldr	r3, [r7, #24]
 800eb10:	78fa      	ldrb	r2, [r7, #3]
 800eb12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eb16:	bf00      	nop
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}

0800eb1e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800eb1e:	b580      	push	{r7, lr}
 800eb20:	b082      	sub	sp, #8
 800eb22:	af00      	add	r7, sp, #0
 800eb24:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d00e      	beq.n	800eb4a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2200      	movs	r2, #0
 800eb36:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800eb3e:	2300      	movs	r3, #0
 800eb40:	2200      	movs	r2, #0
 800eb42:	2100      	movs	r1, #0
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f000 f905 	bl	800ed54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800eb4a:	bf00      	nop
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b086      	sub	sp, #24
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	4603      	mov	r3, r0
 800eb5a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	617b      	str	r3, [r7, #20]
 800eb60:	2300      	movs	r3, #0
 800eb62:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800eb64:	79fb      	ldrb	r3, [r7, #7]
 800eb66:	461a      	mov	r2, r3
 800eb68:	6939      	ldr	r1, [r7, #16]
 800eb6a:	6978      	ldr	r0, [r7, #20]
 800eb6c:	f7ff ff75 	bl	800ea5a <xQueueGenericCreate>
 800eb70:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800eb72:	68f8      	ldr	r0, [r7, #12]
 800eb74:	f7ff ffd3 	bl	800eb1e <prvInitialiseMutex>

		return xNewQueue;
 800eb78:	68fb      	ldr	r3, [r7, #12]
	}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3718      	adds	r7, #24
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}

0800eb82 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800eb82:	b580      	push	{r7, lr}
 800eb84:	b088      	sub	sp, #32
 800eb86:	af02      	add	r7, sp, #8
 800eb88:	4603      	mov	r3, r0
 800eb8a:	6039      	str	r1, [r7, #0]
 800eb8c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	617b      	str	r3, [r7, #20]
 800eb92:	2300      	movs	r3, #0
 800eb94:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800eb96:	79fb      	ldrb	r3, [r7, #7]
 800eb98:	9300      	str	r3, [sp, #0]
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	6939      	ldr	r1, [r7, #16]
 800eba0:	6978      	ldr	r0, [r7, #20]
 800eba2:	f7ff fee7 	bl	800e974 <xQueueGenericCreateStatic>
 800eba6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800eba8:	68f8      	ldr	r0, [r7, #12]
 800ebaa:	f7ff ffb8 	bl	800eb1e <prvInitialiseMutex>

		return xNewQueue;
 800ebae:	68fb      	ldr	r3, [r7, #12]
	}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3718      	adds	r7, #24
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ebb8:	b590      	push	{r4, r7, lr}
 800ebba:	b087      	sub	sp, #28
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d109      	bne.n	800ebde <xQueueGiveMutexRecursive+0x26>
 800ebca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebce:	f383 8811 	msr	BASEPRI, r3
 800ebd2:	f3bf 8f6f 	isb	sy
 800ebd6:	f3bf 8f4f 	dsb	sy
 800ebda:	60fb      	str	r3, [r7, #12]
 800ebdc:	e7fe      	b.n	800ebdc <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	689c      	ldr	r4, [r3, #8]
 800ebe2:	f001 fd69 	bl	80106b8 <xTaskGetCurrentTaskHandle>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	429c      	cmp	r4, r3
 800ebea:	d111      	bne.n	800ec10 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	68db      	ldr	r3, [r3, #12]
 800ebf0:	1e5a      	subs	r2, r3, #1
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	68db      	ldr	r3, [r3, #12]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d105      	bne.n	800ec0a <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ebfe:	2300      	movs	r3, #0
 800ec00:	2200      	movs	r2, #0
 800ec02:	2100      	movs	r1, #0
 800ec04:	6938      	ldr	r0, [r7, #16]
 800ec06:	f000 f8a5 	bl	800ed54 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	617b      	str	r3, [r7, #20]
 800ec0e:	e001      	b.n	800ec14 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800ec10:	2300      	movs	r3, #0
 800ec12:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ec14:	697b      	ldr	r3, [r7, #20]
	}
 800ec16:	4618      	mov	r0, r3
 800ec18:	371c      	adds	r7, #28
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd90      	pop	{r4, r7, pc}

0800ec1e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ec1e:	b590      	push	{r4, r7, lr}
 800ec20:	b087      	sub	sp, #28
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
 800ec26:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d109      	bne.n	800ec46 <xQueueTakeMutexRecursive+0x28>
 800ec32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec36:	f383 8811 	msr	BASEPRI, r3
 800ec3a:	f3bf 8f6f 	isb	sy
 800ec3e:	f3bf 8f4f 	dsb	sy
 800ec42:	60fb      	str	r3, [r7, #12]
 800ec44:	e7fe      	b.n	800ec44 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	689c      	ldr	r4, [r3, #8]
 800ec4a:	f001 fd35 	bl	80106b8 <xTaskGetCurrentTaskHandle>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	429c      	cmp	r4, r3
 800ec52:	d107      	bne.n	800ec64 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	1c5a      	adds	r2, r3, #1
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ec5e:	2301      	movs	r3, #1
 800ec60:	617b      	str	r3, [r7, #20]
 800ec62:	e00c      	b.n	800ec7e <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ec64:	6839      	ldr	r1, [r7, #0]
 800ec66:	6938      	ldr	r0, [r7, #16]
 800ec68:	f000 fb68 	bl	800f33c <xQueueSemaphoreTake>
 800ec6c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d004      	beq.n	800ec7e <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	68db      	ldr	r3, [r3, #12]
 800ec78:	1c5a      	adds	r2, r3, #1
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800ec7e:	697b      	ldr	r3, [r7, #20]
	}
 800ec80:	4618      	mov	r0, r3
 800ec82:	371c      	adds	r7, #28
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd90      	pop	{r4, r7, pc}

0800ec88 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b08a      	sub	sp, #40	; 0x28
 800ec8c:	af02      	add	r7, sp, #8
 800ec8e:	60f8      	str	r0, [r7, #12]
 800ec90:	60b9      	str	r1, [r7, #8]
 800ec92:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d109      	bne.n	800ecae <xQueueCreateCountingSemaphoreStatic+0x26>
 800ec9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec9e:	f383 8811 	msr	BASEPRI, r3
 800eca2:	f3bf 8f6f 	isb	sy
 800eca6:	f3bf 8f4f 	dsb	sy
 800ecaa:	61bb      	str	r3, [r7, #24]
 800ecac:	e7fe      	b.n	800ecac <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ecae:	68ba      	ldr	r2, [r7, #8]
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d909      	bls.n	800ecca <xQueueCreateCountingSemaphoreStatic+0x42>
 800ecb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecba:	f383 8811 	msr	BASEPRI, r3
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	617b      	str	r3, [r7, #20]
 800ecc8:	e7fe      	b.n	800ecc8 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ecca:	2302      	movs	r3, #2
 800eccc:	9300      	str	r3, [sp, #0]
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	2100      	movs	r1, #0
 800ecd4:	68f8      	ldr	r0, [r7, #12]
 800ecd6:	f7ff fe4d 	bl	800e974 <xQueueGenericCreateStatic>
 800ecda:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d002      	beq.n	800ece8 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ece2:	69fb      	ldr	r3, [r7, #28]
 800ece4:	68ba      	ldr	r2, [r7, #8]
 800ece6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ece8:	69fb      	ldr	r3, [r7, #28]
	}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3720      	adds	r7, #32
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}

0800ecf2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ecf2:	b580      	push	{r7, lr}
 800ecf4:	b086      	sub	sp, #24
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	6078      	str	r0, [r7, #4]
 800ecfa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d109      	bne.n	800ed16 <xQueueCreateCountingSemaphore+0x24>
 800ed02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed06:	f383 8811 	msr	BASEPRI, r3
 800ed0a:	f3bf 8f6f 	isb	sy
 800ed0e:	f3bf 8f4f 	dsb	sy
 800ed12:	613b      	str	r3, [r7, #16]
 800ed14:	e7fe      	b.n	800ed14 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ed16:	683a      	ldr	r2, [r7, #0]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d909      	bls.n	800ed32 <xQueueCreateCountingSemaphore+0x40>
 800ed1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed22:	f383 8811 	msr	BASEPRI, r3
 800ed26:	f3bf 8f6f 	isb	sy
 800ed2a:	f3bf 8f4f 	dsb	sy
 800ed2e:	60fb      	str	r3, [r7, #12]
 800ed30:	e7fe      	b.n	800ed30 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ed32:	2202      	movs	r2, #2
 800ed34:	2100      	movs	r1, #0
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f7ff fe8f 	bl	800ea5a <xQueueGenericCreate>
 800ed3c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d002      	beq.n	800ed4a <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	683a      	ldr	r2, [r7, #0]
 800ed48:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ed4a:	697b      	ldr	r3, [r7, #20]
	}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3718      	adds	r7, #24
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b08e      	sub	sp, #56	; 0x38
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60f8      	str	r0, [r7, #12]
 800ed5c:	60b9      	str	r1, [r7, #8]
 800ed5e:	607a      	str	r2, [r7, #4]
 800ed60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ed62:	2300      	movs	r3, #0
 800ed64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ed6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d109      	bne.n	800ed84 <xQueueGenericSend+0x30>
 800ed70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed74:	f383 8811 	msr	BASEPRI, r3
 800ed78:	f3bf 8f6f 	isb	sy
 800ed7c:	f3bf 8f4f 	dsb	sy
 800ed80:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed82:	e7fe      	b.n	800ed82 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d103      	bne.n	800ed92 <xQueueGenericSend+0x3e>
 800ed8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d101      	bne.n	800ed96 <xQueueGenericSend+0x42>
 800ed92:	2301      	movs	r3, #1
 800ed94:	e000      	b.n	800ed98 <xQueueGenericSend+0x44>
 800ed96:	2300      	movs	r3, #0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d109      	bne.n	800edb0 <xQueueGenericSend+0x5c>
 800ed9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda0:	f383 8811 	msr	BASEPRI, r3
 800eda4:	f3bf 8f6f 	isb	sy
 800eda8:	f3bf 8f4f 	dsb	sy
 800edac:	627b      	str	r3, [r7, #36]	; 0x24
 800edae:	e7fe      	b.n	800edae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	2b02      	cmp	r3, #2
 800edb4:	d103      	bne.n	800edbe <xQueueGenericSend+0x6a>
 800edb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d101      	bne.n	800edc2 <xQueueGenericSend+0x6e>
 800edbe:	2301      	movs	r3, #1
 800edc0:	e000      	b.n	800edc4 <xQueueGenericSend+0x70>
 800edc2:	2300      	movs	r3, #0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d109      	bne.n	800eddc <xQueueGenericSend+0x88>
 800edc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edcc:	f383 8811 	msr	BASEPRI, r3
 800edd0:	f3bf 8f6f 	isb	sy
 800edd4:	f3bf 8f4f 	dsb	sy
 800edd8:	623b      	str	r3, [r7, #32]
 800edda:	e7fe      	b.n	800edda <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eddc:	f001 fc7c 	bl	80106d8 <xTaskGetSchedulerState>
 800ede0:	4603      	mov	r3, r0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d102      	bne.n	800edec <xQueueGenericSend+0x98>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d101      	bne.n	800edf0 <xQueueGenericSend+0x9c>
 800edec:	2301      	movs	r3, #1
 800edee:	e000      	b.n	800edf2 <xQueueGenericSend+0x9e>
 800edf0:	2300      	movs	r3, #0
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d109      	bne.n	800ee0a <xQueueGenericSend+0xb6>
 800edf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfa:	f383 8811 	msr	BASEPRI, r3
 800edfe:	f3bf 8f6f 	isb	sy
 800ee02:	f3bf 8f4f 	dsb	sy
 800ee06:	61fb      	str	r3, [r7, #28]
 800ee08:	e7fe      	b.n	800ee08 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee0a:	f002 fc97 	bl	801173c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ee0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d302      	bcc.n	800ee20 <xQueueGenericSend+0xcc>
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	2b02      	cmp	r3, #2
 800ee1e:	d129      	bne.n	800ee74 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ee20:	683a      	ldr	r2, [r7, #0]
 800ee22:	68b9      	ldr	r1, [r7, #8]
 800ee24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee26:	f000 fc48 	bl	800f6ba <prvCopyDataToQueue>
 800ee2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d010      	beq.n	800ee56 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee36:	3324      	adds	r3, #36	; 0x24
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f001 fa5f 	bl	80102fc <xTaskRemoveFromEventList>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d013      	beq.n	800ee6c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ee44:	4b3f      	ldr	r3, [pc, #252]	; (800ef44 <xQueueGenericSend+0x1f0>)
 800ee46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee4a:	601a      	str	r2, [r3, #0]
 800ee4c:	f3bf 8f4f 	dsb	sy
 800ee50:	f3bf 8f6f 	isb	sy
 800ee54:	e00a      	b.n	800ee6c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ee56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d007      	beq.n	800ee6c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ee5c:	4b39      	ldr	r3, [pc, #228]	; (800ef44 <xQueueGenericSend+0x1f0>)
 800ee5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee62:	601a      	str	r2, [r3, #0]
 800ee64:	f3bf 8f4f 	dsb	sy
 800ee68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ee6c:	f002 fc94 	bl	8011798 <vPortExitCritical>
				return pdPASS;
 800ee70:	2301      	movs	r3, #1
 800ee72:	e063      	b.n	800ef3c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d103      	bne.n	800ee82 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ee7a:	f002 fc8d 	bl	8011798 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	e05c      	b.n	800ef3c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d106      	bne.n	800ee96 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee88:	f107 0314 	add.w	r3, r7, #20
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f001 fa99 	bl	80103c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee92:	2301      	movs	r3, #1
 800ee94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ee96:	f002 fc7f 	bl	8011798 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ee9a:	f000 ffdb 	bl	800fe54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee9e:	f002 fc4d 	bl	801173c <vPortEnterCritical>
 800eea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eea8:	b25b      	sxtb	r3, r3
 800eeaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeae:	d103      	bne.n	800eeb8 <xQueueGenericSend+0x164>
 800eeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eebe:	b25b      	sxtb	r3, r3
 800eec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eec4:	d103      	bne.n	800eece <xQueueGenericSend+0x17a>
 800eec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec8:	2200      	movs	r2, #0
 800eeca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eece:	f002 fc63 	bl	8011798 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eed2:	1d3a      	adds	r2, r7, #4
 800eed4:	f107 0314 	add.w	r3, r7, #20
 800eed8:	4611      	mov	r1, r2
 800eeda:	4618      	mov	r0, r3
 800eedc:	f001 fa88 	bl	80103f0 <xTaskCheckForTimeOut>
 800eee0:	4603      	mov	r3, r0
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d124      	bne.n	800ef30 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eee8:	f000 fcdf 	bl	800f8aa <prvIsQueueFull>
 800eeec:	4603      	mov	r3, r0
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d018      	beq.n	800ef24 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef4:	3310      	adds	r3, #16
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	4611      	mov	r1, r2
 800eefa:	4618      	mov	r0, r3
 800eefc:	f001 f9b0 	bl	8010260 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ef00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef02:	f000 fc6a 	bl	800f7da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ef06:	f000 ffeb 	bl	800fee0 <xTaskResumeAll>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	f47f af7c 	bne.w	800ee0a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ef12:	4b0c      	ldr	r3, [pc, #48]	; (800ef44 <xQueueGenericSend+0x1f0>)
 800ef14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef18:	601a      	str	r2, [r3, #0]
 800ef1a:	f3bf 8f4f 	dsb	sy
 800ef1e:	f3bf 8f6f 	isb	sy
 800ef22:	e772      	b.n	800ee0a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ef24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef26:	f000 fc58 	bl	800f7da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef2a:	f000 ffd9 	bl	800fee0 <xTaskResumeAll>
 800ef2e:	e76c      	b.n	800ee0a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ef30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef32:	f000 fc52 	bl	800f7da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef36:	f000 ffd3 	bl	800fee0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ef3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3738      	adds	r7, #56	; 0x38
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	e000ed04 	.word	0xe000ed04

0800ef48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b08e      	sub	sp, #56	; 0x38
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	60b9      	str	r1, [r7, #8]
 800ef52:	607a      	str	r2, [r7, #4]
 800ef54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ef5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d109      	bne.n	800ef74 <xQueueGenericSendFromISR+0x2c>
 800ef60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef64:	f383 8811 	msr	BASEPRI, r3
 800ef68:	f3bf 8f6f 	isb	sy
 800ef6c:	f3bf 8f4f 	dsb	sy
 800ef70:	627b      	str	r3, [r7, #36]	; 0x24
 800ef72:	e7fe      	b.n	800ef72 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d103      	bne.n	800ef82 <xQueueGenericSendFromISR+0x3a>
 800ef7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d101      	bne.n	800ef86 <xQueueGenericSendFromISR+0x3e>
 800ef82:	2301      	movs	r3, #1
 800ef84:	e000      	b.n	800ef88 <xQueueGenericSendFromISR+0x40>
 800ef86:	2300      	movs	r3, #0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d109      	bne.n	800efa0 <xQueueGenericSendFromISR+0x58>
 800ef8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef90:	f383 8811 	msr	BASEPRI, r3
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	f3bf 8f4f 	dsb	sy
 800ef9c:	623b      	str	r3, [r7, #32]
 800ef9e:	e7fe      	b.n	800ef9e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	2b02      	cmp	r3, #2
 800efa4:	d103      	bne.n	800efae <xQueueGenericSendFromISR+0x66>
 800efa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efaa:	2b01      	cmp	r3, #1
 800efac:	d101      	bne.n	800efb2 <xQueueGenericSendFromISR+0x6a>
 800efae:	2301      	movs	r3, #1
 800efb0:	e000      	b.n	800efb4 <xQueueGenericSendFromISR+0x6c>
 800efb2:	2300      	movs	r3, #0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d109      	bne.n	800efcc <xQueueGenericSendFromISR+0x84>
 800efb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efbc:	f383 8811 	msr	BASEPRI, r3
 800efc0:	f3bf 8f6f 	isb	sy
 800efc4:	f3bf 8f4f 	dsb	sy
 800efc8:	61fb      	str	r3, [r7, #28]
 800efca:	e7fe      	b.n	800efca <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800efcc:	f002 fc92 	bl	80118f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800efd0:	f3ef 8211 	mrs	r2, BASEPRI
 800efd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd8:	f383 8811 	msr	BASEPRI, r3
 800efdc:	f3bf 8f6f 	isb	sy
 800efe0:	f3bf 8f4f 	dsb	sy
 800efe4:	61ba      	str	r2, [r7, #24]
 800efe6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800efe8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800efea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800efec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d302      	bcc.n	800effe <xQueueGenericSendFromISR+0xb6>
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	2b02      	cmp	r3, #2
 800effc:	d12c      	bne.n	800f058 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800effe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f004:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f008:	683a      	ldr	r2, [r7, #0]
 800f00a:	68b9      	ldr	r1, [r7, #8]
 800f00c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f00e:	f000 fb54 	bl	800f6ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f012:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f01a:	d112      	bne.n	800f042 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f020:	2b00      	cmp	r3, #0
 800f022:	d016      	beq.n	800f052 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f026:	3324      	adds	r3, #36	; 0x24
 800f028:	4618      	mov	r0, r3
 800f02a:	f001 f967 	bl	80102fc <xTaskRemoveFromEventList>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d00e      	beq.n	800f052 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d00b      	beq.n	800f052 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2201      	movs	r2, #1
 800f03e:	601a      	str	r2, [r3, #0]
 800f040:	e007      	b.n	800f052 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f042:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f046:	3301      	adds	r3, #1
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	b25a      	sxtb	r2, r3
 800f04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f052:	2301      	movs	r3, #1
 800f054:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f056:	e001      	b.n	800f05c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f058:	2300      	movs	r3, #0
 800f05a:	637b      	str	r3, [r7, #52]	; 0x34
 800f05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3738      	adds	r7, #56	; 0x38
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b08e      	sub	sp, #56	; 0x38
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f080:	2b00      	cmp	r3, #0
 800f082:	d109      	bne.n	800f098 <xQueueGiveFromISR+0x28>
	__asm volatile
 800f084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f088:	f383 8811 	msr	BASEPRI, r3
 800f08c:	f3bf 8f6f 	isb	sy
 800f090:	f3bf 8f4f 	dsb	sy
 800f094:	623b      	str	r3, [r7, #32]
 800f096:	e7fe      	b.n	800f096 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d009      	beq.n	800f0b4 <xQueueGiveFromISR+0x44>
 800f0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a4:	f383 8811 	msr	BASEPRI, r3
 800f0a8:	f3bf 8f6f 	isb	sy
 800f0ac:	f3bf 8f4f 	dsb	sy
 800f0b0:	61fb      	str	r3, [r7, #28]
 800f0b2:	e7fe      	b.n	800f0b2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d103      	bne.n	800f0c4 <xQueueGiveFromISR+0x54>
 800f0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d101      	bne.n	800f0c8 <xQueueGiveFromISR+0x58>
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	e000      	b.n	800f0ca <xQueueGiveFromISR+0x5a>
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d109      	bne.n	800f0e2 <xQueueGiveFromISR+0x72>
 800f0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d2:	f383 8811 	msr	BASEPRI, r3
 800f0d6:	f3bf 8f6f 	isb	sy
 800f0da:	f3bf 8f4f 	dsb	sy
 800f0de:	61bb      	str	r3, [r7, #24]
 800f0e0:	e7fe      	b.n	800f0e0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f0e2:	f002 fc07 	bl	80118f4 <vPortValidateInterruptPriority>
	__asm volatile
 800f0e6:	f3ef 8211 	mrs	r2, BASEPRI
 800f0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ee:	f383 8811 	msr	BASEPRI, r3
 800f0f2:	f3bf 8f6f 	isb	sy
 800f0f6:	f3bf 8f4f 	dsb	sy
 800f0fa:	617a      	str	r2, [r7, #20]
 800f0fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f0fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f100:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f106:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f10c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f10e:	429a      	cmp	r2, r3
 800f110:	d22b      	bcs.n	800f16a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11e:	1c5a      	adds	r2, r3, #1
 800f120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f122:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f124:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f12c:	d112      	bne.n	800f154 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f132:	2b00      	cmp	r3, #0
 800f134:	d016      	beq.n	800f164 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f138:	3324      	adds	r3, #36	; 0x24
 800f13a:	4618      	mov	r0, r3
 800f13c:	f001 f8de 	bl	80102fc <xTaskRemoveFromEventList>
 800f140:	4603      	mov	r3, r0
 800f142:	2b00      	cmp	r3, #0
 800f144:	d00e      	beq.n	800f164 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d00b      	beq.n	800f164 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	2201      	movs	r2, #1
 800f150:	601a      	str	r2, [r3, #0]
 800f152:	e007      	b.n	800f164 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f158:	3301      	adds	r3, #1
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	b25a      	sxtb	r2, r3
 800f15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f164:	2301      	movs	r3, #1
 800f166:	637b      	str	r3, [r7, #52]	; 0x34
 800f168:	e001      	b.n	800f16e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f16a:	2300      	movs	r3, #0
 800f16c:	637b      	str	r3, [r7, #52]	; 0x34
 800f16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f170:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3738      	adds	r7, #56	; 0x38
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
	...

0800f184 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b08c      	sub	sp, #48	; 0x30
 800f188:	af00      	add	r7, sp, #0
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	60b9      	str	r1, [r7, #8]
 800f18e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f190:	2300      	movs	r3, #0
 800f192:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d109      	bne.n	800f1b2 <xQueueReceive+0x2e>
	__asm volatile
 800f19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	623b      	str	r3, [r7, #32]
 800f1b0:	e7fe      	b.n	800f1b0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d103      	bne.n	800f1c0 <xQueueReceive+0x3c>
 800f1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d101      	bne.n	800f1c4 <xQueueReceive+0x40>
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	e000      	b.n	800f1c6 <xQueueReceive+0x42>
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d109      	bne.n	800f1de <xQueueReceive+0x5a>
 800f1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ce:	f383 8811 	msr	BASEPRI, r3
 800f1d2:	f3bf 8f6f 	isb	sy
 800f1d6:	f3bf 8f4f 	dsb	sy
 800f1da:	61fb      	str	r3, [r7, #28]
 800f1dc:	e7fe      	b.n	800f1dc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f1de:	f001 fa7b 	bl	80106d8 <xTaskGetSchedulerState>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d102      	bne.n	800f1ee <xQueueReceive+0x6a>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d101      	bne.n	800f1f2 <xQueueReceive+0x6e>
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e000      	b.n	800f1f4 <xQueueReceive+0x70>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d109      	bne.n	800f20c <xQueueReceive+0x88>
 800f1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1fc:	f383 8811 	msr	BASEPRI, r3
 800f200:	f3bf 8f6f 	isb	sy
 800f204:	f3bf 8f4f 	dsb	sy
 800f208:	61bb      	str	r3, [r7, #24]
 800f20a:	e7fe      	b.n	800f20a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f20c:	f002 fa96 	bl	801173c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f214:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d01f      	beq.n	800f25c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f21c:	68b9      	ldr	r1, [r7, #8]
 800f21e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f220:	f000 fab5 	bl	800f78e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f226:	1e5a      	subs	r2, r3, #1
 800f228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f22a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f22e:	691b      	ldr	r3, [r3, #16]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d00f      	beq.n	800f254 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f236:	3310      	adds	r3, #16
 800f238:	4618      	mov	r0, r3
 800f23a:	f001 f85f 	bl	80102fc <xTaskRemoveFromEventList>
 800f23e:	4603      	mov	r3, r0
 800f240:	2b00      	cmp	r3, #0
 800f242:	d007      	beq.n	800f254 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f244:	4b3c      	ldr	r3, [pc, #240]	; (800f338 <xQueueReceive+0x1b4>)
 800f246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f24a:	601a      	str	r2, [r3, #0]
 800f24c:	f3bf 8f4f 	dsb	sy
 800f250:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f254:	f002 faa0 	bl	8011798 <vPortExitCritical>
				return pdPASS;
 800f258:	2301      	movs	r3, #1
 800f25a:	e069      	b.n	800f330 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d103      	bne.n	800f26a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f262:	f002 fa99 	bl	8011798 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f266:	2300      	movs	r3, #0
 800f268:	e062      	b.n	800f330 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d106      	bne.n	800f27e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f270:	f107 0310 	add.w	r3, r7, #16
 800f274:	4618      	mov	r0, r3
 800f276:	f001 f8a5 	bl	80103c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f27a:	2301      	movs	r3, #1
 800f27c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f27e:	f002 fa8b 	bl	8011798 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f282:	f000 fde7 	bl	800fe54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f286:	f002 fa59 	bl	801173c <vPortEnterCritical>
 800f28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f290:	b25b      	sxtb	r3, r3
 800f292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f296:	d103      	bne.n	800f2a0 <xQueueReceive+0x11c>
 800f298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29a:	2200      	movs	r2, #0
 800f29c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2a6:	b25b      	sxtb	r3, r3
 800f2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ac:	d103      	bne.n	800f2b6 <xQueueReceive+0x132>
 800f2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f2b6:	f002 fa6f 	bl	8011798 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f2ba:	1d3a      	adds	r2, r7, #4
 800f2bc:	f107 0310 	add.w	r3, r7, #16
 800f2c0:	4611      	mov	r1, r2
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f001 f894 	bl	80103f0 <xTaskCheckForTimeOut>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d123      	bne.n	800f316 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2d0:	f000 fad5 	bl	800f87e <prvIsQueueEmpty>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d017      	beq.n	800f30a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2dc:	3324      	adds	r3, #36	; 0x24
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	4611      	mov	r1, r2
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f000 ffbc 	bl	8010260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f2e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2ea:	f000 fa76 	bl	800f7da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f2ee:	f000 fdf7 	bl	800fee0 <xTaskResumeAll>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d189      	bne.n	800f20c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800f2f8:	4b0f      	ldr	r3, [pc, #60]	; (800f338 <xQueueReceive+0x1b4>)
 800f2fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2fe:	601a      	str	r2, [r3, #0]
 800f300:	f3bf 8f4f 	dsb	sy
 800f304:	f3bf 8f6f 	isb	sy
 800f308:	e780      	b.n	800f20c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f30a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f30c:	f000 fa65 	bl	800f7da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f310:	f000 fde6 	bl	800fee0 <xTaskResumeAll>
 800f314:	e77a      	b.n	800f20c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f318:	f000 fa5f 	bl	800f7da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f31c:	f000 fde0 	bl	800fee0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f322:	f000 faac 	bl	800f87e <prvIsQueueEmpty>
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	f43f af6f 	beq.w	800f20c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f32e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f330:	4618      	mov	r0, r3
 800f332:	3730      	adds	r7, #48	; 0x30
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	e000ed04 	.word	0xe000ed04

0800f33c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b08e      	sub	sp, #56	; 0x38
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f346:	2300      	movs	r3, #0
 800f348:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f34e:	2300      	movs	r3, #0
 800f350:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f354:	2b00      	cmp	r3, #0
 800f356:	d109      	bne.n	800f36c <xQueueSemaphoreTake+0x30>
 800f358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f35c:	f383 8811 	msr	BASEPRI, r3
 800f360:	f3bf 8f6f 	isb	sy
 800f364:	f3bf 8f4f 	dsb	sy
 800f368:	623b      	str	r3, [r7, #32]
 800f36a:	e7fe      	b.n	800f36a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f370:	2b00      	cmp	r3, #0
 800f372:	d009      	beq.n	800f388 <xQueueSemaphoreTake+0x4c>
 800f374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f378:	f383 8811 	msr	BASEPRI, r3
 800f37c:	f3bf 8f6f 	isb	sy
 800f380:	f3bf 8f4f 	dsb	sy
 800f384:	61fb      	str	r3, [r7, #28]
 800f386:	e7fe      	b.n	800f386 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f388:	f001 f9a6 	bl	80106d8 <xTaskGetSchedulerState>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d102      	bne.n	800f398 <xQueueSemaphoreTake+0x5c>
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d101      	bne.n	800f39c <xQueueSemaphoreTake+0x60>
 800f398:	2301      	movs	r3, #1
 800f39a:	e000      	b.n	800f39e <xQueueSemaphoreTake+0x62>
 800f39c:	2300      	movs	r3, #0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d109      	bne.n	800f3b6 <xQueueSemaphoreTake+0x7a>
 800f3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3a6:	f383 8811 	msr	BASEPRI, r3
 800f3aa:	f3bf 8f6f 	isb	sy
 800f3ae:	f3bf 8f4f 	dsb	sy
 800f3b2:	61bb      	str	r3, [r7, #24]
 800f3b4:	e7fe      	b.n	800f3b4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f3b6:	f002 f9c1 	bl	801173c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3be:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d024      	beq.n	800f410 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c8:	1e5a      	subs	r2, r3, #1
 800f3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3cc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d104      	bne.n	800f3e0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f3d6:	f001 faf1 	bl	80109bc <pvTaskIncrementMutexHeldCount>
 800f3da:	4602      	mov	r2, r0
 800f3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3de:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e2:	691b      	ldr	r3, [r3, #16]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d00f      	beq.n	800f408 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ea:	3310      	adds	r3, #16
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f000 ff85 	bl	80102fc <xTaskRemoveFromEventList>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d007      	beq.n	800f408 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f3f8:	4b53      	ldr	r3, [pc, #332]	; (800f548 <xQueueSemaphoreTake+0x20c>)
 800f3fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3fe:	601a      	str	r2, [r3, #0]
 800f400:	f3bf 8f4f 	dsb	sy
 800f404:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f408:	f002 f9c6 	bl	8011798 <vPortExitCritical>
				return pdPASS;
 800f40c:	2301      	movs	r3, #1
 800f40e:	e096      	b.n	800f53e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d110      	bne.n	800f438 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d009      	beq.n	800f430 <xQueueSemaphoreTake+0xf4>
 800f41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f420:	f383 8811 	msr	BASEPRI, r3
 800f424:	f3bf 8f6f 	isb	sy
 800f428:	f3bf 8f4f 	dsb	sy
 800f42c:	617b      	str	r3, [r7, #20]
 800f42e:	e7fe      	b.n	800f42e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f430:	f002 f9b2 	bl	8011798 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f434:	2300      	movs	r3, #0
 800f436:	e082      	b.n	800f53e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d106      	bne.n	800f44c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f43e:	f107 030c 	add.w	r3, r7, #12
 800f442:	4618      	mov	r0, r3
 800f444:	f000 ffbe 	bl	80103c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f448:	2301      	movs	r3, #1
 800f44a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f44c:	f002 f9a4 	bl	8011798 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f450:	f000 fd00 	bl	800fe54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f454:	f002 f972 	bl	801173c <vPortEnterCritical>
 800f458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f45e:	b25b      	sxtb	r3, r3
 800f460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f464:	d103      	bne.n	800f46e <xQueueSemaphoreTake+0x132>
 800f466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f468:	2200      	movs	r2, #0
 800f46a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f474:	b25b      	sxtb	r3, r3
 800f476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f47a:	d103      	bne.n	800f484 <xQueueSemaphoreTake+0x148>
 800f47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47e:	2200      	movs	r2, #0
 800f480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f484:	f002 f988 	bl	8011798 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f488:	463a      	mov	r2, r7
 800f48a:	f107 030c 	add.w	r3, r7, #12
 800f48e:	4611      	mov	r1, r2
 800f490:	4618      	mov	r0, r3
 800f492:	f000 ffad 	bl	80103f0 <xTaskCheckForTimeOut>
 800f496:	4603      	mov	r3, r0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d132      	bne.n	800f502 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f49c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f49e:	f000 f9ee 	bl	800f87e <prvIsQueueEmpty>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d026      	beq.n	800f4f6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d109      	bne.n	800f4c4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800f4b0:	f002 f944 	bl	801173c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b6:	689b      	ldr	r3, [r3, #8]
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f001 f92b 	bl	8010714 <xTaskPriorityInherit>
 800f4be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f4c0:	f002 f96a 	bl	8011798 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c6:	3324      	adds	r3, #36	; 0x24
 800f4c8:	683a      	ldr	r2, [r7, #0]
 800f4ca:	4611      	mov	r1, r2
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f000 fec7 	bl	8010260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f4d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4d4:	f000 f981 	bl	800f7da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f4d8:	f000 fd02 	bl	800fee0 <xTaskResumeAll>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	f47f af69 	bne.w	800f3b6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800f4e4:	4b18      	ldr	r3, [pc, #96]	; (800f548 <xQueueSemaphoreTake+0x20c>)
 800f4e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4ea:	601a      	str	r2, [r3, #0]
 800f4ec:	f3bf 8f4f 	dsb	sy
 800f4f0:	f3bf 8f6f 	isb	sy
 800f4f4:	e75f      	b.n	800f3b6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f4f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4f8:	f000 f96f 	bl	800f7da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f4fc:	f000 fcf0 	bl	800fee0 <xTaskResumeAll>
 800f500:	e759      	b.n	800f3b6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f504:	f000 f969 	bl	800f7da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f508:	f000 fcea 	bl	800fee0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f50c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f50e:	f000 f9b6 	bl	800f87e <prvIsQueueEmpty>
 800f512:	4603      	mov	r3, r0
 800f514:	2b00      	cmp	r3, #0
 800f516:	f43f af4e 	beq.w	800f3b6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d00d      	beq.n	800f53c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800f520:	f002 f90c 	bl	801173c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f526:	f000 f8b0 	bl	800f68a <prvGetDisinheritPriorityAfterTimeout>
 800f52a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f532:	4618      	mov	r0, r3
 800f534:	f001 f9c2 	bl	80108bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f538:	f002 f92e 	bl	8011798 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f53c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3738      	adds	r7, #56	; 0x38
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	e000ed04 	.word	0xe000ed04

0800f54c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b08e      	sub	sp, #56	; 0x38
 800f550:	af00      	add	r7, sp, #0
 800f552:	60f8      	str	r0, [r7, #12]
 800f554:	60b9      	str	r1, [r7, #8]
 800f556:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d109      	bne.n	800f576 <xQueueReceiveFromISR+0x2a>
 800f562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f566:	f383 8811 	msr	BASEPRI, r3
 800f56a:	f3bf 8f6f 	isb	sy
 800f56e:	f3bf 8f4f 	dsb	sy
 800f572:	623b      	str	r3, [r7, #32]
 800f574:	e7fe      	b.n	800f574 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d103      	bne.n	800f584 <xQueueReceiveFromISR+0x38>
 800f57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f580:	2b00      	cmp	r3, #0
 800f582:	d101      	bne.n	800f588 <xQueueReceiveFromISR+0x3c>
 800f584:	2301      	movs	r3, #1
 800f586:	e000      	b.n	800f58a <xQueueReceiveFromISR+0x3e>
 800f588:	2300      	movs	r3, #0
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d109      	bne.n	800f5a2 <xQueueReceiveFromISR+0x56>
 800f58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f592:	f383 8811 	msr	BASEPRI, r3
 800f596:	f3bf 8f6f 	isb	sy
 800f59a:	f3bf 8f4f 	dsb	sy
 800f59e:	61fb      	str	r3, [r7, #28]
 800f5a0:	e7fe      	b.n	800f5a0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f5a2:	f002 f9a7 	bl	80118f4 <vPortValidateInterruptPriority>
	__asm volatile
 800f5a6:	f3ef 8211 	mrs	r2, BASEPRI
 800f5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ae:	f383 8811 	msr	BASEPRI, r3
 800f5b2:	f3bf 8f6f 	isb	sy
 800f5b6:	f3bf 8f4f 	dsb	sy
 800f5ba:	61ba      	str	r2, [r7, #24]
 800f5bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f5be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d02f      	beq.n	800f62e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f5d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f5d8:	68b9      	ldr	r1, [r7, #8]
 800f5da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5dc:	f000 f8d7 	bl	800f78e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e2:	1e5a      	subs	r2, r3, #1
 800f5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f5e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5f0:	d112      	bne.n	800f618 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f4:	691b      	ldr	r3, [r3, #16]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d016      	beq.n	800f628 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fc:	3310      	adds	r3, #16
 800f5fe:	4618      	mov	r0, r3
 800f600:	f000 fe7c 	bl	80102fc <xTaskRemoveFromEventList>
 800f604:	4603      	mov	r3, r0
 800f606:	2b00      	cmp	r3, #0
 800f608:	d00e      	beq.n	800f628 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d00b      	beq.n	800f628 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2201      	movs	r2, #1
 800f614:	601a      	str	r2, [r3, #0]
 800f616:	e007      	b.n	800f628 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f61c:	3301      	adds	r3, #1
 800f61e:	b2db      	uxtb	r3, r3
 800f620:	b25a      	sxtb	r2, r3
 800f622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f628:	2301      	movs	r3, #1
 800f62a:	637b      	str	r3, [r7, #52]	; 0x34
 800f62c:	e001      	b.n	800f632 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800f62e:	2300      	movs	r3, #0
 800f630:	637b      	str	r3, [r7, #52]	; 0x34
 800f632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f634:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f63e:	4618      	mov	r0, r3
 800f640:	3738      	adds	r7, #56	; 0x38
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}

0800f646 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f646:	b580      	push	{r7, lr}
 800f648:	b084      	sub	sp, #16
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d109      	bne.n	800f66c <vQueueDelete+0x26>
	__asm volatile
 800f658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f65c:	f383 8811 	msr	BASEPRI, r3
 800f660:	f3bf 8f6f 	isb	sy
 800f664:	f3bf 8f4f 	dsb	sy
 800f668:	60bb      	str	r3, [r7, #8]
 800f66a:	e7fe      	b.n	800f66a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f66c:	68f8      	ldr	r0, [r7, #12]
 800f66e:	f000 f95d 	bl	800f92c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d102      	bne.n	800f682 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800f67c:	68f8      	ldr	r0, [r7, #12]
 800f67e:	f002 fa39 	bl	8011af4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f682:	bf00      	nop
 800f684:	3710      	adds	r7, #16
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}

0800f68a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f68a:	b480      	push	{r7}
 800f68c:	b085      	sub	sp, #20
 800f68e:	af00      	add	r7, sp, #0
 800f690:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f696:	2b00      	cmp	r3, #0
 800f698:	d006      	beq.n	800f6a8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f6a4:	60fb      	str	r3, [r7, #12]
 800f6a6:	e001      	b.n	800f6ac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
	}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3714      	adds	r7, #20
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b8:	4770      	bx	lr

0800f6ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f6ba:	b580      	push	{r7, lr}
 800f6bc:	b086      	sub	sp, #24
 800f6be:	af00      	add	r7, sp, #0
 800f6c0:	60f8      	str	r0, [r7, #12]
 800f6c2:	60b9      	str	r1, [r7, #8]
 800f6c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d10d      	bne.n	800f6f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d14d      	bne.n	800f77c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	689b      	ldr	r3, [r3, #8]
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f001 f87d 	bl	80107e4 <xTaskPriorityDisinherit>
 800f6ea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	609a      	str	r2, [r3, #8]
 800f6f2:	e043      	b.n	800f77c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d119      	bne.n	800f72e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	6858      	ldr	r0, [r3, #4]
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f702:	461a      	mov	r2, r3
 800f704:	68b9      	ldr	r1, [r7, #8]
 800f706:	f004 f895 	bl	8013834 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	685a      	ldr	r2, [r3, #4]
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f712:	441a      	add	r2, r3
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	685a      	ldr	r2, [r3, #4]
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	689b      	ldr	r3, [r3, #8]
 800f720:	429a      	cmp	r2, r3
 800f722:	d32b      	bcc.n	800f77c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	681a      	ldr	r2, [r3, #0]
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	605a      	str	r2, [r3, #4]
 800f72c:	e026      	b.n	800f77c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	68d8      	ldr	r0, [r3, #12]
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f736:	461a      	mov	r2, r3
 800f738:	68b9      	ldr	r1, [r7, #8]
 800f73a:	f004 f87b 	bl	8013834 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	68da      	ldr	r2, [r3, #12]
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f746:	425b      	negs	r3, r3
 800f748:	441a      	add	r2, r3
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	68da      	ldr	r2, [r3, #12]
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	429a      	cmp	r2, r3
 800f758:	d207      	bcs.n	800f76a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	689a      	ldr	r2, [r3, #8]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f762:	425b      	negs	r3, r3
 800f764:	441a      	add	r2, r3
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2b02      	cmp	r3, #2
 800f76e:	d105      	bne.n	800f77c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d002      	beq.n	800f77c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	3b01      	subs	r3, #1
 800f77a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	1c5a      	adds	r2, r3, #1
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f784:	697b      	ldr	r3, [r7, #20]
}
 800f786:	4618      	mov	r0, r3
 800f788:	3718      	adds	r7, #24
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}

0800f78e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f78e:	b580      	push	{r7, lr}
 800f790:	b082      	sub	sp, #8
 800f792:	af00      	add	r7, sp, #0
 800f794:	6078      	str	r0, [r7, #4]
 800f796:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d018      	beq.n	800f7d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	68da      	ldr	r2, [r3, #12]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7a8:	441a      	add	r2, r3
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	68da      	ldr	r2, [r3, #12]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	689b      	ldr	r3, [r3, #8]
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d303      	bcc.n	800f7c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681a      	ldr	r2, [r3, #0]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	68d9      	ldr	r1, [r3, #12]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	6838      	ldr	r0, [r7, #0]
 800f7ce:	f004 f831 	bl	8013834 <memcpy>
	}
}
 800f7d2:	bf00      	nop
 800f7d4:	3708      	adds	r7, #8
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f7da:	b580      	push	{r7, lr}
 800f7dc:	b084      	sub	sp, #16
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f7e2:	f001 ffab 	bl	801173c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f7ee:	e011      	b.n	800f814 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d012      	beq.n	800f81e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	3324      	adds	r3, #36	; 0x24
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f000 fd7d 	bl	80102fc <xTaskRemoveFromEventList>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	d001      	beq.n	800f80c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f808:	f000 fe52 	bl	80104b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f80c:	7bfb      	ldrb	r3, [r7, #15]
 800f80e:	3b01      	subs	r3, #1
 800f810:	b2db      	uxtb	r3, r3
 800f812:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	dce9      	bgt.n	800f7f0 <prvUnlockQueue+0x16>
 800f81c:	e000      	b.n	800f820 <prvUnlockQueue+0x46>
					break;
 800f81e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	22ff      	movs	r2, #255	; 0xff
 800f824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f828:	f001 ffb6 	bl	8011798 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f82c:	f001 ff86 	bl	801173c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f836:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f838:	e011      	b.n	800f85e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	691b      	ldr	r3, [r3, #16]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d012      	beq.n	800f868 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	3310      	adds	r3, #16
 800f846:	4618      	mov	r0, r3
 800f848:	f000 fd58 	bl	80102fc <xTaskRemoveFromEventList>
 800f84c:	4603      	mov	r3, r0
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d001      	beq.n	800f856 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f852:	f000 fe2d 	bl	80104b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f856:	7bbb      	ldrb	r3, [r7, #14]
 800f858:	3b01      	subs	r3, #1
 800f85a:	b2db      	uxtb	r3, r3
 800f85c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f85e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f862:	2b00      	cmp	r3, #0
 800f864:	dce9      	bgt.n	800f83a <prvUnlockQueue+0x60>
 800f866:	e000      	b.n	800f86a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f868:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	22ff      	movs	r2, #255	; 0xff
 800f86e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f872:	f001 ff91 	bl	8011798 <vPortExitCritical>
}
 800f876:	bf00      	nop
 800f878:	3710      	adds	r7, #16
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}

0800f87e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f87e:	b580      	push	{r7, lr}
 800f880:	b084      	sub	sp, #16
 800f882:	af00      	add	r7, sp, #0
 800f884:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f886:	f001 ff59 	bl	801173c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d102      	bne.n	800f898 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f892:	2301      	movs	r3, #1
 800f894:	60fb      	str	r3, [r7, #12]
 800f896:	e001      	b.n	800f89c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f898:	2300      	movs	r3, #0
 800f89a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f89c:	f001 ff7c 	bl	8011798 <vPortExitCritical>

	return xReturn;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3710      	adds	r7, #16
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}

0800f8aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f8aa:	b580      	push	{r7, lr}
 800f8ac:	b084      	sub	sp, #16
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f8b2:	f001 ff43 	bl	801173c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d102      	bne.n	800f8c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	60fb      	str	r3, [r7, #12]
 800f8c6:	e001      	b.n	800f8cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f8cc:	f001 ff64 	bl	8011798 <vPortExitCritical>

	return xReturn;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3710      	adds	r7, #16
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
	...

0800f8dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f8dc:	b480      	push	{r7}
 800f8de:	b085      	sub	sp, #20
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	60fb      	str	r3, [r7, #12]
 800f8ea:	e014      	b.n	800f916 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f8ec:	4a0e      	ldr	r2, [pc, #56]	; (800f928 <vQueueAddToRegistry+0x4c>)
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d10b      	bne.n	800f910 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f8f8:	490b      	ldr	r1, [pc, #44]	; (800f928 <vQueueAddToRegistry+0x4c>)
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	683a      	ldr	r2, [r7, #0]
 800f8fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f902:	4a09      	ldr	r2, [pc, #36]	; (800f928 <vQueueAddToRegistry+0x4c>)
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	00db      	lsls	r3, r3, #3
 800f908:	4413      	add	r3, r2
 800f90a:	687a      	ldr	r2, [r7, #4]
 800f90c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f90e:	e005      	b.n	800f91c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	3301      	adds	r3, #1
 800f914:	60fb      	str	r3, [r7, #12]
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2b07      	cmp	r3, #7
 800f91a:	d9e7      	bls.n	800f8ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f91c:	bf00      	nop
 800f91e:	3714      	adds	r7, #20
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr
 800f928:	20004fc4 	.word	0x20004fc4

0800f92c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f92c:	b480      	push	{r7}
 800f92e:	b085      	sub	sp, #20
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f934:	2300      	movs	r3, #0
 800f936:	60fb      	str	r3, [r7, #12]
 800f938:	e016      	b.n	800f968 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f93a:	4a10      	ldr	r2, [pc, #64]	; (800f97c <vQueueUnregisterQueue+0x50>)
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	00db      	lsls	r3, r3, #3
 800f940:	4413      	add	r3, r2
 800f942:	685b      	ldr	r3, [r3, #4]
 800f944:	687a      	ldr	r2, [r7, #4]
 800f946:	429a      	cmp	r2, r3
 800f948:	d10b      	bne.n	800f962 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f94a:	4a0c      	ldr	r2, [pc, #48]	; (800f97c <vQueueUnregisterQueue+0x50>)
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2100      	movs	r1, #0
 800f950:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f954:	4a09      	ldr	r2, [pc, #36]	; (800f97c <vQueueUnregisterQueue+0x50>)
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	00db      	lsls	r3, r3, #3
 800f95a:	4413      	add	r3, r2
 800f95c:	2200      	movs	r2, #0
 800f95e:	605a      	str	r2, [r3, #4]
				break;
 800f960:	e005      	b.n	800f96e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	3301      	adds	r3, #1
 800f966:	60fb      	str	r3, [r7, #12]
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2b07      	cmp	r3, #7
 800f96c:	d9e5      	bls.n	800f93a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f96e:	bf00      	nop
 800f970:	3714      	adds	r7, #20
 800f972:	46bd      	mov	sp, r7
 800f974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f978:	4770      	bx	lr
 800f97a:	bf00      	nop
 800f97c:	20004fc4 	.word	0x20004fc4

0800f980 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f980:	b580      	push	{r7, lr}
 800f982:	b086      	sub	sp, #24
 800f984:	af00      	add	r7, sp, #0
 800f986:	60f8      	str	r0, [r7, #12]
 800f988:	60b9      	str	r1, [r7, #8]
 800f98a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f990:	f001 fed4 	bl	801173c <vPortEnterCritical>
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f99a:	b25b      	sxtb	r3, r3
 800f99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9a0:	d103      	bne.n	800f9aa <vQueueWaitForMessageRestricted+0x2a>
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9b0:	b25b      	sxtb	r3, r3
 800f9b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9b6:	d103      	bne.n	800f9c0 <vQueueWaitForMessageRestricted+0x40>
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9c0:	f001 feea 	bl	8011798 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d106      	bne.n	800f9da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	3324      	adds	r3, #36	; 0x24
 800f9d0:	687a      	ldr	r2, [r7, #4]
 800f9d2:	68b9      	ldr	r1, [r7, #8]
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f000 fc67 	bl	80102a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f9da:	6978      	ldr	r0, [r7, #20]
 800f9dc:	f7ff fefd 	bl	800f7da <prvUnlockQueue>
	}
 800f9e0:	bf00      	nop
 800f9e2:	3718      	adds	r7, #24
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b08e      	sub	sp, #56	; 0x38
 800f9ec:	af04      	add	r7, sp, #16
 800f9ee:	60f8      	str	r0, [r7, #12]
 800f9f0:	60b9      	str	r1, [r7, #8]
 800f9f2:	607a      	str	r2, [r7, #4]
 800f9f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d109      	bne.n	800fa10 <xTaskCreateStatic+0x28>
 800f9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa00:	f383 8811 	msr	BASEPRI, r3
 800fa04:	f3bf 8f6f 	isb	sy
 800fa08:	f3bf 8f4f 	dsb	sy
 800fa0c:	623b      	str	r3, [r7, #32]
 800fa0e:	e7fe      	b.n	800fa0e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800fa10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d109      	bne.n	800fa2a <xTaskCreateStatic+0x42>
 800fa16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa1a:	f383 8811 	msr	BASEPRI, r3
 800fa1e:	f3bf 8f6f 	isb	sy
 800fa22:	f3bf 8f4f 	dsb	sy
 800fa26:	61fb      	str	r3, [r7, #28]
 800fa28:	e7fe      	b.n	800fa28 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fa2a:	235c      	movs	r3, #92	; 0x5c
 800fa2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	2b5c      	cmp	r3, #92	; 0x5c
 800fa32:	d009      	beq.n	800fa48 <xTaskCreateStatic+0x60>
 800fa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa38:	f383 8811 	msr	BASEPRI, r3
 800fa3c:	f3bf 8f6f 	isb	sy
 800fa40:	f3bf 8f4f 	dsb	sy
 800fa44:	61bb      	str	r3, [r7, #24]
 800fa46:	e7fe      	b.n	800fa46 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fa48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d01e      	beq.n	800fa8e <xTaskCreateStatic+0xa6>
 800fa50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d01b      	beq.n	800fa8e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa58:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa5e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa62:	2202      	movs	r2, #2
 800fa64:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fa68:	2300      	movs	r3, #0
 800fa6a:	9303      	str	r3, [sp, #12]
 800fa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6e:	9302      	str	r3, [sp, #8]
 800fa70:	f107 0314 	add.w	r3, r7, #20
 800fa74:	9301      	str	r3, [sp, #4]
 800fa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	687a      	ldr	r2, [r7, #4]
 800fa7e:	68b9      	ldr	r1, [r7, #8]
 800fa80:	68f8      	ldr	r0, [r7, #12]
 800fa82:	f000 f850 	bl	800fb26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fa86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa88:	f000 f8dc 	bl	800fc44 <prvAddNewTaskToReadyList>
 800fa8c:	e001      	b.n	800fa92 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fa92:	697b      	ldr	r3, [r7, #20]
	}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3728      	adds	r7, #40	; 0x28
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b08c      	sub	sp, #48	; 0x30
 800faa0:	af04      	add	r7, sp, #16
 800faa2:	60f8      	str	r0, [r7, #12]
 800faa4:	60b9      	str	r1, [r7, #8]
 800faa6:	603b      	str	r3, [r7, #0]
 800faa8:	4613      	mov	r3, r2
 800faaa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800faac:	88fb      	ldrh	r3, [r7, #6]
 800faae:	009b      	lsls	r3, r3, #2
 800fab0:	4618      	mov	r0, r3
 800fab2:	f001 ff5d 	bl	8011970 <pvPortMalloc>
 800fab6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d00e      	beq.n	800fadc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fabe:	205c      	movs	r0, #92	; 0x5c
 800fac0:	f001 ff56 	bl	8011970 <pvPortMalloc>
 800fac4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fac6:	69fb      	ldr	r3, [r7, #28]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d003      	beq.n	800fad4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800facc:	69fb      	ldr	r3, [r7, #28]
 800face:	697a      	ldr	r2, [r7, #20]
 800fad0:	631a      	str	r2, [r3, #48]	; 0x30
 800fad2:	e005      	b.n	800fae0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fad4:	6978      	ldr	r0, [r7, #20]
 800fad6:	f002 f80d 	bl	8011af4 <vPortFree>
 800fada:	e001      	b.n	800fae0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fadc:	2300      	movs	r3, #0
 800fade:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d017      	beq.n	800fb16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fae6:	69fb      	ldr	r3, [r7, #28]
 800fae8:	2200      	movs	r2, #0
 800faea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800faee:	88fa      	ldrh	r2, [r7, #6]
 800faf0:	2300      	movs	r3, #0
 800faf2:	9303      	str	r3, [sp, #12]
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	9302      	str	r3, [sp, #8]
 800faf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafa:	9301      	str	r3, [sp, #4]
 800fafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafe:	9300      	str	r3, [sp, #0]
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	68b9      	ldr	r1, [r7, #8]
 800fb04:	68f8      	ldr	r0, [r7, #12]
 800fb06:	f000 f80e 	bl	800fb26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fb0a:	69f8      	ldr	r0, [r7, #28]
 800fb0c:	f000 f89a 	bl	800fc44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fb10:	2301      	movs	r3, #1
 800fb12:	61bb      	str	r3, [r7, #24]
 800fb14:	e002      	b.n	800fb1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fb16:	f04f 33ff 	mov.w	r3, #4294967295
 800fb1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fb1c:	69bb      	ldr	r3, [r7, #24]
	}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3720      	adds	r7, #32
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}

0800fb26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fb26:	b580      	push	{r7, lr}
 800fb28:	b088      	sub	sp, #32
 800fb2a:	af00      	add	r7, sp, #0
 800fb2c:	60f8      	str	r0, [r7, #12]
 800fb2e:	60b9      	str	r1, [r7, #8]
 800fb30:	607a      	str	r2, [r7, #4]
 800fb32:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	009b      	lsls	r3, r3, #2
 800fb3c:	461a      	mov	r2, r3
 800fb3e:	21a5      	movs	r1, #165	; 0xa5
 800fb40:	f003 fe83 	bl	801384a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fb4e:	3b01      	subs	r3, #1
 800fb50:	009b      	lsls	r3, r3, #2
 800fb52:	4413      	add	r3, r2
 800fb54:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	f023 0307 	bic.w	r3, r3, #7
 800fb5c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	f003 0307 	and.w	r3, r3, #7
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d009      	beq.n	800fb7c <prvInitialiseNewTask+0x56>
 800fb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb6c:	f383 8811 	msr	BASEPRI, r3
 800fb70:	f3bf 8f6f 	isb	sy
 800fb74:	f3bf 8f4f 	dsb	sy
 800fb78:	617b      	str	r3, [r7, #20]
 800fb7a:	e7fe      	b.n	800fb7a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d01f      	beq.n	800fbc2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fb82:	2300      	movs	r3, #0
 800fb84:	61fb      	str	r3, [r7, #28]
 800fb86:	e012      	b.n	800fbae <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fb88:	68ba      	ldr	r2, [r7, #8]
 800fb8a:	69fb      	ldr	r3, [r7, #28]
 800fb8c:	4413      	add	r3, r2
 800fb8e:	7819      	ldrb	r1, [r3, #0]
 800fb90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	4413      	add	r3, r2
 800fb96:	3334      	adds	r3, #52	; 0x34
 800fb98:	460a      	mov	r2, r1
 800fb9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fb9c:	68ba      	ldr	r2, [r7, #8]
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	4413      	add	r3, r2
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d006      	beq.n	800fbb6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fba8:	69fb      	ldr	r3, [r7, #28]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	61fb      	str	r3, [r7, #28]
 800fbae:	69fb      	ldr	r3, [r7, #28]
 800fbb0:	2b0f      	cmp	r3, #15
 800fbb2:	d9e9      	bls.n	800fb88 <prvInitialiseNewTask+0x62>
 800fbb4:	e000      	b.n	800fbb8 <prvInitialiseNewTask+0x92>
			{
				break;
 800fbb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fbc0:	e003      	b.n	800fbca <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbcc:	2b37      	cmp	r3, #55	; 0x37
 800fbce:	d901      	bls.n	800fbd4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fbd0:	2337      	movs	r3, #55	; 0x37
 800fbd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe8:	3304      	adds	r3, #4
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7fe fdc6 	bl	800e77c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf2:	3318      	adds	r3, #24
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7fe fdc1 	bl	800e77c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc12:	2200      	movs	r2, #0
 800fc14:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc18:	2200      	movs	r2, #0
 800fc1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fc1e:	683a      	ldr	r2, [r7, #0]
 800fc20:	68f9      	ldr	r1, [r7, #12]
 800fc22:	69b8      	ldr	r0, [r7, #24]
 800fc24:	f001 fc60 	bl	80114e8 <pxPortInitialiseStack>
 800fc28:	4602      	mov	r2, r0
 800fc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d002      	beq.n	800fc3a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc3a:	bf00      	nop
 800fc3c:	3720      	adds	r7, #32
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
	...

0800fc44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fc4c:	f001 fd76 	bl	801173c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fc50:	4b2d      	ldr	r3, [pc, #180]	; (800fd08 <prvAddNewTaskToReadyList+0xc4>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	3301      	adds	r3, #1
 800fc56:	4a2c      	ldr	r2, [pc, #176]	; (800fd08 <prvAddNewTaskToReadyList+0xc4>)
 800fc58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fc5a:	4b2c      	ldr	r3, [pc, #176]	; (800fd0c <prvAddNewTaskToReadyList+0xc8>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d109      	bne.n	800fc76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fc62:	4a2a      	ldr	r2, [pc, #168]	; (800fd0c <prvAddNewTaskToReadyList+0xc8>)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fc68:	4b27      	ldr	r3, [pc, #156]	; (800fd08 <prvAddNewTaskToReadyList+0xc4>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d110      	bne.n	800fc92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fc70:	f000 fc68 	bl	8010544 <prvInitialiseTaskLists>
 800fc74:	e00d      	b.n	800fc92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fc76:	4b26      	ldr	r3, [pc, #152]	; (800fd10 <prvAddNewTaskToReadyList+0xcc>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d109      	bne.n	800fc92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fc7e:	4b23      	ldr	r3, [pc, #140]	; (800fd0c <prvAddNewTaskToReadyList+0xc8>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d802      	bhi.n	800fc92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fc8c:	4a1f      	ldr	r2, [pc, #124]	; (800fd0c <prvAddNewTaskToReadyList+0xc8>)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fc92:	4b20      	ldr	r3, [pc, #128]	; (800fd14 <prvAddNewTaskToReadyList+0xd0>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	3301      	adds	r3, #1
 800fc98:	4a1e      	ldr	r2, [pc, #120]	; (800fd14 <prvAddNewTaskToReadyList+0xd0>)
 800fc9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fc9c:	4b1d      	ldr	r3, [pc, #116]	; (800fd14 <prvAddNewTaskToReadyList+0xd0>)
 800fc9e:	681a      	ldr	r2, [r3, #0]
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fca8:	4b1b      	ldr	r3, [pc, #108]	; (800fd18 <prvAddNewTaskToReadyList+0xd4>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d903      	bls.n	800fcb8 <prvAddNewTaskToReadyList+0x74>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcb4:	4a18      	ldr	r2, [pc, #96]	; (800fd18 <prvAddNewTaskToReadyList+0xd4>)
 800fcb6:	6013      	str	r3, [r2, #0]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcbc:	4613      	mov	r3, r2
 800fcbe:	009b      	lsls	r3, r3, #2
 800fcc0:	4413      	add	r3, r2
 800fcc2:	009b      	lsls	r3, r3, #2
 800fcc4:	4a15      	ldr	r2, [pc, #84]	; (800fd1c <prvAddNewTaskToReadyList+0xd8>)
 800fcc6:	441a      	add	r2, r3
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	3304      	adds	r3, #4
 800fccc:	4619      	mov	r1, r3
 800fcce:	4610      	mov	r0, r2
 800fcd0:	f7fe fd61 	bl	800e796 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fcd4:	f001 fd60 	bl	8011798 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fcd8:	4b0d      	ldr	r3, [pc, #52]	; (800fd10 <prvAddNewTaskToReadyList+0xcc>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d00e      	beq.n	800fcfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fce0:	4b0a      	ldr	r3, [pc, #40]	; (800fd0c <prvAddNewTaskToReadyList+0xc8>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d207      	bcs.n	800fcfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fcee:	4b0c      	ldr	r3, [pc, #48]	; (800fd20 <prvAddNewTaskToReadyList+0xdc>)
 800fcf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcf4:	601a      	str	r2, [r3, #0]
 800fcf6:	f3bf 8f4f 	dsb	sy
 800fcfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fcfe:	bf00      	nop
 800fd00:	3708      	adds	r7, #8
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
 800fd06:	bf00      	nop
 800fd08:	20002130 	.word	0x20002130
 800fd0c:	20001c5c 	.word	0x20001c5c
 800fd10:	2000213c 	.word	0x2000213c
 800fd14:	2000214c 	.word	0x2000214c
 800fd18:	20002138 	.word	0x20002138
 800fd1c:	20001c60 	.word	0x20001c60
 800fd20:	e000ed04 	.word	0xe000ed04

0800fd24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b084      	sub	sp, #16
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d016      	beq.n	800fd64 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fd36:	4b13      	ldr	r3, [pc, #76]	; (800fd84 <vTaskDelay+0x60>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d009      	beq.n	800fd52 <vTaskDelay+0x2e>
 800fd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd42:	f383 8811 	msr	BASEPRI, r3
 800fd46:	f3bf 8f6f 	isb	sy
 800fd4a:	f3bf 8f4f 	dsb	sy
 800fd4e:	60bb      	str	r3, [r7, #8]
 800fd50:	e7fe      	b.n	800fd50 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800fd52:	f000 f87f 	bl	800fe54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fd56:	2100      	movs	r1, #0
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f001 f82b 	bl	8010db4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fd5e:	f000 f8bf 	bl	800fee0 <xTaskResumeAll>
 800fd62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d107      	bne.n	800fd7a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800fd6a:	4b07      	ldr	r3, [pc, #28]	; (800fd88 <vTaskDelay+0x64>)
 800fd6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd70:	601a      	str	r2, [r3, #0]
 800fd72:	f3bf 8f4f 	dsb	sy
 800fd76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fd7a:	bf00      	nop
 800fd7c:	3710      	adds	r7, #16
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop
 800fd84:	20002158 	.word	0x20002158
 800fd88:	e000ed04 	.word	0xe000ed04

0800fd8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b08a      	sub	sp, #40	; 0x28
 800fd90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fd92:	2300      	movs	r3, #0
 800fd94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fd96:	2300      	movs	r3, #0
 800fd98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fd9a:	463a      	mov	r2, r7
 800fd9c:	1d39      	adds	r1, r7, #4
 800fd9e:	f107 0308 	add.w	r3, r7, #8
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7fe fc96 	bl	800e6d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fda8:	6839      	ldr	r1, [r7, #0]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	68ba      	ldr	r2, [r7, #8]
 800fdae:	9202      	str	r2, [sp, #8]
 800fdb0:	9301      	str	r3, [sp, #4]
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	9300      	str	r3, [sp, #0]
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	460a      	mov	r2, r1
 800fdba:	4920      	ldr	r1, [pc, #128]	; (800fe3c <vTaskStartScheduler+0xb0>)
 800fdbc:	4820      	ldr	r0, [pc, #128]	; (800fe40 <vTaskStartScheduler+0xb4>)
 800fdbe:	f7ff fe13 	bl	800f9e8 <xTaskCreateStatic>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	4b1f      	ldr	r3, [pc, #124]	; (800fe44 <vTaskStartScheduler+0xb8>)
 800fdc6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fdc8:	4b1e      	ldr	r3, [pc, #120]	; (800fe44 <vTaskStartScheduler+0xb8>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d002      	beq.n	800fdd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	617b      	str	r3, [r7, #20]
 800fdd4:	e001      	b.n	800fdda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	2b01      	cmp	r3, #1
 800fdde:	d102      	bne.n	800fde6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fde0:	f001 f83c 	bl	8010e5c <xTimerCreateTimerTask>
 800fde4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	2b01      	cmp	r3, #1
 800fdea:	d115      	bne.n	800fe18 <vTaskStartScheduler+0x8c>
 800fdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf0:	f383 8811 	msr	BASEPRI, r3
 800fdf4:	f3bf 8f6f 	isb	sy
 800fdf8:	f3bf 8f4f 	dsb	sy
 800fdfc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fdfe:	4b12      	ldr	r3, [pc, #72]	; (800fe48 <vTaskStartScheduler+0xbc>)
 800fe00:	f04f 32ff 	mov.w	r2, #4294967295
 800fe04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fe06:	4b11      	ldr	r3, [pc, #68]	; (800fe4c <vTaskStartScheduler+0xc0>)
 800fe08:	2201      	movs	r2, #1
 800fe0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fe0c:	4b10      	ldr	r3, [pc, #64]	; (800fe50 <vTaskStartScheduler+0xc4>)
 800fe0e:	2200      	movs	r2, #0
 800fe10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fe12:	f001 fbf5 	bl	8011600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fe16:	e00d      	b.n	800fe34 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe1e:	d109      	bne.n	800fe34 <vTaskStartScheduler+0xa8>
 800fe20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe24:	f383 8811 	msr	BASEPRI, r3
 800fe28:	f3bf 8f6f 	isb	sy
 800fe2c:	f3bf 8f4f 	dsb	sy
 800fe30:	60fb      	str	r3, [r7, #12]
 800fe32:	e7fe      	b.n	800fe32 <vTaskStartScheduler+0xa6>
}
 800fe34:	bf00      	nop
 800fe36:	3718      	adds	r7, #24
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	0801393c 	.word	0x0801393c
 800fe40:	080104c9 	.word	0x080104c9
 800fe44:	20002154 	.word	0x20002154
 800fe48:	20002150 	.word	0x20002150
 800fe4c:	2000213c 	.word	0x2000213c
 800fe50:	20002134 	.word	0x20002134

0800fe54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fe54:	b480      	push	{r7}
 800fe56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fe58:	4b04      	ldr	r3, [pc, #16]	; (800fe6c <vTaskSuspendAll+0x18>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	4a03      	ldr	r2, [pc, #12]	; (800fe6c <vTaskSuspendAll+0x18>)
 800fe60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fe62:	bf00      	nop
 800fe64:	46bd      	mov	sp, r7
 800fe66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6a:	4770      	bx	lr
 800fe6c:	20002158 	.word	0x20002158

0800fe70 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800fe70:	b480      	push	{r7}
 800fe72:	b083      	sub	sp, #12
 800fe74:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800fe76:	2300      	movs	r3, #0
 800fe78:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800fe7a:	4b14      	ldr	r3, [pc, #80]	; (800fecc <prvGetExpectedIdleTime+0x5c>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d001      	beq.n	800fe86 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800fe82:	2301      	movs	r3, #1
 800fe84:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800fe86:	4b12      	ldr	r3, [pc, #72]	; (800fed0 <prvGetExpectedIdleTime+0x60>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d002      	beq.n	800fe96 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800fe90:	2300      	movs	r3, #0
 800fe92:	607b      	str	r3, [r7, #4]
 800fe94:	e012      	b.n	800febc <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800fe96:	4b0f      	ldr	r3, [pc, #60]	; (800fed4 <prvGetExpectedIdleTime+0x64>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	d902      	bls.n	800fea4 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	607b      	str	r3, [r7, #4]
 800fea2:	e00b      	b.n	800febc <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d002      	beq.n	800feb0 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800feaa:	2300      	movs	r3, #0
 800feac:	607b      	str	r3, [r7, #4]
 800feae:	e005      	b.n	800febc <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800feb0:	4b09      	ldr	r3, [pc, #36]	; (800fed8 <prvGetExpectedIdleTime+0x68>)
 800feb2:	681a      	ldr	r2, [r3, #0]
 800feb4:	4b09      	ldr	r3, [pc, #36]	; (800fedc <prvGetExpectedIdleTime+0x6c>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	1ad3      	subs	r3, r2, r3
 800feba:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800febc:	687b      	ldr	r3, [r7, #4]
	}
 800febe:	4618      	mov	r0, r3
 800fec0:	370c      	adds	r7, #12
 800fec2:	46bd      	mov	sp, r7
 800fec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec8:	4770      	bx	lr
 800feca:	bf00      	nop
 800fecc:	20002138 	.word	0x20002138
 800fed0:	20001c5c 	.word	0x20001c5c
 800fed4:	20001c60 	.word	0x20001c60
 800fed8:	20002150 	.word	0x20002150
 800fedc:	20002134 	.word	0x20002134

0800fee0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b084      	sub	sp, #16
 800fee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fee6:	2300      	movs	r3, #0
 800fee8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800feea:	2300      	movs	r3, #0
 800feec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800feee:	4b41      	ldr	r3, [pc, #260]	; (800fff4 <xTaskResumeAll+0x114>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d109      	bne.n	800ff0a <xTaskResumeAll+0x2a>
 800fef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fefa:	f383 8811 	msr	BASEPRI, r3
 800fefe:	f3bf 8f6f 	isb	sy
 800ff02:	f3bf 8f4f 	dsb	sy
 800ff06:	603b      	str	r3, [r7, #0]
 800ff08:	e7fe      	b.n	800ff08 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ff0a:	f001 fc17 	bl	801173c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ff0e:	4b39      	ldr	r3, [pc, #228]	; (800fff4 <xTaskResumeAll+0x114>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	3b01      	subs	r3, #1
 800ff14:	4a37      	ldr	r2, [pc, #220]	; (800fff4 <xTaskResumeAll+0x114>)
 800ff16:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff18:	4b36      	ldr	r3, [pc, #216]	; (800fff4 <xTaskResumeAll+0x114>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d162      	bne.n	800ffe6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ff20:	4b35      	ldr	r3, [pc, #212]	; (800fff8 <xTaskResumeAll+0x118>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d05e      	beq.n	800ffe6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ff28:	e02f      	b.n	800ff8a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff2a:	4b34      	ldr	r3, [pc, #208]	; (800fffc <xTaskResumeAll+0x11c>)
 800ff2c:	68db      	ldr	r3, [r3, #12]
 800ff2e:	68db      	ldr	r3, [r3, #12]
 800ff30:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	3318      	adds	r3, #24
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7fe fc8a 	bl	800e850 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	3304      	adds	r3, #4
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7fe fc85 	bl	800e850 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff4a:	4b2d      	ldr	r3, [pc, #180]	; (8010000 <xTaskResumeAll+0x120>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d903      	bls.n	800ff5a <xTaskResumeAll+0x7a>
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff56:	4a2a      	ldr	r2, [pc, #168]	; (8010000 <xTaskResumeAll+0x120>)
 800ff58:	6013      	str	r3, [r2, #0]
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff5e:	4613      	mov	r3, r2
 800ff60:	009b      	lsls	r3, r3, #2
 800ff62:	4413      	add	r3, r2
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	4a27      	ldr	r2, [pc, #156]	; (8010004 <xTaskResumeAll+0x124>)
 800ff68:	441a      	add	r2, r3
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	3304      	adds	r3, #4
 800ff6e:	4619      	mov	r1, r3
 800ff70:	4610      	mov	r0, r2
 800ff72:	f7fe fc10 	bl	800e796 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff7a:	4b23      	ldr	r3, [pc, #140]	; (8010008 <xTaskResumeAll+0x128>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d302      	bcc.n	800ff8a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ff84:	4b21      	ldr	r3, [pc, #132]	; (801000c <xTaskResumeAll+0x12c>)
 800ff86:	2201      	movs	r2, #1
 800ff88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ff8a:	4b1c      	ldr	r3, [pc, #112]	; (800fffc <xTaskResumeAll+0x11c>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d1cb      	bne.n	800ff2a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d001      	beq.n	800ff9c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ff98:	f000 fb6e 	bl	8010678 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ff9c:	4b1c      	ldr	r3, [pc, #112]	; (8010010 <xTaskResumeAll+0x130>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d010      	beq.n	800ffca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ffa8:	f000 f846 	bl	8010038 <xTaskIncrementTick>
 800ffac:	4603      	mov	r3, r0
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d002      	beq.n	800ffb8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ffb2:	4b16      	ldr	r3, [pc, #88]	; (801000c <xTaskResumeAll+0x12c>)
 800ffb4:	2201      	movs	r2, #1
 800ffb6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	3b01      	subs	r3, #1
 800ffbc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d1f1      	bne.n	800ffa8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800ffc4:	4b12      	ldr	r3, [pc, #72]	; (8010010 <xTaskResumeAll+0x130>)
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ffca:	4b10      	ldr	r3, [pc, #64]	; (801000c <xTaskResumeAll+0x12c>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d009      	beq.n	800ffe6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ffd6:	4b0f      	ldr	r3, [pc, #60]	; (8010014 <xTaskResumeAll+0x134>)
 800ffd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffdc:	601a      	str	r2, [r3, #0]
 800ffde:	f3bf 8f4f 	dsb	sy
 800ffe2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ffe6:	f001 fbd7 	bl	8011798 <vPortExitCritical>

	return xAlreadyYielded;
 800ffea:	68bb      	ldr	r3, [r7, #8]
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3710      	adds	r7, #16
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	20002158 	.word	0x20002158
 800fff8:	20002130 	.word	0x20002130
 800fffc:	200020f0 	.word	0x200020f0
 8010000:	20002138 	.word	0x20002138
 8010004:	20001c60 	.word	0x20001c60
 8010008:	20001c5c 	.word	0x20001c5c
 801000c:	20002144 	.word	0x20002144
 8010010:	20002140 	.word	0x20002140
 8010014:	e000ed04 	.word	0xe000ed04

08010018 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010018:	b480      	push	{r7}
 801001a:	b083      	sub	sp, #12
 801001c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801001e:	4b05      	ldr	r3, [pc, #20]	; (8010034 <xTaskGetTickCount+0x1c>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010024:	687b      	ldr	r3, [r7, #4]
}
 8010026:	4618      	mov	r0, r3
 8010028:	370c      	adds	r7, #12
 801002a:	46bd      	mov	sp, r7
 801002c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010030:	4770      	bx	lr
 8010032:	bf00      	nop
 8010034:	20002134 	.word	0x20002134

08010038 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b086      	sub	sp, #24
 801003c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801003e:	2300      	movs	r3, #0
 8010040:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010042:	4b4e      	ldr	r3, [pc, #312]	; (801017c <xTaskIncrementTick+0x144>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	2b00      	cmp	r3, #0
 8010048:	f040 8088 	bne.w	801015c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801004c:	4b4c      	ldr	r3, [pc, #304]	; (8010180 <xTaskIncrementTick+0x148>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	3301      	adds	r3, #1
 8010052:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010054:	4a4a      	ldr	r2, [pc, #296]	; (8010180 <xTaskIncrementTick+0x148>)
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d11f      	bne.n	80100a0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010060:	4b48      	ldr	r3, [pc, #288]	; (8010184 <xTaskIncrementTick+0x14c>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d009      	beq.n	801007e <xTaskIncrementTick+0x46>
 801006a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801006e:	f383 8811 	msr	BASEPRI, r3
 8010072:	f3bf 8f6f 	isb	sy
 8010076:	f3bf 8f4f 	dsb	sy
 801007a:	603b      	str	r3, [r7, #0]
 801007c:	e7fe      	b.n	801007c <xTaskIncrementTick+0x44>
 801007e:	4b41      	ldr	r3, [pc, #260]	; (8010184 <xTaskIncrementTick+0x14c>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	60fb      	str	r3, [r7, #12]
 8010084:	4b40      	ldr	r3, [pc, #256]	; (8010188 <xTaskIncrementTick+0x150>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	4a3e      	ldr	r2, [pc, #248]	; (8010184 <xTaskIncrementTick+0x14c>)
 801008a:	6013      	str	r3, [r2, #0]
 801008c:	4a3e      	ldr	r2, [pc, #248]	; (8010188 <xTaskIncrementTick+0x150>)
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	6013      	str	r3, [r2, #0]
 8010092:	4b3e      	ldr	r3, [pc, #248]	; (801018c <xTaskIncrementTick+0x154>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	3301      	adds	r3, #1
 8010098:	4a3c      	ldr	r2, [pc, #240]	; (801018c <xTaskIncrementTick+0x154>)
 801009a:	6013      	str	r3, [r2, #0]
 801009c:	f000 faec 	bl	8010678 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80100a0:	4b3b      	ldr	r3, [pc, #236]	; (8010190 <xTaskIncrementTick+0x158>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	693a      	ldr	r2, [r7, #16]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d349      	bcc.n	801013e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100aa:	4b36      	ldr	r3, [pc, #216]	; (8010184 <xTaskIncrementTick+0x14c>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d104      	bne.n	80100be <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100b4:	4b36      	ldr	r3, [pc, #216]	; (8010190 <xTaskIncrementTick+0x158>)
 80100b6:	f04f 32ff 	mov.w	r2, #4294967295
 80100ba:	601a      	str	r2, [r3, #0]
					break;
 80100bc:	e03f      	b.n	801013e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100be:	4b31      	ldr	r3, [pc, #196]	; (8010184 <xTaskIncrementTick+0x14c>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	68db      	ldr	r3, [r3, #12]
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80100ce:	693a      	ldr	r2, [r7, #16]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d203      	bcs.n	80100de <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80100d6:	4a2e      	ldr	r2, [pc, #184]	; (8010190 <xTaskIncrementTick+0x158>)
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80100dc:	e02f      	b.n	801013e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	3304      	adds	r3, #4
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7fe fbb4 	bl	800e850 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d004      	beq.n	80100fa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	3318      	adds	r3, #24
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7fe fbab 	bl	800e850 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100fe:	4b25      	ldr	r3, [pc, #148]	; (8010194 <xTaskIncrementTick+0x15c>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	429a      	cmp	r2, r3
 8010104:	d903      	bls.n	801010e <xTaskIncrementTick+0xd6>
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801010a:	4a22      	ldr	r2, [pc, #136]	; (8010194 <xTaskIncrementTick+0x15c>)
 801010c:	6013      	str	r3, [r2, #0]
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010112:	4613      	mov	r3, r2
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	4413      	add	r3, r2
 8010118:	009b      	lsls	r3, r3, #2
 801011a:	4a1f      	ldr	r2, [pc, #124]	; (8010198 <xTaskIncrementTick+0x160>)
 801011c:	441a      	add	r2, r3
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	3304      	adds	r3, #4
 8010122:	4619      	mov	r1, r3
 8010124:	4610      	mov	r0, r2
 8010126:	f7fe fb36 	bl	800e796 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801012e:	4b1b      	ldr	r3, [pc, #108]	; (801019c <xTaskIncrementTick+0x164>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010134:	429a      	cmp	r2, r3
 8010136:	d3b8      	bcc.n	80100aa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010138:	2301      	movs	r3, #1
 801013a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801013c:	e7b5      	b.n	80100aa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801013e:	4b17      	ldr	r3, [pc, #92]	; (801019c <xTaskIncrementTick+0x164>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010144:	4914      	ldr	r1, [pc, #80]	; (8010198 <xTaskIncrementTick+0x160>)
 8010146:	4613      	mov	r3, r2
 8010148:	009b      	lsls	r3, r3, #2
 801014a:	4413      	add	r3, r2
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	440b      	add	r3, r1
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	2b01      	cmp	r3, #1
 8010154:	d907      	bls.n	8010166 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8010156:	2301      	movs	r3, #1
 8010158:	617b      	str	r3, [r7, #20]
 801015a:	e004      	b.n	8010166 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801015c:	4b10      	ldr	r3, [pc, #64]	; (80101a0 <xTaskIncrementTick+0x168>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	3301      	adds	r3, #1
 8010162:	4a0f      	ldr	r2, [pc, #60]	; (80101a0 <xTaskIncrementTick+0x168>)
 8010164:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010166:	4b0f      	ldr	r3, [pc, #60]	; (80101a4 <xTaskIncrementTick+0x16c>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d001      	beq.n	8010172 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801016e:	2301      	movs	r3, #1
 8010170:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010172:	697b      	ldr	r3, [r7, #20]
}
 8010174:	4618      	mov	r0, r3
 8010176:	3718      	adds	r7, #24
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}
 801017c:	20002158 	.word	0x20002158
 8010180:	20002134 	.word	0x20002134
 8010184:	200020e8 	.word	0x200020e8
 8010188:	200020ec 	.word	0x200020ec
 801018c:	20002148 	.word	0x20002148
 8010190:	20002150 	.word	0x20002150
 8010194:	20002138 	.word	0x20002138
 8010198:	20001c60 	.word	0x20001c60
 801019c:	20001c5c 	.word	0x20001c5c
 80101a0:	20002140 	.word	0x20002140
 80101a4:	20002144 	.word	0x20002144

080101a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80101a8:	b480      	push	{r7}
 80101aa:	b085      	sub	sp, #20
 80101ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80101ae:	4b27      	ldr	r3, [pc, #156]	; (801024c <vTaskSwitchContext+0xa4>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d003      	beq.n	80101be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80101b6:	4b26      	ldr	r3, [pc, #152]	; (8010250 <vTaskSwitchContext+0xa8>)
 80101b8:	2201      	movs	r2, #1
 80101ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80101bc:	e040      	b.n	8010240 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80101be:	4b24      	ldr	r3, [pc, #144]	; (8010250 <vTaskSwitchContext+0xa8>)
 80101c0:	2200      	movs	r2, #0
 80101c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101c4:	4b23      	ldr	r3, [pc, #140]	; (8010254 <vTaskSwitchContext+0xac>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	60fb      	str	r3, [r7, #12]
 80101ca:	e00f      	b.n	80101ec <vTaskSwitchContext+0x44>
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d109      	bne.n	80101e6 <vTaskSwitchContext+0x3e>
 80101d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d6:	f383 8811 	msr	BASEPRI, r3
 80101da:	f3bf 8f6f 	isb	sy
 80101de:	f3bf 8f4f 	dsb	sy
 80101e2:	607b      	str	r3, [r7, #4]
 80101e4:	e7fe      	b.n	80101e4 <vTaskSwitchContext+0x3c>
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	3b01      	subs	r3, #1
 80101ea:	60fb      	str	r3, [r7, #12]
 80101ec:	491a      	ldr	r1, [pc, #104]	; (8010258 <vTaskSwitchContext+0xb0>)
 80101ee:	68fa      	ldr	r2, [r7, #12]
 80101f0:	4613      	mov	r3, r2
 80101f2:	009b      	lsls	r3, r3, #2
 80101f4:	4413      	add	r3, r2
 80101f6:	009b      	lsls	r3, r3, #2
 80101f8:	440b      	add	r3, r1
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d0e5      	beq.n	80101cc <vTaskSwitchContext+0x24>
 8010200:	68fa      	ldr	r2, [r7, #12]
 8010202:	4613      	mov	r3, r2
 8010204:	009b      	lsls	r3, r3, #2
 8010206:	4413      	add	r3, r2
 8010208:	009b      	lsls	r3, r3, #2
 801020a:	4a13      	ldr	r2, [pc, #76]	; (8010258 <vTaskSwitchContext+0xb0>)
 801020c:	4413      	add	r3, r2
 801020e:	60bb      	str	r3, [r7, #8]
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	685b      	ldr	r3, [r3, #4]
 8010214:	685a      	ldr	r2, [r3, #4]
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	605a      	str	r2, [r3, #4]
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	685a      	ldr	r2, [r3, #4]
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	3308      	adds	r3, #8
 8010222:	429a      	cmp	r2, r3
 8010224:	d104      	bne.n	8010230 <vTaskSwitchContext+0x88>
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	685b      	ldr	r3, [r3, #4]
 801022a:	685a      	ldr	r2, [r3, #4]
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	605a      	str	r2, [r3, #4]
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	68db      	ldr	r3, [r3, #12]
 8010236:	4a09      	ldr	r2, [pc, #36]	; (801025c <vTaskSwitchContext+0xb4>)
 8010238:	6013      	str	r3, [r2, #0]
 801023a:	4a06      	ldr	r2, [pc, #24]	; (8010254 <vTaskSwitchContext+0xac>)
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	6013      	str	r3, [r2, #0]
}
 8010240:	bf00      	nop
 8010242:	3714      	adds	r7, #20
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr
 801024c:	20002158 	.word	0x20002158
 8010250:	20002144 	.word	0x20002144
 8010254:	20002138 	.word	0x20002138
 8010258:	20001c60 	.word	0x20001c60
 801025c:	20001c5c 	.word	0x20001c5c

08010260 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b084      	sub	sp, #16
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d109      	bne.n	8010284 <vTaskPlaceOnEventList+0x24>
 8010270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010274:	f383 8811 	msr	BASEPRI, r3
 8010278:	f3bf 8f6f 	isb	sy
 801027c:	f3bf 8f4f 	dsb	sy
 8010280:	60fb      	str	r3, [r7, #12]
 8010282:	e7fe      	b.n	8010282 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010284:	4b07      	ldr	r3, [pc, #28]	; (80102a4 <vTaskPlaceOnEventList+0x44>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	3318      	adds	r3, #24
 801028a:	4619      	mov	r1, r3
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f7fe faa6 	bl	800e7de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010292:	2101      	movs	r1, #1
 8010294:	6838      	ldr	r0, [r7, #0]
 8010296:	f000 fd8d 	bl	8010db4 <prvAddCurrentTaskToDelayedList>
}
 801029a:	bf00      	nop
 801029c:	3710      	adds	r7, #16
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	20001c5c 	.word	0x20001c5c

080102a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b086      	sub	sp, #24
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d109      	bne.n	80102ce <vTaskPlaceOnEventListRestricted+0x26>
 80102ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102be:	f383 8811 	msr	BASEPRI, r3
 80102c2:	f3bf 8f6f 	isb	sy
 80102c6:	f3bf 8f4f 	dsb	sy
 80102ca:	617b      	str	r3, [r7, #20]
 80102cc:	e7fe      	b.n	80102cc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80102ce:	4b0a      	ldr	r3, [pc, #40]	; (80102f8 <vTaskPlaceOnEventListRestricted+0x50>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	3318      	adds	r3, #24
 80102d4:	4619      	mov	r1, r3
 80102d6:	68f8      	ldr	r0, [r7, #12]
 80102d8:	f7fe fa5d 	bl	800e796 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d002      	beq.n	80102e8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80102e2:	f04f 33ff 	mov.w	r3, #4294967295
 80102e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80102e8:	6879      	ldr	r1, [r7, #4]
 80102ea:	68b8      	ldr	r0, [r7, #8]
 80102ec:	f000 fd62 	bl	8010db4 <prvAddCurrentTaskToDelayedList>
	}
 80102f0:	bf00      	nop
 80102f2:	3718      	adds	r7, #24
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}
 80102f8:	20001c5c 	.word	0x20001c5c

080102fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b086      	sub	sp, #24
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	68db      	ldr	r3, [r3, #12]
 801030a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d109      	bne.n	8010326 <xTaskRemoveFromEventList+0x2a>
 8010312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010316:	f383 8811 	msr	BASEPRI, r3
 801031a:	f3bf 8f6f 	isb	sy
 801031e:	f3bf 8f4f 	dsb	sy
 8010322:	60fb      	str	r3, [r7, #12]
 8010324:	e7fe      	b.n	8010324 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	3318      	adds	r3, #24
 801032a:	4618      	mov	r0, r3
 801032c:	f7fe fa90 	bl	800e850 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010330:	4b1e      	ldr	r3, [pc, #120]	; (80103ac <xTaskRemoveFromEventList+0xb0>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d11f      	bne.n	8010378 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	3304      	adds	r3, #4
 801033c:	4618      	mov	r0, r3
 801033e:	f7fe fa87 	bl	800e850 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010346:	4b1a      	ldr	r3, [pc, #104]	; (80103b0 <xTaskRemoveFromEventList+0xb4>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	429a      	cmp	r2, r3
 801034c:	d903      	bls.n	8010356 <xTaskRemoveFromEventList+0x5a>
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010352:	4a17      	ldr	r2, [pc, #92]	; (80103b0 <xTaskRemoveFromEventList+0xb4>)
 8010354:	6013      	str	r3, [r2, #0]
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801035a:	4613      	mov	r3, r2
 801035c:	009b      	lsls	r3, r3, #2
 801035e:	4413      	add	r3, r2
 8010360:	009b      	lsls	r3, r3, #2
 8010362:	4a14      	ldr	r2, [pc, #80]	; (80103b4 <xTaskRemoveFromEventList+0xb8>)
 8010364:	441a      	add	r2, r3
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	3304      	adds	r3, #4
 801036a:	4619      	mov	r1, r3
 801036c:	4610      	mov	r0, r2
 801036e:	f7fe fa12 	bl	800e796 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8010372:	f000 f981 	bl	8010678 <prvResetNextTaskUnblockTime>
 8010376:	e005      	b.n	8010384 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	3318      	adds	r3, #24
 801037c:	4619      	mov	r1, r3
 801037e:	480e      	ldr	r0, [pc, #56]	; (80103b8 <xTaskRemoveFromEventList+0xbc>)
 8010380:	f7fe fa09 	bl	800e796 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010388:	4b0c      	ldr	r3, [pc, #48]	; (80103bc <xTaskRemoveFromEventList+0xc0>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801038e:	429a      	cmp	r2, r3
 8010390:	d905      	bls.n	801039e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010392:	2301      	movs	r3, #1
 8010394:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010396:	4b0a      	ldr	r3, [pc, #40]	; (80103c0 <xTaskRemoveFromEventList+0xc4>)
 8010398:	2201      	movs	r2, #1
 801039a:	601a      	str	r2, [r3, #0]
 801039c:	e001      	b.n	80103a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801039e:	2300      	movs	r3, #0
 80103a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80103a2:	697b      	ldr	r3, [r7, #20]
}
 80103a4:	4618      	mov	r0, r3
 80103a6:	3718      	adds	r7, #24
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	20002158 	.word	0x20002158
 80103b0:	20002138 	.word	0x20002138
 80103b4:	20001c60 	.word	0x20001c60
 80103b8:	200020f0 	.word	0x200020f0
 80103bc:	20001c5c 	.word	0x20001c5c
 80103c0:	20002144 	.word	0x20002144

080103c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80103c4:	b480      	push	{r7}
 80103c6:	b083      	sub	sp, #12
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80103cc:	4b06      	ldr	r3, [pc, #24]	; (80103e8 <vTaskInternalSetTimeOutState+0x24>)
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80103d4:	4b05      	ldr	r3, [pc, #20]	; (80103ec <vTaskInternalSetTimeOutState+0x28>)
 80103d6:	681a      	ldr	r2, [r3, #0]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	605a      	str	r2, [r3, #4]
}
 80103dc:	bf00      	nop
 80103de:	370c      	adds	r7, #12
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr
 80103e8:	20002148 	.word	0x20002148
 80103ec:	20002134 	.word	0x20002134

080103f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b088      	sub	sp, #32
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d109      	bne.n	8010414 <xTaskCheckForTimeOut+0x24>
 8010400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010404:	f383 8811 	msr	BASEPRI, r3
 8010408:	f3bf 8f6f 	isb	sy
 801040c:	f3bf 8f4f 	dsb	sy
 8010410:	613b      	str	r3, [r7, #16]
 8010412:	e7fe      	b.n	8010412 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d109      	bne.n	801042e <xTaskCheckForTimeOut+0x3e>
 801041a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801041e:	f383 8811 	msr	BASEPRI, r3
 8010422:	f3bf 8f6f 	isb	sy
 8010426:	f3bf 8f4f 	dsb	sy
 801042a:	60fb      	str	r3, [r7, #12]
 801042c:	e7fe      	b.n	801042c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801042e:	f001 f985 	bl	801173c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010432:	4b1d      	ldr	r3, [pc, #116]	; (80104a8 <xTaskCheckForTimeOut+0xb8>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	685b      	ldr	r3, [r3, #4]
 801043c:	69ba      	ldr	r2, [r7, #24]
 801043e:	1ad3      	subs	r3, r2, r3
 8010440:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	f1b3 3fff 	cmp.w	r3, #4294967295
 801044a:	d102      	bne.n	8010452 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801044c:	2300      	movs	r3, #0
 801044e:	61fb      	str	r3, [r7, #28]
 8010450:	e023      	b.n	801049a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681a      	ldr	r2, [r3, #0]
 8010456:	4b15      	ldr	r3, [pc, #84]	; (80104ac <xTaskCheckForTimeOut+0xbc>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	429a      	cmp	r2, r3
 801045c:	d007      	beq.n	801046e <xTaskCheckForTimeOut+0x7e>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	69ba      	ldr	r2, [r7, #24]
 8010464:	429a      	cmp	r2, r3
 8010466:	d302      	bcc.n	801046e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010468:	2301      	movs	r3, #1
 801046a:	61fb      	str	r3, [r7, #28]
 801046c:	e015      	b.n	801049a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	697a      	ldr	r2, [r7, #20]
 8010474:	429a      	cmp	r2, r3
 8010476:	d20b      	bcs.n	8010490 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	681a      	ldr	r2, [r3, #0]
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	1ad2      	subs	r2, r2, r3
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f7ff ff9d 	bl	80103c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801048a:	2300      	movs	r3, #0
 801048c:	61fb      	str	r3, [r7, #28]
 801048e:	e004      	b.n	801049a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	2200      	movs	r2, #0
 8010494:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010496:	2301      	movs	r3, #1
 8010498:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801049a:	f001 f97d 	bl	8011798 <vPortExitCritical>

	return xReturn;
 801049e:	69fb      	ldr	r3, [r7, #28]
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	3720      	adds	r7, #32
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	20002134 	.word	0x20002134
 80104ac:	20002148 	.word	0x20002148

080104b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80104b0:	b480      	push	{r7}
 80104b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80104b4:	4b03      	ldr	r3, [pc, #12]	; (80104c4 <vTaskMissedYield+0x14>)
 80104b6:	2201      	movs	r2, #1
 80104b8:	601a      	str	r2, [r3, #0]
}
 80104ba:	bf00      	nop
 80104bc:	46bd      	mov	sp, r7
 80104be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c2:	4770      	bx	lr
 80104c4:	20002144 	.word	0x20002144

080104c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b084      	sub	sp, #16
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80104d0:	f000 f878 	bl	80105c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80104d4:	4b17      	ldr	r3, [pc, #92]	; (8010534 <prvIdleTask+0x6c>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d907      	bls.n	80104ec <prvIdleTask+0x24>
			{
				taskYIELD();
 80104dc:	4b16      	ldr	r3, [pc, #88]	; (8010538 <prvIdleTask+0x70>)
 80104de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104e2:	601a      	str	r2, [r3, #0]
 80104e4:	f3bf 8f4f 	dsb	sy
 80104e8:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80104ec:	f7ff fcc0 	bl	800fe70 <prvGetExpectedIdleTime>
 80104f0:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	2b01      	cmp	r3, #1
 80104f6:	d9eb      	bls.n	80104d0 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 80104f8:	f7ff fcac 	bl	800fe54 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80104fc:	4b0f      	ldr	r3, [pc, #60]	; (801053c <prvIdleTask+0x74>)
 80104fe:	681a      	ldr	r2, [r3, #0]
 8010500:	4b0f      	ldr	r3, [pc, #60]	; (8010540 <prvIdleTask+0x78>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	429a      	cmp	r2, r3
 8010506:	d209      	bcs.n	801051c <prvIdleTask+0x54>
 8010508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801050c:	f383 8811 	msr	BASEPRI, r3
 8010510:	f3bf 8f6f 	isb	sy
 8010514:	f3bf 8f4f 	dsb	sy
 8010518:	60bb      	str	r3, [r7, #8]
 801051a:	e7fe      	b.n	801051a <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 801051c:	f7ff fca8 	bl	800fe70 <prvGetExpectedIdleTime>
 8010520:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	2b01      	cmp	r3, #1
 8010526:	d902      	bls.n	801052e <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8010528:	68f8      	ldr	r0, [r7, #12]
 801052a:	f7f0 fe2c 	bl	8001186 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 801052e:	f7ff fcd7 	bl	800fee0 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8010532:	e7cd      	b.n	80104d0 <prvIdleTask+0x8>
 8010534:	20001c60 	.word	0x20001c60
 8010538:	e000ed04 	.word	0xe000ed04
 801053c:	20002150 	.word	0x20002150
 8010540:	20002134 	.word	0x20002134

08010544 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801054a:	2300      	movs	r3, #0
 801054c:	607b      	str	r3, [r7, #4]
 801054e:	e00c      	b.n	801056a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010550:	687a      	ldr	r2, [r7, #4]
 8010552:	4613      	mov	r3, r2
 8010554:	009b      	lsls	r3, r3, #2
 8010556:	4413      	add	r3, r2
 8010558:	009b      	lsls	r3, r3, #2
 801055a:	4a12      	ldr	r2, [pc, #72]	; (80105a4 <prvInitialiseTaskLists+0x60>)
 801055c:	4413      	add	r3, r2
 801055e:	4618      	mov	r0, r3
 8010560:	f7fe f8ec 	bl	800e73c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	3301      	adds	r3, #1
 8010568:	607b      	str	r3, [r7, #4]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2b37      	cmp	r3, #55	; 0x37
 801056e:	d9ef      	bls.n	8010550 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010570:	480d      	ldr	r0, [pc, #52]	; (80105a8 <prvInitialiseTaskLists+0x64>)
 8010572:	f7fe f8e3 	bl	800e73c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010576:	480d      	ldr	r0, [pc, #52]	; (80105ac <prvInitialiseTaskLists+0x68>)
 8010578:	f7fe f8e0 	bl	800e73c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801057c:	480c      	ldr	r0, [pc, #48]	; (80105b0 <prvInitialiseTaskLists+0x6c>)
 801057e:	f7fe f8dd 	bl	800e73c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010582:	480c      	ldr	r0, [pc, #48]	; (80105b4 <prvInitialiseTaskLists+0x70>)
 8010584:	f7fe f8da 	bl	800e73c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010588:	480b      	ldr	r0, [pc, #44]	; (80105b8 <prvInitialiseTaskLists+0x74>)
 801058a:	f7fe f8d7 	bl	800e73c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801058e:	4b0b      	ldr	r3, [pc, #44]	; (80105bc <prvInitialiseTaskLists+0x78>)
 8010590:	4a05      	ldr	r2, [pc, #20]	; (80105a8 <prvInitialiseTaskLists+0x64>)
 8010592:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010594:	4b0a      	ldr	r3, [pc, #40]	; (80105c0 <prvInitialiseTaskLists+0x7c>)
 8010596:	4a05      	ldr	r2, [pc, #20]	; (80105ac <prvInitialiseTaskLists+0x68>)
 8010598:	601a      	str	r2, [r3, #0]
}
 801059a:	bf00      	nop
 801059c:	3708      	adds	r7, #8
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}
 80105a2:	bf00      	nop
 80105a4:	20001c60 	.word	0x20001c60
 80105a8:	200020c0 	.word	0x200020c0
 80105ac:	200020d4 	.word	0x200020d4
 80105b0:	200020f0 	.word	0x200020f0
 80105b4:	20002104 	.word	0x20002104
 80105b8:	2000211c 	.word	0x2000211c
 80105bc:	200020e8 	.word	0x200020e8
 80105c0:	200020ec 	.word	0x200020ec

080105c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80105ca:	e019      	b.n	8010600 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80105cc:	f001 f8b6 	bl	801173c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105d0:	4b0f      	ldr	r3, [pc, #60]	; (8010610 <prvCheckTasksWaitingTermination+0x4c>)
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	68db      	ldr	r3, [r3, #12]
 80105d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	3304      	adds	r3, #4
 80105dc:	4618      	mov	r0, r3
 80105de:	f7fe f937 	bl	800e850 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80105e2:	4b0c      	ldr	r3, [pc, #48]	; (8010614 <prvCheckTasksWaitingTermination+0x50>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	3b01      	subs	r3, #1
 80105e8:	4a0a      	ldr	r2, [pc, #40]	; (8010614 <prvCheckTasksWaitingTermination+0x50>)
 80105ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80105ec:	4b0a      	ldr	r3, [pc, #40]	; (8010618 <prvCheckTasksWaitingTermination+0x54>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	3b01      	subs	r3, #1
 80105f2:	4a09      	ldr	r2, [pc, #36]	; (8010618 <prvCheckTasksWaitingTermination+0x54>)
 80105f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80105f6:	f001 f8cf 	bl	8011798 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f000 f80e 	bl	801061c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010600:	4b05      	ldr	r3, [pc, #20]	; (8010618 <prvCheckTasksWaitingTermination+0x54>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d1e1      	bne.n	80105cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010608:	bf00      	nop
 801060a:	3708      	adds	r7, #8
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	20002104 	.word	0x20002104
 8010614:	20002130 	.word	0x20002130
 8010618:	20002118 	.word	0x20002118

0801061c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801061c:	b580      	push	{r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801062a:	2b00      	cmp	r3, #0
 801062c:	d108      	bne.n	8010640 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010632:	4618      	mov	r0, r3
 8010634:	f001 fa5e 	bl	8011af4 <vPortFree>
				vPortFree( pxTCB );
 8010638:	6878      	ldr	r0, [r7, #4]
 801063a:	f001 fa5b 	bl	8011af4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801063e:	e017      	b.n	8010670 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010646:	2b01      	cmp	r3, #1
 8010648:	d103      	bne.n	8010652 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f001 fa52 	bl	8011af4 <vPortFree>
	}
 8010650:	e00e      	b.n	8010670 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010658:	2b02      	cmp	r3, #2
 801065a:	d009      	beq.n	8010670 <prvDeleteTCB+0x54>
 801065c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010660:	f383 8811 	msr	BASEPRI, r3
 8010664:	f3bf 8f6f 	isb	sy
 8010668:	f3bf 8f4f 	dsb	sy
 801066c:	60fb      	str	r3, [r7, #12]
 801066e:	e7fe      	b.n	801066e <prvDeleteTCB+0x52>
	}
 8010670:	bf00      	nop
 8010672:	3710      	adds	r7, #16
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}

08010678 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010678:	b480      	push	{r7}
 801067a:	b083      	sub	sp, #12
 801067c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801067e:	4b0c      	ldr	r3, [pc, #48]	; (80106b0 <prvResetNextTaskUnblockTime+0x38>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d104      	bne.n	8010692 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010688:	4b0a      	ldr	r3, [pc, #40]	; (80106b4 <prvResetNextTaskUnblockTime+0x3c>)
 801068a:	f04f 32ff 	mov.w	r2, #4294967295
 801068e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010690:	e008      	b.n	80106a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010692:	4b07      	ldr	r3, [pc, #28]	; (80106b0 <prvResetNextTaskUnblockTime+0x38>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	68db      	ldr	r3, [r3, #12]
 8010698:	68db      	ldr	r3, [r3, #12]
 801069a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	685b      	ldr	r3, [r3, #4]
 80106a0:	4a04      	ldr	r2, [pc, #16]	; (80106b4 <prvResetNextTaskUnblockTime+0x3c>)
 80106a2:	6013      	str	r3, [r2, #0]
}
 80106a4:	bf00      	nop
 80106a6:	370c      	adds	r7, #12
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr
 80106b0:	200020e8 	.word	0x200020e8
 80106b4:	20002150 	.word	0x20002150

080106b8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80106b8:	b480      	push	{r7}
 80106ba:	b083      	sub	sp, #12
 80106bc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80106be:	4b05      	ldr	r3, [pc, #20]	; (80106d4 <xTaskGetCurrentTaskHandle+0x1c>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80106c4:	687b      	ldr	r3, [r7, #4]
	}
 80106c6:	4618      	mov	r0, r3
 80106c8:	370c      	adds	r7, #12
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr
 80106d2:	bf00      	nop
 80106d4:	20001c5c 	.word	0x20001c5c

080106d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80106d8:	b480      	push	{r7}
 80106da:	b083      	sub	sp, #12
 80106dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80106de:	4b0b      	ldr	r3, [pc, #44]	; (801070c <xTaskGetSchedulerState+0x34>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d102      	bne.n	80106ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80106e6:	2301      	movs	r3, #1
 80106e8:	607b      	str	r3, [r7, #4]
 80106ea:	e008      	b.n	80106fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80106ec:	4b08      	ldr	r3, [pc, #32]	; (8010710 <xTaskGetSchedulerState+0x38>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d102      	bne.n	80106fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80106f4:	2302      	movs	r3, #2
 80106f6:	607b      	str	r3, [r7, #4]
 80106f8:	e001      	b.n	80106fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80106fa:	2300      	movs	r3, #0
 80106fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80106fe:	687b      	ldr	r3, [r7, #4]
	}
 8010700:	4618      	mov	r0, r3
 8010702:	370c      	adds	r7, #12
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr
 801070c:	2000213c 	.word	0x2000213c
 8010710:	20002158 	.word	0x20002158

08010714 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010714:	b580      	push	{r7, lr}
 8010716:	b084      	sub	sp, #16
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010720:	2300      	movs	r3, #0
 8010722:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d051      	beq.n	80107ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801072e:	4b2a      	ldr	r3, [pc, #168]	; (80107d8 <xTaskPriorityInherit+0xc4>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010734:	429a      	cmp	r2, r3
 8010736:	d241      	bcs.n	80107bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	699b      	ldr	r3, [r3, #24]
 801073c:	2b00      	cmp	r3, #0
 801073e:	db06      	blt.n	801074e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010740:	4b25      	ldr	r3, [pc, #148]	; (80107d8 <xTaskPriorityInherit+0xc4>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010746:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	6959      	ldr	r1, [r3, #20]
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010756:	4613      	mov	r3, r2
 8010758:	009b      	lsls	r3, r3, #2
 801075a:	4413      	add	r3, r2
 801075c:	009b      	lsls	r3, r3, #2
 801075e:	4a1f      	ldr	r2, [pc, #124]	; (80107dc <xTaskPriorityInherit+0xc8>)
 8010760:	4413      	add	r3, r2
 8010762:	4299      	cmp	r1, r3
 8010764:	d122      	bne.n	80107ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	3304      	adds	r3, #4
 801076a:	4618      	mov	r0, r3
 801076c:	f7fe f870 	bl	800e850 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010770:	4b19      	ldr	r3, [pc, #100]	; (80107d8 <xTaskPriorityInherit+0xc4>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801077e:	4b18      	ldr	r3, [pc, #96]	; (80107e0 <xTaskPriorityInherit+0xcc>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	429a      	cmp	r2, r3
 8010784:	d903      	bls.n	801078e <xTaskPriorityInherit+0x7a>
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801078a:	4a15      	ldr	r2, [pc, #84]	; (80107e0 <xTaskPriorityInherit+0xcc>)
 801078c:	6013      	str	r3, [r2, #0]
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010792:	4613      	mov	r3, r2
 8010794:	009b      	lsls	r3, r3, #2
 8010796:	4413      	add	r3, r2
 8010798:	009b      	lsls	r3, r3, #2
 801079a:	4a10      	ldr	r2, [pc, #64]	; (80107dc <xTaskPriorityInherit+0xc8>)
 801079c:	441a      	add	r2, r3
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	3304      	adds	r3, #4
 80107a2:	4619      	mov	r1, r3
 80107a4:	4610      	mov	r0, r2
 80107a6:	f7fd fff6 	bl	800e796 <vListInsertEnd>
 80107aa:	e004      	b.n	80107b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80107ac:	4b0a      	ldr	r3, [pc, #40]	; (80107d8 <xTaskPriorityInherit+0xc4>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80107b6:	2301      	movs	r3, #1
 80107b8:	60fb      	str	r3, [r7, #12]
 80107ba:	e008      	b.n	80107ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80107c0:	4b05      	ldr	r3, [pc, #20]	; (80107d8 <xTaskPriorityInherit+0xc4>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d201      	bcs.n	80107ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80107ca:	2301      	movs	r3, #1
 80107cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80107ce:	68fb      	ldr	r3, [r7, #12]
	}
 80107d0:	4618      	mov	r0, r3
 80107d2:	3710      	adds	r7, #16
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}
 80107d8:	20001c5c 	.word	0x20001c5c
 80107dc:	20001c60 	.word	0x20001c60
 80107e0:	20002138 	.word	0x20002138

080107e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b086      	sub	sp, #24
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80107f0:	2300      	movs	r3, #0
 80107f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d054      	beq.n	80108a4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80107fa:	4b2d      	ldr	r3, [pc, #180]	; (80108b0 <xTaskPriorityDisinherit+0xcc>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	693a      	ldr	r2, [r7, #16]
 8010800:	429a      	cmp	r2, r3
 8010802:	d009      	beq.n	8010818 <xTaskPriorityDisinherit+0x34>
 8010804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010808:	f383 8811 	msr	BASEPRI, r3
 801080c:	f3bf 8f6f 	isb	sy
 8010810:	f3bf 8f4f 	dsb	sy
 8010814:	60fb      	str	r3, [r7, #12]
 8010816:	e7fe      	b.n	8010816 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8010818:	693b      	ldr	r3, [r7, #16]
 801081a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801081c:	2b00      	cmp	r3, #0
 801081e:	d109      	bne.n	8010834 <xTaskPriorityDisinherit+0x50>
 8010820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010824:	f383 8811 	msr	BASEPRI, r3
 8010828:	f3bf 8f6f 	isb	sy
 801082c:	f3bf 8f4f 	dsb	sy
 8010830:	60bb      	str	r3, [r7, #8]
 8010832:	e7fe      	b.n	8010832 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010838:	1e5a      	subs	r2, r3, #1
 801083a:	693b      	ldr	r3, [r7, #16]
 801083c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010846:	429a      	cmp	r2, r3
 8010848:	d02c      	beq.n	80108a4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801084a:	693b      	ldr	r3, [r7, #16]
 801084c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801084e:	2b00      	cmp	r3, #0
 8010850:	d128      	bne.n	80108a4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	3304      	adds	r3, #4
 8010856:	4618      	mov	r0, r3
 8010858:	f7fd fffa 	bl	800e850 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010868:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010874:	4b0f      	ldr	r3, [pc, #60]	; (80108b4 <xTaskPriorityDisinherit+0xd0>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	429a      	cmp	r2, r3
 801087a:	d903      	bls.n	8010884 <xTaskPriorityDisinherit+0xa0>
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010880:	4a0c      	ldr	r2, [pc, #48]	; (80108b4 <xTaskPriorityDisinherit+0xd0>)
 8010882:	6013      	str	r3, [r2, #0]
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010888:	4613      	mov	r3, r2
 801088a:	009b      	lsls	r3, r3, #2
 801088c:	4413      	add	r3, r2
 801088e:	009b      	lsls	r3, r3, #2
 8010890:	4a09      	ldr	r2, [pc, #36]	; (80108b8 <xTaskPriorityDisinherit+0xd4>)
 8010892:	441a      	add	r2, r3
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	3304      	adds	r3, #4
 8010898:	4619      	mov	r1, r3
 801089a:	4610      	mov	r0, r2
 801089c:	f7fd ff7b 	bl	800e796 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80108a0:	2301      	movs	r3, #1
 80108a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80108a4:	697b      	ldr	r3, [r7, #20]
	}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3718      	adds	r7, #24
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	20001c5c 	.word	0x20001c5c
 80108b4:	20002138 	.word	0x20002138
 80108b8:	20001c60 	.word	0x20001c60

080108bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b088      	sub	sp, #32
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80108ca:	2301      	movs	r3, #1
 80108cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d068      	beq.n	80109a6 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80108d4:	69bb      	ldr	r3, [r7, #24]
 80108d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d109      	bne.n	80108f0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80108dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e0:	f383 8811 	msr	BASEPRI, r3
 80108e4:	f3bf 8f6f 	isb	sy
 80108e8:	f3bf 8f4f 	dsb	sy
 80108ec:	60fb      	str	r3, [r7, #12]
 80108ee:	e7fe      	b.n	80108ee <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80108f0:	69bb      	ldr	r3, [r7, #24]
 80108f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108f4:	683a      	ldr	r2, [r7, #0]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d902      	bls.n	8010900 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	61fb      	str	r3, [r7, #28]
 80108fe:	e002      	b.n	8010906 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010900:	69bb      	ldr	r3, [r7, #24]
 8010902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010904:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010906:	69bb      	ldr	r3, [r7, #24]
 8010908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801090a:	69fa      	ldr	r2, [r7, #28]
 801090c:	429a      	cmp	r2, r3
 801090e:	d04a      	beq.n	80109a6 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010910:	69bb      	ldr	r3, [r7, #24]
 8010912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010914:	697a      	ldr	r2, [r7, #20]
 8010916:	429a      	cmp	r2, r3
 8010918:	d145      	bne.n	80109a6 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801091a:	4b25      	ldr	r3, [pc, #148]	; (80109b0 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	69ba      	ldr	r2, [r7, #24]
 8010920:	429a      	cmp	r2, r3
 8010922:	d109      	bne.n	8010938 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8010924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010928:	f383 8811 	msr	BASEPRI, r3
 801092c:	f3bf 8f6f 	isb	sy
 8010930:	f3bf 8f4f 	dsb	sy
 8010934:	60bb      	str	r3, [r7, #8]
 8010936:	e7fe      	b.n	8010936 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010938:	69bb      	ldr	r3, [r7, #24]
 801093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801093c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801093e:	69bb      	ldr	r3, [r7, #24]
 8010940:	69fa      	ldr	r2, [r7, #28]
 8010942:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010944:	69bb      	ldr	r3, [r7, #24]
 8010946:	699b      	ldr	r3, [r3, #24]
 8010948:	2b00      	cmp	r3, #0
 801094a:	db04      	blt.n	8010956 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010952:	69bb      	ldr	r3, [r7, #24]
 8010954:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010956:	69bb      	ldr	r3, [r7, #24]
 8010958:	6959      	ldr	r1, [r3, #20]
 801095a:	693a      	ldr	r2, [r7, #16]
 801095c:	4613      	mov	r3, r2
 801095e:	009b      	lsls	r3, r3, #2
 8010960:	4413      	add	r3, r2
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	4a13      	ldr	r2, [pc, #76]	; (80109b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010966:	4413      	add	r3, r2
 8010968:	4299      	cmp	r1, r3
 801096a:	d11c      	bne.n	80109a6 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801096c:	69bb      	ldr	r3, [r7, #24]
 801096e:	3304      	adds	r3, #4
 8010970:	4618      	mov	r0, r3
 8010972:	f7fd ff6d 	bl	800e850 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010976:	69bb      	ldr	r3, [r7, #24]
 8010978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801097a:	4b0f      	ldr	r3, [pc, #60]	; (80109b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	429a      	cmp	r2, r3
 8010980:	d903      	bls.n	801098a <vTaskPriorityDisinheritAfterTimeout+0xce>
 8010982:	69bb      	ldr	r3, [r7, #24]
 8010984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010986:	4a0c      	ldr	r2, [pc, #48]	; (80109b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010988:	6013      	str	r3, [r2, #0]
 801098a:	69bb      	ldr	r3, [r7, #24]
 801098c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801098e:	4613      	mov	r3, r2
 8010990:	009b      	lsls	r3, r3, #2
 8010992:	4413      	add	r3, r2
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	4a07      	ldr	r2, [pc, #28]	; (80109b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010998:	441a      	add	r2, r3
 801099a:	69bb      	ldr	r3, [r7, #24]
 801099c:	3304      	adds	r3, #4
 801099e:	4619      	mov	r1, r3
 80109a0:	4610      	mov	r0, r2
 80109a2:	f7fd fef8 	bl	800e796 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80109a6:	bf00      	nop
 80109a8:	3720      	adds	r7, #32
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	20001c5c 	.word	0x20001c5c
 80109b4:	20001c60 	.word	0x20001c60
 80109b8:	20002138 	.word	0x20002138

080109bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80109bc:	b480      	push	{r7}
 80109be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80109c0:	4b07      	ldr	r3, [pc, #28]	; (80109e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d004      	beq.n	80109d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80109c8:	4b05      	ldr	r3, [pc, #20]	; (80109e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80109ce:	3201      	adds	r2, #1
 80109d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80109d2:	4b03      	ldr	r3, [pc, #12]	; (80109e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80109d4:	681b      	ldr	r3, [r3, #0]
	}
 80109d6:	4618      	mov	r0, r3
 80109d8:	46bd      	mov	sp, r7
 80109da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109de:	4770      	bx	lr
 80109e0:	20001c5c 	.word	0x20001c5c

080109e4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b086      	sub	sp, #24
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	607a      	str	r2, [r7, #4]
 80109f0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80109f2:	f000 fea3 	bl	801173c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80109f6:	4b26      	ldr	r3, [pc, #152]	; (8010a90 <xTaskNotifyWait+0xac>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80109fe:	b2db      	uxtb	r3, r3
 8010a00:	2b02      	cmp	r3, #2
 8010a02:	d01a      	beq.n	8010a3a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010a04:	4b22      	ldr	r3, [pc, #136]	; (8010a90 <xTaskNotifyWait+0xac>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010a0a:	68fa      	ldr	r2, [r7, #12]
 8010a0c:	43d2      	mvns	r2, r2
 8010a0e:	400a      	ands	r2, r1
 8010a10:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010a12:	4b1f      	ldr	r3, [pc, #124]	; (8010a90 <xTaskNotifyWait+0xac>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	2201      	movs	r2, #1
 8010a18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d00b      	beq.n	8010a3a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010a22:	2101      	movs	r1, #1
 8010a24:	6838      	ldr	r0, [r7, #0]
 8010a26:	f000 f9c5 	bl	8010db4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010a2a:	4b1a      	ldr	r3, [pc, #104]	; (8010a94 <xTaskNotifyWait+0xb0>)
 8010a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a30:	601a      	str	r2, [r3, #0]
 8010a32:	f3bf 8f4f 	dsb	sy
 8010a36:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010a3a:	f000 fead 	bl	8011798 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010a3e:	f000 fe7d 	bl	801173c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d004      	beq.n	8010a52 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010a48:	4b11      	ldr	r3, [pc, #68]	; (8010a90 <xTaskNotifyWait+0xac>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010a52:	4b0f      	ldr	r3, [pc, #60]	; (8010a90 <xTaskNotifyWait+0xac>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	2b02      	cmp	r3, #2
 8010a5e:	d002      	beq.n	8010a66 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8010a60:	2300      	movs	r3, #0
 8010a62:	617b      	str	r3, [r7, #20]
 8010a64:	e008      	b.n	8010a78 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010a66:	4b0a      	ldr	r3, [pc, #40]	; (8010a90 <xTaskNotifyWait+0xac>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010a6c:	68ba      	ldr	r2, [r7, #8]
 8010a6e:	43d2      	mvns	r2, r2
 8010a70:	400a      	ands	r2, r1
 8010a72:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8010a74:	2301      	movs	r3, #1
 8010a76:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010a78:	4b05      	ldr	r3, [pc, #20]	; (8010a90 <xTaskNotifyWait+0xac>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8010a82:	f000 fe89 	bl	8011798 <vPortExitCritical>

		return xReturn;
 8010a86:	697b      	ldr	r3, [r7, #20]
	}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3718      	adds	r7, #24
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}
 8010a90:	20001c5c 	.word	0x20001c5c
 8010a94:	e000ed04 	.word	0xe000ed04

08010a98 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b08a      	sub	sp, #40	; 0x28
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	60f8      	str	r0, [r7, #12]
 8010aa0:	60b9      	str	r1, [r7, #8]
 8010aa2:	603b      	str	r3, [r7, #0]
 8010aa4:	4613      	mov	r3, r2
 8010aa6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d109      	bne.n	8010ac6 <xTaskGenericNotify+0x2e>
 8010ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab6:	f383 8811 	msr	BASEPRI, r3
 8010aba:	f3bf 8f6f 	isb	sy
 8010abe:	f3bf 8f4f 	dsb	sy
 8010ac2:	61bb      	str	r3, [r7, #24]
 8010ac4:	e7fe      	b.n	8010ac4 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8010aca:	f000 fe37 	bl	801173c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d003      	beq.n	8010adc <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010ad4:	6a3b      	ldr	r3, [r7, #32]
 8010ad6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010adc:	6a3b      	ldr	r3, [r7, #32]
 8010ade:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010ae2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010ae4:	6a3b      	ldr	r3, [r7, #32]
 8010ae6:	2202      	movs	r2, #2
 8010ae8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8010aec:	79fb      	ldrb	r3, [r7, #7]
 8010aee:	2b04      	cmp	r3, #4
 8010af0:	d827      	bhi.n	8010b42 <xTaskGenericNotify+0xaa>
 8010af2:	a201      	add	r2, pc, #4	; (adr r2, 8010af8 <xTaskGenericNotify+0x60>)
 8010af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010af8:	08010b61 	.word	0x08010b61
 8010afc:	08010b0d 	.word	0x08010b0d
 8010b00:	08010b1b 	.word	0x08010b1b
 8010b04:	08010b27 	.word	0x08010b27
 8010b08:	08010b2f 	.word	0x08010b2f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010b0c:	6a3b      	ldr	r3, [r7, #32]
 8010b0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	431a      	orrs	r2, r3
 8010b14:	6a3b      	ldr	r3, [r7, #32]
 8010b16:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010b18:	e025      	b.n	8010b66 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010b1a:	6a3b      	ldr	r3, [r7, #32]
 8010b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b1e:	1c5a      	adds	r2, r3, #1
 8010b20:	6a3b      	ldr	r3, [r7, #32]
 8010b22:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010b24:	e01f      	b.n	8010b66 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010b26:	6a3b      	ldr	r3, [r7, #32]
 8010b28:	68ba      	ldr	r2, [r7, #8]
 8010b2a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010b2c:	e01b      	b.n	8010b66 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010b2e:	7ffb      	ldrb	r3, [r7, #31]
 8010b30:	2b02      	cmp	r3, #2
 8010b32:	d003      	beq.n	8010b3c <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010b34:	6a3b      	ldr	r3, [r7, #32]
 8010b36:	68ba      	ldr	r2, [r7, #8]
 8010b38:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010b3a:	e014      	b.n	8010b66 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8010b40:	e011      	b.n	8010b66 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010b42:	6a3b      	ldr	r3, [r7, #32]
 8010b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b4a:	d00b      	beq.n	8010b64 <xTaskGenericNotify+0xcc>
 8010b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b50:	f383 8811 	msr	BASEPRI, r3
 8010b54:	f3bf 8f6f 	isb	sy
 8010b58:	f3bf 8f4f 	dsb	sy
 8010b5c:	617b      	str	r3, [r7, #20]
 8010b5e:	e7fe      	b.n	8010b5e <xTaskGenericNotify+0xc6>
					break;
 8010b60:	bf00      	nop
 8010b62:	e000      	b.n	8010b66 <xTaskGenericNotify+0xce>

					break;
 8010b64:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010b66:	7ffb      	ldrb	r3, [r7, #31]
 8010b68:	2b01      	cmp	r3, #1
 8010b6a:	d13b      	bne.n	8010be4 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b6c:	6a3b      	ldr	r3, [r7, #32]
 8010b6e:	3304      	adds	r3, #4
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7fd fe6d 	bl	800e850 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010b76:	6a3b      	ldr	r3, [r7, #32]
 8010b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b7a:	4b1e      	ldr	r3, [pc, #120]	; (8010bf4 <xTaskGenericNotify+0x15c>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d903      	bls.n	8010b8a <xTaskGenericNotify+0xf2>
 8010b82:	6a3b      	ldr	r3, [r7, #32]
 8010b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b86:	4a1b      	ldr	r2, [pc, #108]	; (8010bf4 <xTaskGenericNotify+0x15c>)
 8010b88:	6013      	str	r3, [r2, #0]
 8010b8a:	6a3b      	ldr	r3, [r7, #32]
 8010b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b8e:	4613      	mov	r3, r2
 8010b90:	009b      	lsls	r3, r3, #2
 8010b92:	4413      	add	r3, r2
 8010b94:	009b      	lsls	r3, r3, #2
 8010b96:	4a18      	ldr	r2, [pc, #96]	; (8010bf8 <xTaskGenericNotify+0x160>)
 8010b98:	441a      	add	r2, r3
 8010b9a:	6a3b      	ldr	r3, [r7, #32]
 8010b9c:	3304      	adds	r3, #4
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	4610      	mov	r0, r2
 8010ba2:	f7fd fdf8 	bl	800e796 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010ba6:	6a3b      	ldr	r3, [r7, #32]
 8010ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d009      	beq.n	8010bc2 <xTaskGenericNotify+0x12a>
 8010bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb2:	f383 8811 	msr	BASEPRI, r3
 8010bb6:	f3bf 8f6f 	isb	sy
 8010bba:	f3bf 8f4f 	dsb	sy
 8010bbe:	613b      	str	r3, [r7, #16]
 8010bc0:	e7fe      	b.n	8010bc0 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8010bc2:	f7ff fd59 	bl	8010678 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010bc6:	6a3b      	ldr	r3, [r7, #32]
 8010bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bca:	4b0c      	ldr	r3, [pc, #48]	; (8010bfc <xTaskGenericNotify+0x164>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	d907      	bls.n	8010be4 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010bd4:	4b0a      	ldr	r3, [pc, #40]	; (8010c00 <xTaskGenericNotify+0x168>)
 8010bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bda:	601a      	str	r2, [r3, #0]
 8010bdc:	f3bf 8f4f 	dsb	sy
 8010be0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010be4:	f000 fdd8 	bl	8011798 <vPortExitCritical>

		return xReturn;
 8010be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3728      	adds	r7, #40	; 0x28
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
 8010bf2:	bf00      	nop
 8010bf4:	20002138 	.word	0x20002138
 8010bf8:	20001c60 	.word	0x20001c60
 8010bfc:	20001c5c 	.word	0x20001c5c
 8010c00:	e000ed04 	.word	0xe000ed04

08010c04 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b08e      	sub	sp, #56	; 0x38
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	60f8      	str	r0, [r7, #12]
 8010c0c:	60b9      	str	r1, [r7, #8]
 8010c0e:	603b      	str	r3, [r7, #0]
 8010c10:	4613      	mov	r3, r2
 8010c12:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8010c14:	2301      	movs	r3, #1
 8010c16:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d109      	bne.n	8010c32 <xTaskGenericNotifyFromISR+0x2e>
 8010c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c22:	f383 8811 	msr	BASEPRI, r3
 8010c26:	f3bf 8f6f 	isb	sy
 8010c2a:	f3bf 8f4f 	dsb	sy
 8010c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8010c30:	e7fe      	b.n	8010c30 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c32:	f000 fe5f 	bl	80118f4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8010c3a:	f3ef 8211 	mrs	r2, BASEPRI
 8010c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c42:	f383 8811 	msr	BASEPRI, r3
 8010c46:	f3bf 8f6f 	isb	sy
 8010c4a:	f3bf 8f4f 	dsb	sy
 8010c4e:	623a      	str	r2, [r7, #32]
 8010c50:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8010c52:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c54:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d003      	beq.n	8010c64 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c70:	2202      	movs	r2, #2
 8010c72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8010c76:	79fb      	ldrb	r3, [r7, #7]
 8010c78:	2b04      	cmp	r3, #4
 8010c7a:	d829      	bhi.n	8010cd0 <xTaskGenericNotifyFromISR+0xcc>
 8010c7c:	a201      	add	r2, pc, #4	; (adr r2, 8010c84 <xTaskGenericNotifyFromISR+0x80>)
 8010c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c82:	bf00      	nop
 8010c84:	08010cef 	.word	0x08010cef
 8010c88:	08010c99 	.word	0x08010c99
 8010c8c:	08010ca7 	.word	0x08010ca7
 8010c90:	08010cb3 	.word	0x08010cb3
 8010c94:	08010cbb 	.word	0x08010cbb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	431a      	orrs	r2, r3
 8010ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010ca4:	e026      	b.n	8010cf4 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010caa:	1c5a      	adds	r2, r3, #1
 8010cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010cb0:	e020      	b.n	8010cf4 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb4:	68ba      	ldr	r2, [r7, #8]
 8010cb6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010cb8:	e01c      	b.n	8010cf4 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010cba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010cbe:	2b02      	cmp	r3, #2
 8010cc0:	d003      	beq.n	8010cca <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc4:	68ba      	ldr	r2, [r7, #8]
 8010cc6:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010cc8:	e014      	b.n	8010cf4 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8010cce:	e011      	b.n	8010cf4 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cd8:	d00b      	beq.n	8010cf2 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8010cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cde:	f383 8811 	msr	BASEPRI, r3
 8010ce2:	f3bf 8f6f 	isb	sy
 8010ce6:	f3bf 8f4f 	dsb	sy
 8010cea:	61bb      	str	r3, [r7, #24]
 8010cec:	e7fe      	b.n	8010cec <xTaskGenericNotifyFromISR+0xe8>
					break;
 8010cee:	bf00      	nop
 8010cf0:	e000      	b.n	8010cf4 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8010cf2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010cf4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010cf8:	2b01      	cmp	r3, #1
 8010cfa:	d145      	bne.n	8010d88 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d009      	beq.n	8010d18 <xTaskGenericNotifyFromISR+0x114>
 8010d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d08:	f383 8811 	msr	BASEPRI, r3
 8010d0c:	f3bf 8f6f 	isb	sy
 8010d10:	f3bf 8f4f 	dsb	sy
 8010d14:	617b      	str	r3, [r7, #20]
 8010d16:	e7fe      	b.n	8010d16 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d18:	4b20      	ldr	r3, [pc, #128]	; (8010d9c <xTaskGenericNotifyFromISR+0x198>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d11d      	bne.n	8010d5c <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d22:	3304      	adds	r3, #4
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7fd fd93 	bl	800e850 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d2e:	4b1c      	ldr	r3, [pc, #112]	; (8010da0 <xTaskGenericNotifyFromISR+0x19c>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d903      	bls.n	8010d3e <xTaskGenericNotifyFromISR+0x13a>
 8010d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d3a:	4a19      	ldr	r2, [pc, #100]	; (8010da0 <xTaskGenericNotifyFromISR+0x19c>)
 8010d3c:	6013      	str	r3, [r2, #0]
 8010d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d42:	4613      	mov	r3, r2
 8010d44:	009b      	lsls	r3, r3, #2
 8010d46:	4413      	add	r3, r2
 8010d48:	009b      	lsls	r3, r3, #2
 8010d4a:	4a16      	ldr	r2, [pc, #88]	; (8010da4 <xTaskGenericNotifyFromISR+0x1a0>)
 8010d4c:	441a      	add	r2, r3
 8010d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d50:	3304      	adds	r3, #4
 8010d52:	4619      	mov	r1, r3
 8010d54:	4610      	mov	r0, r2
 8010d56:	f7fd fd1e 	bl	800e796 <vListInsertEnd>
 8010d5a:	e005      	b.n	8010d68 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d5e:	3318      	adds	r3, #24
 8010d60:	4619      	mov	r1, r3
 8010d62:	4811      	ldr	r0, [pc, #68]	; (8010da8 <xTaskGenericNotifyFromISR+0x1a4>)
 8010d64:	f7fd fd17 	bl	800e796 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d6c:	4b0f      	ldr	r3, [pc, #60]	; (8010dac <xTaskGenericNotifyFromISR+0x1a8>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d908      	bls.n	8010d88 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d002      	beq.n	8010d82 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d7e:	2201      	movs	r2, #1
 8010d80:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010d82:	4b0b      	ldr	r3, [pc, #44]	; (8010db0 <xTaskGenericNotifyFromISR+0x1ac>)
 8010d84:	2201      	movs	r2, #1
 8010d86:	601a      	str	r2, [r3, #0]
 8010d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d8a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8010d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8010d94:	4618      	mov	r0, r3
 8010d96:	3738      	adds	r7, #56	; 0x38
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	20002158 	.word	0x20002158
 8010da0:	20002138 	.word	0x20002138
 8010da4:	20001c60 	.word	0x20001c60
 8010da8:	200020f0 	.word	0x200020f0
 8010dac:	20001c5c 	.word	0x20001c5c
 8010db0:	20002144 	.word	0x20002144

08010db4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b084      	sub	sp, #16
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
 8010dbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010dbe:	4b21      	ldr	r3, [pc, #132]	; (8010e44 <prvAddCurrentTaskToDelayedList+0x90>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010dc4:	4b20      	ldr	r3, [pc, #128]	; (8010e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	3304      	adds	r3, #4
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7fd fd40 	bl	800e850 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dd6:	d10a      	bne.n	8010dee <prvAddCurrentTaskToDelayedList+0x3a>
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d007      	beq.n	8010dee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010dde:	4b1a      	ldr	r3, [pc, #104]	; (8010e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	3304      	adds	r3, #4
 8010de4:	4619      	mov	r1, r3
 8010de6:	4819      	ldr	r0, [pc, #100]	; (8010e4c <prvAddCurrentTaskToDelayedList+0x98>)
 8010de8:	f7fd fcd5 	bl	800e796 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010dec:	e026      	b.n	8010e3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010dee:	68fa      	ldr	r2, [r7, #12]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	4413      	add	r3, r2
 8010df4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010df6:	4b14      	ldr	r3, [pc, #80]	; (8010e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	68ba      	ldr	r2, [r7, #8]
 8010dfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010dfe:	68ba      	ldr	r2, [r7, #8]
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d209      	bcs.n	8010e1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010e06:	4b12      	ldr	r3, [pc, #72]	; (8010e50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010e08:	681a      	ldr	r2, [r3, #0]
 8010e0a:	4b0f      	ldr	r3, [pc, #60]	; (8010e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	3304      	adds	r3, #4
 8010e10:	4619      	mov	r1, r3
 8010e12:	4610      	mov	r0, r2
 8010e14:	f7fd fce3 	bl	800e7de <vListInsert>
}
 8010e18:	e010      	b.n	8010e3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010e1a:	4b0e      	ldr	r3, [pc, #56]	; (8010e54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010e1c:	681a      	ldr	r2, [r3, #0]
 8010e1e:	4b0a      	ldr	r3, [pc, #40]	; (8010e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	3304      	adds	r3, #4
 8010e24:	4619      	mov	r1, r3
 8010e26:	4610      	mov	r0, r2
 8010e28:	f7fd fcd9 	bl	800e7de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010e2c:	4b0a      	ldr	r3, [pc, #40]	; (8010e58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	68ba      	ldr	r2, [r7, #8]
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d202      	bcs.n	8010e3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010e36:	4a08      	ldr	r2, [pc, #32]	; (8010e58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	6013      	str	r3, [r2, #0]
}
 8010e3c:	bf00      	nop
 8010e3e:	3710      	adds	r7, #16
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	20002134 	.word	0x20002134
 8010e48:	20001c5c 	.word	0x20001c5c
 8010e4c:	2000211c 	.word	0x2000211c
 8010e50:	200020ec 	.word	0x200020ec
 8010e54:	200020e8 	.word	0x200020e8
 8010e58:	20002150 	.word	0x20002150

08010e5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b08a      	sub	sp, #40	; 0x28
 8010e60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010e62:	2300      	movs	r3, #0
 8010e64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010e66:	f000 faff 	bl	8011468 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010e6a:	4b1c      	ldr	r3, [pc, #112]	; (8010edc <xTimerCreateTimerTask+0x80>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d021      	beq.n	8010eb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010e72:	2300      	movs	r3, #0
 8010e74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010e76:	2300      	movs	r3, #0
 8010e78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010e7a:	1d3a      	adds	r2, r7, #4
 8010e7c:	f107 0108 	add.w	r1, r7, #8
 8010e80:	f107 030c 	add.w	r3, r7, #12
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7fd fc3f 	bl	800e708 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010e8a:	6879      	ldr	r1, [r7, #4]
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	68fa      	ldr	r2, [r7, #12]
 8010e90:	9202      	str	r2, [sp, #8]
 8010e92:	9301      	str	r3, [sp, #4]
 8010e94:	2302      	movs	r3, #2
 8010e96:	9300      	str	r3, [sp, #0]
 8010e98:	2300      	movs	r3, #0
 8010e9a:	460a      	mov	r2, r1
 8010e9c:	4910      	ldr	r1, [pc, #64]	; (8010ee0 <xTimerCreateTimerTask+0x84>)
 8010e9e:	4811      	ldr	r0, [pc, #68]	; (8010ee4 <xTimerCreateTimerTask+0x88>)
 8010ea0:	f7fe fda2 	bl	800f9e8 <xTaskCreateStatic>
 8010ea4:	4602      	mov	r2, r0
 8010ea6:	4b10      	ldr	r3, [pc, #64]	; (8010ee8 <xTimerCreateTimerTask+0x8c>)
 8010ea8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010eaa:	4b0f      	ldr	r3, [pc, #60]	; (8010ee8 <xTimerCreateTimerTask+0x8c>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d001      	beq.n	8010eb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d109      	bne.n	8010ed0 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8010ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec0:	f383 8811 	msr	BASEPRI, r3
 8010ec4:	f3bf 8f6f 	isb	sy
 8010ec8:	f3bf 8f4f 	dsb	sy
 8010ecc:	613b      	str	r3, [r7, #16]
 8010ece:	e7fe      	b.n	8010ece <xTimerCreateTimerTask+0x72>
	return xReturn;
 8010ed0:	697b      	ldr	r3, [r7, #20]
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3718      	adds	r7, #24
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	2000218c 	.word	0x2000218c
 8010ee0:	08013944 	.word	0x08013944
 8010ee4:	0801101d 	.word	0x0801101d
 8010ee8:	20002190 	.word	0x20002190

08010eec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b08a      	sub	sp, #40	; 0x28
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	60f8      	str	r0, [r7, #12]
 8010ef4:	60b9      	str	r1, [r7, #8]
 8010ef6:	607a      	str	r2, [r7, #4]
 8010ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010efa:	2300      	movs	r3, #0
 8010efc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d109      	bne.n	8010f18 <xTimerGenericCommand+0x2c>
 8010f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f08:	f383 8811 	msr	BASEPRI, r3
 8010f0c:	f3bf 8f6f 	isb	sy
 8010f10:	f3bf 8f4f 	dsb	sy
 8010f14:	623b      	str	r3, [r7, #32]
 8010f16:	e7fe      	b.n	8010f16 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010f18:	4b19      	ldr	r3, [pc, #100]	; (8010f80 <xTimerGenericCommand+0x94>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d02a      	beq.n	8010f76 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	2b05      	cmp	r3, #5
 8010f30:	dc18      	bgt.n	8010f64 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010f32:	f7ff fbd1 	bl	80106d8 <xTaskGetSchedulerState>
 8010f36:	4603      	mov	r3, r0
 8010f38:	2b02      	cmp	r3, #2
 8010f3a:	d109      	bne.n	8010f50 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010f3c:	4b10      	ldr	r3, [pc, #64]	; (8010f80 <xTimerGenericCommand+0x94>)
 8010f3e:	6818      	ldr	r0, [r3, #0]
 8010f40:	f107 0110 	add.w	r1, r7, #16
 8010f44:	2300      	movs	r3, #0
 8010f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f48:	f7fd ff04 	bl	800ed54 <xQueueGenericSend>
 8010f4c:	6278      	str	r0, [r7, #36]	; 0x24
 8010f4e:	e012      	b.n	8010f76 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010f50:	4b0b      	ldr	r3, [pc, #44]	; (8010f80 <xTimerGenericCommand+0x94>)
 8010f52:	6818      	ldr	r0, [r3, #0]
 8010f54:	f107 0110 	add.w	r1, r7, #16
 8010f58:	2300      	movs	r3, #0
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	f7fd fefa 	bl	800ed54 <xQueueGenericSend>
 8010f60:	6278      	str	r0, [r7, #36]	; 0x24
 8010f62:	e008      	b.n	8010f76 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010f64:	4b06      	ldr	r3, [pc, #24]	; (8010f80 <xTimerGenericCommand+0x94>)
 8010f66:	6818      	ldr	r0, [r3, #0]
 8010f68:	f107 0110 	add.w	r1, r7, #16
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	683a      	ldr	r2, [r7, #0]
 8010f70:	f7fd ffea 	bl	800ef48 <xQueueGenericSendFromISR>
 8010f74:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3728      	adds	r7, #40	; 0x28
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}
 8010f80:	2000218c 	.word	0x2000218c

08010f84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b088      	sub	sp, #32
 8010f88:	af02      	add	r7, sp, #8
 8010f8a:	6078      	str	r0, [r7, #4]
 8010f8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f8e:	4b22      	ldr	r3, [pc, #136]	; (8011018 <prvProcessExpiredTimer+0x94>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	68db      	ldr	r3, [r3, #12]
 8010f94:	68db      	ldr	r3, [r3, #12]
 8010f96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	3304      	adds	r3, #4
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7fd fc57 	bl	800e850 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fa8:	f003 0304 	and.w	r3, r3, #4
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d021      	beq.n	8010ff4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	699a      	ldr	r2, [r3, #24]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	18d1      	adds	r1, r2, r3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	683a      	ldr	r2, [r7, #0]
 8010fbc:	6978      	ldr	r0, [r7, #20]
 8010fbe:	f000 f8d1 	bl	8011164 <prvInsertTimerInActiveList>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d01e      	beq.n	8011006 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010fc8:	2300      	movs	r3, #0
 8010fca:	9300      	str	r3, [sp, #0]
 8010fcc:	2300      	movs	r3, #0
 8010fce:	687a      	ldr	r2, [r7, #4]
 8010fd0:	2100      	movs	r1, #0
 8010fd2:	6978      	ldr	r0, [r7, #20]
 8010fd4:	f7ff ff8a 	bl	8010eec <xTimerGenericCommand>
 8010fd8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d112      	bne.n	8011006 <prvProcessExpiredTimer+0x82>
 8010fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe4:	f383 8811 	msr	BASEPRI, r3
 8010fe8:	f3bf 8f6f 	isb	sy
 8010fec:	f3bf 8f4f 	dsb	sy
 8010ff0:	60fb      	str	r3, [r7, #12]
 8010ff2:	e7fe      	b.n	8010ff2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ffa:	f023 0301 	bic.w	r3, r3, #1
 8010ffe:	b2da      	uxtb	r2, r3
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	6a1b      	ldr	r3, [r3, #32]
 801100a:	6978      	ldr	r0, [r7, #20]
 801100c:	4798      	blx	r3
}
 801100e:	bf00      	nop
 8011010:	3718      	adds	r7, #24
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}
 8011016:	bf00      	nop
 8011018:	20002184 	.word	0x20002184

0801101c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b084      	sub	sp, #16
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011024:	f107 0308 	add.w	r3, r7, #8
 8011028:	4618      	mov	r0, r3
 801102a:	f000 f857 	bl	80110dc <prvGetNextExpireTime>
 801102e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	4619      	mov	r1, r3
 8011034:	68f8      	ldr	r0, [r7, #12]
 8011036:	f000 f803 	bl	8011040 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801103a:	f000 f8d5 	bl	80111e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801103e:	e7f1      	b.n	8011024 <prvTimerTask+0x8>

08011040 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b084      	sub	sp, #16
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801104a:	f7fe ff03 	bl	800fe54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801104e:	f107 0308 	add.w	r3, r7, #8
 8011052:	4618      	mov	r0, r3
 8011054:	f000 f866 	bl	8011124 <prvSampleTimeNow>
 8011058:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d130      	bne.n	80110c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d10a      	bne.n	801107c <prvProcessTimerOrBlockTask+0x3c>
 8011066:	687a      	ldr	r2, [r7, #4]
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	429a      	cmp	r2, r3
 801106c:	d806      	bhi.n	801107c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801106e:	f7fe ff37 	bl	800fee0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011072:	68f9      	ldr	r1, [r7, #12]
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f7ff ff85 	bl	8010f84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801107a:	e024      	b.n	80110c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d008      	beq.n	8011094 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011082:	4b13      	ldr	r3, [pc, #76]	; (80110d0 <prvProcessTimerOrBlockTask+0x90>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d101      	bne.n	8011090 <prvProcessTimerOrBlockTask+0x50>
 801108c:	2301      	movs	r3, #1
 801108e:	e000      	b.n	8011092 <prvProcessTimerOrBlockTask+0x52>
 8011090:	2300      	movs	r3, #0
 8011092:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011094:	4b0f      	ldr	r3, [pc, #60]	; (80110d4 <prvProcessTimerOrBlockTask+0x94>)
 8011096:	6818      	ldr	r0, [r3, #0]
 8011098:	687a      	ldr	r2, [r7, #4]
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	1ad3      	subs	r3, r2, r3
 801109e:	683a      	ldr	r2, [r7, #0]
 80110a0:	4619      	mov	r1, r3
 80110a2:	f7fe fc6d 	bl	800f980 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80110a6:	f7fe ff1b 	bl	800fee0 <xTaskResumeAll>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d10a      	bne.n	80110c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80110b0:	4b09      	ldr	r3, [pc, #36]	; (80110d8 <prvProcessTimerOrBlockTask+0x98>)
 80110b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110b6:	601a      	str	r2, [r3, #0]
 80110b8:	f3bf 8f4f 	dsb	sy
 80110bc:	f3bf 8f6f 	isb	sy
}
 80110c0:	e001      	b.n	80110c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80110c2:	f7fe ff0d 	bl	800fee0 <xTaskResumeAll>
}
 80110c6:	bf00      	nop
 80110c8:	3710      	adds	r7, #16
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	20002188 	.word	0x20002188
 80110d4:	2000218c 	.word	0x2000218c
 80110d8:	e000ed04 	.word	0xe000ed04

080110dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80110dc:	b480      	push	{r7}
 80110de:	b085      	sub	sp, #20
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80110e4:	4b0e      	ldr	r3, [pc, #56]	; (8011120 <prvGetNextExpireTime+0x44>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d101      	bne.n	80110f2 <prvGetNextExpireTime+0x16>
 80110ee:	2201      	movs	r2, #1
 80110f0:	e000      	b.n	80110f4 <prvGetNextExpireTime+0x18>
 80110f2:	2200      	movs	r2, #0
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d105      	bne.n	801110c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011100:	4b07      	ldr	r3, [pc, #28]	; (8011120 <prvGetNextExpireTime+0x44>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	68db      	ldr	r3, [r3, #12]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	60fb      	str	r3, [r7, #12]
 801110a:	e001      	b.n	8011110 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801110c:	2300      	movs	r3, #0
 801110e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011110:	68fb      	ldr	r3, [r7, #12]
}
 8011112:	4618      	mov	r0, r3
 8011114:	3714      	adds	r7, #20
 8011116:	46bd      	mov	sp, r7
 8011118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111c:	4770      	bx	lr
 801111e:	bf00      	nop
 8011120:	20002184 	.word	0x20002184

08011124 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b084      	sub	sp, #16
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801112c:	f7fe ff74 	bl	8010018 <xTaskGetTickCount>
 8011130:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011132:	4b0b      	ldr	r3, [pc, #44]	; (8011160 <prvSampleTimeNow+0x3c>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	68fa      	ldr	r2, [r7, #12]
 8011138:	429a      	cmp	r2, r3
 801113a:	d205      	bcs.n	8011148 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801113c:	f000 f930 	bl	80113a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2201      	movs	r2, #1
 8011144:	601a      	str	r2, [r3, #0]
 8011146:	e002      	b.n	801114e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2200      	movs	r2, #0
 801114c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801114e:	4a04      	ldr	r2, [pc, #16]	; (8011160 <prvSampleTimeNow+0x3c>)
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011154:	68fb      	ldr	r3, [r7, #12]
}
 8011156:	4618      	mov	r0, r3
 8011158:	3710      	adds	r7, #16
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}
 801115e:	bf00      	nop
 8011160:	20002194 	.word	0x20002194

08011164 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b086      	sub	sp, #24
 8011168:	af00      	add	r7, sp, #0
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	60b9      	str	r1, [r7, #8]
 801116e:	607a      	str	r2, [r7, #4]
 8011170:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011172:	2300      	movs	r3, #0
 8011174:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	68ba      	ldr	r2, [r7, #8]
 801117a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	68fa      	ldr	r2, [r7, #12]
 8011180:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011182:	68ba      	ldr	r2, [r7, #8]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	429a      	cmp	r2, r3
 8011188:	d812      	bhi.n	80111b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801118a:	687a      	ldr	r2, [r7, #4]
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	1ad2      	subs	r2, r2, r3
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	699b      	ldr	r3, [r3, #24]
 8011194:	429a      	cmp	r2, r3
 8011196:	d302      	bcc.n	801119e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011198:	2301      	movs	r3, #1
 801119a:	617b      	str	r3, [r7, #20]
 801119c:	e01b      	b.n	80111d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801119e:	4b10      	ldr	r3, [pc, #64]	; (80111e0 <prvInsertTimerInActiveList+0x7c>)
 80111a0:	681a      	ldr	r2, [r3, #0]
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	3304      	adds	r3, #4
 80111a6:	4619      	mov	r1, r3
 80111a8:	4610      	mov	r0, r2
 80111aa:	f7fd fb18 	bl	800e7de <vListInsert>
 80111ae:	e012      	b.n	80111d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80111b0:	687a      	ldr	r2, [r7, #4]
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d206      	bcs.n	80111c6 <prvInsertTimerInActiveList+0x62>
 80111b8:	68ba      	ldr	r2, [r7, #8]
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	429a      	cmp	r2, r3
 80111be:	d302      	bcc.n	80111c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80111c0:	2301      	movs	r3, #1
 80111c2:	617b      	str	r3, [r7, #20]
 80111c4:	e007      	b.n	80111d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80111c6:	4b07      	ldr	r3, [pc, #28]	; (80111e4 <prvInsertTimerInActiveList+0x80>)
 80111c8:	681a      	ldr	r2, [r3, #0]
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	3304      	adds	r3, #4
 80111ce:	4619      	mov	r1, r3
 80111d0:	4610      	mov	r0, r2
 80111d2:	f7fd fb04 	bl	800e7de <vListInsert>
		}
	}

	return xProcessTimerNow;
 80111d6:	697b      	ldr	r3, [r7, #20]
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3718      	adds	r7, #24
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}
 80111e0:	20002188 	.word	0x20002188
 80111e4:	20002184 	.word	0x20002184

080111e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b08e      	sub	sp, #56	; 0x38
 80111ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80111ee:	e0c6      	b.n	801137e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	da17      	bge.n	8011226 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80111f6:	1d3b      	adds	r3, r7, #4
 80111f8:	3304      	adds	r3, #4
 80111fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80111fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d109      	bne.n	8011216 <prvProcessReceivedCommands+0x2e>
 8011202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011206:	f383 8811 	msr	BASEPRI, r3
 801120a:	f3bf 8f6f 	isb	sy
 801120e:	f3bf 8f4f 	dsb	sy
 8011212:	61fb      	str	r3, [r7, #28]
 8011214:	e7fe      	b.n	8011214 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801121c:	6850      	ldr	r0, [r2, #4]
 801121e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011220:	6892      	ldr	r2, [r2, #8]
 8011222:	4611      	mov	r1, r2
 8011224:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2b00      	cmp	r3, #0
 801122a:	f2c0 80a7 	blt.w	801137c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011234:	695b      	ldr	r3, [r3, #20]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d004      	beq.n	8011244 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801123c:	3304      	adds	r3, #4
 801123e:	4618      	mov	r0, r3
 8011240:	f7fd fb06 	bl	800e850 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011244:	463b      	mov	r3, r7
 8011246:	4618      	mov	r0, r3
 8011248:	f7ff ff6c 	bl	8011124 <prvSampleTimeNow>
 801124c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2b09      	cmp	r3, #9
 8011252:	f200 8094 	bhi.w	801137e <prvProcessReceivedCommands+0x196>
 8011256:	a201      	add	r2, pc, #4	; (adr r2, 801125c <prvProcessReceivedCommands+0x74>)
 8011258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801125c:	08011285 	.word	0x08011285
 8011260:	08011285 	.word	0x08011285
 8011264:	08011285 	.word	0x08011285
 8011268:	080112f7 	.word	0x080112f7
 801126c:	0801130b 	.word	0x0801130b
 8011270:	08011353 	.word	0x08011353
 8011274:	08011285 	.word	0x08011285
 8011278:	08011285 	.word	0x08011285
 801127c:	080112f7 	.word	0x080112f7
 8011280:	0801130b 	.word	0x0801130b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801128a:	f043 0301 	orr.w	r3, r3, #1
 801128e:	b2da      	uxtb	r2, r3
 8011290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011296:	68ba      	ldr	r2, [r7, #8]
 8011298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801129a:	699b      	ldr	r3, [r3, #24]
 801129c:	18d1      	adds	r1, r2, r3
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112a4:	f7ff ff5e 	bl	8011164 <prvInsertTimerInActiveList>
 80112a8:	4603      	mov	r3, r0
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d067      	beq.n	801137e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80112ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b0:	6a1b      	ldr	r3, [r3, #32]
 80112b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80112b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80112bc:	f003 0304 	and.w	r3, r3, #4
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d05c      	beq.n	801137e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80112c4:	68ba      	ldr	r2, [r7, #8]
 80112c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c8:	699b      	ldr	r3, [r3, #24]
 80112ca:	441a      	add	r2, r3
 80112cc:	2300      	movs	r3, #0
 80112ce:	9300      	str	r3, [sp, #0]
 80112d0:	2300      	movs	r3, #0
 80112d2:	2100      	movs	r1, #0
 80112d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112d6:	f7ff fe09 	bl	8010eec <xTimerGenericCommand>
 80112da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80112dc:	6a3b      	ldr	r3, [r7, #32]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d14d      	bne.n	801137e <prvProcessReceivedCommands+0x196>
 80112e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e6:	f383 8811 	msr	BASEPRI, r3
 80112ea:	f3bf 8f6f 	isb	sy
 80112ee:	f3bf 8f4f 	dsb	sy
 80112f2:	61bb      	str	r3, [r7, #24]
 80112f4:	e7fe      	b.n	80112f4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80112f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80112fc:	f023 0301 	bic.w	r3, r3, #1
 8011300:	b2da      	uxtb	r2, r3
 8011302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011304:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011308:	e039      	b.n	801137e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801130a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801130c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011310:	f043 0301 	orr.w	r3, r3, #1
 8011314:	b2da      	uxtb	r2, r3
 8011316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011318:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801131c:	68ba      	ldr	r2, [r7, #8]
 801131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011320:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011324:	699b      	ldr	r3, [r3, #24]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d109      	bne.n	801133e <prvProcessReceivedCommands+0x156>
 801132a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801132e:	f383 8811 	msr	BASEPRI, r3
 8011332:	f3bf 8f6f 	isb	sy
 8011336:	f3bf 8f4f 	dsb	sy
 801133a:	617b      	str	r3, [r7, #20]
 801133c:	e7fe      	b.n	801133c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011340:	699a      	ldr	r2, [r3, #24]
 8011342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011344:	18d1      	adds	r1, r2, r3
 8011346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801134a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801134c:	f7ff ff0a 	bl	8011164 <prvInsertTimerInActiveList>
					break;
 8011350:	e015      	b.n	801137e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011358:	f003 0302 	and.w	r3, r3, #2
 801135c:	2b00      	cmp	r3, #0
 801135e:	d103      	bne.n	8011368 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8011360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011362:	f000 fbc7 	bl	8011af4 <vPortFree>
 8011366:	e00a      	b.n	801137e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801136a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801136e:	f023 0301 	bic.w	r3, r3, #1
 8011372:	b2da      	uxtb	r2, r3
 8011374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801137a:	e000      	b.n	801137e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801137c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801137e:	4b07      	ldr	r3, [pc, #28]	; (801139c <prvProcessReceivedCommands+0x1b4>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	1d39      	adds	r1, r7, #4
 8011384:	2200      	movs	r2, #0
 8011386:	4618      	mov	r0, r3
 8011388:	f7fd fefc 	bl	800f184 <xQueueReceive>
 801138c:	4603      	mov	r3, r0
 801138e:	2b00      	cmp	r3, #0
 8011390:	f47f af2e 	bne.w	80111f0 <prvProcessReceivedCommands+0x8>
	}
}
 8011394:	bf00      	nop
 8011396:	3730      	adds	r7, #48	; 0x30
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}
 801139c:	2000218c 	.word	0x2000218c

080113a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b088      	sub	sp, #32
 80113a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80113a6:	e047      	b.n	8011438 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80113a8:	4b2d      	ldr	r3, [pc, #180]	; (8011460 <prvSwitchTimerLists+0xc0>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	68db      	ldr	r3, [r3, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113b2:	4b2b      	ldr	r3, [pc, #172]	; (8011460 <prvSwitchTimerLists+0xc0>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	68db      	ldr	r3, [r3, #12]
 80113b8:	68db      	ldr	r3, [r3, #12]
 80113ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	3304      	adds	r3, #4
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7fd fa45 	bl	800e850 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	6a1b      	ldr	r3, [r3, #32]
 80113ca:	68f8      	ldr	r0, [r7, #12]
 80113cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80113d4:	f003 0304 	and.w	r3, r3, #4
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d02d      	beq.n	8011438 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	699b      	ldr	r3, [r3, #24]
 80113e0:	693a      	ldr	r2, [r7, #16]
 80113e2:	4413      	add	r3, r2
 80113e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80113e6:	68ba      	ldr	r2, [r7, #8]
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	429a      	cmp	r2, r3
 80113ec:	d90e      	bls.n	801140c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	68ba      	ldr	r2, [r7, #8]
 80113f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	68fa      	ldr	r2, [r7, #12]
 80113f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80113fa:	4b19      	ldr	r3, [pc, #100]	; (8011460 <prvSwitchTimerLists+0xc0>)
 80113fc:	681a      	ldr	r2, [r3, #0]
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	3304      	adds	r3, #4
 8011402:	4619      	mov	r1, r3
 8011404:	4610      	mov	r0, r2
 8011406:	f7fd f9ea 	bl	800e7de <vListInsert>
 801140a:	e015      	b.n	8011438 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801140c:	2300      	movs	r3, #0
 801140e:	9300      	str	r3, [sp, #0]
 8011410:	2300      	movs	r3, #0
 8011412:	693a      	ldr	r2, [r7, #16]
 8011414:	2100      	movs	r1, #0
 8011416:	68f8      	ldr	r0, [r7, #12]
 8011418:	f7ff fd68 	bl	8010eec <xTimerGenericCommand>
 801141c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d109      	bne.n	8011438 <prvSwitchTimerLists+0x98>
 8011424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011428:	f383 8811 	msr	BASEPRI, r3
 801142c:	f3bf 8f6f 	isb	sy
 8011430:	f3bf 8f4f 	dsb	sy
 8011434:	603b      	str	r3, [r7, #0]
 8011436:	e7fe      	b.n	8011436 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011438:	4b09      	ldr	r3, [pc, #36]	; (8011460 <prvSwitchTimerLists+0xc0>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d1b2      	bne.n	80113a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011442:	4b07      	ldr	r3, [pc, #28]	; (8011460 <prvSwitchTimerLists+0xc0>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011448:	4b06      	ldr	r3, [pc, #24]	; (8011464 <prvSwitchTimerLists+0xc4>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	4a04      	ldr	r2, [pc, #16]	; (8011460 <prvSwitchTimerLists+0xc0>)
 801144e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011450:	4a04      	ldr	r2, [pc, #16]	; (8011464 <prvSwitchTimerLists+0xc4>)
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	6013      	str	r3, [r2, #0]
}
 8011456:	bf00      	nop
 8011458:	3718      	adds	r7, #24
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
 801145e:	bf00      	nop
 8011460:	20002184 	.word	0x20002184
 8011464:	20002188 	.word	0x20002188

08011468 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801146e:	f000 f965 	bl	801173c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011472:	4b15      	ldr	r3, [pc, #84]	; (80114c8 <prvCheckForValidListAndQueue+0x60>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d120      	bne.n	80114bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801147a:	4814      	ldr	r0, [pc, #80]	; (80114cc <prvCheckForValidListAndQueue+0x64>)
 801147c:	f7fd f95e 	bl	800e73c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011480:	4813      	ldr	r0, [pc, #76]	; (80114d0 <prvCheckForValidListAndQueue+0x68>)
 8011482:	f7fd f95b 	bl	800e73c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011486:	4b13      	ldr	r3, [pc, #76]	; (80114d4 <prvCheckForValidListAndQueue+0x6c>)
 8011488:	4a10      	ldr	r2, [pc, #64]	; (80114cc <prvCheckForValidListAndQueue+0x64>)
 801148a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801148c:	4b12      	ldr	r3, [pc, #72]	; (80114d8 <prvCheckForValidListAndQueue+0x70>)
 801148e:	4a10      	ldr	r2, [pc, #64]	; (80114d0 <prvCheckForValidListAndQueue+0x68>)
 8011490:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011492:	2300      	movs	r3, #0
 8011494:	9300      	str	r3, [sp, #0]
 8011496:	4b11      	ldr	r3, [pc, #68]	; (80114dc <prvCheckForValidListAndQueue+0x74>)
 8011498:	4a11      	ldr	r2, [pc, #68]	; (80114e0 <prvCheckForValidListAndQueue+0x78>)
 801149a:	2110      	movs	r1, #16
 801149c:	200a      	movs	r0, #10
 801149e:	f7fd fa69 	bl	800e974 <xQueueGenericCreateStatic>
 80114a2:	4602      	mov	r2, r0
 80114a4:	4b08      	ldr	r3, [pc, #32]	; (80114c8 <prvCheckForValidListAndQueue+0x60>)
 80114a6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80114a8:	4b07      	ldr	r3, [pc, #28]	; (80114c8 <prvCheckForValidListAndQueue+0x60>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d005      	beq.n	80114bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80114b0:	4b05      	ldr	r3, [pc, #20]	; (80114c8 <prvCheckForValidListAndQueue+0x60>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	490b      	ldr	r1, [pc, #44]	; (80114e4 <prvCheckForValidListAndQueue+0x7c>)
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7fe fa10 	bl	800f8dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80114bc:	f000 f96c 	bl	8011798 <vPortExitCritical>
}
 80114c0:	bf00      	nop
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}
 80114c6:	bf00      	nop
 80114c8:	2000218c 	.word	0x2000218c
 80114cc:	2000215c 	.word	0x2000215c
 80114d0:	20002170 	.word	0x20002170
 80114d4:	20002184 	.word	0x20002184
 80114d8:	20002188 	.word	0x20002188
 80114dc:	20002238 	.word	0x20002238
 80114e0:	20002198 	.word	0x20002198
 80114e4:	0801394c 	.word	0x0801394c

080114e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80114e8:	b480      	push	{r7}
 80114ea:	b085      	sub	sp, #20
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	60f8      	str	r0, [r7, #12]
 80114f0:	60b9      	str	r1, [r7, #8]
 80114f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	3b04      	subs	r3, #4
 80114f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	3b04      	subs	r3, #4
 8011506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	f023 0201 	bic.w	r2, r3, #1
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	3b04      	subs	r3, #4
 8011516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011518:	4a0c      	ldr	r2, [pc, #48]	; (801154c <pxPortInitialiseStack+0x64>)
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	3b14      	subs	r3, #20
 8011522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011524:	687a      	ldr	r2, [r7, #4]
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	3b04      	subs	r3, #4
 801152e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	f06f 0202 	mvn.w	r2, #2
 8011536:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	3b20      	subs	r3, #32
 801153c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801153e:	68fb      	ldr	r3, [r7, #12]
}
 8011540:	4618      	mov	r0, r3
 8011542:	3714      	adds	r7, #20
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr
 801154c:	08011551 	.word	0x08011551

08011550 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011550:	b480      	push	{r7}
 8011552:	b085      	sub	sp, #20
 8011554:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011556:	2300      	movs	r3, #0
 8011558:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801155a:	4b11      	ldr	r3, [pc, #68]	; (80115a0 <prvTaskExitError+0x50>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011562:	d009      	beq.n	8011578 <prvTaskExitError+0x28>
 8011564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011568:	f383 8811 	msr	BASEPRI, r3
 801156c:	f3bf 8f6f 	isb	sy
 8011570:	f3bf 8f4f 	dsb	sy
 8011574:	60fb      	str	r3, [r7, #12]
 8011576:	e7fe      	b.n	8011576 <prvTaskExitError+0x26>
 8011578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801157c:	f383 8811 	msr	BASEPRI, r3
 8011580:	f3bf 8f6f 	isb	sy
 8011584:	f3bf 8f4f 	dsb	sy
 8011588:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801158a:	bf00      	nop
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d0fc      	beq.n	801158c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011592:	bf00      	nop
 8011594:	3714      	adds	r7, #20
 8011596:	46bd      	mov	sp, r7
 8011598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159c:	4770      	bx	lr
 801159e:	bf00      	nop
 80115a0:	20000138 	.word	0x20000138
	...

080115b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80115b0:	4b07      	ldr	r3, [pc, #28]	; (80115d0 <pxCurrentTCBConst2>)
 80115b2:	6819      	ldr	r1, [r3, #0]
 80115b4:	6808      	ldr	r0, [r1, #0]
 80115b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ba:	f380 8809 	msr	PSP, r0
 80115be:	f3bf 8f6f 	isb	sy
 80115c2:	f04f 0000 	mov.w	r0, #0
 80115c6:	f380 8811 	msr	BASEPRI, r0
 80115ca:	4770      	bx	lr
 80115cc:	f3af 8000 	nop.w

080115d0 <pxCurrentTCBConst2>:
 80115d0:	20001c5c 	.word	0x20001c5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80115d4:	bf00      	nop
 80115d6:	bf00      	nop

080115d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80115d8:	4808      	ldr	r0, [pc, #32]	; (80115fc <prvPortStartFirstTask+0x24>)
 80115da:	6800      	ldr	r0, [r0, #0]
 80115dc:	6800      	ldr	r0, [r0, #0]
 80115de:	f380 8808 	msr	MSP, r0
 80115e2:	f04f 0000 	mov.w	r0, #0
 80115e6:	f380 8814 	msr	CONTROL, r0
 80115ea:	b662      	cpsie	i
 80115ec:	b661      	cpsie	f
 80115ee:	f3bf 8f4f 	dsb	sy
 80115f2:	f3bf 8f6f 	isb	sy
 80115f6:	df00      	svc	0
 80115f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80115fa:	bf00      	nop
 80115fc:	e000ed08 	.word	0xe000ed08

08011600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b086      	sub	sp, #24
 8011604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011606:	4b44      	ldr	r3, [pc, #272]	; (8011718 <xPortStartScheduler+0x118>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	4a44      	ldr	r2, [pc, #272]	; (801171c <xPortStartScheduler+0x11c>)
 801160c:	4293      	cmp	r3, r2
 801160e:	d109      	bne.n	8011624 <xPortStartScheduler+0x24>
 8011610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011614:	f383 8811 	msr	BASEPRI, r3
 8011618:	f3bf 8f6f 	isb	sy
 801161c:	f3bf 8f4f 	dsb	sy
 8011620:	613b      	str	r3, [r7, #16]
 8011622:	e7fe      	b.n	8011622 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011624:	4b3c      	ldr	r3, [pc, #240]	; (8011718 <xPortStartScheduler+0x118>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4a3d      	ldr	r2, [pc, #244]	; (8011720 <xPortStartScheduler+0x120>)
 801162a:	4293      	cmp	r3, r2
 801162c:	d109      	bne.n	8011642 <xPortStartScheduler+0x42>
 801162e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011632:	f383 8811 	msr	BASEPRI, r3
 8011636:	f3bf 8f6f 	isb	sy
 801163a:	f3bf 8f4f 	dsb	sy
 801163e:	60fb      	str	r3, [r7, #12]
 8011640:	e7fe      	b.n	8011640 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011642:	4b38      	ldr	r3, [pc, #224]	; (8011724 <xPortStartScheduler+0x124>)
 8011644:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	781b      	ldrb	r3, [r3, #0]
 801164a:	b2db      	uxtb	r3, r3
 801164c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801164e:	697b      	ldr	r3, [r7, #20]
 8011650:	22ff      	movs	r2, #255	; 0xff
 8011652:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	781b      	ldrb	r3, [r3, #0]
 8011658:	b2db      	uxtb	r3, r3
 801165a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801165c:	78fb      	ldrb	r3, [r7, #3]
 801165e:	b2db      	uxtb	r3, r3
 8011660:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011664:	b2da      	uxtb	r2, r3
 8011666:	4b30      	ldr	r3, [pc, #192]	; (8011728 <xPortStartScheduler+0x128>)
 8011668:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801166a:	4b30      	ldr	r3, [pc, #192]	; (801172c <xPortStartScheduler+0x12c>)
 801166c:	2207      	movs	r2, #7
 801166e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011670:	e009      	b.n	8011686 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011672:	4b2e      	ldr	r3, [pc, #184]	; (801172c <xPortStartScheduler+0x12c>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	3b01      	subs	r3, #1
 8011678:	4a2c      	ldr	r2, [pc, #176]	; (801172c <xPortStartScheduler+0x12c>)
 801167a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801167c:	78fb      	ldrb	r3, [r7, #3]
 801167e:	b2db      	uxtb	r3, r3
 8011680:	005b      	lsls	r3, r3, #1
 8011682:	b2db      	uxtb	r3, r3
 8011684:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011686:	78fb      	ldrb	r3, [r7, #3]
 8011688:	b2db      	uxtb	r3, r3
 801168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801168e:	2b80      	cmp	r3, #128	; 0x80
 8011690:	d0ef      	beq.n	8011672 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011692:	4b26      	ldr	r3, [pc, #152]	; (801172c <xPortStartScheduler+0x12c>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	f1c3 0307 	rsb	r3, r3, #7
 801169a:	2b04      	cmp	r3, #4
 801169c:	d009      	beq.n	80116b2 <xPortStartScheduler+0xb2>
 801169e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a2:	f383 8811 	msr	BASEPRI, r3
 80116a6:	f3bf 8f6f 	isb	sy
 80116aa:	f3bf 8f4f 	dsb	sy
 80116ae:	60bb      	str	r3, [r7, #8]
 80116b0:	e7fe      	b.n	80116b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80116b2:	4b1e      	ldr	r3, [pc, #120]	; (801172c <xPortStartScheduler+0x12c>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	021b      	lsls	r3, r3, #8
 80116b8:	4a1c      	ldr	r2, [pc, #112]	; (801172c <xPortStartScheduler+0x12c>)
 80116ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80116bc:	4b1b      	ldr	r3, [pc, #108]	; (801172c <xPortStartScheduler+0x12c>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80116c4:	4a19      	ldr	r2, [pc, #100]	; (801172c <xPortStartScheduler+0x12c>)
 80116c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	b2da      	uxtb	r2, r3
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80116d0:	4b17      	ldr	r3, [pc, #92]	; (8011730 <xPortStartScheduler+0x130>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	4a16      	ldr	r2, [pc, #88]	; (8011730 <xPortStartScheduler+0x130>)
 80116d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80116da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80116dc:	4b14      	ldr	r3, [pc, #80]	; (8011730 <xPortStartScheduler+0x130>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	4a13      	ldr	r2, [pc, #76]	; (8011730 <xPortStartScheduler+0x130>)
 80116e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80116e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80116e8:	f000 f8d6 	bl	8011898 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80116ec:	4b11      	ldr	r3, [pc, #68]	; (8011734 <xPortStartScheduler+0x134>)
 80116ee:	2200      	movs	r2, #0
 80116f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80116f2:	f000 f8f5 	bl	80118e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80116f6:	4b10      	ldr	r3, [pc, #64]	; (8011738 <xPortStartScheduler+0x138>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	4a0f      	ldr	r2, [pc, #60]	; (8011738 <xPortStartScheduler+0x138>)
 80116fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011700:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011702:	f7ff ff69 	bl	80115d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011706:	f7fe fd4f 	bl	80101a8 <vTaskSwitchContext>
	prvTaskExitError();
 801170a:	f7ff ff21 	bl	8011550 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801170e:	2300      	movs	r3, #0
}
 8011710:	4618      	mov	r0, r3
 8011712:	3718      	adds	r7, #24
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}
 8011718:	e000ed00 	.word	0xe000ed00
 801171c:	410fc271 	.word	0x410fc271
 8011720:	410fc270 	.word	0x410fc270
 8011724:	e000e400 	.word	0xe000e400
 8011728:	20002288 	.word	0x20002288
 801172c:	2000228c 	.word	0x2000228c
 8011730:	e000ed20 	.word	0xe000ed20
 8011734:	20000138 	.word	0x20000138
 8011738:	e000ef34 	.word	0xe000ef34

0801173c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011746:	f383 8811 	msr	BASEPRI, r3
 801174a:	f3bf 8f6f 	isb	sy
 801174e:	f3bf 8f4f 	dsb	sy
 8011752:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011754:	4b0e      	ldr	r3, [pc, #56]	; (8011790 <vPortEnterCritical+0x54>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	3301      	adds	r3, #1
 801175a:	4a0d      	ldr	r2, [pc, #52]	; (8011790 <vPortEnterCritical+0x54>)
 801175c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801175e:	4b0c      	ldr	r3, [pc, #48]	; (8011790 <vPortEnterCritical+0x54>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2b01      	cmp	r3, #1
 8011764:	d10e      	bne.n	8011784 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011766:	4b0b      	ldr	r3, [pc, #44]	; (8011794 <vPortEnterCritical+0x58>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	b2db      	uxtb	r3, r3
 801176c:	2b00      	cmp	r3, #0
 801176e:	d009      	beq.n	8011784 <vPortEnterCritical+0x48>
 8011770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011774:	f383 8811 	msr	BASEPRI, r3
 8011778:	f3bf 8f6f 	isb	sy
 801177c:	f3bf 8f4f 	dsb	sy
 8011780:	603b      	str	r3, [r7, #0]
 8011782:	e7fe      	b.n	8011782 <vPortEnterCritical+0x46>
	}
}
 8011784:	bf00      	nop
 8011786:	370c      	adds	r7, #12
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr
 8011790:	20000138 	.word	0x20000138
 8011794:	e000ed04 	.word	0xe000ed04

08011798 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011798:	b480      	push	{r7}
 801179a:	b083      	sub	sp, #12
 801179c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801179e:	4b11      	ldr	r3, [pc, #68]	; (80117e4 <vPortExitCritical+0x4c>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d109      	bne.n	80117ba <vPortExitCritical+0x22>
 80117a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117aa:	f383 8811 	msr	BASEPRI, r3
 80117ae:	f3bf 8f6f 	isb	sy
 80117b2:	f3bf 8f4f 	dsb	sy
 80117b6:	607b      	str	r3, [r7, #4]
 80117b8:	e7fe      	b.n	80117b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80117ba:	4b0a      	ldr	r3, [pc, #40]	; (80117e4 <vPortExitCritical+0x4c>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	3b01      	subs	r3, #1
 80117c0:	4a08      	ldr	r2, [pc, #32]	; (80117e4 <vPortExitCritical+0x4c>)
 80117c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80117c4:	4b07      	ldr	r3, [pc, #28]	; (80117e4 <vPortExitCritical+0x4c>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d104      	bne.n	80117d6 <vPortExitCritical+0x3e>
 80117cc:	2300      	movs	r3, #0
 80117ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80117d6:	bf00      	nop
 80117d8:	370c      	adds	r7, #12
 80117da:	46bd      	mov	sp, r7
 80117dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e0:	4770      	bx	lr
 80117e2:	bf00      	nop
 80117e4:	20000138 	.word	0x20000138
	...

080117f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80117f0:	f3ef 8009 	mrs	r0, PSP
 80117f4:	f3bf 8f6f 	isb	sy
 80117f8:	4b15      	ldr	r3, [pc, #84]	; (8011850 <pxCurrentTCBConst>)
 80117fa:	681a      	ldr	r2, [r3, #0]
 80117fc:	f01e 0f10 	tst.w	lr, #16
 8011800:	bf08      	it	eq
 8011802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801180a:	6010      	str	r0, [r2, #0]
 801180c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011814:	f380 8811 	msr	BASEPRI, r0
 8011818:	f3bf 8f4f 	dsb	sy
 801181c:	f3bf 8f6f 	isb	sy
 8011820:	f7fe fcc2 	bl	80101a8 <vTaskSwitchContext>
 8011824:	f04f 0000 	mov.w	r0, #0
 8011828:	f380 8811 	msr	BASEPRI, r0
 801182c:	bc09      	pop	{r0, r3}
 801182e:	6819      	ldr	r1, [r3, #0]
 8011830:	6808      	ldr	r0, [r1, #0]
 8011832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011836:	f01e 0f10 	tst.w	lr, #16
 801183a:	bf08      	it	eq
 801183c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011840:	f380 8809 	msr	PSP, r0
 8011844:	f3bf 8f6f 	isb	sy
 8011848:	4770      	bx	lr
 801184a:	bf00      	nop
 801184c:	f3af 8000 	nop.w

08011850 <pxCurrentTCBConst>:
 8011850:	20001c5c 	.word	0x20001c5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011854:	bf00      	nop
 8011856:	bf00      	nop

08011858 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
	__asm volatile
 801185e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011862:	f383 8811 	msr	BASEPRI, r3
 8011866:	f3bf 8f6f 	isb	sy
 801186a:	f3bf 8f4f 	dsb	sy
 801186e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011870:	f7fe fbe2 	bl	8010038 <xTaskIncrementTick>
 8011874:	4603      	mov	r3, r0
 8011876:	2b00      	cmp	r3, #0
 8011878:	d003      	beq.n	8011882 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801187a:	4b06      	ldr	r3, [pc, #24]	; (8011894 <SysTick_Handler+0x3c>)
 801187c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011880:	601a      	str	r2, [r3, #0]
 8011882:	2300      	movs	r3, #0
 8011884:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801188c:	bf00      	nop
 801188e:	3708      	adds	r7, #8
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}
 8011894:	e000ed04 	.word	0xe000ed04

08011898 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011898:	b480      	push	{r7}
 801189a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801189c:	4b0b      	ldr	r3, [pc, #44]	; (80118cc <vPortSetupTimerInterrupt+0x34>)
 801189e:	2200      	movs	r2, #0
 80118a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80118a2:	4b0b      	ldr	r3, [pc, #44]	; (80118d0 <vPortSetupTimerInterrupt+0x38>)
 80118a4:	2200      	movs	r2, #0
 80118a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80118a8:	4b0a      	ldr	r3, [pc, #40]	; (80118d4 <vPortSetupTimerInterrupt+0x3c>)
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	4a0a      	ldr	r2, [pc, #40]	; (80118d8 <vPortSetupTimerInterrupt+0x40>)
 80118ae:	fba2 2303 	umull	r2, r3, r2, r3
 80118b2:	099b      	lsrs	r3, r3, #6
 80118b4:	4a09      	ldr	r2, [pc, #36]	; (80118dc <vPortSetupTimerInterrupt+0x44>)
 80118b6:	3b01      	subs	r3, #1
 80118b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80118ba:	4b04      	ldr	r3, [pc, #16]	; (80118cc <vPortSetupTimerInterrupt+0x34>)
 80118bc:	2207      	movs	r2, #7
 80118be:	601a      	str	r2, [r3, #0]
}
 80118c0:	bf00      	nop
 80118c2:	46bd      	mov	sp, r7
 80118c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop
 80118cc:	e000e010 	.word	0xe000e010
 80118d0:	e000e018 	.word	0xe000e018
 80118d4:	2000001c 	.word	0x2000001c
 80118d8:	10624dd3 	.word	0x10624dd3
 80118dc:	e000e014 	.word	0xe000e014

080118e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80118e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80118f0 <vPortEnableVFP+0x10>
 80118e4:	6801      	ldr	r1, [r0, #0]
 80118e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80118ea:	6001      	str	r1, [r0, #0]
 80118ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80118ee:	bf00      	nop
 80118f0:	e000ed88 	.word	0xe000ed88

080118f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80118f4:	b480      	push	{r7}
 80118f6:	b085      	sub	sp, #20
 80118f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80118fa:	f3ef 8305 	mrs	r3, IPSR
 80118fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	2b0f      	cmp	r3, #15
 8011904:	d913      	bls.n	801192e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011906:	4a16      	ldr	r2, [pc, #88]	; (8011960 <vPortValidateInterruptPriority+0x6c>)
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	4413      	add	r3, r2
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011910:	4b14      	ldr	r3, [pc, #80]	; (8011964 <vPortValidateInterruptPriority+0x70>)
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	7afa      	ldrb	r2, [r7, #11]
 8011916:	429a      	cmp	r2, r3
 8011918:	d209      	bcs.n	801192e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801191a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191e:	f383 8811 	msr	BASEPRI, r3
 8011922:	f3bf 8f6f 	isb	sy
 8011926:	f3bf 8f4f 	dsb	sy
 801192a:	607b      	str	r3, [r7, #4]
 801192c:	e7fe      	b.n	801192c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801192e:	4b0e      	ldr	r3, [pc, #56]	; (8011968 <vPortValidateInterruptPriority+0x74>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011936:	4b0d      	ldr	r3, [pc, #52]	; (801196c <vPortValidateInterruptPriority+0x78>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	429a      	cmp	r2, r3
 801193c:	d909      	bls.n	8011952 <vPortValidateInterruptPriority+0x5e>
 801193e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011942:	f383 8811 	msr	BASEPRI, r3
 8011946:	f3bf 8f6f 	isb	sy
 801194a:	f3bf 8f4f 	dsb	sy
 801194e:	603b      	str	r3, [r7, #0]
 8011950:	e7fe      	b.n	8011950 <vPortValidateInterruptPriority+0x5c>
	}
 8011952:	bf00      	nop
 8011954:	3714      	adds	r7, #20
 8011956:	46bd      	mov	sp, r7
 8011958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195c:	4770      	bx	lr
 801195e:	bf00      	nop
 8011960:	e000e3f0 	.word	0xe000e3f0
 8011964:	20002288 	.word	0x20002288
 8011968:	e000ed0c 	.word	0xe000ed0c
 801196c:	2000228c 	.word	0x2000228c

08011970 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b08a      	sub	sp, #40	; 0x28
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011978:	2300      	movs	r3, #0
 801197a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801197c:	f7fe fa6a 	bl	800fe54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011980:	4b57      	ldr	r3, [pc, #348]	; (8011ae0 <pvPortMalloc+0x170>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d101      	bne.n	801198c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011988:	f000 f90c 	bl	8011ba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801198c:	4b55      	ldr	r3, [pc, #340]	; (8011ae4 <pvPortMalloc+0x174>)
 801198e:	681a      	ldr	r2, [r3, #0]
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	4013      	ands	r3, r2
 8011994:	2b00      	cmp	r3, #0
 8011996:	f040 808c 	bne.w	8011ab2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d01c      	beq.n	80119da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80119a0:	2208      	movs	r2, #8
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	4413      	add	r3, r2
 80119a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f003 0307 	and.w	r3, r3, #7
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d013      	beq.n	80119da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f023 0307 	bic.w	r3, r3, #7
 80119b8:	3308      	adds	r3, #8
 80119ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f003 0307 	and.w	r3, r3, #7
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d009      	beq.n	80119da <pvPortMalloc+0x6a>
 80119c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ca:	f383 8811 	msr	BASEPRI, r3
 80119ce:	f3bf 8f6f 	isb	sy
 80119d2:	f3bf 8f4f 	dsb	sy
 80119d6:	617b      	str	r3, [r7, #20]
 80119d8:	e7fe      	b.n	80119d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d068      	beq.n	8011ab2 <pvPortMalloc+0x142>
 80119e0:	4b41      	ldr	r3, [pc, #260]	; (8011ae8 <pvPortMalloc+0x178>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	687a      	ldr	r2, [r7, #4]
 80119e6:	429a      	cmp	r2, r3
 80119e8:	d863      	bhi.n	8011ab2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80119ea:	4b40      	ldr	r3, [pc, #256]	; (8011aec <pvPortMalloc+0x17c>)
 80119ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80119ee:	4b3f      	ldr	r3, [pc, #252]	; (8011aec <pvPortMalloc+0x17c>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119f4:	e004      	b.n	8011a00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80119f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80119fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	687a      	ldr	r2, [r7, #4]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d903      	bls.n	8011a12 <pvPortMalloc+0xa2>
 8011a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d1f1      	bne.n	80119f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011a12:	4b33      	ldr	r3, [pc, #204]	; (8011ae0 <pvPortMalloc+0x170>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d04a      	beq.n	8011ab2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011a1c:	6a3b      	ldr	r3, [r7, #32]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	2208      	movs	r2, #8
 8011a22:	4413      	add	r3, r2
 8011a24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a28:	681a      	ldr	r2, [r3, #0]
 8011a2a:	6a3b      	ldr	r3, [r7, #32]
 8011a2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a30:	685a      	ldr	r2, [r3, #4]
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	1ad2      	subs	r2, r2, r3
 8011a36:	2308      	movs	r3, #8
 8011a38:	005b      	lsls	r3, r3, #1
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d91e      	bls.n	8011a7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	4413      	add	r3, r2
 8011a44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a46:	69bb      	ldr	r3, [r7, #24]
 8011a48:	f003 0307 	and.w	r3, r3, #7
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d009      	beq.n	8011a64 <pvPortMalloc+0xf4>
 8011a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a54:	f383 8811 	msr	BASEPRI, r3
 8011a58:	f3bf 8f6f 	isb	sy
 8011a5c:	f3bf 8f4f 	dsb	sy
 8011a60:	613b      	str	r3, [r7, #16]
 8011a62:	e7fe      	b.n	8011a62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a66:	685a      	ldr	r2, [r3, #4]
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	1ad2      	subs	r2, r2, r3
 8011a6c:	69bb      	ldr	r3, [r7, #24]
 8011a6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a72:	687a      	ldr	r2, [r7, #4]
 8011a74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011a76:	69b8      	ldr	r0, [r7, #24]
 8011a78:	f000 f8f6 	bl	8011c68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011a7c:	4b1a      	ldr	r3, [pc, #104]	; (8011ae8 <pvPortMalloc+0x178>)
 8011a7e:	681a      	ldr	r2, [r3, #0]
 8011a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a82:	685b      	ldr	r3, [r3, #4]
 8011a84:	1ad3      	subs	r3, r2, r3
 8011a86:	4a18      	ldr	r2, [pc, #96]	; (8011ae8 <pvPortMalloc+0x178>)
 8011a88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011a8a:	4b17      	ldr	r3, [pc, #92]	; (8011ae8 <pvPortMalloc+0x178>)
 8011a8c:	681a      	ldr	r2, [r3, #0]
 8011a8e:	4b18      	ldr	r3, [pc, #96]	; (8011af0 <pvPortMalloc+0x180>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d203      	bcs.n	8011a9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011a96:	4b14      	ldr	r3, [pc, #80]	; (8011ae8 <pvPortMalloc+0x178>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	4a15      	ldr	r2, [pc, #84]	; (8011af0 <pvPortMalloc+0x180>)
 8011a9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa0:	685a      	ldr	r2, [r3, #4]
 8011aa2:	4b10      	ldr	r3, [pc, #64]	; (8011ae4 <pvPortMalloc+0x174>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	431a      	orrs	r2, r3
 8011aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aae:	2200      	movs	r2, #0
 8011ab0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011ab2:	f7fe fa15 	bl	800fee0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011ab6:	69fb      	ldr	r3, [r7, #28]
 8011ab8:	f003 0307 	and.w	r3, r3, #7
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d009      	beq.n	8011ad4 <pvPortMalloc+0x164>
 8011ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ac4:	f383 8811 	msr	BASEPRI, r3
 8011ac8:	f3bf 8f6f 	isb	sy
 8011acc:	f3bf 8f4f 	dsb	sy
 8011ad0:	60fb      	str	r3, [r7, #12]
 8011ad2:	e7fe      	b.n	8011ad2 <pvPortMalloc+0x162>
	return pvReturn;
 8011ad4:	69fb      	ldr	r3, [r7, #28]
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3728      	adds	r7, #40	; 0x28
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	200049a8 	.word	0x200049a8
 8011ae4:	200049b4 	.word	0x200049b4
 8011ae8:	200049ac 	.word	0x200049ac
 8011aec:	200049a0 	.word	0x200049a0
 8011af0:	200049b0 	.word	0x200049b0

08011af4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b086      	sub	sp, #24
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d046      	beq.n	8011b94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011b06:	2308      	movs	r3, #8
 8011b08:	425b      	negs	r3, r3
 8011b0a:	697a      	ldr	r2, [r7, #20]
 8011b0c:	4413      	add	r3, r2
 8011b0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	685a      	ldr	r2, [r3, #4]
 8011b18:	4b20      	ldr	r3, [pc, #128]	; (8011b9c <vPortFree+0xa8>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	4013      	ands	r3, r2
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d109      	bne.n	8011b36 <vPortFree+0x42>
 8011b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b26:	f383 8811 	msr	BASEPRI, r3
 8011b2a:	f3bf 8f6f 	isb	sy
 8011b2e:	f3bf 8f4f 	dsb	sy
 8011b32:	60fb      	str	r3, [r7, #12]
 8011b34:	e7fe      	b.n	8011b34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d009      	beq.n	8011b52 <vPortFree+0x5e>
 8011b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b42:	f383 8811 	msr	BASEPRI, r3
 8011b46:	f3bf 8f6f 	isb	sy
 8011b4a:	f3bf 8f4f 	dsb	sy
 8011b4e:	60bb      	str	r3, [r7, #8]
 8011b50:	e7fe      	b.n	8011b50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	685a      	ldr	r2, [r3, #4]
 8011b56:	4b11      	ldr	r3, [pc, #68]	; (8011b9c <vPortFree+0xa8>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	4013      	ands	r3, r2
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d019      	beq.n	8011b94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d115      	bne.n	8011b94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011b68:	693b      	ldr	r3, [r7, #16]
 8011b6a:	685a      	ldr	r2, [r3, #4]
 8011b6c:	4b0b      	ldr	r3, [pc, #44]	; (8011b9c <vPortFree+0xa8>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	43db      	mvns	r3, r3
 8011b72:	401a      	ands	r2, r3
 8011b74:	693b      	ldr	r3, [r7, #16]
 8011b76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011b78:	f7fe f96c 	bl	800fe54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011b7c:	693b      	ldr	r3, [r7, #16]
 8011b7e:	685a      	ldr	r2, [r3, #4]
 8011b80:	4b07      	ldr	r3, [pc, #28]	; (8011ba0 <vPortFree+0xac>)
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	4413      	add	r3, r2
 8011b86:	4a06      	ldr	r2, [pc, #24]	; (8011ba0 <vPortFree+0xac>)
 8011b88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011b8a:	6938      	ldr	r0, [r7, #16]
 8011b8c:	f000 f86c 	bl	8011c68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011b90:	f7fe f9a6 	bl	800fee0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011b94:	bf00      	nop
 8011b96:	3718      	adds	r7, #24
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}
 8011b9c:	200049b4 	.word	0x200049b4
 8011ba0:	200049ac 	.word	0x200049ac

08011ba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b085      	sub	sp, #20
 8011ba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011baa:	f242 7310 	movw	r3, #10000	; 0x2710
 8011bae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011bb0:	4b27      	ldr	r3, [pc, #156]	; (8011c50 <prvHeapInit+0xac>)
 8011bb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	f003 0307 	and.w	r3, r3, #7
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d00c      	beq.n	8011bd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	3307      	adds	r3, #7
 8011bc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	f023 0307 	bic.w	r3, r3, #7
 8011bca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011bcc:	68ba      	ldr	r2, [r7, #8]
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	1ad3      	subs	r3, r2, r3
 8011bd2:	4a1f      	ldr	r2, [pc, #124]	; (8011c50 <prvHeapInit+0xac>)
 8011bd4:	4413      	add	r3, r2
 8011bd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011bdc:	4a1d      	ldr	r2, [pc, #116]	; (8011c54 <prvHeapInit+0xb0>)
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011be2:	4b1c      	ldr	r3, [pc, #112]	; (8011c54 <prvHeapInit+0xb0>)
 8011be4:	2200      	movs	r2, #0
 8011be6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	68ba      	ldr	r2, [r7, #8]
 8011bec:	4413      	add	r3, r2
 8011bee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011bf0:	2208      	movs	r2, #8
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	1a9b      	subs	r3, r3, r2
 8011bf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	f023 0307 	bic.w	r3, r3, #7
 8011bfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	4a15      	ldr	r2, [pc, #84]	; (8011c58 <prvHeapInit+0xb4>)
 8011c04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011c06:	4b14      	ldr	r3, [pc, #80]	; (8011c58 <prvHeapInit+0xb4>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011c0e:	4b12      	ldr	r3, [pc, #72]	; (8011c58 <prvHeapInit+0xb4>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	2200      	movs	r2, #0
 8011c14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	68fa      	ldr	r2, [r7, #12]
 8011c1e:	1ad2      	subs	r2, r2, r3
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011c24:	4b0c      	ldr	r3, [pc, #48]	; (8011c58 <prvHeapInit+0xb4>)
 8011c26:	681a      	ldr	r2, [r3, #0]
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	685b      	ldr	r3, [r3, #4]
 8011c30:	4a0a      	ldr	r2, [pc, #40]	; (8011c5c <prvHeapInit+0xb8>)
 8011c32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	685b      	ldr	r3, [r3, #4]
 8011c38:	4a09      	ldr	r2, [pc, #36]	; (8011c60 <prvHeapInit+0xbc>)
 8011c3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011c3c:	4b09      	ldr	r3, [pc, #36]	; (8011c64 <prvHeapInit+0xc0>)
 8011c3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011c42:	601a      	str	r2, [r3, #0]
}
 8011c44:	bf00      	nop
 8011c46:	3714      	adds	r7, #20
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4e:	4770      	bx	lr
 8011c50:	20002290 	.word	0x20002290
 8011c54:	200049a0 	.word	0x200049a0
 8011c58:	200049a8 	.word	0x200049a8
 8011c5c:	200049b0 	.word	0x200049b0
 8011c60:	200049ac 	.word	0x200049ac
 8011c64:	200049b4 	.word	0x200049b4

08011c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011c68:	b480      	push	{r7}
 8011c6a:	b085      	sub	sp, #20
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011c70:	4b28      	ldr	r3, [pc, #160]	; (8011d14 <prvInsertBlockIntoFreeList+0xac>)
 8011c72:	60fb      	str	r3, [r7, #12]
 8011c74:	e002      	b.n	8011c7c <prvInsertBlockIntoFreeList+0x14>
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	60fb      	str	r3, [r7, #12]
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	687a      	ldr	r2, [r7, #4]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d8f7      	bhi.n	8011c76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	68ba      	ldr	r2, [r7, #8]
 8011c90:	4413      	add	r3, r2
 8011c92:	687a      	ldr	r2, [r7, #4]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d108      	bne.n	8011caa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	685a      	ldr	r2, [r3, #4]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	441a      	add	r2, r3
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	685b      	ldr	r3, [r3, #4]
 8011cb2:	68ba      	ldr	r2, [r7, #8]
 8011cb4:	441a      	add	r2, r3
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d118      	bne.n	8011cf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	681a      	ldr	r2, [r3, #0]
 8011cc2:	4b15      	ldr	r3, [pc, #84]	; (8011d18 <prvInsertBlockIntoFreeList+0xb0>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d00d      	beq.n	8011ce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	685a      	ldr	r2, [r3, #4]
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	685b      	ldr	r3, [r3, #4]
 8011cd4:	441a      	add	r2, r3
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	681a      	ldr	r2, [r3, #0]
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	601a      	str	r2, [r3, #0]
 8011ce4:	e008      	b.n	8011cf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011ce6:	4b0c      	ldr	r3, [pc, #48]	; (8011d18 <prvInsertBlockIntoFreeList+0xb0>)
 8011ce8:	681a      	ldr	r2, [r3, #0]
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	601a      	str	r2, [r3, #0]
 8011cee:	e003      	b.n	8011cf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	681a      	ldr	r2, [r3, #0]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011cf8:	68fa      	ldr	r2, [r7, #12]
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d002      	beq.n	8011d06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	687a      	ldr	r2, [r7, #4]
 8011d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011d06:	bf00      	nop
 8011d08:	3714      	adds	r7, #20
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d10:	4770      	bx	lr
 8011d12:	bf00      	nop
 8011d14:	200049a0 	.word	0x200049a0
 8011d18:	200049a8 	.word	0x200049a8

08011d1c <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8011d22:	f000 f985 	bl	8012030 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8011d26:	480e      	ldr	r0, [pc, #56]	; (8011d60 <APP_THREAD_Init+0x44>)
 8011d28:	f000 fbf2 	bl	8012510 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8011d2c:	2101      	movs	r1, #1
 8011d2e:	2002      	movs	r0, #2
 8011d30:	f001 fd2e 	bl	8013790 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8011d34:	f000 fce4 	bl	8012700 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8011d38:	f000 fcd0 	bl	80126dc <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8011d3c:	f7f9 fffa 	bl	800bd34 <SHCI_C2_THREAD_Init>
 8011d40:	4603      	mov	r3, r0
 8011d42:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8011d44:	4a07      	ldr	r2, [pc, #28]	; (8011d64 <APP_THREAD_Init+0x48>)
 8011d46:	2100      	movs	r1, #0
 8011d48:	4807      	ldr	r0, [pc, #28]	; (8011d68 <APP_THREAD_Init+0x4c>)
 8011d4a:	f7fb fee9 	bl	800db20 <osThreadNew>
 8011d4e:	4602      	mov	r2, r0
 8011d50:	4b06      	ldr	r3, [pc, #24]	; (8011d6c <APP_THREAD_Init+0x50>)
 8011d52:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8011d54:	f000 f86c 	bl	8011e30 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 8011d58:	bf00      	nop
 8011d5a:	3708      	adds	r7, #8
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}
 8011d60:	20030834 	.word	0x20030834
 8011d64:	08013d5c 	.word	0x08013d5c
 8011d68:	080120ed 	.word	0x080120ed
 8011d6c:	20004acc 	.word	0x20004acc

08011d70 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b082      	sub	sp, #8
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2b07      	cmp	r3, #7
 8011d7e:	d83b      	bhi.n	8011df8 <APP_THREAD_Error+0x88>
 8011d80:	a201      	add	r2, pc, #4	; (adr r2, 8011d88 <APP_THREAD_Error+0x18>)
 8011d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d86:	bf00      	nop
 8011d88:	08011da9 	.word	0x08011da9
 8011d8c:	08011db3 	.word	0x08011db3
 8011d90:	08011dbd 	.word	0x08011dbd
 8011d94:	08011dc7 	.word	0x08011dc7
 8011d98:	08011dd1 	.word	0x08011dd1
 8011d9c:	08011ddb 	.word	0x08011ddb
 8011da0:	08011de5 	.word	0x08011de5
 8011da4:	08011def 	.word	0x08011def
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8011da8:	6839      	ldr	r1, [r7, #0]
 8011daa:	4818      	ldr	r0, [pc, #96]	; (8011e0c <APP_THREAD_Error+0x9c>)
 8011dac:	f000 f934 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011db0:	e027      	b.n	8011e02 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8011db2:	6839      	ldr	r1, [r7, #0]
 8011db4:	4816      	ldr	r0, [pc, #88]	; (8011e10 <APP_THREAD_Error+0xa0>)
 8011db6:	f000 f92f 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011dba:	e022      	b.n	8011e02 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8011dbc:	6839      	ldr	r1, [r7, #0]
 8011dbe:	4815      	ldr	r0, [pc, #84]	; (8011e14 <APP_THREAD_Error+0xa4>)
 8011dc0:	f000 f92a 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011dc4:	e01d      	b.n	8011e02 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8011dc6:	6839      	ldr	r1, [r7, #0]
 8011dc8:	4813      	ldr	r0, [pc, #76]	; (8011e18 <APP_THREAD_Error+0xa8>)
 8011dca:	f000 f925 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011dce:	e018      	b.n	8011e02 <APP_THREAD_Error+0x92>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8011dd0:	6839      	ldr	r1, [r7, #0]
 8011dd2:	4812      	ldr	r0, [pc, #72]	; (8011e1c <APP_THREAD_Error+0xac>)
 8011dd4:	f000 f920 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011dd8:	e013      	b.n	8011e02 <APP_THREAD_Error+0x92>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8011dda:	6839      	ldr	r1, [r7, #0]
 8011ddc:	4810      	ldr	r0, [pc, #64]	; (8011e20 <APP_THREAD_Error+0xb0>)
 8011dde:	f000 f91b 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011de2:	e00e      	b.n	8011e02 <APP_THREAD_Error+0x92>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8011de4:	6839      	ldr	r1, [r7, #0]
 8011de6:	480f      	ldr	r0, [pc, #60]	; (8011e24 <APP_THREAD_Error+0xb4>)
 8011de8:	f000 f916 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011dec:	e009      	b.n	8011e02 <APP_THREAD_Error+0x92>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8011dee:	6839      	ldr	r1, [r7, #0]
 8011df0:	480d      	ldr	r0, [pc, #52]	; (8011e28 <APP_THREAD_Error+0xb8>)
 8011df2:	f000 f911 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011df6:	e004      	b.n	8011e02 <APP_THREAD_Error+0x92>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8011df8:	2100      	movs	r1, #0
 8011dfa:	480c      	ldr	r0, [pc, #48]	; (8011e2c <APP_THREAD_Error+0xbc>)
 8011dfc:	f000 f90c 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011e00:	bf00      	nop
  }
}
 8011e02:	bf00      	nop
 8011e04:	3708      	adds	r7, #8
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}
 8011e0a:	bf00      	nop
 8011e0c:	080139a8 	.word	0x080139a8
 8011e10:	080139cc 	.word	0x080139cc
 8011e14:	080139f0 	.word	0x080139f0
 8011e18:	08013a10 	.word	0x08013a10
 8011e1c:	08013a30 	.word	0x08013a30
 8011e20:	08013a50 	.word	0x08013a50
 8011e24:	08013a6c 	.word	0x08013a6c
 8011e28:	08013a98 	.word	0x08013a98
 8011e2c:	08013abc 	.word	0x08013abc

08011e30 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8011e36:	2000      	movs	r0, #0
 8011e38:	f7fa ffb2 	bl	800cda0 <otInstanceErasePersistentInfo>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011e40:	79fb      	ldrb	r3, [r7, #7]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d004      	beq.n	8011e50 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8011e46:	79fb      	ldrb	r3, [r7, #7]
 8011e48:	4619      	mov	r1, r3
 8011e4a:	2006      	movs	r0, #6
 8011e4c:	f7ff ff90 	bl	8011d70 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8011e50:	2000      	movs	r0, #0
 8011e52:	f7fa ff49 	bl	800cce8 <otInstanceFinalize>
  otInstanceInitSingle();
 8011e56:	f7fa ff20 	bl	800cc9a <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	4955      	ldr	r1, [pc, #340]	; (8011fb4 <APP_THREAD_DeviceConfig+0x184>)
 8011e5e:	2000      	movs	r0, #0
 8011e60:	f7fa ff68 	bl	800cd34 <otSetStateChangedCallback>
 8011e64:	4603      	mov	r3, r0
 8011e66:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011e68:	79fb      	ldrb	r3, [r7, #7]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d004      	beq.n	8011e78 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 8011e6e:	79fb      	ldrb	r3, [r7, #7]
 8011e70:	4619      	mov	r1, r3
 8011e72:	2001      	movs	r0, #1
 8011e74:	f7ff ff7c 	bl	8011d70 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8011e78:	2117      	movs	r1, #23
 8011e7a:	2000      	movs	r0, #0
 8011e7c:	f7fb f898 	bl	800cfb0 <otLinkSetChannel>
 8011e80:	4603      	mov	r3, r0
 8011e82:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011e84:	79fb      	ldrb	r3, [r7, #7]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d004      	beq.n	8011e94 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8011e8a:	79fb      	ldrb	r3, [r7, #7]
 8011e8c:	4619      	mov	r1, r3
 8011e8e:	2002      	movs	r0, #2
 8011e90:	f7ff ff6e 	bl	8011d70 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8011e94:	f241 2134 	movw	r1, #4660	; 0x1234
 8011e98:	2000      	movs	r0, #0
 8011e9a:	f7fb f8b9 	bl	800d010 <otLinkSetPanId>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011ea2:	79fb      	ldrb	r3, [r7, #7]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d004      	beq.n	8011eb2 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8011ea8:	79fb      	ldrb	r3, [r7, #7]
 8011eaa:	4619      	mov	r1, r3
 8011eac:	2003      	movs	r0, #3
 8011eae:	f7ff ff5f 	bl	8011d70 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8011eb2:	2101      	movs	r1, #1
 8011eb4:	2000      	movs	r0, #0
 8011eb6:	f7fa ff9c 	bl	800cdf2 <otIp6SetEnabled>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011ebe:	79fb      	ldrb	r3, [r7, #7]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d004      	beq.n	8011ece <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8011ec4:	79fb      	ldrb	r3, [r7, #7]
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	2004      	movs	r0, #4
 8011eca:	f7ff ff51 	bl	8011d70 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8011ece:	2101      	movs	r1, #1
 8011ed0:	2000      	movs	r0, #0
 8011ed2:	f7fb fbd2 	bl	800d67a <otThreadSetEnabled>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011eda:	79fb      	ldrb	r3, [r7, #7]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d004      	beq.n	8011eea <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8011ee0:	79fb      	ldrb	r3, [r7, #7]
 8011ee2:	4619      	mov	r1, r3
 8011ee4:	2005      	movs	r0, #5
 8011ee6:	f7ff ff43 	bl	8011d70 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
  error = otThreadSetEnabled(NULL, false);
 8011eea:	2100      	movs	r1, #0
 8011eec:	2000      	movs	r0, #0
 8011eee:	f7fb fbc4 	bl	800d67a <otThreadSetEnabled>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011ef6:	79fb      	ldrb	r3, [r7, #7]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d004      	beq.n	8011f06 <APP_THREAD_DeviceConfig+0xd6>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 8011efc:	79fb      	ldrb	r3, [r7, #7]
 8011efe:	4619      	mov	r1, r3
 8011f00:	2005      	movs	r0, #5
 8011f02:	f7ff ff35 	bl	8011d70 <APP_THREAD_Error>
  	}


  	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 8011f06:	2106      	movs	r1, #6
 8011f08:	2000      	movs	r0, #0
 8011f0a:	f7fb fb83 	bl	800d614 <otPlatRadioSetTransmitPower>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011f12:	79fb      	ldrb	r3, [r7, #7]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d004      	beq.n	8011f22 <APP_THREAD_DeviceConfig+0xf2>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8011f18:	79fb      	ldrb	r3, [r7, #7]
 8011f1a:	4619      	mov	r1, r3
 8011f1c:	2002      	movs	r0, #2
 8011f1e:	f7ff ff27 	bl	8011d70 <APP_THREAD_Error>
  	}

  	otThreadSetChildTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 8011f22:	2103      	movs	r1, #3
 8011f24:	2000      	movs	r0, #0
 8011f26:	f7fb fbd8 	bl	800d6da <otThreadSetChildTimeout>
//  	error = otThreadSetMasterKey(NULL, &masterKey);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otThreadSetNetworkName(NULL, networkName);
 8011f2a:	4923      	ldr	r1, [pc, #140]	; (8011fb8 <APP_THREAD_DeviceConfig+0x188>)
 8011f2c:	2000      	movs	r0, #0
 8011f2e:	f7fb fc50 	bl	800d7d2 <otThreadSetNetworkName>
 8011f32:	4603      	mov	r3, r0
 8011f34:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011f36:	79fb      	ldrb	r3, [r7, #7]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d004      	beq.n	8011f46 <APP_THREAD_DeviceConfig+0x116>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8011f3c:	79fb      	ldrb	r3, [r7, #7]
 8011f3e:	4619      	mov	r1, r3
 8011f40:	2002      	movs	r0, #2
 8011f42:	f7ff ff15 	bl	8011d70 <APP_THREAD_Error>
//  	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otIp6SetEnabled(NULL, true);
 8011f46:	2101      	movs	r1, #1
 8011f48:	2000      	movs	r0, #0
 8011f4a:	f7fa ff52 	bl	800cdf2 <otIp6SetEnabled>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011f52:	79fb      	ldrb	r3, [r7, #7]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d004      	beq.n	8011f62 <APP_THREAD_DeviceConfig+0x132>
  		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8011f58:	79fb      	ldrb	r3, [r7, #7]
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	2004      	movs	r0, #4
 8011f5e:	f7ff ff07 	bl	8011d70 <APP_THREAD_Error>
  	}

  	error = otThreadSetEnabled(NULL, true);
 8011f62:	2101      	movs	r1, #1
 8011f64:	2000      	movs	r0, #0
 8011f66:	f7fb fb88 	bl	800d67a <otThreadSetEnabled>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011f6e:	79fb      	ldrb	r3, [r7, #7]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d004      	beq.n	8011f7e <APP_THREAD_DeviceConfig+0x14e>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 8011f74:	79fb      	ldrb	r3, [r7, #7]
 8011f76:	4619      	mov	r1, r3
 8011f78:	2005      	movs	r0, #5
 8011f7a:	f7ff fef9 	bl	8011d70 <APP_THREAD_Error>
  	}

  	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8011f7e:	f241 6133 	movw	r1, #5683	; 0x1633
 8011f82:	2000      	movs	r0, #0
 8011f84:	f7fa fdf7 	bl	800cb76 <otCoapStart>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	71fb      	strb	r3, [r7, #7]
//  	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);

  	error = otCoapAddResource(NULL, &OT_Node_Cal_Ressource);
 8011f8c:	490b      	ldr	r1, [pc, #44]	; (8011fbc <APP_THREAD_DeviceConfig+0x18c>)
 8011f8e:	2000      	movs	r0, #0
 8011f90:	f7fa fe21 	bl	800cbd6 <otCoapAddResource>
 8011f94:	4603      	mov	r3, r0
 8011f96:	71fb      	strb	r3, [r7, #7]
  	error = otCoapAddResource(NULL, &OT_Node_Spot_Ressource);
 8011f98:	4909      	ldr	r1, [pc, #36]	; (8011fc0 <APP_THREAD_DeviceConfig+0x190>)
 8011f9a:	2000      	movs	r0, #0
 8011f9c:	f7fa fe1b 	bl	800cbd6 <otCoapAddResource>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	71fb      	strb	r3, [r7, #7]
  #ifndef DONGLE_CODE
//      error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
  #endif
  	// set default multicast address for border router
  //    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
  	otIp6AddressFromString("ff03::1", &multicastAddr);
 8011fa4:	4907      	ldr	r1, [pc, #28]	; (8011fc4 <APP_THREAD_DeviceConfig+0x194>)
 8011fa6:	4808      	ldr	r0, [pc, #32]	; (8011fc8 <APP_THREAD_DeviceConfig+0x198>)
 8011fa8:	f7fa ffd0 	bl	800cf4c <otIp6AddressFromString>
  	// set UID in local state variable
  //	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
  //	 = UID64_BASE;
//  	stm32UID(msgSendMyIP.uid);
  /* USER CODE END DEVICECONFIG */
}
 8011fac:	bf00      	nop
 8011fae:	3708      	adds	r7, #8
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	08011fcd 	.word	0x08011fcd
 8011fb8:	08013da4 	.word	0x08013da4
 8011fbc:	2000013c 	.word	0x2000013c
 8011fc0:	2000014c 	.word	0x2000014c
 8011fc4:	20005010 	.word	0x20005010
 8011fc8:	08013acc 	.word	0x08013acc

08011fcc <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b082      	sub	sp, #8
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	f003 0304 	and.w	r3, r3, #4
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d013      	beq.n	8012008 <APP_THREAD_StateNotif+0x3c>
  {
    switch (otThreadGetDeviceRole(NULL))
 8011fe0:	2000      	movs	r0, #0
 8011fe2:	f7fb fc25 	bl	800d830 <otThreadGetDeviceRole>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	2b04      	cmp	r3, #4
 8011fea:	d80f      	bhi.n	801200c <APP_THREAD_StateNotif+0x40>
 8011fec:	a201      	add	r2, pc, #4	; (adr r2, 8011ff4 <APP_THREAD_StateNotif+0x28>)
 8011fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ff2:	bf00      	nop
 8011ff4:	0801200d 	.word	0x0801200d
 8011ff8:	0801200d 	.word	0x0801200d
 8011ffc:	0801200d 	.word	0x0801200d
 8012000:	0801200d 	.word	0x0801200d
 8012004:	0801200d 	.word	0x0801200d
      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */
      break;
    }
  }
 8012008:	bf00      	nop
 801200a:	e000      	b.n	801200e <APP_THREAD_StateNotif+0x42>
      break;
 801200c:	bf00      	nop
}
 801200e:	bf00      	nop
 8012010:	3708      	adds	r7, #8
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}
 8012016:	bf00      	nop

08012018 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8012018:	b480      	push	{r7}
 801201a:	b083      	sub	sp, #12
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 8012022:	bf00      	nop
 8012024:	370c      	adds	r7, #12
 8012026:	46bd      	mov	sp, r7
 8012028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202c:	4770      	bx	lr
	...

08012030 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b088      	sub	sp, #32
 8012034:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8012036:	1d3b      	adds	r3, r7, #4
 8012038:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 801203a:	6978      	ldr	r0, [r7, #20]
 801203c:	f7f9 fea6 	bl	800bd8c <SHCI_GetWirelessFwInfo>
 8012040:	4603      	mov	r3, r0
 8012042:	2b00      	cmp	r3, #0
 8012044:	d004      	beq.n	8012050 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8012046:	2101      	movs	r1, #1
 8012048:	2007      	movs	r0, #7
 801204a:	f7ff fe91 	bl	8011d70 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 801204e:	e03d      	b.n	80120cc <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 8012050:	4a20      	ldr	r2, [pc, #128]	; (80120d4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8012052:	2101      	movs	r1, #1
 8012054:	2000      	movs	r0, #0
 8012056:	f7f0 fc97 	bl	8002988 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 801205a:	4a1f      	ldr	r2, [pc, #124]	; (80120d8 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 801205c:	2101      	movs	r1, #1
 801205e:	2000      	movs	r0, #0
 8012060:	f7f0 fc92 	bl	8002988 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8012064:	697b      	ldr	r3, [r7, #20]
 8012066:	781b      	ldrb	r3, [r3, #0]
 8012068:	4619      	mov	r1, r3
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	785b      	ldrb	r3, [r3, #1]
 801206e:	461a      	mov	r2, r3
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	789b      	ldrb	r3, [r3, #2]
 8012074:	9301      	str	r3, [sp, #4]
 8012076:	9200      	str	r2, [sp, #0]
 8012078:	460b      	mov	r3, r1
 801207a:	4a18      	ldr	r2, [pc, #96]	; (80120dc <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 801207c:	2101      	movs	r1, #1
 801207e:	2000      	movs	r0, #0
 8012080:	f7f0 fc82 	bl	8002988 <logApplication>
    switch(p_wireless_info->StackType)
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	7a5b      	ldrb	r3, [r3, #9]
 8012088:	2b11      	cmp	r3, #17
 801208a:	d009      	beq.n	80120a0 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 801208c:	2b50      	cmp	r3, #80	; 0x50
 801208e:	d00d      	beq.n	80120ac <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 8012090:	2b10      	cmp	r3, #16
 8012092:	d111      	bne.n	80120b8 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8012094:	4a12      	ldr	r2, [pc, #72]	; (80120e0 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8012096:	2101      	movs	r1, #1
 8012098:	2000      	movs	r0, #0
 801209a:	f7f0 fc75 	bl	8002988 <logApplication>
      break;
 801209e:	e010      	b.n	80120c2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 80120a0:	4a10      	ldr	r2, [pc, #64]	; (80120e4 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 80120a2:	2101      	movs	r1, #1
 80120a4:	2000      	movs	r0, #0
 80120a6:	f7f0 fc6f 	bl	8002988 <logApplication>
      break;
 80120aa:	e00a      	b.n	80120c2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 80120ac:	4a0e      	ldr	r2, [pc, #56]	; (80120e8 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 80120ae:	2101      	movs	r1, #1
 80120b0:	2000      	movs	r0, #0
 80120b2:	f7f0 fc69 	bl	8002988 <logApplication>
      break;
 80120b6:	e004      	b.n	80120c2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80120b8:	2101      	movs	r1, #1
 80120ba:	2007      	movs	r0, #7
 80120bc:	f7ff fe58 	bl	8011d70 <APP_THREAD_Error>
      break;
 80120c0:	bf00      	nop
    APP_DBG("**********************************************************");
 80120c2:	4a04      	ldr	r2, [pc, #16]	; (80120d4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 80120c4:	2101      	movs	r1, #1
 80120c6:	2000      	movs	r0, #0
 80120c8:	f7f0 fc5e 	bl	8002988 <logApplication>
}
 80120cc:	bf00      	nop
 80120ce:	3718      	adds	r7, #24
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}
 80120d4:	08013ad4 	.word	0x08013ad4
 80120d8:	08013b10 	.word	0x08013b10
 80120dc:	08013b2c 	.word	0x08013b2c
 80120e0:	08013b44 	.word	0x08013b44
 80120e4:	08013b5c 	.word	0x08013b5c
 80120e8:	08013b74 	.word	0x08013b74

080120ec <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b082      	sub	sp, #8
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80120f4:	f04f 32ff 	mov.w	r2, #4294967295
 80120f8:	2101      	movs	r1, #1
 80120fa:	2001      	movs	r0, #1
 80120fc:	f7fb fe18 	bl	800dd30 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 8012100:	f000 fb30 	bl	8012764 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8012104:	e7f6      	b.n	80120f4 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

08012106 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 8012106:	b580      	push	{r7, lr}
 8012108:	b082      	sub	sp, #8
 801210a:	af00      	add	r7, sp, #0
 801210c:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801210e:	f04f 32ff 	mov.w	r2, #4294967295
 8012112:	2101      	movs	r1, #1
 8012114:	2001      	movs	r0, #1
 8012116:	f7fb fe0b 	bl	800dd30 <osThreadFlagsWait>
    Send_CLI_To_M0();
 801211a:	f000 faa5 	bl	8012668 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801211e:	e7f6      	b.n	801210e <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

08012120 <APP_THREAD_CoapNodeSpotRequestHandler>:
//}

static void APP_THREAD_CoapNodeSpotRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 8012120:	b580      	push	{r7, lr}
 8012122:	b08a      	sub	sp, #40	; 0x28
 8012124:	af00      	add	r7, sp, #0
 8012126:	60f8      	str	r0, [r7, #12]
 8012128:	60b9      	str	r1, [r7, #8]
 801212a:	607a      	str	r2, [r7, #4]
 801212c:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		struct MeasMsg receivedMeasMsg;
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedMeasMsg, sizeof(receivedMeasMsg))
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f7fa ffc9 	bl	800d0c6 <otMessageGetOffset>
 8012134:	4603      	mov	r3, r0
 8012136:	4619      	mov	r1, r3
 8012138:	f107 0214 	add.w	r2, r7, #20
 801213c:	2314      	movs	r3, #20
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f7fb f826 	bl	800d190 <otMessageRead>
 8012144:	4603      	mov	r3, r0
 8012146:	2b14      	cmp	r3, #20
 8012148:	d121      	bne.n	801218e <APP_THREAD_CoapNodeSpotRequestHandler+0x6e>
				== sizeof(receivedMeasMsg)) {


			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 801214a:	68b8      	ldr	r0, [r7, #8]
 801214c:	f7fa fbf4 	bl	800c938 <otCoapHeaderGetCode>
 8012150:	4603      	mov	r3, r0
 8012152:	2b03      	cmp	r3, #3
 8012154:	d111      	bne.n	801217a <APP_THREAD_CoapNodeSpotRequestHandler+0x5a>
			{
//				measMsgReceivedFromNode(&receivedMeasMsg);
				toggleLed(1,1,1);
 8012156:	2201      	movs	r2, #1
 8012158:	2101      	movs	r1, #1
 801215a:	2001      	movs	r0, #1
 801215c:	f7ef fecc 	bl	8001ef8 <toggleLed>
				osMessageQueuePut (msgQueueHandle, &receivedMeasMsg, NULL, 0);
 8012160:	4b0d      	ldr	r3, [pc, #52]	; (8012198 <APP_THREAD_CoapNodeSpotRequestHandler+0x78>)
 8012162:	6818      	ldr	r0, [r3, #0]
 8012164:	f107 0114 	add.w	r1, r7, #20
 8012168:	2300      	movs	r3, #0
 801216a:	2200      	movs	r2, #0
 801216c:	f7fc f9cc 	bl	800e508 <osMessageQueuePut>
				toggleLed(0,0,1);
 8012170:	2201      	movs	r2, #1
 8012172:	2100      	movs	r1, #0
 8012174:	2000      	movs	r0, #0
 8012176:	f7ef febf 	bl	8001ef8 <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 801217a:	68b8      	ldr	r0, [r7, #8]
 801217c:	f7fa fbae 	bl	800c8dc <otCoapHeaderGetType>
 8012180:	4603      	mov	r3, r0
 8012182:	2b00      	cmp	r3, #0
 8012184:	d103      	bne.n	801218e <APP_THREAD_CoapNodeSpotRequestHandler+0x6e>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 8012186:	6839      	ldr	r1, [r7, #0]
 8012188:	68b8      	ldr	r0, [r7, #8]
 801218a:	f000 f845 	bl	8012218 <APP_THREAD_CoapSendDataResponse>
			}

		}
}
 801218e:	bf00      	nop
 8012190:	3728      	adds	r7, #40	; 0x28
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
 8012196:	bf00      	nop
 8012198:	20000294 	.word	0x20000294

0801219c <APP_THREAD_CoapNodeCalRequestHandler>:

struct CalMsg receivedCalMsg;
static void APP_THREAD_CoapNodeCalRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 801219c:	b580      	push	{r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
 80121a8:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedCalMsg, sizeof(receivedCalMsg))
 80121aa:	6878      	ldr	r0, [r7, #4]
 80121ac:	f7fa ff8b 	bl	800d0c6 <otMessageGetOffset>
 80121b0:	4603      	mov	r3, r0
 80121b2:	4619      	mov	r1, r3
 80121b4:	230c      	movs	r3, #12
 80121b6:	4a17      	ldr	r2, [pc, #92]	; (8012214 <APP_THREAD_CoapNodeCalRequestHandler+0x78>)
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f7fa ffe9 	bl	800d190 <otMessageRead>
 80121be:	4603      	mov	r3, r0
 80121c0:	2b0c      	cmp	r3, #12
 80121c2:	d122      	bne.n	801220a <APP_THREAD_CoapNodeCalRequestHandler+0x6e>
				== sizeof(receivedCalMsg)) {

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 80121c4:	68b8      	ldr	r0, [r7, #8]
 80121c6:	f7fa fbb7 	bl	800c938 <otCoapHeaderGetCode>
 80121ca:	4603      	mov	r3, r0
 80121cc:	2b03      	cmp	r3, #3
 80121ce:	d107      	bne.n	80121e0 <APP_THREAD_CoapNodeCalRequestHandler+0x44>
			{
				if(receivedCalMsg.cal_fcn == CALIBRATION_START_COMMAND){
 80121d0:	4b10      	ldr	r3, [pc, #64]	; (8012214 <APP_THREAD_CoapNodeCalRequestHandler+0x78>)
 80121d2:	789b      	ldrb	r3, [r3, #2]
 80121d4:	2b01      	cmp	r3, #1
					// TODO: start calibration

				}else if(receivedCalMsg.cal_fcn == CALIBRATION_STOP_COMMAND){
					// TODO: stop calibration
				}
				toggleLed(0,0,1);
 80121d6:	2201      	movs	r2, #1
 80121d8:	2100      	movs	r1, #0
 80121da:	2000      	movs	r0, #0
 80121dc:	f7ef fe8c 	bl	8001ef8 <toggleLed>
			}

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET)
 80121e0:	68b8      	ldr	r0, [r7, #8]
 80121e2:	f7fa fba9 	bl	800c938 <otCoapHeaderGetCode>
 80121e6:	4603      	mov	r3, r0
 80121e8:	2b01      	cmp	r3, #1
 80121ea:	d104      	bne.n	80121f6 <APP_THREAD_CoapNodeCalRequestHandler+0x5a>
					// 		TODO this can be done in an ACK but doing it now in a separate PUT request to the nodeSpot resource
#ifdef SOLAR_SENSOR_NODE
					sendPowerMeasurement(pMessageInfo->mPeerAddr, receivedCalMsg.angle_1, receivedCalMsg.angle_2);
#endif
				}
				toggleLed(1,0,0);
 80121ec:	2200      	movs	r2, #0
 80121ee:	2100      	movs	r1, #0
 80121f0:	2001      	movs	r0, #1
 80121f2:	f7ef fe81 	bl	8001ef8 <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 80121f6:	68b8      	ldr	r0, [r7, #8]
 80121f8:	f7fa fb70 	bl	800c8dc <otCoapHeaderGetType>
 80121fc:	4603      	mov	r3, r0
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d103      	bne.n	801220a <APP_THREAD_CoapNodeCalRequestHandler+0x6e>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 8012202:	6839      	ldr	r1, [r7, #0]
 8012204:	68b8      	ldr	r0, [r7, #8]
 8012206:	f000 f807 	bl	8012218 <APP_THREAD_CoapSendDataResponse>
//
//		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
//			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
//		}

}
 801220a:	bf00      	nop
 801220c:	3710      	adds	r7, #16
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}
 8012212:	bf00      	nop
 8012214:	2000502c 	.word	0x2000502c

08012218 <APP_THREAD_CoapSendDataResponse>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_CoapSendDataResponse(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 8012218:	b590      	push	{r4, r7, lr}
 801221a:	b085      	sub	sp, #20
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 8012222:	2300      	movs	r3, #0
 8012224:	73fb      	strb	r3, [r7, #15]

  do{
    APP_DBG(" ********* APP_THREAD_CoapSendDataResponse ********* ");
 8012226:	4a25      	ldr	r2, [pc, #148]	; (80122bc <APP_THREAD_CoapSendDataResponse+0xa4>)
 8012228:	2101      	movs	r1, #1
 801222a:	2000      	movs	r0, #0
 801222c:	f7f0 fbac 	bl	8002988 <logApplication>
    otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8012230:	2244      	movs	r2, #68	; 0x44
 8012232:	2120      	movs	r1, #32
 8012234:	4822      	ldr	r0, [pc, #136]	; (80122c0 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8012236:	f7fa f9f5 	bl	800c624 <otCoapHeaderInit>
    otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f7fa fbaa 	bl	800c994 <otCoapHeaderGetMessageId>
 8012240:	4603      	mov	r3, r0
 8012242:	4619      	mov	r1, r3
 8012244:	481e      	ldr	r0, [pc, #120]	; (80122c0 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8012246:	f7fa fb19 	bl	800c87c <otCoapHeaderSetMessageId>
    otCoapHeaderSetToken(&OT_Header,
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f7fa fbfe 	bl	800ca4c <otCoapHeaderGetToken>
 8012250:	4604      	mov	r4, r0
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f7fa fbcc 	bl	800c9f0 <otCoapHeaderGetTokenLength>
 8012258:	4603      	mov	r3, r0
 801225a:	461a      	mov	r2, r3
 801225c:	4621      	mov	r1, r4
 801225e:	4818      	ldr	r0, [pc, #96]	; (80122c0 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8012260:	f7fa fa15 	bl	800c68e <otCoapHeaderSetToken>
        otCoapHeaderGetToken(pRequestHeader),
        otCoapHeaderGetTokenLength(pRequestHeader));

    pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8012264:	4916      	ldr	r1, [pc, #88]	; (80122c0 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8012266:	2000      	movs	r0, #0
 8012268:	f7fa fc1d 	bl	800caa6 <otCoapNewMessage>
 801226c:	4602      	mov	r2, r0
 801226e:	4b15      	ldr	r3, [pc, #84]	; (80122c4 <APP_THREAD_CoapSendDataResponse+0xac>)
 8012270:	601a      	str	r2, [r3, #0]
    if (pOT_Message == NULL)
 8012272:	4b14      	ldr	r3, [pc, #80]	; (80122c4 <APP_THREAD_CoapSendDataResponse+0xac>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d106      	bne.n	8012288 <APP_THREAD_CoapSendDataResponse+0x70>
    {
      APP_DBG("WARNING : pOT_Message = NULL ! -> exit now");
 801227a:	4a13      	ldr	r2, [pc, #76]	; (80122c8 <APP_THREAD_CoapSendDataResponse+0xb0>)
 801227c:	2101      	movs	r1, #1
 801227e:	2000      	movs	r0, #0
 8012280:	f7f0 fb82 	bl	8002988 <logApplication>
      break;
 8012284:	bf00      	nop
    {
      otMessageFree(pOT_Message);
//      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
    }
  }while(false);
}
 8012286:	e014      	b.n	80122b2 <APP_THREAD_CoapSendDataResponse+0x9a>
    error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8012288:	4b0e      	ldr	r3, [pc, #56]	; (80122c4 <APP_THREAD_CoapSendDataResponse+0xac>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	683a      	ldr	r2, [r7, #0]
 801228e:	4619      	mov	r1, r3
 8012290:	2000      	movs	r0, #0
 8012292:	f7fa fccf 	bl	800cc34 <otCoapSendResponse>
 8012296:	4603      	mov	r3, r0
 8012298:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE && pOT_Message != NULL)
 801229a:	7bfb      	ldrb	r3, [r7, #15]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d008      	beq.n	80122b2 <APP_THREAD_CoapSendDataResponse+0x9a>
 80122a0:	4b08      	ldr	r3, [pc, #32]	; (80122c4 <APP_THREAD_CoapSendDataResponse+0xac>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d004      	beq.n	80122b2 <APP_THREAD_CoapSendDataResponse+0x9a>
      otMessageFree(pOT_Message);
 80122a8:	4b06      	ldr	r3, [pc, #24]	; (80122c4 <APP_THREAD_CoapSendDataResponse+0xac>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	4618      	mov	r0, r3
 80122ae:	f7fa fedf 	bl	800d070 <otMessageFree>
}
 80122b2:	bf00      	nop
 80122b4:	3714      	adds	r7, #20
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd90      	pop	{r4, r7, pc}
 80122ba:	bf00      	nop
 80122bc:	08013ba0 	.word	0x08013ba0
 80122c0:	20004b24 	.word	0x20004b24
 80122c4:	20004ad4 	.word	0x20004ad4
 80122c8:	08013bd8 	.word	0x08013bd8

080122cc <APP_THREAD_SendCoapMsg>:
//		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
//	}
//}

void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, const char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 80122cc:	b590      	push	{r4, r7, lr}
 80122ce:	b087      	sub	sp, #28
 80122d0:	af02      	add	r7, sp, #8
 80122d2:	60f8      	str	r0, [r7, #12]
 80122d4:	607a      	str	r2, [r7, #4]
 80122d6:	603b      	str	r3, [r7, #0]
 80122d8:	460b      	mov	r3, r1
 80122da:	817b      	strh	r3, [r7, #10]
	/************ SET MESSAGE INFO (WHERE THE PACKET GOES) ************/
	// https://openthread.io/reference/struct/ot-message-info.html#structot_message_info
	do {
		// REMOVE BELOW CALLS (ONLY FOR DEBUGGING)
			  myRloc16 = otThreadGetRloc16(NULL);
 80122dc:	2000      	movs	r0, #0
 80122de:	f7fb fad0 	bl	800d882 <otThreadGetRloc16>
 80122e2:	4603      	mov	r3, r0
 80122e4:	461a      	mov	r2, r3
 80122e6:	4b7e      	ldr	r3, [pc, #504]	; (80124e0 <APP_THREAD_SendCoapMsg+0x214>)
 80122e8:	801a      	strh	r2, [r3, #0]
			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 80122ea:	2000      	movs	r0, #0
 80122ec:	f7fa fdde 	bl	800ceac <otIp6GetUnicastAddresses>
 80122f0:	4602      	mov	r2, r0
 80122f2:	4b7c      	ldr	r3, [pc, #496]	; (80124e4 <APP_THREAD_SendCoapMsg+0x218>)
 80122f4:	601a      	str	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 80122f6:	2000      	movs	r0, #0
 80122f8:	f7fa fdab 	bl	800ce52 <otIp6IsEnabled>
 80122fc:	4603      	mov	r3, r0
 80122fe:	461a      	mov	r2, r3
 8012300:	4b79      	ldr	r3, [pc, #484]	; (80124e8 <APP_THREAD_SendCoapMsg+0x21c>)
 8012302:	701a      	strb	r2, [r3, #0]
			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
 8012304:	2000      	movs	r0, #0
 8012306:	f7fa fdf9 	bl	800cefc <otIp6GetMulticastAddresses>
 801230a:	4602      	mov	r2, r0
 801230c:	4b77      	ldr	r3, [pc, #476]	; (80124ec <APP_THREAD_SendCoapMsg+0x220>)
 801230e:	601a      	str	r2, [r3, #0]
			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
 8012310:	2000      	movs	r0, #0
 8012312:	f7fb fa0e 	bl	800d732 <otThreadGetMeshLocalEid>
 8012316:	4602      	mov	r2, r0
 8012318:	4b75      	ldr	r3, [pc, #468]	; (80124f0 <APP_THREAD_SendCoapMsg+0x224>)
 801231a:	601a      	str	r2, [r3, #0]
			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);
 801231c:	2000      	movs	r0, #0
 801231e:	f7fb fa30 	bl	800d782 <otThreadGetLinkLocalIp6Address>
 8012322:	4602      	mov	r2, r0
 8012324:	4b73      	ldr	r3, [pc, #460]	; (80124f4 <APP_THREAD_SendCoapMsg+0x228>)
 8012326:	601a      	str	r2, [r3, #0]

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8012328:	222c      	movs	r2, #44	; 0x2c
 801232a:	2100      	movs	r1, #0
 801232c:	4872      	ldr	r0, [pc, #456]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 801232e:	f001 fa8c 	bl	801384a <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 8012332:	897b      	ldrh	r3, [r7, #10]
 8012334:	2b64      	cmp	r3, #100	; 0x64
 8012336:	d914      	bls.n	8012362 <APP_THREAD_SendCoapMsg+0x96>
#ifndef BORDER_ROUTER_NODE_TRANSMITTER
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 8012338:	4b6f      	ldr	r3, [pc, #444]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 801233a:	4a70      	ldr	r2, [pc, #448]	; (80124fc <APP_THREAD_SendCoapMsg+0x230>)
 801233c:	f103 0410 	add.w	r4, r3, #16
 8012340:	4613      	mov	r3, r2
 8012342:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012344:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8012348:	2000      	movs	r0, #0
 801234a:	f7fb f9f2 	bl	800d732 <otThreadGetMeshLocalEid>
 801234e:	4602      	mov	r2, r0
 8012350:	4b69      	ldr	r3, [pc, #420]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012352:	461c      	mov	r4, r3
 8012354:	4613      	mov	r3, r2
 8012356:	6818      	ldr	r0, [r3, #0]
 8012358:	6859      	ldr	r1, [r3, #4]
 801235a:	689a      	ldr	r2, [r3, #8]
 801235c:	68db      	ldr	r3, [r3, #12]
 801235e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012360:	e015      	b.n	801238e <APP_THREAD_SendCoapMsg+0xc2>
//			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
#else
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
#endif
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8012362:	4b65      	ldr	r3, [pc, #404]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012364:	4a66      	ldr	r2, [pc, #408]	; (8012500 <APP_THREAD_SendCoapMsg+0x234>)
 8012366:	f103 0410 	add.w	r4, r3, #16
 801236a:	4613      	mov	r3, r2
 801236c:	6818      	ldr	r0, [r3, #0]
 801236e:	6859      	ldr	r1, [r3, #4]
 8012370:	689a      	ldr	r2, [r3, #8]
 8012372:	68db      	ldr	r3, [r3, #12]
 8012374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8012376:	2000      	movs	r0, #0
 8012378:	f7fb f9db 	bl	800d732 <otThreadGetMeshLocalEid>
 801237c:	4602      	mov	r2, r0
 801237e:	4b5e      	ldr	r3, [pc, #376]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012380:	461c      	mov	r4, r3
 8012382:	4613      	mov	r3, r2
 8012384:	6818      	ldr	r0, [r3, #0]
 8012386:	6859      	ldr	r1, [r3, #4]
 8012388:	689a      	ldr	r2, [r3, #8]
 801238a:	68db      	ldr	r3, [r3, #12]
 801238c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 801238e:	4b5a      	ldr	r3, [pc, #360]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012390:	2201      	movs	r2, #1
 8012392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8012396:	4b58      	ldr	r3, [pc, #352]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012398:	f241 6233 	movw	r2, #5683	; 0x1633
 801239c:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 801239e:	4b56      	ldr	r3, [pc, #344]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 80123a0:	2240      	movs	r2, #64	; 0x40
 80123a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 80123a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d009      	beq.n	80123c2 <APP_THREAD_SendCoapMsg+0xf6>
 80123ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80123b2:	2b03      	cmp	r3, #3
 80123b4:	d105      	bne.n	80123c2 <APP_THREAD_SendCoapMsg+0xf6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 80123b6:	2203      	movs	r2, #3
 80123b8:	2100      	movs	r1, #0
 80123ba:	4852      	ldr	r0, [pc, #328]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 80123bc:	f7fa f932 	bl	800c624 <otCoapHeaderInit>
 80123c0:	e04a      	b.n	8012458 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 80123c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d009      	beq.n	80123de <APP_THREAD_SendCoapMsg+0x112>
 80123ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80123ce:	2b01      	cmp	r3, #1
 80123d0:	d105      	bne.n	80123de <APP_THREAD_SendCoapMsg+0x112>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 80123d2:	2201      	movs	r2, #1
 80123d4:	2100      	movs	r1, #0
 80123d6:	484b      	ldr	r0, [pc, #300]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 80123d8:	f7fa f924 	bl	800c624 <otCoapHeaderInit>
 80123dc:	e03c      	b.n	8012458 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 80123de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d009      	beq.n	80123fa <APP_THREAD_SendCoapMsg+0x12e>
 80123e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80123ea:	2b02      	cmp	r3, #2
 80123ec:	d105      	bne.n	80123fa <APP_THREAD_SendCoapMsg+0x12e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 80123ee:	2202      	movs	r2, #2
 80123f0:	2100      	movs	r1, #0
 80123f2:	4844      	ldr	r0, [pc, #272]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 80123f4:	f7fa f916 	bl	800c624 <otCoapHeaderInit>
 80123f8:	e02e      	b.n	8012458 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 80123fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d109      	bne.n	8012416 <APP_THREAD_SendCoapMsg+0x14a>
 8012402:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012406:	2b03      	cmp	r3, #3
 8012408:	d105      	bne.n	8012416 <APP_THREAD_SendCoapMsg+0x14a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 801240a:	2203      	movs	r2, #3
 801240c:	2110      	movs	r1, #16
 801240e:	483d      	ldr	r0, [pc, #244]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 8012410:	f7fa f908 	bl	800c624 <otCoapHeaderInit>
 8012414:	e020      	b.n	8012458 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8012416:	f897 3020 	ldrb.w	r3, [r7, #32]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d109      	bne.n	8012432 <APP_THREAD_SendCoapMsg+0x166>
 801241e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012422:	2b01      	cmp	r3, #1
 8012424:	d105      	bne.n	8012432 <APP_THREAD_SendCoapMsg+0x166>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8012426:	2201      	movs	r2, #1
 8012428:	2110      	movs	r1, #16
 801242a:	4836      	ldr	r0, [pc, #216]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 801242c:	f7fa f8fa 	bl	800c624 <otCoapHeaderInit>
 8012430:	e012      	b.n	8012458 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8012432:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d109      	bne.n	801244e <APP_THREAD_SendCoapMsg+0x182>
 801243a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801243e:	2b02      	cmp	r3, #2
 8012440:	d105      	bne.n	801244e <APP_THREAD_SendCoapMsg+0x182>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8012442:	2202      	movs	r2, #2
 8012444:	2110      	movs	r1, #16
 8012446:	482f      	ldr	r0, [pc, #188]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 8012448:	f7fa f8ec 	bl	800c624 <otCoapHeaderInit>
 801244c:	e004      	b.n	8012458 <APP_THREAD_SendCoapMsg+0x18c>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 801244e:	2102      	movs	r1, #2
 8012450:	482c      	ldr	r0, [pc, #176]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 8012452:	f7fa f950 	bl	800c6f6 <otCoapHeaderGenerateToken>
 8012456:	e040      	b.n	80124da <APP_THREAD_SendCoapMsg+0x20e>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8012458:	6839      	ldr	r1, [r7, #0]
 801245a:	482a      	ldr	r0, [pc, #168]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 801245c:	f7fa f9ae 	bl	800c7bc <otCoapHeaderAppendUriPathOptions>
 8012460:	4603      	mov	r3, r0
 8012462:	461a      	mov	r2, r3
 8012464:	4b28      	ldr	r3, [pc, #160]	; (8012508 <APP_THREAD_SendCoapMsg+0x23c>)
 8012466:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8012468:	212a      	movs	r1, #42	; 0x2a
 801246a:	4826      	ldr	r0, [pc, #152]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 801246c:	f7fa f973 	bl	800c756 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		if (msgSize > 0) {
 8012470:	897b      	ldrh	r3, [r7, #10]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d002      	beq.n	801247c <APP_THREAD_SendCoapMsg+0x1b0>
			otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 8012476:	4823      	ldr	r0, [pc, #140]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 8012478:	f7fa f9d2 	bl	800c820 <otCoapHeaderSetPayloadMarker>
		}

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 801247c:	4921      	ldr	r1, [pc, #132]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 801247e:	2000      	movs	r0, #0
 8012480:	f7fa fb11 	bl	800caa6 <otCoapNewMessage>
 8012484:	4602      	mov	r2, r0
 8012486:	4b21      	ldr	r3, [pc, #132]	; (801250c <APP_THREAD_SendCoapMsg+0x240>)
 8012488:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 801248a:	897b      	ldrh	r3, [r7, #10]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d00a      	beq.n	80124a6 <APP_THREAD_SendCoapMsg+0x1da>
			error = otMessageAppend(pOT_Message, message, msgSize);
 8012490:	4b1e      	ldr	r3, [pc, #120]	; (801250c <APP_THREAD_SendCoapMsg+0x240>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	897a      	ldrh	r2, [r7, #10]
 8012496:	68f9      	ldr	r1, [r7, #12]
 8012498:	4618      	mov	r0, r3
 801249a:	f7fa fe42 	bl	800d122 <otMessageAppend>
 801249e:	4603      	mov	r3, r0
 80124a0:	461a      	mov	r2, r3
 80124a2:	4b19      	ldr	r3, [pc, #100]	; (8012508 <APP_THREAD_SendCoapMsg+0x23c>)
 80124a4:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 80124a6:	4b19      	ldr	r3, [pc, #100]	; (801250c <APP_THREAD_SendCoapMsg+0x240>)
 80124a8:	6819      	ldr	r1, [r3, #0]
 80124aa:	2300      	movs	r3, #0
 80124ac:	9300      	str	r3, [sp, #0]
 80124ae:	2300      	movs	r3, #0
 80124b0:	4a11      	ldr	r2, [pc, #68]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 80124b2:	2000      	movs	r0, #0
 80124b4:	f7fa fb25 	bl	800cb02 <otCoapSendRequest>
 80124b8:	4603      	mov	r3, r0
 80124ba:	461a      	mov	r2, r3
 80124bc:	4b12      	ldr	r3, [pc, #72]	; (8012508 <APP_THREAD_SendCoapMsg+0x23c>)
 80124be:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 80124c0:	4b11      	ldr	r3, [pc, #68]	; (8012508 <APP_THREAD_SendCoapMsg+0x23c>)
 80124c2:	781b      	ldrb	r3, [r3, #0]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d008      	beq.n	80124da <APP_THREAD_SendCoapMsg+0x20e>
 80124c8:	4b10      	ldr	r3, [pc, #64]	; (801250c <APP_THREAD_SendCoapMsg+0x240>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d004      	beq.n	80124da <APP_THREAD_SendCoapMsg+0x20e>
			otMessageFree(pOT_Message);
 80124d0:	4b0e      	ldr	r3, [pc, #56]	; (801250c <APP_THREAD_SendCoapMsg+0x240>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	4618      	mov	r0, r3
 80124d6:	f7fa fdcb 	bl	800d070 <otMessageFree>
		}

	} while (false);
}
 80124da:	3714      	adds	r7, #20
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd90      	pop	{r4, r7, pc}
 80124e0:	2000503c 	.word	0x2000503c
 80124e4:	20005040 	.word	0x20005040
 80124e8:	20005020 	.word	0x20005020
 80124ec:	20005008 	.word	0x20005008
 80124f0:	20005038 	.word	0x20005038
 80124f4:	2000500c 	.word	0x2000500c
 80124f8:	20004af8 	.word	0x20004af8
 80124fc:	20004ae0 	.word	0x20004ae0
 8012500:	20005010 	.word	0x20005010
 8012504:	20004b24 	.word	0x20004b24
 8012508:	20004ad8 	.word	0x20004ad8
 801250c:	20004ad4 	.word	0x20004ad4

08012510 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8012510:	b480      	push	{r7}
 8012512:	b083      	sub	sp, #12
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8012518:	4a04      	ldr	r2, [pc, #16]	; (801252c <APP_THREAD_RegisterCmdBuffer+0x1c>)
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6013      	str	r3, [r2, #0]
}
 801251e:	bf00      	nop
 8012520:	370c      	adds	r7, #12
 8012522:	46bd      	mov	sp, r7
 8012524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012528:	4770      	bx	lr
 801252a:	bf00      	nop
 801252c:	20004abc 	.word	0x20004abc

08012530 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8012530:	b480      	push	{r7}
 8012532:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8012534:	4b03      	ldr	r3, [pc, #12]	; (8012544 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	330c      	adds	r3, #12
}
 801253a:	4618      	mov	r0, r3
 801253c:	46bd      	mov	sp, r7
 801253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012542:	4770      	bx	lr
 8012544:	20004abc 	.word	0x20004abc

08012548 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8012548:	b480      	push	{r7}
 801254a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 801254c:	4b03      	ldr	r3, [pc, #12]	; (801255c <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	330b      	adds	r3, #11
}
 8012552:	4618      	mov	r0, r3
 8012554:	46bd      	mov	sp, r7
 8012556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255a:	4770      	bx	lr
 801255c:	20004abc 	.word	0x20004abc

08012560 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8012560:	b480      	push	{r7}
 8012562:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8012564:	4b03      	ldr	r3, [pc, #12]	; (8012574 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	330b      	adds	r3, #11
}
 801256a:	4618      	mov	r0, r3
 801256c:	46bd      	mov	sp, r7
 801256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012572:	4770      	bx	lr
 8012574:	20004ac0 	.word	0x20004ac0

08012578 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 801257e:	4b0f      	ldr	r3, [pc, #60]	; (80125bc <Ot_Cmd_Transfer+0x44>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2200      	movs	r2, #0
 8012584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012588:	725a      	strb	r2, [r3, #9]
 801258a:	2200      	movs	r2, #0
 801258c:	f042 0202 	orr.w	r2, r2, #2
 8012590:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8012592:	4b0a      	ldr	r3, [pc, #40]	; (80125bc <Ot_Cmd_Transfer+0x44>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	330c      	adds	r3, #12
 8012598:	685b      	ldr	r3, [r3, #4]
 801259a:	3302      	adds	r3, #2
 801259c:	009b      	lsls	r3, r3, #2
 801259e:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 80125a0:	4b06      	ldr	r3, [pc, #24]	; (80125bc <Ot_Cmd_Transfer+0x44>)
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	b2d2      	uxtb	r2, r2
 80125a8:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 80125aa:	f7f9 fee5 	bl	800c378 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 80125ae:	f000 f829 	bl	8012604 <Wait_Getting_Ack_From_M0>
}
 80125b2:	bf00      	nop
 80125b4:	3708      	adds	r7, #8
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}
 80125ba:	bf00      	nop
 80125bc:	20004abc 	.word	0x20004abc

080125c0 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 80125c8:	f000 f82e 	bl	8012628 <Receive_Ack_From_M0>
}
 80125cc:	bf00      	nop
 80125ce:	3708      	adds	r7, #8
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}

080125d4 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b082      	sub	sp, #8
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 80125dc:	4a04      	ldr	r2, [pc, #16]	; (80125f0 <TL_THREAD_NotReceived+0x1c>)
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 80125e2:	f000 f82d 	bl	8012640 <Receive_Notification_From_M0>
}
 80125e6:	bf00      	nop
 80125e8:	3708      	adds	r7, #8
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
 80125ee:	bf00      	nop
 80125f0:	20004ac0 	.word	0x20004ac0

080125f4 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 80125f4:	b480      	push	{r7}
 80125f6:	af00      	add	r7, sp, #0

}
 80125f8:	bf00      	nop
 80125fa:	46bd      	mov	sp, r7
 80125fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012600:	4770      	bx	lr
	...

08012604 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8012604:	b480      	push	{r7}
 8012606:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 8012608:	bf00      	nop
 801260a:	4b06      	ldr	r3, [pc, #24]	; (8012624 <Wait_Getting_Ack_From_M0+0x20>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d0fb      	beq.n	801260a <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 8012612:	4b04      	ldr	r3, [pc, #16]	; (8012624 <Wait_Getting_Ack_From_M0+0x20>)
 8012614:	2200      	movs	r2, #0
 8012616:	601a      	str	r2, [r3, #0]
}
 8012618:	bf00      	nop
 801261a:	46bd      	mov	sp, r7
 801261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012620:	4770      	bx	lr
 8012622:	bf00      	nop
 8012624:	20004ac8 	.word	0x20004ac8

08012628 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8012628:	b480      	push	{r7}
 801262a:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 801262c:	4b03      	ldr	r3, [pc, #12]	; (801263c <Receive_Ack_From_M0+0x14>)
 801262e:	2201      	movs	r2, #1
 8012630:	601a      	str	r2, [r3, #0]
}
 8012632:	bf00      	nop
 8012634:	46bd      	mov	sp, r7
 8012636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263a:	4770      	bx	lr
 801263c:	20004ac8 	.word	0x20004ac8

08012640 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8012644:	4b06      	ldr	r3, [pc, #24]	; (8012660 <Receive_Notification_From_M0+0x20>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	3301      	adds	r3, #1
 801264a:	4a05      	ldr	r2, [pc, #20]	; (8012660 <Receive_Notification_From_M0+0x20>)
 801264c:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 801264e:	4b05      	ldr	r3, [pc, #20]	; (8012664 <Receive_Notification_From_M0+0x24>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	2101      	movs	r1, #1
 8012654:	4618      	mov	r0, r3
 8012656:	f7fb fb09 	bl	800dc6c <osThreadFlagsSet>
}
 801265a:	bf00      	nop
 801265c:	bd80      	pop	{r7, pc}
 801265e:	bf00      	nop
 8012660:	20004ac4 	.word	0x20004ac4
 8012664:	20004acc 	.word	0x20004acc

08012668 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 801266c:	22ff      	movs	r2, #255	; 0xff
 801266e:	2100      	movs	r1, #0
 8012670:	4812      	ldr	r0, [pc, #72]	; (80126bc <Send_CLI_To_M0+0x54>)
 8012672:	f001 f8ea 	bl	801384a <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8012676:	4b12      	ldr	r3, [pc, #72]	; (80126c0 <Send_CLI_To_M0+0x58>)
 8012678:	881b      	ldrh	r3, [r3, #0]
 801267a:	b29b      	uxth	r3, r3
 801267c:	461a      	mov	r2, r3
 801267e:	4911      	ldr	r1, [pc, #68]	; (80126c4 <Send_CLI_To_M0+0x5c>)
 8012680:	480e      	ldr	r0, [pc, #56]	; (80126bc <Send_CLI_To_M0+0x54>)
 8012682:	f001 f8d7 	bl	8013834 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8012686:	4b0e      	ldr	r3, [pc, #56]	; (80126c0 <Send_CLI_To_M0+0x58>)
 8012688:	881b      	ldrh	r3, [r3, #0]
 801268a:	b29b      	uxth	r3, r3
 801268c:	b2da      	uxtb	r2, r3
 801268e:	4b0e      	ldr	r3, [pc, #56]	; (80126c8 <Send_CLI_To_M0+0x60>)
 8012690:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8012692:	4b0d      	ldr	r3, [pc, #52]	; (80126c8 <Send_CLI_To_M0+0x60>)
 8012694:	2200      	movs	r2, #0
 8012696:	725a      	strb	r2, [r3, #9]
 8012698:	2200      	movs	r2, #0
 801269a:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 801269c:	4b0b      	ldr	r3, [pc, #44]	; (80126cc <Send_CLI_To_M0+0x64>)
 801269e:	2200      	movs	r2, #0
 80126a0:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 80126a2:	4b07      	ldr	r3, [pc, #28]	; (80126c0 <Send_CLI_To_M0+0x58>)
 80126a4:	2200      	movs	r2, #0
 80126a6:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 80126a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80126ac:	2100      	movs	r1, #0
 80126ae:	4805      	ldr	r0, [pc, #20]	; (80126c4 <Send_CLI_To_M0+0x5c>)
 80126b0:	f001 f8cb 	bl	801384a <memset>

  TL_CLI_SendCmd();
 80126b4:	f7f9 fe6e 	bl	800c394 <TL_CLI_SendCmd>
}
 80126b8:	bf00      	nop
 80126ba:	bd80      	pop	{r7, pc}
 80126bc:	20030a58 	.word	0x20030a58
 80126c0:	20004ab8 	.word	0x20004ab8
 80126c4:	200049b8 	.word	0x200049b8
 80126c8:	20030a4c 	.word	0x20030a4c
 80126cc:	20004aba 	.word	0x20004aba

080126d0 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 80126d4:	f7f9 fe7a 	bl	800c3cc <TL_THREAD_CliSendAck>
}
 80126d8:	bf00      	nop
 80126da:	bd80      	pop	{r7, pc}

080126dc <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 80126e0:	4a04      	ldr	r2, [pc, #16]	; (80126f4 <APP_THREAD_Init_UART_CLI+0x18>)
 80126e2:	2100      	movs	r1, #0
 80126e4:	4804      	ldr	r0, [pc, #16]	; (80126f8 <APP_THREAD_Init_UART_CLI+0x1c>)
 80126e6:	f7fb fa1b 	bl	800db20 <osThreadNew>
 80126ea:	4602      	mov	r2, r0
 80126ec:	4b03      	ldr	r3, [pc, #12]	; (80126fc <APP_THREAD_Init_UART_CLI+0x20>)
 80126ee:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 80126f0:	bf00      	nop
 80126f2:	bd80      	pop	{r7, pc}
 80126f4:	08013d80 	.word	0x08013d80
 80126f8:	08012107 	.word	0x08012107
 80126fc:	20004ad0 	.word	0x20004ad0

08012700 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8012704:	4b06      	ldr	r3, [pc, #24]	; (8012720 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8012706:	4a07      	ldr	r2, [pc, #28]	; (8012724 <APP_THREAD_TL_THREAD_INIT+0x24>)
 8012708:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 801270a:	4b05      	ldr	r3, [pc, #20]	; (8012720 <APP_THREAD_TL_THREAD_INIT+0x20>)
 801270c:	4a06      	ldr	r2, [pc, #24]	; (8012728 <APP_THREAD_TL_THREAD_INIT+0x28>)
 801270e:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8012710:	4b03      	ldr	r3, [pc, #12]	; (8012720 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8012712:	4a06      	ldr	r2, [pc, #24]	; (801272c <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8012714:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8012716:	4802      	ldr	r0, [pc, #8]	; (8012720 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8012718:	f7f9 fe12 	bl	800c340 <TL_THREAD_Init>
}
 801271c:	bf00      	nop
 801271e:	bd80      	pop	{r7, pc}
 8012720:	200300d4 	.word	0x200300d4
 8012724:	20030834 	.word	0x20030834
 8012728:	20030940 	.word	0x20030940
 801272c:	20030a4c 	.word	0x20030a4c

08012730 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	7adb      	ldrb	r3, [r3, #11]
 8012740:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	330c      	adds	r3, #12
 8012746:	4906      	ldr	r1, [pc, #24]	; (8012760 <TL_THREAD_CliNotReceived+0x30>)
 8012748:	4618      	mov	r0, r3
 801274a:	f7ed fd19 	bl	8000180 <strcmp>
 801274e:	4603      	mov	r3, r0
 8012750:	2b00      	cmp	r3, #0
 8012752:	d101      	bne.n	8012758 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8012754:	f7ff ffbc 	bl	80126d0 <Send_CLI_Ack_For_OT>
  }
}
 8012758:	bf00      	nop
 801275a:	3710      	adds	r7, #16
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}
 8012760:	08013c04 	.word	0x08013c04

08012764 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8012768:	4b09      	ldr	r3, [pc, #36]	; (8012790 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d00d      	beq.n	801278c <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8012770:	4b07      	ldr	r3, [pc, #28]	; (8012790 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	2b01      	cmp	r3, #1
 8012776:	d904      	bls.n	8012782 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8012778:	2100      	movs	r1, #0
 801277a:	2000      	movs	r0, #0
 801277c:	f7ff faf8 	bl	8011d70 <APP_THREAD_Error>
 8012780:	e001      	b.n	8012786 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8012782:	f7fa fd41 	bl	800d208 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8012786:	4b02      	ldr	r3, [pc, #8]	; (8012790 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8012788:	2200      	movs	r2, #0
 801278a:	601a      	str	r2, [r3, #0]
  }
}
 801278c:	bf00      	nop
 801278e:	bd80      	pop	{r7, pc}
 8012790:	20004ac4 	.word	0x20004ac4

08012794 <LL_PWR_EnableBootC2>:
{
 8012794:	b480      	push	{r7}
 8012796:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8012798:	4b05      	ldr	r3, [pc, #20]	; (80127b0 <LL_PWR_EnableBootC2+0x1c>)
 801279a:	68db      	ldr	r3, [r3, #12]
 801279c:	4a04      	ldr	r2, [pc, #16]	; (80127b0 <LL_PWR_EnableBootC2+0x1c>)
 801279e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80127a2:	60d3      	str	r3, [r2, #12]
}
 80127a4:	bf00      	nop
 80127a6:	46bd      	mov	sp, r7
 80127a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ac:	4770      	bx	lr
 80127ae:	bf00      	nop
 80127b0:	58000400 	.word	0x58000400

080127b4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80127b4:	b480      	push	{r7}
 80127b6:	b083      	sub	sp, #12
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80127bc:	4b06      	ldr	r3, [pc, #24]	; (80127d8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80127be:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80127c2:	4905      	ldr	r1, [pc, #20]	; (80127d8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	4313      	orrs	r3, r2
 80127c8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80127cc:	bf00      	nop
 80127ce:	370c      	adds	r7, #12
 80127d0:	46bd      	mov	sp, r7
 80127d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d6:	4770      	bx	lr
 80127d8:	58000800 	.word	0x58000800

080127dc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80127dc:	b480      	push	{r7}
 80127de:	b083      	sub	sp, #12
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80127e4:	4b05      	ldr	r3, [pc, #20]	; (80127fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80127e6:	6a1a      	ldr	r2, [r3, #32]
 80127e8:	4904      	ldr	r1, [pc, #16]	; (80127fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	4313      	orrs	r3, r2
 80127ee:	620b      	str	r3, [r1, #32]
}
 80127f0:	bf00      	nop
 80127f2:	370c      	adds	r7, #12
 80127f4:	46bd      	mov	sp, r7
 80127f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fa:	4770      	bx	lr
 80127fc:	58000800 	.word	0x58000800

08012800 <LL_AHB3_GRP1_EnableClock>:
{
 8012800:	b480      	push	{r7}
 8012802:	b085      	sub	sp, #20
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8012808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801280c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801280e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	4313      	orrs	r3, r2
 8012816:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8012818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801281c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	4013      	ands	r3, r2
 8012822:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012824:	68fb      	ldr	r3, [r7, #12]
}
 8012826:	bf00      	nop
 8012828:	3714      	adds	r7, #20
 801282a:	46bd      	mov	sp, r7
 801282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012830:	4770      	bx	lr

08012832 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8012832:	b480      	push	{r7}
 8012834:	b085      	sub	sp, #20
 8012836:	af00      	add	r7, sp, #0
 8012838:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 801283a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801283e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8012842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	4313      	orrs	r3, r2
 801284a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801284e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012852:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	4013      	ands	r3, r2
 801285a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801285c:	68fb      	ldr	r3, [r7, #12]
}
 801285e:	bf00      	nop
 8012860:	3714      	adds	r7, #20
 8012862:	46bd      	mov	sp, r7
 8012864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012868:	4770      	bx	lr

0801286a <LL_C1_IPCC_EnableIT_TXF>:
{
 801286a:	b480      	push	{r7}
 801286c:	b083      	sub	sp, #12
 801286e:	af00      	add	r7, sp, #0
 8012870:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	601a      	str	r2, [r3, #0]
}
 801287e:	bf00      	nop
 8012880:	370c      	adds	r7, #12
 8012882:	46bd      	mov	sp, r7
 8012884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012888:	4770      	bx	lr

0801288a <LL_C1_IPCC_EnableIT_RXO>:
{
 801288a:	b480      	push	{r7}
 801288c:	b083      	sub	sp, #12
 801288e:	af00      	add	r7, sp, #0
 8012890:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	f043 0201 	orr.w	r2, r3, #1
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	601a      	str	r2, [r3, #0]
}
 801289e:	bf00      	nop
 80128a0:	370c      	adds	r7, #12
 80128a2:	46bd      	mov	sp, r7
 80128a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a8:	4770      	bx	lr

080128aa <LL_C1_IPCC_EnableTransmitChannel>:
{
 80128aa:	b480      	push	{r7}
 80128ac:	b083      	sub	sp, #12
 80128ae:	af00      	add	r7, sp, #0
 80128b0:	6078      	str	r0, [r7, #4]
 80128b2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	685a      	ldr	r2, [r3, #4]
 80128b8:	683b      	ldr	r3, [r7, #0]
 80128ba:	041b      	lsls	r3, r3, #16
 80128bc:	43db      	mvns	r3, r3
 80128be:	401a      	ands	r2, r3
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	605a      	str	r2, [r3, #4]
}
 80128c4:	bf00      	nop
 80128c6:	370c      	adds	r7, #12
 80128c8:	46bd      	mov	sp, r7
 80128ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ce:	4770      	bx	lr

080128d0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80128d0:	b480      	push	{r7}
 80128d2:	b083      	sub	sp, #12
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
 80128d8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	685a      	ldr	r2, [r3, #4]
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	041b      	lsls	r3, r3, #16
 80128e2:	431a      	orrs	r2, r3
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	605a      	str	r2, [r3, #4]
}
 80128e8:	bf00      	nop
 80128ea:	370c      	adds	r7, #12
 80128ec:	46bd      	mov	sp, r7
 80128ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f2:	4770      	bx	lr

080128f4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	685a      	ldr	r2, [r3, #4]
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	43db      	mvns	r3, r3
 8012906:	401a      	ands	r2, r3
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	605a      	str	r2, [r3, #4]
}
 801290c:	bf00      	nop
 801290e:	370c      	adds	r7, #12
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr

08012918 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8012918:	b480      	push	{r7}
 801291a:	b083      	sub	sp, #12
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	685a      	ldr	r2, [r3, #4]
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	431a      	orrs	r2, r3
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	605a      	str	r2, [r3, #4]
}
 801292e:	bf00      	nop
 8012930:	370c      	adds	r7, #12
 8012932:	46bd      	mov	sp, r7
 8012934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012938:	4770      	bx	lr

0801293a <LL_C1_IPCC_ClearFlag_CHx>:
{
 801293a:	b480      	push	{r7}
 801293c:	b083      	sub	sp, #12
 801293e:	af00      	add	r7, sp, #0
 8012940:	6078      	str	r0, [r7, #4]
 8012942:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	683a      	ldr	r2, [r7, #0]
 8012948:	609a      	str	r2, [r3, #8]
}
 801294a:	bf00      	nop
 801294c:	370c      	adds	r7, #12
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr

08012956 <LL_C1_IPCC_SetFlag_CHx>:
{
 8012956:	b480      	push	{r7}
 8012958:	b083      	sub	sp, #12
 801295a:	af00      	add	r7, sp, #0
 801295c:	6078      	str	r0, [r7, #4]
 801295e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	041a      	lsls	r2, r3, #16
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	609a      	str	r2, [r3, #8]
}
 8012968:	bf00      	nop
 801296a:	370c      	adds	r7, #12
 801296c:	46bd      	mov	sp, r7
 801296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012972:	4770      	bx	lr

08012974 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8012974:	b480      	push	{r7}
 8012976:	b083      	sub	sp, #12
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
 801297c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	68da      	ldr	r2, [r3, #12]
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	4013      	ands	r3, r2
 8012986:	683a      	ldr	r2, [r7, #0]
 8012988:	429a      	cmp	r2, r3
 801298a:	d101      	bne.n	8012990 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801298c:	2301      	movs	r3, #1
 801298e:	e000      	b.n	8012992 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8012990:	2300      	movs	r3, #0
}
 8012992:	4618      	mov	r0, r3
 8012994:	370c      	adds	r7, #12
 8012996:	46bd      	mov	sp, r7
 8012998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299c:	4770      	bx	lr

0801299e <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801299e:	b480      	push	{r7}
 80129a0:	b083      	sub	sp, #12
 80129a2:	af00      	add	r7, sp, #0
 80129a4:	6078      	str	r0, [r7, #4]
 80129a6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	69da      	ldr	r2, [r3, #28]
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	4013      	ands	r3, r2
 80129b0:	683a      	ldr	r2, [r7, #0]
 80129b2:	429a      	cmp	r2, r3
 80129b4:	d101      	bne.n	80129ba <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80129b6:	2301      	movs	r3, #1
 80129b8:	e000      	b.n	80129bc <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80129ba:	2300      	movs	r3, #0
}
 80129bc:	4618      	mov	r0, r3
 80129be:	370c      	adds	r7, #12
 80129c0:	46bd      	mov	sp, r7
 80129c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c6:	4770      	bx	lr

080129c8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80129cc:	2102      	movs	r1, #2
 80129ce:	482a      	ldr	r0, [pc, #168]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 80129d0:	f7ff ffe5 	bl	801299e <LL_C2_IPCC_IsActiveFlag_CHx>
 80129d4:	4603      	mov	r3, r0
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d009      	beq.n	80129ee <HW_IPCC_Rx_Handler+0x26>
 80129da:	4b27      	ldr	r3, [pc, #156]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 80129dc:	685b      	ldr	r3, [r3, #4]
 80129de:	43db      	mvns	r3, r3
 80129e0:	f003 0302 	and.w	r3, r3, #2
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d002      	beq.n	80129ee <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80129e8:	f000 f90a 	bl	8012c00 <HW_IPCC_SYS_EvtHandler>
 80129ec:	e041      	b.n	8012a72 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 80129ee:	2104      	movs	r1, #4
 80129f0:	4821      	ldr	r0, [pc, #132]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 80129f2:	f7ff ffd4 	bl	801299e <LL_C2_IPCC_IsActiveFlag_CHx>
 80129f6:	4603      	mov	r3, r0
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d009      	beq.n	8012a10 <HW_IPCC_Rx_Handler+0x48>
 80129fc:	4b1e      	ldr	r3, [pc, #120]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 80129fe:	685b      	ldr	r3, [r3, #4]
 8012a00:	43db      	mvns	r3, r3
 8012a02:	f003 0304 	and.w	r3, r3, #4
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d002      	beq.n	8012a10 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8012a0a:	f000 f953 	bl	8012cb4 <HW_IPCC_THREAD_NotEvtHandler>
 8012a0e:	e030      	b.n	8012a72 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8012a10:	2110      	movs	r1, #16
 8012a12:	4819      	ldr	r0, [pc, #100]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 8012a14:	f7ff ffc3 	bl	801299e <LL_C2_IPCC_IsActiveFlag_CHx>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d009      	beq.n	8012a32 <HW_IPCC_Rx_Handler+0x6a>
 8012a1e:	4b16      	ldr	r3, [pc, #88]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 8012a20:	685b      	ldr	r3, [r3, #4]
 8012a22:	43db      	mvns	r3, r3
 8012a24:	f003 0310 	and.w	r3, r3, #16
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d002      	beq.n	8012a32 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8012a2c:	f000 f94e 	bl	8012ccc <HW_IPCC_THREAD_CliNotEvtHandler>
 8012a30:	e01f      	b.n	8012a72 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8012a32:	2101      	movs	r1, #1
 8012a34:	4810      	ldr	r0, [pc, #64]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 8012a36:	f7ff ffb2 	bl	801299e <LL_C2_IPCC_IsActiveFlag_CHx>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d008      	beq.n	8012a52 <HW_IPCC_Rx_Handler+0x8a>
 8012a40:	4b0d      	ldr	r3, [pc, #52]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	f003 0301 	and.w	r3, r3, #1
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d102      	bne.n	8012a52 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8012a4c:	f000 f89c 	bl	8012b88 <HW_IPCC_BLE_EvtHandler>
 8012a50:	e00f      	b.n	8012a72 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8012a52:	2108      	movs	r1, #8
 8012a54:	4808      	ldr	r0, [pc, #32]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 8012a56:	f7ff ffa2 	bl	801299e <LL_C2_IPCC_IsActiveFlag_CHx>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d009      	beq.n	8012a74 <HW_IPCC_Rx_Handler+0xac>
 8012a60:	4b05      	ldr	r3, [pc, #20]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 8012a62:	685b      	ldr	r3, [r3, #4]
 8012a64:	43db      	mvns	r3, r3
 8012a66:	f003 0308 	and.w	r3, r3, #8
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d002      	beq.n	8012a74 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8012a6e:	f000 f979 	bl	8012d64 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8012a72:	bf00      	nop
 8012a74:	bf00      	nop
}
 8012a76:	bd80      	pop	{r7, pc}
 8012a78:	58000c00 	.word	0x58000c00

08012a7c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8012a80:	2102      	movs	r1, #2
 8012a82:	482b      	ldr	r0, [pc, #172]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012a84:	f7ff ff76 	bl	8012974 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d109      	bne.n	8012aa2 <HW_IPCC_Tx_Handler+0x26>
 8012a8e:	4b28      	ldr	r3, [pc, #160]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	43db      	mvns	r3, r3
 8012a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d002      	beq.n	8012aa2 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8012a9c:	f000 f8a4 	bl	8012be8 <HW_IPCC_SYS_CmdEvtHandler>
 8012aa0:	e042      	b.n	8012b28 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8012aa2:	2104      	movs	r1, #4
 8012aa4:	4822      	ldr	r0, [pc, #136]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012aa6:	f7ff ff65 	bl	8012974 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d109      	bne.n	8012ac4 <HW_IPCC_Tx_Handler+0x48>
 8012ab0:	4b1f      	ldr	r3, [pc, #124]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012ab2:	685b      	ldr	r3, [r3, #4]
 8012ab4:	43db      	mvns	r3, r3
 8012ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d002      	beq.n	8012ac4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8012abe:	f000 f8ed 	bl	8012c9c <HW_IPCC_OT_CmdEvtHandler>
 8012ac2:	e031      	b.n	8012b28 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8012ac4:	2102      	movs	r1, #2
 8012ac6:	481a      	ldr	r0, [pc, #104]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012ac8:	f7ff ff54 	bl	8012974 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012acc:	4603      	mov	r3, r0
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d109      	bne.n	8012ae6 <HW_IPCC_Tx_Handler+0x6a>
 8012ad2:	4b17      	ldr	r3, [pc, #92]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012ad4:	685b      	ldr	r3, [r3, #4]
 8012ad6:	43db      	mvns	r3, r3
 8012ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d002      	beq.n	8012ae6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8012ae0:	f000 f882 	bl	8012be8 <HW_IPCC_SYS_CmdEvtHandler>
 8012ae4:	e020      	b.n	8012b28 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8012ae6:	2108      	movs	r1, #8
 8012ae8:	4811      	ldr	r0, [pc, #68]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012aea:	f7ff ff43 	bl	8012974 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012aee:	4603      	mov	r3, r0
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d109      	bne.n	8012b08 <HW_IPCC_Tx_Handler+0x8c>
 8012af4:	4b0e      	ldr	r3, [pc, #56]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012af6:	685b      	ldr	r3, [r3, #4]
 8012af8:	43db      	mvns	r3, r3
 8012afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d002      	beq.n	8012b08 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8012b02:	f000 f911 	bl	8012d28 <HW_IPCC_MM_FreeBufHandler>
 8012b06:	e00f      	b.n	8012b28 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8012b08:	2120      	movs	r1, #32
 8012b0a:	4809      	ldr	r0, [pc, #36]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012b0c:	f7ff ff32 	bl	8012974 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012b10:	4603      	mov	r3, r0
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d109      	bne.n	8012b2a <HW_IPCC_Tx_Handler+0xae>
 8012b16:	4b06      	ldr	r3, [pc, #24]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012b18:	685b      	ldr	r3, [r3, #4]
 8012b1a:	43db      	mvns	r3, r3
 8012b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d002      	beq.n	8012b2a <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8012b24:	f000 f83c 	bl	8012ba0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8012b28:	bf00      	nop
 8012b2a:	bf00      	nop
}
 8012b2c:	bd80      	pop	{r7, pc}
 8012b2e:	bf00      	nop
 8012b30:	58000c00 	.word	0x58000c00

08012b34 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8012b38:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012b3c:	f7ff fe79 	bl	8012832 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8012b40:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012b44:	f7ff fe36 	bl	80127b4 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8012b48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012b4c:	f7ff fe46 	bl	80127dc <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8012b50:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8012b52:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8012b54:	f7ff fe1e 	bl	8012794 <LL_PWR_EnableBootC2>

  return;
 8012b58:	bf00      	nop
}
 8012b5a:	bd80      	pop	{r7, pc}

08012b5c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8012b60:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012b64:	f7ff fe4c 	bl	8012800 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8012b68:	4806      	ldr	r0, [pc, #24]	; (8012b84 <HW_IPCC_Init+0x28>)
 8012b6a:	f7ff fe8e 	bl	801288a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8012b6e:	4805      	ldr	r0, [pc, #20]	; (8012b84 <HW_IPCC_Init+0x28>)
 8012b70:	f7ff fe7b 	bl	801286a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8012b74:	202c      	movs	r0, #44	; 0x2c
 8012b76:	f7f1 fd4e 	bl	8004616 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8012b7a:	202d      	movs	r0, #45	; 0x2d
 8012b7c:	f7f1 fd4b 	bl	8004616 <HAL_NVIC_EnableIRQ>

  return;
 8012b80:	bf00      	nop
}
 8012b82:	bd80      	pop	{r7, pc}
 8012b84:	58000c00 	.word	0x58000c00

08012b88 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8012b8c:	f7f9 fb20 	bl	800c1d0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8012b90:	2101      	movs	r1, #1
 8012b92:	4802      	ldr	r0, [pc, #8]	; (8012b9c <HW_IPCC_BLE_EvtHandler+0x14>)
 8012b94:	f7ff fed1 	bl	801293a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012b98:	bf00      	nop
}
 8012b9a:	bd80      	pop	{r7, pc}
 8012b9c:	58000c00 	.word	0x58000c00

08012ba0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8012ba4:	2120      	movs	r1, #32
 8012ba6:	4803      	ldr	r0, [pc, #12]	; (8012bb4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8012ba8:	f7ff fe92 	bl	80128d0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8012bac:	f7f9 fb40 	bl	800c230 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8012bb0:	bf00      	nop
}
 8012bb2:	bd80      	pop	{r7, pc}
 8012bb4:	58000c00 	.word	0x58000c00

08012bb8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012bbc:	2102      	movs	r1, #2
 8012bbe:	4802      	ldr	r0, [pc, #8]	; (8012bc8 <HW_IPCC_SYS_Init+0x10>)
 8012bc0:	f7ff fe98 	bl	80128f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012bc4:	bf00      	nop
}
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	58000c00 	.word	0x58000c00

08012bcc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012bd0:	2102      	movs	r1, #2
 8012bd2:	4804      	ldr	r0, [pc, #16]	; (8012be4 <HW_IPCC_SYS_SendCmd+0x18>)
 8012bd4:	f7ff febf 	bl	8012956 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012bd8:	2102      	movs	r1, #2
 8012bda:	4802      	ldr	r0, [pc, #8]	; (8012be4 <HW_IPCC_SYS_SendCmd+0x18>)
 8012bdc:	f7ff fe65 	bl	80128aa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8012be0:	bf00      	nop
}
 8012be2:	bd80      	pop	{r7, pc}
 8012be4:	58000c00 	.word	0x58000c00

08012be8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012bec:	2102      	movs	r1, #2
 8012bee:	4803      	ldr	r0, [pc, #12]	; (8012bfc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8012bf0:	f7ff fe6e 	bl	80128d0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8012bf4:	f7f9 fb6c 	bl	800c2d0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8012bf8:	bf00      	nop
}
 8012bfa:	bd80      	pop	{r7, pc}
 8012bfc:	58000c00 	.word	0x58000c00

08012c00 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8012c04:	f7f9 fb7a 	bl	800c2fc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012c08:	2102      	movs	r1, #2
 8012c0a:	4802      	ldr	r0, [pc, #8]	; (8012c14 <HW_IPCC_SYS_EvtHandler+0x14>)
 8012c0c:	f7ff fe95 	bl	801293a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012c10:	bf00      	nop
}
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	58000c00 	.word	0x58000c00

08012c18 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8012c1c:	2104      	movs	r1, #4
 8012c1e:	4804      	ldr	r0, [pc, #16]	; (8012c30 <HW_IPCC_THREAD_Init+0x18>)
 8012c20:	f7ff fe68 	bl	80128f4 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8012c24:	2110      	movs	r1, #16
 8012c26:	4802      	ldr	r0, [pc, #8]	; (8012c30 <HW_IPCC_THREAD_Init+0x18>)
 8012c28:	f7ff fe64 	bl	80128f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012c2c:	bf00      	nop
}
 8012c2e:	bd80      	pop	{r7, pc}
 8012c30:	58000c00 	.word	0x58000c00

08012c34 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8012c38:	2104      	movs	r1, #4
 8012c3a:	4804      	ldr	r0, [pc, #16]	; (8012c4c <HW_IPCC_OT_SendCmd+0x18>)
 8012c3c:	f7ff fe8b 	bl	8012956 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8012c40:	2104      	movs	r1, #4
 8012c42:	4802      	ldr	r0, [pc, #8]	; (8012c4c <HW_IPCC_OT_SendCmd+0x18>)
 8012c44:	f7ff fe31 	bl	80128aa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8012c48:	bf00      	nop
}
 8012c4a:	bd80      	pop	{r7, pc}
 8012c4c:	58000c00 	.word	0x58000c00

08012c50 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8012c54:	2110      	movs	r1, #16
 8012c56:	4802      	ldr	r0, [pc, #8]	; (8012c60 <HW_IPCC_CLI_SendCmd+0x10>)
 8012c58:	f7ff fe7d 	bl	8012956 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012c5c:	bf00      	nop
}
 8012c5e:	bd80      	pop	{r7, pc}
 8012c60:	58000c00 	.word	0x58000c00

08012c64 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8012c68:	2104      	movs	r1, #4
 8012c6a:	4804      	ldr	r0, [pc, #16]	; (8012c7c <HW_IPCC_THREAD_SendAck+0x18>)
 8012c6c:	f7ff fe65 	bl	801293a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8012c70:	2104      	movs	r1, #4
 8012c72:	4802      	ldr	r0, [pc, #8]	; (8012c7c <HW_IPCC_THREAD_SendAck+0x18>)
 8012c74:	f7ff fe3e 	bl	80128f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012c78:	bf00      	nop
}
 8012c7a:	bd80      	pop	{r7, pc}
 8012c7c:	58000c00 	.word	0x58000c00

08012c80 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8012c84:	2110      	movs	r1, #16
 8012c86:	4804      	ldr	r0, [pc, #16]	; (8012c98 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8012c88:	f7ff fe57 	bl	801293a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8012c8c:	2110      	movs	r1, #16
 8012c8e:	4802      	ldr	r0, [pc, #8]	; (8012c98 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8012c90:	f7ff fe30 	bl	80128f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012c94:	bf00      	nop
}
 8012c96:	bd80      	pop	{r7, pc}
 8012c98:	58000c00 	.word	0x58000c00

08012c9c <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8012ca0:	2104      	movs	r1, #4
 8012ca2:	4803      	ldr	r0, [pc, #12]	; (8012cb0 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8012ca4:	f7ff fe14 	bl	80128d0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8012ca8:	f7f9 fb9e 	bl	800c3e8 <HW_IPCC_OT_CmdEvtNot>

  return;
 8012cac:	bf00      	nop
}
 8012cae:	bd80      	pop	{r7, pc}
 8012cb0:	58000c00 	.word	0x58000c00

08012cb4 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8012cb8:	2104      	movs	r1, #4
 8012cba:	4803      	ldr	r0, [pc, #12]	; (8012cc8 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8012cbc:	f7ff fe2c 	bl	8012918 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8012cc0:	f7f9 fb9e 	bl	800c400 <HW_IPCC_THREAD_EvtNot>

  return;
 8012cc4:	bf00      	nop
}
 8012cc6:	bd80      	pop	{r7, pc}
 8012cc8:	58000c00 	.word	0x58000c00

08012ccc <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8012cd0:	2110      	movs	r1, #16
 8012cd2:	4803      	ldr	r0, [pc, #12]	; (8012ce0 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8012cd4:	f7ff fe20 	bl	8012918 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8012cd8:	f7f9 fb9e 	bl	800c418 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8012cdc:	bf00      	nop
}
 8012cde:	bd80      	pop	{r7, pc}
 8012ce0:	58000c00 	.word	0x58000c00

08012ce4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b082      	sub	sp, #8
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8012cec:	2108      	movs	r1, #8
 8012cee:	480c      	ldr	r0, [pc, #48]	; (8012d20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012cf0:	f7ff fe40 	bl	8012974 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d007      	beq.n	8012d0a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8012cfa:	4a0a      	ldr	r2, [pc, #40]	; (8012d24 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012d00:	2108      	movs	r1, #8
 8012d02:	4807      	ldr	r0, [pc, #28]	; (8012d20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012d04:	f7ff fdd1 	bl	80128aa <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8012d08:	e006      	b.n	8012d18 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012d0e:	2108      	movs	r1, #8
 8012d10:	4803      	ldr	r0, [pc, #12]	; (8012d20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012d12:	f7ff fe20 	bl	8012956 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8012d16:	bf00      	nop
}
 8012d18:	3708      	adds	r7, #8
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	bf00      	nop
 8012d20:	58000c00 	.word	0x58000c00
 8012d24:	20004bb4 	.word	0x20004bb4

08012d28 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012d2c:	2108      	movs	r1, #8
 8012d2e:	4806      	ldr	r0, [pc, #24]	; (8012d48 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012d30:	f7ff fdce 	bl	80128d0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8012d34:	4b05      	ldr	r3, [pc, #20]	; (8012d4c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012d3a:	2108      	movs	r1, #8
 8012d3c:	4802      	ldr	r0, [pc, #8]	; (8012d48 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012d3e:	f7ff fe0a 	bl	8012956 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012d42:	bf00      	nop
}
 8012d44:	bd80      	pop	{r7, pc}
 8012d46:	bf00      	nop
 8012d48:	58000c00 	.word	0x58000c00
 8012d4c:	20004bb4 	.word	0x20004bb4

08012d50 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012d54:	2108      	movs	r1, #8
 8012d56:	4802      	ldr	r0, [pc, #8]	; (8012d60 <HW_IPCC_TRACES_Init+0x10>)
 8012d58:	f7ff fdcc 	bl	80128f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012d5c:	bf00      	nop
}
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	58000c00 	.word	0x58000c00

08012d64 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8012d68:	f7f9 fbe8 	bl	800c53c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012d6c:	2108      	movs	r1, #8
 8012d6e:	4802      	ldr	r0, [pc, #8]	; (8012d78 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8012d70:	f7ff fde3 	bl	801293a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012d74:	bf00      	nop
}
 8012d76:	bd80      	pop	{r7, pc}
 8012d78:	58000c00 	.word	0x58000c00

08012d7c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8012d80:	2200      	movs	r2, #0
 8012d82:	4912      	ldr	r1, [pc, #72]	; (8012dcc <MX_USB_Device_Init+0x50>)
 8012d84:	4812      	ldr	r0, [pc, #72]	; (8012dd0 <MX_USB_Device_Init+0x54>)
 8012d86:	f7f7 feed 	bl	800ab64 <USBD_Init>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d001      	beq.n	8012d94 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012d90:	f7ef fa40 	bl	8002214 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012d94:	490f      	ldr	r1, [pc, #60]	; (8012dd4 <MX_USB_Device_Init+0x58>)
 8012d96:	480e      	ldr	r0, [pc, #56]	; (8012dd0 <MX_USB_Device_Init+0x54>)
 8012d98:	f7f7 ff14 	bl	800abc4 <USBD_RegisterClass>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d001      	beq.n	8012da6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012da2:	f7ef fa37 	bl	8002214 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012da6:	490c      	ldr	r1, [pc, #48]	; (8012dd8 <MX_USB_Device_Init+0x5c>)
 8012da8:	4809      	ldr	r0, [pc, #36]	; (8012dd0 <MX_USB_Device_Init+0x54>)
 8012daa:	f7f7 fe35 	bl	800aa18 <USBD_CDC_RegisterInterface>
 8012dae:	4603      	mov	r3, r0
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d001      	beq.n	8012db8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012db4:	f7ef fa2e 	bl	8002214 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012db8:	4805      	ldr	r0, [pc, #20]	; (8012dd0 <MX_USB_Device_Init+0x54>)
 8012dba:	f7f7 ff2a 	bl	800ac12 <USBD_Start>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d001      	beq.n	8012dc8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012dc4:	f7ef fa26 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012dc8:	bf00      	nop
 8012dca:	bd80      	pop	{r7, pc}
 8012dcc:	20000170 	.word	0x20000170
 8012dd0:	20005044 	.word	0x20005044
 8012dd4:	20000034 	.word	0x20000034
 8012dd8:	2000015c 	.word	0x2000015c

08012ddc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012de0:	2200      	movs	r2, #0
 8012de2:	4905      	ldr	r1, [pc, #20]	; (8012df8 <CDC_Init_FS+0x1c>)
 8012de4:	4805      	ldr	r0, [pc, #20]	; (8012dfc <CDC_Init_FS+0x20>)
 8012de6:	f7f7 fe2c 	bl	800aa42 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012dea:	4905      	ldr	r1, [pc, #20]	; (8012e00 <CDC_Init_FS+0x24>)
 8012dec:	4803      	ldr	r0, [pc, #12]	; (8012dfc <CDC_Init_FS+0x20>)
 8012dee:	f7f7 fe46 	bl	800aa7e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012df2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012df4:	4618      	mov	r0, r3
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	20005b14 	.word	0x20005b14
 8012dfc:	20005044 	.word	0x20005044
 8012e00:	20005314 	.word	0x20005314

08012e04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012e04:	b480      	push	{r7}
 8012e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012e08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e12:	4770      	bx	lr

08012e14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012e14:	b480      	push	{r7}
 8012e16:	b083      	sub	sp, #12
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	6039      	str	r1, [r7, #0]
 8012e1e:	71fb      	strb	r3, [r7, #7]
 8012e20:	4613      	mov	r3, r2
 8012e22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012e24:	79fb      	ldrb	r3, [r7, #7]
 8012e26:	2b23      	cmp	r3, #35	; 0x23
 8012e28:	d84a      	bhi.n	8012ec0 <CDC_Control_FS+0xac>
 8012e2a:	a201      	add	r2, pc, #4	; (adr r2, 8012e30 <CDC_Control_FS+0x1c>)
 8012e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e30:	08012ec1 	.word	0x08012ec1
 8012e34:	08012ec1 	.word	0x08012ec1
 8012e38:	08012ec1 	.word	0x08012ec1
 8012e3c:	08012ec1 	.word	0x08012ec1
 8012e40:	08012ec1 	.word	0x08012ec1
 8012e44:	08012ec1 	.word	0x08012ec1
 8012e48:	08012ec1 	.word	0x08012ec1
 8012e4c:	08012ec1 	.word	0x08012ec1
 8012e50:	08012ec1 	.word	0x08012ec1
 8012e54:	08012ec1 	.word	0x08012ec1
 8012e58:	08012ec1 	.word	0x08012ec1
 8012e5c:	08012ec1 	.word	0x08012ec1
 8012e60:	08012ec1 	.word	0x08012ec1
 8012e64:	08012ec1 	.word	0x08012ec1
 8012e68:	08012ec1 	.word	0x08012ec1
 8012e6c:	08012ec1 	.word	0x08012ec1
 8012e70:	08012ec1 	.word	0x08012ec1
 8012e74:	08012ec1 	.word	0x08012ec1
 8012e78:	08012ec1 	.word	0x08012ec1
 8012e7c:	08012ec1 	.word	0x08012ec1
 8012e80:	08012ec1 	.word	0x08012ec1
 8012e84:	08012ec1 	.word	0x08012ec1
 8012e88:	08012ec1 	.word	0x08012ec1
 8012e8c:	08012ec1 	.word	0x08012ec1
 8012e90:	08012ec1 	.word	0x08012ec1
 8012e94:	08012ec1 	.word	0x08012ec1
 8012e98:	08012ec1 	.word	0x08012ec1
 8012e9c:	08012ec1 	.word	0x08012ec1
 8012ea0:	08012ec1 	.word	0x08012ec1
 8012ea4:	08012ec1 	.word	0x08012ec1
 8012ea8:	08012ec1 	.word	0x08012ec1
 8012eac:	08012ec1 	.word	0x08012ec1
 8012eb0:	08012ec1 	.word	0x08012ec1
 8012eb4:	08012ec1 	.word	0x08012ec1
 8012eb8:	08012ec1 	.word	0x08012ec1
 8012ebc:	08012ec1 	.word	0x08012ec1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012ec0:	bf00      	nop
  }

  return (USBD_OK);
 8012ec2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	370c      	adds	r7, #12
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ece:	4770      	bx	lr

08012ed0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b082      	sub	sp, #8
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
 8012ed8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012eda:	6879      	ldr	r1, [r7, #4]
 8012edc:	4805      	ldr	r0, [pc, #20]	; (8012ef4 <CDC_Receive_FS+0x24>)
 8012ede:	f7f7 fdce 	bl	800aa7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012ee2:	4804      	ldr	r0, [pc, #16]	; (8012ef4 <CDC_Receive_FS+0x24>)
 8012ee4:	f7f7 fe14 	bl	800ab10 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012ee8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	3708      	adds	r7, #8
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd80      	pop	{r7, pc}
 8012ef2:	bf00      	nop
 8012ef4:	20005044 	.word	0x20005044

08012ef8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b084      	sub	sp, #16
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
 8012f00:	460b      	mov	r3, r1
 8012f02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012f04:	2300      	movs	r3, #0
 8012f06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012f08:	4b0d      	ldr	r3, [pc, #52]	; (8012f40 <CDC_Transmit_FS+0x48>)
 8012f0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d001      	beq.n	8012f1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	e00b      	b.n	8012f36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012f1e:	887b      	ldrh	r3, [r7, #2]
 8012f20:	461a      	mov	r2, r3
 8012f22:	6879      	ldr	r1, [r7, #4]
 8012f24:	4806      	ldr	r0, [pc, #24]	; (8012f40 <CDC_Transmit_FS+0x48>)
 8012f26:	f7f7 fd8c 	bl	800aa42 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012f2a:	4805      	ldr	r0, [pc, #20]	; (8012f40 <CDC_Transmit_FS+0x48>)
 8012f2c:	f7f7 fdc0 	bl	800aab0 <USBD_CDC_TransmitPacket>
 8012f30:	4603      	mov	r3, r0
 8012f32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3710      	adds	r7, #16
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	20005044 	.word	0x20005044

08012f44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012f44:	b480      	push	{r7}
 8012f46:	b087      	sub	sp, #28
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	60f8      	str	r0, [r7, #12]
 8012f4c:	60b9      	str	r1, [r7, #8]
 8012f4e:	4613      	mov	r3, r2
 8012f50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012f52:	2300      	movs	r3, #0
 8012f54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	371c      	adds	r7, #28
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f64:	4770      	bx	lr
	...

08012f68 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f68:	b480      	push	{r7}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	4603      	mov	r3, r0
 8012f70:	6039      	str	r1, [r7, #0]
 8012f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	2212      	movs	r2, #18
 8012f78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8012f7a:	4b03      	ldr	r3, [pc, #12]	; (8012f88 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	370c      	adds	r7, #12
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr
 8012f88:	2000018c 	.word	0x2000018c

08012f8c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	b083      	sub	sp, #12
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	4603      	mov	r3, r0
 8012f94:	6039      	str	r1, [r7, #0]
 8012f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	2204      	movs	r2, #4
 8012f9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012f9e:	4b03      	ldr	r3, [pc, #12]	; (8012fac <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	370c      	adds	r7, #12
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012faa:	4770      	bx	lr
 8012fac:	200001a0 	.word	0x200001a0

08012fb0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b082      	sub	sp, #8
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	6039      	str	r1, [r7, #0]
 8012fba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012fbc:	79fb      	ldrb	r3, [r7, #7]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d105      	bne.n	8012fce <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012fc2:	683a      	ldr	r2, [r7, #0]
 8012fc4:	4907      	ldr	r1, [pc, #28]	; (8012fe4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012fc6:	4808      	ldr	r0, [pc, #32]	; (8012fe8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012fc8:	f7f8 fdd4 	bl	800bb74 <USBD_GetString>
 8012fcc:	e004      	b.n	8012fd8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012fce:	683a      	ldr	r2, [r7, #0]
 8012fd0:	4904      	ldr	r1, [pc, #16]	; (8012fe4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012fd2:	4805      	ldr	r0, [pc, #20]	; (8012fe8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012fd4:	f7f8 fdce 	bl	800bb74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012fd8:	4b02      	ldr	r3, [pc, #8]	; (8012fe4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3708      	adds	r7, #8
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}
 8012fe2:	bf00      	nop
 8012fe4:	20006314 	.word	0x20006314
 8012fe8:	08013c08 	.word	0x08013c08

08012fec <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	6039      	str	r1, [r7, #0]
 8012ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012ff8:	683a      	ldr	r2, [r7, #0]
 8012ffa:	4904      	ldr	r1, [pc, #16]	; (801300c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8012ffc:	4804      	ldr	r0, [pc, #16]	; (8013010 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8012ffe:	f7f8 fdb9 	bl	800bb74 <USBD_GetString>
  return USBD_StrDesc;
 8013002:	4b02      	ldr	r3, [pc, #8]	; (801300c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8013004:	4618      	mov	r0, r3
 8013006:	3708      	adds	r7, #8
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	20006314 	.word	0x20006314
 8013010:	08013c14 	.word	0x08013c14

08013014 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b082      	sub	sp, #8
 8013018:	af00      	add	r7, sp, #0
 801301a:	4603      	mov	r3, r0
 801301c:	6039      	str	r1, [r7, #0]
 801301e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	221a      	movs	r2, #26
 8013024:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013026:	f000 f843 	bl	80130b0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801302a:	4b02      	ldr	r3, [pc, #8]	; (8013034 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801302c:	4618      	mov	r0, r3
 801302e:	3708      	adds	r7, #8
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}
 8013034:	200001a4 	.word	0x200001a4

08013038 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
 801303e:	4603      	mov	r3, r0
 8013040:	6039      	str	r1, [r7, #0]
 8013042:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013044:	79fb      	ldrb	r3, [r7, #7]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d105      	bne.n	8013056 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801304a:	683a      	ldr	r2, [r7, #0]
 801304c:	4907      	ldr	r1, [pc, #28]	; (801306c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801304e:	4808      	ldr	r0, [pc, #32]	; (8013070 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013050:	f7f8 fd90 	bl	800bb74 <USBD_GetString>
 8013054:	e004      	b.n	8013060 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8013056:	683a      	ldr	r2, [r7, #0]
 8013058:	4904      	ldr	r1, [pc, #16]	; (801306c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801305a:	4805      	ldr	r0, [pc, #20]	; (8013070 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801305c:	f7f8 fd8a 	bl	800bb74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013060:	4b02      	ldr	r3, [pc, #8]	; (801306c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8013062:	4618      	mov	r0, r3
 8013064:	3708      	adds	r7, #8
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}
 801306a:	bf00      	nop
 801306c:	20006314 	.word	0x20006314
 8013070:	08013c1c 	.word	0x08013c1c

08013074 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b082      	sub	sp, #8
 8013078:	af00      	add	r7, sp, #0
 801307a:	4603      	mov	r3, r0
 801307c:	6039      	str	r1, [r7, #0]
 801307e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013080:	79fb      	ldrb	r3, [r7, #7]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d105      	bne.n	8013092 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8013086:	683a      	ldr	r2, [r7, #0]
 8013088:	4907      	ldr	r1, [pc, #28]	; (80130a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801308a:	4808      	ldr	r0, [pc, #32]	; (80130ac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801308c:	f7f8 fd72 	bl	800bb74 <USBD_GetString>
 8013090:	e004      	b.n	801309c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8013092:	683a      	ldr	r2, [r7, #0]
 8013094:	4904      	ldr	r1, [pc, #16]	; (80130a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8013096:	4805      	ldr	r0, [pc, #20]	; (80130ac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8013098:	f7f8 fd6c 	bl	800bb74 <USBD_GetString>
  }
  return USBD_StrDesc;
 801309c:	4b02      	ldr	r3, [pc, #8]	; (80130a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801309e:	4618      	mov	r0, r3
 80130a0:	3708      	adds	r7, #8
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	20006314 	.word	0x20006314
 80130ac:	08013c28 	.word	0x08013c28

080130b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b084      	sub	sp, #16
 80130b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80130b6:	4b0f      	ldr	r3, [pc, #60]	; (80130f4 <Get_SerialNum+0x44>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80130bc:	4b0e      	ldr	r3, [pc, #56]	; (80130f8 <Get_SerialNum+0x48>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80130c2:	4b0e      	ldr	r3, [pc, #56]	; (80130fc <Get_SerialNum+0x4c>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80130c8:	68fa      	ldr	r2, [r7, #12]
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	4413      	add	r3, r2
 80130ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d009      	beq.n	80130ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80130d6:	2208      	movs	r2, #8
 80130d8:	4909      	ldr	r1, [pc, #36]	; (8013100 <Get_SerialNum+0x50>)
 80130da:	68f8      	ldr	r0, [r7, #12]
 80130dc:	f000 f814 	bl	8013108 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80130e0:	2204      	movs	r2, #4
 80130e2:	4908      	ldr	r1, [pc, #32]	; (8013104 <Get_SerialNum+0x54>)
 80130e4:	68b8      	ldr	r0, [r7, #8]
 80130e6:	f000 f80f 	bl	8013108 <IntToUnicode>
  }
}
 80130ea:	bf00      	nop
 80130ec:	3710      	adds	r7, #16
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}
 80130f2:	bf00      	nop
 80130f4:	1fff7590 	.word	0x1fff7590
 80130f8:	1fff7594 	.word	0x1fff7594
 80130fc:	1fff7598 	.word	0x1fff7598
 8013100:	200001a6 	.word	0x200001a6
 8013104:	200001b6 	.word	0x200001b6

08013108 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013108:	b480      	push	{r7}
 801310a:	b087      	sub	sp, #28
 801310c:	af00      	add	r7, sp, #0
 801310e:	60f8      	str	r0, [r7, #12]
 8013110:	60b9      	str	r1, [r7, #8]
 8013112:	4613      	mov	r3, r2
 8013114:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013116:	2300      	movs	r3, #0
 8013118:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801311a:	2300      	movs	r3, #0
 801311c:	75fb      	strb	r3, [r7, #23]
 801311e:	e027      	b.n	8013170 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	0f1b      	lsrs	r3, r3, #28
 8013124:	2b09      	cmp	r3, #9
 8013126:	d80b      	bhi.n	8013140 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	0f1b      	lsrs	r3, r3, #28
 801312c:	b2da      	uxtb	r2, r3
 801312e:	7dfb      	ldrb	r3, [r7, #23]
 8013130:	005b      	lsls	r3, r3, #1
 8013132:	4619      	mov	r1, r3
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	440b      	add	r3, r1
 8013138:	3230      	adds	r2, #48	; 0x30
 801313a:	b2d2      	uxtb	r2, r2
 801313c:	701a      	strb	r2, [r3, #0]
 801313e:	e00a      	b.n	8013156 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	0f1b      	lsrs	r3, r3, #28
 8013144:	b2da      	uxtb	r2, r3
 8013146:	7dfb      	ldrb	r3, [r7, #23]
 8013148:	005b      	lsls	r3, r3, #1
 801314a:	4619      	mov	r1, r3
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	440b      	add	r3, r1
 8013150:	3237      	adds	r2, #55	; 0x37
 8013152:	b2d2      	uxtb	r2, r2
 8013154:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	011b      	lsls	r3, r3, #4
 801315a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801315c:	7dfb      	ldrb	r3, [r7, #23]
 801315e:	005b      	lsls	r3, r3, #1
 8013160:	3301      	adds	r3, #1
 8013162:	68ba      	ldr	r2, [r7, #8]
 8013164:	4413      	add	r3, r2
 8013166:	2200      	movs	r2, #0
 8013168:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801316a:	7dfb      	ldrb	r3, [r7, #23]
 801316c:	3301      	adds	r3, #1
 801316e:	75fb      	strb	r3, [r7, #23]
 8013170:	7dfa      	ldrb	r2, [r7, #23]
 8013172:	79fb      	ldrb	r3, [r7, #7]
 8013174:	429a      	cmp	r2, r3
 8013176:	d3d3      	bcc.n	8013120 <IntToUnicode+0x18>
  }
}
 8013178:	bf00      	nop
 801317a:	371c      	adds	r7, #28
 801317c:	46bd      	mov	sp, r7
 801317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013182:	4770      	bx	lr

08013184 <LL_AHB2_GRP1_EnableClock>:
{
 8013184:	b480      	push	{r7}
 8013186:	b085      	sub	sp, #20
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801318c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013190:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	4313      	orrs	r3, r2
 801319a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801319c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80131a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	4013      	ands	r3, r2
 80131a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80131a8:	68fb      	ldr	r3, [r7, #12]
}
 80131aa:	bf00      	nop
 80131ac:	3714      	adds	r7, #20
 80131ae:	46bd      	mov	sp, r7
 80131b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b4:	4770      	bx	lr

080131b6 <LL_APB1_GRP1_EnableClock>:
{
 80131b6:	b480      	push	{r7}
 80131b8:	b085      	sub	sp, #20
 80131ba:	af00      	add	r7, sp, #0
 80131bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80131be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80131c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80131c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	4313      	orrs	r3, r2
 80131cc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80131ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80131d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	4013      	ands	r3, r2
 80131d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80131da:	68fb      	ldr	r3, [r7, #12]
}
 80131dc:	bf00      	nop
 80131de:	3714      	adds	r7, #20
 80131e0:	46bd      	mov	sp, r7
 80131e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e6:	4770      	bx	lr

080131e8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b088      	sub	sp, #32
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80131f0:	f107 030c 	add.w	r3, r7, #12
 80131f4:	2200      	movs	r2, #0
 80131f6:	601a      	str	r2, [r3, #0]
 80131f8:	605a      	str	r2, [r3, #4]
 80131fa:	609a      	str	r2, [r3, #8]
 80131fc:	60da      	str	r2, [r3, #12]
 80131fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	4a13      	ldr	r2, [pc, #76]	; (8013254 <HAL_PCD_MspInit+0x6c>)
 8013206:	4293      	cmp	r3, r2
 8013208:	d120      	bne.n	801324c <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801320a:	2001      	movs	r0, #1
 801320c:	f7ff ffba 	bl	8013184 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013210:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013214:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013216:	2302      	movs	r3, #2
 8013218:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801321a:	2300      	movs	r3, #0
 801321c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801321e:	2303      	movs	r3, #3
 8013220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8013222:	230a      	movs	r3, #10
 8013224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013226:	f107 030c 	add.w	r3, r7, #12
 801322a:	4619      	mov	r1, r3
 801322c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8013230:	f7f1 fca2 	bl	8004b78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8013234:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8013238:	f7ff ffbd 	bl	80131b6 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801323c:	2200      	movs	r2, #0
 801323e:	2105      	movs	r1, #5
 8013240:	2014      	movs	r0, #20
 8013242:	f7f1 f9ce 	bl	80045e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8013246:	2014      	movs	r0, #20
 8013248:	f7f1 f9e5 	bl	8004616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801324c:	bf00      	nop
 801324e:	3720      	adds	r7, #32
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}
 8013254:	40006800 	.word	0x40006800

08013258 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	f503 730c 	add.w	r3, r3, #560	; 0x230
 801326c:	4619      	mov	r1, r3
 801326e:	4610      	mov	r0, r2
 8013270:	f7f7 fd1a 	bl	800aca8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8013274:	bf00      	nop
 8013276:	3708      	adds	r7, #8
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}

0801327c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b082      	sub	sp, #8
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	460b      	mov	r3, r1
 8013286:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 801328e:	78fb      	ldrb	r3, [r7, #3]
 8013290:	687a      	ldr	r2, [r7, #4]
 8013292:	015b      	lsls	r3, r3, #5
 8013294:	4413      	add	r3, r2
 8013296:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801329a:	681a      	ldr	r2, [r3, #0]
 801329c:	78fb      	ldrb	r3, [r7, #3]
 801329e:	4619      	mov	r1, r3
 80132a0:	f7f7 fd55 	bl	800ad4e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80132a4:	bf00      	nop
 80132a6:	3708      	adds	r7, #8
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}

080132ac <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b082      	sub	sp, #8
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
 80132b4:	460b      	mov	r3, r1
 80132b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80132be:	78fb      	ldrb	r3, [r7, #3]
 80132c0:	687a      	ldr	r2, [r7, #4]
 80132c2:	015b      	lsls	r3, r3, #5
 80132c4:	4413      	add	r3, r2
 80132c6:	333c      	adds	r3, #60	; 0x3c
 80132c8:	681a      	ldr	r2, [r3, #0]
 80132ca:	78fb      	ldrb	r3, [r7, #3]
 80132cc:	4619      	mov	r1, r3
 80132ce:	f7f7 fda1 	bl	800ae14 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80132d2:	bf00      	nop
 80132d4:	3708      	adds	r7, #8
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}

080132da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132da:	b580      	push	{r7, lr}
 80132dc:	b082      	sub	sp, #8
 80132de:	af00      	add	r7, sp, #0
 80132e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7f7 feb5 	bl	800b058 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80132ee:	bf00      	nop
 80132f0:	3708      	adds	r7, #8
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}

080132f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132f6:	b580      	push	{r7, lr}
 80132f8:	b084      	sub	sp, #16
 80132fa:	af00      	add	r7, sp, #0
 80132fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80132fe:	2301      	movs	r3, #1
 8013300:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	689b      	ldr	r3, [r3, #8]
 8013306:	2b02      	cmp	r3, #2
 8013308:	d001      	beq.n	801330e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801330a:	f7ee ff83 	bl	8002214 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013314:	7bfa      	ldrb	r2, [r7, #15]
 8013316:	4611      	mov	r1, r2
 8013318:	4618      	mov	r0, r3
 801331a:	f7f7 fe5f 	bl	800afdc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013324:	4618      	mov	r0, r3
 8013326:	f7f7 fe0b 	bl	800af40 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801332a:	bf00      	nop
 801332c:	3710      	adds	r7, #16
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
	...

08013334 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b082      	sub	sp, #8
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013342:	4618      	mov	r0, r3
 8013344:	f7f7 fe5a 	bl	800affc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	699b      	ldr	r3, [r3, #24]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d005      	beq.n	801335c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013350:	4b04      	ldr	r3, [pc, #16]	; (8013364 <HAL_PCD_SuspendCallback+0x30>)
 8013352:	691b      	ldr	r3, [r3, #16]
 8013354:	4a03      	ldr	r2, [pc, #12]	; (8013364 <HAL_PCD_SuspendCallback+0x30>)
 8013356:	f043 0306 	orr.w	r3, r3, #6
 801335a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801335c:	bf00      	nop
 801335e:	3708      	adds	r7, #8
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}
 8013364:	e000ed00 	.word	0xe000ed00

08013368 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b082      	sub	sp, #8
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	699b      	ldr	r3, [r3, #24]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d007      	beq.n	8013388 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013378:	4b08      	ldr	r3, [pc, #32]	; (801339c <HAL_PCD_ResumeCallback+0x34>)
 801337a:	691b      	ldr	r3, [r3, #16]
 801337c:	4a07      	ldr	r2, [pc, #28]	; (801339c <HAL_PCD_ResumeCallback+0x34>)
 801337e:	f023 0306 	bic.w	r3, r3, #6
 8013382:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013384:	f000 f9be 	bl	8013704 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801338e:	4618      	mov	r0, r3
 8013390:	f7f7 fe4a 	bl	800b028 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8013394:	bf00      	nop
 8013396:	3708      	adds	r7, #8
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}
 801339c:	e000ed00 	.word	0xe000ed00

080133a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80133a8:	4a2c      	ldr	r2, [pc, #176]	; (801345c <USBD_LL_Init+0xbc>)
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	4a2a      	ldr	r2, [pc, #168]	; (801345c <USBD_LL_Init+0xbc>)
 80133b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80133b8:	f7f2 fcee 	bl	8005d98 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80133bc:	4b27      	ldr	r3, [pc, #156]	; (801345c <USBD_LL_Init+0xbc>)
 80133be:	4a28      	ldr	r2, [pc, #160]	; (8013460 <USBD_LL_Init+0xc0>)
 80133c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80133c2:	4b26      	ldr	r3, [pc, #152]	; (801345c <USBD_LL_Init+0xbc>)
 80133c4:	2208      	movs	r2, #8
 80133c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80133c8:	4b24      	ldr	r3, [pc, #144]	; (801345c <USBD_LL_Init+0xbc>)
 80133ca:	2202      	movs	r2, #2
 80133cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80133ce:	4b23      	ldr	r3, [pc, #140]	; (801345c <USBD_LL_Init+0xbc>)
 80133d0:	2202      	movs	r2, #2
 80133d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80133d4:	4b21      	ldr	r3, [pc, #132]	; (801345c <USBD_LL_Init+0xbc>)
 80133d6:	2200      	movs	r2, #0
 80133d8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80133da:	4b20      	ldr	r3, [pc, #128]	; (801345c <USBD_LL_Init+0xbc>)
 80133dc:	2200      	movs	r2, #0
 80133de:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80133e0:	4b1e      	ldr	r3, [pc, #120]	; (801345c <USBD_LL_Init+0xbc>)
 80133e2:	2200      	movs	r2, #0
 80133e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80133e6:	4b1d      	ldr	r3, [pc, #116]	; (801345c <USBD_LL_Init+0xbc>)
 80133e8:	2200      	movs	r2, #0
 80133ea:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80133ec:	481b      	ldr	r0, [pc, #108]	; (801345c <USBD_LL_Init+0xbc>)
 80133ee:	f7f1 fd6f 	bl	8004ed0 <HAL_PCD_Init>
 80133f2:	4603      	mov	r3, r0
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d001      	beq.n	80133fc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80133f8:	f7ee ff0c 	bl	8002214 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013402:	2318      	movs	r3, #24
 8013404:	2200      	movs	r2, #0
 8013406:	2100      	movs	r1, #0
 8013408:	f7f2 fc34 	bl	8005c74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013412:	2358      	movs	r3, #88	; 0x58
 8013414:	2200      	movs	r2, #0
 8013416:	2180      	movs	r1, #128	; 0x80
 8013418:	f7f2 fc2c 	bl	8005c74 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013422:	23c0      	movs	r3, #192	; 0xc0
 8013424:	2200      	movs	r2, #0
 8013426:	2181      	movs	r1, #129	; 0x81
 8013428:	f7f2 fc24 	bl	8005c74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013432:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013436:	2200      	movs	r2, #0
 8013438:	2101      	movs	r1, #1
 801343a:	f7f2 fc1b 	bl	8005c74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013448:	2200      	movs	r2, #0
 801344a:	2182      	movs	r1, #130	; 0x82
 801344c:	f7f2 fc12 	bl	8005c74 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8013450:	2300      	movs	r3, #0
}
 8013452:	4618      	mov	r0, r3
 8013454:	3708      	adds	r7, #8
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
 801345a:	bf00      	nop
 801345c:	20006514 	.word	0x20006514
 8013460:	40006800 	.word	0x40006800

08013464 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b084      	sub	sp, #16
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801346c:	2300      	movs	r3, #0
 801346e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013470:	2300      	movs	r3, #0
 8013472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801347a:	4618      	mov	r0, r3
 801347c:	f7f1 fde3 	bl	8005046 <HAL_PCD_Start>
 8013480:	4603      	mov	r3, r0
 8013482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013484:	7bfb      	ldrb	r3, [r7, #15]
 8013486:	4618      	mov	r0, r3
 8013488:	f000 f944 	bl	8013714 <USBD_Get_USB_Status>
 801348c:	4603      	mov	r3, r0
 801348e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013490:	7bbb      	ldrb	r3, [r7, #14]
}
 8013492:	4618      	mov	r0, r3
 8013494:	3710      	adds	r7, #16
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}

0801349a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801349a:	b580      	push	{r7, lr}
 801349c:	b084      	sub	sp, #16
 801349e:	af00      	add	r7, sp, #0
 80134a0:	6078      	str	r0, [r7, #4]
 80134a2:	4608      	mov	r0, r1
 80134a4:	4611      	mov	r1, r2
 80134a6:	461a      	mov	r2, r3
 80134a8:	4603      	mov	r3, r0
 80134aa:	70fb      	strb	r3, [r7, #3]
 80134ac:	460b      	mov	r3, r1
 80134ae:	70bb      	strb	r3, [r7, #2]
 80134b0:	4613      	mov	r3, r2
 80134b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134b4:	2300      	movs	r3, #0
 80134b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134b8:	2300      	movs	r3, #0
 80134ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80134c2:	78bb      	ldrb	r3, [r7, #2]
 80134c4:	883a      	ldrh	r2, [r7, #0]
 80134c6:	78f9      	ldrb	r1, [r7, #3]
 80134c8:	f7f1 ff52 	bl	8005370 <HAL_PCD_EP_Open>
 80134cc:	4603      	mov	r3, r0
 80134ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134d0:	7bfb      	ldrb	r3, [r7, #15]
 80134d2:	4618      	mov	r0, r3
 80134d4:	f000 f91e 	bl	8013714 <USBD_Get_USB_Status>
 80134d8:	4603      	mov	r3, r0
 80134da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80134dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3710      	adds	r7, #16
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}

080134e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134e6:	b580      	push	{r7, lr}
 80134e8:	b084      	sub	sp, #16
 80134ea:	af00      	add	r7, sp, #0
 80134ec:	6078      	str	r0, [r7, #4]
 80134ee:	460b      	mov	r3, r1
 80134f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134f2:	2300      	movs	r3, #0
 80134f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134f6:	2300      	movs	r3, #0
 80134f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013500:	78fa      	ldrb	r2, [r7, #3]
 8013502:	4611      	mov	r1, r2
 8013504:	4618      	mov	r0, r3
 8013506:	f7f1 ff93 	bl	8005430 <HAL_PCD_EP_Close>
 801350a:	4603      	mov	r3, r0
 801350c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801350e:	7bfb      	ldrb	r3, [r7, #15]
 8013510:	4618      	mov	r0, r3
 8013512:	f000 f8ff 	bl	8013714 <USBD_Get_USB_Status>
 8013516:	4603      	mov	r3, r0
 8013518:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801351a:	7bbb      	ldrb	r3, [r7, #14]
}
 801351c:	4618      	mov	r0, r3
 801351e:	3710      	adds	r7, #16
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}

08013524 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b084      	sub	sp, #16
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	460b      	mov	r3, r1
 801352e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013530:	2300      	movs	r3, #0
 8013532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013534:	2300      	movs	r3, #0
 8013536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801353e:	78fa      	ldrb	r2, [r7, #3]
 8013540:	4611      	mov	r1, r2
 8013542:	4618      	mov	r0, r3
 8013544:	f7f2 f83e 	bl	80055c4 <HAL_PCD_EP_SetStall>
 8013548:	4603      	mov	r3, r0
 801354a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801354c:	7bfb      	ldrb	r3, [r7, #15]
 801354e:	4618      	mov	r0, r3
 8013550:	f000 f8e0 	bl	8013714 <USBD_Get_USB_Status>
 8013554:	4603      	mov	r3, r0
 8013556:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013558:	7bbb      	ldrb	r3, [r7, #14]
}
 801355a:	4618      	mov	r0, r3
 801355c:	3710      	adds	r7, #16
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}

08013562 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013562:	b580      	push	{r7, lr}
 8013564:	b084      	sub	sp, #16
 8013566:	af00      	add	r7, sp, #0
 8013568:	6078      	str	r0, [r7, #4]
 801356a:	460b      	mov	r3, r1
 801356c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801356e:	2300      	movs	r3, #0
 8013570:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013572:	2300      	movs	r3, #0
 8013574:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801357c:	78fa      	ldrb	r2, [r7, #3]
 801357e:	4611      	mov	r1, r2
 8013580:	4618      	mov	r0, r3
 8013582:	f7f2 f879 	bl	8005678 <HAL_PCD_EP_ClrStall>
 8013586:	4603      	mov	r3, r0
 8013588:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801358a:	7bfb      	ldrb	r3, [r7, #15]
 801358c:	4618      	mov	r0, r3
 801358e:	f000 f8c1 	bl	8013714 <USBD_Get_USB_Status>
 8013592:	4603      	mov	r3, r0
 8013594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013596:	7bbb      	ldrb	r3, [r7, #14]
}
 8013598:	4618      	mov	r0, r3
 801359a:	3710      	adds	r7, #16
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}

080135a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80135a0:	b480      	push	{r7}
 80135a2:	b085      	sub	sp, #20
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	460b      	mov	r3, r1
 80135aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80135b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80135b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	da08      	bge.n	80135ce <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80135bc:	78fb      	ldrb	r3, [r7, #3]
 80135be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135c2:	68fa      	ldr	r2, [r7, #12]
 80135c4:	015b      	lsls	r3, r3, #5
 80135c6:	4413      	add	r3, r2
 80135c8:	332a      	adds	r3, #42	; 0x2a
 80135ca:	781b      	ldrb	r3, [r3, #0]
 80135cc:	e008      	b.n	80135e0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80135ce:	78fb      	ldrb	r3, [r7, #3]
 80135d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135d4:	68fa      	ldr	r2, [r7, #12]
 80135d6:	015b      	lsls	r3, r3, #5
 80135d8:	4413      	add	r3, r2
 80135da:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80135de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	3714      	adds	r7, #20
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr

080135ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b084      	sub	sp, #16
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
 80135f4:	460b      	mov	r3, r1
 80135f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135f8:	2300      	movs	r3, #0
 80135fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135fc:	2300      	movs	r3, #0
 80135fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013606:	78fa      	ldrb	r2, [r7, #3]
 8013608:	4611      	mov	r1, r2
 801360a:	4618      	mov	r0, r3
 801360c:	f7f1 fe8b 	bl	8005326 <HAL_PCD_SetAddress>
 8013610:	4603      	mov	r3, r0
 8013612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013614:	7bfb      	ldrb	r3, [r7, #15]
 8013616:	4618      	mov	r0, r3
 8013618:	f000 f87c 	bl	8013714 <USBD_Get_USB_Status>
 801361c:	4603      	mov	r3, r0
 801361e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013620:	7bbb      	ldrb	r3, [r7, #14]
}
 8013622:	4618      	mov	r0, r3
 8013624:	3710      	adds	r7, #16
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}

0801362a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801362a:	b580      	push	{r7, lr}
 801362c:	b086      	sub	sp, #24
 801362e:	af00      	add	r7, sp, #0
 8013630:	60f8      	str	r0, [r7, #12]
 8013632:	607a      	str	r2, [r7, #4]
 8013634:	603b      	str	r3, [r7, #0]
 8013636:	460b      	mov	r3, r1
 8013638:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801363a:	2300      	movs	r3, #0
 801363c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801363e:	2300      	movs	r3, #0
 8013640:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013648:	7af9      	ldrb	r1, [r7, #11]
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	687a      	ldr	r2, [r7, #4]
 801364e:	f7f1 ff80 	bl	8005552 <HAL_PCD_EP_Transmit>
 8013652:	4603      	mov	r3, r0
 8013654:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013656:	7dfb      	ldrb	r3, [r7, #23]
 8013658:	4618      	mov	r0, r3
 801365a:	f000 f85b 	bl	8013714 <USBD_Get_USB_Status>
 801365e:	4603      	mov	r3, r0
 8013660:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013662:	7dbb      	ldrb	r3, [r7, #22]
}
 8013664:	4618      	mov	r0, r3
 8013666:	3718      	adds	r7, #24
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}

0801366c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b086      	sub	sp, #24
 8013670:	af00      	add	r7, sp, #0
 8013672:	60f8      	str	r0, [r7, #12]
 8013674:	607a      	str	r2, [r7, #4]
 8013676:	603b      	str	r3, [r7, #0]
 8013678:	460b      	mov	r3, r1
 801367a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801367c:	2300      	movs	r3, #0
 801367e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013680:	2300      	movs	r3, #0
 8013682:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801368a:	7af9      	ldrb	r1, [r7, #11]
 801368c:	683b      	ldr	r3, [r7, #0]
 801368e:	687a      	ldr	r2, [r7, #4]
 8013690:	f7f1 ff10 	bl	80054b4 <HAL_PCD_EP_Receive>
 8013694:	4603      	mov	r3, r0
 8013696:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013698:	7dfb      	ldrb	r3, [r7, #23]
 801369a:	4618      	mov	r0, r3
 801369c:	f000 f83a 	bl	8013714 <USBD_Get_USB_Status>
 80136a0:	4603      	mov	r3, r0
 80136a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80136a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80136a6:	4618      	mov	r0, r3
 80136a8:	3718      	adds	r7, #24
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}

080136ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80136ae:	b580      	push	{r7, lr}
 80136b0:	b082      	sub	sp, #8
 80136b2:	af00      	add	r7, sp, #0
 80136b4:	6078      	str	r0, [r7, #4]
 80136b6:	460b      	mov	r3, r1
 80136b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80136c0:	78fa      	ldrb	r2, [r7, #3]
 80136c2:	4611      	mov	r1, r2
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7f1 ff2f 	bl	8005528 <HAL_PCD_EP_GetRxCount>
 80136ca:	4603      	mov	r3, r0
}
 80136cc:	4618      	mov	r0, r3
 80136ce:	3708      	adds	r7, #8
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}

080136d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80136d4:	b480      	push	{r7}
 80136d6:	b083      	sub	sp, #12
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80136dc:	4b03      	ldr	r3, [pc, #12]	; (80136ec <USBD_static_malloc+0x18>)
}
 80136de:	4618      	mov	r0, r3
 80136e0:	370c      	adds	r7, #12
 80136e2:	46bd      	mov	sp, r7
 80136e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e8:	4770      	bx	lr
 80136ea:	bf00      	nop
 80136ec:	20004bb8 	.word	0x20004bb8

080136f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80136f0:	b480      	push	{r7}
 80136f2:	b083      	sub	sp, #12
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]

}
 80136f8:	bf00      	nop
 80136fa:	370c      	adds	r7, #12
 80136fc:	46bd      	mov	sp, r7
 80136fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013702:	4770      	bx	lr

08013704 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013704:	b480      	push	{r7}
 8013706:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 8013708:	bf00      	nop
 801370a:	46bd      	mov	sp, r7
 801370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013710:	4770      	bx	lr
	...

08013714 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013714:	b480      	push	{r7}
 8013716:	b085      	sub	sp, #20
 8013718:	af00      	add	r7, sp, #0
 801371a:	4603      	mov	r3, r0
 801371c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801371e:	2300      	movs	r3, #0
 8013720:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013722:	79fb      	ldrb	r3, [r7, #7]
 8013724:	2b03      	cmp	r3, #3
 8013726:	d817      	bhi.n	8013758 <USBD_Get_USB_Status+0x44>
 8013728:	a201      	add	r2, pc, #4	; (adr r2, 8013730 <USBD_Get_USB_Status+0x1c>)
 801372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801372e:	bf00      	nop
 8013730:	08013741 	.word	0x08013741
 8013734:	08013747 	.word	0x08013747
 8013738:	0801374d 	.word	0x0801374d
 801373c:	08013753 	.word	0x08013753
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013740:	2300      	movs	r3, #0
 8013742:	73fb      	strb	r3, [r7, #15]
    break;
 8013744:	e00b      	b.n	801375e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013746:	2303      	movs	r3, #3
 8013748:	73fb      	strb	r3, [r7, #15]
    break;
 801374a:	e008      	b.n	801375e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801374c:	2301      	movs	r3, #1
 801374e:	73fb      	strb	r3, [r7, #15]
    break;
 8013750:	e005      	b.n	801375e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013752:	2303      	movs	r3, #3
 8013754:	73fb      	strb	r3, [r7, #15]
    break;
 8013756:	e002      	b.n	801375e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013758:	2303      	movs	r3, #3
 801375a:	73fb      	strb	r3, [r7, #15]
    break;
 801375c:	bf00      	nop
  }
  return usb_status;
 801375e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013760:	4618      	mov	r0, r3
 8013762:	3714      	adds	r7, #20
 8013764:	46bd      	mov	sp, r7
 8013766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376a:	4770      	bx	lr

0801376c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801376c:	b480      	push	{r7}
 801376e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8013770:	4b05      	ldr	r3, [pc, #20]	; (8013788 <UTIL_LPM_Init+0x1c>)
 8013772:	2200      	movs	r2, #0
 8013774:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013776:	4b05      	ldr	r3, [pc, #20]	; (801378c <UTIL_LPM_Init+0x20>)
 8013778:	2200      	movs	r2, #0
 801377a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801377c:	bf00      	nop
 801377e:	46bd      	mov	sp, r7
 8013780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013784:	4770      	bx	lr
 8013786:	bf00      	nop
 8013788:	20004dd8 	.word	0x20004dd8
 801378c:	20004ddc 	.word	0x20004ddc

08013790 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8013790:	b480      	push	{r7}
 8013792:	b087      	sub	sp, #28
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
 8013798:	460b      	mov	r3, r1
 801379a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801379c:	f3ef 8310 	mrs	r3, PRIMASK
 80137a0:	613b      	str	r3, [r7, #16]
  return(result);
 80137a2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80137a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80137a6:	b672      	cpsid	i
  
  switch(state)
 80137a8:	78fb      	ldrb	r3, [r7, #3]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d009      	beq.n	80137c2 <UTIL_LPM_SetOffMode+0x32>
 80137ae:	2b01      	cmp	r3, #1
 80137b0:	d000      	beq.n	80137b4 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 80137b2:	e00e      	b.n	80137d2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 80137b4:	4b0c      	ldr	r3, [pc, #48]	; (80137e8 <UTIL_LPM_SetOffMode+0x58>)
 80137b6:	681a      	ldr	r2, [r3, #0]
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	4313      	orrs	r3, r2
 80137bc:	4a0a      	ldr	r2, [pc, #40]	; (80137e8 <UTIL_LPM_SetOffMode+0x58>)
 80137be:	6013      	str	r3, [r2, #0]
      break;
 80137c0:	e007      	b.n	80137d2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	43da      	mvns	r2, r3
 80137c6:	4b08      	ldr	r3, [pc, #32]	; (80137e8 <UTIL_LPM_SetOffMode+0x58>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	4013      	ands	r3, r2
 80137cc:	4a06      	ldr	r2, [pc, #24]	; (80137e8 <UTIL_LPM_SetOffMode+0x58>)
 80137ce:	6013      	str	r3, [r2, #0]
      break;
 80137d0:	bf00      	nop
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80137dc:	bf00      	nop
 80137de:	371c      	adds	r7, #28
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr
 80137e8:	20004ddc 	.word	0x20004ddc

080137ec <__libc_init_array>:
 80137ec:	b570      	push	{r4, r5, r6, lr}
 80137ee:	4e0d      	ldr	r6, [pc, #52]	; (8013824 <__libc_init_array+0x38>)
 80137f0:	4c0d      	ldr	r4, [pc, #52]	; (8013828 <__libc_init_array+0x3c>)
 80137f2:	1ba4      	subs	r4, r4, r6
 80137f4:	10a4      	asrs	r4, r4, #2
 80137f6:	2500      	movs	r5, #0
 80137f8:	42a5      	cmp	r5, r4
 80137fa:	d109      	bne.n	8013810 <__libc_init_array+0x24>
 80137fc:	4e0b      	ldr	r6, [pc, #44]	; (801382c <__libc_init_array+0x40>)
 80137fe:	4c0c      	ldr	r4, [pc, #48]	; (8013830 <__libc_init_array+0x44>)
 8013800:	f000 f82c 	bl	801385c <_init>
 8013804:	1ba4      	subs	r4, r4, r6
 8013806:	10a4      	asrs	r4, r4, #2
 8013808:	2500      	movs	r5, #0
 801380a:	42a5      	cmp	r5, r4
 801380c:	d105      	bne.n	801381a <__libc_init_array+0x2e>
 801380e:	bd70      	pop	{r4, r5, r6, pc}
 8013810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013814:	4798      	blx	r3
 8013816:	3501      	adds	r5, #1
 8013818:	e7ee      	b.n	80137f8 <__libc_init_array+0xc>
 801381a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801381e:	4798      	blx	r3
 8013820:	3501      	adds	r5, #1
 8013822:	e7f2      	b.n	801380a <__libc_init_array+0x1e>
 8013824:	08013dc8 	.word	0x08013dc8
 8013828:	08013dc8 	.word	0x08013dc8
 801382c:	08013dc8 	.word	0x08013dc8
 8013830:	08013dcc 	.word	0x08013dcc

08013834 <memcpy>:
 8013834:	b510      	push	{r4, lr}
 8013836:	1e43      	subs	r3, r0, #1
 8013838:	440a      	add	r2, r1
 801383a:	4291      	cmp	r1, r2
 801383c:	d100      	bne.n	8013840 <memcpy+0xc>
 801383e:	bd10      	pop	{r4, pc}
 8013840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013848:	e7f7      	b.n	801383a <memcpy+0x6>

0801384a <memset>:
 801384a:	4402      	add	r2, r0
 801384c:	4603      	mov	r3, r0
 801384e:	4293      	cmp	r3, r2
 8013850:	d100      	bne.n	8013854 <memset+0xa>
 8013852:	4770      	bx	lr
 8013854:	f803 1b01 	strb.w	r1, [r3], #1
 8013858:	e7f9      	b.n	801384e <memset+0x4>
	...

0801385c <_init>:
 801385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801385e:	bf00      	nop
 8013860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013862:	bc08      	pop	{r3}
 8013864:	469e      	mov	lr, r3
 8013866:	4770      	bx	lr

08013868 <_fini>:
 8013868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801386a:	bf00      	nop
 801386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801386e:	bc08      	pop	{r3}
 8013870:	469e      	mov	lr, r3
 8013872:	4770      	bx	lr

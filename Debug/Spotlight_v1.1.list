
Spotlight_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000138f4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  08013a34  08013a34  00023a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013f88  08013f88  00023f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08013f8c  08013f8c  00023f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001bc  20000004  08013f90  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  200001c0  0801414c  000301c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  2000025c  080141e5  0003025c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00006518  20000270  080141f6  00030270  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20006788  080141f6  00036788  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003026d  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000000b8  20030028  20030028  00040000  2**2
                  ALLOC
 13 MB_MEM2       00000a77  200300e0  200300e0  00040000  2**2
                  ALLOC
 14 .debug_info   0005cae8  00000000  00000000  0003029d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000a40b  00000000  00000000  0008cd85  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000038a0  00000000  00000000  00097190  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003448  00000000  00000000  0009aa30  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038b99  00000000  00000000  0009de78  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0003a9c9  00000000  00000000  000d6a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00116648  00000000  00000000  001113da  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00227a22  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e774  00000000  00000000  00227aa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000270 	.word	0x20000270
 800015c:	00000000 	.word	0x00000000
 8000160:	08013a1c 	.word	0x08013a1c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000274 	.word	0x20000274
 800017c:	08013a1c 	.word	0x08013a1c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>:
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
//Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
//                                      int motor_pin_3, int motor_pin_4)
Stepper::Stepper(int32_t number_of_steps, 	GPIO_TypeDef* motor_pin_1_port, uint16_t motor_pin_1,
 8000194:	b480      	push	{r7}
 8000196:	b085      	sub	sp, #20
 8000198:	af00      	add	r7, sp, #0
 800019a:	60f8      	str	r0, [r7, #12]
 800019c:	60b9      	str	r1, [r7, #8]
 800019e:	607a      	str	r2, [r7, #4]
 80001a0:	807b      	strh	r3, [r7, #2]
											GPIO_TypeDef* motor_pin_2_port, uint16_t motor_pin_2,
											GPIO_TypeDef* motor_pin_3_port, uint16_t motor_pin_3,
											GPIO_TypeDef* motor_pin_4_port, uint16_t motor_pin_4,
											volatile uint16_t* stop_sensor, uint8_t motor_direction)
{
  this->step_number = 0;    // which step the motor is on
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	2200      	movs	r2, #0
 80001a6:	611a      	str	r2, [r3, #16]
  this->direction = 0;      // motor direction
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	2200      	movs	r2, #0
 80001b2:	649a      	str	r2, [r3, #72]	; 0x48
  this->number_of_steps = number_of_steps; // total number of steps for this motor
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	68ba      	ldr	r2, [r7, #8]
 80001b8:	609a      	str	r2, [r3, #8]

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	887a      	ldrh	r2, [r7, #2]
 80001be:	841a      	strh	r2, [r3, #32]
  this->motor_pin_2 = motor_pin_2;
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	8bba      	ldrh	r2, [r7, #28]
 80001c4:	845a      	strh	r2, [r3, #34]	; 0x22
  this->motor_pin_3 = motor_pin_3;
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80001ca:	849a      	strh	r2, [r3, #36]	; 0x24
  this->motor_pin_4 = motor_pin_4;
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80001d0:	84da      	strh	r2, [r3, #38]	; 0x26

  // Arduino ports for the motor control pin connection:
  this->motor_pin_1_port = motor_pin_1_port;
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	687a      	ldr	r2, [r7, #4]
 80001d6:	62da      	str	r2, [r3, #44]	; 0x2c
  this->motor_pin_2_port = motor_pin_2_port;
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	69ba      	ldr	r2, [r7, #24]
 80001dc:	631a      	str	r2, [r3, #48]	; 0x30
  this->motor_pin_3_port = motor_pin_3_port;
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	6a3a      	ldr	r2, [r7, #32]
 80001e2:	635a      	str	r2, [r3, #52]	; 0x34
  this->motor_pin_4_port = motor_pin_4_port;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80001e8:	639a      	str	r2, [r3, #56]	; 0x38

  this->motor_dir = motor_direction;
 80001ea:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
//  pinMode(this->motor_pin_2, OUTPUT);
//  pinMode(this->motor_pin_3, OUTPUT);
//  pinMode(this->motor_pin_4, OUTPUT);

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	2200      	movs	r2, #0
 80001f8:	851a      	strh	r2, [r3, #40]	; 0x28

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	2204      	movs	r2, #4
 80001fe:	60da      	str	r2, [r3, #12]

  // pin that is continously updated via DMA on the magnetic end stop value (0 means the magnet is directly aligned with the sensor)
  this->end_stop = stop_sensor;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000204:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	4618      	mov	r0, r3
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <_ZN7Stepper8setSpeedEl>:

/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	689b      	ldr	r3, [r3, #8]
 8000222:	4a07      	ldr	r2, [pc, #28]	; (8000240 <_ZN7Stepper8setSpeedEl+0x2c>)
 8000224:	fb92 f2f3 	sdiv	r2, r2, r3
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	fb92 f3f3 	sdiv	r3, r2, r3
 800022e:	461a      	mov	r2, r3
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	605a      	str	r2, [r3, #4]
}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	03938700 	.word	0x03938700

08000244 <_ZN7Stepper12setStepBoundEl>:
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */

void Stepper::setStepBound(int32_t max_step){
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
	this->max_step = max_step;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	615a      	str	r2, [r3, #20]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr

08000260 <_ZN7Stepper4stepEi>:

uint32_t Stepper::step(int steps_to_move)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
	// break if requested steps exceed maximum range
	if( ((this->step_tracker + steps_to_move) > this->max_step) || (this->step_tracker - steps_to_move) < 0 ){
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	699a      	ldr	r2, [r3, #24]
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	4413      	add	r3, r2
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	6952      	ldr	r2, [r2, #20]
 8000276:	4293      	cmp	r3, r2
 8000278:	d901      	bls.n	800027e <_ZN7Stepper4stepEi+0x1e>
		return 0;
 800027a:	2300      	movs	r3, #0
 800027c:	e07f      	b.n	800037e <_ZN7Stepper4stepEi+0x11e>
	}

	this->step_tracker += steps_to_move;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	699a      	ldr	r2, [r3, #24]
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	441a      	add	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	619a      	str	r2, [r3, #24]

	// compensate in case motor direction is flipped
	steps_to_move = steps_to_move * this->motor_dir;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 8000290:	461a      	mov	r2, r3
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	fb02 f303 	mul.w	r3, r2, r3
 8000298:	603b      	str	r3, [r7, #0]

	// if requesting to go to 0th position, hone axis to limit drift
	if(this->step_tracker == 0){
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d103      	bne.n	80002aa <_ZN7Stepper4stepEi+0x4a>
		honeAxis();
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f000 fb26 	bl	80008f4 <_ZN7Stepper8honeAxisEv>
 80002a8:	e068      	b.n	800037c <_ZN7Stepper4stepEi+0x11c>
	}
	else{
		uint32_t steps_left = abs(steps_to_move);  // how many steps to take
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	bfb8      	it	lt
 80002b0:	425b      	neglt	r3, r3
 80002b2:	60fb      	str	r3, [r7, #12]
	//	uint32_t steps_left;
	  // determine direction based on whether steps_to_mode is + or -:
	  if (steps_to_move > 0) { this->direction = 1; }
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	dd02      	ble.n	80002c0 <_ZN7Stepper4stepEi+0x60>
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2201      	movs	r2, #1
 80002be:	601a      	str	r2, [r3, #0]
	  if (steps_to_move < 0) { this->direction = 0; }
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	da02      	bge.n	80002cc <_ZN7Stepper4stepEi+0x6c>
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]


	  // decrement the number of steps, moving one step each time:
	  while (steps_left > 0)
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d054      	beq.n	800037c <_ZN7Stepper4stepEi+0x11c>
	  {
			  //    unsigned long now = micros();
		  uint32_t now = __HAL_TIM_GET_COUNTER(&htim2);
 80002d2:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <_ZN7Stepper4stepEi+0x128>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d8:	60bb      	str	r3, [r7, #8]
		// move only if the appropriate delay has passed:
		 if (now - this->last_step_time >= this->step_delay)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002de:	68ba      	ldr	r2, [r7, #8]
 80002e0:	1ad2      	subs	r2, r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d3f0      	bcc.n	80002cc <_ZN7Stepper4stepEi+0x6c>
		{
		  // get the timeStamp of when you stepped:
		  this->last_step_time = now;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	68ba      	ldr	r2, [r7, #8]
 80002ee:	649a      	str	r2, [r3, #72]	; 0x48
		  // increment or decrement the step number,
		  // depending on direction:
		  if (this->direction == 1)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d10e      	bne.n	8000316 <_ZN7Stepper4stepEi+0xb6>
		  {
			this->step_number++;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	1c5a      	adds	r2, r3, #1
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	611a      	str	r2, [r3, #16]
			if (this->step_number == this->number_of_steps) {
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	691a      	ldr	r2, [r3, #16]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	429a      	cmp	r2, r3
 800030c:	d110      	bne.n	8000330 <_ZN7Stepper4stepEi+0xd0>
			  this->step_number = 0;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
 8000314:	e00c      	b.n	8000330 <_ZN7Stepper4stepEi+0xd0>
			}
		  }
		  else
		  {
			if (this->step_number == 0) {
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	691b      	ldr	r3, [r3, #16]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d103      	bne.n	8000326 <_ZN7Stepper4stepEi+0xc6>
			  this->step_number = this->number_of_steps;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	689a      	ldr	r2, [r3, #8]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	611a      	str	r2, [r3, #16]
			}
			this->step_number--;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	691b      	ldr	r3, [r3, #16]
 800032a:	1e5a      	subs	r2, r3, #1
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	611a      	str	r2, [r3, #16]
		  }
		  // decrement the steps left:
		  steps_left--;
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	3b01      	subs	r3, #1
 8000334:	60fb      	str	r3, [r7, #12]
		  // step the motor to step number 0, 1, ..., {3 or 10}
		  if (this->pin_count == 5)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	68db      	ldr	r3, [r3, #12]
 800033a:	2b05      	cmp	r3, #5
 800033c:	d110      	bne.n	8000360 <_ZN7Stepper4stepEi+0x100>
			stepMotor(this->step_number % 10);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	691a      	ldr	r2, [r3, #16]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <_ZN7Stepper4stepEi+0x12c>)
 8000344:	fb83 1302 	smull	r1, r3, r3, r2
 8000348:	1099      	asrs	r1, r3, #2
 800034a:	17d3      	asrs	r3, r2, #31
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	460b      	mov	r3, r1
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	440b      	add	r3, r1
 8000354:	005b      	lsls	r3, r3, #1
 8000356:	1ad1      	subs	r1, r2, r3
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f000 f819 	bl	8000390 <_ZN7Stepper9stepMotorEi>
 800035e:	e7b5      	b.n	80002cc <_ZN7Stepper4stepEi+0x6c>
		  else
			stepMotor(this->step_number % 4);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	425a      	negs	r2, r3
 8000366:	f003 0303 	and.w	r3, r3, #3
 800036a:	f002 0203 	and.w	r2, r2, #3
 800036e:	bf58      	it	pl
 8000370:	4253      	negpl	r3, r2
 8000372:	4619      	mov	r1, r3
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f000 f80b 	bl	8000390 <_ZN7Stepper9stepMotorEi>
	  while (steps_left > 0)
 800037a:	e7a7      	b.n	80002cc <_ZN7Stepper4stepEi+0x6c>
		}
	  }
	}
  return 1;
 800037c:	2301      	movs	r3, #1
}
 800037e:	4618      	mov	r0, r3
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20004f6c 	.word	0x20004f6c
 800038c:	66666667 	.word	0x66666667

08000390 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  if (this->pin_count == 2) {
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d152      	bne.n	8000448 <_ZN7Stepper9stepMotorEi+0xb8>
    switch (thisStep) {
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	2b03      	cmp	r3, #3
 80003a6:	d84f      	bhi.n	8000448 <_ZN7Stepper9stepMotorEi+0xb8>
 80003a8:	a201      	add	r2, pc, #4	; (adr r2, 80003b0 <_ZN7Stepper9stepMotorEi+0x20>)
 80003aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ae:	bf00      	nop
 80003b0:	080003c1 	.word	0x080003c1
 80003b4:	080003e3 	.word	0x080003e3
 80003b8:	08000405 	.word	0x08000405
 80003bc:	08000427 	.word	0x08000427
      case 0:  // 01
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	8c1b      	ldrh	r3, [r3, #32]
 80003c8:	2200      	movs	r2, #0
 80003ca:	4619      	mov	r1, r3
 80003cc:	f004 fd7a 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80003d8:	2201      	movs	r2, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	f004 fd72 	bl	8004ec4 <HAL_GPIO_WritePin>
      break;
 80003e0:	e032      	b.n	8000448 <_ZN7Stepper9stepMotorEi+0xb8>
      case 1:  // 11
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	8c1b      	ldrh	r3, [r3, #32]
 80003ea:	2201      	movs	r2, #1
 80003ec:	4619      	mov	r1, r3
 80003ee:	f004 fd69 	bl	8004ec4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80003fa:	2201      	movs	r2, #1
 80003fc:	4619      	mov	r1, r3
 80003fe:	f004 fd61 	bl	8004ec4 <HAL_GPIO_WritePin>
      break;
 8000402:	e021      	b.n	8000448 <_ZN7Stepper9stepMotorEi+0xb8>
      case 2:  // 10
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	8c1b      	ldrh	r3, [r3, #32]
 800040c:	2201      	movs	r2, #1
 800040e:	4619      	mov	r1, r3
 8000410:	f004 fd58 	bl	8004ec4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800041c:	2200      	movs	r2, #0
 800041e:	4619      	mov	r1, r3
 8000420:	f004 fd50 	bl	8004ec4 <HAL_GPIO_WritePin>
      break;
 8000424:	e010      	b.n	8000448 <_ZN7Stepper9stepMotorEi+0xb8>
      case 3:  // 00
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	8c1b      	ldrh	r3, [r3, #32]
 800042e:	2200      	movs	r2, #0
 8000430:	4619      	mov	r1, r3
 8000432:	f004 fd47 	bl	8004ec4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800043e:	2200      	movs	r2, #0
 8000440:	4619      	mov	r1, r3
 8000442:	f004 fd3f 	bl	8004ec4 <HAL_GPIO_WritePin>
      break;
 8000446:	bf00      	nop
    }
  }
  if (this->pin_count == 4) {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	2b04      	cmp	r3, #4
 800044e:	f040 8093 	bne.w	8000578 <_ZN7Stepper9stepMotorEi+0x1e8>
    switch (thisStep) {
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	2b03      	cmp	r3, #3
 8000456:	f200 808f 	bhi.w	8000578 <_ZN7Stepper9stepMotorEi+0x1e8>
 800045a:	a201      	add	r2, pc, #4	; (adr r2, 8000460 <_ZN7Stepper9stepMotorEi+0xd0>)
 800045c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000460:	08000471 	.word	0x08000471
 8000464:	080004b3 	.word	0x080004b3
 8000468:	080004f5 	.word	0x080004f5
 800046c:	08000537 	.word	0x08000537
      case 0:  // 1010
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	8c1b      	ldrh	r3, [r3, #32]
 8000478:	2201      	movs	r2, #1
 800047a:	4619      	mov	r1, r3
 800047c:	f004 fd22 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000488:	2200      	movs	r2, #0
 800048a:	4619      	mov	r1, r3
 800048c:	f004 fd1a 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000498:	2201      	movs	r2, #1
 800049a:	4619      	mov	r1, r3
 800049c:	f004 fd12 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80004a8:	2200      	movs	r2, #0
 80004aa:	4619      	mov	r1, r3
 80004ac:	f004 fd0a 	bl	8004ec4 <HAL_GPIO_WritePin>
      break;
 80004b0:	e062      	b.n	8000578 <_ZN7Stepper9stepMotorEi+0x1e8>
      case 1:  // 0110
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	8c1b      	ldrh	r3, [r3, #32]
 80004ba:	2200      	movs	r2, #0
 80004bc:	4619      	mov	r1, r3
 80004be:	f004 fd01 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80004ca:	2201      	movs	r2, #1
 80004cc:	4619      	mov	r1, r3
 80004ce:	f004 fcf9 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80004da:	2201      	movs	r2, #1
 80004dc:	4619      	mov	r1, r3
 80004de:	f004 fcf1 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80004ea:	2200      	movs	r2, #0
 80004ec:	4619      	mov	r1, r3
 80004ee:	f004 fce9 	bl	8004ec4 <HAL_GPIO_WritePin>
      break;
 80004f2:	e041      	b.n	8000578 <_ZN7Stepper9stepMotorEi+0x1e8>
      case 2:  //0101
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	8c1b      	ldrh	r3, [r3, #32]
 80004fc:	2200      	movs	r2, #0
 80004fe:	4619      	mov	r1, r3
 8000500:	f004 fce0 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800050c:	2201      	movs	r2, #1
 800050e:	4619      	mov	r1, r3
 8000510:	f004 fcd8 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800051c:	2200      	movs	r2, #0
 800051e:	4619      	mov	r1, r3
 8000520:	f004 fcd0 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800052c:	2201      	movs	r2, #1
 800052e:	4619      	mov	r1, r3
 8000530:	f004 fcc8 	bl	8004ec4 <HAL_GPIO_WritePin>
      break;
 8000534:	e020      	b.n	8000578 <_ZN7Stepper9stepMotorEi+0x1e8>
      case 3:  //1001
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	8c1b      	ldrh	r3, [r3, #32]
 800053e:	2201      	movs	r2, #1
 8000540:	4619      	mov	r1, r3
 8000542:	f004 fcbf 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f004 fcb7 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800055e:	2200      	movs	r2, #0
 8000560:	4619      	mov	r1, r3
 8000562:	f004 fcaf 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	f004 fca7 	bl	8004ec4 <HAL_GPIO_WritePin>
      break;
 8000576:	bf00      	nop
    }
  }

  if (this->pin_count == 5) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	2b05      	cmp	r3, #5
 800057e:	f040 81b5 	bne.w	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
    switch (thisStep) {
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	2b09      	cmp	r3, #9
 8000586:	f200 81b1 	bhi.w	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
 800058a:	a201      	add	r2, pc, #4	; (adr r2, 8000590 <_ZN7Stepper9stepMotorEi+0x200>)
 800058c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000590:	080005b9 	.word	0x080005b9
 8000594:	0800060b 	.word	0x0800060b
 8000598:	0800065d 	.word	0x0800065d
 800059c:	080006af 	.word	0x080006af
 80005a0:	08000701 	.word	0x08000701
 80005a4:	08000753 	.word	0x08000753
 80005a8:	080007a5 	.word	0x080007a5
 80005ac:	080007f7 	.word	0x080007f7
 80005b0:	08000849 	.word	0x08000849
 80005b4:	0800089b 	.word	0x0800089b
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	8c1b      	ldrh	r3, [r3, #32]
 80005c0:	2200      	movs	r2, #0
 80005c2:	4619      	mov	r1, r3
 80005c4:	f004 fc7e 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	f004 fc76 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	f004 fc6e 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80005f0:	2200      	movs	r2, #0
 80005f2:	4619      	mov	r1, r3
 80005f4:	f004 fc66 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	f004 fc5e 	bl	8004ec4 <HAL_GPIO_WritePin>
        break;
 8000608:	e170      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	8c1b      	ldrh	r3, [r3, #32]
 8000612:	2200      	movs	r2, #0
 8000614:	4619      	mov	r1, r3
 8000616:	f004 fc55 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000622:	2201      	movs	r2, #1
 8000624:	4619      	mov	r1, r3
 8000626:	f004 fc4d 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000632:	2200      	movs	r2, #0
 8000634:	4619      	mov	r1, r3
 8000636:	f004 fc45 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000642:	2200      	movs	r2, #0
 8000644:	4619      	mov	r1, r3
 8000646:	f004 fc3d 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000652:	2201      	movs	r2, #1
 8000654:	4619      	mov	r1, r3
 8000656:	f004 fc35 	bl	8004ec4 <HAL_GPIO_WritePin>
        break;
 800065a:	e147      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	8c1b      	ldrh	r3, [r3, #32]
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	f004 fc2c 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000674:	2201      	movs	r2, #1
 8000676:	4619      	mov	r1, r3
 8000678:	f004 fc24 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000684:	2200      	movs	r2, #0
 8000686:	4619      	mov	r1, r3
 8000688:	f004 fc1c 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000694:	2201      	movs	r2, #1
 8000696:	4619      	mov	r1, r3
 8000698:	f004 fc14 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	f004 fc0c 	bl	8004ec4 <HAL_GPIO_WritePin>
        break;
 80006ac:	e11e      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	8c1b      	ldrh	r3, [r3, #32]
 80006b6:	2200      	movs	r2, #0
 80006b8:	4619      	mov	r1, r3
 80006ba:	f004 fc03 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80006c6:	2201      	movs	r2, #1
 80006c8:	4619      	mov	r1, r3
 80006ca:	f004 fbfb 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80006d6:	2200      	movs	r2, #0
 80006d8:	4619      	mov	r1, r3
 80006da:	f004 fbf3 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80006e6:	2201      	movs	r2, #1
 80006e8:	4619      	mov	r1, r3
 80006ea:	f004 fbeb 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	f004 fbe3 	bl	8004ec4 <HAL_GPIO_WritePin>
        break;
 80006fe:	e0f5      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	8c1b      	ldrh	r3, [r3, #32]
 8000708:	2201      	movs	r2, #1
 800070a:	4619      	mov	r1, r3
 800070c:	f004 fbda 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000718:	2201      	movs	r2, #1
 800071a:	4619      	mov	r1, r3
 800071c:	f004 fbd2 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	f004 fbca 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000738:	2201      	movs	r2, #1
 800073a:	4619      	mov	r1, r3
 800073c:	f004 fbc2 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000748:	2200      	movs	r2, #0
 800074a:	4619      	mov	r1, r3
 800074c:	f004 fbba 	bl	8004ec4 <HAL_GPIO_WritePin>
        break;
 8000750:	e0cc      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	8c1b      	ldrh	r3, [r3, #32]
 800075a:	2201      	movs	r2, #1
 800075c:	4619      	mov	r1, r3
 800075e:	f004 fbb1 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	f004 fba9 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800077a:	2200      	movs	r2, #0
 800077c:	4619      	mov	r1, r3
 800077e:	f004 fba1 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	f004 fb99 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800079a:	2200      	movs	r2, #0
 800079c:	4619      	mov	r1, r3
 800079e:	f004 fb91 	bl	8004ec4 <HAL_GPIO_WritePin>
        break;
 80007a2:	e0a3      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	8c1b      	ldrh	r3, [r3, #32]
 80007ac:	2201      	movs	r2, #1
 80007ae:	4619      	mov	r1, r3
 80007b0:	f004 fb88 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	f004 fb80 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	f004 fb78 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80007dc:	2201      	movs	r2, #1
 80007de:	4619      	mov	r1, r3
 80007e0:	f004 fb70 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80007ec:	2200      	movs	r2, #0
 80007ee:	4619      	mov	r1, r3
 80007f0:	f004 fb68 	bl	8004ec4 <HAL_GPIO_WritePin>
        break;
 80007f4:	e07a      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	8c1b      	ldrh	r3, [r3, #32]
 80007fe:	2201      	movs	r2, #1
 8000800:	4619      	mov	r1, r3
 8000802:	f004 fb5f 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	f004 fb57 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800081e:	2201      	movs	r2, #1
 8000820:	4619      	mov	r1, r3
 8000822:	f004 fb4f 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	f004 fb47 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800083e:	2200      	movs	r2, #0
 8000840:	4619      	mov	r1, r3
 8000842:	f004 fb3f 	bl	8004ec4 <HAL_GPIO_WritePin>
        break;
 8000846:	e051      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	8c1b      	ldrh	r3, [r3, #32]
 8000850:	2201      	movs	r2, #1
 8000852:	4619      	mov	r1, r3
 8000854:	f004 fb36 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000860:	2200      	movs	r2, #0
 8000862:	4619      	mov	r1, r3
 8000864:	f004 fb2e 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000870:	2201      	movs	r2, #1
 8000872:	4619      	mov	r1, r3
 8000874:	f004 fb26 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000880:	2200      	movs	r2, #0
 8000882:	4619      	mov	r1, r3
 8000884:	f004 fb1e 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000890:	2201      	movs	r2, #1
 8000892:	4619      	mov	r1, r3
 8000894:	f004 fb16 	bl	8004ec4 <HAL_GPIO_WritePin>
        break;
 8000898:	e028      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	8c1b      	ldrh	r3, [r3, #32]
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	f004 fb0d 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80008b2:	2200      	movs	r2, #0
 80008b4:	4619      	mov	r1, r3
 80008b6:	f004 fb05 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008c2:	2201      	movs	r2, #1
 80008c4:	4619      	mov	r1, r3
 80008c6:	f004 fafd 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80008d2:	2200      	movs	r2, #0
 80008d4:	4619      	mov	r1, r3
 80008d6:	f004 faf5 	bl	8004ec4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80008e2:	2201      	movs	r2, #1
 80008e4:	4619      	mov	r1, r3
 80008e6:	f004 faed 	bl	8004ec4 <HAL_GPIO_WritePin>
        break;
 80008ea:	bf00      	nop
    }
  }
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <_ZN7Stepper8honeAxisEv>:

void Stepper::honeAxis(void){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

	// set step tracker to max step to bypass over step protection in step()
	this->step_tracker = this->max_step;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	461a      	mov	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	619a      	str	r2, [r3, #24]

	while(*(this->end_stop) != 0){
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	b29b      	uxth	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	bf14      	ite	ne
 8000912:	2301      	movne	r3, #1
 8000914:	2300      	moveq	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d008      	beq.n	800092e <_ZN7Stepper8honeAxisEv+0x3a>
		// give time for the end stop value to be updated by the ADC via DMA
		//todo: optimize this to make this quicker (i.e., increase ADC sample frequency)
		HAL_Delay(1);
 800091c:	2001      	movs	r0, #1
 800091e:	f002 fab1 	bl	8002e84 <HAL_Delay>



		step(-1);
 8000922:	f04f 31ff 	mov.w	r1, #4294967295
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff fc9a 	bl	8000260 <_ZN7Stepper4stepEi>
	while(*(this->end_stop) != 0){
 800092c:	e7eb      	b.n	8000906 <_ZN7Stepper8honeAxisEv+0x12>
	}

	step_tracker = 0;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <_ZN7Stepper9setAbsPosEl>:

void Stepper::setAbsPos(int32_t step_cnt){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	this->steps_to_move = step_cnt - this->step_tracker;
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	1ad2      	subs	r2, r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	61da      	str	r2, [r3, #28]
	step(this->steps_to_move);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4619      	mov	r1, r3
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fc81 	bl	8000260 <_ZN7Stepper4stepEi>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000966:	b480      	push	{r7}
 8000968:	b085      	sub	sp, #20
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800096e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4313      	orrs	r3, r2
 800097c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800097e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4013      	ands	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800099e:	463b      	mov	r3, r7
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009ae:	4b3f      	ldr	r3, [pc, #252]	; (8000aac <MX_ADC1_Init+0x114>)
 80009b0:	4a3f      	ldr	r2, [pc, #252]	; (8000ab0 <MX_ADC1_Init+0x118>)
 80009b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80009b4:	4b3d      	ldr	r3, [pc, #244]	; (8000aac <MX_ADC1_Init+0x114>)
 80009b6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80009ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009bc:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <MX_ADC1_Init+0x114>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009c2:	4b3a      	ldr	r3, [pc, #232]	; (8000aac <MX_ADC1_Init+0x114>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009c8:	4b38      	ldr	r3, [pc, #224]	; (8000aac <MX_ADC1_Init+0x114>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009ce:	4b37      	ldr	r3, [pc, #220]	; (8000aac <MX_ADC1_Init+0x114>)
 80009d0:	2208      	movs	r2, #8
 80009d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009d4:	4b35      	ldr	r3, [pc, #212]	; (8000aac <MX_ADC1_Init+0x114>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009da:	4b34      	ldr	r3, [pc, #208]	; (8000aac <MX_ADC1_Init+0x114>)
 80009dc:	2201      	movs	r2, #1
 80009de:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80009e0:	4b32      	ldr	r3, [pc, #200]	; (8000aac <MX_ADC1_Init+0x114>)
 80009e2:	2204      	movs	r2, #4
 80009e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e6:	4b31      	ldr	r3, [pc, #196]	; (8000aac <MX_ADC1_Init+0x114>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ee:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <MX_ADC1_Init+0x114>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f4:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <MX_ADC1_Init+0x114>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009fa:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <MX_ADC1_Init+0x114>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a0a:	4b28      	ldr	r3, [pc, #160]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a12:	4826      	ldr	r0, [pc, #152]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a14:	f002 fc40 	bl	8003298 <HAL_ADC_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a1e:	f001 fc1d 	bl	800225c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a22:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <MX_ADC1_Init+0x11c>)
 8000a24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a26:	2306      	movs	r3, #6
 8000a28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a2e:	237f      	movs	r3, #127	; 0x7f
 8000a30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a32:	2304      	movs	r3, #4
 8000a34:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481b      	ldr	r0, [pc, #108]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a40:	f002 ffd6 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000a4a:	f001 fc07 	bl	800225c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_ADC1_Init+0x120>)
 8000a50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a52:	230c      	movs	r3, #12
 8000a54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4814      	ldr	r0, [pc, #80]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a5c:	f002 ffc8 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000a66:	f001 fbf9 	bl	800225c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_ADC1_Init+0x124>)
 8000a6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a6e:	2312      	movs	r3, #18
 8000a70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a72:	463b      	mov	r3, r7
 8000a74:	4619      	mov	r1, r3
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a78:	f002 ffba 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000a82:	f001 fbeb 	bl	800225c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_ADC1_Init+0x128>)
 8000a88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a8a:	2318      	movs	r3, #24
 8000a8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8e:	463b      	mov	r3, r7
 8000a90:	4619      	mov	r1, r3
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a94:	f002 ffac 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000a9e:	f001 fbdd 	bl	800225c <Error_Handler>
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20004de0 	.word	0x20004de0
 8000ab0:	50040000 	.word	0x50040000
 8000ab4:	04300002 	.word	0x04300002
 8000ab8:	08600004 	.word	0x08600004
 8000abc:	0c900008 	.word	0x0c900008
 8000ac0:	1d500080 	.word	0x1d500080

08000ac4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a2e      	ldr	r2, [pc, #184]	; (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d155      	bne.n	8000b92 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ae6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000aea:	f7ff ff3c 	bl	8000966 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	2004      	movs	r0, #4
 8000af0:	f7ff ff39 	bl	8000966 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	2001      	movs	r0, #1
 8000af6:	f7ff ff36 	bl	8000966 <LL_AHB2_GRP1_EnableClock>
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = MAG_BASE_Pin|MAG_LIGHT_Pin|MAIN_BOARD_TEMP_Pin;
 8000afa:	2307      	movs	r3, #7
 8000afc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afe:	2303      	movs	r3, #3
 8000b00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4824      	ldr	r0, [pc, #144]	; (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000b0e:	f004 f869 	bl	8004be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_TEMP_Pin;
 8000b12:	2304      	movs	r3, #4
 8000b14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b16:	2303      	movs	r3, #3
 8000b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4619      	mov	r1, r3
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b28:	f004 f85c 	bl	8004be4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b30:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b34:	2205      	movs	r2, #5
 8000b36:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b50:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b66:	480f      	ldr	r0, [pc, #60]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b68:	f003 fdc8 	bl	80046fc <HAL_DMA_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000b72:	f001 fb73 	bl	800225c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b7a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b7c:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2105      	movs	r1, #5
 8000b86:	2012      	movs	r0, #18
 8000b88:	f003 fd61 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000b8c:	2012      	movs	r0, #18
 8000b8e:	f003 fd78 	bl	8004682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b92:	bf00      	nop
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	50040000 	.word	0x50040000
 8000ba0:	48000800 	.word	0x48000800
 8000ba4:	20004e44 	.word	0x20004e44
 8000ba8:	40020008 	.word	0x40020008

08000bac <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bba:	f023 0207 	bic.w	r2, r3, #7
 8000bbe:	4905      	ldr	r1, [pc, #20]	; (8000bd4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	58000400 	.word	0x58000400

08000bd8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	608b      	str	r3, [r1, #8]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000c04:	f000 f80a 	bl	8000c1c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000c08:	4903      	ldr	r1, [pc, #12]	; (8000c18 <APPE_Init+0x18>)
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 ff94 	bl	8001b38 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000c10:	f000 f812 	bl	8000c38 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000c14:	bf00      	nop
}
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20004eb0 	.word	0x20004eb0

08000c1c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000c20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c24:	f7ff ffd8 	bl	8000bd8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000c28:	f012 fe80 	bl	801392c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000c2c:	2004      	movs	r0, #4
 8000c2e:	f7ff ffbd 	bl	8000bac <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000c32:	bf00      	nop
}
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000c3e:	f00b fb73 	bl	800c328 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8000c42:	2000      	movs	r0, #0
 8000c44:	f00d fa1c 	bl	800e080 <osMutexNew>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <appe_Tl_Init+0x70>)
 8000c4c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2001      	movs	r0, #1
 8000c54:	f00d fb5c 	bl	800e310 <osSemaphoreNew>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <appe_Tl_Init+0x74>)
 8000c5c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8000c5e:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <appe_Tl_Init+0x78>)
 8000c60:	2100      	movs	r1, #0
 8000c62:	4814      	ldr	r0, [pc, #80]	; (8000cb4 <appe_Tl_Init+0x7c>)
 8000c64:	f00d f842 	bl	800dcec <osThreadNew>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <appe_Tl_Init+0x80>)
 8000c6c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <appe_Tl_Init+0x84>)
 8000c70:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <appe_Tl_Init+0x88>)
 8000c74:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c76:	463b      	mov	r3, r7
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <appe_Tl_Init+0x8c>)
 8000c7c:	f00b fa1a 	bl	800c0b4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <appe_Tl_Init+0x90>)
 8000c86:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <appe_Tl_Init+0x94>)
 8000c8a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c8c:	f240 533c 	movw	r3, #1340	; 0x53c
 8000c90:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	4618      	mov	r0, r3
 8000c98:	f00b fcb0 	bl	800c5fc <TL_MM_Init>

  TL_Enable();
 8000c9c:	f00b fb3e 	bl	800c31c <TL_Enable>

  return;
 8000ca0:	bf00      	nop
}
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20004ea4 	.word	0x20004ea4
 8000cac:	20004eac 	.word	0x20004eac
 8000cb0:	08013df8 	.word	0x08013df8
 8000cb4:	08000db9 	.word	0x08000db9
 8000cb8:	20004ea8 	.word	0x20004ea8
 8000cbc:	2003061c 	.word	0x2003061c
 8000cc0:	08000cd1 	.word	0x08000cd1
 8000cc4:	08000d11 	.word	0x08000d11
 8000cc8:	20030728 	.word	0x20030728
 8000ccc:	200300e0 	.word	0x200300e0

08000cd0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <APPE_SysStatusNot+0x16>
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d008      	beq.n	8000cf6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8000ce4:	e00d      	b.n	8000d02 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <APPE_SysStatusNot+0x3c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f04f 31ff 	mov.w	r1, #4294967295
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f00d fa60 	bl	800e1b4 <osMutexAcquire>
      break;
 8000cf4:	e005      	b.n	8000d02 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <APPE_SysStatusNot+0x3c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f00d fab8 	bl	800e270 <osMutexRelease>
      break;
 8000d00:	bf00      	nop
  }
  return;
 8000d02:	bf00      	nop
}
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20004ea4 	.word	0x20004ea4

08000d10 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	330b      	adds	r3, #11
 8000d1e:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8000d2a:	d004      	beq.n	8000d36 <APPE_SysUserEvtRx+0x26>
 8000d2c:	f249 2201 	movw	r2, #37377	; 0x9201
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d003      	beq.n	8000d3c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8000d34:	e008      	b.n	8000d48 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8000d36:	f000 f833 	bl	8000da0 <APPE_SysEvtReadyProcessing>
         break;
 8000d3a:	e005      	b.n	8000d48 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	789b      	ldrb	r3, [r3, #2]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 f805 	bl	8000d50 <APPE_SysEvtError>
         break;
 8000d46:	bf00      	nop
  }
  return;
 8000d48:	bf00      	nop
}
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	2b7d      	cmp	r3, #125	; 0x7d
 8000d5e:	d002      	beq.n	8000d66 <APPE_SysEvtError+0x16>
 8000d60:	2b7e      	cmp	r3, #126	; 0x7e
 8000d62:	d006      	beq.n	8000d72 <APPE_SysEvtError+0x22>
 8000d64:	e00b      	b.n	8000d7e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8000d66:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <APPE_SysEvtError+0x44>)
 8000d68:	2101      	movs	r1, #1
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f001 fe42 	bl	80029f4 <logApplication>
       break;
 8000d70:	e00c      	b.n	8000d8c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8000d72:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <APPE_SysEvtError+0x48>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	2000      	movs	r0, #0
 8000d78:	f001 fe3c 	bl	80029f4 <logApplication>
       break;
 8000d7c:	e006      	b.n	8000d8c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <APPE_SysEvtError+0x4c>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	2000      	movs	r0, #0
 8000d86:	f001 fe35 	bl	80029f4 <logApplication>
       break;
 8000d8a:	bf00      	nop
  }
  return;
 8000d8c:	bf00      	nop
}
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	08013a4c 	.word	0x08013a4c
 8000d98:	08013a70 	.word	0x08013a70
 8000d9c:	08013a90 	.word	0x08013a90

08000da0 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000da4:	f00b fc9e 	bl	800c6e4 <TL_TRACES_Init>

  APP_THREAD_Init();
 8000da8:	f011 f898 	bl	8011edc <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000dac:	2100      	movs	r1, #0
 8000dae:	2001      	movs	r0, #1
 8000db0:	f012 fdce 	bl	8013950 <UTIL_LPM_SetOffMode>
  return;
 8000db4:	bf00      	nop
}
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f00d f898 	bl	800defc <osThreadFlagsWait>
     shci_user_evt_proc();
 8000dcc:	f00b f98e 	bl	800c0ec <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000dd0:	e7f6      	b.n	8000dc0 <ShciUserEvtProcess+0x8>
	...

08000dd4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <shci_notify_asynch_evt+0x1c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2101      	movs	r1, #1
 8000de2:	4618      	mov	r0, r3
 8000de4:	f00d f828 	bl	800de38 <osThreadFlagsSet>
  return;
 8000de8:	bf00      	nop
}
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20004ea8 	.word	0x20004ea8

08000df4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <shci_cmd_resp_release+0x1c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f00d fb89 	bl	800e518 <osSemaphoreRelease>
  return;
 8000e06:	bf00      	nop
}
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20004eac 	.word	0x20004eac

08000e14 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <shci_cmd_resp_wait+0x20>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00d fb11 	bl	800e44c <osSemaphoreAcquire>
  return;
 8000e2a:	bf00      	nop
}
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20004eac 	.word	0x20004eac

08000e38 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f00b fc17 	bl	800c674 <TL_MM_EvtDone>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <_Z16MX_FREERTOS_Initv+0x3c>)
 8000e56:	2100      	movs	r1, #0
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <_Z16MX_FREERTOS_Initv+0x40>)
 8000e5a:	f00c ff47 	bl	800dcec <osThreadNew>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <_Z16MX_FREERTOS_Initv+0x44>)
 8000e62:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
#ifndef SOLAR_SENSOR_NODE
  msgTaskHandle = osThreadNew(MsgTask, NULL, &msgTask_attributes);
 8000e64:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <_Z16MX_FREERTOS_Initv+0x48>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <_Z16MX_FREERTOS_Initv+0x4c>)
 8000e6a:	f00c ff3f 	bl	800dcec <osThreadNew>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <_Z16MX_FREERTOS_Initv+0x50>)
 8000e72:	601a      	str	r2, [r3, #0]

  msgQueueHandle = osMessageQueueNew (10, sizeof(struct MeasMsg), &msgQueue_attributes);
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <_Z16MX_FREERTOS_Initv+0x54>)
 8000e76:	2114      	movs	r1, #20
 8000e78:	200a      	movs	r0, #10
 8000e7a:	f00d fba5 	bl	800e5c8 <osMessageQueueNew>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <_Z16MX_FREERTOS_Initv+0x58>)
 8000e82:	601a      	str	r2, [r3, #0]
#endif

  APPE_Init();
 8000e84:	f7ff febc 	bl	8000c00 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	08013e1c 	.word	0x08013e1c
 8000e90:	08000ead 	.word	0x08000ead
 8000e94:	2000028c 	.word	0x2000028c
 8000e98:	08013e40 	.word	0x08013e40
 8000e9c:	08002781 	.word	0x08002781
 8000ea0:	20000290 	.word	0x20000290
 8000ea4:	08013e64 	.word	0x08013e64
 8000ea8:	20000294 	.word	0x20000294

08000eac <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	osDelay(100);
 8000eb4:	2064      	movs	r0, #100	; 0x64
 8000eb6:	f00d f8b5 	bl	800e024 <osDelay>
	myMain();
 8000eba:	f001 fadb 	bl	8002474 <_Z6myMainv>
  for(;;)
  {
	  osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8000ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f00d f819 	bl	800defc <osThreadFlagsWait>
 8000eca:	e7f8      	b.n	8000ebe <_Z16StartDefaultTaskPv+0x12>

08000ecc <startCal>:
#ifndef SOLAR_SENSOR_NODE

uint8_t perpetual_record = 0;
void startCal(float angle_base_min, float angle_base_max,
		float angle_led_min, float angle_led_max,
				Stepper& motor_base, Stepper& motor_led){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	ed87 0a05 	vstr	s0, [r7, #20]
 8000ed6:	edc7 0a04 	vstr	s1, [r7, #16]
 8000eda:	ed87 1a03 	vstr	s2, [r7, #12]
 8000ede:	edc7 1a02 	vstr	s3, [r7, #8]
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]

	// configure calMsg packet
	calMsg.UID = SPOTLIGHT_UID;
 8000ee6:	4b69      	ldr	r3, [pc, #420]	; (800108c <startCal+0x1c0>)
 8000ee8:	2218      	movs	r2, #24
 8000eea:	701a      	strb	r2, [r3, #0]
	calMsg.cal_code = CALIBRATION_START_COMMAND;
 8000eec:	4b67      	ldr	r3, [pc, #412]	; (800108c <startCal+0x1c0>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	705a      	strb	r2, [r3, #1]

	/* (1) hone axis */
	motor_base.honeAxis();
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fcfe 	bl	80008f4 <_ZN7Stepper8honeAxisEv>
	motor_led.honeAxis();
 8000ef8:	6838      	ldr	r0, [r7, #0]
 8000efa:	f7ff fcfb 	bl	80008f4 <_ZN7Stepper8honeAxisEv>

	/* (2) multicast that calibration will begin */

	// clear current calibration table
	memset(calibration_table,0,sizeof(calibration_table));
 8000efe:	2250      	movs	r2, #80	; 0x50
 8000f00:	2100      	movs	r1, #0
 8000f02:	4863      	ldr	r0, [pc, #396]	; (8001090 <startCal+0x1c4>)
 8000f04:	f012 fd81 	bl	8013a0a <memset>

	broadcastCalStart(&calMsg); //TODO: implement
 8000f08:	4860      	ldr	r0, [pc, #384]	; (800108c <startCal+0x1c0>)
 8000f0a:	f000 f8cd 	bl	80010a8 <broadcastCalStart>
	/* (3) wait for nodes to ACK and populate a table with the UIDs */

	// note: nodes will be replying to a Coap server (code exists in app_thread.c for populating of table)

	// wait for nodes to reply with their IDs
	osDelay(CAL_INIT_CAL_TIMEOUT);
 8000f0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f12:	f00d f887 	bl	800e024 <osDelay>
	/* (4) Run through each position, sending an msg to each node indicating the angle is set
	 * and waiting for said nodes to respond with their solar power measurements. If node does
	 * not reply within CAL_POS_TIMEOUT, re-send msg and wait one more cycle before continuing.
	 */
		// calculate step bounds for each axis
		int32_t min_led_axis_step = (((angle_led_min) * LED_STEP_RANGE));
 8000f16:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f1a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001094 <startCal+0x1c8>
 8000f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f26:	ee17 3a90 	vmov	r3, s15
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
		int32_t max_led_axis_step = (((angle_led_max) * LED_STEP_RANGE));
 8000f2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f30:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001094 <startCal+0x1c8>
 8000f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f3c:	ee17 3a90 	vmov	r3, s15
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
		int32_t min_base_axis_step = (((angle_base_min) * BASE_STEP_RANGE));
 8000f42:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f46:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001098 <startCal+0x1cc>
 8000f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f52:	ee17 3a90 	vmov	r3, s15
 8000f56:	623b      	str	r3, [r7, #32]
		int32_t max_base_axis_step = (((angle_base_max) * BASE_STEP_RANGE));
 8000f58:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f5c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001098 <startCal+0x1cc>
 8000f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f68:	ee17 3a90 	vmov	r3, s15
 8000f6c:	61fb      	str	r3, [r7, #28]

		if( (max_base_axis_step == 0) && (min_base_axis_step == 0)){
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d105      	bne.n	8000f80 <startCal+0xb4>
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <startCal+0xb4>
			perpetual_record = 1;
 8000f7a:	4b48      	ldr	r3, [pc, #288]	; (800109c <startCal+0x1d0>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
		}

		if(perpetual_record == 1){
 8000f80:	4b46      	ldr	r3, [pc, #280]	; (800109c <startCal+0x1d0>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d10c      	bne.n	8000fa2 <startCal+0xd6>
			while(true){
				getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8000f88:	4b45      	ldr	r3, [pc, #276]	; (80010a0 <startCal+0x1d4>)
 8000f8a:	6819      	ldr	r1, [r3, #0]
 8000f8c:	4b45      	ldr	r3, [pc, #276]	; (80010a4 <startCal+0x1d8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	483e      	ldr	r0, [pc, #248]	; (800108c <startCal+0x1c0>)
 8000f94:	f000 f8cc 	bl	8001130 <getMeasurementsFromNodes>
				osDelay(SPOTLIGHT_INTERVAL_DELAY);
 8000f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9c:	f00d f842 	bl	800e024 <osDelay>
				getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8000fa0:	e7f2      	b.n	8000f88 <startCal+0xbc>
			}
		}
		else{
			// move to desired angle
			uint8_t flip_dir = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for(base_step = min_base_axis_step; base_step <= max_base_axis_step; base_step += (BASE_CAL_STEP_MULTI * BASE_MIN_ANGLE_STEP)){
 8000fa8:	4a3d      	ldr	r2, [pc, #244]	; (80010a0 <startCal+0x1d4>)
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	4b3c      	ldr	r3, [pc, #240]	; (80010a0 <startCal+0x1d4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	db62      	blt.n	800107e <startCal+0x1b2>
				motor_base.setAbsPos(base_step);
 8000fb8:	4b39      	ldr	r3, [pc, #228]	; (80010a0 <startCal+0x1d4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff fcbc 	bl	800093c <_ZN7Stepper9setAbsPosEl>

				if(flip_dir == 0){
 8000fc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d129      	bne.n	8001020 <startCal+0x154>
					for(led_step = min_led_axis_step; led_step <= max_led_axis_step; led_step += (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8000fcc:	4a35      	ldr	r2, [pc, #212]	; (80010a4 <startCal+0x1d8>)
 8000fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	4b34      	ldr	r3, [pc, #208]	; (80010a4 <startCal+0x1d8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	db1d      	blt.n	8001018 <startCal+0x14c>
						motor_led.setAbsPos(led_step);
 8000fdc:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <startCal+0x1d8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	6838      	ldr	r0, [r7, #0]
 8000fe4:	f7ff fcaa 	bl	800093c <_ZN7Stepper9setAbsPosEl>
						getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <startCal+0x1d4>)
 8000fea:	6819      	ldr	r1, [r3, #0]
 8000fec:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <startCal+0x1d8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4826      	ldr	r0, [pc, #152]	; (800108c <startCal+0x1c0>)
 8000ff4:	f000 f89c 	bl	8001130 <getMeasurementsFromNodes>

						// wait CAL_POS_TIMEOUT milliseconds for nodes to reply with power values
	#ifndef DEBUG_SERIAL
						osThreadFlagsWait (CAL_THREAD_FLAG, osFlagsWaitAny, CAL_POS_TIMEOUT);
 8000ff8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2003      	movs	r0, #3
 8001000:	f00c ff7c 	bl	800defc <osThreadFlagsWait>
	#else
						osDelay(100);
	#endif
						osDelay(SPOTLIGHT_INTERVAL_DELAY);
 8001004:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001008:	f00d f80c 	bl	800e024 <osDelay>
					for(led_step = min_led_axis_step; led_step <= max_led_axis_step; led_step += (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <startCal+0x1d8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3324      	adds	r3, #36	; 0x24
 8001012:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <startCal+0x1d8>)
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e7dc      	b.n	8000fd2 <startCal+0x106>
					}
					flip_dir = 1;
 8001018:	2301      	movs	r3, #1
 800101a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800101e:	e028      	b.n	8001072 <startCal+0x1a6>
				}
				else{
					for(led_step = max_led_axis_step; led_step >= min_led_axis_step; led_step -= (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8001020:	4a20      	ldr	r2, [pc, #128]	; (80010a4 <startCal+0x1d8>)
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <startCal+0x1d8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800102c:	429a      	cmp	r2, r3
 800102e:	dc1d      	bgt.n	800106c <startCal+0x1a0>
						motor_led.setAbsPos(led_step);
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <startCal+0x1d8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	6838      	ldr	r0, [r7, #0]
 8001038:	f7ff fc80 	bl	800093c <_ZN7Stepper9setAbsPosEl>
						getMeasurementsFromNodes(&calMsg, base_step, led_step);
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <startCal+0x1d4>)
 800103e:	6819      	ldr	r1, [r3, #0]
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <startCal+0x1d8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4811      	ldr	r0, [pc, #68]	; (800108c <startCal+0x1c0>)
 8001048:	f000 f872 	bl	8001130 <getMeasurementsFromNodes>

						// wait CAL_POS_TIMEOUT milliseconds for nodes to reply with power values
	#ifndef DEBUG_SERIAL
						osThreadFlagsWait (CAL_THREAD_FLAG, osFlagsWaitAny, CAL_POS_TIMEOUT);
 800104c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001050:	2100      	movs	r1, #0
 8001052:	2003      	movs	r0, #3
 8001054:	f00c ff52 	bl	800defc <osThreadFlagsWait>
	#else
						osDelay(100);
	#endif
						osDelay(SPOTLIGHT_INTERVAL_DELAY);
 8001058:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800105c:	f00c ffe2 	bl	800e024 <osDelay>
					for(led_step = max_led_axis_step; led_step >= min_led_axis_step; led_step -= (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <startCal+0x1d8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	3b24      	subs	r3, #36	; 0x24
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <startCal+0x1d8>)
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e7dc      	b.n	8001026 <startCal+0x15a>
					}
					flip_dir = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for(base_step = min_base_axis_step; base_step <= max_base_axis_step; base_step += (BASE_CAL_STEP_MULTI * BASE_MIN_ANGLE_STEP)){
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <startCal+0x1d4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	331e      	adds	r3, #30
 8001078:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <startCal+0x1d4>)
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	e797      	b.n	8000fae <startCal+0xe2>
			}

		}

//	/* (5) send calibration complete message to all nodes */
		broadcastCalComplete(&calMsg);
 800107e:	4803      	ldr	r0, [pc, #12]	; (800108c <startCal+0x1c0>)
 8001080:	f000 f834 	bl	80010ec <broadcastCalComplete>

}
 8001084:	bf00      	nop
 8001086:	3730      	adds	r7, #48	; 0x30
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200002e8 	.word	0x200002e8
 8001090:	20000298 	.word	0x20000298
 8001094:	46f24600 	.word	0x46f24600
 8001098:	45c06000 	.word	0x45c06000
 800109c:	200002fc 	.word	0x200002fc
 80010a0:	200002f8 	.word	0x200002f8
 80010a4:	200002f4 	.word	0x200002f4

080010a8 <broadcastCalStart>:
#endif


void broadcastCalStart(CalMsg* msg){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af04      	add	r7, sp, #16
 80010ae:	6078      	str	r0, [r7, #4]

	msg->cal_fcn = CALIBRATION_START_COMMAND;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = 0;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
	msg->angle_2 = 0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]

	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 80010c2:	2301      	movs	r3, #1
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2303      	movs	r3, #3
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	2301      	movs	r3, #1
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <broadcastCalStart+0x3c>)
 80010d0:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <broadcastCalStart+0x40>)
 80010d2:	210c      	movs	r1, #12
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f011 f9d9 	bl	801248c <APP_THREAD_SendCoapMsg>
			&multicastAddr, nodeCalResource,
			REQUEST_ACK, OT_COAP_CODE_PUT, 1U);

	return;
 80010da:	bf00      	nop
}
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	08013f78 	.word	0x08013f78
 80010e8:	20005010 	.word	0x20005010

080010ec <broadcastCalComplete>:

void broadcastCalComplete(CalMsg* msg){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	6078      	str	r0, [r7, #4]

	msg->cal_fcn = CALIBRATION_START_COMMAND;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = 0;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
	msg->angle_2 = 0;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]

	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 8001106:	2301      	movs	r3, #1
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	2303      	movs	r3, #3
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	2301      	movs	r3, #1
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <broadcastCalComplete+0x3c>)
 8001114:	4a05      	ldr	r2, [pc, #20]	; (800112c <broadcastCalComplete+0x40>)
 8001116:	210c      	movs	r1, #12
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f011 f9b7 	bl	801248c <APP_THREAD_SendCoapMsg>
			&multicastAddr, nodeCalResource,
			REQUEST_ACK, OT_COAP_CODE_PUT, 1U);

	return;
 800111e:	bf00      	nop
}
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	08013f78 	.word	0x08013f78
 800112c:	20005010 	.word	0x20005010

08001130 <getMeasurementsFromNodes>:

void getMeasurementsFromNodes(CalMsg* msg, int32_t angle_1, int32_t angle_2){
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af04      	add	r7, sp, #16
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]

	msg->cal_fcn = CALIBRATION_GET_MEAS;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2202      	movs	r2, #2
 8001140:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = angle_1;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	605a      	str	r2, [r3, #4]
	msg->angle_2 = angle_2;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	609a      	str	r2, [r3, #8]

#ifndef DEBUG_SERIAL
	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 800114e:	2301      	movs	r3, #1
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	2301      	movs	r3, #1
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <getMeasurementsFromNodes+0x40>)
 800115c:	4a05      	ldr	r2, [pc, #20]	; (8001174 <getMeasurementsFromNodes+0x44>)
 800115e:	210c      	movs	r1, #12
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f011 f993 	bl	801248c <APP_THREAD_SendCoapMsg>
#else
	// TODO REMOVE!!!
	measMsgReceivedFromNode(&measMsg);
#endif

	return;
 8001166:	bf00      	nop
}
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	08013f78 	.word	0x08013f78
 8001174:	20005010 	.word	0x20005010

08001178 <LL_AHB1_GRP1_EnableClock>:
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001184:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4313      	orrs	r3, r2
 800118e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001194:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4013      	ands	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800119c:	68fb      	ldr	r3, [r7, #12]
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011ae:	2004      	movs	r0, #4
 80011b0:	f7ff ffe2 	bl	8001178 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff ffdf 	bl	8001178 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2105      	movs	r1, #5
 80011be:	200b      	movs	r0, #11
 80011c0:	f003 fa45 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011c4:	200b      	movs	r0, #11
 80011c6:	f003 fa5c 	bl	8004682 <HAL_NVIC_EnableIRQ>

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}

080011ce <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_AHB2_GRP1_EnableClock>:
{
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4013      	ands	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001228:	2004      	movs	r0, #4
 800122a:	f7ff ffda 	bl	80011e2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	2002      	movs	r0, #2
 8001230:	f7ff ffd7 	bl	80011e2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	2001      	movs	r0, #1
 8001236:	f7ff ffd4 	bl	80011e2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800123a:	2010      	movs	r0, #16
 800123c:	f7ff ffd1 	bl	80011e2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 8001240:	2200      	movs	r2, #0
 8001242:	f240 3193 	movw	r1, #915	; 0x393
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f003 fe3b 	bl	8004ec4 <HAL_GPIO_WritePin>
                          |AIN1_1_Pin|BIN1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BIN1_2_Pin|BIN2_2_Pin|BIN2_1_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 4198 	mov.w	r1, #19456	; 0x4c00
 8001254:	4823      	ldr	r0, [pc, #140]	; (80012e4 <MX_GPIO_Init+0xd0>)
 8001256:	f003 fe35 	bl	8004ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLUE_LED_Pin|GREEN_LED_Pin, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	2103      	movs	r1, #3
 800125e:	4821      	ldr	r0, [pc, #132]	; (80012e4 <MX_GPIO_Init+0xd0>)
 8001260:	f003 fe30 	bl	8004ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001264:	2201      	movs	r2, #1
 8001266:	2110      	movs	r1, #16
 8001268:	481f      	ldr	r0, [pc, #124]	; (80012e8 <MX_GPIO_Init+0xd4>)
 800126a:	f003 fe2b 	bl	8004ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 800126e:	f240 3393 	movw	r3, #915	; 0x393
 8001272:	607b      	str	r3, [r7, #4]
                          |AIN1_1_Pin|BIN1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001288:	f003 fcac 	bl	8004be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_LED_DISC_Pin;
 800128c:	2308      	movs	r3, #8
 800128e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(INT_LED_DISC_GPIO_Port, &GPIO_InitStruct);
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	4619      	mov	r1, r3
 800129c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a0:	f003 fca0 	bl	8004be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BIN1_2_Pin|BIN2_2_Pin|BLUE_LED_Pin|GREEN_LED_Pin
 80012a4:	f644 4303 	movw	r3, #19459	; 0x4c03
 80012a8:	607b      	str	r3, [r7, #4]
                          |BIN2_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4619      	mov	r1, r3
 80012ba:	480a      	ldr	r0, [pc, #40]	; (80012e4 <MX_GPIO_Init+0xd0>)
 80012bc:	f003 fc92 	bl	8004be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 80012c0:	2310      	movs	r3, #16
 80012c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	4619      	mov	r1, r3
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MX_GPIO_Init+0xd4>)
 80012d6:	f003 fc85 	bl	8004be4 <HAL_GPIO_Init>

}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	48000400 	.word	0x48000400
 80012e8:	48001000 	.word	0x48001000

080012ec <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <LL_EXTI_EnableIT_0_31+0x24>)
 80012f6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80012fa:	4905      	ldr	r1, [pc, #20]	; (8001310 <LL_EXTI_EnableIT_0_31+0x24>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4313      	orrs	r3, r2
 8001300:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	58000800 	.word	0x58000800

08001314 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4904      	ldr	r1, [pc, #16]	; (8001334 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4313      	orrs	r3, r2
 8001326:	600b      	str	r3, [r1, #0]

}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	58000800 	.word	0x58000800

08001338 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <ReadRtcSsrValue+0x3c>)
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	b29b      	uxth	r3, r3
 8001344:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <ReadRtcSsrValue+0x3c>)
 8001348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134a:	b29b      	uxth	r3, r3
 800134c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800134e:	e005      	b.n	800135c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <ReadRtcSsrValue+0x3c>)
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	b29b      	uxth	r3, r3
 800135a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d1f5      	bne.n	8001350 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001364:	683b      	ldr	r3, [r7, #0]
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40002800 	.word	0x40002800

08001378 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	460a      	mov	r2, r1
 8001382:	71fb      	strb	r3, [r7, #7]
 8001384:	4613      	mov	r3, r2
 8001386:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001388:	79ba      	ldrb	r2, [r7, #6]
 800138a:	491d      	ldr	r1, [pc, #116]	; (8001400 <LinkTimerAfter+0x88>)
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	3315      	adds	r3, #21
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d009      	beq.n	80013b6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	4916      	ldr	r1, [pc, #88]	; (8001400 <LinkTimerAfter+0x88>)
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	440b      	add	r3, r1
 80013b0:	3314      	adds	r3, #20
 80013b2:	79fa      	ldrb	r2, [r7, #7]
 80013b4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80013b6:	79fa      	ldrb	r2, [r7, #7]
 80013b8:	4911      	ldr	r1, [pc, #68]	; (8001400 <LinkTimerAfter+0x88>)
 80013ba:	4613      	mov	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	440b      	add	r3, r1
 80013c4:	3315      	adds	r3, #21
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80013ca:	79fa      	ldrb	r2, [r7, #7]
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <LinkTimerAfter+0x88>)
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	440b      	add	r3, r1
 80013d8:	3314      	adds	r3, #20
 80013da:	79ba      	ldrb	r2, [r7, #6]
 80013dc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80013de:	79ba      	ldrb	r2, [r7, #6]
 80013e0:	4907      	ldr	r1, [pc, #28]	; (8001400 <LinkTimerAfter+0x88>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	440b      	add	r3, r1
 80013ec:	3315      	adds	r3, #21
 80013ee:	79fa      	ldrb	r2, [r7, #7]
 80013f0:	701a      	strb	r2, [r3, #0]

  return;
 80013f2:	bf00      	nop
}
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200001c0 	.word	0x200001c0

08001404 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	460a      	mov	r2, r1
 800140e:	71fb      	strb	r3, [r7, #7]
 8001410:	4613      	mov	r3, r2
 8001412:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001414:	4b29      	ldr	r3, [pc, #164]	; (80014bc <LinkTimerBefore+0xb8>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	79ba      	ldrb	r2, [r7, #6]
 800141c:	429a      	cmp	r2, r3
 800141e:	d032      	beq.n	8001486 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001420:	79ba      	ldrb	r2, [r7, #6]
 8001422:	4927      	ldr	r1, [pc, #156]	; (80014c0 <LinkTimerBefore+0xbc>)
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	3314      	adds	r3, #20
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	4922      	ldr	r1, [pc, #136]	; (80014c0 <LinkTimerBefore+0xbc>)
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	3315      	adds	r3, #21
 8001444:	79fa      	ldrb	r2, [r7, #7]
 8001446:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001448:	79fa      	ldrb	r2, [r7, #7]
 800144a:	491d      	ldr	r1, [pc, #116]	; (80014c0 <LinkTimerBefore+0xbc>)
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	440b      	add	r3, r1
 8001456:	3315      	adds	r3, #21
 8001458:	79ba      	ldrb	r2, [r7, #6]
 800145a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800145c:	79fa      	ldrb	r2, [r7, #7]
 800145e:	4918      	ldr	r1, [pc, #96]	; (80014c0 <LinkTimerBefore+0xbc>)
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	440b      	add	r3, r1
 800146a:	3314      	adds	r3, #20
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001470:	79ba      	ldrb	r2, [r7, #6]
 8001472:	4913      	ldr	r1, [pc, #76]	; (80014c0 <LinkTimerBefore+0xbc>)
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	440b      	add	r3, r1
 800147e:	3314      	adds	r3, #20
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001484:	e014      	b.n	80014b0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001486:	79fa      	ldrb	r2, [r7, #7]
 8001488:	490d      	ldr	r1, [pc, #52]	; (80014c0 <LinkTimerBefore+0xbc>)
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	3315      	adds	r3, #21
 8001496:	79ba      	ldrb	r2, [r7, #6]
 8001498:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800149a:	79ba      	ldrb	r2, [r7, #6]
 800149c:	4908      	ldr	r1, [pc, #32]	; (80014c0 <LinkTimerBefore+0xbc>)
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	440b      	add	r3, r1
 80014a8:	3314      	adds	r3, #20
 80014aa:	79fa      	ldrb	r2, [r7, #7]
 80014ac:	701a      	strb	r2, [r3, #0]
  return;
 80014ae:	bf00      	nop
}
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000250 	.word	0x20000250
 80014c0:	200001c0 	.word	0x200001c0

080014c4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014ce:	4b4e      	ldr	r3, [pc, #312]	; (8001608 <linkTimer+0x144>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b06      	cmp	r3, #6
 80014d6:	d118      	bne.n	800150a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80014d8:	4b4b      	ldr	r3, [pc, #300]	; (8001608 <linkTimer+0x144>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b4b      	ldr	r3, [pc, #300]	; (800160c <linkTimer+0x148>)
 80014e0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80014e2:	4a49      	ldr	r2, [pc, #292]	; (8001608 <linkTimer+0x144>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80014e8:	79fa      	ldrb	r2, [r7, #7]
 80014ea:	4949      	ldr	r1, [pc, #292]	; (8001610 <linkTimer+0x14c>)
 80014ec:	4613      	mov	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	440b      	add	r3, r1
 80014f6:	3315      	adds	r3, #21
 80014f8:	2206      	movs	r2, #6
 80014fa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80014fc:	4b45      	ldr	r3, [pc, #276]	; (8001614 <linkTimer+0x150>)
 80014fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001502:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	81fb      	strh	r3, [r7, #14]
 8001508:	e078      	b.n	80015fc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800150a:	f000 f909 	bl	8001720 <ReturnTimeElapsed>
 800150e:	4603      	mov	r3, r0
 8001510:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001512:	79fa      	ldrb	r2, [r7, #7]
 8001514:	493e      	ldr	r1, [pc, #248]	; (8001610 <linkTimer+0x14c>)
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	3308      	adds	r3, #8
 8001522:	6819      	ldr	r1, [r3, #0]
 8001524:	89fb      	ldrh	r3, [r7, #14]
 8001526:	79fa      	ldrb	r2, [r7, #7]
 8001528:	4419      	add	r1, r3
 800152a:	4839      	ldr	r0, [pc, #228]	; (8001610 <linkTimer+0x14c>)
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4403      	add	r3, r0
 8001536:	3308      	adds	r3, #8
 8001538:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800153a:	79fa      	ldrb	r2, [r7, #7]
 800153c:	4934      	ldr	r1, [pc, #208]	; (8001610 <linkTimer+0x14c>)
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	3308      	adds	r3, #8
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800154e:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <linkTimer+0x144>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4619      	mov	r1, r3
 8001556:	4a2e      	ldr	r2, [pc, #184]	; (8001610 <linkTimer+0x14c>)
 8001558:	460b      	mov	r3, r1
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	440b      	add	r3, r1
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4413      	add	r3, r2
 8001562:	3308      	adds	r3, #8
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	429a      	cmp	r2, r3
 800156a:	d337      	bcc.n	80015dc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800156c:	4b26      	ldr	r3, [pc, #152]	; (8001608 <linkTimer+0x144>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001572:	7b7a      	ldrb	r2, [r7, #13]
 8001574:	4926      	ldr	r1, [pc, #152]	; (8001610 <linkTimer+0x14c>)
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	3315      	adds	r3, #21
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001586:	e013      	b.n	80015b0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001588:	7b7a      	ldrb	r2, [r7, #13]
 800158a:	4921      	ldr	r1, [pc, #132]	; (8001610 <linkTimer+0x14c>)
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	3315      	adds	r3, #21
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800159c:	7b7a      	ldrb	r2, [r7, #13]
 800159e:	491c      	ldr	r1, [pc, #112]	; (8001610 <linkTimer+0x14c>)
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	3315      	adds	r3, #21
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80015b0:	7b3b      	ldrb	r3, [r7, #12]
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d00b      	beq.n	80015ce <linkTimer+0x10a>
 80015b6:	7b3a      	ldrb	r2, [r7, #12]
 80015b8:	4915      	ldr	r1, [pc, #84]	; (8001610 <linkTimer+0x14c>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	3308      	adds	r3, #8
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d2dc      	bcs.n	8001588 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80015ce:	7b7a      	ldrb	r2, [r7, #13]
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fecf 	bl	8001378 <LinkTimerAfter>
 80015da:	e00f      	b.n	80015fc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <linkTimer+0x144>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff0c 	bl	8001404 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <linkTimer+0x144>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <linkTimer+0x148>)
 80015f4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <linkTimer+0x144>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80015fc:	89fb      	ldrh	r3, [r7, #14]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000250 	.word	0x20000250
 800160c:	20000251 	.word	0x20000251
 8001610:	200001c0 	.word	0x200001c0
 8001614:	20000254 	.word	0x20000254

08001618 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	460a      	mov	r2, r1
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	4613      	mov	r3, r2
 8001626:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001628:	4b39      	ldr	r3, [pc, #228]	; (8001710 <UnlinkTimer+0xf8>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	79fa      	ldrb	r2, [r7, #7]
 8001630:	429a      	cmp	r2, r3
 8001632:	d111      	bne.n	8001658 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001634:	4b36      	ldr	r3, [pc, #216]	; (8001710 <UnlinkTimer+0xf8>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b36      	ldr	r3, [pc, #216]	; (8001714 <UnlinkTimer+0xfc>)
 800163c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800163e:	79fa      	ldrb	r2, [r7, #7]
 8001640:	4935      	ldr	r1, [pc, #212]	; (8001718 <UnlinkTimer+0x100>)
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	440b      	add	r3, r1
 800164c:	3315      	adds	r3, #21
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <UnlinkTimer+0xf8>)
 8001654:	701a      	strb	r2, [r3, #0]
 8001656:	e03e      	b.n	80016d6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001658:	79fa      	ldrb	r2, [r7, #7]
 800165a:	492f      	ldr	r1, [pc, #188]	; (8001718 <UnlinkTimer+0x100>)
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	3314      	adds	r3, #20
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800166c:	79fa      	ldrb	r2, [r7, #7]
 800166e:	492a      	ldr	r1, [pc, #168]	; (8001718 <UnlinkTimer+0x100>)
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	440b      	add	r3, r1
 800167a:	3315      	adds	r3, #21
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001680:	79f9      	ldrb	r1, [r7, #7]
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	4824      	ldr	r0, [pc, #144]	; (8001718 <UnlinkTimer+0x100>)
 8001686:	460b      	mov	r3, r1
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	440b      	add	r3, r1
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4403      	add	r3, r0
 8001690:	3315      	adds	r3, #21
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2d8      	uxtb	r0, r3
 8001696:	4920      	ldr	r1, [pc, #128]	; (8001718 <UnlinkTimer+0x100>)
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	440b      	add	r3, r1
 80016a2:	3315      	adds	r3, #21
 80016a4:	4602      	mov	r2, r0
 80016a6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80016a8:	7bbb      	ldrb	r3, [r7, #14]
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d013      	beq.n	80016d6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80016ae:	79f9      	ldrb	r1, [r7, #7]
 80016b0:	7bba      	ldrb	r2, [r7, #14]
 80016b2:	4819      	ldr	r0, [pc, #100]	; (8001718 <UnlinkTimer+0x100>)
 80016b4:	460b      	mov	r3, r1
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	440b      	add	r3, r1
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4403      	add	r3, r0
 80016be:	3314      	adds	r3, #20
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b2d8      	uxtb	r0, r3
 80016c4:	4914      	ldr	r1, [pc, #80]	; (8001718 <UnlinkTimer+0x100>)
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	440b      	add	r3, r1
 80016d0:	3314      	adds	r3, #20
 80016d2:	4602      	mov	r2, r0
 80016d4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80016d6:	79fa      	ldrb	r2, [r7, #7]
 80016d8:	490f      	ldr	r1, [pc, #60]	; (8001718 <UnlinkTimer+0x100>)
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	440b      	add	r3, r1
 80016e4:	330c      	adds	r3, #12
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <UnlinkTimer+0xf8>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b06      	cmp	r3, #6
 80016f2:	d107      	bne.n	8001704 <UnlinkTimer+0xec>
 80016f4:	79bb      	ldrb	r3, [r7, #6]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d104      	bne.n	8001704 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <UnlinkTimer+0x104>)
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	601a      	str	r2, [r3, #0]
  }

  return;
 8001702:	bf00      	nop
 8001704:	bf00      	nop
}
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	20000250 	.word	0x20000250
 8001714:	20000251 	.word	0x20000251
 8001718:	200001c0 	.word	0x200001c0
 800171c:	20000254 	.word	0x20000254

08001720 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <ReturnTimeElapsed+0x70>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172e:	d026      	beq.n	800177e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001730:	f7ff fe02 	bl	8001338 <ReadRtcSsrValue>
 8001734:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <ReturnTimeElapsed+0x70>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	429a      	cmp	r2, r3
 800173e:	d805      	bhi.n	800174c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <ReturnTimeElapsed+0x70>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	e00a      	b.n	8001762 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <ReturnTimeElapsed+0x74>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <ReturnTimeElapsed+0x70>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	4413      	add	r3, r2
 8001760:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <ReturnTimeElapsed+0x78>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <ReturnTimeElapsed+0x7c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	40d3      	lsrs	r3, r2
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	e001      	b.n	8001782 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	b29b      	uxth	r3, r3
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000254 	.word	0x20000254
 8001794:	20000306 	.word	0x20000306
 8001798:	20000305 	.word	0x20000305
 800179c:	20000304 	.word	0x20000304

080017a0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d108      	bne.n	80017c2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80017b0:	f7ff fdc2 	bl	8001338 <ReadRtcSsrValue>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <RestartWakeupCounter+0xa8>)
 80017b8:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80017ba:	2003      	movs	r0, #3
 80017bc:	f002 ff81 	bl	80046c2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80017c0:	e03e      	b.n	8001840 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d803      	bhi.n	80017d0 <RestartWakeupCounter+0x30>
 80017c8:	4b20      	ldr	r3, [pc, #128]	; (800184c <RestartWakeupCounter+0xac>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d002      	beq.n	80017d6 <RestartWakeupCounter+0x36>
      Value -= 1;
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80017d6:	bf00      	nop
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <RestartWakeupCounter+0xb0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f7      	beq.n	80017d8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <RestartWakeupCounter+0xb0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <RestartWakeupCounter+0xb0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80017fc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <RestartWakeupCounter+0xb4>)
 8001800:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001804:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001806:	2003      	movs	r0, #3
 8001808:	f002 ff69 	bl	80046de <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <RestartWakeupCounter+0xb8>)
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	0c1b      	lsrs	r3, r3, #16
 8001812:	041b      	lsls	r3, r3, #16
 8001814:	88fa      	ldrh	r2, [r7, #6]
 8001816:	4910      	ldr	r1, [pc, #64]	; (8001858 <RestartWakeupCounter+0xb8>)
 8001818:	4313      	orrs	r3, r2
 800181a:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800181c:	f7ff fd8c 	bl	8001338 <ReadRtcSsrValue>
 8001820:	4602      	mov	r2, r0
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <RestartWakeupCounter+0xa8>)
 8001824:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <RestartWakeupCounter+0xb0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <RestartWakeupCounter+0xb0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001838:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800183a:	f3af 8000 	nop.w
  return ;
 800183e:	bf00      	nop
}
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000254 	.word	0x20000254
 800184c:	20000304 	.word	0x20000304
 8001850:	20000300 	.word	0x20000300
 8001854:	58000800 	.word	0x58000800
 8001858:	40002800 	.word	0x40002800

0800185c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001862:	4b47      	ldr	r3, [pc, #284]	; (8001980 <RescheduleTimerList+0x124>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800186e:	d108      	bne.n	8001882 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001870:	bf00      	nop
 8001872:	4b44      	ldr	r3, [pc, #272]	; (8001984 <RescheduleTimerList+0x128>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f7      	bne.n	8001872 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001882:	4b40      	ldr	r3, [pc, #256]	; (8001984 <RescheduleTimerList+0x128>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	4b3e      	ldr	r3, [pc, #248]	; (8001984 <RescheduleTimerList+0x128>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001894:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001896:	4b3c      	ldr	r3, [pc, #240]	; (8001988 <RescheduleTimerList+0x12c>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	493b      	ldr	r1, [pc, #236]	; (800198c <RescheduleTimerList+0x130>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	3308      	adds	r3, #8
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80018b0:	f7ff ff36 	bl	8001720 <ReturnTimeElapsed>
 80018b4:	4603      	mov	r3, r0
 80018b6:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d205      	bcs.n	80018cc <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80018c4:	4b32      	ldr	r3, [pc, #200]	; (8001990 <RescheduleTimerList+0x134>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
 80018ca:	e04d      	b.n	8001968 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	4a31      	ldr	r2, [pc, #196]	; (8001994 <RescheduleTimerList+0x138>)
 80018d0:	8812      	ldrh	r2, [r2, #0]
 80018d2:	b292      	uxth	r2, r2
 80018d4:	4413      	add	r3, r2
 80018d6:	461a      	mov	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	4293      	cmp	r3, r2
 80018dc:	d906      	bls.n	80018ec <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80018de:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <RescheduleTimerList+0x138>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <RescheduleTimerList+0x134>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	e03d      	b.n	8001968 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80018f6:	4b26      	ldr	r3, [pc, #152]	; (8001990 <RescheduleTimerList+0x134>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018fc:	e034      	b.n	8001968 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	4922      	ldr	r1, [pc, #136]	; (800198c <RescheduleTimerList+0x130>)
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	3308      	adds	r3, #8
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	429a      	cmp	r2, r3
 8001914:	d20a      	bcs.n	800192c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	491c      	ldr	r1, [pc, #112]	; (800198c <RescheduleTimerList+0x130>)
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	440b      	add	r3, r1
 8001924:	3308      	adds	r3, #8
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e013      	b.n	8001954 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	4917      	ldr	r1, [pc, #92]	; (800198c <RescheduleTimerList+0x130>)
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	440b      	add	r3, r1
 800193a:	3308      	adds	r3, #8
 800193c:	6819      	ldr	r1, [r3, #0]
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	1ac9      	subs	r1, r1, r3
 8001944:	4811      	ldr	r0, [pc, #68]	; (800198c <RescheduleTimerList+0x130>)
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4403      	add	r3, r0
 8001950:	3308      	adds	r3, #8
 8001952:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	490d      	ldr	r1, [pc, #52]	; (800198c <RescheduleTimerList+0x130>)
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	440b      	add	r3, r1
 8001962:	3315      	adds	r3, #21
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	2b06      	cmp	r3, #6
 800196c:	d1c7      	bne.n	80018fe <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800196e:	89bb      	ldrh	r3, [r7, #12]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff15 	bl	80017a0 <RestartWakeupCounter>

  return ;
 8001976:	bf00      	nop
}
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40002800 	.word	0x40002800
 8001984:	20000300 	.word	0x20000300
 8001988:	20000250 	.word	0x20000250
 800198c:	200001c0 	.word	0x200001c0
 8001990:	20000258 	.word	0x20000258
 8001994:	20000308 	.word	0x20000308

08001998 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800199e:	f3ef 8310 	mrs	r3, PRIMASK
 80019a2:	617b      	str	r3, [r7, #20]
  return(result);
 80019a4:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80019aa:	4b5e      	ldr	r3, [pc, #376]	; (8001b24 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	22ca      	movs	r2, #202	; 0xca
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24
 80019b4:	4b5b      	ldr	r3, [pc, #364]	; (8001b24 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2253      	movs	r2, #83	; 0x53
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80019be:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	4b57      	ldr	r3, [pc, #348]	; (8001b24 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d0:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80019d2:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <HW_TS_RTC_Wakeup_Handler+0x190>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80019da:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019de:	4953      	ldr	r1, [pc, #332]	; (8001b2c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	330c      	adds	r3, #12
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d170      	bne.n	8001ad6 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80019f4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019f8:	494c      	ldr	r1, [pc, #304]	; (8001b2c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001a08:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001a0c:	4947      	ldr	r1, [pc, #284]	; (8001b2c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001a0e:	4613      	mov	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	440b      	add	r3, r1
 8001a18:	3310      	adds	r3, #16
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001a1e:	4b44      	ldr	r3, [pc, #272]	; (8001b30 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d04e      	beq.n	8001ac6 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001a28:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001a2c:	493f      	ldr	r1, [pc, #252]	; (8001b2c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	330d      	adds	r3, #13
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d125      	bne.n	8001a8e <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001a42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a46:	2101      	movs	r1, #1
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fde5 	bl	8001618 <UnlinkTimer>
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001a58:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001a5c:	4933      	ldr	r1, [pc, #204]	; (8001b2c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	440b      	add	r3, r1
 8001a68:	3304      	adds	r3, #4
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f9d0 	bl	8001e18 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a78:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	22ca      	movs	r2, #202	; 0xca
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
 8001a82:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2253      	movs	r2, #83	; 0x53
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
 8001a8c:	e013      	b.n	8001ab6 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001a98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 f931 	bl	8001d04 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	22ca      	movs	r2, #202	; 0xca
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2253      	movs	r2, #83	; 0x53
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	4619      	mov	r1, r3
 8001abe:	69b8      	ldr	r0, [r7, #24]
 8001ac0:	f000 fa30 	bl	8001f24 <HW_TS_RTC_Int_AppNot>
 8001ac4:	e024      	b.n	8001b10 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8001ac6:	f7ff fec9 	bl	800185c <RescheduleTimerList>
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f383 8810 	msr	PRIMASK, r3
 8001ad4:	e01c      	b.n	8001b10 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001ad6:	bf00      	nop
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f7      	beq.n	8001ad8 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001afc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001b00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	22ff      	movs	r2, #255	; 0xff
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001b1a:	bf00      	nop
}
 8001b1c:	3728      	adds	r7, #40	; 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000300 	.word	0x20000300
 8001b28:	20000250 	.word	0x20000250
 8001b2c:	200001c0 	.word	0x200001c0
 8001b30:	20000258 	.word	0x20000258
 8001b34:	58000800 	.word	0x58000800

08001b38 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001b44:	4a64      	ldr	r2, [pc, #400]	; (8001cd8 <HW_TS_Init+0x1a0>)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001b4a:	4b63      	ldr	r3, [pc, #396]	; (8001cd8 <HW_TS_Init+0x1a0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	22ca      	movs	r2, #202	; 0xca
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24
 8001b54:	4b60      	ldr	r3, [pc, #384]	; (8001cd8 <HW_TS_Init+0x1a0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2253      	movs	r2, #83	; 0x53
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001b5e:	4b5f      	ldr	r3, [pc, #380]	; (8001cdc <HW_TS_Init+0x1a4>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	4a5e      	ldr	r2, [pc, #376]	; (8001cdc <HW_TS_Init+0x1a4>)
 8001b64:	f043 0320 	orr.w	r3, r3, #32
 8001b68:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001b6a:	4b5c      	ldr	r3, [pc, #368]	; (8001cdc <HW_TS_Init+0x1a4>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f1c3 0304 	rsb	r3, r3, #4
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	4b58      	ldr	r3, [pc, #352]	; (8001ce0 <HW_TS_Init+0x1a8>)
 8001b7e:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001b80:	4b56      	ldr	r3, [pc, #344]	; (8001cdc <HW_TS_Init+0x1a4>)
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b88:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001b8c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	fa92 f2a2 	rbit	r2, r2
 8001b94:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	2a00      	cmp	r2, #0
 8001b9e:	d101      	bne.n	8001ba4 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	e003      	b.n	8001bac <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	fab2 f282 	clz	r2, r2
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	40d3      	lsrs	r3, r2
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b4b      	ldr	r3, [pc, #300]	; (8001ce4 <HW_TS_Init+0x1ac>)
 8001bb6:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001bb8:	4b48      	ldr	r3, [pc, #288]	; (8001cdc <HW_TS_Init+0x1a4>)
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <HW_TS_Init+0x1b0>)
 8001bca:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001bcc:	4b46      	ldr	r3, [pc, #280]	; (8001ce8 <HW_TS_Init+0x1b0>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	4a44      	ldr	r2, [pc, #272]	; (8001ce4 <HW_TS_Init+0x1ac>)
 8001bd4:	7812      	ldrb	r2, [r2, #0]
 8001bd6:	fb02 f303 	mul.w	r3, r2, r3
 8001bda:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001bde:	4a40      	ldr	r2, [pc, #256]	; (8001ce0 <HW_TS_Init+0x1a8>)
 8001be0:	7812      	ldrb	r2, [r2, #0]
 8001be2:	40d3      	lsrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d904      	bls.n	8001bfa <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001bf0:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <HW_TS_Init+0x1b4>)
 8001bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf6:	801a      	strh	r2, [r3, #0]
 8001bf8:	e003      	b.n	8001c02 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <HW_TS_Init+0x1b4>)
 8001c00:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001c02:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001c06:	f7ff fb85 	bl	8001314 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001c0a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001c0e:	f7ff fb6d 	bl	80012ec <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d143      	bne.n	8001ca0 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001c18:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <HW_TS_Init+0x1b8>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001c1e:	4b35      	ldr	r3, [pc, #212]	; (8001cf4 <HW_TS_Init+0x1bc>)
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	77fb      	strb	r3, [r7, #31]
 8001c2a:	e00c      	b.n	8001c46 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001c2c:	7ffa      	ldrb	r2, [r7, #31]
 8001c2e:	4932      	ldr	r1, [pc, #200]	; (8001cf8 <HW_TS_Init+0x1c0>)
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	440b      	add	r3, r1
 8001c3a:	330c      	adds	r3, #12
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001c40:	7ffb      	ldrb	r3, [r7, #31]
 8001c42:	3301      	adds	r3, #1
 8001c44:	77fb      	strb	r3, [r7, #31]
 8001c46:	7ffb      	ldrb	r3, [r7, #31]
 8001c48:	2b05      	cmp	r3, #5
 8001c4a:	d9ef      	bls.n	8001c2c <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HW_TS_Init+0x1c4>)
 8001c4e:	2206      	movs	r2, #6
 8001c50:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001c52:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <HW_TS_Init+0x1a0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <HW_TS_Init+0x1a0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c64:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <HW_TS_Init+0x1a0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HW_TS_Init+0x1a0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c7a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <HW_TS_Init+0x1c8>)
 8001c7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c82:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001c84:	2003      	movs	r0, #3
 8001c86:	f002 fd2a 	bl	80046de <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HW_TS_Init+0x1a0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HW_TS_Init+0x1a0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	e00a      	b.n	8001cb6 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HW_TS_Init+0x1a0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f002 fd06 	bl	80046c2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HW_TS_Init+0x1a0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	22ff      	movs	r2, #255	; 0xff
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2106      	movs	r1, #6
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f002 fcc2 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001cca:	2003      	movs	r0, #3
 8001ccc:	f002 fcd9 	bl	8004682 <HAL_NVIC_EnableIRQ>

  return;
 8001cd0:	bf00      	nop
}
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000300 	.word	0x20000300
 8001cdc:	40002800 	.word	0x40002800
 8001ce0:	20000304 	.word	0x20000304
 8001ce4:	20000305 	.word	0x20000305
 8001ce8:	20000306 	.word	0x20000306
 8001cec:	20000308 	.word	0x20000308
 8001cf0:	20000258 	.word	0x20000258
 8001cf4:	20000254 	.word	0x20000254
 8001cf8:	200001c0 	.word	0x200001c0
 8001cfc:	20000250 	.word	0x20000250
 8001d00:	58000800 	.word	0x58000800

08001d04 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d12:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d14:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001d16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d18:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001d1a:	2003      	movs	r0, #3
 8001d1c:	f002 fcbf 	bl	800469e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001d20:	4b37      	ldr	r3, [pc, #220]	; (8001e00 <HW_TS_Stop+0xfc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	22ca      	movs	r2, #202	; 0xca
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24
 8001d2a:	4b35      	ldr	r3, [pc, #212]	; (8001e00 <HW_TS_Stop+0xfc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2253      	movs	r2, #83	; 0x53
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001d34:	79fa      	ldrb	r2, [r7, #7]
 8001d36:	4933      	ldr	r1, [pc, #204]	; (8001e04 <HW_TS_Stop+0x100>)
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	330c      	adds	r3, #12
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d148      	bne.n	8001dde <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fc61 	bl	8001618 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001d56:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <HW_TS_Stop+0x104>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d5c:	7cfb      	ldrb	r3, [r7, #19]
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d135      	bne.n	8001dce <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001d62:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HW_TS_Stop+0x108>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6e:	d108      	bne.n	8001d82 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001d70:	bf00      	nop
 8001d72:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <HW_TS_Stop+0xfc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f7      	bne.n	8001d72 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001d82:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <HW_TS_Stop+0xfc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HW_TS_Stop+0xfc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d94:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001d96:	bf00      	nop
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HW_TS_Stop+0xfc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f7      	beq.n	8001d98 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HW_TS_Stop+0xfc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HW_TS_Stop+0xfc>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001dbc:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <HW_TS_Stop+0x10c>)
 8001dc0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001dc4:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001dc6:	2003      	movs	r0, #3
 8001dc8:	f002 fc89 	bl	80046de <HAL_NVIC_ClearPendingIRQ>
 8001dcc:	e007      	b.n	8001dde <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HW_TS_Stop+0x110>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	7cfa      	ldrb	r2, [r7, #19]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d001      	beq.n	8001dde <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001dda:	f7ff fd3f 	bl	800185c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HW_TS_Stop+0xfc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	22ff      	movs	r2, #255	; 0xff
 8001de6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001de8:	2003      	movs	r0, #3
 8001dea:	f002 fc4a 	bl	8004682 <HAL_NVIC_EnableIRQ>
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001df8:	bf00      	nop
}
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000300 	.word	0x20000300
 8001e04:	200001c0 	.word	0x200001c0
 8001e08:	20000250 	.word	0x20000250
 8001e0c:	40002800 	.word	0x40002800
 8001e10:	58000800 	.word	0x58000800
 8001e14:	20000251 	.word	0x20000251

08001e18 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001e24:	79fa      	ldrb	r2, [r7, #7]
 8001e26:	493b      	ldr	r1, [pc, #236]	; (8001f14 <HW_TS_Start+0xfc>)
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	330c      	adds	r3, #12
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d103      	bne.n	8001e44 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff60 	bl	8001d04 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e44:	f3ef 8310 	mrs	r3, PRIMASK
 8001e48:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e4e:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001e50:	2003      	movs	r0, #3
 8001e52:	f002 fc24 	bl	800469e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001e56:	4b30      	ldr	r3, [pc, #192]	; (8001f18 <HW_TS_Start+0x100>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	22ca      	movs	r2, #202	; 0xca
 8001e5e:	625a      	str	r2, [r3, #36]	; 0x24
 8001e60:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HW_TS_Start+0x100>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2253      	movs	r2, #83	; 0x53
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001e6a:	79fa      	ldrb	r2, [r7, #7]
 8001e6c:	4929      	ldr	r1, [pc, #164]	; (8001f14 <HW_TS_Start+0xfc>)
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	440b      	add	r3, r1
 8001e78:	330c      	adds	r3, #12
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001e7e:	79fa      	ldrb	r2, [r7, #7]
 8001e80:	4924      	ldr	r1, [pc, #144]	; (8001f14 <HW_TS_Start+0xfc>)
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	440b      	add	r3, r1
 8001e8c:	3308      	adds	r3, #8
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001e92:	79fa      	ldrb	r2, [r7, #7]
 8001e94:	491f      	ldr	r1, [pc, #124]	; (8001f14 <HW_TS_Start+0xfc>)
 8001e96:	4613      	mov	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	440b      	add	r3, r1
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fb0b 	bl	80014c4 <linkTimer>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HW_TS_Start+0x104>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HW_TS_Start+0x108>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	7c7a      	ldrb	r2, [r7, #17]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d002      	beq.n	8001eca <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001ec4:	f7ff fcca 	bl	800185c <RescheduleTimerList>
 8001ec8:	e013      	b.n	8001ef2 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001eca:	79fa      	ldrb	r2, [r7, #7]
 8001ecc:	4911      	ldr	r1, [pc, #68]	; (8001f14 <HW_TS_Start+0xfc>)
 8001ece:	4613      	mov	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	440b      	add	r3, r1
 8001ed8:	3308      	adds	r3, #8
 8001eda:	6819      	ldr	r1, [r3, #0]
 8001edc:	8a7b      	ldrh	r3, [r7, #18]
 8001ede:	79fa      	ldrb	r2, [r7, #7]
 8001ee0:	1ac9      	subs	r1, r1, r3
 8001ee2:	480c      	ldr	r0, [pc, #48]	; (8001f14 <HW_TS_Start+0xfc>)
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4403      	add	r3, r0
 8001eee:	3308      	adds	r3, #8
 8001ef0:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HW_TS_Start+0x100>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	22ff      	movs	r2, #255	; 0xff
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001efc:	2003      	movs	r0, #3
 8001efe:	f002 fbc0 	bl	8004682 <HAL_NVIC_EnableIRQ>
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001f0c:	bf00      	nop
}
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200001c0 	.word	0x200001c0
 8001f18:	20000300 	.word	0x20000300
 8001f1c:	20000250 	.word	0x20000250
 8001f20:	20000251 	.word	0x20000251

08001f24 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4798      	blx	r3

  return;
 8001f36:	bf00      	nop
}
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <toggleLed>:
 *      Author: patrick
 */

#include "led.h"

void toggleLed(uint8_t red, uint8_t green, uint8_t blue){
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	71bb      	strb	r3, [r7, #6]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	717b      	strb	r3, [r7, #5]
	if(red){
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <toggleLed+0x24>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2110      	movs	r1, #16
 8001f5c:	4814      	ldr	r0, [pc, #80]	; (8001fb0 <toggleLed+0x70>)
 8001f5e:	f002 ffb1 	bl	8004ec4 <HAL_GPIO_WritePin>
 8001f62:	e004      	b.n	8001f6e <toggleLed+0x2e>
	}
	else{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001f64:	2201      	movs	r2, #1
 8001f66:	2110      	movs	r1, #16
 8001f68:	4811      	ldr	r0, [pc, #68]	; (8001fb0 <toggleLed+0x70>)
 8001f6a:	f002 ffab 	bl	8004ec4 <HAL_GPIO_WritePin>
	}

	if(blue){
 8001f6e:	797b      	ldrb	r3, [r7, #5]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <toggleLed+0x40>
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2101      	movs	r1, #1
 8001f78:	480e      	ldr	r0, [pc, #56]	; (8001fb4 <toggleLed+0x74>)
 8001f7a:	f002 ffa3 	bl	8004ec4 <HAL_GPIO_WritePin>
 8001f7e:	e004      	b.n	8001f8a <toggleLed+0x4a>
		}
		else{
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8001f80:	2201      	movs	r2, #1
 8001f82:	2101      	movs	r1, #1
 8001f84:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <toggleLed+0x74>)
 8001f86:	f002 ff9d 	bl	8004ec4 <HAL_GPIO_WritePin>
		}

	if(green){
 8001f8a:	79bb      	ldrb	r3, [r7, #6]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <toggleLed+0x5c>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2102      	movs	r1, #2
 8001f94:	4807      	ldr	r0, [pc, #28]	; (8001fb4 <toggleLed+0x74>)
 8001f96:	f002 ff95 	bl	8004ec4 <HAL_GPIO_WritePin>
		}
		else{
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
		}
}
 8001f9a:	e004      	b.n	8001fa6 <toggleLed+0x66>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	4804      	ldr	r0, [pc, #16]	; (8001fb4 <toggleLed+0x74>)
 8001fa2:	f002 ff8f 	bl	8004ec4 <HAL_GPIO_WritePin>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	48001000 	.word	0x48001000
 8001fb4:	48000400 	.word	0x48000400

08001fb8 <LL_RCC_HSI48_Enable>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_RCC_HSI48_IsReady>:
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d101      	bne.n	8001ff2 <LL_RCC_HSI48_IsReady+0x18>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <LL_RCC_HSI48_IsReady+0x1a>
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_RCC_LSE_SetDriveCapability>:
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	f023 0218 	bic.w	r2, r3, #24
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002018:	4313      	orrs	r3, r2
 800201a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	3220      	adds	r2, #32
 800203c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002040:	4a05      	ldr	r2, [pc, #20]	; (8002058 <LL_HSEM_1StepLock+0x2c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d001      	beq.n	800204a <LL_HSEM_1StepLock+0x1e>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <LL_HSEM_1StepLock+0x20>
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	80000400 	.word	0x80000400

0800205c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  /**
	   * The OPTVERR flag is wrongly set at power on
	   * It shall be cleared before using any HAL_FLASH_xxx() api
	   */
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <main+0x50>)
 8002062:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002066:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002068:	f000 fec0 	bl	8002dec <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 800206c:	f000 fac4 	bl	80025f8 <_Z12Reset_Devicev>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002070:	f000 f81e 	bl	80020b0 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  Init_Exti( );
 8002074:	f000 faea 	bl	800264c <_Z9Init_Extiv>
  initClk();
 8002078:	f000 faf4 	bl	8002664 <_Z7initClkv>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800207c:	f7ff f8ca 	bl	8001214 <MX_GPIO_Init>
  MX_DMA_Init();
 8002080:	f7ff f893 	bl	80011aa <MX_DMA_Init>
  MX_TIM2_Init();
 8002084:	f000 fd68 	bl	8002b58 <MX_TIM2_Init>
  MX_TIM17_Init();
 8002088:	f000 fdb4 	bl	8002bf4 <MX_TIM17_Init>
  MX_ADC1_Init();
 800208c:	f7fe fc84 	bl	8000998 <MX_ADC1_Init>
  MX_USB_Device_Init();
 8002090:	f010 ff54 	bl	8012f3c <MX_USB_Device_Init>
  MX_RF_Init();
 8002094:	f000 fb02 	bl	800269c <MX_RF_Init>
  MX_RTC_Init();
 8002098:	f000 fb32 	bl	8002700 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800209c:	f00b fdbc 	bl	800dc18 <osKernelInitialize>
  MX_FREERTOS_Init();
 80020a0:	f7fe fed6 	bl	8000e50 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 80020a4:	f00b fdec 	bl	800dc80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <main+0x4c>
 80020aa:	bf00      	nop
 80020ac:	58004000 	.word	0x58004000

080020b0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b0ae      	sub	sp, #184	; 0xb8
 80020b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020ba:	2248      	movs	r2, #72	; 0x48
 80020bc:	2100      	movs	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f011 fca3 	bl	8013a0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
 80020d4:	615a      	str	r2, [r3, #20]
 80020d6:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	2250      	movs	r2, #80	; 0x50
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f011 fc93 	bl	8013a0a <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 80020e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f2:	f043 0310 	orr.w	r3, r3, #16
 80020f6:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002102:	f043 0303 	orr.w	r3, r3, #3
 8002106:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002108:	f003 fe5e 	bl	8005dc8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800210c:	2000      	movs	r0, #0
 800210e:	f7ff ff76 	bl	8001ffe <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002112:	4b47      	ldr	r3, [pc, #284]	; (8002230 <_Z18SystemClock_Configv+0x180>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800211a:	4a45      	ldr	r2, [pc, #276]	; (8002230 <_Z18SystemClock_Configv+0x180>)
 800211c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b43      	ldr	r3, [pc, #268]	; (8002230 <_Z18SystemClock_Configv+0x180>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800212e:	2307      	movs	r3, #7
 8002130:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002132:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002136:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002138:	2301      	movs	r3, #1
 800213a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800213c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002140:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002142:	2340      	movs	r3, #64	; 0x40
 8002144:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800214e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002152:	4618      	mov	r0, r3
 8002154:	f004 f9e8 	bl	8006528 <HAL_RCC_OscConfig>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	bf14      	ite	ne
 800215e:	2301      	movne	r3, #1
 8002160:	2300      	moveq	r3, #0
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8002168:	f000 f878 	bl	800225c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800216c:	236f      	movs	r3, #111	; 0x6f
 800216e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002170:	2302      	movs	r3, #2
 8002172:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002174:	2300      	movs	r3, #0
 8002176:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002178:	2300      	movs	r3, #0
 800217a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800217c:	2300      	movs	r3, #0
 800217e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002180:	2300      	movs	r3, #0
 8002182:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002184:	2300      	movs	r3, #0
 8002186:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002188:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800218c:	2101      	movs	r1, #1
 800218e:	4618      	mov	r0, r3
 8002190:	f004 fd56 	bl	8006c40 <HAL_RCC_ClockConfig>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	bf14      	ite	ne
 800219a:	2301      	movne	r3, #1
 800219c:	2300      	moveq	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 80021a4:	f000 f85a 	bl	800225c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80021a8:	f44f 5374 	mov.w	r3, #15616	; 0x3d00
 80021ac:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80021ae:	2306      	movs	r3, #6
 80021b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80021b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80021b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021bc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80021be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80021c2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80021c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80021ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021ce:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80021d0:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80021d4:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021da:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80021dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021e0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80021e2:	2300      	movs	r3, #0
 80021e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80021e6:	2310      	movs	r3, #16
 80021e8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	4618      	mov	r0, r3
 80021ee:	f005 f982 	bl	80074f6 <HAL_RCCEx_PeriphCLKConfig>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf14      	ite	ne
 80021f8:	2301      	movne	r3, #1
 80021fa:	2300      	moveq	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <_Z18SystemClock_Configv+0x156>
  {
    Error_Handler();
 8002202:	f000 f82b 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  //https://community.st.com/s/question/0D50X0000C0wdqe/stm32wb55-ble-hid?t=1591239574627
  LL_HSEM_1StepLock(HSEM, 5 );
 8002206:	2105      	movs	r1, #5
 8002208:	480a      	ldr	r0, [pc, #40]	; (8002234 <_Z18SystemClock_Configv+0x184>)
 800220a:	f7ff ff0f 	bl	800202c <LL_HSEM_1StepLock>
  LL_RCC_HSI48_Enable();
 800220e:	f7ff fed3 	bl	8001fb8 <LL_RCC_HSI48_Enable>
  while(!LL_RCC_HSI48_IsReady());
 8002212:	f7ff fee2 	bl	8001fda <LL_RCC_HSI48_IsReady>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	bf0c      	ite	eq
 800221c:	2301      	moveq	r3, #1
 800221e:	2300      	movne	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d000      	beq.n	8002228 <_Z18SystemClock_Configv+0x178>
 8002226:	e7f4      	b.n	8002212 <_Z18SystemClock_Configv+0x162>
  /* USER CODE END Smps */
}
 8002228:	bf00      	nop
 800222a:	37b8      	adds	r7, #184	; 0xb8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	58000400 	.word	0x58000400
 8002234:	58001400 	.word	0x58001400

08002238 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800224a:	f000 fdef 	bl	8002e2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40012c00 	.word	0x40012c00

0800225c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002260:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002262:	e7fe      	b.n	8002262 <Error_Handler+0x6>

08002264 <LL_EXTI_DisableIT_0_31>:
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800226c:	4b07      	ldr	r3, [pc, #28]	; (800228c <LL_EXTI_DisableIT_0_31+0x28>)
 800226e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	43db      	mvns	r3, r3
 8002276:	4905      	ldr	r1, [pc, #20]	; (800228c <LL_EXTI_DisableIT_0_31+0x28>)
 8002278:	4013      	ands	r3, r2
 800227a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	58000800 	.word	0x58000800

08002290 <LL_EXTI_DisableIT_32_63>:
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <LL_EXTI_DisableIT_32_63+0x28>)
 800229a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	4905      	ldr	r1, [pc, #20]	; (80022b8 <LL_EXTI_DisableIT_32_63+0x28>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	58000800 	.word	0x58000800

080022bc <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80022c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80022e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8002304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800230c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002314:	d101      	bne.n	800231a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800232a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800233a:	d101      	bne.n	8002340 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002358:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002360:	4313      	orrs	r3, r2
 8002362:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002370:	68fb      	ldr	r3, [r7, #12]
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	041b      	lsls	r3, r3, #16
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	605a      	str	r2, [r3, #4]
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	605a      	str	r2, [r3, #4]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	041b      	lsls	r3, r3, #16
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	615a      	str	r2, [r3, #20]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	615a      	str	r2, [r3, #20]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	609a      	str	r2, [r3, #8]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	619a      	str	r2, [r3, #24]
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <LL_HSEM_1StepLock>:
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	3220      	adds	r2, #32
 8002454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002458:	4a05      	ldr	r2, [pc, #20]	; (8002470 <LL_HSEM_1StepLock+0x2c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d001      	beq.n	8002462 <LL_HSEM_1StepLock+0x1e>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <LL_HSEM_1StepLock+0x20>
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	80000400 	.word	0x80000400

08002474 <_Z6myMainv>:

struct ADC_DATA adc_data;

//uint16_t adc_data[4];

int myMain(void){
 8002474:	b580      	push	{r7, lr}
 8002476:	b0b0      	sub	sp, #192	; 0xc0
 8002478:	af08      	add	r7, sp, #32
		powerMeasSetup();
		HAL_Delay(100);

	#endif
#else
	HAL_TIM_Base_Start_IT(&htim2);
 800247a:	4847      	ldr	r0, [pc, #284]	; (8002598 <_Z6myMainv+0x124>)
 800247c:	f005 fc74 	bl	8007d68 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, GPIO_PIN_SET);
 8002480:	2201      	movs	r2, #1
 8002482:	2110      	movs	r1, #16
 8002484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002488:	f002 fd1c 	bl	8004ec4 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim17);
 800248c:	4843      	ldr	r0, [pc, #268]	; (800259c <_Z6myMainv+0x128>)
 800248e:	f005 fbfd 	bl	8007c8c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8002492:	2100      	movs	r1, #0
 8002494:	4841      	ldr	r0, [pc, #260]	; (800259c <_Z6myMainv+0x128>)
 8002496:	f005 fd17 	bl	8007ec8 <HAL_TIM_PWM_Start>

	Stepper motor_base(STEPS, AIN1_1_GPIO_Port, AIN1_1_Pin,
			AIN2_1_GPIO_Port, AIN2_1_Pin,
			BIN1_1_GPIO_Port, BIN1_1_Pin,
			BIN2_1_GPIO_Port, BIN2_1_Pin, &adc_data.mag_base, NON_INVERTED);
 800249a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800249e:	2301      	movs	r3, #1
 80024a0:	9307      	str	r3, [sp, #28]
 80024a2:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <_Z6myMainv+0x12c>)
 80024a4:	9306      	str	r3, [sp, #24]
 80024a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024aa:	9305      	str	r3, [sp, #20]
 80024ac:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <_Z6myMainv+0x130>)
 80024ae:	9304      	str	r3, [sp, #16]
 80024b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024b4:	9303      	str	r3, [sp, #12]
 80024b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024ba:	9302      	str	r3, [sp, #8]
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024ce:	f640 0104 	movw	r1, #2052	; 0x804
 80024d2:	f7fd fe5f 	bl	8000194 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>
	motor_base.setSpeed(12);
 80024d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024da:	210c      	movs	r1, #12
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fd fe99 	bl	8000214 <_ZN7Stepper8setSpeedEl>
	motor_base.setStepBound(BASE_STEP_RANGE);
 80024e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024e6:	f641 010c 	movw	r1, #6156	; 0x180c
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fd feaa 	bl	8000244 <_ZN7Stepper12setStepBoundEl>

	Stepper motor_led(STEPS, AIN1_2_GPIO_Port, AIN1_2_Pin,
				AIN2_2_GPIO_Port, AIN2_2_Pin,
				BIN1_2_GPIO_Port, BIN1_2_Pin,
				BIN2_2_GPIO_Port, BIN2_2_Pin,  &adc_data.mag_led, INVERTED);
 80024f0:	1d38      	adds	r0, r7, #4
 80024f2:	23ff      	movs	r3, #255	; 0xff
 80024f4:	9307      	str	r3, [sp, #28]
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <_Z6myMainv+0x134>)
 80024f8:	9306      	str	r3, [sp, #24]
 80024fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024fe:	9305      	str	r3, [sp, #20]
 8002500:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <_Z6myMainv+0x130>)
 8002502:	9304      	str	r3, [sp, #16]
 8002504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002508:	9303      	str	r3, [sp, #12]
 800250a:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <_Z6myMainv+0x130>)
 800250c:	9302      	str	r3, [sp, #8]
 800250e:	2301      	movs	r3, #1
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2302      	movs	r3, #2
 800251a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800251e:	f640 0104 	movw	r1, #2052	; 0x804
 8002522:	f7fd fe37 	bl	8000194 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>
	motor_led.setSpeed(16);
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	2110      	movs	r1, #16
 800252a:	4618      	mov	r0, r3
 800252c:	f7fd fe72 	bl	8000214 <_ZN7Stepper8setSpeedEl>
	motor_led.setStepBound(LED_STEP_RANGE);
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	f647 1123 	movw	r1, #31011	; 0x7923
 8002536:	4618      	mov	r0, r3
 8002538:	f7fd fe84 	bl	8000244 <_ZN7Stepper12setStepBoundEl>

	uint32_t counter = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_data, 4);
 8002542:	2204      	movs	r2, #4
 8002544:	4916      	ldr	r1, [pc, #88]	; (80025a0 <_Z6myMainv+0x12c>)
 8002546:	4819      	ldr	r0, [pc, #100]	; (80025ac <_Z6myMainv+0x138>)
 8002548:	f000 fff0 	bl	800352c <HAL_ADC_Start_DMA>
	HAL_Delay(100);
 800254c:	2064      	movs	r0, #100	; 0x64
 800254e:	f000 fc99 	bl	8002e84 <HAL_Delay>

	while (1)
		  {
			counter += 1;
 8002552:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002556:	3301      	adds	r3, #1
 8002558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
//
//			startCal(0, 0, 0, 0, motor_base, motor_led);


			// apartment
			startCal(0.2, 0.98, 0.1, 0.3, motor_base, motor_led);
 800255c:	1d3a      	adds	r2, r7, #4
 800255e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	eddf 1a12 	vldr	s3, [pc, #72]	; 80025b0 <_Z6myMainv+0x13c>
 800256a:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80025b4 <_Z6myMainv+0x140>
 800256e:	eddf 0a12 	vldr	s1, [pc, #72]	; 80025b8 <_Z6myMainv+0x144>
 8002572:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80025bc <_Z6myMainv+0x148>
 8002576:	f7fe fca9 	bl	8000ecc <startCal>


//			startCal(0.0, 0.15, 0.05, 0.2, motor_base, motor_led);

			// turn off spotlight
			HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, GPIO_PIN_RESET);
 800257a:	2200      	movs	r2, #0
 800257c:	2110      	movs	r1, #16
 800257e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002582:	f002 fc9f 	bl	8004ec4 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8002586:	2100      	movs	r1, #0
 8002588:	4804      	ldr	r0, [pc, #16]	; (800259c <_Z6myMainv+0x128>)
 800258a:	f005 fd77 	bl	800807c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim17);
 800258e:	4803      	ldr	r0, [pc, #12]	; (800259c <_Z6myMainv+0x128>)
 8002590:	f005 fbc2 	bl	8007d18 <HAL_TIM_Base_Stop>



			while(1){};
 8002594:	e7fe      	b.n	8002594 <_Z6myMainv+0x120>
 8002596:	bf00      	nop
 8002598:	20004f6c 	.word	0x20004f6c
 800259c:	20004f20 	.word	0x20004f20
 80025a0:	2000030c 	.word	0x2000030c
 80025a4:	48000400 	.word	0x48000400
 80025a8:	2000030e 	.word	0x2000030e
 80025ac:	20004de0 	.word	0x20004de0
 80025b0:	3e99999a 	.word	0x3e99999a
 80025b4:	3dcccccd 	.word	0x3dcccccd
 80025b8:	3f7ae148 	.word	0x3f7ae148
 80025bc:	3e4ccccd 	.word	0x3e4ccccd

080025c0 <_Z18Reset_BackupDomainv>:




void Reset_BackupDomain( void )
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80025c4:	f7ff fe9c 	bl	8002300 <LL_RCC_IsActiveFlag_PINRST>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <_Z18Reset_BackupDomainv+0x1c>
 80025ce:	f7ff feaa 	bl	8002326 <LL_RCC_IsActiveFlag_SFTRST>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <_Z18Reset_BackupDomainv+0x1c>
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <_Z18Reset_BackupDomainv+0x1e>
 80025dc:	2300      	movs	r3, #0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <_Z18Reset_BackupDomainv+0x34>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80025e2:	f003 fbf1 	bl	8005dc8 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80025e6:	f003 fbef 	bl	8005dc8 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80025ea:	f7ff fe67 	bl	80022bc <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80025ee:	f7ff fe76 	bl	80022de <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
}
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <_Z12Reset_Devicev>:

void Reset_Device( void )
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 80025fc:	f7ff ffe0 	bl	80025c0 <_Z18Reset_BackupDomainv>

  Reset_IPCC();
 8002600:	f000 f802 	bl	8002608 <_Z10Reset_IPCCv>
#endif

  return;
 8002604:	bf00      	nop
}
 8002606:	bd80      	pop	{r7, pc}

08002608 <_Z10Reset_IPCCv>:

void Reset_IPCC( void )
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800260c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002610:	f7ff fe9c 	bl	800234c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8002614:	213f      	movs	r1, #63	; 0x3f
 8002616:	480c      	ldr	r0, [pc, #48]	; (8002648 <_Z10Reset_IPCCv+0x40>)
 8002618:	f7ff fef7 	bl	800240a <LL_C1_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800261c:	213f      	movs	r1, #63	; 0x3f
 800261e:	480a      	ldr	r0, [pc, #40]	; (8002648 <_Z10Reset_IPCCv+0x40>)
 8002620:	f7ff ff01 	bl	8002426 <LL_C2_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8002624:	213f      	movs	r1, #63	; 0x3f
 8002626:	4808      	ldr	r0, [pc, #32]	; (8002648 <_Z10Reset_IPCCv+0x40>)
 8002628:	f7ff fea9 	bl	800237e <LL_C1_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800262c:	213f      	movs	r1, #63	; 0x3f
 800262e:	4806      	ldr	r0, [pc, #24]	; (8002648 <_Z10Reset_IPCCv+0x40>)
 8002630:	f7ff fec8 	bl	80023c4 <LL_C2_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8002634:	213f      	movs	r1, #63	; 0x3f
 8002636:	4804      	ldr	r0, [pc, #16]	; (8002648 <_Z10Reset_IPCCv+0x40>)
 8002638:	f7ff feb3 	bl	80023a2 <LL_C1_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800263c:	213f      	movs	r1, #63	; 0x3f
 800263e:	4802      	ldr	r0, [pc, #8]	; (8002648 <_Z10Reset_IPCCv+0x40>)
 8002640:	f7ff fed2 	bl	80023e8 <LL_C2_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8002644:	bf00      	nop
}
 8002646:	bd80      	pop	{r7, pc}
 8002648:	58000c00 	.word	0x58000c00

0800264c <_Z9Init_Extiv>:

void Init_Exti( void )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f7ff fe06 	bl	8002264 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8002658:	f06f 0050 	mvn.w	r0, #80	; 0x50
 800265c:	f7ff fe18 	bl	8002290 <LL_EXTI_DisableIT_32_63>

  return;
 8002660:	bf00      	nop
}
 8002662:	bd80      	pop	{r7, pc}

08002664 <_Z7initClkv>:

  return;
}

void initClk (void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b092      	sub	sp, #72	; 0x48
 8002668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef st_oscInit = {0};
 800266a:	463b      	mov	r3, r7
 800266c:	2248      	movs	r2, #72	; 0x48
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f011 f9ca 	bl	8013a0a <memset>

  /* Get mutex */
  LL_HSEM_1StepLock(HSEM, 5);
 8002676:	2105      	movs	r1, #5
 8002678:	4807      	ldr	r0, [pc, #28]	; (8002698 <_Z7initClkv+0x34>)
 800267a:	f7ff fee3 	bl	8002444 <LL_HSEM_1StepLock>

  st_oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800267e:	2340      	movs	r3, #64	; 0x40
 8002680:	603b      	str	r3, [r7, #0]
  st_oscInit.HSI48State     = RCC_HSI48_ON; /* Used by USB */
 8002682:	2301      	movs	r3, #1
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_RCC_OscConfig(&st_oscInit);
 8002686:	463b      	mov	r3, r7
 8002688:	4618      	mov	r0, r3
 800268a:	f003 ff4d 	bl	8006528 <HAL_RCC_OscConfig>
}
 800268e:	bf00      	nop
 8002690:	3748      	adds	r7, #72	; 0x48
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	58001400 	.word	0x58001400

0800269c <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0

}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <LL_RCC_EnableRTC>:
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80026ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80026c2:	bf00      	nop
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80026d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80026e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4013      	ands	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026f0:	68fb      	ldr	r3, [r7, #12]
}
 80026f2:	bf00      	nop
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <MX_RTC_Init+0x4c>)
 8002706:	4a12      	ldr	r2, [pc, #72]	; (8002750 <MX_RTC_Init+0x50>)
 8002708:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <MX_RTC_Init+0x4c>)
 800270c:	2200      	movs	r2, #0
 800270e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002710:	4b0e      	ldr	r3, [pc, #56]	; (800274c <MX_RTC_Init+0x4c>)
 8002712:	220f      	movs	r2, #15
 8002714:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <MX_RTC_Init+0x4c>)
 8002718:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800271c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <MX_RTC_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <MX_RTC_Init+0x4c>)
 8002726:	2200      	movs	r2, #0
 8002728:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <MX_RTC_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <MX_RTC_Init+0x4c>)
 8002732:	2200      	movs	r2, #0
 8002734:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <MX_RTC_Init+0x4c>)
 8002738:	f005 f963 	bl	8007a02 <HAL_RTC_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002742:	f7ff fd8b 	bl	800225c <Error_Handler>
  }

}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20004eb0 	.word	0x20004eb0
 8002750:	40002800 	.word	0x40002800

08002754 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a06      	ldr	r2, [pc, #24]	; (800277c <HAL_RTC_MspInit+0x28>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d105      	bne.n	8002772 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002766:	f7ff ffa0 	bl	80026aa <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800276a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800276e:	f7ff ffad 	bl	80026cc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40002800 	.word	0x40002800

08002780 <MsgTask>:

char* endOfLine = "\n\r";

#ifndef SOLAR_SENSOR_NODE
void MsgTask(void *argument)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	struct MeasMsg msg;

	while(1){
		// grab message from queue
		osMessageQueueGet (msgQueueHandle, &msg, NULL, osWaitForever);
 8002788:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <MsgTask+0x28>)
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	f107 010c 	add.w	r1, r7, #12
 8002790:	f04f 33ff 	mov.w	r3, #4294967295
 8002794:	2200      	movs	r2, #0
 8002796:	f00c f811 	bl	800e7bc <osMessageQueueGet>

		// operate on said message
		measMsgReceivedFromNode(&msg);
 800279a:	f107 030c 	add.w	r3, r7, #12
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f804 	bl	80027ac <measMsgReceivedFromNode>
		osMessageQueueGet (msgQueueHandle, &msg, NULL, osWaitForever);
 80027a4:	e7f0      	b.n	8002788 <MsgTask+0x8>
 80027a6:	bf00      	nop
 80027a8:	20000294 	.word	0x20000294

080027ac <measMsgReceivedFromNode>:
	}
}
#endif

void measMsgReceivedFromNode(struct MeasMsg* msg){
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

	// send over UART if USB UART active
#if USB_UART_ACTIVE
	int8_t retry = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]

	memcpy((struct MeasMsg*) &serialMsg.measMsg, msg, sizeof(struct MeasMsg));
 80027b8:	2214      	movs	r2, #20
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4811      	ldr	r0, [pc, #68]	; (8002804 <measMsgReceivedFromNode+0x58>)
 80027be:	f011 f919 	bl	80139f4 <memcpy>

	/* the "-2" in the size is a hack-ish way of removing the byte padding for the python
	 	 data ingester doesn't screw up*/
	while(CDC_Transmit_FS((uint8_t* ) &serialMsg, sizeof(serialMsg)-2) != USBD_OK){
 80027c2:	e00d      	b.n	80027e0 <measMsgReceivedFromNode+0x34>
			if(retry == 5){
 80027c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d102      	bne.n	80027d2 <measMsgReceivedFromNode+0x26>
				retry = -1;
 80027cc:	23ff      	movs	r3, #255	; 0xff
 80027ce:	73fb      	strb	r3, [r7, #15]
				break;
 80027d0:	e00d      	b.n	80027ee <measMsgReceivedFromNode+0x42>
			}
			HAL_Delay(1);
 80027d2:	2001      	movs	r0, #1
 80027d4:	f000 fb56 	bl	8002e84 <HAL_Delay>
			retry+=1;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	3301      	adds	r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	73fb      	strb	r3, [r7, #15]
	while(CDC_Transmit_FS((uint8_t* ) &serialMsg, sizeof(serialMsg)-2) != USBD_OK){
 80027e0:	2116      	movs	r1, #22
 80027e2:	4808      	ldr	r0, [pc, #32]	; (8002804 <measMsgReceivedFromNode+0x58>)
 80027e4:	f010 fc68 	bl	80130b8 <CDC_Transmit_FS>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1ea      	bne.n	80027c4 <measMsgReceivedFromNode+0x18>

	// TODO check if power rating in table is lower than current one
	//		if so, replace and record current angle measurements

	// TODO if all expected nodes have replied, move to next Spotlight position
	osThreadFlagsSet (defaultTaskHandle, CAL_THREAD_FLAG);
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <measMsgReceivedFromNode+0x5c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2103      	movs	r1, #3
 80027f4:	4618      	mov	r0, r3
 80027f6:	f00b fb1f 	bl	800de38 <osThreadFlagsSet>
}
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000004 	.word	0x20000004
 8002808:	2000028c 	.word	0x2000028c

0800280c <LL_AHB3_GRP1_EnableClock>:
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800281a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4313      	orrs	r3, r2
 8002822:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002828:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4013      	ands	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002830:	68fb      	ldr	r3, [r7, #12]
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002842:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002846:	f7ff ffe1 	bl	800280c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	210f      	movs	r1, #15
 800284e:	f06f 0001 	mvn.w	r0, #1
 8002852:	f001 fefc 	bl	800464e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2105      	movs	r1, #5
 800285a:	202e      	movs	r0, #46	; 0x2e
 800285c:	f001 fef7 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002860:	202e      	movs	r0, #46	; 0x2e
 8002862:	f001 ff0e 	bl	8004682 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	210f      	movs	r1, #15
 800286a:	202c      	movs	r0, #44	; 0x2c
 800286c:	f001 feef 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8002870:	2200      	movs	r2, #0
 8002872:	210f      	movs	r1, #15
 8002874:	202d      	movs	r0, #45	; 0x2d
 8002876:	f001 feea 	bl	800464e <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}

0800287e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800288c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4313      	orrs	r3, r2
 8002894:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4013      	ands	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028a2:	68fb      	ldr	r3, [r7, #12]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08c      	sub	sp, #48	; 0x30
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80028c0:	2200      	movs	r2, #0
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	2019      	movs	r0, #25
 80028c6:	f001 fec2 	bl	800464e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80028ca:	2019      	movs	r0, #25
 80028cc:	f001 fed9 	bl	8004682 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80028d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80028d4:	f7ff ffd3 	bl	800287e <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028d8:	f107 0208 	add.w	r2, r7, #8
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	4611      	mov	r1, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f004 fb80 	bl	8006fe8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80028e8:	f004 fb68 	bl	8006fbc <HAL_RCC_GetPCLK2Freq>
 80028ec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	4a12      	ldr	r2, [pc, #72]	; (800293c <HAL_InitTick+0x8c>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0c9b      	lsrs	r3, r3, #18
 80028f8:	3b01      	subs	r3, #1
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <HAL_InitTick+0x90>)
 80028fe:	4a11      	ldr	r2, [pc, #68]	; (8002944 <HAL_InitTick+0x94>)
 8002900:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_InitTick+0x90>)
 8002904:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002908:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800290a:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <HAL_InitTick+0x90>)
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_InitTick+0x90>)
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_InitTick+0x90>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800291c:	4808      	ldr	r0, [pc, #32]	; (8002940 <HAL_InitTick+0x90>)
 800291e:	f005 f95e 	bl	8007bde <HAL_TIM_Base_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d104      	bne.n	8002932 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002928:	4805      	ldr	r0, [pc, #20]	; (8002940 <HAL_InitTick+0x90>)
 800292a:	f005 fa1d 	bl	8007d68 <HAL_TIM_Base_Start_IT>
 800292e:	4603      	mov	r3, r0
 8002930:	e000      	b.n	8002934 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
}
 8002934:	4618      	mov	r0, r3
 8002936:	3730      	adds	r7, #48	; 0x30
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	431bde83 	.word	0x431bde83
 8002940:	20004ed4 	.word	0x20004ed4
 8002944:	40012c00 	.word	0x40012c00

08002948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800294c:	e7fe      	b.n	800294c <NMI_Handler+0x4>

0800294e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002952:	e7fe      	b.n	8002952 <HardFault_Handler+0x4>

08002954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002958:	e7fe      	b.n	8002958 <MemManage_Handler+0x4>

0800295a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800295e:	e7fe      	b.n	800295e <BusFault_Handler+0x4>

08002960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002964:	e7fe      	b.n	8002964 <UsageFault_Handler+0x4>

08002966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002978:	4802      	ldr	r0, [pc, #8]	; (8002984 <DMA1_Channel1_IRQHandler+0x10>)
 800297a:	f001 ffe2 	bl	8004942 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20004e44 	.word	0x20004e44

08002988 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800298c:	4802      	ldr	r0, [pc, #8]	; (8002998 <ADC1_IRQHandler+0x10>)
 800298e:	f000 fe51 	bl	8003634 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20004de0 	.word	0x20004de0

0800299c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80029a0:	4802      	ldr	r0, [pc, #8]	; (80029ac <USB_LP_IRQHandler+0x10>)
 80029a2:	f002 fba8 	bl	80050f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20006514 	.word	0x20006514

080029b0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029b4:	4802      	ldr	r0, [pc, #8]	; (80029c0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80029b6:	f005 fbe9 	bl	800818c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20004ed4 	.word	0x20004ed4

080029c4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80029c8:	f002 fa94 	bl	8004ef4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 80029d4:	f7fe ffe0 	bl	8001998 <HW_TS_RTC_Wakeup_Handler>
}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}

080029dc <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 80029e0:	f010 f92c 	bl	8012c3c <HW_IPCC_Tx_Handler>
  return;
 80029e4:	bf00      	nop
}
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 80029ec:	f010 f8cc 	bl	8012b88 <HW_IPCC_Rx_Handler>
  return;
 80029f0:	bf00      	nop
}
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 80029f4:	b40c      	push	{r2, r3}
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	460a      	mov	r2, r1
 8002a00:	71fb      	strb	r3, [r7, #7]
 8002a02:	4613      	mov	r3, r2
 8002a04:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	b002      	add	sp, #8
 8002a12:	4770      	bx	lr

08002a14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002a18:	4b26      	ldr	r3, [pc, #152]	; (8002ab4 <SystemInit+0xa0>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002a1e:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <SystemInit+0xa0>)
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a24:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <SystemInit+0xa0>)
 8002a26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a42:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002a46:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a52:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <SystemInit+0xa4>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a64:	f023 0305 	bic.w	r3, r3, #5
 8002a68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a84:	4a0d      	ldr	r2, [pc, #52]	; (8002abc <SystemInit+0xa8>)
 8002a86:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8c:	4a0b      	ldr	r2, [pc, #44]	; (8002abc <SystemInit+0xa8>)
 8002a8e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	619a      	str	r2, [r3, #24]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	e000ed00 	.word	0xe000ed00
 8002ab8:	faf6fefb 	.word	0xfaf6fefb
 8002abc:	22041000 	.word	0x22041000

08002ac0 <LL_AHB2_GRP1_EnableClock>:
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002acc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ace:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002adc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <LL_APB1_GRP1_EnableClock>:
{
 8002af2:	b480      	push	{r7}
 8002af4:	b085      	sub	sp, #20
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4013      	ands	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_APB2_GRP1_EnableClock>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4013      	ands	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b48:	68fb      	ldr	r3, [r7, #12]
}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b5e:	f107 0310 	add.w	r3, r7, #16
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002b76:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <MX_TIM2_Init+0x98>)
 8002b78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <MX_TIM2_Init+0x98>)
 8002b80:	221f      	movs	r2, #31
 8002b82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b84:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <MX_TIM2_Init+0x98>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <MX_TIM2_Init+0x98>)
 8002b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <MX_TIM2_Init+0x98>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b98:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <MX_TIM2_Init+0x98>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b9e:	4814      	ldr	r0, [pc, #80]	; (8002bf0 <MX_TIM2_Init+0x98>)
 8002ba0:	f005 f81d 	bl	8007bde <HAL_TIM_Base_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002baa:	f7ff fb57 	bl	800225c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bb4:	f107 0310 	add.w	r3, r7, #16
 8002bb8:	4619      	mov	r1, r3
 8002bba:	480d      	ldr	r0, [pc, #52]	; (8002bf0 <MX_TIM2_Init+0x98>)
 8002bbc:	f005 fd16 	bl	80085ec <HAL_TIM_ConfigClockSource>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002bc6:	f7ff fb49 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4806      	ldr	r0, [pc, #24]	; (8002bf0 <MX_TIM2_Init+0x98>)
 8002bd8:	f006 f98e 	bl	8008ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002be2:	f7ff fb3b 	bl	800225c <Error_Handler>
  }

}
 8002be6:	bf00      	nop
 8002be8:	3720      	adds	r7, #32
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20004f6c 	.word	0x20004f6c

08002bf4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b094      	sub	sp, #80	; 0x50
 8002bf8:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	60da      	str	r2, [r3, #12]
 8002c08:	611a      	str	r2, [r3, #16]
 8002c0a:	615a      	str	r2, [r3, #20]
 8002c0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c0e:	463b      	mov	r3, r7
 8002c10:	2234      	movs	r2, #52	; 0x34
 8002c12:	2100      	movs	r1, #0
 8002c14:	4618      	mov	r0, r3
 8002c16:	f010 fef8 	bl	8013a0a <memset>

  htim17.Instance = TIM17;
 8002c1a:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <MX_TIM17_Init+0xec>)
 8002c1c:	4a31      	ldr	r2, [pc, #196]	; (8002ce4 <MX_TIM17_Init+0xf0>)
 8002c1e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3199;
 8002c20:	4b2f      	ldr	r3, [pc, #188]	; (8002ce0 <MX_TIM17_Init+0xec>)
 8002c22:	f640 427f 	movw	r2, #3199	; 0xc7f
 8002c26:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c28:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <MX_TIM17_Init+0xec>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8002c2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ce0 <MX_TIM17_Init+0xec>)
 8002c30:	2264      	movs	r2, #100	; 0x64
 8002c32:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c34:	4b2a      	ldr	r3, [pc, #168]	; (8002ce0 <MX_TIM17_Init+0xec>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002c3a:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <MX_TIM17_Init+0xec>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c40:	4b27      	ldr	r3, [pc, #156]	; (8002ce0 <MX_TIM17_Init+0xec>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002c46:	4826      	ldr	r0, [pc, #152]	; (8002ce0 <MX_TIM17_Init+0xec>)
 8002c48:	f004 ffc9 	bl	8007bde <HAL_TIM_Base_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002c52:	f7ff fb03 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002c56:	4822      	ldr	r0, [pc, #136]	; (8002ce0 <MX_TIM17_Init+0xec>)
 8002c58:	f005 f8d4 	bl	8007e04 <HAL_TIM_PWM_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002c62:	f7ff fafb 	bl	800225c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c66:	2360      	movs	r3, #96	; 0x60
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 100;
 8002c6a:	2364      	movs	r3, #100	; 0x64
 8002c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c72:	2300      	movs	r3, #0
 8002c74:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c86:	2200      	movs	r2, #0
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4815      	ldr	r0, [pc, #84]	; (8002ce0 <MX_TIM17_Init+0xec>)
 8002c8c:	f005 fb9e 	bl	80083cc <HAL_TIM_PWM_ConfigChannel>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002c96:	f7ff fae1 	bl	800225c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cb2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002cbc:	463b      	mov	r3, r7
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4807      	ldr	r0, [pc, #28]	; (8002ce0 <MX_TIM17_Init+0xec>)
 8002cc2:	f006 f979 	bl	8008fb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8002ccc:	f7ff fac6 	bl	800225c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 8002cd0:	4803      	ldr	r0, [pc, #12]	; (8002ce0 <MX_TIM17_Init+0xec>)
 8002cd2:	f000 f825 	bl	8002d20 <HAL_TIM_MspPostInit>

}
 8002cd6:	bf00      	nop
 8002cd8:	3750      	adds	r7, #80	; 0x50
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20004f20 	.word	0x20004f20
 8002ce4:	40014800 	.word	0x40014800

08002ce8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d103      	bne.n	8002d02 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f7ff fef9 	bl	8002af2 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002d00:	e008      	b.n	8002d14 <HAL_TIM_Base_MspInit+0x2c>
  else if(tim_baseHandle->Instance==TIM17)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a05      	ldr	r2, [pc, #20]	; (8002d1c <HAL_TIM_Base_MspInit+0x34>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d103      	bne.n	8002d14 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002d0c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002d10:	f7ff ff08 	bl	8002b24 <LL_APB2_GRP1_EnableClock>
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40014800 	.word	0x40014800

08002d20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	f107 030c 	add.w	r3, r7, #12
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM17)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0d      	ldr	r2, [pc, #52]	; (8002d74 <HAL_TIM_MspPostInit+0x54>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d113      	bne.n	8002d6a <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d42:	2002      	movs	r0, #2
 8002d44:	f7ff febc 	bl	8002ac0 <LL_AHB2_GRP1_EnableClock>
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8002d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8002d5a:	230e      	movs	r3, #14
 8002d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8002d5e:	f107 030c 	add.w	r3, r7, #12
 8002d62:	4619      	mov	r1, r3
 8002d64:	4804      	ldr	r0, [pc, #16]	; (8002d78 <HAL_TIM_MspPostInit+0x58>)
 8002d66:	f001 ff3d 	bl	8004be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002d6a:	bf00      	nop
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40014800 	.word	0x40014800
 8002d78:	48000400 	.word	0x48000400

08002d7c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002d7c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d7e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d80:	3304      	adds	r3, #4

08002d82 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d82:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d84:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002d86:	d3f9      	bcc.n	8002d7c <CopyDataInit>
  bx lr
 8002d88:	4770      	bx	lr

08002d8a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002d8a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002d8c:	3004      	adds	r0, #4

08002d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002d8e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002d90:	d3fb      	bcc.n	8002d8a <FillZerobss>
  bx lr
 8002d92:	4770      	bx	lr

08002d94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d94:	480c      	ldr	r0, [pc, #48]	; (8002dc8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002d96:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d98:	f7ff fe3c 	bl	8002a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002d9c:	480b      	ldr	r0, [pc, #44]	; (8002dcc <LoopForever+0x8>)
 8002d9e:	490c      	ldr	r1, [pc, #48]	; (8002dd0 <LoopForever+0xc>)
 8002da0:	4a0c      	ldr	r2, [pc, #48]	; (8002dd4 <LoopForever+0x10>)
 8002da2:	2300      	movs	r3, #0
 8002da4:	f7ff ffed 	bl	8002d82 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002da8:	480b      	ldr	r0, [pc, #44]	; (8002dd8 <LoopForever+0x14>)
 8002daa:	490c      	ldr	r1, [pc, #48]	; (8002ddc <LoopForever+0x18>)
 8002dac:	2300      	movs	r3, #0
 8002dae:	f7ff ffee 	bl	8002d8e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002db2:	480b      	ldr	r0, [pc, #44]	; (8002de0 <LoopForever+0x1c>)
 8002db4:	490b      	ldr	r1, [pc, #44]	; (8002de4 <LoopForever+0x20>)
 8002db6:	2300      	movs	r3, #0
 8002db8:	f7ff ffe9 	bl	8002d8e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002dbc:	f010 fdf6 	bl	80139ac <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002dc0:	f7ff f94c 	bl	800205c <main>

08002dc4 <LoopForever>:

LoopForever:
  b LoopForever
 8002dc4:	e7fe      	b.n	8002dc4 <LoopForever>
 8002dc6:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002dc8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002dcc:	20000004 	.word	0x20000004
 8002dd0:	200001c0 	.word	0x200001c0
 8002dd4:	08013f90 	.word	0x08013f90
  INIT_BSS _sbss, _ebss
 8002dd8:	20000270 	.word	0x20000270
 8002ddc:	20006788 	.word	0x20006788
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002de0:	200300e0 	.word	0x200300e0
 8002de4:	20030b57 	.word	0x20030b57

08002de8 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002de8:	e7fe      	b.n	8002de8 <AES1_IRQHandler>
	...

08002dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df6:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <HAL_Init+0x3c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a0b      	ldr	r2, [pc, #44]	; (8002e28 <HAL_Init+0x3c>)
 8002dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e00:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e02:	2003      	movs	r0, #3
 8002e04:	f001 fc18 	bl	8004638 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7ff fd51 	bl	80028b0 <HAL_InitTick>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	71fb      	strb	r3, [r7, #7]
 8002e18:	e001      	b.n	8002e1e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e1a:	f7ff fd10 	bl	800283e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	58004000 	.word	0x58004000

08002e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_IncTick+0x20>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_IncTick+0x24>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <HAL_IncTick+0x24>)
 8002e3e:	6013      	str	r3, [r2, #0]
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000024 	.word	0x20000024
 8002e50:	20004fb8 	.word	0x20004fb8

08002e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return uwTick;
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <HAL_GetTick+0x14>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20004fb8 	.word	0x20004fb8

08002e6c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <HAL_GetTickPrio+0x14>)
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000020 	.word	0x20000020

08002e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002e8c:	f7ff ffe2 	bl	8002e54 <HAL_GetTick>
 8002e90:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d005      	beq.n	8002eaa <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_Delay+0x40>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8002eaa:	bf00      	nop
 8002eac:	f7ff ffd2 	bl	8002e54 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d8f7      	bhi.n	8002eac <HAL_Delay+0x28>
    {
    }
  }
 8002ebc:	bf00      	nop
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000024 	.word	0x20000024

08002ec8 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
#endif
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	609a      	str	r2, [r3, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3360      	adds	r3, #96	; 0x60
 8002f42:	461a      	mov	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <LL_ADC_SetOffset+0x44>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	03fff000 	.word	0x03fff000

08002f78 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3360      	adds	r3, #96	; 0x60
 8002f86:	461a      	mov	r2, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3360      	adds	r3, #96	; 0x60
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002fce:	bf00      	nop
 8002fd0:	371c      	adds	r7, #28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ff2:	2300      	movs	r3, #0
#endif
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3330      	adds	r3, #48	; 0x30
 8003010:	461a      	mov	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	0a1b      	lsrs	r3, r3, #8
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	f003 030c 	and.w	r3, r3, #12
 800301c:	4413      	add	r3, r2
 800301e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 031f 	and.w	r3, r3, #31
 800302a:	211f      	movs	r1, #31
 800302c:	fa01 f303 	lsl.w	r3, r1, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	401a      	ands	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	0e9b      	lsrs	r3, r3, #26
 8003038:	f003 011f 	and.w	r1, r3, #31
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	fa01 f303 	lsl.w	r3, r1, r3
 8003046:	431a      	orrs	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 800304c:	bf00      	nop
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0303 	and.w	r3, r3, #3
#endif
}
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003080:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800309a:	b480      	push	{r7}
 800309c:	b087      	sub	sp, #28
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3314      	adds	r3, #20
 80030aa:	461a      	mov	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	0e5b      	lsrs	r3, r3, #25
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	4413      	add	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	0d1b      	lsrs	r3, r3, #20
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	2107      	movs	r1, #7
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	401a      	ands	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	0d1b      	lsrs	r3, r3, #20
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	fa01 f303 	lsl.w	r3, r1, r3
 80030de:	431a      	orrs	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 80030e4:	bf00      	nop
 80030e6:	371c      	adds	r7, #28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003108:	43db      	mvns	r3, r3
 800310a:	401a      	ands	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f003 0318 	and.w	r3, r3, #24
 8003112:	4908      	ldr	r1, [pc, #32]	; (8003134 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003114:	40d9      	lsrs	r1, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	400b      	ands	r3, r1
 800311a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311e:	431a      	orrs	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	0007ffff 	.word	0x0007ffff

08003138 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003148:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6093      	str	r3, [r2, #8]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800316c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003170:	d101      	bne.n	8003176 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003194:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003198:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031c0:	d101      	bne.n	80031c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031e8:	f043 0201 	orr.w	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <LL_ADC_IsEnabled+0x18>
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <LL_ADC_IsEnabled+0x1a>
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003232:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003236:	f043 0204 	orr.w	r2, r3, #4
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b04      	cmp	r3, #4
 800325c:	d101      	bne.n	8003262 <LL_ADC_REG_IsConversionOngoing+0x18>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b08      	cmp	r3, #8
 8003282:	d101      	bne.n	8003288 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e12c      	b.n	8003510 <HAL_ADC_Init+0x278>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d109      	bne.n	80032d8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7fd fbfd 	bl	8000ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff3d 	bl	800315c <LL_ADC_IsDeepPowerDownEnabled>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff ff23 	bl	8003138 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff ff58 	bl	80031ac <LL_ADC_IsInternalRegulatorEnabled>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d113      	bne.n	800332a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff ff3c 	bl	8003184 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800330c:	4b82      	ldr	r3, [pc, #520]	; (8003518 <HAL_ADC_Init+0x280>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	099b      	lsrs	r3, r3, #6
 8003312:	4a82      	ldr	r2, [pc, #520]	; (800351c <HAL_ADC_Init+0x284>)
 8003314:	fba2 2303 	umull	r2, r3, r2, r3
 8003318:	099b      	lsrs	r3, r3, #6
 800331a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800331c:	e002      	b.n	8003324 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	3b01      	subs	r3, #1
 8003322:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f9      	bne.n	800331e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff ff3c 	bl	80031ac <LL_ADC_IsInternalRegulatorEnabled>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10d      	bne.n	8003356 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	f043 0210 	orr.w	r2, r3, #16
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334a:	f043 0201 	orr.w	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ff75 	bl	800324a <LL_ADC_REG_IsConversionOngoing>
 8003360:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 80c7 	bne.w	80034fe <HAL_ADC_Init+0x266>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 80c3 	bne.w	80034fe <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003380:	f043 0202 	orr.w	r2, r3, #2
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff35 	bl	80031fc <LL_ADC_IsEnabled>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003398:	4861      	ldr	r0, [pc, #388]	; (8003520 <HAL_ADC_Init+0x288>)
 800339a:	f7ff ff2f 	bl	80031fc <LL_ADC_IsEnabled>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4619      	mov	r1, r3
 80033aa:	485e      	ldr	r0, [pc, #376]	; (8003524 <HAL_ADC_Init+0x28c>)
 80033ac:	f7ff fd8c 	bl	8002ec8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	7e5b      	ldrb	r3, [r3, #25]
 80033b4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033ba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80033c0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80033c6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ce:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80033d0:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d106      	bne.n	80033f0 <HAL_ADC_Init+0x158>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	3b01      	subs	r3, #1
 80033e8:	045b      	lsls	r3, r3, #17
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d009      	beq.n	800340c <HAL_ADC_Init+0x174>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	4b45      	ldr	r3, [pc, #276]	; (8003528 <HAL_ADC_Init+0x290>)
 8003414:	4013      	ands	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	69b9      	ldr	r1, [r7, #24]
 800341c:	430b      	orrs	r3, r1
 800341e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff10 	bl	800324a <LL_ADC_REG_IsConversionOngoing>
 800342a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ff1d 	bl	8003270 <LL_ADC_INJ_IsConversionOngoing>
 8003436:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d13d      	bne.n	80034ba <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d13a      	bne.n	80034ba <HAL_ADC_Init+0x222>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003448:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003450:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003460:	f023 0302 	bic.w	r3, r3, #2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	69b9      	ldr	r1, [r7, #24]
 800346a:	430b      	orrs	r3, r1
 800346c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003474:	2b01      	cmp	r3, #1
 8003476:	d118      	bne.n	80034aa <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003482:	f023 0304 	bic.w	r3, r3, #4
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800348e:	4311      	orrs	r1, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003494:	4311      	orrs	r1, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800349a:	430a      	orrs	r2, r1
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	611a      	str	r2, [r3, #16]
 80034a8:	e007      	b.n	80034ba <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d10c      	bne.n	80034dc <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	f023 010f 	bic.w	r1, r3, #15
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	1e5a      	subs	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
 80034da:	e007      	b.n	80034ec <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 020f 	bic.w	r2, r2, #15
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	f023 0303 	bic.w	r3, r3, #3
 80034f4:	f043 0201 	orr.w	r2, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	655a      	str	r2, [r3, #84]	; 0x54
 80034fc:	e007      	b.n	800350e <HAL_ADC_Init+0x276>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003502:	f043 0210 	orr.w	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800350e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	2000001c 	.word	0x2000001c
 800351c:	053e2d63 	.word	0x053e2d63
 8003520:	50040000 	.word	0x50040000
 8003524:	50040300 	.word	0x50040300
 8003528:	fff0c007 	.word	0xfff0c007

0800352c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fe84 	bl	800324a <LL_ADC_REG_IsConversionOngoing>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d167      	bne.n	8003618 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_ADC_Start_DMA+0x2a>
 8003552:	2302      	movs	r3, #2
 8003554:	e063      	b.n	800361e <HAL_ADC_Start_DMA+0xf2>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fe0a 	bl	8004178 <ADC_Enable>
 8003564:	4603      	mov	r3, r0
 8003566:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d14f      	bne.n	800360e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003592:	f023 0206 	bic.w	r2, r3, #6
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	659a      	str	r2, [r3, #88]	; 0x58
 800359a:	e002      	b.n	80035a2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a6:	4a20      	ldr	r2, [pc, #128]	; (8003628 <HAL_ADC_Start_DMA+0xfc>)
 80035a8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ae:	4a1f      	ldr	r2, [pc, #124]	; (800362c <HAL_ADC_Start_DMA+0x100>)
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b6:	4a1e      	ldr	r2, [pc, #120]	; (8003630 <HAL_ADC_Start_DMA+0x104>)
 80035b8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	221c      	movs	r2, #28
 80035c0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0210 	orr.w	r2, r2, #16
 80035d8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0201 	orr.w	r2, r2, #1
 80035e8:	60da      	str	r2, [r3, #12]
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3340      	adds	r3, #64	; 0x40
 80035f4:	4619      	mov	r1, r3
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f001 f927 	bl	800484c <HAL_DMA_Start_IT>
 80035fe:	4603      	mov	r3, r0
 8003600:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fe0b 	bl	8003222 <LL_ADC_REG_StartConversion>
 800360c:	e006      	b.n	800361c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003616:	e001      	b.n	800361c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003618:	2302      	movs	r3, #2
 800361a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800361c:	7dfb      	ldrb	r3, [r7, #23]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	0800426d 	.word	0x0800426d
 800362c:	08004345 	.word	0x08004345
 8003630:	08004361 	.word	0x08004361

08003634 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800363c:	2300      	movs	r3, #0
 800363e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d017      	beq.n	800368a <HAL_ADC_IRQHandler+0x56>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d012      	beq.n	800368a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	d105      	bne.n	800367c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 feb1 	bl	80043e4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2202      	movs	r2, #2
 8003688:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d004      	beq.n	800369e <HAL_ADC_IRQHandler+0x6a>
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d05d      	beq.n	8003764 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d058      	beq.n	8003764 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d105      	bne.n	80036ca <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fc83 	bl	8002fda <LL_ADC_REG_IsTriggerSourceSWStart>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d03d      	beq.n	8003756 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if defined (ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e8:	d035      	beq.n	8003756 <HAL_ADC_IRQHandler+0x122>
#endif
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d12e      	bne.n	8003756 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fda4 	bl	800324a <LL_ADC_REG_IsConversionOngoing>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d11a      	bne.n	800373e <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 020c 	bic.w	r2, r2, #12
 8003716:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d112      	bne.n	8003756 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003734:	f043 0201 	orr.w	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	655a      	str	r2, [r3, #84]	; 0x54
 800373c:	e00b      	b.n	8003756 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003742:	f043 0210 	orr.w	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f922 	bl	80039a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	220c      	movs	r2, #12
 8003762:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d004      	beq.n	8003778 <HAL_ADC_IRQHandler+0x144>
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d109      	bne.n	800378c <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800377e:	2b00      	cmp	r3, #0
 8003780:	d074      	beq.n	800386c <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d06f      	beq.n	800386c <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fc63 	bl	8003074 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80037ae:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fc10 	bl	8002fda <LL_ADC_REG_IsTriggerSourceSWStart>
 80037ba:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d049      	beq.n	800385e <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d007      	beq.n	80037e4 <HAL_ADC_IRQHandler+0x1b0>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d041      	beq.n	800385e <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d13c      	bne.n	800385e <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	d135      	bne.n	800385e <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d12e      	bne.n	800385e <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff fd33 	bl	8003270 <LL_ADC_INJ_IsConversionOngoing>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d11a      	bne.n	8003846 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800381e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003824:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003834:	2b00      	cmp	r3, #0
 8003836:	d112      	bne.n	800385e <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383c:	f043 0201 	orr.w	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
 8003844:	e00b      	b.n	800385e <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384a:	f043 0210 	orr.w	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	f043 0201 	orr.w	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fd98 	bl	8004394 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2260      	movs	r2, #96	; 0x60
 800386a:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b00      	cmp	r3, #0
 8003874:	d011      	beq.n	800389a <HAL_ADC_IRQHandler+0x266>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00c      	beq.n	800389a <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003884:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f89b 	bl	80039c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2280      	movs	r2, #128	; 0x80
 8003898:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d012      	beq.n	80038ca <HAL_ADC_IRQHandler+0x296>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00d      	beq.n	80038ca <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fd7e 	bl	80043bc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d012      	beq.n	80038fa <HAL_ADC_IRQHandler+0x2c6>
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00d      	beq.n	80038fa <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fd70 	bl	80043d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b00      	cmp	r3, #0
 8003902:	d02b      	beq.n	800395c <HAL_ADC_IRQHandler+0x328>
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b00      	cmp	r3, #0
 800390c:	d026      	beq.n	800395c <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003912:	2b00      	cmp	r3, #0
 8003914:	d102      	bne.n	800391c <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8003916:	2301      	movs	r3, #1
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	e009      	b.n	8003930 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fb99 	bl	8003058 <LL_ADC_REG_GetDMATransfer>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 800392c:	2301      	movs	r3, #1
 800392e:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d10e      	bne.n	8003954 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	f043 0202 	orr.w	r2, r3, #2
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f844 	bl	80039dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2210      	movs	r2, #16
 800395a:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003962:	2b00      	cmp	r3, #0
 8003964:	d018      	beq.n	8003998 <HAL_ADC_IRQHandler+0x364>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396c:	2b00      	cmp	r3, #0
 800396e:	d013      	beq.n	8003998 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003974:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	f043 0208 	orr.w	r2, r3, #8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003990:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fd08 	bl	80043a8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8003998:	bf00      	nop
 800399a:	3720      	adds	r7, #32
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b0b6      	sub	sp, #216	; 0xd8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x22>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e39e      	b.n	8004150 <HAL_ADC_ConfigChannel+0x760>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fc13 	bl	800324a <LL_ADC_REG_IsConversionOngoing>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f040 8383 	bne.w	8004132 <HAL_ADC_ConfigChannel+0x742>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f7ff fae1 	bl	8003000 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fc01 	bl	800324a <LL_ADC_REG_IsConversionOngoing>
 8003a48:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff fc0d 	bl	8003270 <LL_ADC_INJ_IsConversionOngoing>
 8003a56:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f040 81a6 	bne.w	8003db0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f040 81a1 	bne.w	8003db0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f7ff fb0d 	bl	800309a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	08db      	lsrs	r3, r3, #3
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6919      	ldr	r1, [r3, #16]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ab2:	f7ff fa3d 	bl	8002f30 <LL_ADC_SetOffset>
 8003ab6:	e17b      	b.n	8003db0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2100      	movs	r1, #0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fa5a 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10a      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0xf4>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff fa4f 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003ada:	4603      	mov	r3, r0
 8003adc:	0e9b      	lsrs	r3, r3, #26
 8003ade:	f003 021f 	and.w	r2, r3, #31
 8003ae2:	e01e      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x132>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fa44 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003afa:	fa93 f3a3 	rbit	r3, r3
 8003afe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8003b02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003b0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8003b12:	2320      	movs	r3, #32
 8003b14:	e004      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8003b16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d105      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x14a>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	0e9b      	lsrs	r3, r3, #26
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	e018      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x17c>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b46:	fa93 f3a3 	rbit	r3, r3
 8003b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003b56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003b5e:	2320      	movs	r3, #32
 8003b60:	e004      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8003b62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b66:	fab3 f383 	clz	r3, r3
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d106      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2200      	movs	r2, #0
 8003b76:	2100      	movs	r1, #0
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff fa13 	bl	8002fa4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2101      	movs	r1, #1
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff f9f7 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10a      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x1ba>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2101      	movs	r1, #1
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff f9ec 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	0e9b      	lsrs	r3, r3, #26
 8003ba4:	f003 021f 	and.w	r2, r3, #31
 8003ba8:	e01e      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x1f8>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff f9e1 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003bc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003bd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003bd8:	2320      	movs	r3, #32
 8003bda:	e004      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003bdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d105      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x210>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	0e9b      	lsrs	r3, r3, #26
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	e018      	b.n	8003c32 <HAL_ADC_ConfigChannel+0x242>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c0c:	fa93 f3a3 	rbit	r3, r3
 8003c10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003c14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003c1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003c24:	2320      	movs	r3, #32
 8003c26:	e004      	b.n	8003c32 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003c28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c2c:	fab3 f383 	clz	r3, r3
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d106      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff f9b0 	bl	8002fa4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2102      	movs	r1, #2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff f994 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10a      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x280>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2102      	movs	r1, #2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff f989 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003c66:	4603      	mov	r3, r0
 8003c68:	0e9b      	lsrs	r3, r3, #26
 8003c6a:	f003 021f 	and.w	r2, r3, #31
 8003c6e:	e01e      	b.n	8003cae <HAL_ADC_ConfigChannel+0x2be>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2102      	movs	r1, #2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff f97e 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003c8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003c96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8003c9e:	2320      	movs	r3, #32
 8003ca0:	e004      	b.n	8003cac <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003ca2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ca6:	fab3 f383 	clz	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d105      	bne.n	8003cc6 <HAL_ADC_ConfigChannel+0x2d6>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	0e9b      	lsrs	r3, r3, #26
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	e016      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x304>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003cd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003ce6:	2320      	movs	r3, #32
 8003ce8:	e004      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003cea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d106      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2102      	movs	r1, #2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff f94f 	bl	8002fa4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2103      	movs	r1, #3
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff f933 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x342>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2103      	movs	r1, #3
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff f928 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	0e9b      	lsrs	r3, r3, #26
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	e017      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x372>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2103      	movs	r1, #3
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff f91d 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d44:	fa93 f3a3 	rbit	r3, r3
 8003d48:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d4c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003d54:	2320      	movs	r3, #32
 8003d56:	e003      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d5a:	fab3 f383 	clz	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d105      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x38a>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	0e9b      	lsrs	r3, r3, #26
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	e011      	b.n	8003d9e <HAL_ADC_ConfigChannel+0x3ae>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003d92:	2320      	movs	r3, #32
 8003d94:	e003      	b.n	8003d9e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d106      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2200      	movs	r2, #0
 8003da8:	2103      	movs	r1, #3
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff f8fa 	bl	8002fa4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff fa21 	bl	80031fc <LL_ADC_IsEnabled>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f040 81c1 	bne.w	8004144 <HAL_ADC_ConfigChannel+0x754>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6819      	ldr	r1, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f7ff f98e 	bl	80030f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4a8e      	ldr	r2, [pc, #568]	; (8004014 <HAL_ADC_ConfigChannel+0x624>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	f040 8130 	bne.w	8004040 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10b      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x418>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	0e9b      	lsrs	r3, r3, #26
 8003df6:	3301      	adds	r3, #1
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	2b09      	cmp	r3, #9
 8003dfe:	bf94      	ite	ls
 8003e00:	2301      	movls	r3, #1
 8003e02:	2300      	movhi	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	e019      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x44c>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e18:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003e20:	2320      	movs	r3, #32
 8003e22:	e003      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003e24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e26:	fab3 f383 	clz	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	f003 031f 	and.w	r3, r3, #31
 8003e32:	2b09      	cmp	r3, #9
 8003e34:	bf94      	ite	ls
 8003e36:	2301      	movls	r3, #1
 8003e38:	2300      	movhi	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d079      	beq.n	8003f34 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d107      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x46c>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	0e9b      	lsrs	r3, r3, #26
 8003e52:	3301      	adds	r3, #1
 8003e54:	069b      	lsls	r3, r3, #26
 8003e56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e5a:	e015      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x498>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e64:	fa93 f3a3 	rbit	r3, r3
 8003e68:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003e74:	2320      	movs	r3, #32
 8003e76:	e003      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e7a:	fab3 f383 	clz	r3, r3
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	3301      	adds	r3, #1
 8003e82:	069b      	lsls	r3, r3, #26
 8003e84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d109      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x4b8>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	0e9b      	lsrs	r3, r3, #26
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea6:	e017      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x4e8>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb0:	fa93 f3a3 	rbit	r3, r3
 8003eb4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eb8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003ec0:	2320      	movs	r3, #32
 8003ec2:	e003      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec6:	fab3 f383 	clz	r3, r3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	3301      	adds	r3, #1
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed8:	ea42 0103 	orr.w	r1, r2, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x50e>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	0e9b      	lsrs	r3, r3, #26
 8003eee:	3301      	adds	r3, #1
 8003ef0:	f003 021f 	and.w	r2, r3, #31
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4413      	add	r3, r2
 8003efa:	051b      	lsls	r3, r3, #20
 8003efc:	e018      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x540>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f06:	fa93 f3a3 	rbit	r3, r3
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003f16:	2320      	movs	r3, #32
 8003f18:	e003      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1c:	fab3 f383 	clz	r3, r3
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	3301      	adds	r3, #1
 8003f24:	f003 021f 	and.w	r2, r3, #31
 8003f28:	4613      	mov	r3, r2
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	4413      	add	r3, r2
 8003f2e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f30:	430b      	orrs	r3, r1
 8003f32:	e080      	b.n	8004036 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d107      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x560>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	0e9b      	lsrs	r3, r3, #26
 8003f46:	3301      	adds	r3, #1
 8003f48:	069b      	lsls	r3, r3, #26
 8003f4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f4e:	e015      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x58c>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f58:	fa93 f3a3 	rbit	r3, r3
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003f68:	2320      	movs	r3, #32
 8003f6a:	e003      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	fab3 f383 	clz	r3, r3
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	3301      	adds	r3, #1
 8003f76:	069b      	lsls	r3, r3, #26
 8003f78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d109      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x5ac>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	0e9b      	lsrs	r3, r3, #26
 8003f8e:	3301      	adds	r3, #1
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	2101      	movs	r1, #1
 8003f96:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9a:	e017      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x5dc>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	fa93 f3a3 	rbit	r3, r3
 8003fa8:	61fb      	str	r3, [r7, #28]
  return result;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003fb4:	2320      	movs	r3, #32
 8003fb6:	e003      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	fab3 f383 	clz	r3, r3
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fcc:	ea42 0103 	orr.w	r1, r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10d      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x608>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	0e9b      	lsrs	r3, r3, #26
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	f003 021f 	and.w	r2, r3, #31
 8003fe8:	4613      	mov	r3, r2
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	4413      	add	r3, r2
 8003fee:	3b1e      	subs	r3, #30
 8003ff0:	051b      	lsls	r3, r3, #20
 8003ff2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	e01d      	b.n	8004034 <HAL_ADC_ConfigChannel+0x644>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	fa93 f3a3 	rbit	r3, r3
 8004004:	613b      	str	r3, [r7, #16]
  return result;
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d103      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8004010:	2320      	movs	r3, #32
 8004012:	e005      	b.n	8004020 <HAL_ADC_ConfigChannel+0x630>
 8004014:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	fab3 f383 	clz	r3, r3
 800401e:	b2db      	uxtb	r3, r3
 8004020:	3301      	adds	r3, #1
 8004022:	f003 021f 	and.w	r2, r3, #31
 8004026:	4613      	mov	r3, r2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4413      	add	r3, r2
 800402c:	3b1e      	subs	r3, #30
 800402e:	051b      	lsls	r3, r3, #20
 8004030:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004034:	430b      	orrs	r3, r1
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	6892      	ldr	r2, [r2, #8]
 800403a:	4619      	mov	r1, r3
 800403c:	f7ff f82d 	bl	800309a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4b44      	ldr	r3, [pc, #272]	; (8004158 <HAL_ADC_ConfigChannel+0x768>)
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d07b      	beq.n	8004144 <HAL_ADC_ConfigChannel+0x754>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800404c:	4843      	ldr	r0, [pc, #268]	; (800415c <HAL_ADC_ConfigChannel+0x76c>)
 800404e:	f7fe ff61 	bl	8002f14 <LL_ADC_GetCommonPathInternalCh>
 8004052:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004056:	4842      	ldr	r0, [pc, #264]	; (8004160 <HAL_ADC_ConfigChannel+0x770>)
 8004058:	f7ff f8d0 	bl	80031fc <LL_ADC_IsEnabled>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d15d      	bne.n	800411e <HAL_ADC_ConfigChannel+0x72e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a3f      	ldr	r2, [pc, #252]	; (8004164 <HAL_ADC_ConfigChannel+0x774>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d126      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x6ca>
 800406c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d120      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x6ca>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a38      	ldr	r2, [pc, #224]	; (8004160 <HAL_ADC_ConfigChannel+0x770>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d160      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004082:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004086:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800408a:	4619      	mov	r1, r3
 800408c:	4833      	ldr	r0, [pc, #204]	; (800415c <HAL_ADC_ConfigChannel+0x76c>)
 800408e:	f7fe ff2e 	bl	8002eee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004092:	4b35      	ldr	r3, [pc, #212]	; (8004168 <HAL_ADC_ConfigChannel+0x778>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	4a34      	ldr	r2, [pc, #208]	; (800416c <HAL_ADC_ConfigChannel+0x77c>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	099a      	lsrs	r2, r3, #6
 80040a0:	4613      	mov	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80040aa:	e002      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x6c2>
              {
                wait_loop_index--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f9      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x6bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040b8:	e044      	b.n	8004144 <HAL_ADC_ConfigChannel+0x754>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a2c      	ldr	r2, [pc, #176]	; (8004170 <HAL_ADC_ConfigChannel+0x780>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d113      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x6fc>
 80040c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10d      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x6fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a22      	ldr	r2, [pc, #136]	; (8004160 <HAL_ADC_ConfigChannel+0x770>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d134      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80040da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e2:	4619      	mov	r1, r3
 80040e4:	481d      	ldr	r0, [pc, #116]	; (800415c <HAL_ADC_ConfigChannel+0x76c>)
 80040e6:	f7fe ff02 	bl	8002eee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040ea:	e02b      	b.n	8004144 <HAL_ADC_ConfigChannel+0x754>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a20      	ldr	r2, [pc, #128]	; (8004174 <HAL_ADC_ConfigChannel+0x784>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d126      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x754>
 80040f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d120      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x754>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a16      	ldr	r2, [pc, #88]	; (8004160 <HAL_ADC_ConfigChannel+0x770>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d11b      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800410c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004114:	4619      	mov	r1, r3
 8004116:	4811      	ldr	r0, [pc, #68]	; (800415c <HAL_ADC_ConfigChannel+0x76c>)
 8004118:	f7fe fee9 	bl	8002eee <LL_ADC_SetCommonPathInternalCh>
 800411c:	e012      	b.n	8004144 <HAL_ADC_ConfigChannel+0x754>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	f043 0220 	orr.w	r2, r3, #32
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004130:	e008      	b.n	8004144 <HAL_ADC_ConfigChannel+0x754>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	f043 0220 	orr.w	r2, r3, #32
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800414c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004150:	4618      	mov	r0, r3
 8004152:	37d8      	adds	r7, #216	; 0xd8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	80080000 	.word	0x80080000
 800415c:	50040300 	.word	0x50040300
 8004160:	50040000 	.word	0x50040000
 8004164:	c7520000 	.word	0xc7520000
 8004168:	2000001c 	.word	0x2000001c
 800416c:	053e2d63 	.word	0x053e2d63
 8004170:	cb840000 	.word	0xcb840000
 8004174:	80000001 	.word	0x80000001

08004178 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004180:	2300      	movs	r3, #0
 8004182:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff f837 	bl	80031fc <LL_ADC_IsEnabled>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d15e      	bne.n	8004252 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	4b30      	ldr	r3, [pc, #192]	; (800425c <ADC_Enable+0xe4>)
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00d      	beq.n	80041be <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a6:	f043 0210 	orr.w	r2, r3, #16
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	f043 0201 	orr.w	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e04a      	b.n	8004254 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff f806 	bl	80031d4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80041c8:	4825      	ldr	r0, [pc, #148]	; (8004260 <ADC_Enable+0xe8>)
 80041ca:	f7fe fea3 	bl	8002f14 <LL_ADC_GetCommonPathInternalCh>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00f      	beq.n	80041f8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80041d8:	4b22      	ldr	r3, [pc, #136]	; (8004264 <ADC_Enable+0xec>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	099b      	lsrs	r3, r3, #6
 80041de:	4a22      	ldr	r2, [pc, #136]	; (8004268 <ADC_Enable+0xf0>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	099b      	lsrs	r3, r3, #6
 80041e6:	3301      	adds	r3, #1
 80041e8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80041ea:	e002      	b.n	80041f2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f9      	bne.n	80041ec <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80041f8:	f7fe fe2c 	bl	8002e54 <HAL_GetTick>
 80041fc:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041fe:	e021      	b.n	8004244 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f7fe fff9 	bl	80031fc <LL_ADC_IsEnabled>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d104      	bne.n	800421a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f7fe ffdd 	bl	80031d4 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800421a:	f7fe fe1b 	bl	8002e54 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d90d      	bls.n	8004244 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422c:	f043 0210 	orr.w	r2, r3, #16
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004238:	f043 0201 	orr.w	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e007      	b.n	8004254 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b01      	cmp	r3, #1
 8004250:	d1d6      	bne.n	8004200 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	8000003f 	.word	0x8000003f
 8004260:	50040300 	.word	0x50040300
 8004264:	2000001c 	.word	0x2000001c
 8004268:	053e2d63 	.word	0x053e2d63

0800426c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004282:	2b00      	cmp	r3, #0
 8004284:	d14b      	bne.n	800431e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d021      	beq.n	80042e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fe fe98 	bl	8002fda <LL_ADC_REG_IsTriggerSourceSWStart>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d032      	beq.n	8004316 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d12b      	bne.n	8004316 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d11f      	bne.n	8004316 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042da:	f043 0201 	orr.w	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54
 80042e2:	e018      	b.n	8004316 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d111      	bne.n	8004316 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d105      	bne.n	8004316 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	f043 0201 	orr.w	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7ff fb42 	bl	80039a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800431c:	e00e      	b.n	800433c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f7ff fb56 	bl	80039dc <HAL_ADC_ErrorCallback>
}
 8004330:	e004      	b.n	800433c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4798      	blx	r3
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f7ff fb2e 	bl	80039b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004358:	bf00      	nop
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004372:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	f043 0204 	orr.w	r2, r3, #4
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f7ff fb28 	bl	80039dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004408:	4b0c      	ldr	r3, [pc, #48]	; (800443c <__NVIC_SetPriorityGrouping+0x44>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004414:	4013      	ands	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800442a:	4a04      	ldr	r2, [pc, #16]	; (800443c <__NVIC_SetPriorityGrouping+0x44>)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	60d3      	str	r3, [r2, #12]
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	e000ed00 	.word	0xe000ed00

08004440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004444:	4b04      	ldr	r3, [pc, #16]	; (8004458 <__NVIC_GetPriorityGrouping+0x18>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	0a1b      	lsrs	r3, r3, #8
 800444a:	f003 0307 	and.w	r3, r3, #7
}
 800444e:	4618      	mov	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	e000ed00 	.word	0xe000ed00

0800445c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446a:	2b00      	cmp	r3, #0
 800446c:	db0b      	blt.n	8004486 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	f003 021f 	and.w	r2, r3, #31
 8004474:	4907      	ldr	r1, [pc, #28]	; (8004494 <__NVIC_EnableIRQ+0x38>)
 8004476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2001      	movs	r0, #1
 800447e:	fa00 f202 	lsl.w	r2, r0, r2
 8004482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	e000e100 	.word	0xe000e100

08004498 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	db10      	blt.n	80044cc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	f003 021f 	and.w	r2, r3, #31
 80044b0:	4909      	ldr	r1, [pc, #36]	; (80044d8 <__NVIC_DisableIRQ+0x40>)
 80044b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	2001      	movs	r0, #1
 80044ba:	fa00 f202 	lsl.w	r2, r0, r2
 80044be:	3320      	adds	r3, #32
 80044c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80044c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80044c8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	e000e100 	.word	0xe000e100

080044dc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	db0c      	blt.n	8004508 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	f003 021f 	and.w	r2, r3, #31
 80044f4:	4907      	ldr	r1, [pc, #28]	; (8004514 <__NVIC_SetPendingIRQ+0x38>)
 80044f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	2001      	movs	r0, #1
 80044fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004502:	3340      	adds	r3, #64	; 0x40
 8004504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	e000e100 	.word	0xe000e100

08004518 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004526:	2b00      	cmp	r3, #0
 8004528:	db0c      	blt.n	8004544 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	f003 021f 	and.w	r2, r3, #31
 8004530:	4907      	ldr	r1, [pc, #28]	; (8004550 <__NVIC_ClearPendingIRQ+0x38>)
 8004532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	2001      	movs	r0, #1
 800453a:	fa00 f202 	lsl.w	r2, r0, r2
 800453e:	3360      	adds	r3, #96	; 0x60
 8004540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000e100 	.word	0xe000e100

08004554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	6039      	str	r1, [r7, #0]
 800455e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004564:	2b00      	cmp	r3, #0
 8004566:	db0a      	blt.n	800457e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	b2da      	uxtb	r2, r3
 800456c:	490c      	ldr	r1, [pc, #48]	; (80045a0 <__NVIC_SetPriority+0x4c>)
 800456e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004572:	0112      	lsls	r2, r2, #4
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	440b      	add	r3, r1
 8004578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800457c:	e00a      	b.n	8004594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4908      	ldr	r1, [pc, #32]	; (80045a4 <__NVIC_SetPriority+0x50>)
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	3b04      	subs	r3, #4
 800458c:	0112      	lsls	r2, r2, #4
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	440b      	add	r3, r1
 8004592:	761a      	strb	r2, [r3, #24]
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	e000e100 	.word	0xe000e100
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b089      	sub	sp, #36	; 0x24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f1c3 0307 	rsb	r3, r3, #7
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	bf28      	it	cs
 80045c6:	2304      	movcs	r3, #4
 80045c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3304      	adds	r3, #4
 80045ce:	2b06      	cmp	r3, #6
 80045d0:	d902      	bls.n	80045d8 <NVIC_EncodePriority+0x30>
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	3b03      	subs	r3, #3
 80045d6:	e000      	b.n	80045da <NVIC_EncodePriority+0x32>
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045dc:	f04f 32ff 	mov.w	r2, #4294967295
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43da      	mvns	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	401a      	ands	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045f0:	f04f 31ff 	mov.w	r1, #4294967295
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	fa01 f303 	lsl.w	r3, r1, r3
 80045fa:	43d9      	mvns	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004600:	4313      	orrs	r3, r2
         );
}
 8004602:	4618      	mov	r0, r3
 8004604:	3724      	adds	r7, #36	; 0x24
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004614:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004618:	4b05      	ldr	r3, [pc, #20]	; (8004630 <__NVIC_SystemReset+0x20>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004620:	4903      	ldr	r1, [pc, #12]	; (8004630 <__NVIC_SystemReset+0x20>)
 8004622:	4b04      	ldr	r3, [pc, #16]	; (8004634 <__NVIC_SystemReset+0x24>)
 8004624:	4313      	orrs	r3, r2
 8004626:	60cb      	str	r3, [r1, #12]
 8004628:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800462c:	bf00      	nop
 800462e:	e7fd      	b.n	800462c <__NVIC_SystemReset+0x1c>
 8004630:	e000ed00 	.word	0xe000ed00
 8004634:	05fa0004 	.word	0x05fa0004

08004638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff fed9 	bl	80043f8 <__NVIC_SetPriorityGrouping>
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b086      	sub	sp, #24
 8004652:	af00      	add	r7, sp, #0
 8004654:	4603      	mov	r3, r0
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800465c:	f7ff fef0 	bl	8004440 <__NVIC_GetPriorityGrouping>
 8004660:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	6978      	ldr	r0, [r7, #20]
 8004668:	f7ff ff9e 	bl	80045a8 <NVIC_EncodePriority>
 800466c:	4602      	mov	r2, r0
 800466e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004672:	4611      	mov	r1, r2
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff ff6d 	bl	8004554 <__NVIC_SetPriority>
}
 800467a:	bf00      	nop
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	4603      	mov	r3, r0
 800468a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800468c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fee3 	bl	800445c <__NVIC_EnableIRQ>
}
 8004696:	bf00      	nop
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	4603      	mov	r3, r0
 80046a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fef3 	bl	8004498 <__NVIC_DisableIRQ>
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80046be:	f7ff ffa7 	bl	8004610 <__NVIC_SystemReset>

080046c2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	4603      	mov	r3, r0
 80046ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80046cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ff03 	bl	80044dc <__NVIC_SetPendingIRQ>
}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	4603      	mov	r3, r0
 80046e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80046e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ff13 	bl	8004518 <__NVIC_ClearPendingIRQ>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e08e      	b.n	800482c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	4b47      	ldr	r3, [pc, #284]	; (8004834 <HAL_DMA_Init+0x138>)
 8004716:	429a      	cmp	r2, r3
 8004718:	d80f      	bhi.n	800473a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	4b45      	ldr	r3, [pc, #276]	; (8004838 <HAL_DMA_Init+0x13c>)
 8004722:	4413      	add	r3, r2
 8004724:	4a45      	ldr	r2, [pc, #276]	; (800483c <HAL_DMA_Init+0x140>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	009a      	lsls	r2, r3, #2
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a42      	ldr	r2, [pc, #264]	; (8004840 <HAL_DMA_Init+0x144>)
 8004736:	641a      	str	r2, [r3, #64]	; 0x40
 8004738:	e00e      	b.n	8004758 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	4b40      	ldr	r3, [pc, #256]	; (8004844 <HAL_DMA_Init+0x148>)
 8004742:	4413      	add	r3, r2
 8004744:	4a3d      	ldr	r2, [pc, #244]	; (800483c <HAL_DMA_Init+0x140>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	091b      	lsrs	r3, r3, #4
 800474c:	009a      	lsls	r2, r3, #2
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a3c      	ldr	r2, [pc, #240]	; (8004848 <HAL_DMA_Init+0x14c>)
 8004756:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800477c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004788:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004794:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f9b6 	bl	8004b1c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047b8:	d102      	bne.n	80047c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80047cc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047d6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d010      	beq.n	8004802 <HAL_DMA_Init+0x106>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d80c      	bhi.n	8004802 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f9d5 	bl	8004b98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047fe:	605a      	str	r2, [r3, #4]
 8004800:	e008      	b.n	8004814 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40020407 	.word	0x40020407
 8004838:	bffdfff8 	.word	0xbffdfff8
 800483c:	cccccccd 	.word	0xcccccccd
 8004840:	40020000 	.word	0x40020000
 8004844:	bffdfbf8 	.word	0xbffdfbf8
 8004848:	40020400 	.word	0x40020400

0800484c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_DMA_Start_IT+0x20>
 8004868:	2302      	movs	r3, #2
 800486a:	e066      	b.n	800493a <HAL_DMA_Start_IT+0xee>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	d155      	bne.n	800492c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0201 	bic.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	68b9      	ldr	r1, [r7, #8]
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 f8fb 	bl	8004aa0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f042 020e 	orr.w	r2, r2, #14
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	e00f      	b.n	80048e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0204 	bic.w	r2, r2, #4
 80048d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 020a 	orr.w	r2, r2, #10
 80048e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004900:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004918:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0201 	orr.w	r2, r2, #1
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	e005      	b.n	8004938 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004934:	2302      	movs	r3, #2
 8004936:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004938:	7dfb      	ldrb	r3, [r7, #23]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495e:	f003 031c 	and.w	r3, r3, #28
 8004962:	2204      	movs	r2, #4
 8004964:	409a      	lsls	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4013      	ands	r3, r2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d026      	beq.n	80049bc <HAL_DMA_IRQHandler+0x7a>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d021      	beq.n	80049bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b00      	cmp	r3, #0
 8004984:	d107      	bne.n	8004996 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0204 	bic.w	r2, r2, #4
 8004994:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499a:	f003 021c 	and.w	r2, r3, #28
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	2104      	movs	r1, #4
 80049a4:	fa01 f202 	lsl.w	r2, r1, r2
 80049a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d071      	beq.n	8004a96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80049ba:	e06c      	b.n	8004a96 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c0:	f003 031c 	and.w	r3, r3, #28
 80049c4:	2202      	movs	r2, #2
 80049c6:	409a      	lsls	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d02e      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xec>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d029      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10b      	bne.n	8004a00 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 020a 	bic.w	r2, r2, #10
 80049f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a04:	f003 021c 	and.w	r2, r3, #28
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	2102      	movs	r1, #2
 8004a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d038      	beq.n	8004a96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a2c:	e033      	b.n	8004a96 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a32:	f003 031c 	and.w	r3, r3, #28
 8004a36:	2208      	movs	r2, #8
 8004a38:	409a      	lsls	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d02a      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x156>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d025      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 020e 	bic.w	r2, r2, #14
 8004a5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a60:	f003 021c 	and.w	r2, r3, #28
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	2101      	movs	r1, #1
 8004a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d004      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
}
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ab6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d004      	beq.n	8004aca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ac8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	f003 021c 	and.w	r2, r3, #28
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8004adc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b10      	cmp	r3, #16
 8004aec:	d108      	bne.n	8004b00 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004afe:	e007      	b.n	8004b10 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	60da      	str	r2, [r3, #12]
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d80a      	bhi.n	8004b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b34:	089b      	lsrs	r3, r3, #2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b3c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6493      	str	r3, [r2, #72]	; 0x48
 8004b44:	e007      	b.n	8004b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4a:	089b      	lsrs	r3, r3, #2
 8004b4c:	009a      	lsls	r2, r3, #2
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004b50:	4413      	add	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	3b08      	subs	r3, #8
 8004b5e:	4a0c      	ldr	r2, [pc, #48]	; (8004b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	091b      	lsrs	r3, r3, #4
 8004b66:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a0a      	ldr	r2, [pc, #40]	; (8004b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004b6c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 031f 	and.w	r3, r3, #31
 8004b74:	2201      	movs	r2, #1
 8004b76:	409a      	lsls	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	40020407 	.word	0x40020407
 8004b8c:	4002081c 	.word	0x4002081c
 8004b90:	cccccccd 	.word	0xcccccccd
 8004b94:	40020880 	.word	0x40020880

08004b98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004bbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004bce:	bf00      	nop
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	1000823f 	.word	0x1000823f
 8004be0:	40020940 	.word	0x40020940

08004be4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bf2:	e14c      	b.n	8004e8e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004c00:	4013      	ands	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 813e 	beq.w	8004e88 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d00b      	beq.n	8004c2c <HAL_GPIO_Init+0x48>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d007      	beq.n	8004c2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c20:	2b11      	cmp	r3, #17
 8004c22:	d003      	beq.n	8004c2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2b12      	cmp	r3, #18
 8004c2a:	d130      	bne.n	8004c8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	2203      	movs	r2, #3
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c62:	2201      	movs	r2, #1
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	091b      	lsrs	r3, r3, #4
 8004c78:	f003 0201 	and.w	r2, r3, #1
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	2203      	movs	r2, #3
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d003      	beq.n	8004cce <HAL_GPIO_Init+0xea>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b12      	cmp	r3, #18
 8004ccc:	d123      	bne.n	8004d16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	08da      	lsrs	r2, r3, #3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3208      	adds	r2, #8
 8004cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	220f      	movs	r2, #15
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	43db      	mvns	r3, r3
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	08da      	lsrs	r2, r3, #3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3208      	adds	r2, #8
 8004d10:	6939      	ldr	r1, [r7, #16]
 8004d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	2203      	movs	r2, #3
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	43db      	mvns	r3, r3
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f003 0203 	and.w	r2, r3, #3
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 8098 	beq.w	8004e88 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004d58:	4a54      	ldr	r2, [pc, #336]	; (8004eac <HAL_GPIO_Init+0x2c8>)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	089b      	lsrs	r3, r3, #2
 8004d5e:	3302      	adds	r3, #2
 8004d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	220f      	movs	r2, #15
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d82:	d019      	beq.n	8004db8 <HAL_GPIO_Init+0x1d4>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a4a      	ldr	r2, [pc, #296]	; (8004eb0 <HAL_GPIO_Init+0x2cc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d013      	beq.n	8004db4 <HAL_GPIO_Init+0x1d0>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a49      	ldr	r2, [pc, #292]	; (8004eb4 <HAL_GPIO_Init+0x2d0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00d      	beq.n	8004db0 <HAL_GPIO_Init+0x1cc>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a48      	ldr	r2, [pc, #288]	; (8004eb8 <HAL_GPIO_Init+0x2d4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d007      	beq.n	8004dac <HAL_GPIO_Init+0x1c8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a47      	ldr	r2, [pc, #284]	; (8004ebc <HAL_GPIO_Init+0x2d8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d101      	bne.n	8004da8 <HAL_GPIO_Init+0x1c4>
 8004da4:	2304      	movs	r3, #4
 8004da6:	e008      	b.n	8004dba <HAL_GPIO_Init+0x1d6>
 8004da8:	2307      	movs	r3, #7
 8004daa:	e006      	b.n	8004dba <HAL_GPIO_Init+0x1d6>
 8004dac:	2303      	movs	r3, #3
 8004dae:	e004      	b.n	8004dba <HAL_GPIO_Init+0x1d6>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e002      	b.n	8004dba <HAL_GPIO_Init+0x1d6>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <HAL_GPIO_Init+0x1d6>
 8004db8:	2300      	movs	r3, #0
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	f002 0203 	and.w	r2, r2, #3
 8004dc0:	0092      	lsls	r2, r2, #2
 8004dc2:	4093      	lsls	r3, r2
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004dca:	4938      	ldr	r1, [pc, #224]	; (8004eac <HAL_GPIO_Init+0x2c8>)
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	089b      	lsrs	r3, r3, #2
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004dd8:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <HAL_GPIO_Init+0x2dc>)
 8004dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	43db      	mvns	r3, r3
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4013      	ands	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004dfe:	4a30      	ldr	r2, [pc, #192]	; (8004ec0 <HAL_GPIO_Init+0x2dc>)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004e06:	4b2e      	ldr	r3, [pc, #184]	; (8004ec0 <HAL_GPIO_Init+0x2dc>)
 8004e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4013      	ands	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e2c:	4a24      	ldr	r2, [pc, #144]	; (8004ec0 <HAL_GPIO_Init+0x2dc>)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e34:	4b22      	ldr	r3, [pc, #136]	; (8004ec0 <HAL_GPIO_Init+0x2dc>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4013      	ands	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e58:	4a19      	ldr	r2, [pc, #100]	; (8004ec0 <HAL_GPIO_Init+0x2dc>)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e5e:	4b18      	ldr	r3, [pc, #96]	; (8004ec0 <HAL_GPIO_Init+0x2dc>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	43db      	mvns	r3, r3
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e82:	4a0f      	ldr	r2, [pc, #60]	; (8004ec0 <HAL_GPIO_Init+0x2dc>)
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	fa22 f303 	lsr.w	r3, r2, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f47f aeab 	bne.w	8004bf4 <HAL_GPIO_Init+0x10>
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40010000 	.word	0x40010000
 8004eb0:	48000400 	.word	0x48000400
 8004eb4:	48000800 	.word	0x48000800
 8004eb8:	48000c00 	.word	0x48000c00
 8004ebc:	48001000 	.word	0x48001000
 8004ec0:	58000800 	.word	0x58000800

08004ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	807b      	strh	r3, [r7, #2]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ed4:	787b      	ldrb	r3, [r7, #1]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004eda:	887a      	ldrh	r2, [r7, #2]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ee0:	e002      	b.n	8004ee8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ee2:	887a      	ldrh	r2, [r7, #2]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004efa:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <HAL_HSEM_IRQHandler+0x30>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004f00:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <HAL_HSEM_IRQHandler+0x30>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	43db      	mvns	r3, r3
 8004f08:	4906      	ldr	r1, [pc, #24]	; (8004f24 <HAL_HSEM_IRQHandler+0x30>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004f0e:	4a05      	ldr	r2, [pc, #20]	; (8004f24 <HAL_HSEM_IRQHandler+0x30>)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f807 	bl	8004f28 <HAL_HSEM_FreeCallback>
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	58001500 	.word	0x58001500

08004f28 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f3e:	b08b      	sub	sp, #44	; 0x2c
 8004f40:	af06      	add	r7, sp, #24
 8004f42:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e0ad      	b.n	80050aa <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f00e fa20 	bl	80133a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f004 f8e6 	bl	8009146 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	73fb      	strb	r3, [r7, #15]
 8004f7e:	e035      	b.n	8004fec <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	015b      	lsls	r3, r3, #5
 8004f86:	4413      	add	r3, r2
 8004f88:	3329      	adds	r3, #41	; 0x29
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	015b      	lsls	r3, r3, #5
 8004f94:	4413      	add	r3, r2
 8004f96:	3328      	adds	r3, #40	; 0x28
 8004f98:	7bfa      	ldrb	r2, [r7, #15]
 8004f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	7bfa      	ldrb	r2, [r7, #15]
 8004fa0:	b291      	uxth	r1, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	015b      	lsls	r3, r3, #5
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3336      	adds	r3, #54	; 0x36
 8004faa:	460a      	mov	r2, r1
 8004fac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	015b      	lsls	r3, r3, #5
 8004fb4:	4413      	add	r3, r2
 8004fb6:	332b      	adds	r3, #43	; 0x2b
 8004fb8:	2200      	movs	r2, #0
 8004fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	015b      	lsls	r3, r3, #5
 8004fc2:	4413      	add	r3, r2
 8004fc4:	3338      	adds	r3, #56	; 0x38
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	015b      	lsls	r3, r3, #5
 8004fd0:	4413      	add	r3, r2
 8004fd2:	333c      	adds	r3, #60	; 0x3c
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	3302      	adds	r3, #2
 8004fde:	015b      	lsls	r3, r3, #5
 8004fe0:	4413      	add	r3, r2
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
 8004fec:	7bfa      	ldrb	r2, [r7, #15]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d3c4      	bcc.n	8004f80 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	73fb      	strb	r3, [r7, #15]
 8004ffa:	e031      	b.n	8005060 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	015b      	lsls	r3, r3, #5
 8005002:	4413      	add	r3, r2
 8005004:	f203 1329 	addw	r3, r3, #297	; 0x129
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	015b      	lsls	r3, r3, #5
 8005012:	4413      	add	r3, r2
 8005014:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005018:	7bfa      	ldrb	r2, [r7, #15]
 800501a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	015b      	lsls	r3, r3, #5
 8005022:	4413      	add	r3, r2
 8005024:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	015b      	lsls	r3, r3, #5
 8005032:	4413      	add	r3, r2
 8005034:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800503c:	7bfb      	ldrb	r3, [r7, #15]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	015b      	lsls	r3, r3, #5
 8005042:	4413      	add	r3, r2
 8005044:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	330a      	adds	r3, #10
 8005052:	015b      	lsls	r3, r3, #5
 8005054:	4413      	add	r3, r2
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800505a:	7bfb      	ldrb	r3, [r7, #15]
 800505c:	3301      	adds	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
 8005060:	7bfa      	ldrb	r2, [r7, #15]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	429a      	cmp	r2, r3
 8005068:	d3c8      	bcc.n	8004ffc <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	687e      	ldr	r6, [r7, #4]
 8005072:	466d      	mov	r5, sp
 8005074:	f106 0410 	add.w	r4, r6, #16
 8005078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800507a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	602b      	str	r3, [r5, #0]
 8005080:	1d33      	adds	r3, r6, #4
 8005082:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005084:	6838      	ldr	r0, [r7, #0]
 8005086:	f004 f879 	bl	800917c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d102      	bne.n	80050a8 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fe59 	bl	8005d5a <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_PCD_Start+0x16>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e012      	b.n	80050ee <HAL_PCD_Start+0x3c>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f005 fa49 	bl	800a56c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f004 f818 	bl	8009114 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f005 fa49 	bl	800a59a <USB_ReadInterrupts>
 8005108:	4603      	mov	r3, r0
 800510a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800510e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005112:	d102      	bne.n	800511a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fb33 	bl	8005780 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f005 fa3b 	bl	800a59a <USB_ReadInterrupts>
 8005124:	4603      	mov	r3, r0
 8005126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800512e:	d112      	bne.n	8005156 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005138:	b29a      	uxth	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005142:	b292      	uxth	r2, r2
 8005144:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f00e f9b4 	bl	80134b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800514e:	2100      	movs	r1, #0
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f91e 	bl	8005392 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f005 fa1d 	bl	800a59a <USB_ReadInterrupts>
 8005160:	4603      	mov	r3, r0
 8005162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800516a:	d10b      	bne.n	8005184 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005174:	b29a      	uxth	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800517e:	b292      	uxth	r2, r2
 8005180:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f005 fa06 	bl	800a59a <USB_ReadInterrupts>
 800518e:	4603      	mov	r3, r0
 8005190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005198:	d10b      	bne.n	80051b2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051ac:	b292      	uxth	r2, r2
 80051ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f005 f9ef 	bl	800a59a <USB_ReadInterrupts>
 80051bc:	4603      	mov	r3, r0
 80051be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c6:	d133      	bne.n	8005230 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0204 	bic.w	r2, r2, #4
 80051da:	b292      	uxth	r2, r2
 80051dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0208 	bic.w	r2, r2, #8
 80051f2:	b292      	uxth	r2, r2
 80051f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d107      	bne.n	8005212 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800520a:	2100      	movs	r1, #0
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fdce 	bl	8005dae <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f00e f988 	bl	8013528 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005220:	b29a      	uxth	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800522a:	b292      	uxth	r2, r2
 800522c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f005 f9b0 	bl	800a59a <USB_ReadInterrupts>
 800523a:	4603      	mov	r3, r0
 800523c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005244:	d126      	bne.n	8005294 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800524e:	b29a      	uxth	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0208 	orr.w	r2, r2, #8
 8005258:	b292      	uxth	r2, r2
 800525a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005266:	b29a      	uxth	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005270:	b292      	uxth	r2, r2
 8005272:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800527e:	b29a      	uxth	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0204 	orr.w	r2, r2, #4
 8005288:	b292      	uxth	r2, r2
 800528a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f00e f930 	bl	80134f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f005 f97e 	bl	800a59a <USB_ReadInterrupts>
 800529e:	4603      	mov	r3, r0
 80052a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a4:	2b80      	cmp	r3, #128	; 0x80
 80052a6:	d13f      	bne.n	8005328 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052ba:	b292      	uxth	r2, r2
 80052bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d12b      	bne.n	8005322 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 0204 	orr.w	r2, r2, #4
 80052dc:	b292      	uxth	r2, r2
 80052de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0208 	orr.w	r2, r2, #8
 80052f4:	b292      	uxth	r2, r2
 80052f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800530a:	b29b      	uxth	r3, r3
 800530c:	089b      	lsrs	r3, r3, #2
 800530e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005318:	2101      	movs	r1, #1
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fd47 	bl	8005dae <HAL_PCDEx_LPM_Callback>
 8005320:	e002      	b.n	8005328 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f00e f8e6 	bl	80134f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4618      	mov	r0, r3
 800532e:	f005 f934 	bl	800a59a <USB_ReadInterrupts>
 8005332:	4603      	mov	r3, r0
 8005334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800533c:	d10e      	bne.n	800535c <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005346:	b29a      	uxth	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005350:	b292      	uxth	r2, r2
 8005352:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f00e f89f 	bl	801349a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4618      	mov	r0, r3
 8005362:	f005 f91a 	bl	800a59a <USB_ReadInterrupts>
 8005366:	4603      	mov	r3, r0
 8005368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005370:	d10b      	bne.n	800538a <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800537a:	b29a      	uxth	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005384:	b292      	uxth	r2, r2
 8005386:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b082      	sub	sp, #8
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	460b      	mov	r3, r1
 800539c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_PCD_SetAddress+0x1a>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e013      	b.n	80053d4 <HAL_PCD_SetAddress+0x42>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	78fa      	ldrb	r2, [r7, #3]
 80053b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	78fa      	ldrb	r2, [r7, #3]
 80053c2:	4611      	mov	r1, r2
 80053c4:	4618      	mov	r0, r3
 80053c6:	f005 f8bd 	bl	800a544 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	4608      	mov	r0, r1
 80053e6:	4611      	mov	r1, r2
 80053e8:	461a      	mov	r2, r3
 80053ea:	4603      	mov	r3, r0
 80053ec:	70fb      	strb	r3, [r7, #3]
 80053ee:	460b      	mov	r3, r1
 80053f0:	803b      	strh	r3, [r7, #0]
 80053f2:	4613      	mov	r3, r2
 80053f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	da0b      	bge.n	800541a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005402:	78fb      	ldrb	r3, [r7, #3]
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	015b      	lsls	r3, r3, #5
 800540a:	3328      	adds	r3, #40	; 0x28
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	4413      	add	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	705a      	strb	r2, [r3, #1]
 8005418:	e00b      	b.n	8005432 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	015b      	lsls	r3, r3, #5
 8005422:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	4413      	add	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005432:	78fb      	ldrb	r3, [r7, #3]
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	b2da      	uxtb	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800543e:	883a      	ldrh	r2, [r7, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	78ba      	ldrb	r2, [r7, #2]
 8005448:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	785b      	ldrb	r3, [r3, #1]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d004      	beq.n	800545c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800545c:	78bb      	ldrb	r3, [r7, #2]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d102      	bne.n	8005468 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_PCD_EP_Open+0x9a>
 8005472:	2302      	movs	r3, #2
 8005474:	e00e      	b.n	8005494 <HAL_PCD_EP_Open+0xb8>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68f9      	ldr	r1, [r7, #12]
 8005484:	4618      	mov	r0, r3
 8005486:	f003 fe9d 	bl	80091c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8005492:	7afb      	ldrb	r3, [r7, #11]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	da0b      	bge.n	80054c8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	015b      	lsls	r3, r3, #5
 80054b8:	3328      	adds	r3, #40	; 0x28
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	705a      	strb	r2, [r3, #1]
 80054c6:	e00b      	b.n	80054e0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	015b      	lsls	r3, r3, #5
 80054d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	4413      	add	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_PCD_EP_Close+0x5e>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e00e      	b.n	8005518 <HAL_PCD_EP_Close+0x7c>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68f9      	ldr	r1, [r7, #12]
 8005508:	4618      	mov	r0, r3
 800550a:	f004 fa09 	bl	8009920 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	607a      	str	r2, [r7, #4]
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	460b      	mov	r3, r1
 800552e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005530:	7afb      	ldrb	r3, [r7, #11]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	015b      	lsls	r3, r3, #5
 8005538:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2200      	movs	r2, #0
 8005552:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2200      	movs	r2, #0
 8005558:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800555a:	7afb      	ldrb	r3, [r7, #11]
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	b2da      	uxtb	r2, r3
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005566:	7afb      	ldrb	r3, [r7, #11]
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	2b00      	cmp	r3, #0
 800556e:	d106      	bne.n	800557e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6979      	ldr	r1, [r7, #20]
 8005576:	4618      	mov	r0, r3
 8005578:	f004 fbbf 	bl	8009cfa <USB_EPStartXfer>
 800557c:	e005      	b.n	800558a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6979      	ldr	r1, [r7, #20]
 8005584:	4618      	mov	r0, r3
 8005586:	f004 fbb8 	bl	8009cfa <USB_EPStartXfer>
  }

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	330a      	adds	r3, #10
 80055aa:	015b      	lsls	r3, r3, #5
 80055ac:	4413      	add	r3, r2
 80055ae:	3304      	adds	r3, #4
 80055b0:	681b      	ldr	r3, [r3, #0]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b086      	sub	sp, #24
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
 80055ca:	460b      	mov	r3, r1
 80055cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ce:	7afb      	ldrb	r3, [r7, #11]
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	015b      	lsls	r3, r3, #5
 80055d6:	3328      	adds	r3, #40	; 0x28
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2200      	movs	r2, #0
 80055ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	2201      	movs	r2, #1
 80055f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055f6:	7afb      	ldrb	r3, [r7, #11]
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005602:	7afb      	ldrb	r3, [r7, #11]
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	2b00      	cmp	r3, #0
 800560a:	d106      	bne.n	800561a <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6979      	ldr	r1, [r7, #20]
 8005612:	4618      	mov	r0, r3
 8005614:	f004 fb71 	bl	8009cfa <USB_EPStartXfer>
 8005618:	e005      	b.n	8005626 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6979      	ldr	r1, [r7, #20]
 8005620:	4618      	mov	r0, r3
 8005622:	f004 fb6a 	bl	8009cfa <USB_EPStartXfer>
  }

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	f003 0207 	and.w	r2, r3, #7
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	429a      	cmp	r2, r3
 8005648:	d901      	bls.n	800564e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e046      	b.n	80056dc <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800564e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005652:	2b00      	cmp	r3, #0
 8005654:	da0b      	bge.n	800566e <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	015b      	lsls	r3, r3, #5
 800565e:	3328      	adds	r3, #40	; 0x28
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	4413      	add	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2201      	movs	r2, #1
 800566a:	705a      	strb	r2, [r3, #1]
 800566c:	e009      	b.n	8005682 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	015b      	lsls	r3, r3, #5
 8005672:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	4413      	add	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	b2da      	uxtb	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <HAL_PCD_EP_SetStall+0x72>
 800569e:	2302      	movs	r3, #2
 80056a0:	e01c      	b.n	80056dc <HAL_PCD_EP_SetStall+0xac>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68f9      	ldr	r1, [r7, #12]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f004 fe48 	bl	800a346 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d108      	bne.n	80056d2 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80056ca:	4619      	mov	r1, r3
 80056cc:	4610      	mov	r0, r2
 80056ce:	f004 ff74 	bl	800a5ba <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	460b      	mov	r3, r1
 80056ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	f003 020f 	and.w	r2, r3, #15
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d901      	bls.n	8005702 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e03a      	b.n	8005778 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005702:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005706:	2b00      	cmp	r3, #0
 8005708:	da0b      	bge.n	8005722 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	015b      	lsls	r3, r3, #5
 8005712:	3328      	adds	r3, #40	; 0x28
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	4413      	add	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	705a      	strb	r2, [r3, #1]
 8005720:	e00b      	b.n	800573a <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	015b      	lsls	r3, r3, #5
 800572a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4413      	add	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	b2da      	uxtb	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <HAL_PCD_EP_ClrStall+0x76>
 8005756:	2302      	movs	r3, #2
 8005758:	e00e      	b.n	8005778 <HAL_PCD_EP_ClrStall+0x94>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68f9      	ldr	r1, [r7, #12]
 8005768:	4618      	mov	r0, r3
 800576a:	f004 fe3d 	bl	800a3e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08e      	sub	sp, #56	; 0x38
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005788:	e29c      	b.n	8005cc4 <PCD_EP_ISR_Handler+0x544>
  {
    wIstr = hpcd->Instance->ISTR;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005792:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005794:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005796:	b2db      	uxtb	r3, r3
 8005798:	f003 030f 	and.w	r3, r3, #15
 800579c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80057a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f040 8152 	bne.w	8005a4e <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80057aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80057ac:	f003 0310 	and.w	r3, r3, #16
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d150      	bne.n	8005856 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80057c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c4:	81fb      	strh	r3, [r7, #14]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	89fb      	ldrh	r3, [r7, #14]
 80057cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3328      	adds	r3, #40	; 0x28
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	461a      	mov	r2, r3
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	4413      	add	r3, r2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6812      	ldr	r2, [r2, #0]
 80057f6:	4413      	add	r3, r2
 80057f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	695a      	ldr	r2, [r3, #20]
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	441a      	add	r2, r3
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005814:	2100      	movs	r1, #0
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f00d fe28 	bl	801346c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 824d 	beq.w	8005cc4 <PCD_EP_ISR_Handler+0x544>
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f040 8248 	bne.w	8005cc4 <PCD_EP_ISR_Handler+0x544>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800583a:	b2db      	uxtb	r3, r3
 800583c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005840:	b2da      	uxtb	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	b292      	uxth	r2, r2
 8005848:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005854:	e236      	b.n	8005cc4 <PCD_EP_ISR_Handler+0x544>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005866:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800586c:	2b00      	cmp	r3, #0
 800586e:	d032      	beq.n	80058d6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005878:	b29b      	uxth	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	4413      	add	r3, r2
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6812      	ldr	r2, [r2, #0]
 8005888:	4413      	add	r3, r2
 800588a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f004 fed2 	bl	800a654 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80058bc:	4013      	ands	r3, r2
 80058be:	823b      	strh	r3, [r7, #16]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	8a3a      	ldrh	r2, [r7, #16]
 80058c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058ca:	b292      	uxth	r2, r2
 80058cc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f00d fda2 	bl	8013418 <HAL_PCD_SetupStageCallback>
 80058d4:	e1f6      	b.n	8005cc4 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80058d6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f280 81f2 	bge.w	8005cc4 <PCD_EP_ISR_Handler+0x544>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80058ec:	4013      	ands	r3, r2
 80058ee:	83fb      	strh	r3, [r7, #30]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	8bfa      	ldrh	r2, [r7, #30]
 80058f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058fa:	b292      	uxth	r2, r2
 80058fc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005906:	b29b      	uxth	r3, r3
 8005908:	461a      	mov	r2, r3
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	4413      	add	r3, r2
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6812      	ldr	r2, [r2, #0]
 8005916:	4413      	add	r3, r2
 8005918:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d019      	beq.n	8005962 <PCD_EP_ISR_Handler+0x1e2>
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d015      	beq.n	8005962 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	6959      	ldr	r1, [r3, #20]
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005946:	b29b      	uxth	r3, r3
 8005948:	f004 fe84 	bl	800a654 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	695a      	ldr	r2, [r3, #20]
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	441a      	add	r2, r3
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800595a:	2100      	movs	r1, #0
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f00d fd6d 	bl	801343c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	61bb      	str	r3, [r7, #24]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005970:	b29b      	uxth	r3, r3
 8005972:	461a      	mov	r2, r3
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	4413      	add	r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005980:	617b      	str	r3, [r7, #20]
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d112      	bne.n	80059b0 <PCD_EP_ISR_Handler+0x230>
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	b29b      	uxth	r3, r3
 8005990:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005994:	b29a      	uxth	r2, r3
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	801a      	strh	r2, [r3, #0]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	801a      	strh	r2, [r3, #0]
 80059ae:	e02f      	b.n	8005a10 <PCD_EP_ISR_Handler+0x290>
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b3e      	cmp	r3, #62	; 0x3e
 80059b6:	d813      	bhi.n	80059e0 <PCD_EP_ISR_Handler+0x260>
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	085b      	lsrs	r3, r3, #1
 80059be:	633b      	str	r3, [r7, #48]	; 0x30
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <PCD_EP_ISR_Handler+0x252>
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	3301      	adds	r3, #1
 80059d0:	633b      	str	r3, [r7, #48]	; 0x30
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	029b      	lsls	r3, r3, #10
 80059d8:	b29a      	uxth	r2, r3
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	801a      	strh	r2, [r3, #0]
 80059de:	e017      	b.n	8005a10 <PCD_EP_ISR_Handler+0x290>
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	633b      	str	r3, [r7, #48]	; 0x30
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <PCD_EP_ISR_Handler+0x27a>
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	3b01      	subs	r3, #1
 80059f8:	633b      	str	r3, [r7, #48]	; 0x30
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	029b      	lsls	r3, r3, #10
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a20:	827b      	strh	r3, [r7, #18]
 8005a22:	8a7b      	ldrh	r3, [r7, #18]
 8005a24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a28:	827b      	strh	r3, [r7, #18]
 8005a2a:	8a7b      	ldrh	r3, [r7, #18]
 8005a2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a30:	827b      	strh	r3, [r7, #18]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	8a7b      	ldrh	r3, [r7, #18]
 8005a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	8013      	strh	r3, [r2, #0]
 8005a4c:	e13a      	b.n	8005cc4 <PCD_EP_ISR_Handler+0x544>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	857b      	strh	r3, [r7, #42]	; 0x2a
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005a60:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f280 80d6 	bge.w	8005c16 <PCD_EP_ISR_Handler+0x496>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005a80:	4013      	ands	r3, r2
 8005a82:	853b      	strh	r3, [r7, #40]	; 0x28
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005a94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a98:	b292      	uxth	r2, r2
 8005a9a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005a9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005aa0:	015b      	lsls	r3, r3, #5
 8005aa2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	7b1b      	ldrb	r3, [r3, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11f      	bne.n	8005af4 <PCD_EP_ISR_Handler+0x374>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	461a      	mov	r2, r3
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	4413      	add	r3, r2
 8005ace:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ad8:	86fb      	strh	r3, [r7, #54]	; 0x36
          if (count != 0U)
 8005ada:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d075      	beq.n	8005bcc <PCD_EP_ISR_Handler+0x44c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	6959      	ldr	r1, [r3, #20]
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	88da      	ldrh	r2, [r3, #6]
 8005aec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005aee:	f004 fdb1 	bl	800a654 <USB_ReadPMA>
 8005af2:	e06b      	b.n	8005bcc <PCD_EP_ISR_Handler+0x44c>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d01f      	beq.n	8005b8e <PCD_EP_ISR_Handler+0x40e>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	4413      	add	r3, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6812      	ldr	r2, [r2, #0]
 8005b66:	4413      	add	r3, r2
 8005b68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b72:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8005b74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d028      	beq.n	8005bcc <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6818      	ldr	r0, [r3, #0]
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	6959      	ldr	r1, [r3, #20]
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	891a      	ldrh	r2, [r3, #8]
 8005b86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b88:	f004 fd64 	bl	800a654 <USB_ReadPMA>
 8005b8c:	e01e      	b.n	8005bcc <PCD_EP_ISR_Handler+0x44c>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	4413      	add	r3, r2
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bb2:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8005bb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d008      	beq.n	8005bcc <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	6959      	ldr	r1, [r3, #20]
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	895a      	ldrh	r2, [r3, #10]
 8005bc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bc8:	f004 fd44 	bl	800a654 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bd2:	441a      	add	r2, r3
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	695a      	ldr	r2, [r3, #20]
 8005bdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bde:	441a      	add	r2, r3
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d004      	beq.n	8005bf6 <PCD_EP_ISR_Handler+0x476>
 8005bec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d206      	bcs.n	8005c04 <PCD_EP_ISR_Handler+0x484>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f00d fc1d 	bl	801343c <HAL_PCD_DataOutStageCallback>
 8005c02:	e008      	b.n	8005c16 <PCD_EP_ISR_Handler+0x496>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	7819      	ldrb	r1, [r3, #0]
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	695a      	ldr	r2, [r3, #20]
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff fc85 	bl	8005520 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005c16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d051      	beq.n	8005cc4 <PCD_EP_ISR_Handler+0x544>
      {
        ep = &hpcd->IN_ep[epindex];
 8005c20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c24:	015b      	lsls	r3, r3, #5
 8005c26:	3328      	adds	r3, #40	; 0x28
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c48:	843b      	strh	r3, [r7, #32]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	441a      	add	r2, r3
 8005c58:	8c3b      	ldrh	r3, [r7, #32]
 8005c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4413      	add	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	695a      	ldr	r2, [r3, #20]
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	441a      	add	r2, r3
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d106      	bne.n	8005cb2 <PCD_EP_ISR_Handler+0x532>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f00d fbde 	bl	801346c <HAL_PCD_DataInStageCallback>
 8005cb0:	e008      	b.n	8005cc4 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	7819      	ldrb	r1, [r3, #0]
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	695a      	ldr	r2, [r3, #20]
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff fc7d 	bl	80055be <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	b21b      	sxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f6ff ad5a 	blt.w	800578a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3738      	adds	r7, #56	; 0x38
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	607b      	str	r3, [r7, #4]
 8005cea:	460b      	mov	r3, r1
 8005cec:	817b      	strh	r3, [r7, #10]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005cf2:	897b      	ldrh	r3, [r7, #10]
 8005cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d008      	beq.n	8005d10 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cfe:	897b      	ldrh	r3, [r7, #10]
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	015b      	lsls	r3, r3, #5
 8005d06:	3328      	adds	r3, #40	; 0x28
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	e006      	b.n	8005d1e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d10:	897b      	ldrh	r3, [r7, #10]
 8005d12:	015b      	lsls	r3, r3, #5
 8005d14:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005d1e:	893b      	ldrh	r3, [r7, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d107      	bne.n	8005d34 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2200      	movs	r2, #0
 8005d28:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	80da      	strh	r2, [r3, #6]
 8005d32:	e00b      	b.n	8005d4c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2201      	movs	r2, #1
 8005d38:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	0c1b      	lsrs	r3, r3, #16
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f043 0301 	orr.w	r3, r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	f043 0302 	orr.w	r3, r3, #2
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	460b      	mov	r3, r1
 8005db8:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
	...

08005dc8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dcc:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a04      	ldr	r2, [pc, #16]	; (8005de4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd6:	6013      	str	r3, [r2, #0]
}
 8005dd8:	bf00      	nop
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	58000400 	.word	0x58000400

08005de8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005dec:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <HAL_PWREx_GetVoltageRange+0x18>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	58000400 	.word	0x58000400

08005e04 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005e04:	b480      	push	{r7}
 8005e06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005e08:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	4a04      	ldr	r2, [pc, #16]	; (8005e20 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e12:	6053      	str	r3, [r2, #4]
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	58000400 	.word	0x58000400

08005e24 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e36:	d101      	bne.n	8005e3c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e000      	b.n	8005e3e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <LL_RCC_HSE_Enable>:
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e5a:	6013      	str	r3, [r2, #0]
}
 8005e5c:	bf00      	nop
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <LL_RCC_HSE_Disable>:
{
 8005e66:	b480      	push	{r7}
 8005e68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e78:	6013      	str	r3, [r2, #0]
}
 8005e7a:	bf00      	nop
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <LL_RCC_HSE_IsReady>:
{
 8005e84:	b480      	push	{r7}
 8005e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e96:	d101      	bne.n	8005e9c <LL_RCC_HSE_IsReady+0x18>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e000      	b.n	8005e9e <LL_RCC_HSE_IsReady+0x1a>
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <LL_RCC_HSI_Enable>:
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eba:	6013      	str	r3, [r2, #0]
}
 8005ebc:	bf00      	nop
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <LL_RCC_HSI_Disable>:
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ed8:	6013      	str	r3, [r2, #0]
}
 8005eda:	bf00      	nop
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <LL_RCC_HSI_IsReady>:
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef6:	d101      	bne.n	8005efc <LL_RCC_HSI_IsReady+0x18>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e000      	b.n	8005efe <LL_RCC_HSI_IsReady+0x1a>
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	061b      	lsls	r3, r3, #24
 8005f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f22:	4313      	orrs	r3, r2
 8005f24:	604b      	str	r3, [r1, #4]
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <LL_RCC_HSI48_Enable>:
{
 8005f32:	b480      	push	{r7}
 8005f34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f42:	f043 0301 	orr.w	r3, r3, #1
 8005f46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005f4a:	bf00      	nop
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <LL_RCC_HSI48_Disable>:
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f64:	f023 0301 	bic.w	r3, r3, #1
 8005f68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005f6c:	bf00      	nop
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <LL_RCC_HSI48_IsReady>:
{
 8005f76:	b480      	push	{r7}
 8005f78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d101      	bne.n	8005f8e <LL_RCC_HSI48_IsReady+0x18>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e000      	b.n	8005f90 <LL_RCC_HSI48_IsReady+0x1a>
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <LL_RCC_LSE_Enable>:
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005fb2:	bf00      	nop
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <LL_RCC_LSE_Disable>:
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005fd4:	bf00      	nop
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <LL_RCC_LSE_EnableBypass>:
{
 8005fde:	b480      	push	{r7}
 8005fe0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fee:	f043 0304 	orr.w	r3, r3, #4
 8005ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005ff6:	bf00      	nop
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <LL_RCC_LSE_DisableBypass>:
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006010:	f023 0304 	bic.w	r3, r3, #4
 8006014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006018:	bf00      	nop
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <LL_RCC_LSE_IsReady>:
{
 8006022:	b480      	push	{r7}
 8006024:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b02      	cmp	r3, #2
 8006034:	d101      	bne.n	800603a <LL_RCC_LSE_IsReady+0x18>
 8006036:	2301      	movs	r3, #1
 8006038:	e000      	b.n	800603c <LL_RCC_LSE_IsReady+0x1a>
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <LL_RCC_LSI1_Enable>:
{
 8006046:	b480      	push	{r7}
 8006048:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800604a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800604e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006056:	f043 0301 	orr.w	r3, r3, #1
 800605a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800605e:	bf00      	nop
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <LL_RCC_LSI1_Disable>:
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800606c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006078:	f023 0301 	bic.w	r3, r3, #1
 800607c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006080:	bf00      	nop
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <LL_RCC_LSI1_IsReady>:
{
 800608a:	b480      	push	{r7}
 800608c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800608e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b02      	cmp	r3, #2
 800609c:	d101      	bne.n	80060a2 <LL_RCC_LSI1_IsReady+0x18>
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <LL_RCC_LSI1_IsReady+0x1a>
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <LL_RCC_LSI2_Enable>:
{
 80060ae:	b480      	push	{r7}
 80060b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80060b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060be:	f043 0304 	orr.w	r3, r3, #4
 80060c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80060c6:	bf00      	nop
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <LL_RCC_LSI2_Disable>:
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80060d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060e0:	f023 0304 	bic.w	r3, r3, #4
 80060e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80060e8:	bf00      	nop
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <LL_RCC_LSI2_IsReady>:
{
 80060f2:	b480      	push	{r7}
 80060f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80060f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b08      	cmp	r3, #8
 8006104:	d101      	bne.n	800610a <LL_RCC_LSI2_IsReady+0x18>
 8006106:	2301      	movs	r3, #1
 8006108:	e000      	b.n	800610c <LL_RCC_LSI2_IsReady+0x1a>
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <LL_RCC_LSI2_SetTrimming>:
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800611e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006126:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006132:	4313      	orrs	r3, r2
 8006134:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <LL_RCC_MSI_Enable>:
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	6013      	str	r3, [r2, #0]
}
 8006158:	bf00      	nop
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <LL_RCC_MSI_Disable>:
{
 8006162:	b480      	push	{r7}
 8006164:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006170:	f023 0301 	bic.w	r3, r3, #1
 8006174:	6013      	str	r3, [r2, #0]
}
 8006176:	bf00      	nop
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <LL_RCC_MSI_IsReady>:
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b02      	cmp	r3, #2
 8006190:	d101      	bne.n	8006196 <LL_RCC_MSI_IsReady+0x16>
 8006192:	2301      	movs	r3, #1
 8006194:	e000      	b.n	8006198 <LL_RCC_MSI_IsReady+0x18>
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <LL_RCC_MSI_SetRange>:
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80061aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	600b      	str	r3, [r1, #0]
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <LL_RCC_MSI_GetRange>:
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80061d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061da:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2bb0      	cmp	r3, #176	; 0xb0
 80061e0:	d901      	bls.n	80061e6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80061e2:	23b0      	movs	r3, #176	; 0xb0
 80061e4:	607b      	str	r3, [r7, #4]
  return msiRange;
 80061e6:	687b      	ldr	r3, [r7, #4]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80061fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	021b      	lsls	r3, r3, #8
 800620a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800620e:	4313      	orrs	r3, r2
 8006210:	604b      	str	r3, [r1, #4]
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <LL_RCC_SetSysClkSource>:
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f023 0203 	bic.w	r2, r3, #3
 8006230:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4313      	orrs	r3, r2
 8006238:	608b      	str	r3, [r1, #8]
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <LL_RCC_GetSysClkSource>:
{
 8006246:	b480      	push	{r7}
 8006248:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800624a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 030c 	and.w	r3, r3, #12
}
 8006254:	4618      	mov	r0, r3
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <LL_RCC_SetAHBPrescaler>:
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006270:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4313      	orrs	r3, r2
 8006278:	608b      	str	r3, [r1, #8]
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <LL_C2_RCC_SetAHBPrescaler>:
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800628e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006292:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006296:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800629a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <LL_RCC_SetAHB4Prescaler>:
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80062ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80062c2:	f023 020f 	bic.w	r2, r3, #15
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	091b      	lsrs	r3, r3, #4
 80062ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062ce:	4313      	orrs	r3, r2
 80062d0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <LL_RCC_SetAPB1Prescaler>:
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80062e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	608b      	str	r3, [r1, #8]
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <LL_RCC_SetAPB2Prescaler>:
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800631a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4313      	orrs	r3, r2
 8006322:	608b      	str	r3, [r1, #8]
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <LL_RCC_GetAHBPrescaler>:
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800633e:	4618      	mov	r0, r3
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <LL_C2_RCC_GetAHBPrescaler>:
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800634c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006350:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006358:	4618      	mov	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <LL_RCC_GetAHB4Prescaler>:
{
 8006362:	b480      	push	{r7}
 8006364:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006374:	4618      	mov	r0, r3
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <LL_RCC_GetAPB1Prescaler>:
{
 800637e:	b480      	push	{r7}
 8006380:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800638c:	4618      	mov	r0, r3
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <LL_RCC_GetAPB2Prescaler>:
{
 8006396:	b480      	push	{r7}
 8006398:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800639a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <LL_RCC_PLL_Enable>:
{
 80063ae:	b480      	push	{r7}
 80063b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80063b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063c0:	6013      	str	r3, [r2, #0]
}
 80063c2:	bf00      	nop
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <LL_RCC_PLL_Disable>:
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80063d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063de:	6013      	str	r3, [r2, #0]
}
 80063e0:	bf00      	nop
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <LL_RCC_PLL_IsReady>:
{
 80063ea:	b480      	push	{r7}
 80063ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80063ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063fc:	d101      	bne.n	8006402 <LL_RCC_PLL_IsReady+0x18>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <LL_RCC_PLL_IsReady+0x1a>
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <LL_RCC_PLL_GetN>:
{
 800640e:	b480      	push	{r7}
 8006410:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	0a1b      	lsrs	r3, r3, #8
 800641a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800641e:	4618      	mov	r0, r3
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <LL_RCC_PLL_GetR>:
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800642c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006436:	4618      	mov	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <LL_RCC_PLL_GetDivider>:
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800644e:	4618      	mov	r0, r3
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <LL_RCC_PLL_GetMainSource>:
{
 8006458:	b480      	push	{r7}
 800645a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800645c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f003 0303 	and.w	r3, r3, #3
}
 8006466:	4618      	mov	r0, r3
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <LL_RCC_IsActiveFlag_HPRE>:
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800647e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006482:	d101      	bne.n	8006488 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800649c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80064a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064a8:	d101      	bne.n	80064ae <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80064ba:	b480      	push	{r7}
 80064bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80064be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80064c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ce:	d101      	bne.n	80064d4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80064d0:	2301      	movs	r3, #1
 80064d2:	e000      	b.n	80064d6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80064e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064f2:	d101      	bne.n	80064f8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006512:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006516:	d101      	bne.n	800651c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006518:	2301      	movs	r3, #1
 800651a:	e000      	b.n	800651e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006528:	b590      	push	{r4, r7, lr}
 800652a:	b08d      	sub	sp, #52	; 0x34
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e37e      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 8092 	beq.w	800666c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006548:	f7ff fe7d 	bl	8006246 <LL_RCC_GetSysClkSource>
 800654c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800654e:	f7ff ff83 	bl	8006458 <LL_RCC_PLL_GetMainSource>
 8006552:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <HAL_RCC_OscConfig+0x3e>
 800655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655c:	2b0c      	cmp	r3, #12
 800655e:	d14c      	bne.n	80065fa <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	2b01      	cmp	r3, #1
 8006564:	d149      	bne.n	80065fa <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006566:	f7ff fe0b 	bl	8006180 <LL_RCC_MSI_IsReady>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <HAL_RCC_OscConfig+0x54>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e35d      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006580:	f7ff fe23 	bl	80061ca <LL_RCC_MSI_GetRange>
 8006584:	4603      	mov	r3, r0
 8006586:	429c      	cmp	r4, r3
 8006588:	d914      	bls.n	80065b4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	4618      	mov	r0, r3
 8006590:	f000 fd5c 	bl	800704c <RCC_SetFlashLatencyFromMSIRange>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e34c      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7ff fdfd 	bl	80061a2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff fe21 	bl	80061f4 <LL_RCC_MSI_SetCalibTrimming>
 80065b2:	e013      	b.n	80065dc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff fdf2 	bl	80061a2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff fe16 	bl	80061f4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fd3d 	bl	800704c <RCC_SetFlashLatencyFromMSIRange>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e32d      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80065dc:	f000 fcda 	bl	8006f94 <HAL_RCC_GetHCLKFreq>
 80065e0:	4602      	mov	r2, r0
 80065e2:	4bb3      	ldr	r3, [pc, #716]	; (80068b0 <HAL_RCC_OscConfig+0x388>)
 80065e4:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80065e6:	4bb3      	ldr	r3, [pc, #716]	; (80068b4 <HAL_RCC_OscConfig+0x38c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fc f960 	bl	80028b0 <HAL_InitTick>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d039      	beq.n	800666a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e31e      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d01e      	beq.n	8006640 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006602:	f7ff fd9f 	bl	8006144 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006606:	f7fc fc25 	bl	8002e54 <HAL_GetTick>
 800660a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800660c:	e008      	b.n	8006620 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800660e:	f7fc fc21 	bl	8002e54 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e30b      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006620:	f7ff fdae 	bl	8006180 <LL_RCC_MSI_IsReady>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0f1      	beq.n	800660e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff fdb7 	bl	80061a2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff fddb 	bl	80061f4 <LL_RCC_MSI_SetCalibTrimming>
 800663e:	e015      	b.n	800666c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006640:	f7ff fd8f 	bl	8006162 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006644:	f7fc fc06 	bl	8002e54 <HAL_GetTick>
 8006648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800664c:	f7fc fc02 	bl	8002e54 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e2ec      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800665e:	f7ff fd8f 	bl	8006180 <LL_RCC_MSI_IsReady>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1f1      	bne.n	800664c <HAL_RCC_OscConfig+0x124>
 8006668:	e000      	b.n	800666c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800666a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d04e      	beq.n	8006716 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006678:	f7ff fde5 	bl	8006246 <LL_RCC_GetSysClkSource>
 800667c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800667e:	f7ff feeb 	bl	8006458 <LL_RCC_PLL_GetMainSource>
 8006682:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	2b08      	cmp	r3, #8
 8006688:	d005      	beq.n	8006696 <HAL_RCC_OscConfig+0x16e>
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	2b0c      	cmp	r3, #12
 800668e:	d10d      	bne.n	80066ac <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	2b03      	cmp	r3, #3
 8006694:	d10a      	bne.n	80066ac <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006696:	f7ff fbf5 	bl	8005e84 <LL_RCC_HSE_IsReady>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d039      	beq.n	8006714 <HAL_RCC_OscConfig+0x1ec>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d135      	bne.n	8006714 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e2c5      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b4:	d102      	bne.n	80066bc <HAL_RCC_OscConfig+0x194>
 80066b6:	f7ff fbc7 	bl	8005e48 <LL_RCC_HSE_Enable>
 80066ba:	e001      	b.n	80066c0 <HAL_RCC_OscConfig+0x198>
 80066bc:	f7ff fbd3 	bl	8005e66 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d012      	beq.n	80066ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c8:	f7fc fbc4 	bl	8002e54 <HAL_GetTick>
 80066cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066d0:	f7fc fbc0 	bl	8002e54 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b64      	cmp	r3, #100	; 0x64
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e2aa      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80066e2:	f7ff fbcf 	bl	8005e84 <LL_RCC_HSE_IsReady>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0f1      	beq.n	80066d0 <HAL_RCC_OscConfig+0x1a8>
 80066ec:	e013      	b.n	8006716 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ee:	f7fc fbb1 	bl	8002e54 <HAL_GetTick>
 80066f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80066f4:	e008      	b.n	8006708 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066f6:	f7fc fbad 	bl	8002e54 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	2b64      	cmp	r3, #100	; 0x64
 8006702:	d901      	bls.n	8006708 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e297      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006708:	f7ff fbbc 	bl	8005e84 <LL_RCC_HSE_IsReady>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f1      	bne.n	80066f6 <HAL_RCC_OscConfig+0x1ce>
 8006712:	e000      	b.n	8006716 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d051      	beq.n	80067c6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006722:	f7ff fd90 	bl	8006246 <LL_RCC_GetSysClkSource>
 8006726:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006728:	f7ff fe96 	bl	8006458 <LL_RCC_PLL_GetMainSource>
 800672c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2b04      	cmp	r3, #4
 8006732:	d005      	beq.n	8006740 <HAL_RCC_OscConfig+0x218>
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	2b0c      	cmp	r3, #12
 8006738:	d113      	bne.n	8006762 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d110      	bne.n	8006762 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006740:	f7ff fbd0 	bl	8005ee4 <LL_RCC_HSI_IsReady>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d005      	beq.n	8006756 <HAL_RCC_OscConfig+0x22e>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e270      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff fbd4 	bl	8005f08 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006760:	e031      	b.n	80067c6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d019      	beq.n	800679e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800676a:	f7ff fb9d 	bl	8005ea8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676e:	f7fc fb71 	bl	8002e54 <HAL_GetTick>
 8006772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006776:	f7fc fb6d 	bl	8002e54 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e257      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006788:	f7ff fbac 	bl	8005ee4 <LL_RCC_HSI_IsReady>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0f1      	beq.n	8006776 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff fbb6 	bl	8005f08 <LL_RCC_HSI_SetCalibTrimming>
 800679c:	e013      	b.n	80067c6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800679e:	f7ff fb92 	bl	8005ec6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a2:	f7fc fb57 	bl	8002e54 <HAL_GetTick>
 80067a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80067a8:	e008      	b.n	80067bc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067aa:	f7fc fb53 	bl	8002e54 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e23d      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80067bc:	f7ff fb92 	bl	8005ee4 <LL_RCC_HSI_IsReady>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1f1      	bne.n	80067aa <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d106      	bne.n	80067e0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 80a3 	beq.w	8006926 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d076      	beq.n	80068d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d046      	beq.n	8006882 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80067f4:	f7ff fc49 	bl	800608a <LL_RCC_LSI1_IsReady>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d113      	bne.n	8006826 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80067fe:	f7ff fc22 	bl	8006046 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006802:	f7fc fb27 	bl	8002e54 <HAL_GetTick>
 8006806:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006808:	e008      	b.n	800681c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800680a:	f7fc fb23 	bl	8002e54 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b02      	cmp	r3, #2
 8006816:	d901      	bls.n	800681c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e20d      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800681c:	f7ff fc35 	bl	800608a <LL_RCC_LSI1_IsReady>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0f1      	beq.n	800680a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006826:	f7ff fc42 	bl	80060ae <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682a:	f7fc fb13 	bl	8002e54 <HAL_GetTick>
 800682e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006830:	e008      	b.n	8006844 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006832:	f7fc fb0f 	bl	8002e54 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b03      	cmp	r3, #3
 800683e:	d901      	bls.n	8006844 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e1f9      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006844:	f7ff fc55 	bl	80060f2 <LL_RCC_LSI2_IsReady>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0f1      	beq.n	8006832 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff fc5f 	bl	8006116 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006858:	f7ff fc06 	bl	8006068 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685c:	f7fc fafa 	bl	8002e54 <HAL_GetTick>
 8006860:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006864:	f7fc faf6 	bl	8002e54 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e1e0      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006876:	f7ff fc08 	bl	800608a <LL_RCC_LSI1_IsReady>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1f1      	bne.n	8006864 <HAL_RCC_OscConfig+0x33c>
 8006880:	e051      	b.n	8006926 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006882:	f7ff fbe0 	bl	8006046 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006886:	f7fc fae5 	bl	8002e54 <HAL_GetTick>
 800688a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800688c:	e008      	b.n	80068a0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800688e:	f7fc fae1 	bl	8002e54 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e1cb      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80068a0:	f7ff fbf3 	bl	800608a <LL_RCC_LSI1_IsReady>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d0f1      	beq.n	800688e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80068aa:	f7ff fc11 	bl	80060d0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80068ae:	e00c      	b.n	80068ca <HAL_RCC_OscConfig+0x3a2>
 80068b0:	2000001c 	.word	0x2000001c
 80068b4:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80068b8:	f7fc facc 	bl	8002e54 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e1b6      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80068ca:	f7ff fc12 	bl	80060f2 <LL_RCC_LSI2_IsReady>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1f1      	bne.n	80068b8 <HAL_RCC_OscConfig+0x390>
 80068d4:	e027      	b.n	8006926 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80068d6:	f7ff fbfb 	bl	80060d0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068da:	f7fc fabb 	bl	8002e54 <HAL_GetTick>
 80068de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80068e0:	e008      	b.n	80068f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80068e2:	f7fc fab7 	bl	8002e54 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d901      	bls.n	80068f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e1a1      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80068f4:	f7ff fbfd 	bl	80060f2 <LL_RCC_LSI2_IsReady>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f1      	bne.n	80068e2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80068fe:	f7ff fbb3 	bl	8006068 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006902:	f7fc faa7 	bl	8002e54 <HAL_GetTick>
 8006906:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006908:	e008      	b.n	800691c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800690a:	f7fc faa3 	bl	8002e54 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e18d      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800691c:	f7ff fbb5 	bl	800608a <LL_RCC_LSI1_IsReady>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1f1      	bne.n	800690a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0304 	and.w	r3, r3, #4
 800692e:	2b00      	cmp	r3, #0
 8006930:	d05b      	beq.n	80069ea <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006932:	4bb5      	ldr	r3, [pc, #724]	; (8006c08 <HAL_RCC_OscConfig+0x6e0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693a:	2b00      	cmp	r3, #0
 800693c:	d114      	bne.n	8006968 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800693e:	f7ff fa43 	bl	8005dc8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006942:	f7fc fa87 	bl	8002e54 <HAL_GetTick>
 8006946:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006948:	e008      	b.n	800695c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800694a:	f7fc fa83 	bl	8002e54 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d901      	bls.n	800695c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e16d      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800695c:	4baa      	ldr	r3, [pc, #680]	; (8006c08 <HAL_RCC_OscConfig+0x6e0>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006964:	2b00      	cmp	r3, #0
 8006966:	d0f0      	beq.n	800694a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d102      	bne.n	8006976 <HAL_RCC_OscConfig+0x44e>
 8006970:	f7ff fb13 	bl	8005f9a <LL_RCC_LSE_Enable>
 8006974:	e00c      	b.n	8006990 <HAL_RCC_OscConfig+0x468>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	2b05      	cmp	r3, #5
 800697c:	d104      	bne.n	8006988 <HAL_RCC_OscConfig+0x460>
 800697e:	f7ff fb2e 	bl	8005fde <LL_RCC_LSE_EnableBypass>
 8006982:	f7ff fb0a 	bl	8005f9a <LL_RCC_LSE_Enable>
 8006986:	e003      	b.n	8006990 <HAL_RCC_OscConfig+0x468>
 8006988:	f7ff fb18 	bl	8005fbc <LL_RCC_LSE_Disable>
 800698c:	f7ff fb38 	bl	8006000 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d014      	beq.n	80069c2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006998:	f7fc fa5c 	bl	8002e54 <HAL_GetTick>
 800699c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800699e:	e00a      	b.n	80069b6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a0:	f7fc fa58 	bl	8002e54 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e140      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80069b6:	f7ff fb34 	bl	8006022 <LL_RCC_LSE_IsReady>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0ef      	beq.n	80069a0 <HAL_RCC_OscConfig+0x478>
 80069c0:	e013      	b.n	80069ea <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c2:	f7fc fa47 	bl	8002e54 <HAL_GetTick>
 80069c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80069c8:	e00a      	b.n	80069e0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ca:	f7fc fa43 	bl	8002e54 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d8:	4293      	cmp	r3, r2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e12b      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80069e0:	f7ff fb1f 	bl	8006022 <LL_RCC_LSE_IsReady>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1ef      	bne.n	80069ca <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d02c      	beq.n	8006a50 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d014      	beq.n	8006a28 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069fe:	f7ff fa98 	bl	8005f32 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a02:	f7fc fa27 	bl	8002e54 <HAL_GetTick>
 8006a06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006a08:	e008      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a0a:	f7fc fa23 	bl	8002e54 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d901      	bls.n	8006a1c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e10d      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006a1c:	f7ff faab 	bl	8005f76 <LL_RCC_HSI48_IsReady>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0f1      	beq.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 8006a26:	e013      	b.n	8006a50 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a28:	f7ff fa94 	bl	8005f54 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2c:	f7fc fa12 	bl	8002e54 <HAL_GetTick>
 8006a30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a34:	f7fc fa0e 	bl	8002e54 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e0f8      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006a46:	f7ff fa96 	bl	8005f76 <LL_RCC_HSI48_IsReady>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1f1      	bne.n	8006a34 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 80ee 	beq.w	8006c36 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a5a:	f7ff fbf4 	bl	8006246 <LL_RCC_GetSysClkSource>
 8006a5e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	f040 80af 	bne.w	8006bd0 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f003 0203 	and.w	r2, r3, #3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d123      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d11c      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	0a1b      	lsrs	r3, r3, #8
 8006a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d114      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d10d      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d106      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d05d      	beq.n	8006b84 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2b0c      	cmp	r3, #12
 8006acc:	d058      	beq.n	8006b80 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e0ab      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006ae0:	f7ff fc74 	bl	80063cc <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ae4:	f7fc f9b6 	bl	8002e54 <HAL_GetTick>
 8006ae8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aea:	e008      	b.n	8006afe <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aec:	f7fc f9b2 	bl	8002e54 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d901      	bls.n	8006afe <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e09c      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1ef      	bne.n	8006aec <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	4b3e      	ldr	r3, [pc, #248]	; (8006c0c <HAL_RCC_OscConfig+0x6e4>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b1e:	4311      	orrs	r1, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b24:	0212      	lsls	r2, r2, #8
 8006b26:	4311      	orrs	r1, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b2c:	4311      	orrs	r1, r2
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006b32:	4311      	orrs	r1, r2
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b42:	f7ff fc34 	bl	80063ae <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b54:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b56:	f7fc f97d 	bl	8002e54 <HAL_GetTick>
 8006b5a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b5c:	e008      	b.n	8006b70 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b5e:	f7fc f979 	bl	8002e54 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e063      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0ef      	beq.n	8006b5e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b7e:	e05a      	b.n	8006c36 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e059      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d151      	bne.n	8006c36 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006b92:	f7ff fc0c 	bl	80063ae <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ba6:	f7fc f955 	bl	8002e54 <HAL_GetTick>
 8006baa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bac:	e008      	b.n	8006bc0 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bae:	f7fc f951 	bl	8002e54 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e03b      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0ef      	beq.n	8006bae <HAL_RCC_OscConfig+0x686>
 8006bce:	e032      	b.n	8006c36 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	2b0c      	cmp	r3, #12
 8006bd4:	d02d      	beq.n	8006c32 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd6:	f7ff fbf9 	bl	80063cc <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006be4:	f023 0303 	bic.w	r3, r3, #3
 8006be8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8006bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bf4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bfc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bfe:	f7fc f929 	bl	8002e54 <HAL_GetTick>
 8006c02:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c04:	e00d      	b.n	8006c22 <HAL_RCC_OscConfig+0x6fa>
 8006c06:	bf00      	nop
 8006c08:	58000400 	.word	0x58000400
 8006c0c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c10:	f7fc f920 	bl	8002e54 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e00a      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1ef      	bne.n	8006c10 <HAL_RCC_OscConfig+0x6e8>
 8006c30:	e001      	b.n	8006c36 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e000      	b.n	8006c38 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3734      	adds	r7, #52	; 0x34
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd90      	pop	{r4, r7, pc}

08006c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e12d      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c54:	4b98      	ldr	r3, [pc, #608]	; (8006eb8 <HAL_RCC_ClockConfig+0x278>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d91b      	bls.n	8006c9a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c62:	4b95      	ldr	r3, [pc, #596]	; (8006eb8 <HAL_RCC_ClockConfig+0x278>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f023 0207 	bic.w	r2, r3, #7
 8006c6a:	4993      	ldr	r1, [pc, #588]	; (8006eb8 <HAL_RCC_ClockConfig+0x278>)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c72:	f7fc f8ef 	bl	8002e54 <HAL_GetTick>
 8006c76:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c78:	e008      	b.n	8006c8c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006c7a:	f7fc f8eb 	bl	8002e54 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d901      	bls.n	8006c8c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e111      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c8c:	4b8a      	ldr	r3, [pc, #552]	; (8006eb8 <HAL_RCC_ClockConfig+0x278>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0307 	and.w	r3, r3, #7
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d1ef      	bne.n	8006c7a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d016      	beq.n	8006cd4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7ff fad7 	bl	800625e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006cb0:	f7fc f8d0 	bl	8002e54 <HAL_GetTick>
 8006cb4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006cb6:	e008      	b.n	8006cca <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006cb8:	f7fc f8cc 	bl	8002e54 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e0f2      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006cca:	f7ff fbd1 	bl	8006470 <LL_RCC_IsActiveFlag_HPRE>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f1      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0320 	and.w	r3, r3, #32
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d016      	beq.n	8006d0e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff face 	bl	8006286 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006cea:	f7fc f8b3 	bl	8002e54 <HAL_GetTick>
 8006cee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006cf0:	e008      	b.n	8006d04 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006cf2:	f7fc f8af 	bl	8002e54 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e0d5      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006d04:	f7ff fbc6 	bl	8006494 <LL_RCC_IsActiveFlag_C2HPRE>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0f1      	beq.n	8006cf2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d016      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff fac7 	bl	80062b2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d24:	f7fc f896 	bl	8002e54 <HAL_GetTick>
 8006d28:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006d2a:	e008      	b.n	8006d3e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d2c:	f7fc f892 	bl	8002e54 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e0b8      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006d3e:	f7ff fbbc 	bl	80064ba <LL_RCC_IsActiveFlag_SHDHPRE>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0f1      	beq.n	8006d2c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d016      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff fac1 	bl	80062e0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d5e:	f7fc f879 	bl	8002e54 <HAL_GetTick>
 8006d62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006d64:	e008      	b.n	8006d78 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d66:	f7fc f875 	bl	8002e54 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d901      	bls.n	8006d78 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e09b      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006d78:	f7ff fbb2 	bl	80064e0 <LL_RCC_IsActiveFlag_PPRE1>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0f1      	beq.n	8006d66 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d017      	beq.n	8006dbe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7ff fab7 	bl	8006308 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d9a:	f7fc f85b 	bl	8002e54 <HAL_GetTick>
 8006d9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006da0:	e008      	b.n	8006db4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006da2:	f7fc f857 	bl	8002e54 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e07d      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006db4:	f7ff fba6 	bl	8006504 <LL_RCC_IsActiveFlag_PPRE2>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0f1      	beq.n	8006da2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d043      	beq.n	8006e52 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d106      	bne.n	8006de0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006dd2:	f7ff f857 	bl	8005e84 <LL_RCC_HSE_IsReady>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d11e      	bne.n	8006e1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e067      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d106      	bne.n	8006df6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006de8:	f7ff faff 	bl	80063ea <LL_RCC_PLL_IsReady>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d113      	bne.n	8006e1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e05c      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d106      	bne.n	8006e0c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006dfe:	f7ff f9bf 	bl	8006180 <LL_RCC_MSI_IsReady>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d108      	bne.n	8006e1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e051      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006e0c:	f7ff f86a 	bl	8005ee4 <LL_RCC_HSI_IsReady>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e04a      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff f9fd 	bl	800621e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e24:	f7fc f816 	bl	8002e54 <HAL_GetTick>
 8006e28:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e2a:	e00a      	b.n	8006e42 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e2c:	f7fc f812 	bl	8002e54 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e036      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e42:	f7ff fa00 	bl	8006246 <LL_RCC_GetSysClkSource>
 8006e46:	4602      	mov	r2, r0
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d1ec      	bne.n	8006e2c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e52:	4b19      	ldr	r3, [pc, #100]	; (8006eb8 <HAL_RCC_ClockConfig+0x278>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d21b      	bcs.n	8006e98 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e60:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <HAL_RCC_ClockConfig+0x278>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f023 0207 	bic.w	r2, r3, #7
 8006e68:	4913      	ldr	r1, [pc, #76]	; (8006eb8 <HAL_RCC_ClockConfig+0x278>)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e70:	f7fb fff0 	bl	8002e54 <HAL_GetTick>
 8006e74:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e78:	f7fb ffec 	bl	8002e54 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e012      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e8a:	4b0b      	ldr	r3, [pc, #44]	; (8006eb8 <HAL_RCC_ClockConfig+0x278>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d1ef      	bne.n	8006e78 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006e98:	f000 f87c 	bl	8006f94 <HAL_RCC_GetHCLKFreq>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	4b07      	ldr	r3, [pc, #28]	; (8006ebc <HAL_RCC_ClockConfig+0x27c>)
 8006ea0:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006ea2:	f7fb ffe3 	bl	8002e6c <HAL_GetTickPrio>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fb fd01 	bl	80028b0 <HAL_InitTick>
 8006eae:	4603      	mov	r3, r0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	58004000 	.word	0x58004000
 8006ebc:	2000001c 	.word	0x2000001c

08006ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ec0:	b590      	push	{r4, r7, lr}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ec6:	f7ff f9be 	bl	8006246 <LL_RCC_GetSysClkSource>
 8006eca:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006ed2:	f7ff f97a 	bl	80061ca <LL_RCC_MSI_GetRange>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	091b      	lsrs	r3, r3, #4
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	4a2a      	ldr	r2, [pc, #168]	; (8006f88 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ee4:	60fb      	str	r3, [r7, #12]
 8006ee6:	e04a      	b.n	8006f7e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d102      	bne.n	8006ef4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006eee:	4b27      	ldr	r3, [pc, #156]	; (8006f8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	e044      	b.n	8006f7e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b08      	cmp	r3, #8
 8006ef8:	d10a      	bne.n	8006f10 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006efa:	f7fe ff93 	bl	8005e24 <LL_RCC_HSE_IsEnabledDiv2>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d102      	bne.n	8006f0a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006f04:	4b21      	ldr	r3, [pc, #132]	; (8006f8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	e039      	b.n	8006f7e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006f0a:	4b21      	ldr	r3, [pc, #132]	; (8006f90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	e036      	b.n	8006f7e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006f10:	f7ff faa2 	bl	8006458 <LL_RCC_PLL_GetMainSource>
 8006f14:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d002      	beq.n	8006f22 <HAL_RCC_GetSysClockFreq+0x62>
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d003      	beq.n	8006f28 <HAL_RCC_GetSysClockFreq+0x68>
 8006f20:	e00d      	b.n	8006f3e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006f22:	4b1a      	ldr	r3, [pc, #104]	; (8006f8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8006f24:	60bb      	str	r3, [r7, #8]
        break;
 8006f26:	e015      	b.n	8006f54 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006f28:	f7fe ff7c 	bl	8005e24 <LL_RCC_HSE_IsEnabledDiv2>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d102      	bne.n	8006f38 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006f32:	4b16      	ldr	r3, [pc, #88]	; (8006f8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8006f34:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006f36:	e00d      	b.n	8006f54 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8006f38:	4b15      	ldr	r3, [pc, #84]	; (8006f90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f3a:	60bb      	str	r3, [r7, #8]
        break;
 8006f3c:	e00a      	b.n	8006f54 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006f3e:	f7ff f944 	bl	80061ca <LL_RCC_MSI_GetRange>
 8006f42:	4603      	mov	r3, r0
 8006f44:	091b      	lsrs	r3, r3, #4
 8006f46:	f003 030f 	and.w	r3, r3, #15
 8006f4a:	4a0f      	ldr	r2, [pc, #60]	; (8006f88 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f50:	60bb      	str	r3, [r7, #8]
        break;
 8006f52:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8006f54:	f7ff fa5b 	bl	800640e <LL_RCC_PLL_GetN>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	fb03 f402 	mul.w	r4, r3, r2
 8006f60:	f7ff fa6e 	bl	8006440 <LL_RCC_PLL_GetDivider>
 8006f64:	4603      	mov	r3, r0
 8006f66:	091b      	lsrs	r3, r3, #4
 8006f68:	3301      	adds	r3, #1
 8006f6a:	fbb4 f4f3 	udiv	r4, r4, r3
 8006f6e:	f7ff fa5b 	bl	8006428 <LL_RCC_PLL_GetR>
 8006f72:	4603      	mov	r3, r0
 8006f74:	0f5b      	lsrs	r3, r3, #29
 8006f76:	3301      	adds	r3, #1
 8006f78:	fbb4 f3f3 	udiv	r3, r4, r3
 8006f7c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd90      	pop	{r4, r7, pc}
 8006f88:	08013edc 	.word	0x08013edc
 8006f8c:	00f42400 	.word	0x00f42400
 8006f90:	01e84800 	.word	0x01e84800

08006f94 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f94:	b598      	push	{r3, r4, r7, lr}
 8006f96:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006f98:	f7ff ff92 	bl	8006ec0 <HAL_RCC_GetSysClockFreq>
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	f7ff f9c7 	bl	8006330 <LL_RCC_GetAHBPrescaler>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	091b      	lsrs	r3, r3, #4
 8006fa6:	f003 030f 	and.w	r3, r3, #15
 8006faa:	4a03      	ldr	r2, [pc, #12]	; (8006fb8 <HAL_RCC_GetHCLKFreq+0x24>)
 8006fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fb0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	bd98      	pop	{r3, r4, r7, pc}
 8006fb8:	08013e7c 	.word	0x08013e7c

08006fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fbc:	b598      	push	{r3, r4, r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006fc0:	f7ff ffe8 	bl	8006f94 <HAL_RCC_GetHCLKFreq>
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	f7ff f9e6 	bl	8006396 <LL_RCC_GetAPB2Prescaler>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	0adb      	lsrs	r3, r3, #11
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	4a04      	ldr	r2, [pc, #16]	; (8006fe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd8:	f003 031f 	and.w	r3, r3, #31
 8006fdc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	bd98      	pop	{r3, r4, r7, pc}
 8006fe4:	08013ebc 	.word	0x08013ebc

08006fe8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	226f      	movs	r2, #111	; 0x6f
 8006ff6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8006ff8:	f7ff f925 	bl	8006246 <LL_RCC_GetSysClkSource>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8007002:	f7ff f995 	bl	8006330 <LL_RCC_GetAHBPrescaler>
 8007006:	4602      	mov	r2, r0
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800700c:	f7ff f9b7 	bl	800637e <LL_RCC_GetAPB1Prescaler>
 8007010:	4602      	mov	r2, r0
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8007016:	f7ff f9be 	bl	8006396 <LL_RCC_GetAPB2Prescaler>
 800701a:	4602      	mov	r2, r0
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8007020:	f7ff f992 	bl	8006348 <LL_C2_RCC_GetAHBPrescaler>
 8007024:	4602      	mov	r2, r0
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800702a:	f7ff f99a 	bl	8006362 <LL_RCC_GetAHB4Prescaler>
 800702e:	4602      	mov	r2, r0
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007034:	4b04      	ldr	r3, [pc, #16]	; (8007048 <HAL_RCC_GetClockConfig+0x60>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0207 	and.w	r2, r3, #7
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	601a      	str	r2, [r3, #0]
}
 8007040:	bf00      	nop
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	58004000 	.word	0x58004000

0800704c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800704c:	b590      	push	{r4, r7, lr}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2bb0      	cmp	r3, #176	; 0xb0
 8007058:	d903      	bls.n	8007062 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800705a:	4b15      	ldr	r3, [pc, #84]	; (80070b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800705c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	e007      	b.n	8007072 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	091b      	lsrs	r3, r3, #4
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	4a11      	ldr	r2, [pc, #68]	; (80070b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800706c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007070:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007072:	f7ff f976 	bl	8006362 <LL_RCC_GetAHB4Prescaler>
 8007076:	4603      	mov	r3, r0
 8007078:	091b      	lsrs	r3, r3, #4
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	4a0d      	ldr	r2, [pc, #52]	; (80070b4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	fbb2 f3f3 	udiv	r3, r2, r3
 800708a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	4a0a      	ldr	r2, [pc, #40]	; (80070b8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007090:	fba2 2303 	umull	r2, r3, r2, r3
 8007094:	0c9c      	lsrs	r4, r3, #18
 8007096:	f7fe fea7 	bl	8005de8 <HAL_PWREx_GetVoltageRange>
 800709a:	4603      	mov	r3, r0
 800709c:	4619      	mov	r1, r3
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 f80c 	bl	80070bc <RCC_SetFlashLatency>
 80070a4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd90      	pop	{r4, r7, pc}
 80070ae:	bf00      	nop
 80070b0:	08013edc 	.word	0x08013edc
 80070b4:	08013e7c 	.word	0x08013e7c
 80070b8:	431bde83 	.word	0x431bde83

080070bc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80070bc:	b590      	push	{r4, r7, lr}
 80070be:	b093      	sub	sp, #76	; 0x4c
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80070c6:	4b39      	ldr	r3, [pc, #228]	; (80071ac <RCC_SetFlashLatency+0xf0>)
 80070c8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80070cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80070d2:	4a37      	ldr	r2, [pc, #220]	; (80071b0 <RCC_SetFlashLatency+0xf4>)
 80070d4:	f107 031c 	add.w	r3, r7, #28
 80070d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80070da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80070de:	4b35      	ldr	r3, [pc, #212]	; (80071b4 <RCC_SetFlashLatency+0xf8>)
 80070e0:	f107 040c 	add.w	r4, r7, #12
 80070e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80070ea:	2300      	movs	r3, #0
 80070ec:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070f4:	d11c      	bne.n	8007130 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80070f6:	2300      	movs	r3, #0
 80070f8:	643b      	str	r3, [r7, #64]	; 0x40
 80070fa:	e015      	b.n	8007128 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80070fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007104:	4413      	add	r3, r2
 8007106:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	429a      	cmp	r2, r3
 800710e:	d808      	bhi.n	8007122 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007118:	4413      	add	r3, r2
 800711a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800711e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007120:	e022      	b.n	8007168 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007124:	3301      	adds	r3, #1
 8007126:	643b      	str	r3, [r7, #64]	; 0x40
 8007128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800712a:	2b03      	cmp	r3, #3
 800712c:	d9e6      	bls.n	80070fc <RCC_SetFlashLatency+0x40>
 800712e:	e01b      	b.n	8007168 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007130:	2300      	movs	r3, #0
 8007132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007134:	e015      	b.n	8007162 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800713e:	4413      	add	r3, r2
 8007140:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	429a      	cmp	r2, r3
 8007148:	d808      	bhi.n	800715c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800714a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007152:	4413      	add	r3, r2
 8007154:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007158:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800715a:	e005      	b.n	8007168 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800715c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715e:	3301      	adds	r3, #1
 8007160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007164:	2b02      	cmp	r3, #2
 8007166:	d9e6      	bls.n	8007136 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8007168:	4b13      	ldr	r3, [pc, #76]	; (80071b8 <RCC_SetFlashLatency+0xfc>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f023 0207 	bic.w	r2, r3, #7
 8007170:	4911      	ldr	r1, [pc, #68]	; (80071b8 <RCC_SetFlashLatency+0xfc>)
 8007172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007174:	4313      	orrs	r3, r2
 8007176:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007178:	f7fb fe6c 	bl	8002e54 <HAL_GetTick>
 800717c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800717e:	e008      	b.n	8007192 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007180:	f7fb fe68 	bl	8002e54 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d901      	bls.n	8007192 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e007      	b.n	80071a2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007192:	4b09      	ldr	r3, [pc, #36]	; (80071b8 <RCC_SetFlashLatency+0xfc>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0307 	and.w	r3, r3, #7
 800719a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800719c:	429a      	cmp	r2, r3
 800719e:	d1ef      	bne.n	8007180 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	374c      	adds	r7, #76	; 0x4c
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd90      	pop	{r4, r7, pc}
 80071aa:	bf00      	nop
 80071ac:	08013ad0 	.word	0x08013ad0
 80071b0:	08013ae0 	.word	0x08013ae0
 80071b4:	08013aec 	.word	0x08013aec
 80071b8:	58004000 	.word	0x58004000

080071bc <LL_RCC_LSE_IsEnabled>:
{
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80071c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <LL_RCC_LSE_IsEnabled+0x18>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <LL_RCC_LSE_IsEnabled+0x1a>
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <LL_RCC_LSE_IsReady>:
{
 80071e0:	b480      	push	{r7}
 80071e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80071e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d101      	bne.n	80071f8 <LL_RCC_LSE_IsReady+0x18>
 80071f4:	2301      	movs	r3, #1
 80071f6:	e000      	b.n	80071fa <LL_RCC_LSE_IsReady+0x1a>
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <LL_RCC_SetRFWKPClockSource>:
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800720c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007214:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007218:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4313      	orrs	r3, r2
 8007220:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <LL_RCC_SetSMPSClockSource>:
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	f023 0203 	bic.w	r2, r3, #3
 8007242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4313      	orrs	r3, r2
 800724a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <LL_RCC_SetSMPSPrescaler>:
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800726a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4313      	orrs	r3, r2
 8007272:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <LL_RCC_SetUSARTClockSource>:
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800728c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007290:	f023 0203 	bic.w	r2, r3, #3
 8007294:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4313      	orrs	r3, r2
 800729c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <LL_RCC_SetLPUARTClockSource>:
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80072b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80072c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <LL_RCC_SetI2CClockSource>:
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80072e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	091b      	lsrs	r3, r3, #4
 80072ec:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80072f0:	43db      	mvns	r3, r3
 80072f2:	401a      	ands	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	011b      	lsls	r3, r3, #4
 80072f8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80072fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007300:	4313      	orrs	r3, r2
 8007302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <LL_RCC_SetLPTIMClockSource>:
{
 8007312:	b480      	push	{r7}
 8007314:	b083      	sub	sp, #12
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800731a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800731e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	0c1b      	lsrs	r3, r3, #16
 8007326:	041b      	lsls	r3, r3, #16
 8007328:	43db      	mvns	r3, r3
 800732a:	401a      	ands	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	041b      	lsls	r3, r3, #16
 8007330:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007334:	4313      	orrs	r3, r2
 8007336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <LL_RCC_SetSAIClockSource>:
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800734e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007356:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800735a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4313      	orrs	r3, r2
 8007362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <LL_RCC_SetRNGClockSource>:
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800737a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800737e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007382:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4313      	orrs	r3, r2
 800738e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <LL_RCC_SetCLK48ClockSource>:
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80073a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80073be:	bf00      	nop
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <LL_RCC_SetUSBClockSource>:
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b082      	sub	sp, #8
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7ff ffe3 	bl	800739e <LL_RCC_SetCLK48ClockSource>
}
 80073d8:	bf00      	nop
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <LL_RCC_SetADCClockSource>:
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80073e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80073f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <LL_RCC_SetRTCClockSource>:
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007420:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4313      	orrs	r3, r2
 8007428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <LL_RCC_GetRTCClockSource>:
{
 8007438:	b480      	push	{r7}
 800743a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800743c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007444:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007448:	4618      	mov	r0, r3
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <LL_RCC_ForceBackupDomainReset>:
{
 8007452:	b480      	push	{r7}
 8007454:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800745a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800745e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800746a:	bf00      	nop
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007474:	b480      	push	{r7}
 8007476:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800747c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007480:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800748c:	bf00      	nop
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <LL_RCC_PLLSAI1_Enable>:
{
 8007496:	b480      	push	{r7}
 8007498:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800749a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074a8:	6013      	str	r3, [r2, #0]
}
 80074aa:	bf00      	nop
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <LL_RCC_PLLSAI1_Disable>:
{
 80074b4:	b480      	push	{r7}
 80074b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80074b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074c6:	6013      	str	r3, [r2, #0]
}
 80074c8:	bf00      	nop
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <LL_RCC_PLLSAI1_IsReady>:
{
 80074d2:	b480      	push	{r7}
 80074d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80074d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074e4:	d101      	bne.n	80074ea <LL_RCC_PLLSAI1_IsReady+0x18>
 80074e6:	2301      	movs	r3, #1
 80074e8:	e000      	b.n	80074ec <LL_RCC_PLLSAI1_IsReady+0x1a>
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b088      	sub	sp, #32
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80074fe:	2300      	movs	r3, #0
 8007500:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007502:	2300      	movs	r3, #0
 8007504:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750e:	2b00      	cmp	r3, #0
 8007510:	d033      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800751a:	d00c      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800751c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007520:	d802      	bhi.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007522:	2b00      	cmp	r3, #0
 8007524:	d010      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007526:	e017      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007528:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800752c:	d017      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x68>
 800752e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007532:	d016      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8007534:	e010      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007544:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007546:	e00d      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3304      	adds	r3, #4
 800754c:	4618      	mov	r0, r3
 800754e:	f000 f947 	bl	80077e0 <RCCEx_PLLSAI1_ConfigNP>
 8007552:	4603      	mov	r3, r0
 8007554:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007556:	e005      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	77fb      	strb	r3, [r7, #31]
        break;
 800755c:	e002      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800755e:	bf00      	nop
 8007560:	e000      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8007562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007564:	7ffb      	ldrb	r3, [r7, #31]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d105      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	4618      	mov	r0, r3
 8007570:	f7ff fee9 	bl	8007346 <LL_RCC_SetSAIClockSource>
 8007574:	e001      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007576:	7ffb      	ldrb	r3, [r7, #31]
 8007578:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007582:	2b00      	cmp	r3, #0
 8007584:	d046      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007586:	f7ff ff57 	bl	8007438 <LL_RCC_GetRTCClockSource>
 800758a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	429a      	cmp	r2, r3
 8007594:	d03c      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007596:	f7fe fc17 	bl	8005dc8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d105      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff ff31 	bl	800740c <LL_RCC_SetRTCClockSource>
 80075aa:	e02e      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80075ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80075b6:	f7ff ff4c 	bl	8007452 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80075ba:	f7ff ff5b 	bl	8007474 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	4313      	orrs	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80075cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80075d6:	f7ff fdf1 	bl	80071bc <LL_RCC_LSE_IsEnabled>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d114      	bne.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80075e0:	f7fb fc38 	bl	8002e54 <HAL_GetTick>
 80075e4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80075e6:	e00b      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075e8:	f7fb fc34 	bl	8002e54 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d902      	bls.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	77fb      	strb	r3, [r7, #31]
              break;
 80075fe:	e004      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007600:	f7ff fdee 	bl	80071e0 <LL_RCC_LSE_IsReady>
 8007604:	4603      	mov	r3, r0
 8007606:	2b01      	cmp	r3, #1
 8007608:	d1ee      	bne.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800760a:	7ffb      	ldrb	r3, [r7, #31]
 800760c:	77bb      	strb	r3, [r7, #30]
 800760e:	e001      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007610:	7ffb      	ldrb	r3, [r7, #31]
 8007612:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d004      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	4618      	mov	r0, r3
 8007626:	f7ff fe2b 	bl	8007280 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d004      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff fe36 	bl	80072ac <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0310 	and.w	r3, r3, #16
 8007648:	2b00      	cmp	r3, #0
 800764a:	d004      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff fe5e 	bl	8007312 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0320 	and.w	r3, r3, #32
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff fe53 	bl	8007312 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0304 	and.w	r3, r3, #4
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff fe2b 	bl	80072d8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0308 	and.w	r3, r3, #8
 800768a:	2b00      	cmp	r3, #0
 800768c:	d004      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff fe20 	bl	80072d8 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d022      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff fe8e 	bl	80073ca <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076b6:	d107      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80076b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076c6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076d0:	d10b      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3304      	adds	r3, #4
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 f8dd 	bl	8007896 <RCCEx_PLLSAI1_ConfigNQ>
 80076dc:	4603      	mov	r3, r0
 80076de:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80076e0:	7ffb      	ldrb	r3, [r7, #31]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 80076e6:	7ffb      	ldrb	r3, [r7, #31]
 80076e8:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d02b      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076fe:	d008      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007708:	d003      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770e:	2b00      	cmp	r3, #0
 8007710:	d105      	bne.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x228>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007716:	4618      	mov	r0, r3
 8007718:	f7ff fe2b 	bl	8007372 <LL_RCC_SetRNGClockSource>
 800771c:	e00a      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	2000      	movs	r0, #0
 800772a:	f7ff fe22 	bl	8007372 <LL_RCC_SetRNGClockSource>
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f7ff fe35 	bl	800739e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800773c:	d107      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800773e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007748:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800774c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007756:	2b00      	cmp	r3, #0
 8007758:	d022      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff fe3e 	bl	80073e0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800776c:	d107      	bne.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800776e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800777c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007786:	d10b      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3304      	adds	r3, #4
 800778c:	4618      	mov	r0, r3
 800778e:	f000 f8dd 	bl	800794c <RCCEx_PLLSAI1_ConfigNR>
 8007792:	4603      	mov	r3, r0
 8007794:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007796:	7ffb      	ldrb	r3, [r7, #31]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 800779c:	7ffb      	ldrb	r3, [r7, #31]
 800779e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d004      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff fd27 	bl	8007204 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d009      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7ff fd46 	bl	8007258 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff fd2d 	bl	8007230 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80077d6:	7fbb      	ldrb	r3, [r7, #30]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3720      	adds	r7, #32
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80077ec:	f7ff fe62 	bl	80074b4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80077f0:	f7fb fb30 	bl	8002e54 <HAL_GetTick>
 80077f4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80077f6:	e009      	b.n	800780c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077f8:	f7fb fb2c 	bl	8002e54 <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	2b02      	cmp	r3, #2
 8007804:	d902      	bls.n	800780c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	73fb      	strb	r3, [r7, #15]
      break;
 800780a:	e004      	b.n	8007816 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800780c:	f7ff fe61 	bl	80074d2 <LL_RCC_PLLSAI1_IsReady>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1f0      	bne.n	80077f8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d137      	bne.n	800788c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800781c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	021b      	lsls	r3, r3, #8
 800782c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007830:	4313      	orrs	r3, r2
 8007832:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007846:	4313      	orrs	r3, r2
 8007848:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800784a:	f7ff fe24 	bl	8007496 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800784e:	f7fb fb01 	bl	8002e54 <HAL_GetTick>
 8007852:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007854:	e009      	b.n	800786a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007856:	f7fb fafd 	bl	8002e54 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	2b02      	cmp	r3, #2
 8007862:	d902      	bls.n	800786a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	73fb      	strb	r3, [r7, #15]
        break;
 8007868:	e004      	b.n	8007874 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800786a:	f7ff fe32 	bl	80074d2 <LL_RCC_PLLSAI1_IsReady>
 800786e:	4603      	mov	r3, r0
 8007870:	2b01      	cmp	r3, #1
 8007872:	d1f0      	bne.n	8007856 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007874:	7bfb      	ldrb	r3, [r7, #15]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d108      	bne.n	800788c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800787a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800787e:	691a      	ldr	r2, [r3, #16]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007888:	4313      	orrs	r3, r2
 800788a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800788c:	7bfb      	ldrb	r3, [r7, #15]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b084      	sub	sp, #16
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80078a2:	f7ff fe07 	bl	80074b4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078a6:	f7fb fad5 	bl	8002e54 <HAL_GetTick>
 80078aa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80078ac:	e009      	b.n	80078c2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078ae:	f7fb fad1 	bl	8002e54 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d902      	bls.n	80078c2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	73fb      	strb	r3, [r7, #15]
      break;
 80078c0:	e004      	b.n	80078cc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80078c2:	f7ff fe06 	bl	80074d2 <LL_RCC_PLLSAI1_IsReady>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1f0      	bne.n	80078ae <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d137      	bne.n	8007942 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80078d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	021b      	lsls	r3, r3, #8
 80078e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078e6:	4313      	orrs	r3, r2
 80078e8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80078ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078fc:	4313      	orrs	r3, r2
 80078fe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007900:	f7ff fdc9 	bl	8007496 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007904:	f7fb faa6 	bl	8002e54 <HAL_GetTick>
 8007908:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800790a:	e009      	b.n	8007920 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800790c:	f7fb faa2 	bl	8002e54 <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	2b02      	cmp	r3, #2
 8007918:	d902      	bls.n	8007920 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	73fb      	strb	r3, [r7, #15]
        break;
 800791e:	e004      	b.n	800792a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007920:	f7ff fdd7 	bl	80074d2 <LL_RCC_PLLSAI1_IsReady>
 8007924:	4603      	mov	r3, r0
 8007926:	2b01      	cmp	r3, #1
 8007928:	d1f0      	bne.n	800790c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800792a:	7bfb      	ldrb	r3, [r7, #15]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d108      	bne.n	8007942 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007934:	691a      	ldr	r2, [r3, #16]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800793e:	4313      	orrs	r3, r2
 8007940:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007942:	7bfb      	ldrb	r3, [r7, #15]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007958:	f7ff fdac 	bl	80074b4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800795c:	f7fb fa7a 	bl	8002e54 <HAL_GetTick>
 8007960:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007962:	e009      	b.n	8007978 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007964:	f7fb fa76 	bl	8002e54 <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b02      	cmp	r3, #2
 8007970:	d902      	bls.n	8007978 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	73fb      	strb	r3, [r7, #15]
      break;
 8007976:	e004      	b.n	8007982 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007978:	f7ff fdab 	bl	80074d2 <LL_RCC_PLLSAI1_IsReady>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1f0      	bne.n	8007964 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007982:	7bfb      	ldrb	r3, [r7, #15]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d137      	bne.n	80079f8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	021b      	lsls	r3, r3, #8
 8007998:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800799c:	4313      	orrs	r3, r2
 800799e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80079a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079b2:	4313      	orrs	r3, r2
 80079b4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80079b6:	f7ff fd6e 	bl	8007496 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ba:	f7fb fa4b 	bl	8002e54 <HAL_GetTick>
 80079be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80079c0:	e009      	b.n	80079d6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079c2:	f7fb fa47 	bl	8002e54 <HAL_GetTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d902      	bls.n	80079d6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	73fb      	strb	r3, [r7, #15]
        break;
 80079d4:	e004      	b.n	80079e0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80079d6:	f7ff fd7c 	bl	80074d2 <LL_RCC_PLLSAI1_IsReady>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d1f0      	bne.n	80079c2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d108      	bne.n	80079f8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80079e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079f4:	4313      	orrs	r3, r2
 80079f6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e090      	b.n	8007b36 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d106      	bne.n	8007a2e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7fa fe93 	bl	8002754 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2202      	movs	r2, #2
 8007a32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	22ca      	movs	r2, #202	; 0xca
 8007a3c:	625a      	str	r2, [r3, #36]	; 0x24
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2253      	movs	r2, #83	; 0x53
 8007a44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f89f 	bl	8007b8a <RTC_EnterInitMode>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d009      	beq.n	8007a66 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	22ff      	movs	r2, #255	; 0xff
 8007a58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e067      	b.n	8007b36 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6812      	ldr	r2, [r2, #0]
 8007a70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a78:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6899      	ldr	r1, [r3, #8]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	430a      	orrs	r2, r1
 8007a96:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	68d2      	ldr	r2, [r2, #12]
 8007aa0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6919      	ldr	r1, [r3, #16]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	041a      	lsls	r2, r3, #16
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ac4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0203 	bic.w	r2, r2, #3
 8007ad4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	69da      	ldr	r2, [r3, #28]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f003 0320 	and.w	r3, r3, #32
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d113      	bne.n	8007b24 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f81e 	bl	8007b3e <HAL_RTC_WaitForSynchro>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00d      	beq.n	8007b24 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	22ff      	movs	r2, #255	; 0xff
 8007b0e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2204      	movs	r2, #4
 8007b14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e008      	b.n	8007b36 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	22ff      	movs	r2, #255	; 0xff
 8007b2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8007b34:	2300      	movs	r3, #0
  }
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b54:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007b56:	f7fb f97d 	bl	8002e54 <HAL_GetTick>
 8007b5a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b5c:	e009      	b.n	8007b72 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007b5e:	f7fb f979 	bl	8002e54 <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b6c:	d901      	bls.n	8007b72 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e007      	b.n	8007b82 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f003 0320 	and.w	r3, r3, #32
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d0ee      	beq.n	8007b5e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d119      	bne.n	8007bd4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007baa:	f7fb f953 	bl	8002e54 <HAL_GetTick>
 8007bae:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007bb0:	e009      	b.n	8007bc6 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007bb2:	f7fb f94f 	bl	8002e54 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bc0:	d901      	bls.n	8007bc6 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e007      	b.n	8007bd6 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0ee      	beq.n	8007bb2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b082      	sub	sp, #8
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d101      	bne.n	8007bf0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e049      	b.n	8007c84 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d106      	bne.n	8007c0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7fb f86f 	bl	8002ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	f000 fdc7 	bl	80087b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d001      	beq.n	8007ca4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e02e      	b.n	8007d02 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a17      	ldr	r2, [pc, #92]	; (8007d10 <HAL_TIM_Base_Start+0x84>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d004      	beq.n	8007cc0 <HAL_TIM_Base_Start+0x34>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cbe:	d115      	bne.n	8007cec <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689a      	ldr	r2, [r3, #8]
 8007cc6:	4b13      	ldr	r3, [pc, #76]	; (8007d14 <HAL_TIM_Base_Start+0x88>)
 8007cc8:	4013      	ands	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b06      	cmp	r3, #6
 8007cd0:	d015      	beq.n	8007cfe <HAL_TIM_Base_Start+0x72>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd8:	d011      	beq.n	8007cfe <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f042 0201 	orr.w	r2, r2, #1
 8007ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cea:	e008      	b.n	8007cfe <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f042 0201 	orr.w	r2, r2, #1
 8007cfa:	601a      	str	r2, [r3, #0]
 8007cfc:	e000      	b.n	8007d00 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	40012c00 	.word	0x40012c00
 8007d14:	00010007 	.word	0x00010007

08007d18 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6a1a      	ldr	r2, [r3, #32]
 8007d26:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10f      	bne.n	8007d50 <HAL_TIM_Base_Stop+0x38>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6a1a      	ldr	r2, [r3, #32]
 8007d36:	f240 4344 	movw	r3, #1092	; 0x444
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d107      	bne.n	8007d50 <HAL_TIM_Base_Stop+0x38>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 0201 	bic.w	r2, r2, #1
 8007d4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
	...

08007d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d001      	beq.n	8007d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e036      	b.n	8007dee <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68da      	ldr	r2, [r3, #12]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f042 0201 	orr.w	r2, r2, #1
 8007d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a17      	ldr	r2, [pc, #92]	; (8007dfc <HAL_TIM_Base_Start_IT+0x94>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d004      	beq.n	8007dac <HAL_TIM_Base_Start_IT+0x44>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007daa:	d115      	bne.n	8007dd8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689a      	ldr	r2, [r3, #8]
 8007db2:	4b13      	ldr	r3, [pc, #76]	; (8007e00 <HAL_TIM_Base_Start_IT+0x98>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2b06      	cmp	r3, #6
 8007dbc:	d015      	beq.n	8007dea <HAL_TIM_Base_Start_IT+0x82>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dc4:	d011      	beq.n	8007dea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f042 0201 	orr.w	r2, r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd6:	e008      	b.n	8007dea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f042 0201 	orr.w	r2, r2, #1
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	e000      	b.n	8007dec <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	40012c00 	.word	0x40012c00
 8007e00:	00010007 	.word	0x00010007

08007e04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e049      	b.n	8007eaa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d106      	bne.n	8007e30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f841 	bl	8007eb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2202      	movs	r2, #2
 8007e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	4619      	mov	r1, r3
 8007e42:	4610      	mov	r0, r2
 8007e44:	f000 fcb4 	bl	80087b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
	...

08007ec8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d109      	bne.n	8007eec <HAL_TIM_PWM_Start+0x24>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	bf14      	ite	ne
 8007ee4:	2301      	movne	r3, #1
 8007ee6:	2300      	moveq	r3, #0
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	e03c      	b.n	8007f66 <HAL_TIM_PWM_Start+0x9e>
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d109      	bne.n	8007f06 <HAL_TIM_PWM_Start+0x3e>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	bf14      	ite	ne
 8007efe:	2301      	movne	r3, #1
 8007f00:	2300      	moveq	r3, #0
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	e02f      	b.n	8007f66 <HAL_TIM_PWM_Start+0x9e>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b08      	cmp	r3, #8
 8007f0a:	d109      	bne.n	8007f20 <HAL_TIM_PWM_Start+0x58>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	bf14      	ite	ne
 8007f18:	2301      	movne	r3, #1
 8007f1a:	2300      	moveq	r3, #0
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	e022      	b.n	8007f66 <HAL_TIM_PWM_Start+0x9e>
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2b0c      	cmp	r3, #12
 8007f24:	d109      	bne.n	8007f3a <HAL_TIM_PWM_Start+0x72>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	bf14      	ite	ne
 8007f32:	2301      	movne	r3, #1
 8007f34:	2300      	moveq	r3, #0
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	e015      	b.n	8007f66 <HAL_TIM_PWM_Start+0x9e>
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b10      	cmp	r3, #16
 8007f3e:	d109      	bne.n	8007f54 <HAL_TIM_PWM_Start+0x8c>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	bf14      	ite	ne
 8007f4c:	2301      	movne	r3, #1
 8007f4e:	2300      	moveq	r3, #0
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	e008      	b.n	8007f66 <HAL_TIM_PWM_Start+0x9e>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	bf14      	ite	ne
 8007f60:	2301      	movne	r3, #1
 8007f62:	2300      	moveq	r3, #0
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e079      	b.n	8008062 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d104      	bne.n	8007f7e <HAL_TIM_PWM_Start+0xb6>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f7c:	e023      	b.n	8007fc6 <HAL_TIM_PWM_Start+0xfe>
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b04      	cmp	r3, #4
 8007f82:	d104      	bne.n	8007f8e <HAL_TIM_PWM_Start+0xc6>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f8c:	e01b      	b.n	8007fc6 <HAL_TIM_PWM_Start+0xfe>
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b08      	cmp	r3, #8
 8007f92:	d104      	bne.n	8007f9e <HAL_TIM_PWM_Start+0xd6>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2202      	movs	r2, #2
 8007f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f9c:	e013      	b.n	8007fc6 <HAL_TIM_PWM_Start+0xfe>
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b0c      	cmp	r3, #12
 8007fa2:	d104      	bne.n	8007fae <HAL_TIM_PWM_Start+0xe6>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fac:	e00b      	b.n	8007fc6 <HAL_TIM_PWM_Start+0xfe>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b10      	cmp	r3, #16
 8007fb2:	d104      	bne.n	8007fbe <HAL_TIM_PWM_Start+0xf6>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fbc:	e003      	b.n	8007fc6 <HAL_TIM_PWM_Start+0xfe>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 ff6c 	bl	8008eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a24      	ldr	r2, [pc, #144]	; (800806c <HAL_TIM_PWM_Start+0x1a4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d009      	beq.n	8007ff2 <HAL_TIM_PWM_Start+0x12a>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a23      	ldr	r2, [pc, #140]	; (8008070 <HAL_TIM_PWM_Start+0x1a8>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d004      	beq.n	8007ff2 <HAL_TIM_PWM_Start+0x12a>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a21      	ldr	r2, [pc, #132]	; (8008074 <HAL_TIM_PWM_Start+0x1ac>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d101      	bne.n	8007ff6 <HAL_TIM_PWM_Start+0x12e>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e000      	b.n	8007ff8 <HAL_TIM_PWM_Start+0x130>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d007      	beq.n	800800c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800800a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a16      	ldr	r2, [pc, #88]	; (800806c <HAL_TIM_PWM_Start+0x1a4>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d004      	beq.n	8008020 <HAL_TIM_PWM_Start+0x158>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800801e:	d115      	bne.n	800804c <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689a      	ldr	r2, [r3, #8]
 8008026:	4b14      	ldr	r3, [pc, #80]	; (8008078 <HAL_TIM_PWM_Start+0x1b0>)
 8008028:	4013      	ands	r3, r2
 800802a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b06      	cmp	r3, #6
 8008030:	d015      	beq.n	800805e <HAL_TIM_PWM_Start+0x196>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008038:	d011      	beq.n	800805e <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f042 0201 	orr.w	r2, r2, #1
 8008048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800804a:	e008      	b.n	800805e <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0201 	orr.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	e000      	b.n	8008060 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800805e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	40012c00 	.word	0x40012c00
 8008070:	40014400 	.word	0x40014400
 8008074:	40014800 	.word	0x40014800
 8008078:	00010007 	.word	0x00010007

0800807c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2200      	movs	r2, #0
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	4618      	mov	r0, r3
 8008090:	f000 ff0c 	bl	8008eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a39      	ldr	r2, [pc, #228]	; (8008180 <HAL_TIM_PWM_Stop+0x104>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d009      	beq.n	80080b2 <HAL_TIM_PWM_Stop+0x36>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a38      	ldr	r2, [pc, #224]	; (8008184 <HAL_TIM_PWM_Stop+0x108>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d004      	beq.n	80080b2 <HAL_TIM_PWM_Stop+0x36>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a36      	ldr	r2, [pc, #216]	; (8008188 <HAL_TIM_PWM_Stop+0x10c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d101      	bne.n	80080b6 <HAL_TIM_PWM_Stop+0x3a>
 80080b2:	2301      	movs	r3, #1
 80080b4:	e000      	b.n	80080b8 <HAL_TIM_PWM_Stop+0x3c>
 80080b6:	2300      	movs	r3, #0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d017      	beq.n	80080ec <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6a1a      	ldr	r2, [r3, #32]
 80080c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80080c6:	4013      	ands	r3, r2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10f      	bne.n	80080ec <HAL_TIM_PWM_Stop+0x70>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6a1a      	ldr	r2, [r3, #32]
 80080d2:	f240 4344 	movw	r3, #1092	; 0x444
 80080d6:	4013      	ands	r3, r2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d107      	bne.n	80080ec <HAL_TIM_PWM_Stop+0x70>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6a1a      	ldr	r2, [r3, #32]
 80080f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80080f6:	4013      	ands	r3, r2
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10f      	bne.n	800811c <HAL_TIM_PWM_Stop+0xa0>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6a1a      	ldr	r2, [r3, #32]
 8008102:	f240 4344 	movw	r3, #1092	; 0x444
 8008106:	4013      	ands	r3, r2
 8008108:	2b00      	cmp	r3, #0
 800810a:	d107      	bne.n	800811c <HAL_TIM_PWM_Stop+0xa0>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 0201 	bic.w	r2, r2, #1
 800811a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d104      	bne.n	800812c <HAL_TIM_PWM_Stop+0xb0>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800812a:	e023      	b.n	8008174 <HAL_TIM_PWM_Stop+0xf8>
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	2b04      	cmp	r3, #4
 8008130:	d104      	bne.n	800813c <HAL_TIM_PWM_Stop+0xc0>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800813a:	e01b      	b.n	8008174 <HAL_TIM_PWM_Stop+0xf8>
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	2b08      	cmp	r3, #8
 8008140:	d104      	bne.n	800814c <HAL_TIM_PWM_Stop+0xd0>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800814a:	e013      	b.n	8008174 <HAL_TIM_PWM_Stop+0xf8>
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2b0c      	cmp	r3, #12
 8008150:	d104      	bne.n	800815c <HAL_TIM_PWM_Stop+0xe0>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800815a:	e00b      	b.n	8008174 <HAL_TIM_PWM_Stop+0xf8>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2b10      	cmp	r3, #16
 8008160:	d104      	bne.n	800816c <HAL_TIM_PWM_Stop+0xf0>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800816a:	e003      	b.n	8008174 <HAL_TIM_PWM_Stop+0xf8>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	40012c00 	.word	0x40012c00
 8008184:	40014400 	.word	0x40014400
 8008188:	40014800 	.word	0x40014800

0800818c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d122      	bne.n	80081e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	f003 0302 	and.w	r3, r3, #2
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d11b      	bne.n	80081e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f06f 0202 	mvn.w	r2, #2
 80081b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	f003 0303 	and.w	r3, r3, #3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 facf 	bl	8008772 <HAL_TIM_IC_CaptureCallback>
 80081d4:	e005      	b.n	80081e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fac1 	bl	800875e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fad2 	bl	8008786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f003 0304 	and.w	r3, r3, #4
 80081f2:	2b04      	cmp	r3, #4
 80081f4:	d122      	bne.n	800823c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b04      	cmp	r3, #4
 8008202:	d11b      	bne.n	800823c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f06f 0204 	mvn.w	r2, #4
 800820c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2202      	movs	r2, #2
 8008212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 faa5 	bl	8008772 <HAL_TIM_IC_CaptureCallback>
 8008228:	e005      	b.n	8008236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fa97 	bl	800875e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 faa8 	bl	8008786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	f003 0308 	and.w	r3, r3, #8
 8008246:	2b08      	cmp	r3, #8
 8008248:	d122      	bne.n	8008290 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f003 0308 	and.w	r3, r3, #8
 8008254:	2b08      	cmp	r3, #8
 8008256:	d11b      	bne.n	8008290 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f06f 0208 	mvn.w	r2, #8
 8008260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2204      	movs	r2, #4
 8008266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fa7b 	bl	8008772 <HAL_TIM_IC_CaptureCallback>
 800827c:	e005      	b.n	800828a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa6d 	bl	800875e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fa7e 	bl	8008786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f003 0310 	and.w	r3, r3, #16
 800829a:	2b10      	cmp	r3, #16
 800829c:	d122      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f003 0310 	and.w	r3, r3, #16
 80082a8:	2b10      	cmp	r3, #16
 80082aa:	d11b      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f06f 0210 	mvn.w	r2, #16
 80082b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2208      	movs	r2, #8
 80082ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa51 	bl	8008772 <HAL_TIM_IC_CaptureCallback>
 80082d0:	e005      	b.n	80082de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fa43 	bl	800875e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fa54 	bl	8008786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d10e      	bne.n	8008310 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d107      	bne.n	8008310 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f06f 0201 	mvn.w	r2, #1
 8008308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7f9 ff94 	bl	8002238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800831a:	2b80      	cmp	r3, #128	; 0x80
 800831c:	d10e      	bne.n	800833c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008328:	2b80      	cmp	r3, #128	; 0x80
 800832a:	d107      	bne.n	800833c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fed8 	bl	80090ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800834a:	d10e      	bne.n	800836a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008356:	2b80      	cmp	r3, #128	; 0x80
 8008358:	d107      	bne.n	800836a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fecb 	bl	8009100 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008374:	2b40      	cmp	r3, #64	; 0x40
 8008376:	d10e      	bne.n	8008396 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008382:	2b40      	cmp	r3, #64	; 0x40
 8008384:	d107      	bne.n	8008396 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800838e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fa02 	bl	800879a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	f003 0320 	and.w	r3, r3, #32
 80083a0:	2b20      	cmp	r3, #32
 80083a2:	d10e      	bne.n	80083c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	f003 0320 	and.w	r3, r3, #32
 80083ae:	2b20      	cmp	r3, #32
 80083b0:	d107      	bne.n	80083c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f06f 0220 	mvn.w	r2, #32
 80083ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fe8b 	bl	80090d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083c2:	bf00      	nop
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d101      	bne.n	80083e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80083e2:	2302      	movs	r3, #2
 80083e4:	e0fd      	b.n	80085e2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b14      	cmp	r3, #20
 80083f2:	f200 80f0 	bhi.w	80085d6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80083f6:	a201      	add	r2, pc, #4	; (adr r2, 80083fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80083f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fc:	08008451 	.word	0x08008451
 8008400:	080085d7 	.word	0x080085d7
 8008404:	080085d7 	.word	0x080085d7
 8008408:	080085d7 	.word	0x080085d7
 800840c:	08008491 	.word	0x08008491
 8008410:	080085d7 	.word	0x080085d7
 8008414:	080085d7 	.word	0x080085d7
 8008418:	080085d7 	.word	0x080085d7
 800841c:	080084d3 	.word	0x080084d3
 8008420:	080085d7 	.word	0x080085d7
 8008424:	080085d7 	.word	0x080085d7
 8008428:	080085d7 	.word	0x080085d7
 800842c:	08008513 	.word	0x08008513
 8008430:	080085d7 	.word	0x080085d7
 8008434:	080085d7 	.word	0x080085d7
 8008438:	080085d7 	.word	0x080085d7
 800843c:	08008555 	.word	0x08008555
 8008440:	080085d7 	.word	0x080085d7
 8008444:	080085d7 	.word	0x080085d7
 8008448:	080085d7 	.word	0x080085d7
 800844c:	08008595 	.word	0x08008595
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68b9      	ldr	r1, [r7, #8]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 fa0e 	bl	8008878 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699a      	ldr	r2, [r3, #24]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0208 	orr.w	r2, r2, #8
 800846a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 0204 	bic.w	r2, r2, #4
 800847a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6999      	ldr	r1, [r3, #24]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	691a      	ldr	r2, [r3, #16]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	619a      	str	r2, [r3, #24]
      break;
 800848e:	e0a3      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68b9      	ldr	r1, [r7, #8]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 fa6a 	bl	8008970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	699a      	ldr	r2, [r3, #24]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6999      	ldr	r1, [r3, #24]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	021a      	lsls	r2, r3, #8
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	619a      	str	r2, [r3, #24]
      break;
 80084d0:	e082      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68b9      	ldr	r1, [r7, #8]
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fac3 	bl	8008a64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	69da      	ldr	r2, [r3, #28]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f042 0208 	orr.w	r2, r2, #8
 80084ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	69da      	ldr	r2, [r3, #28]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0204 	bic.w	r2, r2, #4
 80084fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	69d9      	ldr	r1, [r3, #28]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	691a      	ldr	r2, [r3, #16]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	61da      	str	r2, [r3, #28]
      break;
 8008510:	e062      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68b9      	ldr	r1, [r7, #8]
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fb1b 	bl	8008b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	69da      	ldr	r2, [r3, #28]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800852c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69da      	ldr	r2, [r3, #28]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800853c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	69d9      	ldr	r1, [r3, #28]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	021a      	lsls	r2, r3, #8
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	61da      	str	r2, [r3, #28]
      break;
 8008552:	e041      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	4618      	mov	r0, r3
 800855c:	f000 fb58 	bl	8008c10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f042 0208 	orr.w	r2, r2, #8
 800856e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f022 0204 	bic.w	r2, r2, #4
 800857e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	691a      	ldr	r2, [r3, #16]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008592:	e021      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68b9      	ldr	r1, [r7, #8]
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fb90 	bl	8008cc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	021a      	lsls	r2, r3, #8
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80085d4:	e000      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80085d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop

080085ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d101      	bne.n	8008604 <HAL_TIM_ConfigClockSource+0x18>
 8008600:	2302      	movs	r3, #2
 8008602:	e0a8      	b.n	8008756 <HAL_TIM_ConfigClockSource+0x16a>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800862e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b40      	cmp	r3, #64	; 0x40
 800863e:	d067      	beq.n	8008710 <HAL_TIM_ConfigClockSource+0x124>
 8008640:	2b40      	cmp	r3, #64	; 0x40
 8008642:	d80b      	bhi.n	800865c <HAL_TIM_ConfigClockSource+0x70>
 8008644:	2b10      	cmp	r3, #16
 8008646:	d073      	beq.n	8008730 <HAL_TIM_ConfigClockSource+0x144>
 8008648:	2b10      	cmp	r3, #16
 800864a:	d802      	bhi.n	8008652 <HAL_TIM_ConfigClockSource+0x66>
 800864c:	2b00      	cmp	r3, #0
 800864e:	d06f      	beq.n	8008730 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008650:	e078      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008652:	2b20      	cmp	r3, #32
 8008654:	d06c      	beq.n	8008730 <HAL_TIM_ConfigClockSource+0x144>
 8008656:	2b30      	cmp	r3, #48	; 0x30
 8008658:	d06a      	beq.n	8008730 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800865a:	e073      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800865c:	2b70      	cmp	r3, #112	; 0x70
 800865e:	d00d      	beq.n	800867c <HAL_TIM_ConfigClockSource+0x90>
 8008660:	2b70      	cmp	r3, #112	; 0x70
 8008662:	d804      	bhi.n	800866e <HAL_TIM_ConfigClockSource+0x82>
 8008664:	2b50      	cmp	r3, #80	; 0x50
 8008666:	d033      	beq.n	80086d0 <HAL_TIM_ConfigClockSource+0xe4>
 8008668:	2b60      	cmp	r3, #96	; 0x60
 800866a:	d041      	beq.n	80086f0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800866c:	e06a      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800866e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008672:	d066      	beq.n	8008742 <HAL_TIM_ConfigClockSource+0x156>
 8008674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008678:	d017      	beq.n	80086aa <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800867a:	e063      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6818      	ldr	r0, [r3, #0]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	6899      	ldr	r1, [r3, #8]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	f000 fbee 	bl	8008e6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800869e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	609a      	str	r2, [r3, #8]
      break;
 80086a8:	e04c      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6818      	ldr	r0, [r3, #0]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	6899      	ldr	r1, [r3, #8]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	f000 fbd7 	bl	8008e6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086cc:	609a      	str	r2, [r3, #8]
      break;
 80086ce:	e039      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6818      	ldr	r0, [r3, #0]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	6859      	ldr	r1, [r3, #4]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	461a      	mov	r2, r3
 80086de:	f000 fb49 	bl	8008d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2150      	movs	r1, #80	; 0x50
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 fba2 	bl	8008e32 <TIM_ITRx_SetConfig>
      break;
 80086ee:	e029      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6818      	ldr	r0, [r3, #0]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	6859      	ldr	r1, [r3, #4]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	461a      	mov	r2, r3
 80086fe:	f000 fb68 	bl	8008dd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2160      	movs	r1, #96	; 0x60
 8008708:	4618      	mov	r0, r3
 800870a:	f000 fb92 	bl	8008e32 <TIM_ITRx_SetConfig>
      break;
 800870e:	e019      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6818      	ldr	r0, [r3, #0]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	6859      	ldr	r1, [r3, #4]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	461a      	mov	r2, r3
 800871e:	f000 fb29 	bl	8008d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2140      	movs	r1, #64	; 0x40
 8008728:	4618      	mov	r0, r3
 800872a:	f000 fb82 	bl	8008e32 <TIM_ITRx_SetConfig>
      break;
 800872e:	e009      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4619      	mov	r1, r3
 800873a:	4610      	mov	r0, r2
 800873c:	f000 fb79 	bl	8008e32 <TIM_ITRx_SetConfig>
        break;
 8008740:	e000      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8008742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008766:	bf00      	nop
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
	...

080087b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a2a      	ldr	r2, [pc, #168]	; (800886c <TIM_Base_SetConfig+0xbc>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d003      	beq.n	80087d0 <TIM_Base_SetConfig+0x20>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ce:	d108      	bne.n	80087e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	4313      	orrs	r3, r2
 80087e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a21      	ldr	r2, [pc, #132]	; (800886c <TIM_Base_SetConfig+0xbc>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d00b      	beq.n	8008802 <TIM_Base_SetConfig+0x52>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f0:	d007      	beq.n	8008802 <TIM_Base_SetConfig+0x52>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a1e      	ldr	r2, [pc, #120]	; (8008870 <TIM_Base_SetConfig+0xc0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d003      	beq.n	8008802 <TIM_Base_SetConfig+0x52>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a1d      	ldr	r2, [pc, #116]	; (8008874 <TIM_Base_SetConfig+0xc4>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d108      	bne.n	8008814 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	4313      	orrs	r3, r2
 8008812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a0c      	ldr	r2, [pc, #48]	; (800886c <TIM_Base_SetConfig+0xbc>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d007      	beq.n	8008850 <TIM_Base_SetConfig+0xa0>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a0b      	ldr	r2, [pc, #44]	; (8008870 <TIM_Base_SetConfig+0xc0>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d003      	beq.n	8008850 <TIM_Base_SetConfig+0xa0>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a0a      	ldr	r2, [pc, #40]	; (8008874 <TIM_Base_SetConfig+0xc4>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d103      	bne.n	8008858 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	691a      	ldr	r2, [r3, #16]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	615a      	str	r2, [r3, #20]
}
 800885e:	bf00      	nop
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	40012c00 	.word	0x40012c00
 8008870:	40014400 	.word	0x40014400
 8008874:	40014800 	.word	0x40014800

08008878 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008878:	b480      	push	{r7}
 800887a:	b087      	sub	sp, #28
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	f023 0201 	bic.w	r2, r3, #1
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f023 0303 	bic.w	r3, r3, #3
 80088b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f023 0302 	bic.w	r3, r3, #2
 80088c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a24      	ldr	r2, [pc, #144]	; (8008964 <TIM_OC1_SetConfig+0xec>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d007      	beq.n	80088e8 <TIM_OC1_SetConfig+0x70>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a23      	ldr	r2, [pc, #140]	; (8008968 <TIM_OC1_SetConfig+0xf0>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d003      	beq.n	80088e8 <TIM_OC1_SetConfig+0x70>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a22      	ldr	r2, [pc, #136]	; (800896c <TIM_OC1_SetConfig+0xf4>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d10c      	bne.n	8008902 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	f023 0308 	bic.w	r3, r3, #8
 80088ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f023 0304 	bic.w	r3, r3, #4
 8008900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a17      	ldr	r2, [pc, #92]	; (8008964 <TIM_OC1_SetConfig+0xec>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d007      	beq.n	800891a <TIM_OC1_SetConfig+0xa2>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a17      	ldr	r2, [pc, #92]	; (800896c <TIM_OC1_SetConfig+0xf4>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d003      	beq.n	800891a <TIM_OC1_SetConfig+0xa2>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a14      	ldr	r2, [pc, #80]	; (8008968 <TIM_OC1_SetConfig+0xf0>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d111      	bne.n	800893e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	4313      	orrs	r3, r2
 8008932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	4313      	orrs	r3, r2
 800893c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	621a      	str	r2, [r3, #32]
}
 8008958:	bf00      	nop
 800895a:	371c      	adds	r7, #28
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr
 8008964:	40012c00 	.word	0x40012c00
 8008968:	40014800 	.word	0x40014800
 800896c:	40014400 	.word	0x40014400

08008970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008970:	b480      	push	{r7}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	f023 0210 	bic.w	r2, r3, #16
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a1b      	ldr	r3, [r3, #32]
 800898a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800899e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	021b      	lsls	r3, r3, #8
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f023 0320 	bic.w	r3, r3, #32
 80089be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	011b      	lsls	r3, r3, #4
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a22      	ldr	r2, [pc, #136]	; (8008a58 <TIM_OC2_SetConfig+0xe8>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d10d      	bne.n	80089f0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	011b      	lsls	r3, r3, #4
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a19      	ldr	r2, [pc, #100]	; (8008a58 <TIM_OC2_SetConfig+0xe8>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d007      	beq.n	8008a08 <TIM_OC2_SetConfig+0x98>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a18      	ldr	r2, [pc, #96]	; (8008a5c <TIM_OC2_SetConfig+0xec>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d003      	beq.n	8008a08 <TIM_OC2_SetConfig+0x98>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a17      	ldr	r2, [pc, #92]	; (8008a60 <TIM_OC2_SetConfig+0xf0>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d113      	bne.n	8008a30 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	621a      	str	r2, [r3, #32]
}
 8008a4a:	bf00      	nop
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	40012c00 	.word	0x40012c00
 8008a5c:	40014400 	.word	0x40014400
 8008a60:	40014800 	.word	0x40014800

08008a64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b087      	sub	sp, #28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f023 0303 	bic.w	r3, r3, #3
 8008a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	021b      	lsls	r3, r3, #8
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a21      	ldr	r2, [pc, #132]	; (8008b48 <TIM_OC3_SetConfig+0xe4>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d10d      	bne.n	8008ae2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008acc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	021b      	lsls	r3, r3, #8
 8008ad4:	697a      	ldr	r2, [r7, #20]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a18      	ldr	r2, [pc, #96]	; (8008b48 <TIM_OC3_SetConfig+0xe4>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d007      	beq.n	8008afa <TIM_OC3_SetConfig+0x96>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a17      	ldr	r2, [pc, #92]	; (8008b4c <TIM_OC3_SetConfig+0xe8>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d003      	beq.n	8008afa <TIM_OC3_SetConfig+0x96>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a16      	ldr	r2, [pc, #88]	; (8008b50 <TIM_OC3_SetConfig+0xec>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d113      	bne.n	8008b22 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	011b      	lsls	r3, r3, #4
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	011b      	lsls	r3, r3, #4
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	621a      	str	r2, [r3, #32]
}
 8008b3c:	bf00      	nop
 8008b3e:	371c      	adds	r7, #28
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr
 8008b48:	40012c00 	.word	0x40012c00
 8008b4c:	40014400 	.word	0x40014400
 8008b50:	40014800 	.word	0x40014800

08008b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b087      	sub	sp, #28
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	021b      	lsls	r3, r3, #8
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	031b      	lsls	r3, r3, #12
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a14      	ldr	r2, [pc, #80]	; (8008c04 <TIM_OC4_SetConfig+0xb0>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d007      	beq.n	8008bc8 <TIM_OC4_SetConfig+0x74>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a13      	ldr	r2, [pc, #76]	; (8008c08 <TIM_OC4_SetConfig+0xb4>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d003      	beq.n	8008bc8 <TIM_OC4_SetConfig+0x74>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a12      	ldr	r2, [pc, #72]	; (8008c0c <TIM_OC4_SetConfig+0xb8>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d109      	bne.n	8008bdc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	019b      	lsls	r3, r3, #6
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	621a      	str	r2, [r3, #32]
}
 8008bf6:	bf00      	nop
 8008bf8:	371c      	adds	r7, #28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	40012c00 	.word	0x40012c00
 8008c08:	40014400 	.word	0x40014400
 8008c0c:	40014800 	.word	0x40014800

08008c10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	041b      	lsls	r3, r3, #16
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a13      	ldr	r2, [pc, #76]	; (8008cb4 <TIM_OC5_SetConfig+0xa4>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d007      	beq.n	8008c7a <TIM_OC5_SetConfig+0x6a>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a12      	ldr	r2, [pc, #72]	; (8008cb8 <TIM_OC5_SetConfig+0xa8>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d003      	beq.n	8008c7a <TIM_OC5_SetConfig+0x6a>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a11      	ldr	r2, [pc, #68]	; (8008cbc <TIM_OC5_SetConfig+0xac>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d109      	bne.n	8008c8e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	021b      	lsls	r3, r3, #8
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	621a      	str	r2, [r3, #32]
}
 8008ca8:	bf00      	nop
 8008caa:	371c      	adds	r7, #28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	40012c00 	.word	0x40012c00
 8008cb8:	40014400 	.word	0x40014400
 8008cbc:	40014800 	.word	0x40014800

08008cc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	021b      	lsls	r3, r3, #8
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	051b      	lsls	r3, r3, #20
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a14      	ldr	r2, [pc, #80]	; (8008d68 <TIM_OC6_SetConfig+0xa8>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d007      	beq.n	8008d2c <TIM_OC6_SetConfig+0x6c>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a13      	ldr	r2, [pc, #76]	; (8008d6c <TIM_OC6_SetConfig+0xac>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d003      	beq.n	8008d2c <TIM_OC6_SetConfig+0x6c>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a12      	ldr	r2, [pc, #72]	; (8008d70 <TIM_OC6_SetConfig+0xb0>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d109      	bne.n	8008d40 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	029b      	lsls	r3, r3, #10
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	621a      	str	r2, [r3, #32]
}
 8008d5a:	bf00      	nop
 8008d5c:	371c      	adds	r7, #28
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	40012c00 	.word	0x40012c00
 8008d6c:	40014400 	.word	0x40014400
 8008d70:	40014800 	.word	0x40014800

08008d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6a1b      	ldr	r3, [r3, #32]
 8008d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	f023 0201 	bic.w	r2, r3, #1
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	011b      	lsls	r3, r3, #4
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f023 030a 	bic.w	r3, r3, #10
 8008db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	621a      	str	r2, [r3, #32]
}
 8008dc6:	bf00      	nop
 8008dc8:	371c      	adds	r7, #28
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b087      	sub	sp, #28
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	f023 0210 	bic.w	r2, r3, #16
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6a1b      	ldr	r3, [r3, #32]
 8008df4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	031b      	lsls	r3, r3, #12
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	011b      	lsls	r3, r3, #4
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	621a      	str	r2, [r3, #32]
}
 8008e26:	bf00      	nop
 8008e28:	371c      	adds	r7, #28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b085      	sub	sp, #20
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	f043 0307 	orr.w	r3, r3, #7
 8008e58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	609a      	str	r2, [r3, #8]
}
 8008e60:	bf00      	nop
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
 8008e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	021a      	lsls	r2, r3, #8
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	697a      	ldr	r2, [r7, #20]
 8008e9e:	609a      	str	r2, [r3, #8]
}
 8008ea0:	bf00      	nop
 8008ea2:	371c      	adds	r7, #28
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f003 031f 	and.w	r3, r3, #31
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6a1a      	ldr	r2, [r3, #32]
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	43db      	mvns	r3, r3
 8008ece:	401a      	ands	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6a1a      	ldr	r2, [r3, #32]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	f003 031f 	and.w	r3, r3, #31
 8008ede:	6879      	ldr	r1, [r7, #4]
 8008ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee4:	431a      	orrs	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	621a      	str	r2, [r3, #32]
}
 8008eea:	bf00      	nop
 8008eec:	371c      	adds	r7, #28
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
	...

08008ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d101      	bne.n	8008f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	e04a      	b.n	8008fa6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a1f      	ldr	r2, [pc, #124]	; (8008fb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d108      	bne.n	8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a12      	ldr	r2, [pc, #72]	; (8008fb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d004      	beq.n	8008f7a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f78:	d10c      	bne.n	8008f94 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	40012c00 	.word	0x40012c00

08008fb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d101      	bne.n	8008fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e078      	b.n	80090c6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	4313      	orrs	r3, r2
 8009004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4313      	orrs	r3, r2
 8009012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	4313      	orrs	r3, r2
 8009020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	695b      	ldr	r3, [r3, #20]
 800902c:	4313      	orrs	r3, r2
 800902e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903a:	4313      	orrs	r3, r2
 800903c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	041b      	lsls	r3, r3, #16
 800904a:	4313      	orrs	r3, r2
 800904c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a20      	ldr	r2, [pc, #128]	; (80090d4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d106      	bne.n	8009066 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	4313      	orrs	r3, r2
 8009064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a1a      	ldr	r2, [pc, #104]	; (80090d4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d121      	bne.n	80090b4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907a:	051b      	lsls	r3, r3, #20
 800907c:	4313      	orrs	r3, r2
 800907e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	4313      	orrs	r3, r2
 800908c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009098:	4313      	orrs	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a0c      	ldr	r2, [pc, #48]	; (80090d4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d106      	bne.n	80090b4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b0:	4313      	orrs	r3, r2
 80090b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	40012c00 	.word	0x40012c00

080090d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800911c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009120:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009128:	b29a      	uxth	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	b29b      	uxth	r3, r3
 800912e:	4313      	orrs	r3, r2
 8009130:	b29a      	uxth	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009146:	b480      	push	{r7}
 8009148:	b085      	sub	sp, #20
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800914e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009152:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800915a:	b29a      	uxth	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	b29b      	uxth	r3, r3
 8009160:	43db      	mvns	r3, r3
 8009162:	b29b      	uxth	r3, r3
 8009164:	4013      	ands	r3, r2
 8009166:	b29a      	uxth	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800917c:	b084      	sub	sp, #16
 800917e:	b580      	push	{r7, lr}
 8009180:	b082      	sub	sp, #8
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	f107 0014 	add.w	r0, r7, #20
 800918a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7ff ffb0 	bl	8009114 <USB_EnableGlobalInt>

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091c0:	b004      	add	sp, #16
 80091c2:	4770      	bx	lr

080091c4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b09d      	sub	sp, #116	; 0x74
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80091e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	78db      	ldrb	r3, [r3, #3]
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d81f      	bhi.n	8009236 <USB_ActivateEndpoint+0x72>
 80091f6:	a201      	add	r2, pc, #4	; (adr r2, 80091fc <USB_ActivateEndpoint+0x38>)
 80091f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fc:	0800920d 	.word	0x0800920d
 8009200:	08009229 	.word	0x08009229
 8009204:	0800923f 	.word	0x0800923f
 8009208:	0800921b 	.word	0x0800921b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800920c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009210:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009214:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009218:	e012      	b.n	8009240 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800921a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800921e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009222:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009226:	e00b      	b.n	8009240 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009228:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800922c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009230:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009234:	e004      	b.n	8009240 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800923c:	e000      	b.n	8009240 <USB_ActivateEndpoint+0x7c>
      break;
 800923e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	441a      	add	r2, r3
 800924a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800924e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800925a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800925e:	b29b      	uxth	r3, r3
 8009260:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	881b      	ldrh	r3, [r3, #0]
 800926e:	b29b      	uxth	r3, r3
 8009270:	b21b      	sxth	r3, r3
 8009272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927a:	b21a      	sxth	r2, r3
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	b21b      	sxth	r3, r3
 8009282:	4313      	orrs	r3, r2
 8009284:	b21b      	sxth	r3, r3
 8009286:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	441a      	add	r2, r3
 8009294:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800929c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	7b1b      	ldrb	r3, [r3, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f040 8149 	bne.w	8009548 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	785b      	ldrb	r3, [r3, #1]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 8084 	beq.w	80093c8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	61bb      	str	r3, [r7, #24]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	461a      	mov	r2, r3
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	4413      	add	r3, r2
 80092d2:	61bb      	str	r3, [r7, #24]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	00da      	lsls	r2, r3, #3
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	4413      	add	r3, r2
 80092de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092e2:	617b      	str	r3, [r7, #20]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	88db      	ldrh	r3, [r3, #6]
 80092e8:	085b      	lsrs	r3, r3, #1
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	881b      	ldrh	r3, [r3, #0]
 8009300:	827b      	strh	r3, [r7, #18]
 8009302:	8a7b      	ldrh	r3, [r7, #18]
 8009304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009308:	2b00      	cmp	r3, #0
 800930a:	d01b      	beq.n	8009344 <USB_ActivateEndpoint+0x180>
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	4413      	add	r3, r2
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	b29b      	uxth	r3, r3
 800931a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800931e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009322:	823b      	strh	r3, [r7, #16]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	441a      	add	r2, r3
 800932e:	8a3b      	ldrh	r3, [r7, #16]
 8009330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800933c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009340:	b29b      	uxth	r3, r3
 8009342:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	78db      	ldrb	r3, [r3, #3]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d020      	beq.n	800938e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	b29b      	uxth	r3, r3
 800935a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800935e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009362:	81bb      	strh	r3, [r7, #12]
 8009364:	89bb      	ldrh	r3, [r7, #12]
 8009366:	f083 0320 	eor.w	r3, r3, #32
 800936a:	81bb      	strh	r3, [r7, #12]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	441a      	add	r2, r3
 8009376:	89bb      	ldrh	r3, [r7, #12]
 8009378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800937c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009388:	b29b      	uxth	r3, r3
 800938a:	8013      	strh	r3, [r2, #0]
 800938c:	e2bf      	b.n	800990e <USB_ActivateEndpoint+0x74a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	b29b      	uxth	r3, r3
 800939c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093a4:	81fb      	strh	r3, [r7, #14]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	441a      	add	r2, r3
 80093b0:	89fb      	ldrh	r3, [r7, #14]
 80093b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	8013      	strh	r3, [r2, #0]
 80093c6:	e2a2      	b.n	800990e <USB_ActivateEndpoint+0x74a>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	633b      	str	r3, [r7, #48]	; 0x30
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	461a      	mov	r2, r3
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	4413      	add	r3, r2
 80093da:	633b      	str	r3, [r7, #48]	; 0x30
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	00da      	lsls	r2, r3, #3
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	4413      	add	r3, r2
 80093e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	88db      	ldrh	r3, [r3, #6]
 80093f0:	085b      	lsrs	r3, r3, #1
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fa:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009406:	b29b      	uxth	r3, r3
 8009408:	461a      	mov	r2, r3
 800940a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940c:	4413      	add	r3, r2
 800940e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	00da      	lsls	r2, r3, #3
 8009416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009418:	4413      	add	r3, r2
 800941a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800941e:	627b      	str	r3, [r7, #36]	; 0x24
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d112      	bne.n	800944e <USB_ActivateEndpoint+0x28a>
 8009428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	b29b      	uxth	r3, r3
 800942e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009432:	b29a      	uxth	r2, r3
 8009434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009436:	801a      	strh	r2, [r3, #0]
 8009438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943a:	881b      	ldrh	r3, [r3, #0]
 800943c:	b29b      	uxth	r3, r3
 800943e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009446:	b29a      	uxth	r2, r3
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	801a      	strh	r2, [r3, #0]
 800944c:	e02f      	b.n	80094ae <USB_ActivateEndpoint+0x2ea>
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	2b3e      	cmp	r3, #62	; 0x3e
 8009454:	d813      	bhi.n	800947e <USB_ActivateEndpoint+0x2ba>
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	085b      	lsrs	r3, r3, #1
 800945c:	66bb      	str	r3, [r7, #104]	; 0x68
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	d002      	beq.n	8009470 <USB_ActivateEndpoint+0x2ac>
 800946a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800946c:	3301      	adds	r3, #1
 800946e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009470:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009472:	b29b      	uxth	r3, r3
 8009474:	029b      	lsls	r3, r3, #10
 8009476:	b29a      	uxth	r2, r3
 8009478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947a:	801a      	strh	r2, [r3, #0]
 800947c:	e017      	b.n	80094ae <USB_ActivateEndpoint+0x2ea>
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	095b      	lsrs	r3, r3, #5
 8009484:	66bb      	str	r3, [r7, #104]	; 0x68
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	f003 031f 	and.w	r3, r3, #31
 800948e:	2b00      	cmp	r3, #0
 8009490:	d102      	bne.n	8009498 <USB_ActivateEndpoint+0x2d4>
 8009492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009494:	3b01      	subs	r3, #1
 8009496:	66bb      	str	r3, [r7, #104]	; 0x68
 8009498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800949a:	b29b      	uxth	r3, r3
 800949c:	029b      	lsls	r3, r3, #10
 800949e:	b29b      	uxth	r3, r3
 80094a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	881b      	ldrh	r3, [r3, #0]
 80094ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80094bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80094be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d01b      	beq.n	80094fe <USB_ActivateEndpoint+0x33a>
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4413      	add	r3, r2
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094dc:	843b      	strh	r3, [r7, #32]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	441a      	add	r2, r3
 80094e8:	8c3b      	ldrh	r3, [r7, #32]
 80094ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	b29b      	uxth	r3, r3
 800950c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009514:	83fb      	strh	r3, [r7, #30]
 8009516:	8bfb      	ldrh	r3, [r7, #30]
 8009518:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800951c:	83fb      	strh	r3, [r7, #30]
 800951e:	8bfb      	ldrh	r3, [r7, #30]
 8009520:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009524:	83fb      	strh	r3, [r7, #30]
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	441a      	add	r2, r3
 8009530:	8bfb      	ldrh	r3, [r7, #30]
 8009532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800953a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800953e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009542:	b29b      	uxth	r3, r3
 8009544:	8013      	strh	r3, [r2, #0]
 8009546:	e1e2      	b.n	800990e <USB_ActivateEndpoint+0x74a>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	b29b      	uxth	r3, r3
 8009556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800955a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800955e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	441a      	add	r2, r3
 800956c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009578:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800957c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009580:	b29b      	uxth	r3, r3
 8009582:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	663b      	str	r3, [r7, #96]	; 0x60
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800958e:	b29b      	uxth	r3, r3
 8009590:	461a      	mov	r2, r3
 8009592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009594:	4413      	add	r3, r2
 8009596:	663b      	str	r3, [r7, #96]	; 0x60
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	00da      	lsls	r2, r3, #3
 800959e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	891b      	ldrh	r3, [r3, #8]
 80095ac:	085b      	lsrs	r3, r3, #1
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095b6:	801a      	strh	r2, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	461a      	mov	r2, r3
 80095c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095c8:	4413      	add	r3, r2
 80095ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	00da      	lsls	r2, r3, #3
 80095d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095d4:	4413      	add	r3, r2
 80095d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095da:	657b      	str	r3, [r7, #84]	; 0x54
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	895b      	ldrh	r3, [r3, #10]
 80095e0:	085b      	lsrs	r3, r3, #1
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	785b      	ldrb	r3, [r3, #1]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f040 80b1 	bne.w	8009758 <USB_ActivateEndpoint+0x594>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	881b      	ldrh	r3, [r3, #0]
 8009602:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009606:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800960a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d01d      	beq.n	800964e <USB_ActivateEndpoint+0x48a>
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	b29b      	uxth	r3, r3
 8009620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009628:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	441a      	add	r2, r3
 8009636:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800963a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800963e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800964a:	b29b      	uxth	r3, r3
 800964c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	881b      	ldrh	r3, [r3, #0]
 800965a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800965c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800965e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009662:	2b00      	cmp	r3, #0
 8009664:	d01b      	beq.n	800969e <USB_ActivateEndpoint+0x4da>
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	b29b      	uxth	r3, r3
 8009674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800967c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	441a      	add	r2, r3
 8009688:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800968a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800968e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009696:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800969a:	b29b      	uxth	r3, r3
 800969c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	4413      	add	r3, r2
 80096a8:	881b      	ldrh	r3, [r3, #0]
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096b4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	441a      	add	r2, r3
 80096c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80096c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ec:	873b      	strh	r3, [r7, #56]	; 0x38
 80096ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80096f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80096f4:	873b      	strh	r3, [r7, #56]	; 0x38
 80096f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80096f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80096fc:	873b      	strh	r3, [r7, #56]	; 0x38
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	441a      	add	r2, r3
 8009708:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800970a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800970e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800971a:	b29b      	uxth	r3, r3
 800971c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4413      	add	r3, r2
 8009728:	881b      	ldrh	r3, [r3, #0]
 800972a:	b29b      	uxth	r3, r3
 800972c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009734:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	441a      	add	r2, r3
 8009740:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800974a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800974e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009752:	b29b      	uxth	r3, r3
 8009754:	8013      	strh	r3, [r2, #0]
 8009756:	e0da      	b.n	800990e <USB_ActivateEndpoint+0x74a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	4413      	add	r3, r2
 8009762:	881b      	ldrh	r3, [r3, #0]
 8009764:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8009768:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800976c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d01d      	beq.n	80097b0 <USB_ActivateEndpoint+0x5ec>
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	b29b      	uxth	r3, r3
 8009782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800978a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	441a      	add	r2, r3
 8009798:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800979c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80097a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	881b      	ldrh	r3, [r3, #0]
 80097bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80097c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80097c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d01d      	beq.n	8009808 <USB_ActivateEndpoint+0x644>
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	4413      	add	r3, r2
 80097d6:	881b      	ldrh	r3, [r3, #0]
 80097d8:	b29b      	uxth	r3, r3
 80097da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	441a      	add	r2, r3
 80097f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80097f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009800:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009804:	b29b      	uxth	r3, r3
 8009806:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	881b      	ldrh	r3, [r3, #0]
 8009814:	b29b      	uxth	r3, r3
 8009816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800981a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800981e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	441a      	add	r2, r3
 800982c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800983c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009840:	b29b      	uxth	r3, r3
 8009842:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	78db      	ldrb	r3, [r3, #3]
 8009848:	2b01      	cmp	r3, #1
 800984a:	d024      	beq.n	8009896 <USB_ActivateEndpoint+0x6d2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	b29b      	uxth	r3, r3
 800985a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800985e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009862:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009866:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800986a:	f083 0320 	eor.w	r3, r3, #32
 800986e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	441a      	add	r2, r3
 800987c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800988c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009890:	b29b      	uxth	r3, r3
 8009892:	8013      	strh	r3, [r2, #0]
 8009894:	e01d      	b.n	80098d2 <USB_ActivateEndpoint+0x70e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098ac:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	441a      	add	r2, r3
 80098ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80098be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4413      	add	r3, r2
 80098dc:	881b      	ldrh	r3, [r3, #0]
 80098de:	b29b      	uxth	r3, r3
 80098e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098e8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	441a      	add	r2, r3
 80098f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80098fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800990a:	b29b      	uxth	r3, r3
 800990c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800990e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009912:	4618      	mov	r0, r3
 8009914:	3774      	adds	r7, #116	; 0x74
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop

08009920 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009920:	b480      	push	{r7}
 8009922:	b08d      	sub	sp, #52	; 0x34
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	7b1b      	ldrb	r3, [r3, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	f040 808e 	bne.w	8009a50 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	785b      	ldrb	r3, [r3, #1]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d044      	beq.n	80099c6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	81bb      	strh	r3, [r7, #12]
 800994a:	89bb      	ldrh	r3, [r7, #12]
 800994c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009950:	2b00      	cmp	r3, #0
 8009952:	d01b      	beq.n	800998c <USB_DeactivateEndpoint+0x6c>
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	881b      	ldrh	r3, [r3, #0]
 8009960:	b29b      	uxth	r3, r3
 8009962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800996a:	817b      	strh	r3, [r7, #10]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	441a      	add	r2, r3
 8009976:	897b      	ldrh	r3, [r7, #10]
 8009978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800997c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009984:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009988:	b29b      	uxth	r3, r3
 800998a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	b29b      	uxth	r3, r3
 800999a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800999e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099a2:	813b      	strh	r3, [r7, #8]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	441a      	add	r2, r3
 80099ae:	893b      	ldrh	r3, [r7, #8]
 80099b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	8013      	strh	r3, [r2, #0]
 80099c4:	e192      	b.n	8009cec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	881b      	ldrh	r3, [r3, #0]
 80099d2:	827b      	strh	r3, [r7, #18]
 80099d4:	8a7b      	ldrh	r3, [r7, #18]
 80099d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d01b      	beq.n	8009a16 <USB_DeactivateEndpoint+0xf6>
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	881b      	ldrh	r3, [r3, #0]
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099f4:	823b      	strh	r3, [r7, #16]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	441a      	add	r2, r3
 8009a00:	8a3b      	ldrh	r3, [r7, #16]
 8009a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	881b      	ldrh	r3, [r3, #0]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a2c:	81fb      	strh	r3, [r7, #14]
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	441a      	add	r2, r3
 8009a38:	89fb      	ldrh	r3, [r7, #14]
 8009a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	8013      	strh	r3, [r2, #0]
 8009a4e:	e14d      	b.n	8009cec <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	785b      	ldrb	r3, [r3, #1]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f040 80a5 	bne.w	8009ba4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4413      	add	r3, r2
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	843b      	strh	r3, [r7, #32]
 8009a68:	8c3b      	ldrh	r3, [r7, #32]
 8009a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d01b      	beq.n	8009aaa <USB_DeactivateEndpoint+0x18a>
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a88:	83fb      	strh	r3, [r7, #30]
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	441a      	add	r2, r3
 8009a94:	8bfb      	ldrh	r3, [r7, #30]
 8009a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4413      	add	r3, r2
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	83bb      	strh	r3, [r7, #28]
 8009ab8:	8bbb      	ldrh	r3, [r7, #28]
 8009aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d01b      	beq.n	8009afa <USB_DeactivateEndpoint+0x1da>
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	881b      	ldrh	r3, [r3, #0]
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad8:	837b      	strh	r3, [r7, #26]
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	441a      	add	r2, r3
 8009ae4:	8b7b      	ldrh	r3, [r7, #26]
 8009ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009af2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	881b      	ldrh	r3, [r3, #0]
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b10:	833b      	strh	r3, [r7, #24]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	441a      	add	r2, r3
 8009b1c:	8b3b      	ldrh	r3, [r7, #24]
 8009b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b48:	82fb      	strh	r3, [r7, #22]
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	441a      	add	r2, r3
 8009b54:	8afb      	ldrh	r3, [r7, #22]
 8009b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	4413      	add	r3, r2
 8009b74:	881b      	ldrh	r3, [r3, #0]
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b80:	82bb      	strh	r3, [r7, #20]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	441a      	add	r2, r3
 8009b8c:	8abb      	ldrh	r3, [r7, #20]
 8009b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	8013      	strh	r3, [r2, #0]
 8009ba2:	e0a3      	b.n	8009cec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4413      	add	r3, r2
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009bb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d01b      	beq.n	8009bf4 <USB_DeactivateEndpoint+0x2d4>
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	881b      	ldrh	r3, [r3, #0]
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bd2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	441a      	add	r2, r3
 8009bde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009be8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	881b      	ldrh	r3, [r3, #0]
 8009c00:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009c02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d01b      	beq.n	8009c44 <USB_DeactivateEndpoint+0x324>
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	4413      	add	r3, r2
 8009c16:	881b      	ldrh	r3, [r3, #0]
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c22:	853b      	strh	r3, [r7, #40]	; 0x28
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	441a      	add	r2, r3
 8009c2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	881b      	ldrh	r3, [r3, #0]
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	441a      	add	r2, r3
 8009c66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c92:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	441a      	add	r2, r3
 8009c9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4413      	add	r3, r2
 8009cbe:	881b      	ldrh	r3, [r3, #0]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cca:	847b      	strh	r3, [r7, #34]	; 0x22
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	441a      	add	r2, r3
 8009cd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3734      	adds	r7, #52	; 0x34
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr

08009cfa <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b0a0      	sub	sp, #128	; 0x80
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	785b      	ldrb	r3, [r3, #1]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	f040 81a1 	bne.w	800a050 <USB_EPStartXfer+0x356>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	699a      	ldr	r2, [r3, #24]
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d909      	bls.n	8009d2e <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	699a      	ldr	r2, [r3, #24]
 8009d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d26:	1ad2      	subs	r2, r2, r3
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	619a      	str	r2, [r3, #24]
 8009d2c:	e005      	b.n	8009d3a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	2200      	movs	r2, #0
 8009d38:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	7b1b      	ldrb	r3, [r3, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d11f      	bne.n	8009d82 <USB_EPStartXfer+0x88>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	6959      	ldr	r1, [r3, #20]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	88da      	ldrh	r2, [r3, #6]
 8009d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fc3f 	bl	800a5d2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	613b      	str	r3, [r7, #16]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	461a      	mov	r2, r3
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	4413      	add	r3, r2
 8009d66:	613b      	str	r3, [r7, #16]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	00da      	lsls	r2, r3, #3
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	4413      	add	r3, r2
 8009d72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d76:	60fb      	str	r3, [r7, #12]
 8009d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	801a      	strh	r2, [r3, #0]
 8009d80:	e141      	b.n	800a006 <USB_EPStartXfer+0x30c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	881b      	ldrh	r3, [r3, #0]
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d076      	beq.n	8009e86 <USB_EPStartXfer+0x18c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	785b      	ldrb	r3, [r3, #1]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d153      	bne.n	8009e4c <USB_EPStartXfer+0x152>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	61fb      	str	r3, [r7, #28]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	461a      	mov	r2, r3
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	4413      	add	r3, r2
 8009db6:	61fb      	str	r3, [r7, #28]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	00da      	lsls	r2, r3, #3
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009dc6:	61bb      	str	r3, [r7, #24]
 8009dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d112      	bne.n	8009df4 <USB_EPStartXfer+0xfa>
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	881b      	ldrh	r3, [r3, #0]
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	801a      	strh	r2, [r3, #0]
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	881b      	ldrh	r3, [r3, #0]
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	801a      	strh	r2, [r3, #0]
 8009df2:	e043      	b.n	8009e7c <USB_EPStartXfer+0x182>
 8009df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009df6:	2b3e      	cmp	r3, #62	; 0x3e
 8009df8:	d811      	bhi.n	8009e1e <USB_EPStartXfer+0x124>
 8009dfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009dfc:	085b      	lsrs	r3, r3, #1
 8009dfe:	677b      	str	r3, [r7, #116]	; 0x74
 8009e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e02:	f003 0301 	and.w	r3, r3, #1
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d002      	beq.n	8009e10 <USB_EPStartXfer+0x116>
 8009e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	677b      	str	r3, [r7, #116]	; 0x74
 8009e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	029b      	lsls	r3, r3, #10
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	801a      	strh	r2, [r3, #0]
 8009e1c:	e02e      	b.n	8009e7c <USB_EPStartXfer+0x182>
 8009e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e20:	095b      	lsrs	r3, r3, #5
 8009e22:	677b      	str	r3, [r7, #116]	; 0x74
 8009e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e26:	f003 031f 	and.w	r3, r3, #31
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d102      	bne.n	8009e34 <USB_EPStartXfer+0x13a>
 8009e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e30:	3b01      	subs	r3, #1
 8009e32:	677b      	str	r3, [r7, #116]	; 0x74
 8009e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	029b      	lsls	r3, r3, #10
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	801a      	strh	r2, [r3, #0]
 8009e4a:	e017      	b.n	8009e7c <USB_EPStartXfer+0x182>
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	785b      	ldrb	r3, [r3, #1]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d113      	bne.n	8009e7c <USB_EPStartXfer+0x182>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	4413      	add	r3, r2
 8009e62:	627b      	str	r3, [r7, #36]	; 0x24
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	00da      	lsls	r2, r3, #3
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e72:	623b      	str	r3, [r7, #32]
 8009e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	895b      	ldrh	r3, [r3, #10]
 8009e80:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8009e84:	e075      	b.n	8009f72 <USB_EPStartXfer+0x278>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d153      	bne.n	8009f36 <USB_EPStartXfer+0x23c>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9e:	4413      	add	r3, r2
 8009ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	00da      	lsls	r2, r3, #3
 8009ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eaa:	4413      	add	r3, r2
 8009eac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d112      	bne.n	8009ede <USB_EPStartXfer+0x1e4>
 8009eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eba:	881b      	ldrh	r3, [r3, #0]
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec6:	801a      	strh	r2, [r3, #0]
 8009ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eda:	801a      	strh	r2, [r3, #0]
 8009edc:	e045      	b.n	8009f6a <USB_EPStartXfer+0x270>
 8009ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ee0:	2b3e      	cmp	r3, #62	; 0x3e
 8009ee2:	d811      	bhi.n	8009f08 <USB_EPStartXfer+0x20e>
 8009ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ee6:	085b      	lsrs	r3, r3, #1
 8009ee8:	673b      	str	r3, [r7, #112]	; 0x70
 8009eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009eec:	f003 0301 	and.w	r3, r3, #1
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <USB_EPStartXfer+0x200>
 8009ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	673b      	str	r3, [r7, #112]	; 0x70
 8009efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	029b      	lsls	r3, r3, #10
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f04:	801a      	strh	r2, [r3, #0]
 8009f06:	e030      	b.n	8009f6a <USB_EPStartXfer+0x270>
 8009f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f0a:	095b      	lsrs	r3, r3, #5
 8009f0c:	673b      	str	r3, [r7, #112]	; 0x70
 8009f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f10:	f003 031f 	and.w	r3, r3, #31
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d102      	bne.n	8009f1e <USB_EPStartXfer+0x224>
 8009f18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	673b      	str	r3, [r7, #112]	; 0x70
 8009f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	029b      	lsls	r3, r3, #10
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f32:	801a      	strh	r2, [r3, #0]
 8009f34:	e019      	b.n	8009f6a <USB_EPStartXfer+0x270>
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	785b      	ldrb	r3, [r3, #1]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d115      	bne.n	8009f6a <USB_EPStartXfer+0x270>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	637b      	str	r3, [r7, #52]	; 0x34
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f4e:	4413      	add	r3, r2
 8009f50:	637b      	str	r3, [r7, #52]	; 0x34
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	00da      	lsls	r2, r3, #3
 8009f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f60:	633b      	str	r3, [r7, #48]	; 0x30
 8009f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	891b      	ldrh	r3, [r3, #8]
 8009f6e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	6959      	ldr	r1, [r3, #20]
 8009f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fb27 	bl	800a5d2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	785b      	ldrb	r3, [r3, #1]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d11c      	bne.n	8009fc6 <USB_EPStartXfer+0x2cc>
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fa2:	82bb      	strh	r3, [r7, #20]
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	441a      	add	r2, r3
 8009fae:	8abb      	ldrh	r3, [r7, #20]
 8009fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	8013      	strh	r3, [r2, #0]
 8009fc4:	e01f      	b.n	800a006 <USB_EPStartXfer+0x30c>
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	785b      	ldrb	r3, [r3, #1]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d11b      	bne.n	800a006 <USB_EPStartXfer+0x30c>
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4413      	add	r3, r2
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe4:	82fb      	strh	r3, [r7, #22]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	441a      	add	r2, r3
 8009ff0:	8afb      	ldrh	r3, [r7, #22]
 8009ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a002:	b29b      	uxth	r3, r3
 800a004:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4413      	add	r3, r2
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	b29b      	uxth	r3, r3
 800a014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a01c:	817b      	strh	r3, [r7, #10]
 800a01e:	897b      	ldrh	r3, [r7, #10]
 800a020:	f083 0310 	eor.w	r3, r3, #16
 800a024:	817b      	strh	r3, [r7, #10]
 800a026:	897b      	ldrh	r3, [r7, #10]
 800a028:	f083 0320 	eor.w	r3, r3, #32
 800a02c:	817b      	strh	r3, [r7, #10]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	441a      	add	r2, r3
 800a038:	897b      	ldrh	r3, [r7, #10]
 800a03a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a03e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	8013      	strh	r3, [r2, #0]
 800a04e:	e175      	b.n	800a33c <USB_EPStartXfer+0x642>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	699a      	ldr	r2, [r3, #24]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d909      	bls.n	800a070 <USB_EPStartXfer+0x376>
    {
      len = ep->maxpacket;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	699a      	ldr	r2, [r3, #24]
 800a066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a068:	1ad2      	subs	r2, r2, r3
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	619a      	str	r2, [r3, #24]
 800a06e:	e005      	b.n	800a07c <USB_EPStartXfer+0x382>
    }
    else
    {
      len = ep->xfer_len;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2200      	movs	r2, #0
 800a07a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	7b1b      	ldrb	r3, [r3, #12]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d153      	bne.n	800a12c <USB_EPStartXfer+0x432>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	643b      	str	r3, [r7, #64]	; 0x40
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a08e:	b29b      	uxth	r3, r3
 800a090:	461a      	mov	r2, r3
 800a092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a094:	4413      	add	r3, r2
 800a096:	643b      	str	r3, [r7, #64]	; 0x40
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	00da      	lsls	r2, r3, #3
 800a09e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d112      	bne.n	800a0d4 <USB_EPStartXfer+0x3da>
 800a0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b0:	881b      	ldrh	r3, [r3, #0]
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0bc:	801a      	strh	r2, [r3, #0]
 800a0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0c0:	881b      	ldrh	r3, [r3, #0]
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0d0:	801a      	strh	r2, [r3, #0]
 800a0d2:	e10f      	b.n	800a2f4 <USB_EPStartXfer+0x5fa>
 800a0d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0d6:	2b3e      	cmp	r3, #62	; 0x3e
 800a0d8:	d811      	bhi.n	800a0fe <USB_EPStartXfer+0x404>
 800a0da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0dc:	085b      	lsrs	r3, r3, #1
 800a0de:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0e2:	f003 0301 	and.w	r3, r3, #1
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <USB_EPStartXfer+0x3f6>
 800a0ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	029b      	lsls	r3, r3, #10
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0fa:	801a      	strh	r2, [r3, #0]
 800a0fc:	e0fa      	b.n	800a2f4 <USB_EPStartXfer+0x5fa>
 800a0fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a100:	095b      	lsrs	r3, r3, #5
 800a102:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a106:	f003 031f 	and.w	r3, r3, #31
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d102      	bne.n	800a114 <USB_EPStartXfer+0x41a>
 800a10e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a110:	3b01      	subs	r3, #1
 800a112:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a116:	b29b      	uxth	r3, r3
 800a118:	029b      	lsls	r3, r3, #10
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a124:	b29a      	uxth	r2, r3
 800a126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a128:	801a      	strh	r2, [r3, #0]
 800a12a:	e0e3      	b.n	800a2f4 <USB_EPStartXfer+0x5fa>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	785b      	ldrb	r3, [r3, #1]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d153      	bne.n	800a1dc <USB_EPStartXfer+0x4e2>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	65bb      	str	r3, [r7, #88]	; 0x58
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a13e:	b29b      	uxth	r3, r3
 800a140:	461a      	mov	r2, r3
 800a142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a144:	4413      	add	r3, r2
 800a146:	65bb      	str	r3, [r7, #88]	; 0x58
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	00da      	lsls	r2, r3, #3
 800a14e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a150:	4413      	add	r3, r2
 800a152:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a156:	657b      	str	r3, [r7, #84]	; 0x54
 800a158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d112      	bne.n	800a184 <USB_EPStartXfer+0x48a>
 800a15e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a160:	881b      	ldrh	r3, [r3, #0]
 800a162:	b29b      	uxth	r3, r3
 800a164:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a168:	b29a      	uxth	r2, r3
 800a16a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a16c:	801a      	strh	r2, [r3, #0]
 800a16e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	b29b      	uxth	r3, r3
 800a174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a180:	801a      	strh	r2, [r3, #0]
 800a182:	e045      	b.n	800a210 <USB_EPStartXfer+0x516>
 800a184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a186:	2b3e      	cmp	r3, #62	; 0x3e
 800a188:	d811      	bhi.n	800a1ae <USB_EPStartXfer+0x4b4>
 800a18a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a18c:	085b      	lsrs	r3, r3, #1
 800a18e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	2b00      	cmp	r3, #0
 800a198:	d002      	beq.n	800a1a0 <USB_EPStartXfer+0x4a6>
 800a19a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a19c:	3301      	adds	r3, #1
 800a19e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	029b      	lsls	r3, r3, #10
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1aa:	801a      	strh	r2, [r3, #0]
 800a1ac:	e030      	b.n	800a210 <USB_EPStartXfer+0x516>
 800a1ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1b0:	095b      	lsrs	r3, r3, #5
 800a1b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1b6:	f003 031f 	and.w	r3, r3, #31
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d102      	bne.n	800a1c4 <USB_EPStartXfer+0x4ca>
 800a1be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	029b      	lsls	r3, r3, #10
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1d8:	801a      	strh	r2, [r3, #0]
 800a1da:	e019      	b.n	800a210 <USB_EPStartXfer+0x516>
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	785b      	ldrb	r3, [r3, #1]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d115      	bne.n	800a210 <USB_EPStartXfer+0x516>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	663b      	str	r3, [r7, #96]	; 0x60
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1f4:	4413      	add	r3, r2
 800a1f6:	663b      	str	r3, [r7, #96]	; 0x60
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	00da      	lsls	r2, r3, #3
 800a1fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a200:	4413      	add	r3, r2
 800a202:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a206:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a20e:	801a      	strh	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	653b      	str	r3, [r7, #80]	; 0x50
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	785b      	ldrb	r3, [r3, #1]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d153      	bne.n	800a2c4 <USB_EPStartXfer+0x5ca>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a226:	b29b      	uxth	r3, r3
 800a228:	461a      	mov	r2, r3
 800a22a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a22c:	4413      	add	r3, r2
 800a22e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	00da      	lsls	r2, r3, #3
 800a236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a238:	4413      	add	r3, r2
 800a23a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a23e:	647b      	str	r3, [r7, #68]	; 0x44
 800a240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a242:	2b00      	cmp	r3, #0
 800a244:	d112      	bne.n	800a26c <USB_EPStartXfer+0x572>
 800a246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a248:	881b      	ldrh	r3, [r3, #0]
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a250:	b29a      	uxth	r2, r3
 800a252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a254:	801a      	strh	r2, [r3, #0]
 800a256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a258:	881b      	ldrh	r3, [r3, #0]
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a264:	b29a      	uxth	r2, r3
 800a266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a268:	801a      	strh	r2, [r3, #0]
 800a26a:	e043      	b.n	800a2f4 <USB_EPStartXfer+0x5fa>
 800a26c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a26e:	2b3e      	cmp	r3, #62	; 0x3e
 800a270:	d811      	bhi.n	800a296 <USB_EPStartXfer+0x59c>
 800a272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a274:	085b      	lsrs	r3, r3, #1
 800a276:	667b      	str	r3, [r7, #100]	; 0x64
 800a278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a27a:	f003 0301 	and.w	r3, r3, #1
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d002      	beq.n	800a288 <USB_EPStartXfer+0x58e>
 800a282:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a284:	3301      	adds	r3, #1
 800a286:	667b      	str	r3, [r7, #100]	; 0x64
 800a288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	029b      	lsls	r3, r3, #10
 800a28e:	b29a      	uxth	r2, r3
 800a290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a292:	801a      	strh	r2, [r3, #0]
 800a294:	e02e      	b.n	800a2f4 <USB_EPStartXfer+0x5fa>
 800a296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a298:	095b      	lsrs	r3, r3, #5
 800a29a:	667b      	str	r3, [r7, #100]	; 0x64
 800a29c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a29e:	f003 031f 	and.w	r3, r3, #31
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d102      	bne.n	800a2ac <USB_EPStartXfer+0x5b2>
 800a2a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2a8:	3b01      	subs	r3, #1
 800a2aa:	667b      	str	r3, [r7, #100]	; 0x64
 800a2ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	029b      	lsls	r3, r3, #10
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2c0:	801a      	strh	r2, [r3, #0]
 800a2c2:	e017      	b.n	800a2f4 <USB_EPStartXfer+0x5fa>
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	785b      	ldrb	r3, [r3, #1]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d113      	bne.n	800a2f4 <USB_EPStartXfer+0x5fa>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2d8:	4413      	add	r3, r2
 800a2da:	653b      	str	r3, [r7, #80]	; 0x50
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	00da      	lsls	r2, r3, #3
 800a2e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a2ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2f2:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	881b      	ldrh	r3, [r3, #0]
 800a300:	b29b      	uxth	r3, r3
 800a302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a30a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a30c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a30e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a312:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a314:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a316:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a31a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	441a      	add	r2, r3
 800a326:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a32c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a338:	b29b      	uxth	r3, r3
 800a33a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3780      	adds	r7, #128	; 0x80
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a346:	b480      	push	{r7}
 800a348:	b085      	sub	sp, #20
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	785b      	ldrb	r3, [r3, #1]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d020      	beq.n	800a39a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	881b      	ldrh	r3, [r3, #0]
 800a364:	b29b      	uxth	r3, r3
 800a366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a36a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a36e:	81bb      	strh	r3, [r7, #12]
 800a370:	89bb      	ldrh	r3, [r7, #12]
 800a372:	f083 0310 	eor.w	r3, r3, #16
 800a376:	81bb      	strh	r3, [r7, #12]
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	441a      	add	r2, r3
 800a382:	89bb      	ldrh	r3, [r7, #12]
 800a384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a38c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a394:	b29b      	uxth	r3, r3
 800a396:	8013      	strh	r3, [r2, #0]
 800a398:	e01f      	b.n	800a3da <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4413      	add	r3, r2
 800a3a4:	881b      	ldrh	r3, [r3, #0]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3b0:	81fb      	strh	r3, [r7, #14]
 800a3b2:	89fb      	ldrh	r3, [r7, #14]
 800a3b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a3b8:	81fb      	strh	r3, [r7, #14]
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	441a      	add	r2, r3
 800a3c4:	89fb      	ldrh	r3, [r7, #14]
 800a3c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	7b1b      	ldrb	r3, [r3, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f040 809d 	bne.w	800a536 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	785b      	ldrb	r3, [r3, #1]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d04c      	beq.n	800a49e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	881b      	ldrh	r3, [r3, #0]
 800a410:	823b      	strh	r3, [r7, #16]
 800a412:	8a3b      	ldrh	r3, [r7, #16]
 800a414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d01b      	beq.n	800a454 <USB_EPClearStall+0x6c>
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	881b      	ldrh	r3, [r3, #0]
 800a428:	b29b      	uxth	r3, r3
 800a42a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a42e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a432:	81fb      	strh	r3, [r7, #14]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	441a      	add	r2, r3
 800a43e:	89fb      	ldrh	r3, [r7, #14]
 800a440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a44c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a450:	b29b      	uxth	r3, r3
 800a452:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	78db      	ldrb	r3, [r3, #3]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d06c      	beq.n	800a536 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4413      	add	r3, r2
 800a466:	881b      	ldrh	r3, [r3, #0]
 800a468:	b29b      	uxth	r3, r3
 800a46a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a46e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a472:	81bb      	strh	r3, [r7, #12]
 800a474:	89bb      	ldrh	r3, [r7, #12]
 800a476:	f083 0320 	eor.w	r3, r3, #32
 800a47a:	81bb      	strh	r3, [r7, #12]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	441a      	add	r2, r3
 800a486:	89bb      	ldrh	r3, [r7, #12]
 800a488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a48c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a498:	b29b      	uxth	r3, r3
 800a49a:	8013      	strh	r3, [r2, #0]
 800a49c:	e04b      	b.n	800a536 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	881b      	ldrh	r3, [r3, #0]
 800a4aa:	82fb      	strh	r3, [r7, #22]
 800a4ac:	8afb      	ldrh	r3, [r7, #22]
 800a4ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d01b      	beq.n	800a4ee <USB_EPClearStall+0x106>
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	881b      	ldrh	r3, [r3, #0]
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4cc:	82bb      	strh	r3, [r7, #20]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	441a      	add	r2, r3
 800a4d8:	8abb      	ldrh	r3, [r7, #20]
 800a4da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	4413      	add	r3, r2
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a504:	827b      	strh	r3, [r7, #18]
 800a506:	8a7b      	ldrh	r3, [r7, #18]
 800a508:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a50c:	827b      	strh	r3, [r7, #18]
 800a50e:	8a7b      	ldrh	r3, [r7, #18]
 800a510:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a514:	827b      	strh	r3, [r7, #18]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	441a      	add	r2, r3
 800a520:	8a7b      	ldrh	r3, [r7, #18]
 800a522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a52a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a52e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a532:	b29b      	uxth	r3, r3
 800a534:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	371c      	adds	r7, #28
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a550:	78fb      	ldrb	r3, [r7, #3]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d103      	bne.n	800a55e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2280      	movs	r2, #128	; 0x80
 800a55a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a584:	b29a      	uxth	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b085      	sub	sp, #20
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3714      	adds	r7, #20
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b083      	sub	sp, #12
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b08d      	sub	sp, #52	; 0x34
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	60f8      	str	r0, [r7, #12]
 800a5da:	60b9      	str	r1, [r7, #8]
 800a5dc:	4611      	mov	r1, r2
 800a5de:	461a      	mov	r2, r3
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	80fb      	strh	r3, [r7, #6]
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a5e8:	88bb      	ldrh	r3, [r7, #4]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	085b      	lsrs	r3, r3, #1
 800a5ee:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a5f8:	88fa      	ldrh	r2, [r7, #6]
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a602:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a604:	6a3b      	ldr	r3, [r7, #32]
 800a606:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a608:	e01b      	b.n	800a642 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a612:	3301      	adds	r3, #1
 800a614:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	021b      	lsls	r3, r3, #8
 800a61e:	b29b      	uxth	r3, r3
 800a620:	461a      	mov	r2, r3
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	4313      	orrs	r3, r2
 800a626:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a632:	3302      	adds	r3, #2
 800a634:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a638:	3301      	adds	r3, #1
 800a63a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63e:	3b01      	subs	r3, #1
 800a640:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a644:	2b00      	cmp	r3, #0
 800a646:	d1e0      	bne.n	800a60a <USB_WritePMA+0x38>
  }
}
 800a648:	bf00      	nop
 800a64a:	3734      	adds	r7, #52	; 0x34
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a654:	b480      	push	{r7}
 800a656:	b08b      	sub	sp, #44	; 0x2c
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	4611      	mov	r1, r2
 800a660:	461a      	mov	r2, r3
 800a662:	460b      	mov	r3, r1
 800a664:	80fb      	strh	r3, [r7, #6]
 800a666:	4613      	mov	r3, r2
 800a668:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a66a:	88bb      	ldrh	r3, [r7, #4]
 800a66c:	085b      	lsrs	r3, r3, #1
 800a66e:	b29b      	uxth	r3, r3
 800a670:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a67a:	88fa      	ldrh	r2, [r7, #6]
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	4413      	add	r3, r2
 800a680:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a684:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	627b      	str	r3, [r7, #36]	; 0x24
 800a68a:	e018      	b.n	800a6be <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	881b      	ldrh	r3, [r3, #0]
 800a690:	b29b      	uxth	r3, r3
 800a692:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	3302      	adds	r3, #2
 800a698:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	0a1b      	lsrs	r3, r3, #8
 800a6ac:	b2da      	uxtb	r2, r3
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1e3      	bne.n	800a68c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a6c4:	88bb      	ldrh	r3, [r7, #4]
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d007      	beq.n	800a6e0 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800a6d0:	6a3b      	ldr	r3, [r7, #32]
 800a6d2:	881b      	ldrh	r3, [r3, #0]
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	b2da      	uxtb	r2, r3
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	701a      	strb	r2, [r3, #0]
  }
}
 800a6e0:	bf00      	nop
 800a6e2:	372c      	adds	r7, #44	; 0x2c
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a6f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a6fc:	f009 f8ca 	bl	8013894 <USBD_static_malloc>
 800a700:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d105      	bne.n	800a714 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a710:	2302      	movs	r3, #2
 800a712:	e066      	b.n	800a7e2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	7c1b      	ldrb	r3, [r3, #16]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d119      	bne.n	800a758 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a724:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a728:	2202      	movs	r2, #2
 800a72a:	2181      	movs	r1, #129	; 0x81
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f008 ff94 	bl	801365a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a73c:	2202      	movs	r2, #2
 800a73e:	2101      	movs	r1, #1
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f008 ff8a 	bl	801365a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2210      	movs	r2, #16
 800a752:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a756:	e016      	b.n	800a786 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a758:	2340      	movs	r3, #64	; 0x40
 800a75a:	2202      	movs	r2, #2
 800a75c:	2181      	movs	r1, #129	; 0x81
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f008 ff7b 	bl	801365a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a76a:	2340      	movs	r3, #64	; 0x40
 800a76c:	2202      	movs	r2, #2
 800a76e:	2101      	movs	r1, #1
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f008 ff72 	bl	801365a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2201      	movs	r2, #1
 800a77a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2210      	movs	r2, #16
 800a782:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a786:	2308      	movs	r3, #8
 800a788:	2203      	movs	r2, #3
 800a78a:	2182      	movs	r1, #130	; 0x82
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f008 ff64 	bl	801365a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	7c1b      	ldrb	r3, [r3, #16]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d109      	bne.n	800a7d0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f009 f82f 	bl	801382c <USBD_LL_PrepareReceive>
 800a7ce:	e007      	b.n	800a7e0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7d6:	2340      	movs	r3, #64	; 0x40
 800a7d8:	2101      	movs	r1, #1
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f009 f826 	bl	801382c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b082      	sub	sp, #8
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a7f6:	2181      	movs	r1, #129	; 0x81
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f008 ff54 	bl	80136a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a804:	2101      	movs	r1, #1
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f008 ff4d 	bl	80136a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a814:	2182      	movs	r1, #130	; 0x82
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f008 ff45 	bl	80136a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00e      	beq.n	800a854 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a846:	4618      	mov	r0, r3
 800a848:	f009 f832 	bl	80138b0 <USBD_static_free>
    pdev->pClassData = NULL;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
	...

0800a860 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a870:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a872:	2300      	movs	r3, #0
 800a874:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a876:	2300      	movs	r3, #0
 800a878:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d101      	bne.n	800a888 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a884:	2303      	movs	r3, #3
 800a886:	e0af      	b.n	800a9e8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a890:	2b00      	cmp	r3, #0
 800a892:	d03f      	beq.n	800a914 <USBD_CDC_Setup+0xb4>
 800a894:	2b20      	cmp	r3, #32
 800a896:	f040 809f 	bne.w	800a9d8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	88db      	ldrh	r3, [r3, #6]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d02e      	beq.n	800a900 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	b25b      	sxtb	r3, r3
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	da16      	bge.n	800a8da <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	683a      	ldr	r2, [r7, #0]
 800a8b6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a8b8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	88d2      	ldrh	r2, [r2, #6]
 800a8be:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	88db      	ldrh	r3, [r3, #6]
 800a8c4:	2b07      	cmp	r3, #7
 800a8c6:	bf28      	it	cs
 800a8c8:	2307      	movcs	r3, #7
 800a8ca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	89fa      	ldrh	r2, [r7, #14]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f001 fa94 	bl	800be00 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a8d8:	e085      	b.n	800a9e6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	785a      	ldrb	r2, [r3, #1]
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	88db      	ldrh	r3, [r3, #6]
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a8f0:	6939      	ldr	r1, [r7, #16]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	88db      	ldrh	r3, [r3, #6]
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f001 faad 	bl	800be58 <USBD_CtlPrepareRx>
      break;
 800a8fe:	e072      	b.n	800a9e6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	683a      	ldr	r2, [r7, #0]
 800a90a:	7850      	ldrb	r0, [r2, #1]
 800a90c:	2200      	movs	r2, #0
 800a90e:	6839      	ldr	r1, [r7, #0]
 800a910:	4798      	blx	r3
      break;
 800a912:	e068      	b.n	800a9e6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	785b      	ldrb	r3, [r3, #1]
 800a918:	2b0b      	cmp	r3, #11
 800a91a:	d852      	bhi.n	800a9c2 <USBD_CDC_Setup+0x162>
 800a91c:	a201      	add	r2, pc, #4	; (adr r2, 800a924 <USBD_CDC_Setup+0xc4>)
 800a91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a922:	bf00      	nop
 800a924:	0800a955 	.word	0x0800a955
 800a928:	0800a9d1 	.word	0x0800a9d1
 800a92c:	0800a9c3 	.word	0x0800a9c3
 800a930:	0800a9c3 	.word	0x0800a9c3
 800a934:	0800a9c3 	.word	0x0800a9c3
 800a938:	0800a9c3 	.word	0x0800a9c3
 800a93c:	0800a9c3 	.word	0x0800a9c3
 800a940:	0800a9c3 	.word	0x0800a9c3
 800a944:	0800a9c3 	.word	0x0800a9c3
 800a948:	0800a9c3 	.word	0x0800a9c3
 800a94c:	0800a97f 	.word	0x0800a97f
 800a950:	0800a9a9 	.word	0x0800a9a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	2b03      	cmp	r3, #3
 800a95e:	d107      	bne.n	800a970 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a960:	f107 030a 	add.w	r3, r7, #10
 800a964:	2202      	movs	r2, #2
 800a966:	4619      	mov	r1, r3
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f001 fa49 	bl	800be00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a96e:	e032      	b.n	800a9d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a970:	6839      	ldr	r1, [r7, #0]
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f001 f9d3 	bl	800bd1e <USBD_CtlError>
            ret = USBD_FAIL;
 800a978:	2303      	movs	r3, #3
 800a97a:	75fb      	strb	r3, [r7, #23]
          break;
 800a97c:	e02b      	b.n	800a9d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b03      	cmp	r3, #3
 800a988:	d107      	bne.n	800a99a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a98a:	f107 030d 	add.w	r3, r7, #13
 800a98e:	2201      	movs	r2, #1
 800a990:	4619      	mov	r1, r3
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f001 fa34 	bl	800be00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a998:	e01d      	b.n	800a9d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f001 f9be 	bl	800bd1e <USBD_CtlError>
            ret = USBD_FAIL;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	75fb      	strb	r3, [r7, #23]
          break;
 800a9a6:	e016      	b.n	800a9d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	2b03      	cmp	r3, #3
 800a9b2:	d00f      	beq.n	800a9d4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a9b4:	6839      	ldr	r1, [r7, #0]
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f001 f9b1 	bl	800bd1e <USBD_CtlError>
            ret = USBD_FAIL;
 800a9bc:	2303      	movs	r3, #3
 800a9be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a9c0:	e008      	b.n	800a9d4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a9c2:	6839      	ldr	r1, [r7, #0]
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f001 f9aa 	bl	800bd1e <USBD_CtlError>
          ret = USBD_FAIL;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	75fb      	strb	r3, [r7, #23]
          break;
 800a9ce:	e002      	b.n	800a9d6 <USBD_CDC_Setup+0x176>
          break;
 800a9d0:	bf00      	nop
 800a9d2:	e008      	b.n	800a9e6 <USBD_CDC_Setup+0x186>
          break;
 800a9d4:	bf00      	nop
      }
      break;
 800a9d6:	e006      	b.n	800a9e6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f001 f99f 	bl	800bd1e <USBD_CtlError>
      ret = USBD_FAIL;
 800a9e0:	2303      	movs	r3, #3
 800a9e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a9e4:	bf00      	nop
  }

  return (uint8_t)ret;
 800a9e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3718      	adds	r7, #24
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aa02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	e04c      	b.n	800aaac <USBD_CDC_DataIn+0xbc>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa18:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800aa1a:	78fa      	ldrb	r2, [r7, #3]
 800aa1c:	6879      	ldr	r1, [r7, #4]
 800aa1e:	4613      	mov	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4413      	add	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	440b      	add	r3, r1
 800aa28:	3318      	adds	r3, #24
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d026      	beq.n	800aa7e <USBD_CDC_DataIn+0x8e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aa30:	78fa      	ldrb	r2, [r7, #3]
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	4613      	mov	r3, r2
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	4413      	add	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	440b      	add	r3, r1
 800aa3e:	3318      	adds	r3, #24
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	78fa      	ldrb	r2, [r7, #3]
 800aa44:	68f9      	ldr	r1, [r7, #12]
 800aa46:	0152      	lsls	r2, r2, #5
 800aa48:	440a      	add	r2, r1
 800aa4a:	3238      	adds	r2, #56	; 0x38
 800aa4c:	6812      	ldr	r2, [r2, #0]
 800aa4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa52:	fb02 f201 	mul.w	r2, r2, r1
 800aa56:	1a9b      	subs	r3, r3, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d110      	bne.n	800aa7e <USBD_CDC_DataIn+0x8e>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800aa5c:	78fa      	ldrb	r2, [r7, #3]
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	4613      	mov	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4413      	add	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	440b      	add	r3, r1
 800aa6a:	3318      	adds	r3, #24
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aa70:	78f9      	ldrb	r1, [r7, #3]
 800aa72:	2300      	movs	r3, #0
 800aa74:	2200      	movs	r2, #0
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f008 feb7 	bl	80137ea <USBD_LL_Transmit>
 800aa7c:	e015      	b.n	800aaaa <USBD_CDC_DataIn+0xba>
  }
  else
  {
    hcdc->TxState = 0U;
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00b      	beq.n	800aaaa <USBD_CDC_DataIn+0xba>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800aaa0:	68ba      	ldr	r2, [r7, #8]
 800aaa2:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800aaa6:	78fa      	ldrb	r2, [r7, #3]
 800aaa8:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	460b      	mov	r3, r1
 800aabe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aac6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aad2:	2303      	movs	r3, #3
 800aad4:	e015      	b.n	800ab02 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aad6:	78fb      	ldrb	r3, [r7, #3]
 800aad8:	4619      	mov	r1, r3
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f008 fec7 	bl	801386e <USBD_LL_GetRxDataSize>
 800aae0:	4602      	mov	r2, r0
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aafc:	4611      	mov	r1, r2
 800aafe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b084      	sub	sp, #16
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d101      	bne.n	800ab24 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ab20:	2303      	movs	r3, #3
 800ab22:	e01b      	b.n	800ab5c <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d015      	beq.n	800ab5a <USBD_CDC_EP0_RxReady+0x50>
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ab34:	2bff      	cmp	r3, #255	; 0xff
 800ab36:	d010      	beq.n	800ab5a <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ab46:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab4e:	b292      	uxth	r2, r2
 800ab50:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	22ff      	movs	r2, #255	; 0xff
 800ab56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2243      	movs	r2, #67	; 0x43
 800ab70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ab72:	4b03      	ldr	r3, [pc, #12]	; (800ab80 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	200000b0 	.word	0x200000b0

0800ab84 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2243      	movs	r2, #67	; 0x43
 800ab90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ab92:	4b03      	ldr	r3, [pc, #12]	; (800aba0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	2000006c 	.word	0x2000006c

0800aba4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2243      	movs	r2, #67	; 0x43
 800abb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800abb2:	4b03      	ldr	r3, [pc, #12]	; (800abc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	200000f4 	.word	0x200000f4

0800abc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	220a      	movs	r2, #10
 800abd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800abd2:	4b03      	ldr	r3, [pc, #12]	; (800abe0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr
 800abe0:	20000028 	.word	0x20000028

0800abe4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d101      	bne.n	800abf8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800abf4:	2303      	movs	r3, #3
 800abf6:	e004      	b.n	800ac02 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	370c      	adds	r7, #12
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b087      	sub	sp, #28
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	60f8      	str	r0, [r7, #12]
 800ac16:	60b9      	str	r1, [r7, #8]
 800ac18:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac20:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d101      	bne.n	800ac2c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e008      	b.n	800ac3e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	371c      	adds	r7, #28
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b085      	sub	sp, #20
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac5a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d101      	bne.n	800ac66 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ac62:	2303      	movs	r3, #3
 800ac64:	e004      	b.n	800ac70 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	683a      	ldr	r2, [r7, #0]
 800ac6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac8a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d101      	bne.n	800ac9e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac9a:	2303      	movs	r3, #3
 800ac9c:	e01a      	b.n	800acd4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d114      	bne.n	800acd2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2201      	movs	r2, #1
 800acac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800acc6:	2181      	movs	r1, #129	; 0x81
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f008 fd8e 	bl	80137ea <USBD_LL_Transmit>

    ret = USBD_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800acd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d101      	bne.n	800acfa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800acf6:	2303      	movs	r3, #3
 800acf8:	e016      	b.n	800ad28 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	7c1b      	ldrb	r3, [r3, #16]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d109      	bne.n	800ad16 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f008 fd8c 	bl	801382c <USBD_LL_PrepareReceive>
 800ad14:	e007      	b.n	800ad26 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad1c:	2340      	movs	r3, #64	; 0x40
 800ad1e:	2101      	movs	r1, #1
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f008 fd83 	bl	801382c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d101      	bne.n	800ad48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ad44:	2303      	movs	r3, #3
 800ad46:	e01f      	b.n	800ad88 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d003      	beq.n	800ad6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	68ba      	ldr	r2, [r7, #8]
 800ad6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2201      	movs	r2, #1
 800ad72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	79fa      	ldrb	r2, [r7, #7]
 800ad7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f008 fbef 	bl	8013560 <USBD_LL_Init>
 800ad82:	4603      	mov	r3, r0
 800ad84:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ad86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ada4:	2303      	movs	r3, #3
 800ada6:	e016      	b.n	800add6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00b      	beq.n	800add4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc4:	f107 020e 	add.w	r2, r7, #14
 800adc8:	4610      	mov	r0, r2
 800adca:	4798      	blx	r3
 800adcc:	4602      	mov	r2, r0
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b082      	sub	sp, #8
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f008 fc1c 	bl	8013624 <USBD_LL_Start>
 800adec:	4603      	mov	r3, r0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b083      	sub	sp, #12
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	460b      	mov	r3, r1
 800ae16:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d009      	beq.n	800ae3a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	78fa      	ldrb	r2, [r7, #3]
 800ae30:	4611      	mov	r1, r2
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	4798      	blx	r3
 800ae36:	4603      	mov	r3, r0
 800ae38:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ae3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d007      	beq.n	800ae6a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	78fa      	ldrb	r2, [r7, #3]
 800ae64:	4611      	mov	r1, r2
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	4798      	blx	r3
  }

  return USBD_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 ff0f 	bl	800bcaa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aea8:	f003 031f 	and.w	r3, r3, #31
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d00e      	beq.n	800aece <USBD_LL_SetupStage+0x5a>
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d302      	bcc.n	800aeba <USBD_LL_SetupStage+0x46>
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d014      	beq.n	800aee2 <USBD_LL_SetupStage+0x6e>
 800aeb8:	e01d      	b.n	800aef6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aec0:	4619      	mov	r1, r3
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f9ee 	bl	800b2a4 <USBD_StdDevReq>
 800aec8:	4603      	mov	r3, r0
 800aeca:	73fb      	strb	r3, [r7, #15]
      break;
 800aecc:	e020      	b.n	800af10 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aed4:	4619      	mov	r1, r3
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fa52 	bl	800b380 <USBD_StdItfReq>
 800aedc:	4603      	mov	r3, r0
 800aede:	73fb      	strb	r3, [r7, #15]
      break;
 800aee0:	e016      	b.n	800af10 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aee8:	4619      	mov	r1, r3
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fa8f 	bl	800b40e <USBD_StdEPReq>
 800aef0:	4603      	mov	r3, r0
 800aef2:	73fb      	strb	r3, [r7, #15]
      break;
 800aef4:	e00c      	b.n	800af10 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aefc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af00:	b2db      	uxtb	r3, r3
 800af02:	4619      	mov	r1, r3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f008 fbed 	bl	80136e4 <USBD_LL_StallEP>
 800af0a:	4603      	mov	r3, r0
 800af0c:	73fb      	strb	r3, [r7, #15]
      break;
 800af0e:	bf00      	nop
  }

  return ret;
 800af10:	7bfb      	ldrb	r3, [r7, #15]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b086      	sub	sp, #24
 800af1e:	af00      	add	r7, sp, #0
 800af20:	60f8      	str	r0, [r7, #12]
 800af22:	460b      	mov	r3, r1
 800af24:	607a      	str	r2, [r7, #4]
 800af26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800af28:	7afb      	ldrb	r3, [r7, #11]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d138      	bne.n	800afa0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800af34:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af3c:	2b03      	cmp	r3, #3
 800af3e:	d14a      	bne.n	800afd6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	689a      	ldr	r2, [r3, #8]
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d913      	bls.n	800af74 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	689a      	ldr	r2, [r3, #8]
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	1ad2      	subs	r2, r2, r3
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	4293      	cmp	r3, r2
 800af64:	bf28      	it	cs
 800af66:	4613      	movcs	r3, r2
 800af68:	461a      	mov	r2, r3
 800af6a:	6879      	ldr	r1, [r7, #4]
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f000 ff90 	bl	800be92 <USBD_CtlContinueRx>
 800af72:	e030      	b.n	800afd6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	2b03      	cmp	r3, #3
 800af7e:	d10b      	bne.n	800af98 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d005      	beq.n	800af98 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f000 ff8b 	bl	800beb4 <USBD_CtlSendStatus>
 800af9e:	e01a      	b.n	800afd6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	2b03      	cmp	r3, #3
 800afaa:	d114      	bne.n	800afd6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afb2:	699b      	ldr	r3, [r3, #24]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00e      	beq.n	800afd6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	7afa      	ldrb	r2, [r7, #11]
 800afc2:	4611      	mov	r1, r2
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	4798      	blx	r3
 800afc8:	4603      	mov	r3, r0
 800afca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800afcc:	7dfb      	ldrb	r3, [r7, #23]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d001      	beq.n	800afd6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800afd2:	7dfb      	ldrb	r3, [r7, #23]
 800afd4:	e000      	b.n	800afd8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3718      	adds	r7, #24
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	460b      	mov	r3, r1
 800afea:	607a      	str	r2, [r7, #4]
 800afec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800afee:	7afb      	ldrb	r3, [r7, #11]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d16b      	bne.n	800b0cc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	3314      	adds	r3, #20
 800aff8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b000:	2b02      	cmp	r3, #2
 800b002:	d156      	bne.n	800b0b2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	689a      	ldr	r2, [r3, #8]
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d914      	bls.n	800b03a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	689a      	ldr	r2, [r3, #8]
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	1ad2      	subs	r2, r2, r3
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	461a      	mov	r2, r3
 800b024:	6879      	ldr	r1, [r7, #4]
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f000 ff05 	bl	800be36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b02c:	2300      	movs	r3, #0
 800b02e:	2200      	movs	r2, #0
 800b030:	2100      	movs	r1, #0
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f008 fbfa 	bl	801382c <USBD_LL_PrepareReceive>
 800b038:	e03b      	b.n	800b0b2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	68da      	ldr	r2, [r3, #12]
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	429a      	cmp	r2, r3
 800b044:	d11c      	bne.n	800b080 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	685a      	ldr	r2, [r3, #4]
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b04e:	429a      	cmp	r2, r3
 800b050:	d316      	bcc.n	800b080 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	685a      	ldr	r2, [r3, #4]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d20f      	bcs.n	800b080 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b060:	2200      	movs	r2, #0
 800b062:	2100      	movs	r1, #0
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f000 fee6 	bl	800be36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b072:	2300      	movs	r3, #0
 800b074:	2200      	movs	r2, #0
 800b076:	2100      	movs	r1, #0
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f008 fbd7 	bl	801382c <USBD_LL_PrepareReceive>
 800b07e:	e018      	b.n	800b0b2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b086:	b2db      	uxtb	r3, r3
 800b088:	2b03      	cmp	r3, #3
 800b08a:	d10b      	bne.n	800b0a4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d005      	beq.n	800b0a4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0a4:	2180      	movs	r1, #128	; 0x80
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f008 fb1c 	bl	80136e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f000 ff14 	bl	800beda <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d122      	bne.n	800b102 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f7ff fe9a 	bl	800adf6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b0ca:	e01a      	b.n	800b102 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	2b03      	cmp	r3, #3
 800b0d6:	d114      	bne.n	800b102 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00e      	beq.n	800b102 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0ea:	695b      	ldr	r3, [r3, #20]
 800b0ec:	7afa      	ldrb	r2, [r7, #11]
 800b0ee:	4611      	mov	r1, r2
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	4798      	blx	r3
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b0f8:	7dfb      	ldrb	r3, [r7, #23]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b0fe:	7dfb      	ldrb	r3, [r7, #23]
 800b100:	e000      	b.n	800b104 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	3718      	adds	r7, #24
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d101      	bne.n	800b140 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b13c:	2303      	movs	r3, #3
 800b13e:	e02f      	b.n	800b1a0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00f      	beq.n	800b16a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d009      	beq.n	800b16a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	6852      	ldr	r2, [r2, #4]
 800b162:	b2d2      	uxtb	r2, r2
 800b164:	4611      	mov	r1, r2
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b16a:	2340      	movs	r3, #64	; 0x40
 800b16c:	2200      	movs	r2, #0
 800b16e:	2100      	movs	r1, #0
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f008 fa72 	bl	801365a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2201      	movs	r2, #1
 800b17a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2240      	movs	r2, #64	; 0x40
 800b182:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b186:	2340      	movs	r3, #64	; 0x40
 800b188:	2200      	movs	r2, #0
 800b18a:	2180      	movs	r1, #128	; 0x80
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f008 fa64 	bl	801365a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2201      	movs	r2, #1
 800b196:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2240      	movs	r2, #64	; 0x40
 800b19c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	78fa      	ldrb	r2, [r7, #3]
 800b1b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1d6:	b2da      	uxtb	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2204      	movs	r2, #4
 800b1e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b202:	b2db      	uxtb	r3, r3
 800b204:	2b04      	cmp	r3, #4
 800b206:	d106      	bne.n	800b216 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b20e:	b2da      	uxtb	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b216:	2300      	movs	r3, #0
}
 800b218:	4618      	mov	r0, r3
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b236:	2303      	movs	r3, #3
 800b238:	e012      	b.n	800b260 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b240:	b2db      	uxtb	r3, r3
 800b242:	2b03      	cmp	r3, #3
 800b244:	d10b      	bne.n	800b25e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b24c:	69db      	ldr	r3, [r3, #28]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d005      	beq.n	800b25e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b258:	69db      	ldr	r3, [r3, #28]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b268:	b480      	push	{r7}
 800b26a:	b087      	sub	sp, #28
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	3301      	adds	r3, #1
 800b27e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b286:	8a3b      	ldrh	r3, [r7, #16]
 800b288:	021b      	lsls	r3, r3, #8
 800b28a:	b21a      	sxth	r2, r3
 800b28c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b290:	4313      	orrs	r3, r2
 800b292:	b21b      	sxth	r3, r3
 800b294:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b296:	89fb      	ldrh	r3, [r7, #14]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	371c      	adds	r7, #28
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2ba:	2b20      	cmp	r3, #32
 800b2bc:	d004      	beq.n	800b2c8 <USBD_StdDevReq+0x24>
 800b2be:	2b40      	cmp	r3, #64	; 0x40
 800b2c0:	d002      	beq.n	800b2c8 <USBD_StdDevReq+0x24>
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00a      	beq.n	800b2dc <USBD_StdDevReq+0x38>
 800b2c6:	e050      	b.n	800b36a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	6839      	ldr	r1, [r7, #0]
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	4798      	blx	r3
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b2da:	e04b      	b.n	800b374 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	785b      	ldrb	r3, [r3, #1]
 800b2e0:	2b09      	cmp	r3, #9
 800b2e2:	d83c      	bhi.n	800b35e <USBD_StdDevReq+0xba>
 800b2e4:	a201      	add	r2, pc, #4	; (adr r2, 800b2ec <USBD_StdDevReq+0x48>)
 800b2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ea:	bf00      	nop
 800b2ec:	0800b341 	.word	0x0800b341
 800b2f0:	0800b355 	.word	0x0800b355
 800b2f4:	0800b35f 	.word	0x0800b35f
 800b2f8:	0800b34b 	.word	0x0800b34b
 800b2fc:	0800b35f 	.word	0x0800b35f
 800b300:	0800b31f 	.word	0x0800b31f
 800b304:	0800b315 	.word	0x0800b315
 800b308:	0800b35f 	.word	0x0800b35f
 800b30c:	0800b337 	.word	0x0800b337
 800b310:	0800b329 	.word	0x0800b329
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f9d4 	bl	800b6c4 <USBD_GetDescriptor>
          break;
 800b31c:	e024      	b.n	800b368 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b31e:	6839      	ldr	r1, [r7, #0]
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 fb39 	bl	800b998 <USBD_SetAddress>
          break;
 800b326:	e01f      	b.n	800b368 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fb78 	bl	800ba20 <USBD_SetConfig>
 800b330:	4603      	mov	r3, r0
 800b332:	73fb      	strb	r3, [r7, #15]
          break;
 800b334:	e018      	b.n	800b368 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b336:	6839      	ldr	r1, [r7, #0]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fc17 	bl	800bb6c <USBD_GetConfig>
          break;
 800b33e:	e013      	b.n	800b368 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fc47 	bl	800bbd6 <USBD_GetStatus>
          break;
 800b348:	e00e      	b.n	800b368 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b34a:	6839      	ldr	r1, [r7, #0]
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 fc76 	bl	800bc3e <USBD_SetFeature>
          break;
 800b352:	e009      	b.n	800b368 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b354:	6839      	ldr	r1, [r7, #0]
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 fc85 	bl	800bc66 <USBD_ClrFeature>
          break;
 800b35c:	e004      	b.n	800b368 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fcdc 	bl	800bd1e <USBD_CtlError>
          break;
 800b366:	bf00      	nop
      }
      break;
 800b368:	e004      	b.n	800b374 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fcd6 	bl	800bd1e <USBD_CtlError>
      break;
 800b372:	bf00      	nop
  }

  return ret;
 800b374:	7bfb      	ldrb	r3, [r7, #15]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop

0800b380 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b396:	2b20      	cmp	r3, #32
 800b398:	d003      	beq.n	800b3a2 <USBD_StdItfReq+0x22>
 800b39a:	2b40      	cmp	r3, #64	; 0x40
 800b39c:	d001      	beq.n	800b3a2 <USBD_StdItfReq+0x22>
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d12b      	bne.n	800b3fa <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d81d      	bhi.n	800b3ec <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	889b      	ldrh	r3, [r3, #4]
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d813      	bhi.n	800b3e2 <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	6839      	ldr	r1, [r7, #0]
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	4798      	blx	r3
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	88db      	ldrh	r3, [r3, #6]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d110      	bne.n	800b3f6 <USBD_StdItfReq+0x76>
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d10d      	bne.n	800b3f6 <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fd6a 	bl	800beb4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b3e0:	e009      	b.n	800b3f6 <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 800b3e2:	6839      	ldr	r1, [r7, #0]
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 fc9a 	bl	800bd1e <USBD_CtlError>
          break;
 800b3ea:	e004      	b.n	800b3f6 <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fc95 	bl	800bd1e <USBD_CtlError>
          break;
 800b3f4:	e000      	b.n	800b3f8 <USBD_StdItfReq+0x78>
          break;
 800b3f6:	bf00      	nop
      }
      break;
 800b3f8:	e004      	b.n	800b404 <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 800b3fa:	6839      	ldr	r1, [r7, #0]
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 fc8e 	bl	800bd1e <USBD_CtlError>
      break;
 800b402:	bf00      	nop
  }

  return ret;
 800b404:	7bfb      	ldrb	r3, [r7, #15]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b40e:	b580      	push	{r7, lr}
 800b410:	b084      	sub	sp, #16
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
 800b416:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	889b      	ldrh	r3, [r3, #4]
 800b420:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b42a:	2b20      	cmp	r3, #32
 800b42c:	d004      	beq.n	800b438 <USBD_StdEPReq+0x2a>
 800b42e:	2b40      	cmp	r3, #64	; 0x40
 800b430:	d002      	beq.n	800b438 <USBD_StdEPReq+0x2a>
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00a      	beq.n	800b44c <USBD_StdEPReq+0x3e>
 800b436:	e13a      	b.n	800b6ae <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	6839      	ldr	r1, [r7, #0]
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	4798      	blx	r3
 800b446:	4603      	mov	r3, r0
 800b448:	73fb      	strb	r3, [r7, #15]
      break;
 800b44a:	e135      	b.n	800b6b8 <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	785b      	ldrb	r3, [r3, #1]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d03f      	beq.n	800b4d4 <USBD_StdEPReq+0xc6>
 800b454:	2b03      	cmp	r3, #3
 800b456:	d002      	beq.n	800b45e <USBD_StdEPReq+0x50>
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d07b      	beq.n	800b554 <USBD_StdEPReq+0x146>
 800b45c:	e121      	b.n	800b6a2 <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b02      	cmp	r3, #2
 800b468:	d002      	beq.n	800b470 <USBD_StdEPReq+0x62>
 800b46a:	2b03      	cmp	r3, #3
 800b46c:	d015      	beq.n	800b49a <USBD_StdEPReq+0x8c>
 800b46e:	e02b      	b.n	800b4c8 <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b470:	7bbb      	ldrb	r3, [r7, #14]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d00c      	beq.n	800b490 <USBD_StdEPReq+0x82>
 800b476:	7bbb      	ldrb	r3, [r7, #14]
 800b478:	2b80      	cmp	r3, #128	; 0x80
 800b47a:	d009      	beq.n	800b490 <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b47c:	7bbb      	ldrb	r3, [r7, #14]
 800b47e:	4619      	mov	r1, r3
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f008 f92f 	bl	80136e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b486:	2180      	movs	r1, #128	; 0x80
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f008 f92b 	bl	80136e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b48e:	e020      	b.n	800b4d2 <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 fc43 	bl	800bd1e <USBD_CtlError>
              break;
 800b498:	e01b      	b.n	800b4d2 <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	885b      	ldrh	r3, [r3, #2]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10e      	bne.n	800b4c0 <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b4a2:	7bbb      	ldrb	r3, [r7, #14]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d00b      	beq.n	800b4c0 <USBD_StdEPReq+0xb2>
 800b4a8:	7bbb      	ldrb	r3, [r7, #14]
 800b4aa:	2b80      	cmp	r3, #128	; 0x80
 800b4ac:	d008      	beq.n	800b4c0 <USBD_StdEPReq+0xb2>
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	88db      	ldrh	r3, [r3, #6]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d104      	bne.n	800b4c0 <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4b6:	7bbb      	ldrb	r3, [r7, #14]
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f008 f912 	bl	80136e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 fcf7 	bl	800beb4 <USBD_CtlSendStatus>

              break;
 800b4c6:	e004      	b.n	800b4d2 <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 800b4c8:	6839      	ldr	r1, [r7, #0]
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fc27 	bl	800bd1e <USBD_CtlError>
              break;
 800b4d0:	bf00      	nop
          }
          break;
 800b4d2:	e0eb      	b.n	800b6ac <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	d002      	beq.n	800b4e6 <USBD_StdEPReq+0xd8>
 800b4e0:	2b03      	cmp	r3, #3
 800b4e2:	d015      	beq.n	800b510 <USBD_StdEPReq+0x102>
 800b4e4:	e02f      	b.n	800b546 <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4e6:	7bbb      	ldrb	r3, [r7, #14]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00c      	beq.n	800b506 <USBD_StdEPReq+0xf8>
 800b4ec:	7bbb      	ldrb	r3, [r7, #14]
 800b4ee:	2b80      	cmp	r3, #128	; 0x80
 800b4f0:	d009      	beq.n	800b506 <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4f2:	7bbb      	ldrb	r3, [r7, #14]
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f008 f8f4 	bl	80136e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4fc:	2180      	movs	r1, #128	; 0x80
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f008 f8f0 	bl	80136e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b504:	e025      	b.n	800b552 <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 800b506:	6839      	ldr	r1, [r7, #0]
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fc08 	bl	800bd1e <USBD_CtlError>
              break;
 800b50e:	e020      	b.n	800b552 <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	885b      	ldrh	r3, [r3, #2]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d11b      	bne.n	800b550 <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b518:	7bbb      	ldrb	r3, [r7, #14]
 800b51a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d004      	beq.n	800b52c <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b522:	7bbb      	ldrb	r3, [r7, #14]
 800b524:	4619      	mov	r1, r3
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f008 f8fb 	bl	8013722 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 fcc1 	bl	800beb4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	6839      	ldr	r1, [r7, #0]
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	4798      	blx	r3
 800b540:	4603      	mov	r3, r0
 800b542:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b544:	e004      	b.n	800b550 <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 fbe8 	bl	800bd1e <USBD_CtlError>
              break;
 800b54e:	e000      	b.n	800b552 <USBD_StdEPReq+0x144>
              break;
 800b550:	bf00      	nop
          }
          break;
 800b552:	e0ab      	b.n	800b6ac <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d002      	beq.n	800b566 <USBD_StdEPReq+0x158>
 800b560:	2b03      	cmp	r3, #3
 800b562:	d032      	beq.n	800b5ca <USBD_StdEPReq+0x1bc>
 800b564:	e097      	b.n	800b696 <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b566:	7bbb      	ldrb	r3, [r7, #14]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d007      	beq.n	800b57c <USBD_StdEPReq+0x16e>
 800b56c:	7bbb      	ldrb	r3, [r7, #14]
 800b56e:	2b80      	cmp	r3, #128	; 0x80
 800b570:	d004      	beq.n	800b57c <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 fbd2 	bl	800bd1e <USBD_CtlError>
                break;
 800b57a:	e091      	b.n	800b6a0 <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b57c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b580:	2b00      	cmp	r3, #0
 800b582:	da0b      	bge.n	800b59c <USBD_StdEPReq+0x18e>
 800b584:	7bbb      	ldrb	r3, [r7, #14]
 800b586:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b58a:	4613      	mov	r3, r2
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	4413      	add	r3, r2
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	3310      	adds	r3, #16
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	4413      	add	r3, r2
 800b598:	3304      	adds	r3, #4
 800b59a:	e00b      	b.n	800b5b4 <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b59c:	7bbb      	ldrb	r3, [r7, #14]
 800b59e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4413      	add	r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	2202      	movs	r2, #2
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 fc1c 	bl	800be00 <USBD_CtlSendData>
              break;
 800b5c8:	e06a      	b.n	800b6a0 <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b5ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	da11      	bge.n	800b5f6 <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b5d2:	7bbb      	ldrb	r3, [r7, #14]
 800b5d4:	f003 020f 	and.w	r2, r3, #15
 800b5d8:	6879      	ldr	r1, [r7, #4]
 800b5da:	4613      	mov	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4413      	add	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	440b      	add	r3, r1
 800b5e4:	3324      	adds	r3, #36	; 0x24
 800b5e6:	881b      	ldrh	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d117      	bne.n	800b61c <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800b5ec:	6839      	ldr	r1, [r7, #0]
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 fb95 	bl	800bd1e <USBD_CtlError>
                  break;
 800b5f4:	e054      	b.n	800b6a0 <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b5f6:	7bbb      	ldrb	r3, [r7, #14]
 800b5f8:	f003 020f 	and.w	r2, r3, #15
 800b5fc:	6879      	ldr	r1, [r7, #4]
 800b5fe:	4613      	mov	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4413      	add	r3, r2
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	440b      	add	r3, r1
 800b608:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b60c:	881b      	ldrh	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d104      	bne.n	800b61c <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 fb82 	bl	800bd1e <USBD_CtlError>
                  break;
 800b61a:	e041      	b.n	800b6a0 <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b61c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b620:	2b00      	cmp	r3, #0
 800b622:	da0b      	bge.n	800b63c <USBD_StdEPReq+0x22e>
 800b624:	7bbb      	ldrb	r3, [r7, #14]
 800b626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b62a:	4613      	mov	r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	4413      	add	r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	3310      	adds	r3, #16
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	4413      	add	r3, r2
 800b638:	3304      	adds	r3, #4
 800b63a:	e00b      	b.n	800b654 <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b63c:	7bbb      	ldrb	r3, [r7, #14]
 800b63e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b642:	4613      	mov	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	4413      	add	r3, r2
 800b652:	3304      	adds	r3, #4
 800b654:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b656:	7bbb      	ldrb	r3, [r7, #14]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d002      	beq.n	800b662 <USBD_StdEPReq+0x254>
 800b65c:	7bbb      	ldrb	r3, [r7, #14]
 800b65e:	2b80      	cmp	r3, #128	; 0x80
 800b660:	d103      	bne.n	800b66a <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	2200      	movs	r2, #0
 800b666:	601a      	str	r2, [r3, #0]
 800b668:	e00e      	b.n	800b688 <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b66a:	7bbb      	ldrb	r3, [r7, #14]
 800b66c:	4619      	mov	r1, r3
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f008 f876 	bl	8013760 <USBD_LL_IsStallEP>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d003      	beq.n	800b682 <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	2201      	movs	r2, #1
 800b67e:	601a      	str	r2, [r3, #0]
 800b680:	e002      	b.n	800b688 <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	2200      	movs	r2, #0
 800b686:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	2202      	movs	r2, #2
 800b68c:	4619      	mov	r1, r3
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fbb6 	bl	800be00 <USBD_CtlSendData>
              break;
 800b694:	e004      	b.n	800b6a0 <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 800b696:	6839      	ldr	r1, [r7, #0]
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 fb40 	bl	800bd1e <USBD_CtlError>
              break;
 800b69e:	bf00      	nop
          }
          break;
 800b6a0:	e004      	b.n	800b6ac <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 fb3a 	bl	800bd1e <USBD_CtlError>
          break;
 800b6aa:	bf00      	nop
      }
      break;
 800b6ac:	e004      	b.n	800b6b8 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 800b6ae:	6839      	ldr	r1, [r7, #0]
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 fb34 	bl	800bd1e <USBD_CtlError>
      break;
 800b6b6:	bf00      	nop
  }

  return ret;
 800b6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
	...

0800b6c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	885b      	ldrh	r3, [r3, #2]
 800b6de:	0a1b      	lsrs	r3, r3, #8
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	2b06      	cmp	r3, #6
 800b6e6:	f200 8128 	bhi.w	800b93a <USBD_GetDescriptor+0x276>
 800b6ea:	a201      	add	r2, pc, #4	; (adr r2, 800b6f0 <USBD_GetDescriptor+0x2c>)
 800b6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f0:	0800b70d 	.word	0x0800b70d
 800b6f4:	0800b725 	.word	0x0800b725
 800b6f8:	0800b765 	.word	0x0800b765
 800b6fc:	0800b93b 	.word	0x0800b93b
 800b700:	0800b93b 	.word	0x0800b93b
 800b704:	0800b8db 	.word	0x0800b8db
 800b708:	0800b907 	.word	0x0800b907
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	7c12      	ldrb	r2, [r2, #16]
 800b718:	f107 0108 	add.w	r1, r7, #8
 800b71c:	4610      	mov	r0, r2
 800b71e:	4798      	blx	r3
 800b720:	60f8      	str	r0, [r7, #12]
      break;
 800b722:	e112      	b.n	800b94a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	7c1b      	ldrb	r3, [r3, #16]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10d      	bne.n	800b748 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b734:	f107 0208 	add.w	r2, r7, #8
 800b738:	4610      	mov	r0, r2
 800b73a:	4798      	blx	r3
 800b73c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	3301      	adds	r3, #1
 800b742:	2202      	movs	r2, #2
 800b744:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b746:	e100      	b.n	800b94a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b750:	f107 0208 	add.w	r2, r7, #8
 800b754:	4610      	mov	r0, r2
 800b756:	4798      	blx	r3
 800b758:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	3301      	adds	r3, #1
 800b75e:	2202      	movs	r2, #2
 800b760:	701a      	strb	r2, [r3, #0]
      break;
 800b762:	e0f2      	b.n	800b94a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	885b      	ldrh	r3, [r3, #2]
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	2b05      	cmp	r3, #5
 800b76c:	f200 80ac 	bhi.w	800b8c8 <USBD_GetDescriptor+0x204>
 800b770:	a201      	add	r2, pc, #4	; (adr r2, 800b778 <USBD_GetDescriptor+0xb4>)
 800b772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b776:	bf00      	nop
 800b778:	0800b791 	.word	0x0800b791
 800b77c:	0800b7c5 	.word	0x0800b7c5
 800b780:	0800b7f9 	.word	0x0800b7f9
 800b784:	0800b82d 	.word	0x0800b82d
 800b788:	0800b861 	.word	0x0800b861
 800b78c:	0800b895 	.word	0x0800b895
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00b      	beq.n	800b7b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	7c12      	ldrb	r2, [r2, #16]
 800b7a8:	f107 0108 	add.w	r1, r7, #8
 800b7ac:	4610      	mov	r0, r2
 800b7ae:	4798      	blx	r3
 800b7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7b2:	e091      	b.n	800b8d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7b4:	6839      	ldr	r1, [r7, #0]
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 fab1 	bl	800bd1e <USBD_CtlError>
            err++;
 800b7bc:	7afb      	ldrb	r3, [r7, #11]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b7c2:	e089      	b.n	800b8d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00b      	beq.n	800b7e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	7c12      	ldrb	r2, [r2, #16]
 800b7dc:	f107 0108 	add.w	r1, r7, #8
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	4798      	blx	r3
 800b7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7e6:	e077      	b.n	800b8d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7e8:	6839      	ldr	r1, [r7, #0]
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 fa97 	bl	800bd1e <USBD_CtlError>
            err++;
 800b7f0:	7afb      	ldrb	r3, [r7, #11]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b7f6:	e06f      	b.n	800b8d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00b      	beq.n	800b81c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	7c12      	ldrb	r2, [r2, #16]
 800b810:	f107 0108 	add.w	r1, r7, #8
 800b814:	4610      	mov	r0, r2
 800b816:	4798      	blx	r3
 800b818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b81a:	e05d      	b.n	800b8d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b81c:	6839      	ldr	r1, [r7, #0]
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 fa7d 	bl	800bd1e <USBD_CtlError>
            err++;
 800b824:	7afb      	ldrb	r3, [r7, #11]
 800b826:	3301      	adds	r3, #1
 800b828:	72fb      	strb	r3, [r7, #11]
          break;
 800b82a:	e055      	b.n	800b8d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d00b      	beq.n	800b850 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	7c12      	ldrb	r2, [r2, #16]
 800b844:	f107 0108 	add.w	r1, r7, #8
 800b848:	4610      	mov	r0, r2
 800b84a:	4798      	blx	r3
 800b84c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b84e:	e043      	b.n	800b8d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b850:	6839      	ldr	r1, [r7, #0]
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 fa63 	bl	800bd1e <USBD_CtlError>
            err++;
 800b858:	7afb      	ldrb	r3, [r7, #11]
 800b85a:	3301      	adds	r3, #1
 800b85c:	72fb      	strb	r3, [r7, #11]
          break;
 800b85e:	e03b      	b.n	800b8d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b866:	695b      	ldr	r3, [r3, #20]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00b      	beq.n	800b884 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b872:	695b      	ldr	r3, [r3, #20]
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	7c12      	ldrb	r2, [r2, #16]
 800b878:	f107 0108 	add.w	r1, r7, #8
 800b87c:	4610      	mov	r0, r2
 800b87e:	4798      	blx	r3
 800b880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b882:	e029      	b.n	800b8d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b884:	6839      	ldr	r1, [r7, #0]
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 fa49 	bl	800bd1e <USBD_CtlError>
            err++;
 800b88c:	7afb      	ldrb	r3, [r7, #11]
 800b88e:	3301      	adds	r3, #1
 800b890:	72fb      	strb	r3, [r7, #11]
          break;
 800b892:	e021      	b.n	800b8d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b89a:	699b      	ldr	r3, [r3, #24]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d00b      	beq.n	800b8b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8a6:	699b      	ldr	r3, [r3, #24]
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	7c12      	ldrb	r2, [r2, #16]
 800b8ac:	f107 0108 	add.w	r1, r7, #8
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	4798      	blx	r3
 800b8b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8b6:	e00f      	b.n	800b8d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8b8:	6839      	ldr	r1, [r7, #0]
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 fa2f 	bl	800bd1e <USBD_CtlError>
            err++;
 800b8c0:	7afb      	ldrb	r3, [r7, #11]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8c6:	e007      	b.n	800b8d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b8c8:	6839      	ldr	r1, [r7, #0]
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fa27 	bl	800bd1e <USBD_CtlError>
          err++;
 800b8d0:	7afb      	ldrb	r3, [r7, #11]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b8d6:	bf00      	nop
      }
      break;
 800b8d8:	e037      	b.n	800b94a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	7c1b      	ldrb	r3, [r3, #16]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d109      	bne.n	800b8f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ea:	f107 0208 	add.w	r2, r7, #8
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	4798      	blx	r3
 800b8f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8f4:	e029      	b.n	800b94a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 fa10 	bl	800bd1e <USBD_CtlError>
        err++;
 800b8fe:	7afb      	ldrb	r3, [r7, #11]
 800b900:	3301      	adds	r3, #1
 800b902:	72fb      	strb	r3, [r7, #11]
      break;
 800b904:	e021      	b.n	800b94a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	7c1b      	ldrb	r3, [r3, #16]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10d      	bne.n	800b92a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b916:	f107 0208 	add.w	r2, r7, #8
 800b91a:	4610      	mov	r0, r2
 800b91c:	4798      	blx	r3
 800b91e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	3301      	adds	r3, #1
 800b924:	2207      	movs	r2, #7
 800b926:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b928:	e00f      	b.n	800b94a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b92a:	6839      	ldr	r1, [r7, #0]
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 f9f6 	bl	800bd1e <USBD_CtlError>
        err++;
 800b932:	7afb      	ldrb	r3, [r7, #11]
 800b934:	3301      	adds	r3, #1
 800b936:	72fb      	strb	r3, [r7, #11]
      break;
 800b938:	e007      	b.n	800b94a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 f9ee 	bl	800bd1e <USBD_CtlError>
      err++;
 800b942:	7afb      	ldrb	r3, [r7, #11]
 800b944:	3301      	adds	r3, #1
 800b946:	72fb      	strb	r3, [r7, #11]
      break;
 800b948:	bf00      	nop
  }

  if (err != 0U)
 800b94a:	7afb      	ldrb	r3, [r7, #11]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d11e      	bne.n	800b98e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	88db      	ldrh	r3, [r3, #6]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d016      	beq.n	800b986 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b958:	893b      	ldrh	r3, [r7, #8]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00e      	beq.n	800b97c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	88da      	ldrh	r2, [r3, #6]
 800b962:	893b      	ldrh	r3, [r7, #8]
 800b964:	4293      	cmp	r3, r2
 800b966:	bf28      	it	cs
 800b968:	4613      	movcs	r3, r2
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b96e:	893b      	ldrh	r3, [r7, #8]
 800b970:	461a      	mov	r2, r3
 800b972:	68f9      	ldr	r1, [r7, #12]
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fa43 	bl	800be00 <USBD_CtlSendData>
 800b97a:	e009      	b.n	800b990 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b97c:	6839      	ldr	r1, [r7, #0]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 f9cd 	bl	800bd1e <USBD_CtlError>
 800b984:	e004      	b.n	800b990 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fa94 	bl	800beb4 <USBD_CtlSendStatus>
 800b98c:	e000      	b.n	800b990 <USBD_GetDescriptor+0x2cc>
    return;
 800b98e:	bf00      	nop
  }
}
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop

0800b998 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	889b      	ldrh	r3, [r3, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d131      	bne.n	800ba0e <USBD_SetAddress+0x76>
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	88db      	ldrh	r3, [r3, #6]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d12d      	bne.n	800ba0e <USBD_SetAddress+0x76>
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	885b      	ldrh	r3, [r3, #2]
 800b9b6:	2b7f      	cmp	r3, #127	; 0x7f
 800b9b8:	d829      	bhi.n	800ba0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	885b      	ldrh	r3, [r3, #2]
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b03      	cmp	r3, #3
 800b9d0:	d104      	bne.n	800b9dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 f9a2 	bl	800bd1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9da:	e01c      	b.n	800ba16 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	7bfa      	ldrb	r2, [r7, #15]
 800b9e0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9e4:	7bfb      	ldrb	r3, [r7, #15]
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f007 fedf 	bl	80137ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fa60 	bl	800beb4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b9f4:	7bfb      	ldrb	r3, [r7, #15]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d004      	beq.n	800ba04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2202      	movs	r2, #2
 800b9fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba02:	e008      	b.n	800ba16 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba0c:	e003      	b.n	800ba16 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ba0e:	6839      	ldr	r1, [r7, #0]
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 f984 	bl	800bd1e <USBD_CtlError>
  }
}
 800ba16:	bf00      	nop
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
	...

0800ba20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	885b      	ldrh	r3, [r3, #2]
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	4b4c      	ldr	r3, [pc, #304]	; (800bb68 <USBD_SetConfig+0x148>)
 800ba36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba38:	4b4b      	ldr	r3, [pc, #300]	; (800bb68 <USBD_SetConfig+0x148>)
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d905      	bls.n	800ba4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f96b 	bl	800bd1e <USBD_CtlError>
    return USBD_FAIL;
 800ba48:	2303      	movs	r3, #3
 800ba4a:	e088      	b.n	800bb5e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	d002      	beq.n	800ba5e <USBD_SetConfig+0x3e>
 800ba58:	2b03      	cmp	r3, #3
 800ba5a:	d025      	beq.n	800baa8 <USBD_SetConfig+0x88>
 800ba5c:	e071      	b.n	800bb42 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ba5e:	4b42      	ldr	r3, [pc, #264]	; (800bb68 <USBD_SetConfig+0x148>)
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d01c      	beq.n	800baa0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ba66:	4b40      	ldr	r3, [pc, #256]	; (800bb68 <USBD_SetConfig+0x148>)
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba70:	4b3d      	ldr	r3, [pc, #244]	; (800bb68 <USBD_SetConfig+0x148>)
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	4619      	mov	r1, r3
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7ff f9c8 	bl	800ae0c <USBD_SetClassConfig>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ba80:	7bfb      	ldrb	r3, [r7, #15]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d004      	beq.n	800ba90 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ba86:	6839      	ldr	r1, [r7, #0]
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 f948 	bl	800bd1e <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ba8e:	e065      	b.n	800bb5c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fa0f 	bl	800beb4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2203      	movs	r2, #3
 800ba9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ba9e:	e05d      	b.n	800bb5c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fa07 	bl	800beb4 <USBD_CtlSendStatus>
      break;
 800baa6:	e059      	b.n	800bb5c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800baa8:	4b2f      	ldr	r3, [pc, #188]	; (800bb68 <USBD_SetConfig+0x148>)
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d112      	bne.n	800bad6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2202      	movs	r2, #2
 800bab4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bab8:	4b2b      	ldr	r3, [pc, #172]	; (800bb68 <USBD_SetConfig+0x148>)
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	461a      	mov	r2, r3
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bac2:	4b29      	ldr	r3, [pc, #164]	; (800bb68 <USBD_SetConfig+0x148>)
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	4619      	mov	r1, r3
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f7ff f9bb 	bl	800ae44 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f9f0 	bl	800beb4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bad4:	e042      	b.n	800bb5c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bad6:	4b24      	ldr	r3, [pc, #144]	; (800bb68 <USBD_SetConfig+0x148>)
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	461a      	mov	r2, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d02a      	beq.n	800bb3a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	4619      	mov	r1, r3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f7ff f9a9 	bl	800ae44 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800baf2:	4b1d      	ldr	r3, [pc, #116]	; (800bb68 <USBD_SetConfig+0x148>)
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	461a      	mov	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bafc:	4b1a      	ldr	r3, [pc, #104]	; (800bb68 <USBD_SetConfig+0x148>)
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	4619      	mov	r1, r3
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f7ff f982 	bl	800ae0c <USBD_SetClassConfig>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00f      	beq.n	800bb32 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f902 	bl	800bd1e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	4619      	mov	r1, r3
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7ff f98e 	bl	800ae44 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb30:	e014      	b.n	800bb5c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 f9be 	bl	800beb4 <USBD_CtlSendStatus>
      break;
 800bb38:	e010      	b.n	800bb5c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f9ba 	bl	800beb4 <USBD_CtlSendStatus>
      break;
 800bb40:	e00c      	b.n	800bb5c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f8ea 	bl	800bd1e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb4a:	4b07      	ldr	r3, [pc, #28]	; (800bb68 <USBD_SetConfig+0x148>)
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	4619      	mov	r1, r3
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f7ff f977 	bl	800ae44 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bb56:	2303      	movs	r3, #3
 800bb58:	73fb      	strb	r3, [r7, #15]
      break;
 800bb5a:	bf00      	nop
  }

  return ret;
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	20000314 	.word	0x20000314

0800bb6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	88db      	ldrh	r3, [r3, #6]
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d004      	beq.n	800bb88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb7e:	6839      	ldr	r1, [r7, #0]
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 f8cc 	bl	800bd1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb86:	e022      	b.n	800bbce <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	db17      	blt.n	800bbc4 <USBD_GetConfig+0x58>
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	dd02      	ble.n	800bb9e <USBD_GetConfig+0x32>
 800bb98:	2b03      	cmp	r3, #3
 800bb9a:	d00b      	beq.n	800bbb4 <USBD_GetConfig+0x48>
 800bb9c:	e012      	b.n	800bbc4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	3308      	adds	r3, #8
 800bba8:	2201      	movs	r2, #1
 800bbaa:	4619      	mov	r1, r3
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 f927 	bl	800be00 <USBD_CtlSendData>
        break;
 800bbb2:	e00c      	b.n	800bbce <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	3304      	adds	r3, #4
 800bbb8:	2201      	movs	r2, #1
 800bbba:	4619      	mov	r1, r3
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 f91f 	bl	800be00 <USBD_CtlSendData>
        break;
 800bbc2:	e004      	b.n	800bbce <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 f8a9 	bl	800bd1e <USBD_CtlError>
        break;
 800bbcc:	bf00      	nop
}
 800bbce:	bf00      	nop
 800bbd0:	3708      	adds	r7, #8
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b082      	sub	sp, #8
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
 800bbde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d81e      	bhi.n	800bc2c <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	88db      	ldrh	r3, [r3, #6]
 800bbf2:	2b02      	cmp	r3, #2
 800bbf4:	d004      	beq.n	800bc00 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bbf6:	6839      	ldr	r1, [r7, #0]
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f890 	bl	800bd1e <USBD_CtlError>
        break;
 800bbfe:	e01a      	b.n	800bc36 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d005      	beq.n	800bc1c <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	f043 0202 	orr.w	r2, r3, #2
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	330c      	adds	r3, #12
 800bc20:	2202      	movs	r2, #2
 800bc22:	4619      	mov	r1, r3
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f8eb 	bl	800be00 <USBD_CtlSendData>
      break;
 800bc2a:	e004      	b.n	800bc36 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f875 	bl	800bd1e <USBD_CtlError>
      break;
 800bc34:	bf00      	nop
  }
}
 800bc36:	bf00      	nop
 800bc38:	3708      	adds	r7, #8
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b082      	sub	sp, #8
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	885b      	ldrh	r3, [r3, #2]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d106      	bne.n	800bc5e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2201      	movs	r2, #1
 800bc54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f92b 	bl	800beb4 <USBD_CtlSendStatus>
  }
}
 800bc5e:	bf00      	nop
 800bc60:	3708      	adds	r7, #8
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	b082      	sub	sp, #8
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	3b01      	subs	r3, #1
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d80b      	bhi.n	800bc96 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	885b      	ldrh	r3, [r3, #2]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d10c      	bne.n	800bca0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 f910 	bl	800beb4 <USBD_CtlSendStatus>
      }
      break;
 800bc94:	e004      	b.n	800bca0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bc96:	6839      	ldr	r1, [r7, #0]
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f000 f840 	bl	800bd1e <USBD_CtlError>
      break;
 800bc9e:	e000      	b.n	800bca2 <USBD_ClrFeature+0x3c>
      break;
 800bca0:	bf00      	nop
  }
}
 800bca2:	bf00      	nop
 800bca4:	3708      	adds	r7, #8
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b084      	sub	sp, #16
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	781a      	ldrb	r2, [r3, #0]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	781a      	ldrb	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bcd4:	68f8      	ldr	r0, [r7, #12]
 800bcd6:	f7ff fac7 	bl	800b268 <SWAPBYTE>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	461a      	mov	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	3301      	adds	r3, #1
 800bce6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	3301      	adds	r3, #1
 800bcec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f7ff faba 	bl	800b268 <SWAPBYTE>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	3301      	adds	r3, #1
 800bd06:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f7ff faad 	bl	800b268 <SWAPBYTE>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	461a      	mov	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	80da      	strh	r2, [r3, #6]
}
 800bd16:	bf00      	nop
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b082      	sub	sp, #8
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd28:	2180      	movs	r1, #128	; 0x80
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f007 fcda 	bl	80136e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bd30:	2100      	movs	r1, #0
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f007 fcd6 	bl	80136e4 <USBD_LL_StallEP>
}
 800bd38:	bf00      	nop
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d036      	beq.n	800bdc4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bd5a:	6938      	ldr	r0, [r7, #16]
 800bd5c:	f000 f836 	bl	800bdcc <USBD_GetLen>
 800bd60:	4603      	mov	r3, r0
 800bd62:	3301      	adds	r3, #1
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	005b      	lsls	r3, r3, #1
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bd6e:	7dfb      	ldrb	r3, [r7, #23]
 800bd70:	68ba      	ldr	r2, [r7, #8]
 800bd72:	4413      	add	r3, r2
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	7812      	ldrb	r2, [r2, #0]
 800bd78:	701a      	strb	r2, [r3, #0]
  idx++;
 800bd7a:	7dfb      	ldrb	r3, [r7, #23]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	4413      	add	r3, r2
 800bd86:	2203      	movs	r2, #3
 800bd88:	701a      	strb	r2, [r3, #0]
  idx++;
 800bd8a:	7dfb      	ldrb	r3, [r7, #23]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bd90:	e013      	b.n	800bdba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bd92:	7dfb      	ldrb	r3, [r7, #23]
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	4413      	add	r3, r2
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	7812      	ldrb	r2, [r2, #0]
 800bd9c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	3301      	adds	r3, #1
 800bda2:	613b      	str	r3, [r7, #16]
    idx++;
 800bda4:	7dfb      	ldrb	r3, [r7, #23]
 800bda6:	3301      	adds	r3, #1
 800bda8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bdaa:	7dfb      	ldrb	r3, [r7, #23]
 800bdac:	68ba      	ldr	r2, [r7, #8]
 800bdae:	4413      	add	r3, r2
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	701a      	strb	r2, [r3, #0]
    idx++;
 800bdb4:	7dfb      	ldrb	r3, [r7, #23]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1e7      	bne.n	800bd92 <USBD_GetString+0x52>
 800bdc2:	e000      	b.n	800bdc6 <USBD_GetString+0x86>
    return;
 800bdc4:	bf00      	nop
  }
}
 800bdc6:	3718      	adds	r7, #24
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bddc:	e005      	b.n	800bdea <USBD_GetLen+0x1e>
  {
    len++;
 800bdde:	7bfb      	ldrb	r3, [r7, #15]
 800bde0:	3301      	adds	r3, #1
 800bde2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	3301      	adds	r3, #1
 800bde8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1f5      	bne.n	800bdde <USBD_GetLen+0x12>
  }

  return len;
 800bdf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3714      	adds	r7, #20
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2202      	movs	r2, #2
 800be10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	68ba      	ldr	r2, [r7, #8]
 800be24:	2100      	movs	r1, #0
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f007 fcdf 	bl	80137ea <USBD_LL_Transmit>

  return USBD_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b084      	sub	sp, #16
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	60f8      	str	r0, [r7, #12]
 800be3e:	60b9      	str	r1, [r7, #8]
 800be40:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	2100      	movs	r1, #0
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f007 fcce 	bl	80137ea <USBD_LL_Transmit>

  return USBD_OK;
 800be4e:	2300      	movs	r3, #0
}
 800be50:	4618      	mov	r0, r3
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2203      	movs	r2, #3
 800be68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	68ba      	ldr	r2, [r7, #8]
 800be80:	2100      	movs	r1, #0
 800be82:	68f8      	ldr	r0, [r7, #12]
 800be84:	f007 fcd2 	bl	801382c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b084      	sub	sp, #16
 800be96:	af00      	add	r7, sp, #0
 800be98:	60f8      	str	r0, [r7, #12]
 800be9a:	60b9      	str	r1, [r7, #8]
 800be9c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	68ba      	ldr	r2, [r7, #8]
 800bea2:	2100      	movs	r1, #0
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	f007 fcc1 	bl	801382c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800beaa:	2300      	movs	r3, #0
}
 800beac:	4618      	mov	r0, r3
 800beae:	3710      	adds	r7, #16
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2204      	movs	r2, #4
 800bec0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bec4:	2300      	movs	r3, #0
 800bec6:	2200      	movs	r2, #0
 800bec8:	2100      	movs	r1, #0
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f007 fc8d 	bl	80137ea <USBD_LL_Transmit>

  return USBD_OK;
 800bed0:	2300      	movs	r3, #0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b082      	sub	sp, #8
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2205      	movs	r2, #5
 800bee6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800beea:	2300      	movs	r3, #0
 800beec:	2200      	movs	r2, #0
 800beee:	2100      	movs	r1, #0
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f007 fc9b 	bl	801382c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3708      	adds	r7, #8
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bf06:	1d3b      	adds	r3, r7, #4
 800bf08:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2100      	movs	r1, #0
 800bf10:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800bf14:	f000 f938 	bl	800c188 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	330b      	adds	r3, #11
 800bf1c:	78db      	ldrb	r3, [r3, #3]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3718      	adds	r7, #24
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b088      	sub	sp, #32
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bf30:	f107 030c 	add.w	r3, r7, #12
 800bf34:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800bf36:	79fb      	ldrb	r3, [r7, #7]
 800bf38:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800bf3a:	f107 020c 	add.w	r2, r7, #12
 800bf3e:	69fb      	ldr	r3, [r7, #28]
 800bf40:	2101      	movs	r1, #1
 800bf42:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800bf46:	f000 f91f 	bl	800c188 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	330b      	adds	r3, #11
 800bf4e:	78db      	ldrb	r3, [r3, #3]
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3720      	adds	r7, #32
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b08b      	sub	sp, #44	; 0x2c
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800bf60:	2300      	movs	r3, #0
 800bf62:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800bf64:	2300      	movs	r3, #0
 800bf66:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800bf70:	2300      	movs	r3, #0
 800bf72:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800bf74:	2300      	movs	r3, #0
 800bf76:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800bf80:	4b4a      	ldr	r3, [pc, #296]	; (800c0ac <SHCI_GetWirelessFwInfo+0x154>)
 800bf82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf84:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bf88:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bf92:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4a44      	ldr	r2, [pc, #272]	; (800c0b0 <SHCI_GetWirelessFwInfo+0x158>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d10f      	bne.n	800bfc4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	695b      	ldr	r3, [r3, #20]
 800bfa8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	69db      	ldr	r3, [r3, #28]
 800bfb4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	691b      	ldr	r3, [r3, #16]
 800bfc0:	617b      	str	r3, [r7, #20]
 800bfc2:	e01a      	b.n	800bffa <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bfcc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800bfd0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	695b      	ldr	r3, [r3, #20]
 800bfe0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	699b      	ldr	r3, [r3, #24]
 800bfe8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffc:	0e1b      	lsrs	r3, r3, #24
 800bffe:	b2da      	uxtb	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800c004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c006:	0c1b      	lsrs	r3, r3, #16
 800c008:	b2da      	uxtb	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800c00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c010:	0a1b      	lsrs	r3, r3, #8
 800c012:	b2da      	uxtb	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800c018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01a:	091b      	lsrs	r3, r3, #4
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	f003 030f 	and.w	r3, r3, #15
 800c022:	b2da      	uxtb	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	f003 030f 	and.w	r3, r3, #15
 800c030:	b2da      	uxtb	r2, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c036:	6a3b      	ldr	r3, [r7, #32]
 800c038:	0e1b      	lsrs	r3, r3, #24
 800c03a:	b2da      	uxtb	r2, r3
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c040:	6a3b      	ldr	r3, [r7, #32]
 800c042:	0c1b      	lsrs	r3, r3, #16
 800c044:	b2da      	uxtb	r2, r3
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800c04a:	6a3b      	ldr	r3, [r7, #32]
 800c04c:	0a1b      	lsrs	r3, r3, #8
 800c04e:	b2da      	uxtb	r2, r3
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c054:	6a3b      	ldr	r3, [r7, #32]
 800c056:	b2da      	uxtb	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	b2da      	uxtb	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	0e1b      	lsrs	r3, r3, #24
 800c068:	b2da      	uxtb	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	0c1b      	lsrs	r3, r3, #16
 800c072:	b2da      	uxtb	r2, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	0a1b      	lsrs	r3, r3, #8
 800c07c:	b2da      	uxtb	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	0e1b      	lsrs	r3, r3, #24
 800c086:	b2da      	uxtb	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	0c1b      	lsrs	r3, r3, #16
 800c090:	b2da      	uxtb	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	b2da      	uxtb	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	372c      	adds	r7, #44	; 0x2c
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr
 800c0ac:	58004000 	.word	0x58004000
 800c0b0:	a94656b9 	.word	0xa94656b9

0800c0b4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	4a08      	ldr	r2, [pc, #32]	; (800c0e4 <shci_init+0x30>)
 800c0c4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c0c6:	4a08      	ldr	r2, [pc, #32]	; (800c0e8 <shci_init+0x34>)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800c0cc:	4806      	ldr	r0, [pc, #24]	; (800c0e8 <shci_init+0x34>)
 800c0ce:	f000 f911 	bl	800c2f4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f000 f894 	bl	800c204 <TlInit>

  return;
 800c0dc:	bf00      	nop
}
 800c0de:	3708      	adds	r7, #8
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	20000338 	.word	0x20000338
 800c0e8:	20000318 	.word	0x20000318

0800c0ec <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c0f2:	4822      	ldr	r0, [pc, #136]	; (800c17c <shci_user_evt_proc+0x90>)
 800c0f4:	f001 fce4 	bl	800dac0 <LST_is_empty>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d12b      	bne.n	800c156 <shci_user_evt_proc+0x6a>
 800c0fe:	4b20      	ldr	r3, [pc, #128]	; (800c180 <shci_user_evt_proc+0x94>)
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d027      	beq.n	800c156 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c106:	f107 030c 	add.w	r3, r7, #12
 800c10a:	4619      	mov	r1, r3
 800c10c:	481b      	ldr	r0, [pc, #108]	; (800c17c <shci_user_evt_proc+0x90>)
 800c10e:	f001 fd5e 	bl	800dbce <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800c112:	4b1c      	ldr	r3, [pc, #112]	; (800c184 <shci_user_evt_proc+0x98>)
 800c114:	69db      	ldr	r3, [r3, #28]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d00c      	beq.n	800c134 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800c11e:	2301      	movs	r3, #1
 800c120:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c122:	4b18      	ldr	r3, [pc, #96]	; (800c184 <shci_user_evt_proc+0x98>)
 800c124:	69db      	ldr	r3, [r3, #28]
 800c126:	1d3a      	adds	r2, r7, #4
 800c128:	4610      	mov	r0, r2
 800c12a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c12c:	793a      	ldrb	r2, [r7, #4]
 800c12e:	4b14      	ldr	r3, [pc, #80]	; (800c180 <shci_user_evt_proc+0x94>)
 800c130:	701a      	strb	r2, [r3, #0]
 800c132:	e002      	b.n	800c13a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c134:	4b12      	ldr	r3, [pc, #72]	; (800c180 <shci_user_evt_proc+0x94>)
 800c136:	2201      	movs	r2, #1
 800c138:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c13a:	4b11      	ldr	r3, [pc, #68]	; (800c180 <shci_user_evt_proc+0x94>)
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d004      	beq.n	800c14c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	4618      	mov	r0, r3
 800c146:	f000 fa95 	bl	800c674 <TL_MM_EvtDone>
 800c14a:	e004      	b.n	800c156 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	4619      	mov	r1, r3
 800c150:	480a      	ldr	r0, [pc, #40]	; (800c17c <shci_user_evt_proc+0x90>)
 800c152:	f001 fcd5 	bl	800db00 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c156:	4809      	ldr	r0, [pc, #36]	; (800c17c <shci_user_evt_proc+0x90>)
 800c158:	f001 fcb2 	bl	800dac0 <LST_is_empty>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d107      	bne.n	800c172 <shci_user_evt_proc+0x86>
 800c162:	4b07      	ldr	r3, [pc, #28]	; (800c180 <shci_user_evt_proc+0x94>)
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d003      	beq.n	800c172 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c16a:	4804      	ldr	r0, [pc, #16]	; (800c17c <shci_user_evt_proc+0x90>)
 800c16c:	f7f4 fe32 	bl	8000dd4 <shci_notify_asynch_evt>
  }


  return;
 800c170:	bf00      	nop
 800c172:	bf00      	nop
}
 800c174:	3710      	adds	r7, #16
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	2000025c 	.word	0x2000025c
 800c180:	2000026c 	.word	0x2000026c
 800c184:	20000318 	.word	0x20000318

0800c188 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60ba      	str	r2, [r7, #8]
 800c190:	607b      	str	r3, [r7, #4]
 800c192:	4603      	mov	r3, r0
 800c194:	81fb      	strh	r3, [r7, #14]
 800c196:	460b      	mov	r3, r1
 800c198:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c19a:	2000      	movs	r0, #0
 800c19c:	f000 f864 	bl	800c268 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c1a0:	4b16      	ldr	r3, [pc, #88]	; (800c1fc <shci_send+0x74>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	89fa      	ldrh	r2, [r7, #14]
 800c1a6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c1aa:	4b14      	ldr	r3, [pc, #80]	; (800c1fc <shci_send+0x74>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	7b7a      	ldrb	r2, [r7, #13]
 800c1b0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c1b2:	4b12      	ldr	r3, [pc, #72]	; (800c1fc <shci_send+0x74>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	330c      	adds	r3, #12
 800c1b8:	7b7a      	ldrb	r2, [r7, #13]
 800c1ba:	68b9      	ldr	r1, [r7, #8]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f007 fc19 	bl	80139f4 <memcpy>

  shciContext.io.Send(0,0);
 800c1c2:	4b0f      	ldr	r3, [pc, #60]	; (800c200 <shci_send+0x78>)
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c1cc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c1d0:	f7f4 fe20 	bl	8000e14 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f103 0008 	add.w	r0, r3, #8
 800c1da:	4b08      	ldr	r3, [pc, #32]	; (800c1fc <shci_send+0x74>)
 800c1dc:	6819      	ldr	r1, [r3, #0]
 800c1de:	4b07      	ldr	r3, [pc, #28]	; (800c1fc <shci_send+0x74>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	789b      	ldrb	r3, [r3, #2]
 800c1e4:	3303      	adds	r3, #3
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	f007 fc04 	bl	80139f4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c1ec:	2001      	movs	r0, #1
 800c1ee:	f000 f83b 	bl	800c268 <Cmd_SetStatus>

  return;
 800c1f2:	bf00      	nop
}
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20000268 	.word	0x20000268
 800c200:	20000318 	.word	0x20000318

0800c204 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b086      	sub	sp, #24
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c20c:	4a10      	ldr	r2, [pc, #64]	; (800c250 <TlInit+0x4c>)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c212:	4810      	ldr	r0, [pc, #64]	; (800c254 <TlInit+0x50>)
 800c214:	f001 fc44 	bl	800daa0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c218:	2001      	movs	r0, #1
 800c21a:	f000 f825 	bl	800c268 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c21e:	4b0e      	ldr	r3, [pc, #56]	; (800c258 <TlInit+0x54>)
 800c220:	2201      	movs	r2, #1
 800c222:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c224:	4b0d      	ldr	r3, [pc, #52]	; (800c25c <TlInit+0x58>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00c      	beq.n	800c246 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c230:	4b0b      	ldr	r3, [pc, #44]	; (800c260 <TlInit+0x5c>)
 800c232:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c234:	4b0b      	ldr	r3, [pc, #44]	; (800c264 <TlInit+0x60>)
 800c236:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c238:	4b08      	ldr	r3, [pc, #32]	; (800c25c <TlInit+0x58>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f107 020c 	add.w	r2, r7, #12
 800c240:	4610      	mov	r0, r2
 800c242:	4798      	blx	r3
  }

  return;
 800c244:	bf00      	nop
 800c246:	bf00      	nop
}
 800c248:	3718      	adds	r7, #24
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	20000268 	.word	0x20000268
 800c254:	2000025c 	.word	0x2000025c
 800c258:	2000026c 	.word	0x2000026c
 800c25c:	20000318 	.word	0x20000318
 800c260:	0800c2b9 	.word	0x0800c2b9
 800c264:	0800c2d1 	.word	0x0800c2d1

0800c268 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	4603      	mov	r3, r0
 800c270:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c272:	79fb      	ldrb	r3, [r7, #7]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10b      	bne.n	800c290 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c278:	4b0d      	ldr	r3, [pc, #52]	; (800c2b0 <Cmd_SetStatus+0x48>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d003      	beq.n	800c288 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c280:	4b0b      	ldr	r3, [pc, #44]	; (800c2b0 <Cmd_SetStatus+0x48>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2000      	movs	r0, #0
 800c286:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c288:	4b0a      	ldr	r3, [pc, #40]	; (800c2b4 <Cmd_SetStatus+0x4c>)
 800c28a:	2200      	movs	r2, #0
 800c28c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c28e:	e00b      	b.n	800c2a8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c290:	4b08      	ldr	r3, [pc, #32]	; (800c2b4 <Cmd_SetStatus+0x4c>)
 800c292:	2201      	movs	r2, #1
 800c294:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c296:	4b06      	ldr	r3, [pc, #24]	; (800c2b0 <Cmd_SetStatus+0x48>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d004      	beq.n	800c2a8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c29e:	4b04      	ldr	r3, [pc, #16]	; (800c2b0 <Cmd_SetStatus+0x48>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2001      	movs	r0, #1
 800c2a4:	4798      	blx	r3
  return;
 800c2a6:	bf00      	nop
 800c2a8:	bf00      	nop
}
 800c2aa:	3708      	adds	r7, #8
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	20000338 	.word	0x20000338
 800c2b4:	20000264 	.word	0x20000264

0800c2b8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	f7f4 fd97 	bl	8000df4 <shci_cmd_resp_release>

  return;
 800c2c6:	bf00      	nop
}
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c2d8:	6879      	ldr	r1, [r7, #4]
 800c2da:	4805      	ldr	r0, [pc, #20]	; (800c2f0 <TlUserEvtReceived+0x20>)
 800c2dc:	f001 fc34 	bl	800db48 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c2e0:	4803      	ldr	r0, [pc, #12]	; (800c2f0 <TlUserEvtReceived+0x20>)
 800c2e2:	f7f4 fd77 	bl	8000dd4 <shci_notify_asynch_evt>

  return;
 800c2e6:	bf00      	nop
}
 800c2e8:	3708      	adds	r7, #8
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	2000025c 	.word	0x2000025c

0800c2f4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4a05      	ldr	r2, [pc, #20]	; (800c314 <shci_register_io_bus+0x20>)
 800c300:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4a04      	ldr	r2, [pc, #16]	; (800c318 <shci_register_io_bus+0x24>)
 800c306:	611a      	str	r2, [r3, #16]

  return;
 800c308:	bf00      	nop
}
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr
 800c314:	0800c411 	.word	0x0800c411
 800c318:	0800c465 	.word	0x0800c465

0800c31c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c320:	f006 fce8 	bl	8012cf4 <HW_IPCC_Enable>

  return;
 800c324:	bf00      	nop
}
 800c326:	bd80      	pop	{r7, pc}

0800c328 <TL_Init>:


void TL_Init( void )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c32c:	4b10      	ldr	r3, [pc, #64]	; (800c370 <TL_Init+0x48>)
 800c32e:	4a11      	ldr	r2, [pc, #68]	; (800c374 <TL_Init+0x4c>)
 800c330:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c332:	4b0f      	ldr	r3, [pc, #60]	; (800c370 <TL_Init+0x48>)
 800c334:	4a10      	ldr	r2, [pc, #64]	; (800c378 <TL_Init+0x50>)
 800c336:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c338:	4b0d      	ldr	r3, [pc, #52]	; (800c370 <TL_Init+0x48>)
 800c33a:	4a10      	ldr	r2, [pc, #64]	; (800c37c <TL_Init+0x54>)
 800c33c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c33e:	4b0c      	ldr	r3, [pc, #48]	; (800c370 <TL_Init+0x48>)
 800c340:	4a0f      	ldr	r2, [pc, #60]	; (800c380 <TL_Init+0x58>)
 800c342:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800c344:	4b0a      	ldr	r3, [pc, #40]	; (800c370 <TL_Init+0x48>)
 800c346:	4a0f      	ldr	r2, [pc, #60]	; (800c384 <TL_Init+0x5c>)
 800c348:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c34a:	4b09      	ldr	r3, [pc, #36]	; (800c370 <TL_Init+0x48>)
 800c34c:	4a0e      	ldr	r2, [pc, #56]	; (800c388 <TL_Init+0x60>)
 800c34e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c350:	4b07      	ldr	r3, [pc, #28]	; (800c370 <TL_Init+0x48>)
 800c352:	4a0e      	ldr	r2, [pc, #56]	; (800c38c <TL_Init+0x64>)
 800c354:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c356:	4b06      	ldr	r3, [pc, #24]	; (800c370 <TL_Init+0x48>)
 800c358:	4a0d      	ldr	r2, [pc, #52]	; (800c390 <TL_Init+0x68>)
 800c35a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c35c:	4b04      	ldr	r3, [pc, #16]	; (800c370 <TL_Init+0x48>)
 800c35e:	4a0d      	ldr	r2, [pc, #52]	; (800c394 <TL_Init+0x6c>)
 800c360:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c362:	4b03      	ldr	r3, [pc, #12]	; (800c370 <TL_Init+0x48>)
 800c364:	4a0c      	ldr	r2, [pc, #48]	; (800c398 <TL_Init+0x70>)
 800c366:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c368:	f006 fcd8 	bl	8012d1c <HW_IPCC_Init>

  return;
 800c36c:	bf00      	nop
}
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	20030000 	.word	0x20030000
 800c374:	20030028 	.word	0x20030028
 800c378:	20030048 	.word	0x20030048
 800c37c:	20030058 	.word	0x20030058
 800c380:	20030064 	.word	0x20030064
 800c384:	2003006c 	.word	0x2003006c
 800c388:	20030074 	.word	0x20030074
 800c38c:	2003007c 	.word	0x2003007c
 800c390:	20030098 	.word	0x20030098
 800c394:	2003009c 	.word	0x2003009c
 800c398:	200300a8 	.word	0x200300a8

0800c39c <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c3a2:	e01c      	b.n	800c3de <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c3a4:	1d3b      	adds	r3, r7, #4
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	4812      	ldr	r0, [pc, #72]	; (800c3f4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c3aa:	f001 fc10 	bl	800dbce <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	7a5b      	ldrb	r3, [r3, #9]
 800c3b2:	2b0f      	cmp	r3, #15
 800c3b4:	d003      	beq.n	800c3be <HW_IPCC_BLE_RxEvtNot+0x22>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	7a5b      	ldrb	r3, [r3, #9]
 800c3ba:	2b0e      	cmp	r3, #14
 800c3bc:	d105      	bne.n	800c3ca <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	2002      	movs	r0, #2
 800c3c4:	f000 f9ba 	bl	800c73c <OutputDbgTrace>
 800c3c8:	e004      	b.n	800c3d4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	2003      	movs	r0, #3
 800c3d0:	f000 f9b4 	bl	800c73c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c3d4:	4b08      	ldr	r3, [pc, #32]	; (800c3f8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	4610      	mov	r0, r2
 800c3dc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c3de:	4805      	ldr	r0, [pc, #20]	; (800c3f4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c3e0:	f001 fb6e 	bl	800dac0 <LST_is_empty>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d0dc      	beq.n	800c3a4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c3ea:	bf00      	nop
}
 800c3ec:	3708      	adds	r7, #8
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	200300c4 	.word	0x200300c4
 800c3f8:	20000344 	.word	0x20000344

0800c3fc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c400:	4b02      	ldr	r3, [pc, #8]	; (800c40c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4798      	blx	r3

  return;
 800c406:	bf00      	nop
}
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	20000348 	.word	0x20000348

0800c410 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c41c:	480d      	ldr	r0, [pc, #52]	; (800c454 <TL_SYS_Init+0x44>)
 800c41e:	f001 fb3f 	bl	800daa0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c422:	4b0d      	ldr	r3, [pc, #52]	; (800c458 <TL_SYS_Init+0x48>)
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	689a      	ldr	r2, [r3, #8]
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	4a08      	ldr	r2, [pc, #32]	; (800c454 <TL_SYS_Init+0x44>)
 800c434:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c436:	f006 fc9f 	bl	8012d78 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a07      	ldr	r2, [pc, #28]	; (800c45c <TL_SYS_Init+0x4c>)
 800c440:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	4a06      	ldr	r2, [pc, #24]	; (800c460 <TL_SYS_Init+0x50>)
 800c448:	6013      	str	r3, [r2, #0]

  return 0;
 800c44a:	2300      	movs	r3, #0
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3710      	adds	r7, #16
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	200300cc 	.word	0x200300cc
 800c458:	20030000 	.word	0x20030000
 800c45c:	2000034c 	.word	0x2000034c
 800c460:	20000350 	.word	0x20000350

0800c464 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	460b      	mov	r3, r1
 800c46e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c470:	4b09      	ldr	r3, [pc, #36]	; (800c498 <TL_SYS_SendCmd+0x34>)
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2210      	movs	r2, #16
 800c478:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c47a:	4b07      	ldr	r3, [pc, #28]	; (800c498 <TL_SYS_SendCmd+0x34>)
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4619      	mov	r1, r3
 800c482:	2004      	movs	r0, #4
 800c484:	f000 f95a 	bl	800c73c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c488:	f006 fc80 	bl	8012d8c <HW_IPCC_SYS_SendCmd>

  return 0;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	20030000 	.word	0x20030000

0800c49c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c4a0:	4b07      	ldr	r3, [pc, #28]	; (800c4c0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	2005      	movs	r0, #5
 800c4aa:	f000 f947 	bl	800c73c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c4ae:	4b05      	ldr	r3, [pc, #20]	; (800c4c4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a03      	ldr	r2, [pc, #12]	; (800c4c0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c4b4:	68d2      	ldr	r2, [r2, #12]
 800c4b6:	6812      	ldr	r2, [r2, #0]
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	4798      	blx	r3

  return;
 800c4bc:	bf00      	nop
}
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	20030000 	.word	0x20030000
 800c4c4:	2000034c 	.word	0x2000034c

0800c4c8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c4ce:	e00e      	b.n	800c4ee <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c4d0:	1d3b      	adds	r3, r7, #4
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	480b      	ldr	r0, [pc, #44]	; (800c504 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c4d6:	f001 fb7a 	bl	800dbce <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	4619      	mov	r1, r3
 800c4de:	2006      	movs	r0, #6
 800c4e0:	f000 f92c 	bl	800c73c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c4e4:	4b08      	ldr	r3, [pc, #32]	; (800c508 <HW_IPCC_SYS_EvtNot+0x40>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	4610      	mov	r0, r2
 800c4ec:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c4ee:	4805      	ldr	r0, [pc, #20]	; (800c504 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c4f0:	f001 fae6 	bl	800dac0 <LST_is_empty>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d0ea      	beq.n	800c4d0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c4fa:	bf00      	nop
}
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	200300cc 	.word	0x200300cc
 800c508:	20000350 	.word	0x20000350

0800c50c <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800c514:	4b0a      	ldr	r3, [pc, #40]	; (800c540 <TL_THREAD_Init+0x34>)
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	685a      	ldr	r2, [r3, #4]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	689a      	ldr	r2, [r3, #8]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 800c532:	f006 fc51 	bl	8012dd8 <HW_IPCC_THREAD_Init>

  return;
 800c536:	bf00      	nop
}
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	20030000 	.word	0x20030000

0800c544 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800c544:	b580      	push	{r7, lr}
 800c546:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800c548:	4b04      	ldr	r3, [pc, #16]	; (800c55c <TL_OT_SendCmd+0x18>)
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	2208      	movs	r2, #8
 800c550:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800c552:	f006 fc4f 	bl	8012df4 <HW_IPCC_OT_SendCmd>

  return;
 800c556:	bf00      	nop
}
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	20030000 	.word	0x20030000

0800c560 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 800c560:	b580      	push	{r7, lr}
 800c562:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800c564:	4b04      	ldr	r3, [pc, #16]	; (800c578 <TL_CLI_SendCmd+0x18>)
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	220a      	movs	r2, #10
 800c56c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 800c56e:	f006 fc4f 	bl	8012e10 <HW_IPCC_CLI_SendCmd>

  return;
 800c572:	bf00      	nop
}
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	20030000 	.word	0x20030000

0800c57c <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c580:	4b04      	ldr	r3, [pc, #16]	; (800c594 <TL_THREAD_SendAck+0x18>)
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	220d      	movs	r2, #13
 800c588:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800c58a:	f006 fc4b 	bl	8012e24 <HW_IPCC_THREAD_SendAck>

  return;
 800c58e:	bf00      	nop
}
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	20030000 	.word	0x20030000

0800c598 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c59c:	4b04      	ldr	r3, [pc, #16]	; (800c5b0 <TL_THREAD_CliSendAck+0x18>)
 800c59e:	689b      	ldr	r3, [r3, #8]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	220d      	movs	r2, #13
 800c5a4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800c5a6:	f006 fc4b 	bl	8012e40 <HW_IPCC_THREAD_CliSendAck>

  return;
 800c5aa:	bf00      	nop
}
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	20030000 	.word	0x20030000

0800c5b4 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800c5b8:	4b03      	ldr	r3, [pc, #12]	; (800c5c8 <HW_IPCC_OT_CmdEvtNot+0x14>)
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f006 f8de 	bl	8012780 <TL_OT_CmdEvtReceived>

  return;
 800c5c4:	bf00      	nop
}
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	20030000 	.word	0x20030000

0800c5cc <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800c5d0:	4b03      	ldr	r3, [pc, #12]	; (800c5e0 <HW_IPCC_THREAD_EvtNot+0x14>)
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f006 f8dc 	bl	8012794 <TL_THREAD_NotReceived>

  return;
 800c5dc:	bf00      	nop
}
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	20030000 	.word	0x20030000

0800c5e4 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 800c5e8:	4b03      	ldr	r3, [pc, #12]	; (800c5f8 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f006 f97e 	bl	80128f0 <TL_THREAD_CliNotReceived>

  return;
 800c5f4:	bf00      	nop
}
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	20030000 	.word	0x20030000

0800c5fc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c604:	4817      	ldr	r0, [pc, #92]	; (800c664 <TL_MM_Init+0x68>)
 800c606:	f001 fa4b 	bl	800daa0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c60a:	4817      	ldr	r0, [pc, #92]	; (800c668 <TL_MM_Init+0x6c>)
 800c60c:	f001 fa48 	bl	800daa0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c610:	4b16      	ldr	r3, [pc, #88]	; (800c66c <TL_MM_Init+0x70>)
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	4a16      	ldr	r2, [pc, #88]	; (800c670 <TL_MM_Init+0x74>)
 800c616:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c618:	4b15      	ldr	r3, [pc, #84]	; (800c670 <TL_MM_Init+0x74>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	6892      	ldr	r2, [r2, #8]
 800c620:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c622:	4b13      	ldr	r3, [pc, #76]	; (800c670 <TL_MM_Init+0x74>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	68d2      	ldr	r2, [r2, #12]
 800c62a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c62c:	4b10      	ldr	r3, [pc, #64]	; (800c670 <TL_MM_Init+0x74>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a0c      	ldr	r2, [pc, #48]	; (800c664 <TL_MM_Init+0x68>)
 800c632:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c634:	4b0e      	ldr	r3, [pc, #56]	; (800c670 <TL_MM_Init+0x74>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	6812      	ldr	r2, [r2, #0]
 800c63c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c63e:	4b0c      	ldr	r3, [pc, #48]	; (800c670 <TL_MM_Init+0x74>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	6852      	ldr	r2, [r2, #4]
 800c646:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c648:	4b09      	ldr	r3, [pc, #36]	; (800c670 <TL_MM_Init+0x74>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	6912      	ldr	r2, [r2, #16]
 800c650:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c652:	4b07      	ldr	r3, [pc, #28]	; (800c670 <TL_MM_Init+0x74>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	6952      	ldr	r2, [r2, #20]
 800c65a:	619a      	str	r2, [r3, #24]

  return;
 800c65c:	bf00      	nop
}
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	200300b4 	.word	0x200300b4
 800c668:	2000033c 	.word	0x2000033c
 800c66c:	20030000 	.word	0x20030000
 800c670:	20000354 	.word	0x20000354

0800c674 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c67c:	6879      	ldr	r1, [r7, #4]
 800c67e:	4807      	ldr	r0, [pc, #28]	; (800c69c <TL_MM_EvtDone+0x28>)
 800c680:	f001 fa62 	bl	800db48 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c684:	6879      	ldr	r1, [r7, #4]
 800c686:	2000      	movs	r0, #0
 800c688:	f000 f858 	bl	800c73c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c68c:	4804      	ldr	r0, [pc, #16]	; (800c6a0 <TL_MM_EvtDone+0x2c>)
 800c68e:	f006 fc09 	bl	8012ea4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c692:	bf00      	nop
}
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	2000033c 	.word	0x2000033c
 800c6a0:	0800c6a5 	.word	0x0800c6a5

0800c6a4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c6aa:	e00c      	b.n	800c6c6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c6ac:	1d3b      	adds	r3, r7, #4
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	480a      	ldr	r0, [pc, #40]	; (800c6dc <SendFreeBuf+0x38>)
 800c6b2:	f001 fa8c 	bl	800dbce <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c6b6:	4b0a      	ldr	r3, [pc, #40]	; (800c6e0 <SendFreeBuf+0x3c>)
 800c6b8:	691b      	ldr	r3, [r3, #16]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	4611      	mov	r1, r2
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f001 fa41 	bl	800db48 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c6c6:	4805      	ldr	r0, [pc, #20]	; (800c6dc <SendFreeBuf+0x38>)
 800c6c8:	f001 f9fa 	bl	800dac0 <LST_is_empty>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d0ec      	beq.n	800c6ac <SendFreeBuf+0x8>
  }

  return;
 800c6d2:	bf00      	nop
}
 800c6d4:	3708      	adds	r7, #8
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	2000033c 	.word	0x2000033c
 800c6e0:	20030000 	.word	0x20030000

0800c6e4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c6e8:	4805      	ldr	r0, [pc, #20]	; (800c700 <TL_TRACES_Init+0x1c>)
 800c6ea:	f001 f9d9 	bl	800daa0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c6ee:	4b05      	ldr	r3, [pc, #20]	; (800c704 <TL_TRACES_Init+0x20>)
 800c6f0:	695b      	ldr	r3, [r3, #20]
 800c6f2:	4a03      	ldr	r2, [pc, #12]	; (800c700 <TL_TRACES_Init+0x1c>)
 800c6f4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c6f6:	f006 fc0b 	bl	8012f10 <HW_IPCC_TRACES_Init>

  return;
 800c6fa:	bf00      	nop
}
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	200300bc 	.word	0x200300bc
 800c704:	20030000 	.word	0x20030000

0800c708 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c70e:	e008      	b.n	800c722 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c710:	1d3b      	adds	r3, r7, #4
 800c712:	4619      	mov	r1, r3
 800c714:	4808      	ldr	r0, [pc, #32]	; (800c738 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c716:	f001 fa5a 	bl	800dbce <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7f4 fb8b 	bl	8000e38 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c722:	4805      	ldr	r0, [pc, #20]	; (800c738 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c724:	f001 f9cc 	bl	800dac0 <LST_is_empty>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d0f0      	beq.n	800c710 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c72e:	bf00      	nop
}
 800c730:	3708      	adds	r7, #8
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	200300bc 	.word	0x200300bc

0800c73c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
 800c742:	4603      	mov	r3, r0
 800c744:	6039      	str	r1, [r7, #0]
 800c746:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c748:	79fb      	ldrb	r3, [r7, #7]
 800c74a:	2b06      	cmp	r3, #6
 800c74c:	d849      	bhi.n	800c7e2 <OutputDbgTrace+0xa6>
 800c74e:	a201      	add	r2, pc, #4	; (adr r2, 800c754 <OutputDbgTrace+0x18>)
 800c750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c754:	0800c771 	.word	0x0800c771
 800c758:	0800c793 	.word	0x0800c793
 800c75c:	0800c799 	.word	0x0800c799
 800c760:	0800c7b3 	.word	0x0800c7b3
 800c764:	0800c7bf 	.word	0x0800c7bf
 800c768:	0800c7c5 	.word	0x0800c7c5
 800c76c:	0800c7d7 	.word	0x0800c7d7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	7a5b      	ldrb	r3, [r3, #9]
 800c778:	2b0f      	cmp	r3, #15
 800c77a:	d004      	beq.n	800c786 <OutputDbgTrace+0x4a>
 800c77c:	2bff      	cmp	r3, #255	; 0xff
 800c77e:	d004      	beq.n	800c78a <OutputDbgTrace+0x4e>
 800c780:	2b0e      	cmp	r3, #14
 800c782:	d004      	beq.n	800c78e <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c784:	e004      	b.n	800c790 <OutputDbgTrace+0x54>
          break;
 800c786:	bf00      	nop
 800c788:	e02c      	b.n	800c7e4 <OutputDbgTrace+0xa8>
          break;
 800c78a:	bf00      	nop
 800c78c:	e02a      	b.n	800c7e4 <OutputDbgTrace+0xa8>
          break;
 800c78e:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c790:	e028      	b.n	800c7e4 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c796:	e025      	b.n	800c7e4 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	7a5b      	ldrb	r3, [r3, #9]
 800c7a0:	2b0e      	cmp	r3, #14
 800c7a2:	d002      	beq.n	800c7aa <OutputDbgTrace+0x6e>
 800c7a4:	2b0f      	cmp	r3, #15
 800c7a6:	d002      	beq.n	800c7ae <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c7a8:	e002      	b.n	800c7b0 <OutputDbgTrace+0x74>
          break;
 800c7aa:	bf00      	nop
 800c7ac:	e01a      	b.n	800c7e4 <OutputDbgTrace+0xa8>
          break;
 800c7ae:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c7b0:	e018      	b.n	800c7e4 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	7a5b      	ldrb	r3, [r3, #9]
 800c7ba:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c7bc:	e012      	b.n	800c7e4 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c7c2:	e00f      	b.n	800c7e4 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	7a5b      	ldrb	r3, [r3, #9]
 800c7cc:	2b0e      	cmp	r3, #14
 800c7ce:	d000      	beq.n	800c7d2 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c7d0:	e000      	b.n	800c7d4 <OutputDbgTrace+0x98>
          break;
 800c7d2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c7d4:	e006      	b.n	800c7e4 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	7a5b      	ldrb	r3, [r3, #9]
 800c7de:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c7e0:	e000      	b.n	800c7e4 <OutputDbgTrace+0xa8>

    default:
      break;
 800c7e2:	bf00      	nop
  }

  return;
 800c7e4:	bf00      	nop
}
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <otCoapHeaderInit>:
extern otCoapRequestHandler defaultCoapRequestHandlerCb;

#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	70fb      	strb	r3, [r7, #3]
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800c800:	f005 ffd8 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c804:	f005 ff74 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800c808:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2200      	movs	r2, #0
 800c80e:	f062 0260 	orn	r2, r2, #96	; 0x60
 800c812:	701a      	strb	r2, [r3, #0]
 800c814:	2200      	movs	r2, #0
 800c816:	705a      	strb	r2, [r3, #1]
 800c818:	2200      	movs	r2, #0
 800c81a:	709a      	strb	r2, [r3, #2]
 800c81c:	2200      	movs	r2, #0
 800c81e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	f042 0203 	orr.w	r2, r2, #3
 800c828:	711a      	strb	r2, [r3, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	715a      	strb	r2, [r3, #5]
 800c82e:	2200      	movs	r2, #0
 800c830:	719a      	strb	r2, [r3, #6]
 800c832:	2200      	movs	r2, #0
 800c834:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c836:	687a      	ldr	r2, [r7, #4]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 800c83c:	78fa      	ldrb	r2, [r7, #3]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 800c842:	78ba      	ldrb	r2, [r7, #2]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800c848:	f005 ff76 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c84c:	f005 ff5c 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c850:	60f8      	str	r0, [r7, #12]
}
 800c852:	bf00      	nop
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b086      	sub	sp, #24
 800c85e:	af00      	add	r7, sp, #0
 800c860:	60f8      	str	r0, [r7, #12]
 800c862:	60b9      	str	r1, [r7, #8]
 800c864:	4613      	mov	r3, r2
 800c866:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 800c868:	f005 ffa4 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c86c:	f005 ff40 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800c870:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	2200      	movs	r2, #0
 800c876:	f062 025f 	orn	r2, r2, #95	; 0x5f
 800c87a:	701a      	strb	r2, [r3, #0]
 800c87c:	2200      	movs	r2, #0
 800c87e:	705a      	strb	r2, [r3, #1]
 800c880:	2200      	movs	r2, #0
 800c882:	709a      	strb	r2, [r3, #2]
 800c884:	2200      	movs	r2, #0
 800c886:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	2200      	movs	r2, #0
 800c88c:	f042 0203 	orr.w	r2, r2, #3
 800c890:	711a      	strb	r2, [r3, #4]
 800c892:	2200      	movs	r2, #0
 800c894:	715a      	strb	r2, [r3, #5]
 800c896:	2200      	movs	r2, #0
 800c898:	719a      	strb	r2, [r3, #6]
 800c89a:	2200      	movs	r2, #0
 800c89c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c89e:	68fa      	ldr	r2, [r7, #12]
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 800c8a4:	68ba      	ldr	r2, [r7, #8]
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 800c8aa:	79fa      	ldrb	r2, [r7, #7]
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800c8b0:	f005 ff42 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c8b4:	f005 ff28 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c8b8:	6178      	str	r0, [r7, #20]
}
 800c8ba:	bf00      	nop
 800c8bc:	3718      	adds	r7, #24
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}

0800c8c2 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 800c8c2:	b580      	push	{r7, lr}
 800c8c4:	b084      	sub	sp, #16
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800c8ce:	f005 ff71 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c8d2:	f005 ff0d 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800c8d6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	f062 025e 	orn	r2, r2, #94	; 0x5e
 800c8e0:	701a      	strb	r2, [r3, #0]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	705a      	strb	r2, [r3, #1]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	709a      	strb	r2, [r3, #2]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f042 0202 	orr.w	r2, r2, #2
 800c8f6:	711a      	strb	r2, [r3, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	715a      	strb	r2, [r3, #5]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	719a      	strb	r2, [r3, #6]
 800c900:	2200      	movs	r2, #0
 800c902:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800c90a:	78fa      	ldrb	r2, [r7, #3]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c910:	f005 ff12 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c914:	f005 fef8 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c918:	60f8      	str	r0, [r7, #12]
}
 800c91a:	bf00      	nop
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b084      	sub	sp, #16
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
 800c92a:	460b      	mov	r3, r1
 800c92c:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800c92e:	f005 ff41 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c932:	f005 fedd 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800c936:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2200      	movs	r2, #0
 800c93c:	f062 025d 	orn	r2, r2, #93	; 0x5d
 800c940:	701a      	strb	r2, [r3, #0]
 800c942:	2200      	movs	r2, #0
 800c944:	705a      	strb	r2, [r3, #1]
 800c946:	2200      	movs	r2, #0
 800c948:	709a      	strb	r2, [r3, #2]
 800c94a:	2200      	movs	r2, #0
 800c94c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2200      	movs	r2, #0
 800c952:	f042 0202 	orr.w	r2, r2, #2
 800c956:	711a      	strb	r2, [r3, #4]
 800c958:	2200      	movs	r2, #0
 800c95a:	715a      	strb	r2, [r3, #5]
 800c95c:	2200      	movs	r2, #0
 800c95e:	719a      	strb	r2, [r3, #6]
 800c960:	2200      	movs	r2, #0
 800c962:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 800c96a:	78fa      	ldrb	r2, [r7, #3]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c970:	f005 fee2 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c974:	f005 fec8 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c978:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	b2db      	uxtb	r3, r3
}
 800c980:	4618      	mov	r0, r3
 800c982:	3710      	adds	r7, #16
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800c992:	f005 ff0f 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c996:	f005 feab 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800c99a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f062 0250 	orn	r2, r2, #80	; 0x50
 800c9a4:	701a      	strb	r2, [r3, #0]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	705a      	strb	r2, [r3, #1]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	709a      	strb	r2, [r3, #2]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f042 0202 	orr.w	r2, r2, #2
 800c9ba:	711a      	strb	r2, [r3, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	715a      	strb	r2, [r3, #5]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	719a      	strb	r2, [r3, #6]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 800c9ce:	683a      	ldr	r2, [r7, #0]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c9d4:	f005 feb0 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c9d8:	f005 fe96 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c9dc:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	689b      	ldr	r3, [r3, #8]
 800c9e2:	b2db      	uxtb	r3, r3
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3710      	adds	r7, #16
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c9f4:	f005 fede 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c9f8:	f005 fe7a 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800c9fc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2200      	movs	r2, #0
 800ca02:	f062 024d 	orn	r2, r2, #77	; 0x4d
 800ca06:	701a      	strb	r2, [r3, #0]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	705a      	strb	r2, [r3, #1]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	709a      	strb	r2, [r3, #2]
 800ca10:	2200      	movs	r2, #0
 800ca12:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f042 0201 	orr.w	r2, r2, #1
 800ca1c:	711a      	strb	r2, [r3, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	715a      	strb	r2, [r3, #5]
 800ca22:	2200      	movs	r2, #0
 800ca24:	719a      	strb	r2, [r3, #6]
 800ca26:	2200      	movs	r2, #0
 800ca28:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ca30:	f005 fe82 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ca34:	f005 fe68 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ca38:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	b2db      	uxtb	r3, r3
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3710      	adds	r7, #16
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	460b      	mov	r3, r1
 800ca52:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800ca54:	f005 feae 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ca58:	f005 fe4a 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800ca5c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f062 0256 	orn	r2, r2, #86	; 0x56
 800ca66:	701a      	strb	r2, [r3, #0]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	705a      	strb	r2, [r3, #1]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	709a      	strb	r2, [r3, #2]
 800ca70:	2200      	movs	r2, #0
 800ca72:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2200      	movs	r2, #0
 800ca78:	f042 0202 	orr.w	r2, r2, #2
 800ca7c:	711a      	strb	r2, [r3, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	715a      	strb	r2, [r3, #5]
 800ca82:	2200      	movs	r2, #0
 800ca84:	719a      	strb	r2, [r3, #6]
 800ca86:	2200      	movs	r2, #0
 800ca88:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 800ca90:	887a      	ldrh	r2, [r7, #2]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800ca96:	f005 fe4f 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ca9a:	f005 fe35 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ca9e:	60f8      	str	r0, [r7, #12]
}
 800caa0:	bf00      	nop
 800caa2:	3710      	adds	r7, #16
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800cab0:	f005 fe80 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cab4:	f005 fe1c 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800cab8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2200      	movs	r2, #0
 800cabe:	f062 0261 	orn	r2, r2, #97	; 0x61
 800cac2:	701a      	strb	r2, [r3, #0]
 800cac4:	2200      	movs	r2, #0
 800cac6:	705a      	strb	r2, [r3, #1]
 800cac8:	2200      	movs	r2, #0
 800caca:	709a      	strb	r2, [r3, #2]
 800cacc:	2200      	movs	r2, #0
 800cace:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2200      	movs	r2, #0
 800cad4:	f042 0201 	orr.w	r2, r2, #1
 800cad8:	711a      	strb	r2, [r3, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	715a      	strb	r2, [r3, #5]
 800cade:	2200      	movs	r2, #0
 800cae0:	719a      	strb	r2, [r3, #6]
 800cae2:	2200      	movs	r2, #0
 800cae4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800caec:	f005 fe24 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800caf0:	f005 fe0a 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800caf4:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	b2db      	uxtb	r3, r3
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800cb0c:	f005 fe52 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cb10:	f005 fdee 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800cb14:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f062 024c 	orn	r2, r2, #76	; 0x4c
 800cb1e:	701a      	strb	r2, [r3, #0]
 800cb20:	2200      	movs	r2, #0
 800cb22:	705a      	strb	r2, [r3, #1]
 800cb24:	2200      	movs	r2, #0
 800cb26:	709a      	strb	r2, [r3, #2]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f042 0201 	orr.w	r2, r2, #1
 800cb34:	711a      	strb	r2, [r3, #4]
 800cb36:	2200      	movs	r2, #0
 800cb38:	715a      	strb	r2, [r3, #5]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	719a      	strb	r2, [r3, #6]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cb48:	f005 fdf6 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cb4c:	f005 fddc 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cb50:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	b2db      	uxtb	r3, r3
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3710      	adds	r7, #16
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800cb68:	f005 fe24 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cb6c:	f005 fdc0 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800cb70:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2200      	movs	r2, #0
 800cb76:	f062 0255 	orn	r2, r2, #85	; 0x55
 800cb7a:	701a      	strb	r2, [r3, #0]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	705a      	strb	r2, [r3, #1]
 800cb80:	2200      	movs	r2, #0
 800cb82:	709a      	strb	r2, [r3, #2]
 800cb84:	2200      	movs	r2, #0
 800cb86:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f042 0201 	orr.w	r2, r2, #1
 800cb90:	711a      	strb	r2, [r3, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	715a      	strb	r2, [r3, #5]
 800cb96:	2200      	movs	r2, #0
 800cb98:	719a      	strb	r2, [r3, #6]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cba4:	f005 fdc8 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cba8:	f005 fdae 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cbac:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	689b      	ldr	r3, [r3, #8]
 800cbb2:	b29b      	uxth	r3, r3
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800cbc4:	f005 fdf6 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cbc8:	f005 fd92 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800cbcc:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f062 0254 	orn	r2, r2, #84	; 0x54
 800cbd6:	701a      	strb	r2, [r3, #0]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	705a      	strb	r2, [r3, #1]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	709a      	strb	r2, [r3, #2]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f042 0201 	orr.w	r2, r2, #1
 800cbec:	711a      	strb	r2, [r3, #4]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	715a      	strb	r2, [r3, #5]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	719a      	strb	r2, [r3, #6]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cc00:	f005 fd9a 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cc04:	f005 fd80 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cc08:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	b2db      	uxtb	r3, r3
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3710      	adds	r7, #16
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800cc20:	f005 fdc8 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cc24:	f005 fd64 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800cc28:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f062 0253 	orn	r2, r2, #83	; 0x53
 800cc32:	701a      	strb	r2, [r3, #0]
 800cc34:	2200      	movs	r2, #0
 800cc36:	705a      	strb	r2, [r3, #1]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	709a      	strb	r2, [r3, #2]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2200      	movs	r2, #0
 800cc44:	f042 0201 	orr.w	r2, r2, #1
 800cc48:	711a      	strb	r2, [r3, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	715a      	strb	r2, [r3, #5]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	719a      	strb	r2, [r3, #6]
 800cc52:	2200      	movs	r2, #0
 800cc54:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cc5c:	f005 fd6c 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cc60:	f005 fd52 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cc64:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	689b      	ldr	r3, [r3, #8]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b084      	sub	sp, #16
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
 800cc7a:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800cc7c:	f005 fd9a 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cc80:	f005 fd36 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800cc84:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f062 0259 	orn	r2, r2, #89	; 0x59
 800cc8e:	701a      	strb	r2, [r3, #0]
 800cc90:	2200      	movs	r2, #0
 800cc92:	705a      	strb	r2, [r3, #1]
 800cc94:	2200      	movs	r2, #0
 800cc96:	709a      	strb	r2, [r3, #2]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f042 0201 	orr.w	r2, r2, #1
 800cca4:	711a      	strb	r2, [r3, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	715a      	strb	r2, [r3, #5]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	719a      	strb	r2, [r3, #6]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ccb2:	683a      	ldr	r2, [r7, #0]
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ccb8:	f005 fd3e 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ccbc:	f005 fd24 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ccc0:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	689b      	ldr	r3, [r3, #8]

}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3710      	adds	r7, #16
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b086      	sub	sp, #24
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	60f8      	str	r0, [r7, #12]
 800ccd6:	60b9      	str	r1, [r7, #8]
 800ccd8:	607a      	str	r2, [r7, #4]
 800ccda:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 800ccdc:	f005 fd6a 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cce0:	f005 fd06 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800cce4:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f062 0258 	orn	r2, r2, #88	; 0x58
 800ccee:	701a      	strb	r2, [r3, #0]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	705a      	strb	r2, [r3, #1]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	709a      	strb	r2, [r3, #2]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f042 0203 	orr.w	r2, r2, #3
 800cd04:	711a      	strb	r2, [r3, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	715a      	strb	r2, [r3, #5]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	719a      	strb	r2, [r3, #6]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 800cd1e:	683a      	ldr	r2, [r7, #0]
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 800cd24:	6a3a      	ldr	r2, [r7, #32]
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800cd2a:	f005 fd05 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cd2e:	f005 fceb 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cd32:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	b2db      	uxtb	r3, r3
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3718      	adds	r7, #24
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b084      	sub	sp, #16
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800cd4e:	f005 fd31 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cd52:	f005 fccd 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800cd56:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f062 024b 	orn	r2, r2, #75	; 0x4b
 800cd60:	701a      	strb	r2, [r3, #0]
 800cd62:	2200      	movs	r2, #0
 800cd64:	705a      	strb	r2, [r3, #1]
 800cd66:	2200      	movs	r2, #0
 800cd68:	709a      	strb	r2, [r3, #2]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2200      	movs	r2, #0
 800cd72:	f042 0201 	orr.w	r2, r2, #1
 800cd76:	711a      	strb	r2, [r3, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	715a      	strb	r2, [r3, #5]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	719a      	strb	r2, [r3, #6]
 800cd80:	2200      	movs	r2, #0
 800cd82:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 800cd84:	887a      	ldrh	r2, [r7, #2]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cd8a:	f005 fcd5 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cd8e:	f005 fcbb 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cd92:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	b2db      	uxtb	r3, r3
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b084      	sub	sp, #16
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
 800cdaa:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800cdac:	f005 fd02 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cdb0:	f005 fc9e 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800cdb4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	f062 0249 	orn	r2, r2, #73	; 0x49
 800cdbe:	701a      	strb	r2, [r3, #0]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	705a      	strb	r2, [r3, #1]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	709a      	strb	r2, [r3, #2]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f042 0201 	orr.w	r2, r2, #1
 800cdd4:	711a      	strb	r2, [r3, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	715a      	strb	r2, [r3, #5]
 800cdda:	2200      	movs	r2, #0
 800cddc:	719a      	strb	r2, [r3, #6]
 800cdde:	2200      	movs	r2, #0
 800cde0:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cde8:	f005 fca6 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cdec:	f005 fc8c 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cdf0:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	b2db      	uxtb	r3, r3
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3710      	adds	r7, #16
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b086      	sub	sp, #24
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800ce0c:	f005 fcd2 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ce10:	f005 fc6e 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800ce14:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f062 0257 	orn	r2, r2, #87	; 0x57
 800ce1e:	701a      	strb	r2, [r3, #0]
 800ce20:	2200      	movs	r2, #0
 800ce22:	705a      	strb	r2, [r3, #1]
 800ce24:	2200      	movs	r2, #0
 800ce26:	709a      	strb	r2, [r3, #2]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f042 0202 	orr.w	r2, r2, #2
 800ce34:	711a      	strb	r2, [r3, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	715a      	strb	r2, [r3, #5]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	719a      	strb	r2, [r3, #6]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800ce42:	68ba      	ldr	r2, [r7, #8]
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800ce4e:	f005 fc73 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ce52:	f005 fc59 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ce56:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	b2db      	uxtb	r3, r3
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3718      	adds	r7, #24
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}

0800ce66 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800ce66:	b580      	push	{r7, lr}
 800ce68:	b082      	sub	sp, #8
 800ce6a:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 800ce6c:	f005 fca2 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ce70:	f005 fc3e 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800ce74:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f062 026b 	orn	r2, r2, #107	; 0x6b
 800ce7e:	701a      	strb	r2, [r3, #0]
 800ce80:	2200      	movs	r2, #0
 800ce82:	705a      	strb	r2, [r3, #1]
 800ce84:	2200      	movs	r2, #0
 800ce86:	709a      	strb	r2, [r3, #2]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	711a      	strb	r2, [r3, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	715a      	strb	r2, [r3, #5]
 800ce96:	2200      	movs	r2, #0
 800ce98:	719a      	strb	r2, [r3, #6]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800ce9e:	f005 fc4b 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cea2:	f005 fc31 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cea6:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	689b      	ldr	r3, [r3, #8]
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800cebc:	f005 fc7a 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cec0:	f005 fc16 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800cec4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f062 0269 	orn	r2, r2, #105	; 0x69
 800cece:	701a      	strb	r2, [r3, #0]
 800ced0:	2200      	movs	r2, #0
 800ced2:	705a      	strb	r2, [r3, #1]
 800ced4:	2200      	movs	r2, #0
 800ced6:	709a      	strb	r2, [r3, #2]
 800ced8:	2200      	movs	r2, #0
 800ceda:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2200      	movs	r2, #0
 800cee0:	711a      	strb	r2, [r3, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	715a      	strb	r2, [r3, #5]
 800cee6:	2200      	movs	r2, #0
 800cee8:	719a      	strb	r2, [r3, #6]
 800ceea:	2200      	movs	r2, #0
 800ceec:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800ceee:	f005 fc23 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cef2:	f005 fc09 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cef6:	60f8      	str	r0, [r7, #12]
}
 800cef8:	bf00      	nop
 800cefa:	3710      	adds	r7, #16
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b086      	sub	sp, #24
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800cf0c:	f005 fc52 	bl	80127b4 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 800cf10:	4a15      	ldr	r2, [pc, #84]	; (800cf68 <otSetStateChangedCallback+0x68>)
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cf16:	f005 fbeb 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800cf1a:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f062 0268 	orn	r2, r2, #104	; 0x68
 800cf24:	701a      	strb	r2, [r3, #0]
 800cf26:	2200      	movs	r2, #0
 800cf28:	705a      	strb	r2, [r3, #1]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	709a      	strb	r2, [r3, #2]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	2200      	movs	r2, #0
 800cf36:	f042 0201 	orr.w	r2, r2, #1
 800cf3a:	711a      	strb	r2, [r3, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	715a      	strb	r2, [r3, #5]
 800cf40:	2200      	movs	r2, #0
 800cf42:	719a      	strb	r2, [r3, #6]
 800cf44:	2200      	movs	r2, #0
 800cf46:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cf4e:	f005 fbf3 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cf52:	f005 fbd9 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cf56:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	b2db      	uxtb	r3, r3
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3718      	adds	r7, #24
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	20000358 	.word	0x20000358

0800cf6c <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800cf74:	f005 fc1e 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cf78:	f005 fbba 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800cf7c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f062 0264 	orn	r2, r2, #100	; 0x64
 800cf86:	701a      	strb	r2, [r3, #0]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	705a      	strb	r2, [r3, #1]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	709a      	strb	r2, [r3, #2]
 800cf90:	2200      	movs	r2, #0
 800cf92:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2200      	movs	r2, #0
 800cf98:	711a      	strb	r2, [r3, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	715a      	strb	r2, [r3, #5]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	719a      	strb	r2, [r3, #6]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800cfa6:	f005 fbc7 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cfaa:	f005 fbad 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cfae:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	689b      	ldr	r3, [r3, #8]
 800cfb4:	b2db      	uxtb	r3, r3
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}

0800cfbe <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800cfbe:	b580      	push	{r7, lr}
 800cfc0:	b084      	sub	sp, #16
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800cfca:	f005 fbf3 	bl	80127b4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cfce:	f005 fb8f 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800cfd2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800cfdc:	701a      	strb	r2, [r3, #0]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	705a      	strb	r2, [r3, #1]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	709a      	strb	r2, [r3, #2]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2200      	movs	r2, #0
 800cfee:	f042 0201 	orr.w	r2, r2, #1
 800cff2:	711a      	strb	r2, [r3, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	715a      	strb	r2, [r3, #5]
 800cff8:	2200      	movs	r2, #0
 800cffa:	719a      	strb	r2, [r3, #6]
 800cffc:	2200      	movs	r2, #0
 800cffe:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800d000:	78fa      	ldrb	r2, [r7, #3]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d006:	f005 fb97 	bl	8012738 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d00a:	f005 fb7d 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d00e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	b2db      	uxtb	r3, r3
}
 800d016:	4618      	mov	r0, r3
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}

0800d01e <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 800d01e:	b580      	push	{r7, lr}
 800d020:	b084      	sub	sp, #16
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d026:	f005 fbc5 	bl	80127b4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d02a:	f005 fb61 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800d02e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2200      	movs	r2, #0
 800d034:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800d038:	701a      	strb	r2, [r3, #0]
 800d03a:	2200      	movs	r2, #0
 800d03c:	705a      	strb	r2, [r3, #1]
 800d03e:	2200      	movs	r2, #0
 800d040:	709a      	strb	r2, [r3, #2]
 800d042:	2200      	movs	r2, #0
 800d044:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2200      	movs	r2, #0
 800d04a:	711a      	strb	r2, [r3, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	715a      	strb	r2, [r3, #5]
 800d050:	2200      	movs	r2, #0
 800d052:	719a      	strb	r2, [r3, #6]
 800d054:	2200      	movs	r2, #0
 800d056:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d058:	f005 fb6e 	bl	8012738 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d05c:	f005 fb54 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d060:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	2b00      	cmp	r3, #0
 800d068:	bf14      	ite	ne
 800d06a:	2301      	movne	r3, #1
 800d06c:	2300      	moveq	r3, #0
 800d06e:	b2db      	uxtb	r3, r3
}
 800d070:	4618      	mov	r0, r3
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d080:	f005 fb98 	bl	80127b4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d084:	f005 fb34 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800d088:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2200      	movs	r2, #0
 800d08e:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 800d092:	701a      	strb	r2, [r3, #0]
 800d094:	2200      	movs	r2, #0
 800d096:	705a      	strb	r2, [r3, #1]
 800d098:	2200      	movs	r2, #0
 800d09a:	709a      	strb	r2, [r3, #2]
 800d09c:	2200      	movs	r2, #0
 800d09e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	711a      	strb	r2, [r3, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	715a      	strb	r2, [r3, #5]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	719a      	strb	r2, [r3, #6]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d0b2:	f005 fb41 	bl	8012738 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d0b6:	f005 fb27 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d0ba:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	689b      	ldr	r3, [r3, #8]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3710      	adds	r7, #16
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <otIp6GetMulticastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otNetifMulticastAddress *otIp6GetMulticastAddresses(otInstance *aInstance)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d0d0:	f005 fb70 	bl	80127b4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d0d4:	f005 fb0c 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800d0d8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_MULTICAST_ADDRESSES;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
 800d0e2:	701a      	strb	r2, [r3, #0]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	705a      	strb	r2, [r3, #1]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	709a      	strb	r2, [r3, #2]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	711a      	strb	r2, [r3, #4]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	715a      	strb	r2, [r3, #5]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	719a      	strb	r2, [r3, #6]
 800d0fe:	2200      	movs	r2, #0
 800d100:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d102:	f005 fb19 	bl	8012738 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d106:	f005 faff 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d10a:	60f8      	str	r0, [r7, #12]
  return (otNetifMulticastAddress *)p_ot_req->Data[0];
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	689b      	ldr	r3, [r3, #8]
}
 800d110:	4618      	mov	r0, r3
 800d112:	3710      	adds	r7, #16
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800d122:	f005 fb47 	bl	80127b4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d126:	f005 fae3 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800d12a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800d134:	701a      	strb	r2, [r3, #0]
 800d136:	2200      	movs	r2, #0
 800d138:	705a      	strb	r2, [r3, #1]
 800d13a:	2200      	movs	r2, #0
 800d13c:	709a      	strb	r2, [r3, #2]
 800d13e:	2200      	movs	r2, #0
 800d140:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	f042 0202 	orr.w	r2, r2, #2
 800d14a:	711a      	strb	r2, [r3, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	715a      	strb	r2, [r3, #5]
 800d150:	2200      	movs	r2, #0
 800d152:	719a      	strb	r2, [r3, #6]
 800d154:	2200      	movs	r2, #0
 800d156:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 800d15e:	683a      	ldr	r2, [r7, #0]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800d164:	f005 fae8 	bl	8012738 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d168:	f005 face 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d16c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	b2db      	uxtb	r3, r3
}
 800d174:	4618      	mov	r0, r3
 800d176:	3710      	adds	r7, #16
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	460b      	mov	r3, r1
 800d186:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800d188:	f005 fb14 	bl	80127b4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d18c:	f005 fab0 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800d190:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2200      	movs	r2, #0
 800d196:	f042 0208 	orr.w	r2, r2, #8
 800d19a:	701a      	strb	r2, [r3, #0]
 800d19c:	2200      	movs	r2, #0
 800d19e:	705a      	strb	r2, [r3, #1]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	709a      	strb	r2, [r3, #2]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f042 0201 	orr.w	r2, r2, #1
 800d1b0:	711a      	strb	r2, [r3, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	715a      	strb	r2, [r3, #5]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	719a      	strb	r2, [r3, #6]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800d1be:	78fa      	ldrb	r2, [r7, #3]
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d1c4:	f005 fab8 	bl	8012738 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d1c8:	f005 fa9e 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d1cc:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	b2db      	uxtb	r3, r3
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3710      	adds	r7, #16
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800d1e8:	f005 fae4 	bl	80127b4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d1ec:	f005 fa80 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800d1f0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f042 020f 	orr.w	r2, r2, #15
 800d1fa:	701a      	strb	r2, [r3, #0]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	705a      	strb	r2, [r3, #1]
 800d200:	2200      	movs	r2, #0
 800d202:	709a      	strb	r2, [r3, #2]
 800d204:	2200      	movs	r2, #0
 800d206:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2200      	movs	r2, #0
 800d20c:	f042 0201 	orr.w	r2, r2, #1
 800d210:	711a      	strb	r2, [r3, #4]
 800d212:	2200      	movs	r2, #0
 800d214:	715a      	strb	r2, [r3, #5]
 800d216:	2200      	movs	r2, #0
 800d218:	719a      	strb	r2, [r3, #6]
 800d21a:	2200      	movs	r2, #0
 800d21c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800d21e:	887a      	ldrh	r2, [r7, #2]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d224:	f005 fa88 	bl	8012738 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d228:	f005 fa6e 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d22c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	689b      	ldr	r3, [r3, #8]
 800d232:	b2db      	uxtb	r3, r3
}
 800d234:	4618      	mov	r0, r3
 800d236:	3710      	adds	r7, #16
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800d244:	f005 fab6 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d248:	f005 fa52 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800d24c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2200      	movs	r2, #0
 800d252:	f062 0246 	orn	r2, r2, #70	; 0x46
 800d256:	701a      	strb	r2, [r3, #0]
 800d258:	2200      	movs	r2, #0
 800d25a:	705a      	strb	r2, [r3, #1]
 800d25c:	2200      	movs	r2, #0
 800d25e:	709a      	strb	r2, [r3, #2]
 800d260:	2200      	movs	r2, #0
 800d262:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2200      	movs	r2, #0
 800d268:	f042 0201 	orr.w	r2, r2, #1
 800d26c:	711a      	strb	r2, [r3, #4]
 800d26e:	2200      	movs	r2, #0
 800d270:	715a      	strb	r2, [r3, #5]
 800d272:	2200      	movs	r2, #0
 800d274:	719a      	strb	r2, [r3, #6]
 800d276:	2200      	movs	r2, #0
 800d278:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800d280:	f005 fa5a 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d284:	f005 fa40 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d288:	60f8      	str	r0, [r7, #12]
}
 800d28a:	bf00      	nop
 800d28c:	3710      	adds	r7, #16
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b084      	sub	sp, #16
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800d29a:	f005 fa8b 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d29e:	f005 fa27 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800d2a2:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f062 0243 	orn	r2, r2, #67	; 0x43
 800d2ac:	701a      	strb	r2, [r3, #0]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	705a      	strb	r2, [r3, #1]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	709a      	strb	r2, [r3, #2]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	f042 0201 	orr.w	r2, r2, #1
 800d2c2:	711a      	strb	r2, [r3, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	715a      	strb	r2, [r3, #5]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	719a      	strb	r2, [r3, #6]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800d2d6:	f005 fa2f 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d2da:	f005 fa15 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d2de:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	b29b      	uxth	r3, r3
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3710      	adds	r7, #16
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}

0800d2ee <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800d2ee:	b580      	push	{r7, lr}
 800d2f0:	b086      	sub	sp, #24
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	60f8      	str	r0, [r7, #12]
 800d2f6:	60b9      	str	r1, [r7, #8]
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 800d2fc:	f005 fa5a 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d300:	f005 f9f6 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800d304:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	2200      	movs	r2, #0
 800d30a:	f062 023e 	orn	r2, r2, #62	; 0x3e
 800d30e:	701a      	strb	r2, [r3, #0]
 800d310:	2200      	movs	r2, #0
 800d312:	705a      	strb	r2, [r3, #1]
 800d314:	2200      	movs	r2, #0
 800d316:	709a      	strb	r2, [r3, #2]
 800d318:	2200      	movs	r2, #0
 800d31a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	2200      	movs	r2, #0
 800d320:	f042 0203 	orr.w	r2, r2, #3
 800d324:	711a      	strb	r2, [r3, #4]
 800d326:	2200      	movs	r2, #0
 800d328:	715a      	strb	r2, [r3, #5]
 800d32a:	2200      	movs	r2, #0
 800d32c:	719a      	strb	r2, [r3, #6]
 800d32e:	2200      	movs	r2, #0
 800d330:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 800d338:	68ba      	ldr	r2, [r7, #8]
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 800d33e:	88fa      	ldrh	r2, [r7, #6]
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800d344:	f005 f9f8 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d348:	f005 f9de 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d34c:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	b2db      	uxtb	r3, r3
}
 800d354:	4618      	mov	r0, r3
 800d356:	3718      	adds	r7, #24
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b086      	sub	sp, #24
 800d360:	af00      	add	r7, sp, #0
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	607a      	str	r2, [r7, #4]
 800d366:	461a      	mov	r2, r3
 800d368:	460b      	mov	r3, r1
 800d36a:	817b      	strh	r3, [r7, #10]
 800d36c:	4613      	mov	r3, r2
 800d36e:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 800d370:	f005 fa20 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d374:	f005 f9bc 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800d378:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	2200      	movs	r2, #0
 800d37e:	f062 023d 	orn	r2, r2, #61	; 0x3d
 800d382:	701a      	strb	r2, [r3, #0]
 800d384:	2200      	movs	r2, #0
 800d386:	705a      	strb	r2, [r3, #1]
 800d388:	2200      	movs	r2, #0
 800d38a:	709a      	strb	r2, [r3, #2]
 800d38c:	2200      	movs	r2, #0
 800d38e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	2200      	movs	r2, #0
 800d394:	f042 0204 	orr.w	r2, r2, #4
 800d398:	711a      	strb	r2, [r3, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	715a      	strb	r2, [r3, #5]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	719a      	strb	r2, [r3, #6]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d3a6:	68fa      	ldr	r2, [r7, #12]
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 800d3ac:	897a      	ldrh	r2, [r7, #10]
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 800d3b2:	687a      	ldr	r2, [r7, #4]
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 800d3b8:	893a      	ldrh	r2, [r7, #8]
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800d3be:	f005 f9bb 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d3c2:	f005 f9a1 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d3c6:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	689b      	ldr	r3, [r3, #8]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3718      	adds	r7, #24
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800d3d4:	b5b0      	push	{r4, r5, r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800d3de:	f005 f99f 	bl	8012720 <THREAD_Get_NotificationPayloadBuffer>
 800d3e2:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	3b01      	subs	r3, #1
 800d3ea:	2b17      	cmp	r3, #23
 800d3ec:	f200 81c3 	bhi.w	800d776 <OpenThread_CallBack_Processing+0x3a2>
 800d3f0:	a201      	add	r2, pc, #4	; (adr r2, 800d3f8 <OpenThread_CallBack_Processing+0x24>)
 800d3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f6:	bf00      	nop
 800d3f8:	0800d459 	.word	0x0800d459
 800d3fc:	0800d475 	.word	0x0800d475
 800d400:	0800d4d9 	.word	0x0800d4d9
 800d404:	0800d521 	.word	0x0800d521
 800d408:	0800d52d 	.word	0x0800d52d
 800d40c:	0800d54b 	.word	0x0800d54b
 800d410:	0800d569 	.word	0x0800d569
 800d414:	0800d587 	.word	0x0800d587
 800d418:	0800d5a5 	.word	0x0800d5a5
 800d41c:	0800d5c3 	.word	0x0800d5c3
 800d420:	0800d5e5 	.word	0x0800d5e5
 800d424:	0800d603 	.word	0x0800d603
 800d428:	0800d777 	.word	0x0800d777
 800d42c:	0800d629 	.word	0x0800d629
 800d430:	0800d65d 	.word	0x0800d65d
 800d434:	0800d685 	.word	0x0800d685
 800d438:	0800d6a3 	.word	0x0800d6a3
 800d43c:	0800d711 	.word	0x0800d711
 800d440:	0800d739 	.word	0x0800d739
 800d444:	0800d777 	.word	0x0800d777
 800d448:	0800d757 	.word	0x0800d757
 800d44c:	0800d777 	.word	0x0800d777
 800d450:	0800d777 	.word	0x0800d777
 800d454:	0800d4b1 	.word	0x0800d4b1
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 800d458:	4b9b      	ldr	r3, [pc, #620]	; (800d6c8 <OpenThread_CallBack_Processing+0x2f4>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f000 818d 	beq.w	800d77c <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800d462:	4b99      	ldr	r3, [pc, #612]	; (800d6c8 <OpenThread_CallBack_Processing+0x2f4>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	683a      	ldr	r2, [r7, #0]
 800d468:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 800d46a:	683a      	ldr	r2, [r7, #0]
 800d46c:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800d46e:	4611      	mov	r1, r2
 800d470:	4798      	blx	r3
        }
        break;
 800d472:	e183      	b.n	800d77c <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	689b      	ldr	r3, [r3, #8]
 800d478:	461a      	mov	r2, r3
 800d47a:	4b94      	ldr	r3, [pc, #592]	; (800d6cc <OpenThread_CallBack_Processing+0x2f8>)
 800d47c:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 800d47e:	4b93      	ldr	r3, [pc, #588]	; (800d6cc <OpenThread_CallBack_Processing+0x2f8>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	4a92      	ldr	r2, [pc, #584]	; (800d6d0 <OpenThread_CallBack_Processing+0x2fc>)
 800d486:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 800d488:	4b91      	ldr	r3, [pc, #580]	; (800d6d0 <OpenThread_CallBack_Processing+0x2fc>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f000 8177 	beq.w	800d780 <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d492:	4b8f      	ldr	r3, [pc, #572]	; (800d6d0 <OpenThread_CallBack_Processing+0x2fc>)
 800d494:	681c      	ldr	r4, [r3, #0]
 800d496:	4b8d      	ldr	r3, [pc, #564]	; (800d6cc <OpenThread_CallBack_Processing+0x2f8>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d4a0:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d4a6:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d4ac:	47a0      	blx	r4
        }
        break;
 800d4ae:	e167      	b.n	800d780 <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 800d4b0:	4b88      	ldr	r3, [pc, #544]	; (800d6d4 <OpenThread_CallBack_Processing+0x300>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	f000 8165 	beq.w	800d784 <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d4ba:	4b86      	ldr	r3, [pc, #536]	; (800d6d4 <OpenThread_CallBack_Processing+0x300>)
 800d4bc:	681c      	ldr	r4, [r3, #0]
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d4c8:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d4ce:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d4d4:	47a0      	blx	r4
        }
        break;
 800d4d6:	e155      	b.n	800d784 <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	689b      	ldr	r3, [r3, #8]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	4b7e      	ldr	r3, [pc, #504]	; (800d6d8 <OpenThread_CallBack_Processing+0x304>)
 800d4e0:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800d4e2:	4b7d      	ldr	r3, [pc, #500]	; (800d6d8 <OpenThread_CallBack_Processing+0x304>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	4a7c      	ldr	r2, [pc, #496]	; (800d6dc <OpenThread_CallBack_Processing+0x308>)
 800d4ea:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 800d4ec:	4b7b      	ldr	r3, [pc, #492]	; (800d6dc <OpenThread_CallBack_Processing+0x308>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	f000 8149 	beq.w	800d788 <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d4f6:	4b79      	ldr	r3, [pc, #484]	; (800d6dc <OpenThread_CallBack_Processing+0x308>)
 800d4f8:	681c      	ldr	r4, [r3, #0]
 800d4fa:	4b77      	ldr	r3, [pc, #476]	; (800d6d8 <OpenThread_CallBack_Processing+0x304>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d504:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d50a:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d510:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d516:	b2db      	uxtb	r3, r3
 800d518:	9300      	str	r3, [sp, #0]
 800d51a:	462b      	mov	r3, r5
 800d51c:	47a0      	blx	r4
        }
        break;
 800d51e:	e133      	b.n	800d788 <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 800d520:	2001      	movs	r0, #1
 800d522:	f7fe fd00 	bl	800bf26 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800d526:	f7f7 f8c8 	bl	80046ba <HAL_NVIC_SystemReset>
        break;
 800d52a:	e14c      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 800d52c:	4b6c      	ldr	r3, [pc, #432]	; (800d6e0 <OpenThread_CallBack_Processing+0x30c>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	f000 812b 	beq.w	800d78c <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800d536:	4b6a      	ldr	r3, [pc, #424]	; (800d6e0 <OpenThread_CallBack_Processing+0x30c>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	683a      	ldr	r2, [r7, #0]
 800d53c:	6892      	ldr	r2, [r2, #8]
 800d53e:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d540:	683a      	ldr	r2, [r7, #0]
 800d542:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800d544:	4611      	mov	r1, r2
 800d546:	4798      	blx	r3
        }
        break;
 800d548:	e120      	b.n	800d78c <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 800d54a:	4b66      	ldr	r3, [pc, #408]	; (800d6e4 <OpenThread_CallBack_Processing+0x310>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	f000 811e 	beq.w	800d790 <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800d554:	4b63      	ldr	r3, [pc, #396]	; (800d6e4 <OpenThread_CallBack_Processing+0x310>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	683a      	ldr	r2, [r7, #0]
 800d55a:	6892      	ldr	r2, [r2, #8]
 800d55c:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 800d55e:	683a      	ldr	r2, [r7, #0]
 800d560:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800d562:	2000      	movs	r0, #0
 800d564:	4798      	blx	r3
        }
        break;
 800d566:	e113      	b.n	800d790 <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 800d568:	4b5f      	ldr	r3, [pc, #380]	; (800d6e8 <OpenThread_CallBack_Processing+0x314>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f000 8111 	beq.w	800d794 <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800d572:	4b5d      	ldr	r3, [pc, #372]	; (800d6e8 <OpenThread_CallBack_Processing+0x314>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	683a      	ldr	r2, [r7, #0]
 800d578:	6892      	ldr	r2, [r2, #8]
 800d57a:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d57c:	683a      	ldr	r2, [r7, #0]
 800d57e:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800d580:	4611      	mov	r1, r2
 800d582:	4798      	blx	r3
        }
        break;
 800d584:	e106      	b.n	800d794 <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 800d586:	4b59      	ldr	r3, [pc, #356]	; (800d6ec <OpenThread_CallBack_Processing+0x318>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	f000 8104 	beq.w	800d798 <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800d590:	4b56      	ldr	r3, [pc, #344]	; (800d6ec <OpenThread_CallBack_Processing+0x318>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	683a      	ldr	r2, [r7, #0]
 800d596:	6892      	ldr	r2, [r2, #8]
 800d598:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d59a:	683a      	ldr	r2, [r7, #0]
 800d59c:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800d59e:	4611      	mov	r1, r2
 800d5a0:	4798      	blx	r3
        }
        break;
 800d5a2:	e0f9      	b.n	800d798 <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 800d5a4:	4b52      	ldr	r3, [pc, #328]	; (800d6f0 <OpenThread_CallBack_Processing+0x31c>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	f000 80f7 	beq.w	800d79c <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800d5ae:	4b50      	ldr	r3, [pc, #320]	; (800d6f0 <OpenThread_CallBack_Processing+0x31c>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	6892      	ldr	r2, [r2, #8]
 800d5b6:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d5b8:	683a      	ldr	r2, [r7, #0]
 800d5ba:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800d5bc:	4611      	mov	r1, r2
 800d5be:	4798      	blx	r3
        }
        break;
 800d5c0:	e0ec      	b.n	800d79c <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 800d5c2:	4b4c      	ldr	r3, [pc, #304]	; (800d6f4 <OpenThread_CallBack_Processing+0x320>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	f000 80ea 	beq.w	800d7a0 <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800d5cc:	4b49      	ldr	r3, [pc, #292]	; (800d6f4 <OpenThread_CallBack_Processing+0x320>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	683a      	ldr	r2, [r7, #0]
 800d5d2:	6892      	ldr	r2, [r2, #8]
 800d5d4:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 800d5d6:	683a      	ldr	r2, [r7, #0]
 800d5d8:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800d5da:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 800d5dc:	683a      	ldr	r2, [r7, #0]
 800d5de:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800d5e0:	4798      	blx	r3
        }
        break;
 800d5e2:	e0dd      	b.n	800d7a0 <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 800d5e4:	4b44      	ldr	r3, [pc, #272]	; (800d6f8 <OpenThread_CallBack_Processing+0x324>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	f000 80db 	beq.w	800d7a4 <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800d5ee:	4b42      	ldr	r3, [pc, #264]	; (800d6f8 <OpenThread_CallBack_Processing+0x324>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	683a      	ldr	r2, [r7, #0]
 800d5f4:	6892      	ldr	r2, [r2, #8]
 800d5f6:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 800d5f8:	683a      	ldr	r2, [r7, #0]
 800d5fa:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800d5fc:	4611      	mov	r1, r2
 800d5fe:	4798      	blx	r3
        }
        break;
 800d600:	e0d0      	b.n	800d7a4 <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 800d602:	4b3e      	ldr	r3, [pc, #248]	; (800d6fc <OpenThread_CallBack_Processing+0x328>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	f000 80ce 	beq.w	800d7a8 <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d60c:	4b3b      	ldr	r3, [pc, #236]	; (800d6fc <OpenThread_CallBack_Processing+0x328>)
 800d60e:	681c      	ldr	r4, [r3, #0]
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d618:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d61e:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d624:	47a0      	blx	r4
        }
        break;
 800d626:	e0bf      	b.n	800d7a8 <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 800d628:	4b35      	ldr	r3, [pc, #212]	; (800d700 <OpenThread_CallBack_Processing+0x32c>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f000 80bd 	beq.w	800d7ac <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d632:	4b33      	ldr	r3, [pc, #204]	; (800d700 <OpenThread_CallBack_Processing+0x32c>)
 800d634:	681c      	ldr	r4, [r3, #0]
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d640:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d646:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d650:	b2db      	uxtb	r3, r3
 800d652:	9300      	str	r3, [sp, #0]
 800d654:	4613      	mov	r3, r2
 800d656:	462a      	mov	r2, r5
 800d658:	47a0      	blx	r4
        }
        break;
 800d65a:	e0a7      	b.n	800d7ac <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 800d65c:	4b29      	ldr	r3, [pc, #164]	; (800d704 <OpenThread_CallBack_Processing+0x330>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	f000 80a5 	beq.w	800d7b0 <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d666:	4b27      	ldr	r3, [pc, #156]	; (800d704 <OpenThread_CallBack_Processing+0x330>)
 800d668:	681c      	ldr	r4, [r3, #0]
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	689b      	ldr	r3, [r3, #8]
 800d66e:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d674:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d67a:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d680:	47a0      	blx	r4
        }
        break;
 800d682:	e095      	b.n	800d7b0 <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 800d684:	4b20      	ldr	r3, [pc, #128]	; (800d708 <OpenThread_CallBack_Processing+0x334>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	f000 8093 	beq.w	800d7b4 <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 800d68e:	4b1e      	ldr	r3, [pc, #120]	; (800d708 <OpenThread_CallBack_Processing+0x334>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	683a      	ldr	r2, [r7, #0]
 800d694:	6892      	ldr	r2, [r2, #8]
 800d696:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 800d698:	683a      	ldr	r2, [r7, #0]
 800d69a:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 800d69c:	4611      	mov	r1, r2
 800d69e:	4798      	blx	r3
        }
        break;
 800d6a0:	e088      	b.n	800d7b4 <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 800d6a2:	4b1a      	ldr	r3, [pc, #104]	; (800d70c <OpenThread_CallBack_Processing+0x338>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	f000 8086 	beq.w	800d7b8 <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d6ac:	4b17      	ldr	r3, [pc, #92]	; (800d70c <OpenThread_CallBack_Processing+0x338>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	683a      	ldr	r2, [r7, #0]
 800d6b2:	6892      	ldr	r2, [r2, #8]
 800d6b4:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 800d6b6:	683a      	ldr	r2, [r7, #0]
 800d6b8:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d6ba:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 800d6bc:	683a      	ldr	r2, [r7, #0]
 800d6be:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d6c0:	b2d2      	uxtb	r2, r2
 800d6c2:	4798      	blx	r3
        }
        break;
 800d6c4:	e078      	b.n	800d7b8 <OpenThread_CallBack_Processing+0x3e4>
 800d6c6:	bf00      	nop
 800d6c8:	20000358 	.word	0x20000358
 800d6cc:	20004fc0 	.word	0x20004fc0
 800d6d0:	20000398 	.word	0x20000398
 800d6d4:	2000039c 	.word	0x2000039c
 800d6d8:	20004fbc 	.word	0x20004fbc
 800d6dc:	200003a0 	.word	0x200003a0
 800d6e0:	20000360 	.word	0x20000360
 800d6e4:	2000035c 	.word	0x2000035c
 800d6e8:	20000364 	.word	0x20000364
 800d6ec:	20000368 	.word	0x20000368
 800d6f0:	2000036c 	.word	0x2000036c
 800d6f4:	20000370 	.word	0x20000370
 800d6f8:	20000374 	.word	0x20000374
 800d6fc:	20000378 	.word	0x20000378
 800d700:	2000037c 	.word	0x2000037c
 800d704:	20000380 	.word	0x20000380
 800d708:	20000384 	.word	0x20000384
 800d70c:	20000388 	.word	0x20000388
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 800d710:	4b30      	ldr	r3, [pc, #192]	; (800d7d4 <OpenThread_CallBack_Processing+0x400>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d051      	beq.n	800d7bc <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d718:	4b2e      	ldr	r3, [pc, #184]	; (800d7d4 <OpenThread_CallBack_Processing+0x400>)
 800d71a:	681c      	ldr	r4, [r3, #0]
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d726:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d72c:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d732:	b2db      	uxtb	r3, r3
 800d734:	47a0      	blx	r4
        }
        break;
 800d736:	e041      	b.n	800d7bc <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 800d738:	4b27      	ldr	r3, [pc, #156]	; (800d7d8 <OpenThread_CallBack_Processing+0x404>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d03f      	beq.n	800d7c0 <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800d740:	4b25      	ldr	r3, [pc, #148]	; (800d7d8 <OpenThread_CallBack_Processing+0x404>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	683a      	ldr	r2, [r7, #0]
 800d746:	6892      	ldr	r2, [r2, #8]
 800d748:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 800d74a:	683a      	ldr	r2, [r7, #0]
 800d74c:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800d74e:	b252      	sxtb	r2, r2
 800d750:	4611      	mov	r1, r2
 800d752:	4798      	blx	r3
        }
        break;
 800d754:	e034      	b.n	800d7c0 <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 800d756:	4b21      	ldr	r3, [pc, #132]	; (800d7dc <OpenThread_CallBack_Processing+0x408>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d032      	beq.n	800d7c4 <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 800d75e:	4b1f      	ldr	r3, [pc, #124]	; (800d7dc <OpenThread_CallBack_Processing+0x408>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	683a      	ldr	r2, [r7, #0]
 800d764:	6892      	ldr	r2, [r2, #8]
 800d766:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 800d768:	683a      	ldr	r2, [r7, #0]
 800d76a:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800d76c:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 800d76e:	683a      	ldr	r2, [r7, #0]
 800d770:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800d772:	4798      	blx	r3
        }
        break;
 800d774:	e026      	b.n	800d7c4 <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 800d776:	2301      	movs	r3, #1
 800d778:	71fb      	strb	r3, [r7, #7]
        break;
 800d77a:	e024      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d77c:	bf00      	nop
 800d77e:	e022      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d780:	bf00      	nop
 800d782:	e020      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d784:	bf00      	nop
 800d786:	e01e      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d788:	bf00      	nop
 800d78a:	e01c      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d78c:	bf00      	nop
 800d78e:	e01a      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d790:	bf00      	nop
 800d792:	e018      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d794:	bf00      	nop
 800d796:	e016      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d798:	bf00      	nop
 800d79a:	e014      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d79c:	bf00      	nop
 800d79e:	e012      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d7a0:	bf00      	nop
 800d7a2:	e010      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d7a4:	bf00      	nop
 800d7a6:	e00e      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d7a8:	bf00      	nop
 800d7aa:	e00c      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d7ac:	bf00      	nop
 800d7ae:	e00a      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d7b0:	bf00      	nop
 800d7b2:	e008      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d7b4:	bf00      	nop
 800d7b6:	e006      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d7b8:	bf00      	nop
 800d7ba:	e004      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d7bc:	bf00      	nop
 800d7be:	e002      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d7c0:	bf00      	nop
 800d7c2:	e000      	b.n	800d7c6 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d7c4:	bf00      	nop
    }

    TL_THREAD_SendAck();
 800d7c6:	f7fe fed9 	bl	800c57c <TL_THREAD_SendAck>
    return status;
 800d7ca:	79fb      	ldrb	r3, [r7, #7]

}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3708      	adds	r7, #8
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bdb0      	pop	{r4, r5, r7, pc}
 800d7d4:	2000038c 	.word	0x2000038c
 800d7d8:	20000390 	.word	0x20000390
 800d7dc:	20000394 	.word	0x20000394

0800d7e0 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800d7ec:	f004 ffe2 	bl	80127b4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d7f0:	f004 ff7e 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800d7f4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 800d7fe:	701a      	strb	r2, [r3, #0]
 800d800:	2200      	movs	r2, #0
 800d802:	f042 0201 	orr.w	r2, r2, #1
 800d806:	705a      	strb	r2, [r3, #1]
 800d808:	2200      	movs	r2, #0
 800d80a:	709a      	strb	r2, [r3, #2]
 800d80c:	2200      	movs	r2, #0
 800d80e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2200      	movs	r2, #0
 800d814:	f042 0201 	orr.w	r2, r2, #1
 800d818:	711a      	strb	r2, [r3, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	715a      	strb	r2, [r3, #5]
 800d81e:	2200      	movs	r2, #0
 800d820:	719a      	strb	r2, [r3, #6]
 800d822:	2200      	movs	r2, #0
 800d824:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 800d826:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800d82e:	f004 ff83 	bl	8012738 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d832:	f004 ff69 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d836:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	689b      	ldr	r3, [r3, #8]
 800d83c:	b2db      	uxtb	r3, r3
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3710      	adds	r7, #16
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}

0800d846 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800d846:	b580      	push	{r7, lr}
 800d848:	b084      	sub	sp, #16
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
 800d84e:	460b      	mov	r3, r1
 800d850:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800d852:	f004 ffaf 	bl	80127b4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d856:	f004 ff4b 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800d85a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2200      	movs	r2, #0
 800d860:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 800d864:	701a      	strb	r2, [r3, #0]
 800d866:	2200      	movs	r2, #0
 800d868:	705a      	strb	r2, [r3, #1]
 800d86a:	2200      	movs	r2, #0
 800d86c:	709a      	strb	r2, [r3, #2]
 800d86e:	2200      	movs	r2, #0
 800d870:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	f042 0201 	orr.w	r2, r2, #1
 800d87a:	711a      	strb	r2, [r3, #4]
 800d87c:	2200      	movs	r2, #0
 800d87e:	715a      	strb	r2, [r3, #5]
 800d880:	2200      	movs	r2, #0
 800d882:	719a      	strb	r2, [r3, #6]
 800d884:	2200      	movs	r2, #0
 800d886:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800d888:	78fa      	ldrb	r2, [r7, #3]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d88e:	f004 ff53 	bl	8012738 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d892:	f004 ff39 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d896:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	b2db      	uxtb	r3, r3
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <otThreadSetChildTimeout>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI void OTCALL otThreadSetChildTimeout(otInstance *aInstance, uint32_t aTimeout)
{
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b084      	sub	sp, #16
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
 800d8ae:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800d8b0:	f004 ff80 	bl	80127b4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d8b4:	f004 ff1c 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800d8b8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_CHILD_TIMEOUT;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 800d8c2:	701a      	strb	r2, [r3, #0]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	705a      	strb	r2, [r3, #1]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	709a      	strb	r2, [r3, #2]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f042 0201 	orr.w	r2, r2, #1
 800d8d8:	711a      	strb	r2, [r3, #4]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	715a      	strb	r2, [r3, #5]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	719a      	strb	r2, [r3, #6]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aTimeout;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	683a      	ldr	r2, [r7, #0]
 800d8ea:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d8ec:	f004 ff24 	bl	8012738 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d8f0:	f004 ff0a 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d8f4:	60f8      	str	r0, [r7, #12]
}
 800d8f6:	bf00      	nop
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <otThreadGetMeshLocalEid>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b084      	sub	sp, #16
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d906:	f004 ff55 	bl	80127b4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d90a:	f004 fef1 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800d90e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2200      	movs	r2, #0
 800d914:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 800d918:	701a      	strb	r2, [r3, #0]
 800d91a:	2200      	movs	r2, #0
 800d91c:	705a      	strb	r2, [r3, #1]
 800d91e:	2200      	movs	r2, #0
 800d920:	709a      	strb	r2, [r3, #2]
 800d922:	2200      	movs	r2, #0
 800d924:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2200      	movs	r2, #0
 800d92a:	711a      	strb	r2, [r3, #4]
 800d92c:	2200      	movs	r2, #0
 800d92e:	715a      	strb	r2, [r3, #5]
 800d930:	2200      	movs	r2, #0
 800d932:	719a      	strb	r2, [r3, #6]
 800d934:	2200      	movs	r2, #0
 800d936:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d938:	f004 fefe 	bl	8012738 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d93c:	f004 fee4 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d940:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	689b      	ldr	r3, [r3, #8]
}
 800d946:	4618      	mov	r0, r3
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <otThreadGetLinkLocalIp6Address>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otIp6Address *otThreadGetLinkLocalIp6Address(otInstance *aInstance)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b084      	sub	sp, #16
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d956:	f004 ff2d 	bl	80127b4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d95a:	f004 fec9 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800d95e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_LINK_LOCAL_IP6_ADDRESS;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2200      	movs	r2, #0
 800d964:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 800d968:	701a      	strb	r2, [r3, #0]
 800d96a:	2200      	movs	r2, #0
 800d96c:	705a      	strb	r2, [r3, #1]
 800d96e:	2200      	movs	r2, #0
 800d970:	709a      	strb	r2, [r3, #2]
 800d972:	2200      	movs	r2, #0
 800d974:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2200      	movs	r2, #0
 800d97a:	711a      	strb	r2, [r3, #4]
 800d97c:	2200      	movs	r2, #0
 800d97e:	715a      	strb	r2, [r3, #5]
 800d980:	2200      	movs	r2, #0
 800d982:	719a      	strb	r2, [r3, #6]
 800d984:	2200      	movs	r2, #0
 800d986:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d988:	f004 fed6 	bl	8012738 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d98c:	f004 febc 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d990:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	689b      	ldr	r3, [r3, #8]
}
 800d996:	4618      	mov	r0, r3
 800d998:	3710      	adds	r7, #16
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}

0800d99e <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b084      	sub	sp, #16
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
 800d9a6:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800d9a8:	f004 ff04 	bl	80127b4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d9ac:	f004 fea0 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800d9b0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 800d9ba:	701a      	strb	r2, [r3, #0]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	705a      	strb	r2, [r3, #1]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	709a      	strb	r2, [r3, #2]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f042 0201 	orr.w	r2, r2, #1
 800d9d0:	711a      	strb	r2, [r3, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	715a      	strb	r2, [r3, #5]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	719a      	strb	r2, [r3, #6]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 800d9de:	683a      	ldr	r2, [r7, #0]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d9e4:	f004 fea8 	bl	8012738 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d9e8:	f004 fe8e 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d9ec:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	689b      	ldr	r3, [r3, #8]
 800d9f2:	b2db      	uxtb	r3, r3
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3710      	adds	r7, #16
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800da04:	f004 fed6 	bl	80127b4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800da08:	f004 fe72 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800da0c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2200      	movs	r2, #0
 800da12:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 800da16:	701a      	strb	r2, [r3, #0]
 800da18:	2200      	movs	r2, #0
 800da1a:	705a      	strb	r2, [r3, #1]
 800da1c:	2200      	movs	r2, #0
 800da1e:	709a      	strb	r2, [r3, #2]
 800da20:	2200      	movs	r2, #0
 800da22:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2200      	movs	r2, #0
 800da28:	711a      	strb	r2, [r3, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	715a      	strb	r2, [r3, #5]
 800da2e:	2200      	movs	r2, #0
 800da30:	719a      	strb	r2, [r3, #6]
 800da32:	2200      	movs	r2, #0
 800da34:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800da36:	f004 fe7f 	bl	8012738 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800da3a:	f004 fe65 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800da3e:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	b2db      	uxtb	r3, r3
}
 800da46:	4618      	mov	r0, r3
 800da48:	3710      	adds	r7, #16
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}

0800da4e <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 800da4e:	b580      	push	{r7, lr}
 800da50:	b084      	sub	sp, #16
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800da56:	f004 fead 	bl	80127b4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800da5a:	f004 fe49 	bl	80126f0 <THREAD_Get_OTCmdPayloadBuffer>
 800da5e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2200      	movs	r2, #0
 800da64:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800da68:	701a      	strb	r2, [r3, #0]
 800da6a:	2200      	movs	r2, #0
 800da6c:	705a      	strb	r2, [r3, #1]
 800da6e:	2200      	movs	r2, #0
 800da70:	709a      	strb	r2, [r3, #2]
 800da72:	2200      	movs	r2, #0
 800da74:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2200      	movs	r2, #0
 800da7a:	711a      	strb	r2, [r3, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	715a      	strb	r2, [r3, #5]
 800da80:	2200      	movs	r2, #0
 800da82:	719a      	strb	r2, [r3, #6]
 800da84:	2200      	movs	r2, #0
 800da86:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800da88:	f004 fe56 	bl	8012738 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800da8c:	f004 fe3c 	bl	8012708 <THREAD_Get_OTCmdRspPayloadBuffer>
 800da90:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	689b      	ldr	r3, [r3, #8]
 800da96:	b29b      	uxth	r3, r3
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3710      	adds	r7, #16
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	687a      	ldr	r2, [r7, #4]
 800dab2:	605a      	str	r2, [r3, #4]
}
 800dab4:	bf00      	nop
 800dab6:	370c      	adds	r7, #12
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr

0800dac0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b087      	sub	sp, #28
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dac8:	f3ef 8310 	mrs	r3, PRIMASK
 800dacc:	60fb      	str	r3, [r7, #12]
  return(result);
 800dace:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800dad2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d102      	bne.n	800dae4 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800dade:	2301      	movs	r3, #1
 800dae0:	75fb      	strb	r3, [r7, #23]
 800dae2:	e001      	b.n	800dae8 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800dae4:	2300      	movs	r3, #0
 800dae6:	75fb      	strb	r3, [r7, #23]
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800daf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	371c      	adds	r7, #28
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800db00:	b480      	push	{r7}
 800db02:	b087      	sub	sp, #28
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db0a:	f3ef 8310 	mrs	r3, PRIMASK
 800db0e:	60fb      	str	r3, [r7, #12]
  return(result);
 800db10:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800db12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800db14:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	683a      	ldr	r2, [r7, #0]
 800db28:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	683a      	ldr	r2, [r7, #0]
 800db30:	605a      	str	r2, [r3, #4]
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800db3c:	bf00      	nop
 800db3e:	371c      	adds	r7, #28
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr

0800db48 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800db48:	b480      	push	{r7}
 800db4a:	b087      	sub	sp, #28
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db52:	f3ef 8310 	mrs	r3, PRIMASK
 800db56:	60fb      	str	r3, [r7, #12]
  return(result);
 800db58:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800db5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800db5c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	685a      	ldr	r2, [r3, #4]
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	683a      	ldr	r2, [r7, #0]
 800db70:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	685b      	ldr	r3, [r3, #4]
 800db76:	683a      	ldr	r2, [r7, #0]
 800db78:	601a      	str	r2, [r3, #0]
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800db84:	bf00      	nop
 800db86:	371c      	adds	r7, #28
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr

0800db90 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800db90:	b480      	push	{r7}
 800db92:	b087      	sub	sp, #28
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db98:	f3ef 8310 	mrs	r3, PRIMASK
 800db9c:	60fb      	str	r3, [r7, #12]
  return(result);
 800db9e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dba0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dba2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	6812      	ldr	r2, [r2, #0]
 800dbac:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	6852      	ldr	r2, [r2, #4]
 800dbb6:	605a      	str	r2, [r3, #4]
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800dbc2:	bf00      	nop
 800dbc4:	371c      	adds	r7, #28
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr

0800dbce <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b086      	sub	sp, #24
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	6078      	str	r0, [r7, #4]
 800dbd6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbd8:	f3ef 8310 	mrs	r3, PRIMASK
 800dbdc:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbde:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dbe0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dbe2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7ff ffcd 	bl	800db90 <LST_remove_node>
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800dc00:	bf00      	nop
 800dc02:	3718      	adds	r7, #24
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dc08:	b480      	push	{r7}
 800dc0a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800dc0c:	bf00      	nop
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr
	...

0800dc18 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dc18:	b480      	push	{r7}
 800dc1a:	b085      	sub	sp, #20
 800dc1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc1e:	f3ef 8305 	mrs	r3, IPSR
 800dc22:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d10f      	bne.n	800dc4a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc2a:	f3ef 8310 	mrs	r3, PRIMASK
 800dc2e:	607b      	str	r3, [r7, #4]
  return(result);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d105      	bne.n	800dc42 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc36:	f3ef 8311 	mrs	r3, BASEPRI
 800dc3a:	603b      	str	r3, [r7, #0]
  return(result);
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d007      	beq.n	800dc52 <osKernelInitialize+0x3a>
 800dc42:	4b0e      	ldr	r3, [pc, #56]	; (800dc7c <osKernelInitialize+0x64>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b02      	cmp	r3, #2
 800dc48:	d103      	bne.n	800dc52 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800dc4a:	f06f 0305 	mvn.w	r3, #5
 800dc4e:	60fb      	str	r3, [r7, #12]
 800dc50:	e00c      	b.n	800dc6c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dc52:	4b0a      	ldr	r3, [pc, #40]	; (800dc7c <osKernelInitialize+0x64>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d105      	bne.n	800dc66 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dc5a:	4b08      	ldr	r3, [pc, #32]	; (800dc7c <osKernelInitialize+0x64>)
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dc60:	2300      	movs	r3, #0
 800dc62:	60fb      	str	r3, [r7, #12]
 800dc64:	e002      	b.n	800dc6c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800dc66:	f04f 33ff 	mov.w	r3, #4294967295
 800dc6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3714      	adds	r7, #20
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	200003a4 	.word	0x200003a4

0800dc80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc86:	f3ef 8305 	mrs	r3, IPSR
 800dc8a:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d10f      	bne.n	800dcb2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc92:	f3ef 8310 	mrs	r3, PRIMASK
 800dc96:	607b      	str	r3, [r7, #4]
  return(result);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d105      	bne.n	800dcaa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc9e:	f3ef 8311 	mrs	r3, BASEPRI
 800dca2:	603b      	str	r3, [r7, #0]
  return(result);
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d007      	beq.n	800dcba <osKernelStart+0x3a>
 800dcaa:	4b0f      	ldr	r3, [pc, #60]	; (800dce8 <osKernelStart+0x68>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	2b02      	cmp	r3, #2
 800dcb0:	d103      	bne.n	800dcba <osKernelStart+0x3a>
    stat = osErrorISR;
 800dcb2:	f06f 0305 	mvn.w	r3, #5
 800dcb6:	60fb      	str	r3, [r7, #12]
 800dcb8:	e010      	b.n	800dcdc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dcba:	4b0b      	ldr	r3, [pc, #44]	; (800dce8 <osKernelStart+0x68>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d109      	bne.n	800dcd6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dcc2:	f7ff ffa1 	bl	800dc08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dcc6:	4b08      	ldr	r3, [pc, #32]	; (800dce8 <osKernelStart+0x68>)
 800dcc8:	2202      	movs	r2, #2
 800dcca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dccc:	f002 f944 	bl	800ff58 <vTaskStartScheduler>
      stat = osOK;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	60fb      	str	r3, [r7, #12]
 800dcd4:	e002      	b.n	800dcdc <osKernelStart+0x5c>
    } else {
      stat = osError;
 800dcd6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	200003a4 	.word	0x200003a4

0800dcec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b090      	sub	sp, #64	; 0x40
 800dcf0:	af04      	add	r7, sp, #16
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcfc:	f3ef 8305 	mrs	r3, IPSR
 800dd00:	61fb      	str	r3, [r7, #28]
  return(result);
 800dd02:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	f040 8090 	bne.w	800de2a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd0a:	f3ef 8310 	mrs	r3, PRIMASK
 800dd0e:	61bb      	str	r3, [r7, #24]
  return(result);
 800dd10:	69bb      	ldr	r3, [r7, #24]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d105      	bne.n	800dd22 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd16:	f3ef 8311 	mrs	r3, BASEPRI
 800dd1a:	617b      	str	r3, [r7, #20]
  return(result);
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d003      	beq.n	800dd2a <osThreadNew+0x3e>
 800dd22:	4b44      	ldr	r3, [pc, #272]	; (800de34 <osThreadNew+0x148>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b02      	cmp	r3, #2
 800dd28:	d07f      	beq.n	800de2a <osThreadNew+0x13e>
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d07c      	beq.n	800de2a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800dd30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd34:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800dd36:	2318      	movs	r3, #24
 800dd38:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800dd3e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd42:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d045      	beq.n	800ddd6 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d002      	beq.n	800dd58 <osThreadNew+0x6c>
        name = attr->name;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	699b      	ldr	r3, [r3, #24]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d002      	beq.n	800dd66 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	699b      	ldr	r3, [r3, #24]
 800dd64:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d008      	beq.n	800dd7e <osThreadNew+0x92>
 800dd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6e:	2b38      	cmp	r3, #56	; 0x38
 800dd70:	d805      	bhi.n	800dd7e <osThreadNew+0x92>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	f003 0301 	and.w	r3, r3, #1
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d001      	beq.n	800dd82 <osThreadNew+0x96>
        return (NULL);
 800dd7e:	2300      	movs	r3, #0
 800dd80:	e054      	b.n	800de2c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	695b      	ldr	r3, [r3, #20]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d003      	beq.n	800dd92 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	695b      	ldr	r3, [r3, #20]
 800dd8e:	089b      	lsrs	r3, r3, #2
 800dd90:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d00e      	beq.n	800ddb8 <osThreadNew+0xcc>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	2b5b      	cmp	r3, #91	; 0x5b
 800dda0:	d90a      	bls.n	800ddb8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d006      	beq.n	800ddb8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	695b      	ldr	r3, [r3, #20]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d002      	beq.n	800ddb8 <osThreadNew+0xcc>
        mem = 1;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	623b      	str	r3, [r7, #32]
 800ddb6:	e010      	b.n	800ddda <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	689b      	ldr	r3, [r3, #8]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d10c      	bne.n	800ddda <osThreadNew+0xee>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	68db      	ldr	r3, [r3, #12]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d108      	bne.n	800ddda <osThreadNew+0xee>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	691b      	ldr	r3, [r3, #16]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d104      	bne.n	800ddda <osThreadNew+0xee>
          mem = 0;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	623b      	str	r3, [r7, #32]
 800ddd4:	e001      	b.n	800ddda <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ddda:	6a3b      	ldr	r3, [r7, #32]
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	d110      	bne.n	800de02 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dde8:	9202      	str	r2, [sp, #8]
 800ddea:	9301      	str	r3, [sp, #4]
 800ddec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddee:	9300      	str	r3, [sp, #0]
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddf6:	68f8      	ldr	r0, [r7, #12]
 800ddf8:	f001 fedc 	bl	800fbb4 <xTaskCreateStatic>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	613b      	str	r3, [r7, #16]
 800de00:	e013      	b.n	800de2a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800de02:	6a3b      	ldr	r3, [r7, #32]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d110      	bne.n	800de2a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800de08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	f107 0310 	add.w	r3, r7, #16
 800de10:	9301      	str	r3, [sp, #4]
 800de12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de14:	9300      	str	r3, [sp, #0]
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f001 ff24 	bl	800fc68 <xTaskCreate>
 800de20:	4603      	mov	r3, r0
 800de22:	2b01      	cmp	r3, #1
 800de24:	d001      	beq.n	800de2a <osThreadNew+0x13e>
          hTask = NULL;
 800de26:	2300      	movs	r3, #0
 800de28:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800de2a:	693b      	ldr	r3, [r7, #16]
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3730      	adds	r7, #48	; 0x30
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	200003a4 	.word	0x200003a4

0800de38 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800de38:	b580      	push	{r7, lr}
 800de3a:	b08a      	sub	sp, #40	; 0x28
 800de3c:	af02      	add	r7, sp, #8
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800de46:	69fb      	ldr	r3, [r7, #28]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d002      	beq.n	800de52 <osThreadFlagsSet+0x1a>
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	da03      	bge.n	800de5a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800de52:	f06f 0303 	mvn.w	r3, #3
 800de56:	60fb      	str	r3, [r7, #12]
 800de58:	e046      	b.n	800dee8 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800de5a:	f04f 33ff 	mov.w	r3, #4294967295
 800de5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de60:	f3ef 8305 	mrs	r3, IPSR
 800de64:	61bb      	str	r3, [r7, #24]
  return(result);
 800de66:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d10f      	bne.n	800de8c <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de6c:	f3ef 8310 	mrs	r3, PRIMASK
 800de70:	617b      	str	r3, [r7, #20]
  return(result);
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d105      	bne.n	800de84 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de78:	f3ef 8311 	mrs	r3, BASEPRI
 800de7c:	613b      	str	r3, [r7, #16]
  return(result);
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d024      	beq.n	800dece <osThreadFlagsSet+0x96>
 800de84:	4b1b      	ldr	r3, [pc, #108]	; (800def4 <osThreadFlagsSet+0xbc>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	2b02      	cmp	r3, #2
 800de8a:	d120      	bne.n	800dece <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800de8c:	2300      	movs	r3, #0
 800de8e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800de90:	f107 0308 	add.w	r3, r7, #8
 800de94:	9300      	str	r3, [sp, #0]
 800de96:	2300      	movs	r3, #0
 800de98:	2201      	movs	r2, #1
 800de9a:	6839      	ldr	r1, [r7, #0]
 800de9c:	69f8      	ldr	r0, [r7, #28]
 800de9e:	f002 ff97 	bl	8010dd0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800dea2:	f107 020c 	add.w	r2, r7, #12
 800dea6:	2300      	movs	r3, #0
 800dea8:	9300      	str	r3, [sp, #0]
 800deaa:	4613      	mov	r3, r2
 800deac:	2200      	movs	r2, #0
 800deae:	2100      	movs	r1, #0
 800deb0:	69f8      	ldr	r0, [r7, #28]
 800deb2:	f002 ff8d 	bl	8010dd0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d015      	beq.n	800dee8 <osThreadFlagsSet+0xb0>
 800debc:	4b0e      	ldr	r3, [pc, #56]	; (800def8 <osThreadFlagsSet+0xc0>)
 800debe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dec2:	601a      	str	r2, [r3, #0]
 800dec4:	f3bf 8f4f 	dsb	sy
 800dec8:	f3bf 8f6f 	isb	sy
 800decc:	e00c      	b.n	800dee8 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800dece:	2300      	movs	r3, #0
 800ded0:	2201      	movs	r2, #1
 800ded2:	6839      	ldr	r1, [r7, #0]
 800ded4:	69f8      	ldr	r0, [r7, #28]
 800ded6:	f002 fec5 	bl	8010c64 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800deda:	f107 030c 	add.w	r3, r7, #12
 800dede:	2200      	movs	r2, #0
 800dee0:	2100      	movs	r1, #0
 800dee2:	69f8      	ldr	r0, [r7, #28]
 800dee4:	f002 febe 	bl	8010c64 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800dee8:	68fb      	ldr	r3, [r7, #12]
}
 800deea:	4618      	mov	r0, r3
 800deec:	3720      	adds	r7, #32
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	200003a4 	.word	0x200003a4
 800def8:	e000ed04 	.word	0xe000ed04

0800defc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800defc:	b580      	push	{r7, lr}
 800defe:	b08e      	sub	sp, #56	; 0x38
 800df00:	af00      	add	r7, sp, #0
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df08:	f3ef 8305 	mrs	r3, IPSR
 800df0c:	61fb      	str	r3, [r7, #28]
  return(result);
 800df0e:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800df10:	2b00      	cmp	r3, #0
 800df12:	d10f      	bne.n	800df34 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df14:	f3ef 8310 	mrs	r3, PRIMASK
 800df18:	61bb      	str	r3, [r7, #24]
  return(result);
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d105      	bne.n	800df2c <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800df20:	f3ef 8311 	mrs	r3, BASEPRI
 800df24:	617b      	str	r3, [r7, #20]
  return(result);
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d007      	beq.n	800df3c <osThreadFlagsWait+0x40>
 800df2c:	4b3c      	ldr	r3, [pc, #240]	; (800e020 <osThreadFlagsWait+0x124>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b02      	cmp	r3, #2
 800df32:	d103      	bne.n	800df3c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800df34:	f06f 0305 	mvn.w	r3, #5
 800df38:	637b      	str	r3, [r7, #52]	; 0x34
 800df3a:	e06b      	b.n	800e014 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	da03      	bge.n	800df4a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800df42:	f06f 0303 	mvn.w	r3, #3
 800df46:	637b      	str	r3, [r7, #52]	; 0x34
 800df48:	e064      	b.n	800e014 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	f003 0302 	and.w	r3, r3, #2
 800df50:	2b00      	cmp	r3, #0
 800df52:	d002      	beq.n	800df5a <osThreadFlagsWait+0x5e>
      clear = 0U;
 800df54:	2300      	movs	r3, #0
 800df56:	633b      	str	r3, [r7, #48]	; 0x30
 800df58:	e001      	b.n	800df5e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800df5e:	2300      	movs	r3, #0
 800df60:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800df66:	f002 f93d 	bl	80101e4 <xTaskGetTickCount>
 800df6a:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800df6c:	f107 0210 	add.w	r2, r7, #16
 800df70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df74:	2000      	movs	r0, #0
 800df76:	f002 fe1b 	bl	8010bb0 <xTaskNotifyWait>
 800df7a:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800df7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7e:	2b01      	cmp	r3, #1
 800df80:	d137      	bne.n	800dff2 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800df82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	4013      	ands	r3, r2
 800df88:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df8e:	4313      	orrs	r3, r2
 800df90:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	f003 0301 	and.w	r3, r3, #1
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d00c      	beq.n	800dfb6 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfa0:	4013      	ands	r3, r2
 800dfa2:	68fa      	ldr	r2, [r7, #12]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d032      	beq.n	800e00e <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d10f      	bne.n	800dfce <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800dfae:	f06f 0302 	mvn.w	r3, #2
 800dfb2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800dfb4:	e02e      	b.n	800e014 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfba:	4013      	ands	r3, r2
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d128      	bne.n	800e012 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d103      	bne.n	800dfce <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800dfc6:	f06f 0302 	mvn.w	r3, #2
 800dfca:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800dfcc:	e022      	b.n	800e014 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800dfce:	f002 f909 	bl	80101e4 <xTaskGetTickCount>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800dfda:	6a3a      	ldr	r2, [r7, #32]
 800dfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d902      	bls.n	800dfe8 <osThreadFlagsWait+0xec>
          tout  = 0;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dfe6:	e00e      	b.n	800e006 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800dfe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfea:	6a3b      	ldr	r3, [r7, #32]
 800dfec:	1ad3      	subs	r3, r2, r3
 800dfee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dff0:	e009      	b.n	800e006 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d103      	bne.n	800e000 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800dff8:	f06f 0302 	mvn.w	r3, #2
 800dffc:	637b      	str	r3, [r7, #52]	; 0x34
 800dffe:	e002      	b.n	800e006 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800e000:	f06f 0301 	mvn.w	r3, #1
 800e004:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800e006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1af      	bne.n	800df6c <osThreadFlagsWait+0x70>
 800e00c:	e002      	b.n	800e014 <osThreadFlagsWait+0x118>
            break;
 800e00e:	bf00      	nop
 800e010:	e000      	b.n	800e014 <osThreadFlagsWait+0x118>
            break;
 800e012:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800e014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e016:	4618      	mov	r0, r3
 800e018:	3738      	adds	r7, #56	; 0x38
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	200003a4 	.word	0x200003a4

0800e024 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800e024:	b580      	push	{r7, lr}
 800e026:	b086      	sub	sp, #24
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e02c:	f3ef 8305 	mrs	r3, IPSR
 800e030:	613b      	str	r3, [r7, #16]
  return(result);
 800e032:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e034:	2b00      	cmp	r3, #0
 800e036:	d10f      	bne.n	800e058 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e038:	f3ef 8310 	mrs	r3, PRIMASK
 800e03c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d105      	bne.n	800e050 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e044:	f3ef 8311 	mrs	r3, BASEPRI
 800e048:	60bb      	str	r3, [r7, #8]
  return(result);
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d007      	beq.n	800e060 <osDelay+0x3c>
 800e050:	4b0a      	ldr	r3, [pc, #40]	; (800e07c <osDelay+0x58>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	2b02      	cmp	r3, #2
 800e056:	d103      	bne.n	800e060 <osDelay+0x3c>
    stat = osErrorISR;
 800e058:	f06f 0305 	mvn.w	r3, #5
 800e05c:	617b      	str	r3, [r7, #20]
 800e05e:	e007      	b.n	800e070 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e060:	2300      	movs	r3, #0
 800e062:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d002      	beq.n	800e070 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f001 ff40 	bl	800fef0 <vTaskDelay>
    }
  }

  return (stat);
 800e070:	697b      	ldr	r3, [r7, #20]
}
 800e072:	4618      	mov	r0, r3
 800e074:	3718      	adds	r7, #24
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	200003a4 	.word	0x200003a4

0800e080 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e080:	b580      	push	{r7, lr}
 800e082:	b08a      	sub	sp, #40	; 0x28
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e088:	2300      	movs	r3, #0
 800e08a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e08c:	f3ef 8305 	mrs	r3, IPSR
 800e090:	613b      	str	r3, [r7, #16]
  return(result);
 800e092:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800e094:	2b00      	cmp	r3, #0
 800e096:	f040 8085 	bne.w	800e1a4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e09a:	f3ef 8310 	mrs	r3, PRIMASK
 800e09e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d105      	bne.n	800e0b2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e0a6:	f3ef 8311 	mrs	r3, BASEPRI
 800e0aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d003      	beq.n	800e0ba <osMutexNew+0x3a>
 800e0b2:	4b3f      	ldr	r3, [pc, #252]	; (800e1b0 <osMutexNew+0x130>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2b02      	cmp	r3, #2
 800e0b8:	d074      	beq.n	800e1a4 <osMutexNew+0x124>
    if (attr != NULL) {
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d003      	beq.n	800e0c8 <osMutexNew+0x48>
      type = attr->attr_bits;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	623b      	str	r3, [r7, #32]
 800e0c6:	e001      	b.n	800e0cc <osMutexNew+0x4c>
    } else {
      type = 0U;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e0cc:	6a3b      	ldr	r3, [r7, #32]
 800e0ce:	f003 0301 	and.w	r3, r3, #1
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d002      	beq.n	800e0dc <osMutexNew+0x5c>
      rmtx = 1U;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	61fb      	str	r3, [r7, #28]
 800e0da:	e001      	b.n	800e0e0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e0e0:	6a3b      	ldr	r3, [r7, #32]
 800e0e2:	f003 0308 	and.w	r3, r3, #8
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d15c      	bne.n	800e1a4 <osMutexNew+0x124>
      mem = -1;
 800e0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e0ee:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d015      	beq.n	800e122 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	689b      	ldr	r3, [r3, #8]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d006      	beq.n	800e10c <osMutexNew+0x8c>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	68db      	ldr	r3, [r3, #12]
 800e102:	2b4f      	cmp	r3, #79	; 0x4f
 800e104:	d902      	bls.n	800e10c <osMutexNew+0x8c>
          mem = 1;
 800e106:	2301      	movs	r3, #1
 800e108:	61bb      	str	r3, [r7, #24]
 800e10a:	e00c      	b.n	800e126 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d108      	bne.n	800e126 <osMutexNew+0xa6>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d104      	bne.n	800e126 <osMutexNew+0xa6>
            mem = 0;
 800e11c:	2300      	movs	r3, #0
 800e11e:	61bb      	str	r3, [r7, #24]
 800e120:	e001      	b.n	800e126 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800e122:	2300      	movs	r3, #0
 800e124:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e126:	69bb      	ldr	r3, [r7, #24]
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d112      	bne.n	800e152 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d007      	beq.n	800e142 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	689b      	ldr	r3, [r3, #8]
 800e136:	4619      	mov	r1, r3
 800e138:	2004      	movs	r0, #4
 800e13a:	f000 fe08 	bl	800ed4e <xQueueCreateMutexStatic>
 800e13e:	6278      	str	r0, [r7, #36]	; 0x24
 800e140:	e016      	b.n	800e170 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	689b      	ldr	r3, [r3, #8]
 800e146:	4619      	mov	r1, r3
 800e148:	2001      	movs	r0, #1
 800e14a:	f000 fe00 	bl	800ed4e <xQueueCreateMutexStatic>
 800e14e:	6278      	str	r0, [r7, #36]	; 0x24
 800e150:	e00e      	b.n	800e170 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d10b      	bne.n	800e170 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d004      	beq.n	800e168 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800e15e:	2004      	movs	r0, #4
 800e160:	f000 fddd 	bl	800ed1e <xQueueCreateMutex>
 800e164:	6278      	str	r0, [r7, #36]	; 0x24
 800e166:	e003      	b.n	800e170 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800e168:	2001      	movs	r0, #1
 800e16a:	f000 fdd8 	bl	800ed1e <xQueueCreateMutex>
 800e16e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e172:	2b00      	cmp	r3, #0
 800e174:	d00c      	beq.n	800e190 <osMutexNew+0x110>
        if (attr != NULL) {
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d003      	beq.n	800e184 <osMutexNew+0x104>
          name = attr->name;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	617b      	str	r3, [r7, #20]
 800e182:	e001      	b.n	800e188 <osMutexNew+0x108>
        } else {
          name = NULL;
 800e184:	2300      	movs	r3, #0
 800e186:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800e188:	6979      	ldr	r1, [r7, #20]
 800e18a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e18c:	f001 fc8c 	bl	800faa8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e192:	2b00      	cmp	r3, #0
 800e194:	d006      	beq.n	800e1a4 <osMutexNew+0x124>
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d003      	beq.n	800e1a4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19e:	f043 0301 	orr.w	r3, r3, #1
 800e1a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3728      	adds	r7, #40	; 0x28
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	200003a4 	.word	0x200003a4

0800e1b4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b088      	sub	sp, #32
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f023 0301 	bic.w	r3, r3, #1
 800e1c4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f003 0301 	and.w	r3, r3, #1
 800e1cc:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1d2:	f3ef 8305 	mrs	r3, IPSR
 800e1d6:	613b      	str	r3, [r7, #16]
  return(result);
 800e1d8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d10f      	bne.n	800e1fe <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1de:	f3ef 8310 	mrs	r3, PRIMASK
 800e1e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d105      	bne.n	800e1f6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e1ea:	f3ef 8311 	mrs	r3, BASEPRI
 800e1ee:	60bb      	str	r3, [r7, #8]
  return(result);
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d007      	beq.n	800e206 <osMutexAcquire+0x52>
 800e1f6:	4b1d      	ldr	r3, [pc, #116]	; (800e26c <osMutexAcquire+0xb8>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	2b02      	cmp	r3, #2
 800e1fc:	d103      	bne.n	800e206 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800e1fe:	f06f 0305 	mvn.w	r3, #5
 800e202:	61fb      	str	r3, [r7, #28]
 800e204:	e02c      	b.n	800e260 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d103      	bne.n	800e214 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800e20c:	f06f 0303 	mvn.w	r3, #3
 800e210:	61fb      	str	r3, [r7, #28]
 800e212:	e025      	b.n	800e260 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d011      	beq.n	800e23e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e21a:	6839      	ldr	r1, [r7, #0]
 800e21c:	69b8      	ldr	r0, [r7, #24]
 800e21e:	f000 fde4 	bl	800edea <xQueueTakeMutexRecursive>
 800e222:	4603      	mov	r3, r0
 800e224:	2b01      	cmp	r3, #1
 800e226:	d01b      	beq.n	800e260 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d003      	beq.n	800e236 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800e22e:	f06f 0301 	mvn.w	r3, #1
 800e232:	61fb      	str	r3, [r7, #28]
 800e234:	e014      	b.n	800e260 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e236:	f06f 0302 	mvn.w	r3, #2
 800e23a:	61fb      	str	r3, [r7, #28]
 800e23c:	e010      	b.n	800e260 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e23e:	6839      	ldr	r1, [r7, #0]
 800e240:	69b8      	ldr	r0, [r7, #24]
 800e242:	f001 f961 	bl	800f508 <xQueueSemaphoreTake>
 800e246:	4603      	mov	r3, r0
 800e248:	2b01      	cmp	r3, #1
 800e24a:	d009      	beq.n	800e260 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d003      	beq.n	800e25a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800e252:	f06f 0301 	mvn.w	r3, #1
 800e256:	61fb      	str	r3, [r7, #28]
 800e258:	e002      	b.n	800e260 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e25a:	f06f 0302 	mvn.w	r3, #2
 800e25e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e260:	69fb      	ldr	r3, [r7, #28]
}
 800e262:	4618      	mov	r0, r3
 800e264:	3720      	adds	r7, #32
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	200003a4 	.word	0x200003a4

0800e270 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e270:	b580      	push	{r7, lr}
 800e272:	b088      	sub	sp, #32
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f023 0301 	bic.w	r3, r3, #1
 800e27e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f003 0301 	and.w	r3, r3, #1
 800e286:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e288:	2300      	movs	r3, #0
 800e28a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e28c:	f3ef 8305 	mrs	r3, IPSR
 800e290:	613b      	str	r3, [r7, #16]
  return(result);
 800e292:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e294:	2b00      	cmp	r3, #0
 800e296:	d10f      	bne.n	800e2b8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e298:	f3ef 8310 	mrs	r3, PRIMASK
 800e29c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d105      	bne.n	800e2b0 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e2a4:	f3ef 8311 	mrs	r3, BASEPRI
 800e2a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d007      	beq.n	800e2c0 <osMutexRelease+0x50>
 800e2b0:	4b16      	ldr	r3, [pc, #88]	; (800e30c <osMutexRelease+0x9c>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	2b02      	cmp	r3, #2
 800e2b6:	d103      	bne.n	800e2c0 <osMutexRelease+0x50>
    stat = osErrorISR;
 800e2b8:	f06f 0305 	mvn.w	r3, #5
 800e2bc:	61fb      	str	r3, [r7, #28]
 800e2be:	e01f      	b.n	800e300 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800e2c0:	69bb      	ldr	r3, [r7, #24]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d103      	bne.n	800e2ce <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800e2c6:	f06f 0303 	mvn.w	r3, #3
 800e2ca:	61fb      	str	r3, [r7, #28]
 800e2cc:	e018      	b.n	800e300 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d009      	beq.n	800e2e8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e2d4:	69b8      	ldr	r0, [r7, #24]
 800e2d6:	f000 fd55 	bl	800ed84 <xQueueGiveMutexRecursive>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d00f      	beq.n	800e300 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e2e0:	f06f 0302 	mvn.w	r3, #2
 800e2e4:	61fb      	str	r3, [r7, #28]
 800e2e6:	e00b      	b.n	800e300 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	69b8      	ldr	r0, [r7, #24]
 800e2f0:	f000 fe16 	bl	800ef20 <xQueueGenericSend>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d002      	beq.n	800e300 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e2fa:	f06f 0302 	mvn.w	r3, #2
 800e2fe:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800e300:	69fb      	ldr	r3, [r7, #28]
}
 800e302:	4618      	mov	r0, r3
 800e304:	3720      	adds	r7, #32
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	bf00      	nop
 800e30c:	200003a4 	.word	0x200003a4

0800e310 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e310:	b580      	push	{r7, lr}
 800e312:	b08c      	sub	sp, #48	; 0x30
 800e314:	af02      	add	r7, sp, #8
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e31c:	2300      	movs	r3, #0
 800e31e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e320:	f3ef 8305 	mrs	r3, IPSR
 800e324:	61bb      	str	r3, [r7, #24]
  return(result);
 800e326:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e328:	2b00      	cmp	r3, #0
 800e32a:	f040 8087 	bne.w	800e43c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e32e:	f3ef 8310 	mrs	r3, PRIMASK
 800e332:	617b      	str	r3, [r7, #20]
  return(result);
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d105      	bne.n	800e346 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e33a:	f3ef 8311 	mrs	r3, BASEPRI
 800e33e:	613b      	str	r3, [r7, #16]
  return(result);
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d003      	beq.n	800e34e <osSemaphoreNew+0x3e>
 800e346:	4b40      	ldr	r3, [pc, #256]	; (800e448 <osSemaphoreNew+0x138>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2b02      	cmp	r3, #2
 800e34c:	d076      	beq.n	800e43c <osSemaphoreNew+0x12c>
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d073      	beq.n	800e43c <osSemaphoreNew+0x12c>
 800e354:	68ba      	ldr	r2, [r7, #8]
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d86f      	bhi.n	800e43c <osSemaphoreNew+0x12c>
    mem = -1;
 800e35c:	f04f 33ff 	mov.w	r3, #4294967295
 800e360:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d015      	beq.n	800e394 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	689b      	ldr	r3, [r3, #8]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d006      	beq.n	800e37e <osSemaphoreNew+0x6e>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	2b4f      	cmp	r3, #79	; 0x4f
 800e376:	d902      	bls.n	800e37e <osSemaphoreNew+0x6e>
        mem = 1;
 800e378:	2301      	movs	r3, #1
 800e37a:	623b      	str	r3, [r7, #32]
 800e37c:	e00c      	b.n	800e398 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	689b      	ldr	r3, [r3, #8]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d108      	bne.n	800e398 <osSemaphoreNew+0x88>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d104      	bne.n	800e398 <osSemaphoreNew+0x88>
          mem = 0;
 800e38e:	2300      	movs	r3, #0
 800e390:	623b      	str	r3, [r7, #32]
 800e392:	e001      	b.n	800e398 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800e394:	2300      	movs	r3, #0
 800e396:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800e398:	6a3b      	ldr	r3, [r7, #32]
 800e39a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e39e:	d04d      	beq.n	800e43c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d129      	bne.n	800e3fa <osSemaphoreNew+0xea>
        if (mem == 1) {
 800e3a6:	6a3b      	ldr	r3, [r7, #32]
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d10b      	bne.n	800e3c4 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	689a      	ldr	r2, [r3, #8]
 800e3b0:	2303      	movs	r3, #3
 800e3b2:	9300      	str	r3, [sp, #0]
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	2100      	movs	r1, #0
 800e3ba:	2001      	movs	r0, #1
 800e3bc:	f000 fbc0 	bl	800eb40 <xQueueGenericCreateStatic>
 800e3c0:	6278      	str	r0, [r7, #36]	; 0x24
 800e3c2:	e005      	b.n	800e3d0 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800e3c4:	2203      	movs	r2, #3
 800e3c6:	2100      	movs	r1, #0
 800e3c8:	2001      	movs	r0, #1
 800e3ca:	f000 fc2c 	bl	800ec26 <xQueueGenericCreate>
 800e3ce:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d022      	beq.n	800e41c <osSemaphoreNew+0x10c>
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d01f      	beq.n	800e41c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e3dc:	2300      	movs	r3, #0
 800e3de:	2200      	movs	r2, #0
 800e3e0:	2100      	movs	r1, #0
 800e3e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3e4:	f000 fd9c 	bl	800ef20 <xQueueGenericSend>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d016      	beq.n	800e41c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800e3ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3f0:	f001 fa0f 	bl	800f812 <vQueueDelete>
            hSemaphore = NULL;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	627b      	str	r3, [r7, #36]	; 0x24
 800e3f8:	e010      	b.n	800e41c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800e3fa:	6a3b      	ldr	r3, [r7, #32]
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d108      	bne.n	800e412 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	461a      	mov	r2, r3
 800e406:	68b9      	ldr	r1, [r7, #8]
 800e408:	68f8      	ldr	r0, [r7, #12]
 800e40a:	f000 fd23 	bl	800ee54 <xQueueCreateCountingSemaphoreStatic>
 800e40e:	6278      	str	r0, [r7, #36]	; 0x24
 800e410:	e004      	b.n	800e41c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e412:	68b9      	ldr	r1, [r7, #8]
 800e414:	68f8      	ldr	r0, [r7, #12]
 800e416:	f000 fd52 	bl	800eebe <xQueueCreateCountingSemaphore>
 800e41a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d00c      	beq.n	800e43c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d003      	beq.n	800e430 <osSemaphoreNew+0x120>
          name = attr->name;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	61fb      	str	r3, [r7, #28]
 800e42e:	e001      	b.n	800e434 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800e430:	2300      	movs	r3, #0
 800e432:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e434:	69f9      	ldr	r1, [r7, #28]
 800e436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e438:	f001 fb36 	bl	800faa8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3728      	adds	r7, #40	; 0x28
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	200003a4 	.word	0x200003a4

0800e44c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b088      	sub	sp, #32
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e45a:	2300      	movs	r3, #0
 800e45c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d103      	bne.n	800e46c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e464:	f06f 0303 	mvn.w	r3, #3
 800e468:	61fb      	str	r3, [r7, #28]
 800e46a:	e04b      	b.n	800e504 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e46c:	f3ef 8305 	mrs	r3, IPSR
 800e470:	617b      	str	r3, [r7, #20]
  return(result);
 800e472:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e474:	2b00      	cmp	r3, #0
 800e476:	d10f      	bne.n	800e498 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e478:	f3ef 8310 	mrs	r3, PRIMASK
 800e47c:	613b      	str	r3, [r7, #16]
  return(result);
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d105      	bne.n	800e490 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e484:	f3ef 8311 	mrs	r3, BASEPRI
 800e488:	60fb      	str	r3, [r7, #12]
  return(result);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d026      	beq.n	800e4de <osSemaphoreAcquire+0x92>
 800e490:	4b1f      	ldr	r3, [pc, #124]	; (800e510 <osSemaphoreAcquire+0xc4>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	2b02      	cmp	r3, #2
 800e496:	d122      	bne.n	800e4de <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d003      	beq.n	800e4a6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800e49e:	f06f 0303 	mvn.w	r3, #3
 800e4a2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e4a4:	e02d      	b.n	800e502 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e4aa:	f107 0308 	add.w	r3, r7, #8
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	2100      	movs	r1, #0
 800e4b2:	69b8      	ldr	r0, [r7, #24]
 800e4b4:	f001 f930 	bl	800f718 <xQueueReceiveFromISR>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d003      	beq.n	800e4c6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800e4be:	f06f 0302 	mvn.w	r3, #2
 800e4c2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e4c4:	e01d      	b.n	800e502 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d01a      	beq.n	800e502 <osSemaphoreAcquire+0xb6>
 800e4cc:	4b11      	ldr	r3, [pc, #68]	; (800e514 <osSemaphoreAcquire+0xc8>)
 800e4ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4d2:	601a      	str	r2, [r3, #0]
 800e4d4:	f3bf 8f4f 	dsb	sy
 800e4d8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800e4dc:	e011      	b.n	800e502 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e4de:	6839      	ldr	r1, [r7, #0]
 800e4e0:	69b8      	ldr	r0, [r7, #24]
 800e4e2:	f001 f811 	bl	800f508 <xQueueSemaphoreTake>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d00b      	beq.n	800e504 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d003      	beq.n	800e4fa <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800e4f2:	f06f 0301 	mvn.w	r3, #1
 800e4f6:	61fb      	str	r3, [r7, #28]
 800e4f8:	e004      	b.n	800e504 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800e4fa:	f06f 0302 	mvn.w	r3, #2
 800e4fe:	61fb      	str	r3, [r7, #28]
 800e500:	e000      	b.n	800e504 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800e502:	bf00      	nop
      }
    }
  }

  return (stat);
 800e504:	69fb      	ldr	r3, [r7, #28]
}
 800e506:	4618      	mov	r0, r3
 800e508:	3720      	adds	r7, #32
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop
 800e510:	200003a4 	.word	0x200003a4
 800e514:	e000ed04 	.word	0xe000ed04

0800e518 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e518:	b580      	push	{r7, lr}
 800e51a:	b088      	sub	sp, #32
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e524:	2300      	movs	r3, #0
 800e526:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d103      	bne.n	800e536 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e52e:	f06f 0303 	mvn.w	r3, #3
 800e532:	61fb      	str	r3, [r7, #28]
 800e534:	e03e      	b.n	800e5b4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e536:	f3ef 8305 	mrs	r3, IPSR
 800e53a:	617b      	str	r3, [r7, #20]
  return(result);
 800e53c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d10f      	bne.n	800e562 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e542:	f3ef 8310 	mrs	r3, PRIMASK
 800e546:	613b      	str	r3, [r7, #16]
  return(result);
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d105      	bne.n	800e55a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e54e:	f3ef 8311 	mrs	r3, BASEPRI
 800e552:	60fb      	str	r3, [r7, #12]
  return(result);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d01e      	beq.n	800e598 <osSemaphoreRelease+0x80>
 800e55a:	4b19      	ldr	r3, [pc, #100]	; (800e5c0 <osSemaphoreRelease+0xa8>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2b02      	cmp	r3, #2
 800e560:	d11a      	bne.n	800e598 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800e562:	2300      	movs	r3, #0
 800e564:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e566:	f107 0308 	add.w	r3, r7, #8
 800e56a:	4619      	mov	r1, r3
 800e56c:	69b8      	ldr	r0, [r7, #24]
 800e56e:	f000 fe65 	bl	800f23c <xQueueGiveFromISR>
 800e572:	4603      	mov	r3, r0
 800e574:	2b01      	cmp	r3, #1
 800e576:	d003      	beq.n	800e580 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800e578:	f06f 0302 	mvn.w	r3, #2
 800e57c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e57e:	e018      	b.n	800e5b2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d015      	beq.n	800e5b2 <osSemaphoreRelease+0x9a>
 800e586:	4b0f      	ldr	r3, [pc, #60]	; (800e5c4 <osSemaphoreRelease+0xac>)
 800e588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e58c:	601a      	str	r2, [r3, #0]
 800e58e:	f3bf 8f4f 	dsb	sy
 800e592:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e596:	e00c      	b.n	800e5b2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e598:	2300      	movs	r3, #0
 800e59a:	2200      	movs	r2, #0
 800e59c:	2100      	movs	r1, #0
 800e59e:	69b8      	ldr	r0, [r7, #24]
 800e5a0:	f000 fcbe 	bl	800ef20 <xQueueGenericSend>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d004      	beq.n	800e5b4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800e5aa:	f06f 0302 	mvn.w	r3, #2
 800e5ae:	61fb      	str	r3, [r7, #28]
 800e5b0:	e000      	b.n	800e5b4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e5b2:	bf00      	nop
    }
  }

  return (stat);
 800e5b4:	69fb      	ldr	r3, [r7, #28]
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3720      	adds	r7, #32
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	200003a4 	.word	0x200003a4
 800e5c4:	e000ed04 	.word	0xe000ed04

0800e5c8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b08c      	sub	sp, #48	; 0x30
 800e5cc:	af02      	add	r7, sp, #8
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5d8:	f3ef 8305 	mrs	r3, IPSR
 800e5dc:	61bb      	str	r3, [r7, #24]
  return(result);
 800e5de:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d170      	bne.n	800e6c6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5e4:	f3ef 8310 	mrs	r3, PRIMASK
 800e5e8:	617b      	str	r3, [r7, #20]
  return(result);
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d105      	bne.n	800e5fc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e5f0:	f3ef 8311 	mrs	r3, BASEPRI
 800e5f4:	613b      	str	r3, [r7, #16]
  return(result);
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d003      	beq.n	800e604 <osMessageQueueNew+0x3c>
 800e5fc:	4b34      	ldr	r3, [pc, #208]	; (800e6d0 <osMessageQueueNew+0x108>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2b02      	cmp	r3, #2
 800e602:	d060      	beq.n	800e6c6 <osMessageQueueNew+0xfe>
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d05d      	beq.n	800e6c6 <osMessageQueueNew+0xfe>
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d05a      	beq.n	800e6c6 <osMessageQueueNew+0xfe>
    mem = -1;
 800e610:	f04f 33ff 	mov.w	r3, #4294967295
 800e614:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d029      	beq.n	800e670 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d012      	beq.n	800e64a <osMessageQueueNew+0x82>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	68db      	ldr	r3, [r3, #12]
 800e628:	2b4f      	cmp	r3, #79	; 0x4f
 800e62a:	d90e      	bls.n	800e64a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00a      	beq.n	800e64a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	695a      	ldr	r2, [r3, #20]
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	68b9      	ldr	r1, [r7, #8]
 800e63c:	fb01 f303 	mul.w	r3, r1, r3
 800e640:	429a      	cmp	r2, r3
 800e642:	d302      	bcc.n	800e64a <osMessageQueueNew+0x82>
        mem = 1;
 800e644:	2301      	movs	r3, #1
 800e646:	623b      	str	r3, [r7, #32]
 800e648:	e014      	b.n	800e674 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	689b      	ldr	r3, [r3, #8]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d110      	bne.n	800e674 <osMessageQueueNew+0xac>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	68db      	ldr	r3, [r3, #12]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d10c      	bne.n	800e674 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d108      	bne.n	800e674 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	695b      	ldr	r3, [r3, #20]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d104      	bne.n	800e674 <osMessageQueueNew+0xac>
          mem = 0;
 800e66a:	2300      	movs	r3, #0
 800e66c:	623b      	str	r3, [r7, #32]
 800e66e:	e001      	b.n	800e674 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800e670:	2300      	movs	r3, #0
 800e672:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e674:	6a3b      	ldr	r3, [r7, #32]
 800e676:	2b01      	cmp	r3, #1
 800e678:	d10c      	bne.n	800e694 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	691a      	ldr	r2, [r3, #16]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6899      	ldr	r1, [r3, #8]
 800e682:	2300      	movs	r3, #0
 800e684:	9300      	str	r3, [sp, #0]
 800e686:	460b      	mov	r3, r1
 800e688:	68b9      	ldr	r1, [r7, #8]
 800e68a:	68f8      	ldr	r0, [r7, #12]
 800e68c:	f000 fa58 	bl	800eb40 <xQueueGenericCreateStatic>
 800e690:	6278      	str	r0, [r7, #36]	; 0x24
 800e692:	e008      	b.n	800e6a6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800e694:	6a3b      	ldr	r3, [r7, #32]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d105      	bne.n	800e6a6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800e69a:	2200      	movs	r2, #0
 800e69c:	68b9      	ldr	r1, [r7, #8]
 800e69e:	68f8      	ldr	r0, [r7, #12]
 800e6a0:	f000 fac1 	bl	800ec26 <xQueueGenericCreate>
 800e6a4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d00c      	beq.n	800e6c6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d003      	beq.n	800e6ba <osMessageQueueNew+0xf2>
        name = attr->name;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	61fb      	str	r3, [r7, #28]
 800e6b8:	e001      	b.n	800e6be <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800e6be:	69f9      	ldr	r1, [r7, #28]
 800e6c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6c2:	f001 f9f1 	bl	800faa8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3728      	adds	r7, #40	; 0x28
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	200003a4 	.word	0x200003a4

0800e6d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b08a      	sub	sp, #40	; 0x28
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	603b      	str	r3, [r7, #0]
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6ec:	f3ef 8305 	mrs	r3, IPSR
 800e6f0:	61fb      	str	r3, [r7, #28]
  return(result);
 800e6f2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d10f      	bne.n	800e718 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6f8:	f3ef 8310 	mrs	r3, PRIMASK
 800e6fc:	61bb      	str	r3, [r7, #24]
  return(result);
 800e6fe:	69bb      	ldr	r3, [r7, #24]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d105      	bne.n	800e710 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e704:	f3ef 8311 	mrs	r3, BASEPRI
 800e708:	617b      	str	r3, [r7, #20]
  return(result);
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d02c      	beq.n	800e76a <osMessageQueuePut+0x96>
 800e710:	4b28      	ldr	r3, [pc, #160]	; (800e7b4 <osMessageQueuePut+0xe0>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	2b02      	cmp	r3, #2
 800e716:	d128      	bne.n	800e76a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e718:	6a3b      	ldr	r3, [r7, #32]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d005      	beq.n	800e72a <osMessageQueuePut+0x56>
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d002      	beq.n	800e72a <osMessageQueuePut+0x56>
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d003      	beq.n	800e732 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800e72a:	f06f 0303 	mvn.w	r3, #3
 800e72e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e730:	e039      	b.n	800e7a6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800e732:	2300      	movs	r3, #0
 800e734:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e736:	f107 0210 	add.w	r2, r7, #16
 800e73a:	2300      	movs	r3, #0
 800e73c:	68b9      	ldr	r1, [r7, #8]
 800e73e:	6a38      	ldr	r0, [r7, #32]
 800e740:	f000 fce8 	bl	800f114 <xQueueGenericSendFromISR>
 800e744:	4603      	mov	r3, r0
 800e746:	2b01      	cmp	r3, #1
 800e748:	d003      	beq.n	800e752 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800e74a:	f06f 0302 	mvn.w	r3, #2
 800e74e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e750:	e029      	b.n	800e7a6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d026      	beq.n	800e7a6 <osMessageQueuePut+0xd2>
 800e758:	4b17      	ldr	r3, [pc, #92]	; (800e7b8 <osMessageQueuePut+0xe4>)
 800e75a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e75e:	601a      	str	r2, [r3, #0]
 800e760:	f3bf 8f4f 	dsb	sy
 800e764:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e768:	e01d      	b.n	800e7a6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e76a:	6a3b      	ldr	r3, [r7, #32]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d002      	beq.n	800e776 <osMessageQueuePut+0xa2>
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d103      	bne.n	800e77e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800e776:	f06f 0303 	mvn.w	r3, #3
 800e77a:	627b      	str	r3, [r7, #36]	; 0x24
 800e77c:	e014      	b.n	800e7a8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e77e:	2300      	movs	r3, #0
 800e780:	683a      	ldr	r2, [r7, #0]
 800e782:	68b9      	ldr	r1, [r7, #8]
 800e784:	6a38      	ldr	r0, [r7, #32]
 800e786:	f000 fbcb 	bl	800ef20 <xQueueGenericSend>
 800e78a:	4603      	mov	r3, r0
 800e78c:	2b01      	cmp	r3, #1
 800e78e:	d00b      	beq.n	800e7a8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d003      	beq.n	800e79e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800e796:	f06f 0301 	mvn.w	r3, #1
 800e79a:	627b      	str	r3, [r7, #36]	; 0x24
 800e79c:	e004      	b.n	800e7a8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800e79e:	f06f 0302 	mvn.w	r3, #2
 800e7a2:	627b      	str	r3, [r7, #36]	; 0x24
 800e7a4:	e000      	b.n	800e7a8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e7a6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3728      	adds	r7, #40	; 0x28
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	200003a4 	.word	0x200003a4
 800e7b8:	e000ed04 	.word	0xe000ed04

0800e7bc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b08a      	sub	sp, #40	; 0x28
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	607a      	str	r2, [r7, #4]
 800e7c8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7d2:	f3ef 8305 	mrs	r3, IPSR
 800e7d6:	61fb      	str	r3, [r7, #28]
  return(result);
 800e7d8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d10f      	bne.n	800e7fe <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7de:	f3ef 8310 	mrs	r3, PRIMASK
 800e7e2:	61bb      	str	r3, [r7, #24]
  return(result);
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d105      	bne.n	800e7f6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e7ea:	f3ef 8311 	mrs	r3, BASEPRI
 800e7ee:	617b      	str	r3, [r7, #20]
  return(result);
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d02c      	beq.n	800e850 <osMessageQueueGet+0x94>
 800e7f6:	4b28      	ldr	r3, [pc, #160]	; (800e898 <osMessageQueueGet+0xdc>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2b02      	cmp	r3, #2
 800e7fc:	d128      	bne.n	800e850 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e7fe:	6a3b      	ldr	r3, [r7, #32]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d005      	beq.n	800e810 <osMessageQueueGet+0x54>
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d002      	beq.n	800e810 <osMessageQueueGet+0x54>
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d003      	beq.n	800e818 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800e810:	f06f 0303 	mvn.w	r3, #3
 800e814:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e816:	e038      	b.n	800e88a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800e818:	2300      	movs	r3, #0
 800e81a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e81c:	f107 0310 	add.w	r3, r7, #16
 800e820:	461a      	mov	r2, r3
 800e822:	68b9      	ldr	r1, [r7, #8]
 800e824:	6a38      	ldr	r0, [r7, #32]
 800e826:	f000 ff77 	bl	800f718 <xQueueReceiveFromISR>
 800e82a:	4603      	mov	r3, r0
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d003      	beq.n	800e838 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800e830:	f06f 0302 	mvn.w	r3, #2
 800e834:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e836:	e028      	b.n	800e88a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d025      	beq.n	800e88a <osMessageQueueGet+0xce>
 800e83e:	4b17      	ldr	r3, [pc, #92]	; (800e89c <osMessageQueueGet+0xe0>)
 800e840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e844:	601a      	str	r2, [r3, #0]
 800e846:	f3bf 8f4f 	dsb	sy
 800e84a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e84e:	e01c      	b.n	800e88a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e850:	6a3b      	ldr	r3, [r7, #32]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d002      	beq.n	800e85c <osMessageQueueGet+0xa0>
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d103      	bne.n	800e864 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800e85c:	f06f 0303 	mvn.w	r3, #3
 800e860:	627b      	str	r3, [r7, #36]	; 0x24
 800e862:	e013      	b.n	800e88c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e864:	683a      	ldr	r2, [r7, #0]
 800e866:	68b9      	ldr	r1, [r7, #8]
 800e868:	6a38      	ldr	r0, [r7, #32]
 800e86a:	f000 fd71 	bl	800f350 <xQueueReceive>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b01      	cmp	r3, #1
 800e872:	d00b      	beq.n	800e88c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d003      	beq.n	800e882 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800e87a:	f06f 0301 	mvn.w	r3, #1
 800e87e:	627b      	str	r3, [r7, #36]	; 0x24
 800e880:	e004      	b.n	800e88c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800e882:	f06f 0302 	mvn.w	r3, #2
 800e886:	627b      	str	r3, [r7, #36]	; 0x24
 800e888:	e000      	b.n	800e88c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e88a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3728      	adds	r7, #40	; 0x28
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	200003a4 	.word	0x200003a4
 800e89c:	e000ed04 	.word	0xe000ed04

0800e8a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e8a0:	b480      	push	{r7}
 800e8a2:	b085      	sub	sp, #20
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	60f8      	str	r0, [r7, #12]
 800e8a8:	60b9      	str	r1, [r7, #8]
 800e8aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	4a07      	ldr	r2, [pc, #28]	; (800e8cc <vApplicationGetIdleTaskMemory+0x2c>)
 800e8b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	4a06      	ldr	r2, [pc, #24]	; (800e8d0 <vApplicationGetIdleTaskMemory+0x30>)
 800e8b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8be:	601a      	str	r2, [r3, #0]
}
 800e8c0:	bf00      	nop
 800e8c2:	3714      	adds	r7, #20
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr
 800e8cc:	200003a8 	.word	0x200003a8
 800e8d0:	20000404 	.word	0x20000404

0800e8d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e8d4:	b480      	push	{r7}
 800e8d6:	b085      	sub	sp, #20
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	60b9      	str	r1, [r7, #8]
 800e8de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	4a07      	ldr	r2, [pc, #28]	; (800e900 <vApplicationGetTimerTaskMemory+0x2c>)
 800e8e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	4a06      	ldr	r2, [pc, #24]	; (800e904 <vApplicationGetTimerTaskMemory+0x30>)
 800e8ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e8f2:	601a      	str	r2, [r3, #0]
}
 800e8f4:	bf00      	nop
 800e8f6:	3714      	adds	r7, #20
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	20000c04 	.word	0x20000c04
 800e904:	20000c60 	.word	0x20000c60

0800e908 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e908:	b480      	push	{r7}
 800e90a:	b083      	sub	sp, #12
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f103 0208 	add.w	r2, r3, #8
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f04f 32ff 	mov.w	r2, #4294967295
 800e920:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f103 0208 	add.w	r2, r3, #8
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f103 0208 	add.w	r2, r3, #8
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2200      	movs	r2, #0
 800e93a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e93c:	bf00      	nop
 800e93e:	370c      	adds	r7, #12
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2200      	movs	r2, #0
 800e954:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e956:	bf00      	nop
 800e958:	370c      	adds	r7, #12
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr

0800e962 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e962:	b480      	push	{r7}
 800e964:	b085      	sub	sp, #20
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
 800e96a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	68fa      	ldr	r2, [r7, #12]
 800e976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	689a      	ldr	r2, [r3, #8]
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	689b      	ldr	r3, [r3, #8]
 800e984:	683a      	ldr	r2, [r7, #0]
 800e986:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	683a      	ldr	r2, [r7, #0]
 800e98c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	1c5a      	adds	r2, r3, #1
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	601a      	str	r2, [r3, #0]
}
 800e99e:	bf00      	nop
 800e9a0:	3714      	adds	r7, #20
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr

0800e9aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e9aa:	b480      	push	{r7}
 800e9ac:	b085      	sub	sp, #20
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
 800e9b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c0:	d103      	bne.n	800e9ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	691b      	ldr	r3, [r3, #16]
 800e9c6:	60fb      	str	r3, [r7, #12]
 800e9c8:	e00c      	b.n	800e9e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	3308      	adds	r3, #8
 800e9ce:	60fb      	str	r3, [r7, #12]
 800e9d0:	e002      	b.n	800e9d8 <vListInsert+0x2e>
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	685b      	ldr	r3, [r3, #4]
 800e9d6:	60fb      	str	r3, [r7, #12]
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	68ba      	ldr	r2, [r7, #8]
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d2f6      	bcs.n	800e9d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	685a      	ldr	r2, [r3, #4]
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	683a      	ldr	r2, [r7, #0]
 800e9f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	68fa      	ldr	r2, [r7, #12]
 800e9f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	683a      	ldr	r2, [r7, #0]
 800e9fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	687a      	ldr	r2, [r7, #4]
 800ea04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	1c5a      	adds	r2, r3, #1
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	601a      	str	r2, [r3, #0]
}
 800ea10:	bf00      	nop
 800ea12:	3714      	adds	r7, #20
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b085      	sub	sp, #20
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	691b      	ldr	r3, [r3, #16]
 800ea28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	687a      	ldr	r2, [r7, #4]
 800ea30:	6892      	ldr	r2, [r2, #8]
 800ea32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	689b      	ldr	r3, [r3, #8]
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	6852      	ldr	r2, [r2, #4]
 800ea3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d103      	bne.n	800ea50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	689a      	ldr	r2, [r3, #8]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	1e5a      	subs	r2, r3, #1
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3714      	adds	r7, #20
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr

0800ea70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d109      	bne.n	800ea98 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ea84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea88:	f383 8811 	msr	BASEPRI, r3
 800ea8c:	f3bf 8f6f 	isb	sy
 800ea90:	f3bf 8f4f 	dsb	sy
 800ea94:	60bb      	str	r3, [r7, #8]
 800ea96:	e7fe      	b.n	800ea96 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ea98:	f002 ff30 	bl	80118fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaa4:	68f9      	ldr	r1, [r7, #12]
 800eaa6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eaa8:	fb01 f303 	mul.w	r3, r1, r3
 800eaac:	441a      	add	r2, r3
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2200      	movs	r2, #0
 800eab6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681a      	ldr	r2, [r3, #0]
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eac8:	3b01      	subs	r3, #1
 800eaca:	68f9      	ldr	r1, [r7, #12]
 800eacc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eace:	fb01 f303 	mul.w	r3, r1, r3
 800ead2:	441a      	add	r2, r3
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	22ff      	movs	r2, #255	; 0xff
 800eadc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	22ff      	movs	r2, #255	; 0xff
 800eae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d114      	bne.n	800eb18 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	691b      	ldr	r3, [r3, #16]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d01a      	beq.n	800eb2c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	3310      	adds	r3, #16
 800eafa:	4618      	mov	r0, r3
 800eafc:	f001 fce4 	bl	80104c8 <xTaskRemoveFromEventList>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d012      	beq.n	800eb2c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eb06:	4b0d      	ldr	r3, [pc, #52]	; (800eb3c <xQueueGenericReset+0xcc>)
 800eb08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb0c:	601a      	str	r2, [r3, #0]
 800eb0e:	f3bf 8f4f 	dsb	sy
 800eb12:	f3bf 8f6f 	isb	sy
 800eb16:	e009      	b.n	800eb2c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	3310      	adds	r3, #16
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7ff fef3 	bl	800e908 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	3324      	adds	r3, #36	; 0x24
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7ff feee 	bl	800e908 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eb2c:	f002 ff14 	bl	8011958 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eb30:	2301      	movs	r3, #1
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3710      	adds	r7, #16
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	e000ed04 	.word	0xe000ed04

0800eb40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b08e      	sub	sp, #56	; 0x38
 800eb44:	af02      	add	r7, sp, #8
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	607a      	str	r2, [r7, #4]
 800eb4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d109      	bne.n	800eb68 <xQueueGenericCreateStatic+0x28>
 800eb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb58:	f383 8811 	msr	BASEPRI, r3
 800eb5c:	f3bf 8f6f 	isb	sy
 800eb60:	f3bf 8f4f 	dsb	sy
 800eb64:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb66:	e7fe      	b.n	800eb66 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d109      	bne.n	800eb82 <xQueueGenericCreateStatic+0x42>
 800eb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb72:	f383 8811 	msr	BASEPRI, r3
 800eb76:	f3bf 8f6f 	isb	sy
 800eb7a:	f3bf 8f4f 	dsb	sy
 800eb7e:	627b      	str	r3, [r7, #36]	; 0x24
 800eb80:	e7fe      	b.n	800eb80 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d002      	beq.n	800eb8e <xQueueGenericCreateStatic+0x4e>
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d001      	beq.n	800eb92 <xQueueGenericCreateStatic+0x52>
 800eb8e:	2301      	movs	r3, #1
 800eb90:	e000      	b.n	800eb94 <xQueueGenericCreateStatic+0x54>
 800eb92:	2300      	movs	r3, #0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d109      	bne.n	800ebac <xQueueGenericCreateStatic+0x6c>
 800eb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb9c:	f383 8811 	msr	BASEPRI, r3
 800eba0:	f3bf 8f6f 	isb	sy
 800eba4:	f3bf 8f4f 	dsb	sy
 800eba8:	623b      	str	r3, [r7, #32]
 800ebaa:	e7fe      	b.n	800ebaa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d102      	bne.n	800ebb8 <xQueueGenericCreateStatic+0x78>
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d101      	bne.n	800ebbc <xQueueGenericCreateStatic+0x7c>
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e000      	b.n	800ebbe <xQueueGenericCreateStatic+0x7e>
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d109      	bne.n	800ebd6 <xQueueGenericCreateStatic+0x96>
 800ebc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc6:	f383 8811 	msr	BASEPRI, r3
 800ebca:	f3bf 8f6f 	isb	sy
 800ebce:	f3bf 8f4f 	dsb	sy
 800ebd2:	61fb      	str	r3, [r7, #28]
 800ebd4:	e7fe      	b.n	800ebd4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ebd6:	2350      	movs	r3, #80	; 0x50
 800ebd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	2b50      	cmp	r3, #80	; 0x50
 800ebde:	d009      	beq.n	800ebf4 <xQueueGenericCreateStatic+0xb4>
 800ebe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe4:	f383 8811 	msr	BASEPRI, r3
 800ebe8:	f3bf 8f6f 	isb	sy
 800ebec:	f3bf 8f4f 	dsb	sy
 800ebf0:	61bb      	str	r3, [r7, #24]
 800ebf2:	e7fe      	b.n	800ebf2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ebf4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ebfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d00d      	beq.n	800ec1c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ec00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec02:	2201      	movs	r2, #1
 800ec04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec08:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ec0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0e:	9300      	str	r3, [sp, #0]
 800ec10:	4613      	mov	r3, r2
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	68b9      	ldr	r1, [r7, #8]
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f000 f844 	bl	800eca4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ec1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3730      	adds	r7, #48	; 0x30
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}

0800ec26 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ec26:	b580      	push	{r7, lr}
 800ec28:	b08a      	sub	sp, #40	; 0x28
 800ec2a:	af02      	add	r7, sp, #8
 800ec2c:	60f8      	str	r0, [r7, #12]
 800ec2e:	60b9      	str	r1, [r7, #8]
 800ec30:	4613      	mov	r3, r2
 800ec32:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d109      	bne.n	800ec4e <xQueueGenericCreate+0x28>
 800ec3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3e:	f383 8811 	msr	BASEPRI, r3
 800ec42:	f3bf 8f6f 	isb	sy
 800ec46:	f3bf 8f4f 	dsb	sy
 800ec4a:	613b      	str	r3, [r7, #16]
 800ec4c:	e7fe      	b.n	800ec4c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d102      	bne.n	800ec5a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ec54:	2300      	movs	r3, #0
 800ec56:	61fb      	str	r3, [r7, #28]
 800ec58:	e004      	b.n	800ec64 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	68ba      	ldr	r2, [r7, #8]
 800ec5e:	fb02 f303 	mul.w	r3, r2, r3
 800ec62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ec64:	69fb      	ldr	r3, [r7, #28]
 800ec66:	3350      	adds	r3, #80	; 0x50
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f002 ff61 	bl	8011b30 <pvPortMalloc>
 800ec6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d011      	beq.n	800ec9a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	3350      	adds	r3, #80	; 0x50
 800ec7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ec80:	69bb      	ldr	r3, [r7, #24]
 800ec82:	2200      	movs	r2, #0
 800ec84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec88:	79fa      	ldrb	r2, [r7, #7]
 800ec8a:	69bb      	ldr	r3, [r7, #24]
 800ec8c:	9300      	str	r3, [sp, #0]
 800ec8e:	4613      	mov	r3, r2
 800ec90:	697a      	ldr	r2, [r7, #20]
 800ec92:	68b9      	ldr	r1, [r7, #8]
 800ec94:	68f8      	ldr	r0, [r7, #12]
 800ec96:	f000 f805 	bl	800eca4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ec9a:	69bb      	ldr	r3, [r7, #24]
	}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3720      	adds	r7, #32
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	607a      	str	r2, [r7, #4]
 800ecb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d103      	bne.n	800ecc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	69ba      	ldr	r2, [r7, #24]
 800ecbc:	601a      	str	r2, [r3, #0]
 800ecbe:	e002      	b.n	800ecc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ecc0:	69bb      	ldr	r3, [r7, #24]
 800ecc2:	687a      	ldr	r2, [r7, #4]
 800ecc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	68fa      	ldr	r2, [r7, #12]
 800ecca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eccc:	69bb      	ldr	r3, [r7, #24]
 800ecce:	68ba      	ldr	r2, [r7, #8]
 800ecd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ecd2:	2101      	movs	r1, #1
 800ecd4:	69b8      	ldr	r0, [r7, #24]
 800ecd6:	f7ff fecb 	bl	800ea70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ecda:	69bb      	ldr	r3, [r7, #24]
 800ecdc:	78fa      	ldrb	r2, [r7, #3]
 800ecde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ece2:	bf00      	nop
 800ece4:	3710      	adds	r7, #16
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}

0800ecea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ecea:	b580      	push	{r7, lr}
 800ecec:	b082      	sub	sp, #8
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d00e      	beq.n	800ed16 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2200      	movs	r2, #0
 800ed02:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	2100      	movs	r1, #0
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f000 f905 	bl	800ef20 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ed16:	bf00      	nop
 800ed18:	3708      	adds	r7, #8
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}

0800ed1e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ed1e:	b580      	push	{r7, lr}
 800ed20:	b086      	sub	sp, #24
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	4603      	mov	r3, r0
 800ed26:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ed28:	2301      	movs	r3, #1
 800ed2a:	617b      	str	r3, [r7, #20]
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ed30:	79fb      	ldrb	r3, [r7, #7]
 800ed32:	461a      	mov	r2, r3
 800ed34:	6939      	ldr	r1, [r7, #16]
 800ed36:	6978      	ldr	r0, [r7, #20]
 800ed38:	f7ff ff75 	bl	800ec26 <xQueueGenericCreate>
 800ed3c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ed3e:	68f8      	ldr	r0, [r7, #12]
 800ed40:	f7ff ffd3 	bl	800ecea <prvInitialiseMutex>

		return xNewQueue;
 800ed44:	68fb      	ldr	r3, [r7, #12]
	}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3718      	adds	r7, #24
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b088      	sub	sp, #32
 800ed52:	af02      	add	r7, sp, #8
 800ed54:	4603      	mov	r3, r0
 800ed56:	6039      	str	r1, [r7, #0]
 800ed58:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	617b      	str	r3, [r7, #20]
 800ed5e:	2300      	movs	r3, #0
 800ed60:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ed62:	79fb      	ldrb	r3, [r7, #7]
 800ed64:	9300      	str	r3, [sp, #0]
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	6939      	ldr	r1, [r7, #16]
 800ed6c:	6978      	ldr	r0, [r7, #20]
 800ed6e:	f7ff fee7 	bl	800eb40 <xQueueGenericCreateStatic>
 800ed72:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ed74:	68f8      	ldr	r0, [r7, #12]
 800ed76:	f7ff ffb8 	bl	800ecea <prvInitialiseMutex>

		return xNewQueue;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
	}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3718      	adds	r7, #24
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ed84:	b590      	push	{r4, r7, lr}
 800ed86:	b087      	sub	sp, #28
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d109      	bne.n	800edaa <xQueueGiveMutexRecursive+0x26>
 800ed96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9a:	f383 8811 	msr	BASEPRI, r3
 800ed9e:	f3bf 8f6f 	isb	sy
 800eda2:	f3bf 8f4f 	dsb	sy
 800eda6:	60fb      	str	r3, [r7, #12]
 800eda8:	e7fe      	b.n	800eda8 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	689c      	ldr	r4, [r3, #8]
 800edae:	f001 fd69 	bl	8010884 <xTaskGetCurrentTaskHandle>
 800edb2:	4603      	mov	r3, r0
 800edb4:	429c      	cmp	r4, r3
 800edb6:	d111      	bne.n	800eddc <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	1e5a      	subs	r2, r3, #1
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	68db      	ldr	r3, [r3, #12]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d105      	bne.n	800edd6 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800edca:	2300      	movs	r3, #0
 800edcc:	2200      	movs	r2, #0
 800edce:	2100      	movs	r1, #0
 800edd0:	6938      	ldr	r0, [r7, #16]
 800edd2:	f000 f8a5 	bl	800ef20 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800edd6:	2301      	movs	r3, #1
 800edd8:	617b      	str	r3, [r7, #20]
 800edda:	e001      	b.n	800ede0 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800eddc:	2300      	movs	r3, #0
 800edde:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ede0:	697b      	ldr	r3, [r7, #20]
	}
 800ede2:	4618      	mov	r0, r3
 800ede4:	371c      	adds	r7, #28
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd90      	pop	{r4, r7, pc}

0800edea <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800edea:	b590      	push	{r4, r7, lr}
 800edec:	b087      	sub	sp, #28
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
 800edf2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d109      	bne.n	800ee12 <xQueueTakeMutexRecursive+0x28>
 800edfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	60fb      	str	r3, [r7, #12]
 800ee10:	e7fe      	b.n	800ee10 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	689c      	ldr	r4, [r3, #8]
 800ee16:	f001 fd35 	bl	8010884 <xTaskGetCurrentTaskHandle>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	429c      	cmp	r4, r3
 800ee1e:	d107      	bne.n	800ee30 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	1c5a      	adds	r2, r3, #1
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	617b      	str	r3, [r7, #20]
 800ee2e:	e00c      	b.n	800ee4a <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ee30:	6839      	ldr	r1, [r7, #0]
 800ee32:	6938      	ldr	r0, [r7, #16]
 800ee34:	f000 fb68 	bl	800f508 <xQueueSemaphoreTake>
 800ee38:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d004      	beq.n	800ee4a <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	68db      	ldr	r3, [r3, #12]
 800ee44:	1c5a      	adds	r2, r3, #1
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800ee4a:	697b      	ldr	r3, [r7, #20]
	}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	371c      	adds	r7, #28
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd90      	pop	{r4, r7, pc}

0800ee54 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b08a      	sub	sp, #40	; 0x28
 800ee58:	af02      	add	r7, sp, #8
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	60b9      	str	r1, [r7, #8]
 800ee5e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d109      	bne.n	800ee7a <xQueueCreateCountingSemaphoreStatic+0x26>
 800ee66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee6a:	f383 8811 	msr	BASEPRI, r3
 800ee6e:	f3bf 8f6f 	isb	sy
 800ee72:	f3bf 8f4f 	dsb	sy
 800ee76:	61bb      	str	r3, [r7, #24]
 800ee78:	e7fe      	b.n	800ee78 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ee7a:	68ba      	ldr	r2, [r7, #8]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d909      	bls.n	800ee96 <xQueueCreateCountingSemaphoreStatic+0x42>
 800ee82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee86:	f383 8811 	msr	BASEPRI, r3
 800ee8a:	f3bf 8f6f 	isb	sy
 800ee8e:	f3bf 8f4f 	dsb	sy
 800ee92:	617b      	str	r3, [r7, #20]
 800ee94:	e7fe      	b.n	800ee94 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ee96:	2302      	movs	r3, #2
 800ee98:	9300      	str	r3, [sp, #0]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	2100      	movs	r1, #0
 800eea0:	68f8      	ldr	r0, [r7, #12]
 800eea2:	f7ff fe4d 	bl	800eb40 <xQueueGenericCreateStatic>
 800eea6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800eea8:	69fb      	ldr	r3, [r7, #28]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d002      	beq.n	800eeb4 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800eeae:	69fb      	ldr	r3, [r7, #28]
 800eeb0:	68ba      	ldr	r2, [r7, #8]
 800eeb2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800eeb4:	69fb      	ldr	r3, [r7, #28]
	}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3720      	adds	r7, #32
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}

0800eebe <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800eebe:	b580      	push	{r7, lr}
 800eec0:	b086      	sub	sp, #24
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
 800eec6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d109      	bne.n	800eee2 <xQueueCreateCountingSemaphore+0x24>
 800eece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed2:	f383 8811 	msr	BASEPRI, r3
 800eed6:	f3bf 8f6f 	isb	sy
 800eeda:	f3bf 8f4f 	dsb	sy
 800eede:	613b      	str	r3, [r7, #16]
 800eee0:	e7fe      	b.n	800eee0 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800eee2:	683a      	ldr	r2, [r7, #0]
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d909      	bls.n	800eefe <xQueueCreateCountingSemaphore+0x40>
 800eeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeee:	f383 8811 	msr	BASEPRI, r3
 800eef2:	f3bf 8f6f 	isb	sy
 800eef6:	f3bf 8f4f 	dsb	sy
 800eefa:	60fb      	str	r3, [r7, #12]
 800eefc:	e7fe      	b.n	800eefc <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800eefe:	2202      	movs	r2, #2
 800ef00:	2100      	movs	r1, #0
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f7ff fe8f 	bl	800ec26 <xQueueGenericCreate>
 800ef08:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d002      	beq.n	800ef16 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	683a      	ldr	r2, [r7, #0]
 800ef14:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ef16:	697b      	ldr	r3, [r7, #20]
	}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3718      	adds	r7, #24
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b08e      	sub	sp, #56	; 0x38
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	60f8      	str	r0, [r7, #12]
 800ef28:	60b9      	str	r1, [r7, #8]
 800ef2a:	607a      	str	r2, [r7, #4]
 800ef2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ef36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d109      	bne.n	800ef50 <xQueueGenericSend+0x30>
 800ef3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef40:	f383 8811 	msr	BASEPRI, r3
 800ef44:	f3bf 8f6f 	isb	sy
 800ef48:	f3bf 8f4f 	dsb	sy
 800ef4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef4e:	e7fe      	b.n	800ef4e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d103      	bne.n	800ef5e <xQueueGenericSend+0x3e>
 800ef56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d101      	bne.n	800ef62 <xQueueGenericSend+0x42>
 800ef5e:	2301      	movs	r3, #1
 800ef60:	e000      	b.n	800ef64 <xQueueGenericSend+0x44>
 800ef62:	2300      	movs	r3, #0
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d109      	bne.n	800ef7c <xQueueGenericSend+0x5c>
 800ef68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6c:	f383 8811 	msr	BASEPRI, r3
 800ef70:	f3bf 8f6f 	isb	sy
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	627b      	str	r3, [r7, #36]	; 0x24
 800ef7a:	e7fe      	b.n	800ef7a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	2b02      	cmp	r3, #2
 800ef80:	d103      	bne.n	800ef8a <xQueueGenericSend+0x6a>
 800ef82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef86:	2b01      	cmp	r3, #1
 800ef88:	d101      	bne.n	800ef8e <xQueueGenericSend+0x6e>
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	e000      	b.n	800ef90 <xQueueGenericSend+0x70>
 800ef8e:	2300      	movs	r3, #0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d109      	bne.n	800efa8 <xQueueGenericSend+0x88>
 800ef94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef98:	f383 8811 	msr	BASEPRI, r3
 800ef9c:	f3bf 8f6f 	isb	sy
 800efa0:	f3bf 8f4f 	dsb	sy
 800efa4:	623b      	str	r3, [r7, #32]
 800efa6:	e7fe      	b.n	800efa6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800efa8:	f001 fc7c 	bl	80108a4 <xTaskGetSchedulerState>
 800efac:	4603      	mov	r3, r0
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d102      	bne.n	800efb8 <xQueueGenericSend+0x98>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d101      	bne.n	800efbc <xQueueGenericSend+0x9c>
 800efb8:	2301      	movs	r3, #1
 800efba:	e000      	b.n	800efbe <xQueueGenericSend+0x9e>
 800efbc:	2300      	movs	r3, #0
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d109      	bne.n	800efd6 <xQueueGenericSend+0xb6>
 800efc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc6:	f383 8811 	msr	BASEPRI, r3
 800efca:	f3bf 8f6f 	isb	sy
 800efce:	f3bf 8f4f 	dsb	sy
 800efd2:	61fb      	str	r3, [r7, #28]
 800efd4:	e7fe      	b.n	800efd4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800efd6:	f002 fc91 	bl	80118fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800efda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800efde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d302      	bcc.n	800efec <xQueueGenericSend+0xcc>
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	2b02      	cmp	r3, #2
 800efea:	d129      	bne.n	800f040 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800efec:	683a      	ldr	r2, [r7, #0]
 800efee:	68b9      	ldr	r1, [r7, #8]
 800eff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eff2:	f000 fc48 	bl	800f886 <prvCopyDataToQueue>
 800eff6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800effc:	2b00      	cmp	r3, #0
 800effe:	d010      	beq.n	800f022 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f002:	3324      	adds	r3, #36	; 0x24
 800f004:	4618      	mov	r0, r3
 800f006:	f001 fa5f 	bl	80104c8 <xTaskRemoveFromEventList>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d013      	beq.n	800f038 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f010:	4b3f      	ldr	r3, [pc, #252]	; (800f110 <xQueueGenericSend+0x1f0>)
 800f012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f016:	601a      	str	r2, [r3, #0]
 800f018:	f3bf 8f4f 	dsb	sy
 800f01c:	f3bf 8f6f 	isb	sy
 800f020:	e00a      	b.n	800f038 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f024:	2b00      	cmp	r3, #0
 800f026:	d007      	beq.n	800f038 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f028:	4b39      	ldr	r3, [pc, #228]	; (800f110 <xQueueGenericSend+0x1f0>)
 800f02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f02e:	601a      	str	r2, [r3, #0]
 800f030:	f3bf 8f4f 	dsb	sy
 800f034:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f038:	f002 fc8e 	bl	8011958 <vPortExitCritical>
				return pdPASS;
 800f03c:	2301      	movs	r3, #1
 800f03e:	e063      	b.n	800f108 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d103      	bne.n	800f04e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f046:	f002 fc87 	bl	8011958 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f04a:	2300      	movs	r3, #0
 800f04c:	e05c      	b.n	800f108 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f050:	2b00      	cmp	r3, #0
 800f052:	d106      	bne.n	800f062 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f054:	f107 0314 	add.w	r3, r7, #20
 800f058:	4618      	mov	r0, r3
 800f05a:	f001 fa99 	bl	8010590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f05e:	2301      	movs	r3, #1
 800f060:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f062:	f002 fc79 	bl	8011958 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f066:	f000 ffdb 	bl	8010020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f06a:	f002 fc47 	bl	80118fc <vPortEnterCritical>
 800f06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f074:	b25b      	sxtb	r3, r3
 800f076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f07a:	d103      	bne.n	800f084 <xQueueGenericSend+0x164>
 800f07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07e:	2200      	movs	r2, #0
 800f080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f08a:	b25b      	sxtb	r3, r3
 800f08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f090:	d103      	bne.n	800f09a <xQueueGenericSend+0x17a>
 800f092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f094:	2200      	movs	r2, #0
 800f096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f09a:	f002 fc5d 	bl	8011958 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f09e:	1d3a      	adds	r2, r7, #4
 800f0a0:	f107 0314 	add.w	r3, r7, #20
 800f0a4:	4611      	mov	r1, r2
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f001 fa88 	bl	80105bc <xTaskCheckForTimeOut>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d124      	bne.n	800f0fc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f0b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0b4:	f000 fcdf 	bl	800fa76 <prvIsQueueFull>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d018      	beq.n	800f0f0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c0:	3310      	adds	r3, #16
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	4611      	mov	r1, r2
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f001 f9b0 	bl	801042c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f0cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0ce:	f000 fc6a 	bl	800f9a6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f0d2:	f000 ffeb 	bl	80100ac <xTaskResumeAll>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	f47f af7c 	bne.w	800efd6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800f0de:	4b0c      	ldr	r3, [pc, #48]	; (800f110 <xQueueGenericSend+0x1f0>)
 800f0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0e4:	601a      	str	r2, [r3, #0]
 800f0e6:	f3bf 8f4f 	dsb	sy
 800f0ea:	f3bf 8f6f 	isb	sy
 800f0ee:	e772      	b.n	800efd6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f0f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0f2:	f000 fc58 	bl	800f9a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f0f6:	f000 ffd9 	bl	80100ac <xTaskResumeAll>
 800f0fa:	e76c      	b.n	800efd6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f0fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0fe:	f000 fc52 	bl	800f9a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f102:	f000 ffd3 	bl	80100ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f106:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3738      	adds	r7, #56	; 0x38
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}
 800f110:	e000ed04 	.word	0xe000ed04

0800f114 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b08e      	sub	sp, #56	; 0x38
 800f118:	af00      	add	r7, sp, #0
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	607a      	str	r2, [r7, #4]
 800f120:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d109      	bne.n	800f140 <xQueueGenericSendFromISR+0x2c>
 800f12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f130:	f383 8811 	msr	BASEPRI, r3
 800f134:	f3bf 8f6f 	isb	sy
 800f138:	f3bf 8f4f 	dsb	sy
 800f13c:	627b      	str	r3, [r7, #36]	; 0x24
 800f13e:	e7fe      	b.n	800f13e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d103      	bne.n	800f14e <xQueueGenericSendFromISR+0x3a>
 800f146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d101      	bne.n	800f152 <xQueueGenericSendFromISR+0x3e>
 800f14e:	2301      	movs	r3, #1
 800f150:	e000      	b.n	800f154 <xQueueGenericSendFromISR+0x40>
 800f152:	2300      	movs	r3, #0
 800f154:	2b00      	cmp	r3, #0
 800f156:	d109      	bne.n	800f16c <xQueueGenericSendFromISR+0x58>
 800f158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f15c:	f383 8811 	msr	BASEPRI, r3
 800f160:	f3bf 8f6f 	isb	sy
 800f164:	f3bf 8f4f 	dsb	sy
 800f168:	623b      	str	r3, [r7, #32]
 800f16a:	e7fe      	b.n	800f16a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	2b02      	cmp	r3, #2
 800f170:	d103      	bne.n	800f17a <xQueueGenericSendFromISR+0x66>
 800f172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f176:	2b01      	cmp	r3, #1
 800f178:	d101      	bne.n	800f17e <xQueueGenericSendFromISR+0x6a>
 800f17a:	2301      	movs	r3, #1
 800f17c:	e000      	b.n	800f180 <xQueueGenericSendFromISR+0x6c>
 800f17e:	2300      	movs	r3, #0
 800f180:	2b00      	cmp	r3, #0
 800f182:	d109      	bne.n	800f198 <xQueueGenericSendFromISR+0x84>
 800f184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f188:	f383 8811 	msr	BASEPRI, r3
 800f18c:	f3bf 8f6f 	isb	sy
 800f190:	f3bf 8f4f 	dsb	sy
 800f194:	61fb      	str	r3, [r7, #28]
 800f196:	e7fe      	b.n	800f196 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f198:	f002 fc8c 	bl	8011ab4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f19c:	f3ef 8211 	mrs	r2, BASEPRI
 800f1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a4:	f383 8811 	msr	BASEPRI, r3
 800f1a8:	f3bf 8f6f 	isb	sy
 800f1ac:	f3bf 8f4f 	dsb	sy
 800f1b0:	61ba      	str	r2, [r7, #24]
 800f1b2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f1b4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d302      	bcc.n	800f1ca <xQueueGenericSendFromISR+0xb6>
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	2b02      	cmp	r3, #2
 800f1c8:	d12c      	bne.n	800f224 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f1d4:	683a      	ldr	r2, [r7, #0]
 800f1d6:	68b9      	ldr	r1, [r7, #8]
 800f1d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1da:	f000 fb54 	bl	800f886 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f1de:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1e6:	d112      	bne.n	800f20e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d016      	beq.n	800f21e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f2:	3324      	adds	r3, #36	; 0x24
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f001 f967 	bl	80104c8 <xTaskRemoveFromEventList>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d00e      	beq.n	800f21e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d00b      	beq.n	800f21e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2201      	movs	r2, #1
 800f20a:	601a      	str	r2, [r3, #0]
 800f20c:	e007      	b.n	800f21e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f20e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f212:	3301      	adds	r3, #1
 800f214:	b2db      	uxtb	r3, r3
 800f216:	b25a      	sxtb	r2, r3
 800f218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f21e:	2301      	movs	r3, #1
 800f220:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f222:	e001      	b.n	800f228 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f224:	2300      	movs	r3, #0
 800f226:	637b      	str	r3, [r7, #52]	; 0x34
 800f228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f234:	4618      	mov	r0, r3
 800f236:	3738      	adds	r7, #56	; 0x38
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}

0800f23c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b08e      	sub	sp, #56	; 0x38
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d109      	bne.n	800f264 <xQueueGiveFromISR+0x28>
	__asm volatile
 800f250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f254:	f383 8811 	msr	BASEPRI, r3
 800f258:	f3bf 8f6f 	isb	sy
 800f25c:	f3bf 8f4f 	dsb	sy
 800f260:	623b      	str	r3, [r7, #32]
 800f262:	e7fe      	b.n	800f262 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d009      	beq.n	800f280 <xQueueGiveFromISR+0x44>
 800f26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f270:	f383 8811 	msr	BASEPRI, r3
 800f274:	f3bf 8f6f 	isb	sy
 800f278:	f3bf 8f4f 	dsb	sy
 800f27c:	61fb      	str	r3, [r7, #28]
 800f27e:	e7fe      	b.n	800f27e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d103      	bne.n	800f290 <xQueueGiveFromISR+0x54>
 800f288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28a:	689b      	ldr	r3, [r3, #8]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d101      	bne.n	800f294 <xQueueGiveFromISR+0x58>
 800f290:	2301      	movs	r3, #1
 800f292:	e000      	b.n	800f296 <xQueueGiveFromISR+0x5a>
 800f294:	2300      	movs	r3, #0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d109      	bne.n	800f2ae <xQueueGiveFromISR+0x72>
 800f29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f29e:	f383 8811 	msr	BASEPRI, r3
 800f2a2:	f3bf 8f6f 	isb	sy
 800f2a6:	f3bf 8f4f 	dsb	sy
 800f2aa:	61bb      	str	r3, [r7, #24]
 800f2ac:	e7fe      	b.n	800f2ac <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f2ae:	f002 fc01 	bl	8011ab4 <vPortValidateInterruptPriority>
	__asm volatile
 800f2b2:	f3ef 8211 	mrs	r2, BASEPRI
 800f2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ba:	f383 8811 	msr	BASEPRI, r3
 800f2be:	f3bf 8f6f 	isb	sy
 800f2c2:	f3bf 8f4f 	dsb	sy
 800f2c6:	617a      	str	r2, [r7, #20]
 800f2c8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f2ca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d22b      	bcs.n	800f336 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ea:	1c5a      	adds	r2, r3, #1
 800f2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f2f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2f8:	d112      	bne.n	800f320 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d016      	beq.n	800f330 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f304:	3324      	adds	r3, #36	; 0x24
 800f306:	4618      	mov	r0, r3
 800f308:	f001 f8de 	bl	80104c8 <xTaskRemoveFromEventList>
 800f30c:	4603      	mov	r3, r0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00e      	beq.n	800f330 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d00b      	beq.n	800f330 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	2201      	movs	r2, #1
 800f31c:	601a      	str	r2, [r3, #0]
 800f31e:	e007      	b.n	800f330 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f324:	3301      	adds	r3, #1
 800f326:	b2db      	uxtb	r3, r3
 800f328:	b25a      	sxtb	r2, r3
 800f32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f32c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f330:	2301      	movs	r3, #1
 800f332:	637b      	str	r3, [r7, #52]	; 0x34
 800f334:	e001      	b.n	800f33a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f336:	2300      	movs	r3, #0
 800f338:	637b      	str	r3, [r7, #52]	; 0x34
 800f33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f346:	4618      	mov	r0, r3
 800f348:	3738      	adds	r7, #56	; 0x38
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
	...

0800f350 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b08c      	sub	sp, #48	; 0x30
 800f354:	af00      	add	r7, sp, #0
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	60b9      	str	r1, [r7, #8]
 800f35a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f35c:	2300      	movs	r3, #0
 800f35e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f366:	2b00      	cmp	r3, #0
 800f368:	d109      	bne.n	800f37e <xQueueReceive+0x2e>
	__asm volatile
 800f36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f36e:	f383 8811 	msr	BASEPRI, r3
 800f372:	f3bf 8f6f 	isb	sy
 800f376:	f3bf 8f4f 	dsb	sy
 800f37a:	623b      	str	r3, [r7, #32]
 800f37c:	e7fe      	b.n	800f37c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d103      	bne.n	800f38c <xQueueReceive+0x3c>
 800f384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d101      	bne.n	800f390 <xQueueReceive+0x40>
 800f38c:	2301      	movs	r3, #1
 800f38e:	e000      	b.n	800f392 <xQueueReceive+0x42>
 800f390:	2300      	movs	r3, #0
 800f392:	2b00      	cmp	r3, #0
 800f394:	d109      	bne.n	800f3aa <xQueueReceive+0x5a>
 800f396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f39a:	f383 8811 	msr	BASEPRI, r3
 800f39e:	f3bf 8f6f 	isb	sy
 800f3a2:	f3bf 8f4f 	dsb	sy
 800f3a6:	61fb      	str	r3, [r7, #28]
 800f3a8:	e7fe      	b.n	800f3a8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f3aa:	f001 fa7b 	bl	80108a4 <xTaskGetSchedulerState>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d102      	bne.n	800f3ba <xQueueReceive+0x6a>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d101      	bne.n	800f3be <xQueueReceive+0x6e>
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	e000      	b.n	800f3c0 <xQueueReceive+0x70>
 800f3be:	2300      	movs	r3, #0
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d109      	bne.n	800f3d8 <xQueueReceive+0x88>
 800f3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c8:	f383 8811 	msr	BASEPRI, r3
 800f3cc:	f3bf 8f6f 	isb	sy
 800f3d0:	f3bf 8f4f 	dsb	sy
 800f3d4:	61bb      	str	r3, [r7, #24]
 800f3d6:	e7fe      	b.n	800f3d6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f3d8:	f002 fa90 	bl	80118fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3e0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d01f      	beq.n	800f428 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f3e8:	68b9      	ldr	r1, [r7, #8]
 800f3ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3ec:	f000 fab5 	bl	800f95a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f2:	1e5a      	subs	r2, r3, #1
 800f3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fa:	691b      	ldr	r3, [r3, #16]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d00f      	beq.n	800f420 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f402:	3310      	adds	r3, #16
 800f404:	4618      	mov	r0, r3
 800f406:	f001 f85f 	bl	80104c8 <xTaskRemoveFromEventList>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d007      	beq.n	800f420 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f410:	4b3c      	ldr	r3, [pc, #240]	; (800f504 <xQueueReceive+0x1b4>)
 800f412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f416:	601a      	str	r2, [r3, #0]
 800f418:	f3bf 8f4f 	dsb	sy
 800f41c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f420:	f002 fa9a 	bl	8011958 <vPortExitCritical>
				return pdPASS;
 800f424:	2301      	movs	r3, #1
 800f426:	e069      	b.n	800f4fc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d103      	bne.n	800f436 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f42e:	f002 fa93 	bl	8011958 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f432:	2300      	movs	r3, #0
 800f434:	e062      	b.n	800f4fc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d106      	bne.n	800f44a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f43c:	f107 0310 	add.w	r3, r7, #16
 800f440:	4618      	mov	r0, r3
 800f442:	f001 f8a5 	bl	8010590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f446:	2301      	movs	r3, #1
 800f448:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f44a:	f002 fa85 	bl	8011958 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f44e:	f000 fde7 	bl	8010020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f452:	f002 fa53 	bl	80118fc <vPortEnterCritical>
 800f456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f458:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f45c:	b25b      	sxtb	r3, r3
 800f45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f462:	d103      	bne.n	800f46c <xQueueReceive+0x11c>
 800f464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f466:	2200      	movs	r2, #0
 800f468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f472:	b25b      	sxtb	r3, r3
 800f474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f478:	d103      	bne.n	800f482 <xQueueReceive+0x132>
 800f47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47c:	2200      	movs	r2, #0
 800f47e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f482:	f002 fa69 	bl	8011958 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f486:	1d3a      	adds	r2, r7, #4
 800f488:	f107 0310 	add.w	r3, r7, #16
 800f48c:	4611      	mov	r1, r2
 800f48e:	4618      	mov	r0, r3
 800f490:	f001 f894 	bl	80105bc <xTaskCheckForTimeOut>
 800f494:	4603      	mov	r3, r0
 800f496:	2b00      	cmp	r3, #0
 800f498:	d123      	bne.n	800f4e2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f49a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f49c:	f000 fad5 	bl	800fa4a <prvIsQueueEmpty>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d017      	beq.n	800f4d6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a8:	3324      	adds	r3, #36	; 0x24
 800f4aa:	687a      	ldr	r2, [r7, #4]
 800f4ac:	4611      	mov	r1, r2
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f000 ffbc 	bl	801042c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f4b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4b6:	f000 fa76 	bl	800f9a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f4ba:	f000 fdf7 	bl	80100ac <xTaskResumeAll>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d189      	bne.n	800f3d8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800f4c4:	4b0f      	ldr	r3, [pc, #60]	; (800f504 <xQueueReceive+0x1b4>)
 800f4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4ca:	601a      	str	r2, [r3, #0]
 800f4cc:	f3bf 8f4f 	dsb	sy
 800f4d0:	f3bf 8f6f 	isb	sy
 800f4d4:	e780      	b.n	800f3d8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f4d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4d8:	f000 fa65 	bl	800f9a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f4dc:	f000 fde6 	bl	80100ac <xTaskResumeAll>
 800f4e0:	e77a      	b.n	800f3d8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f4e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4e4:	f000 fa5f 	bl	800f9a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f4e8:	f000 fde0 	bl	80100ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4ee:	f000 faac 	bl	800fa4a <prvIsQueueEmpty>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	f43f af6f 	beq.w	800f3d8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f4fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3730      	adds	r7, #48	; 0x30
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}
 800f504:	e000ed04 	.word	0xe000ed04

0800f508 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b08e      	sub	sp, #56	; 0x38
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f512:	2300      	movs	r3, #0
 800f514:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f51a:	2300      	movs	r3, #0
 800f51c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f520:	2b00      	cmp	r3, #0
 800f522:	d109      	bne.n	800f538 <xQueueSemaphoreTake+0x30>
 800f524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f528:	f383 8811 	msr	BASEPRI, r3
 800f52c:	f3bf 8f6f 	isb	sy
 800f530:	f3bf 8f4f 	dsb	sy
 800f534:	623b      	str	r3, [r7, #32]
 800f536:	e7fe      	b.n	800f536 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d009      	beq.n	800f554 <xQueueSemaphoreTake+0x4c>
 800f540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f544:	f383 8811 	msr	BASEPRI, r3
 800f548:	f3bf 8f6f 	isb	sy
 800f54c:	f3bf 8f4f 	dsb	sy
 800f550:	61fb      	str	r3, [r7, #28]
 800f552:	e7fe      	b.n	800f552 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f554:	f001 f9a6 	bl	80108a4 <xTaskGetSchedulerState>
 800f558:	4603      	mov	r3, r0
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d102      	bne.n	800f564 <xQueueSemaphoreTake+0x5c>
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d101      	bne.n	800f568 <xQueueSemaphoreTake+0x60>
 800f564:	2301      	movs	r3, #1
 800f566:	e000      	b.n	800f56a <xQueueSemaphoreTake+0x62>
 800f568:	2300      	movs	r3, #0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d109      	bne.n	800f582 <xQueueSemaphoreTake+0x7a>
 800f56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f572:	f383 8811 	msr	BASEPRI, r3
 800f576:	f3bf 8f6f 	isb	sy
 800f57a:	f3bf 8f4f 	dsb	sy
 800f57e:	61bb      	str	r3, [r7, #24]
 800f580:	e7fe      	b.n	800f580 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f582:	f002 f9bb 	bl	80118fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f58a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d024      	beq.n	800f5dc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f594:	1e5a      	subs	r2, r3, #1
 800f596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f598:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d104      	bne.n	800f5ac <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f5a2:	f001 faf1 	bl	8010b88 <pvTaskIncrementMutexHeldCount>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5aa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ae:	691b      	ldr	r3, [r3, #16]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d00f      	beq.n	800f5d4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b6:	3310      	adds	r3, #16
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f000 ff85 	bl	80104c8 <xTaskRemoveFromEventList>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d007      	beq.n	800f5d4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f5c4:	4b53      	ldr	r3, [pc, #332]	; (800f714 <xQueueSemaphoreTake+0x20c>)
 800f5c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ca:	601a      	str	r2, [r3, #0]
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f5d4:	f002 f9c0 	bl	8011958 <vPortExitCritical>
				return pdPASS;
 800f5d8:	2301      	movs	r3, #1
 800f5da:	e096      	b.n	800f70a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d110      	bne.n	800f604 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d009      	beq.n	800f5fc <xQueueSemaphoreTake+0xf4>
 800f5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ec:	f383 8811 	msr	BASEPRI, r3
 800f5f0:	f3bf 8f6f 	isb	sy
 800f5f4:	f3bf 8f4f 	dsb	sy
 800f5f8:	617b      	str	r3, [r7, #20]
 800f5fa:	e7fe      	b.n	800f5fa <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f5fc:	f002 f9ac 	bl	8011958 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f600:	2300      	movs	r3, #0
 800f602:	e082      	b.n	800f70a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f606:	2b00      	cmp	r3, #0
 800f608:	d106      	bne.n	800f618 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f60a:	f107 030c 	add.w	r3, r7, #12
 800f60e:	4618      	mov	r0, r3
 800f610:	f000 ffbe 	bl	8010590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f614:	2301      	movs	r3, #1
 800f616:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f618:	f002 f99e 	bl	8011958 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f61c:	f000 fd00 	bl	8010020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f620:	f002 f96c 	bl	80118fc <vPortEnterCritical>
 800f624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f62a:	b25b      	sxtb	r3, r3
 800f62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f630:	d103      	bne.n	800f63a <xQueueSemaphoreTake+0x132>
 800f632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f634:	2200      	movs	r2, #0
 800f636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f63c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f640:	b25b      	sxtb	r3, r3
 800f642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f646:	d103      	bne.n	800f650 <xQueueSemaphoreTake+0x148>
 800f648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f64a:	2200      	movs	r2, #0
 800f64c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f650:	f002 f982 	bl	8011958 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f654:	463a      	mov	r2, r7
 800f656:	f107 030c 	add.w	r3, r7, #12
 800f65a:	4611      	mov	r1, r2
 800f65c:	4618      	mov	r0, r3
 800f65e:	f000 ffad 	bl	80105bc <xTaskCheckForTimeOut>
 800f662:	4603      	mov	r3, r0
 800f664:	2b00      	cmp	r3, #0
 800f666:	d132      	bne.n	800f6ce <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f66a:	f000 f9ee 	bl	800fa4a <prvIsQueueEmpty>
 800f66e:	4603      	mov	r3, r0
 800f670:	2b00      	cmp	r3, #0
 800f672:	d026      	beq.n	800f6c2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d109      	bne.n	800f690 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800f67c:	f002 f93e 	bl	80118fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f682:	689b      	ldr	r3, [r3, #8]
 800f684:	4618      	mov	r0, r3
 800f686:	f001 f92b 	bl	80108e0 <xTaskPriorityInherit>
 800f68a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f68c:	f002 f964 	bl	8011958 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f692:	3324      	adds	r3, #36	; 0x24
 800f694:	683a      	ldr	r2, [r7, #0]
 800f696:	4611      	mov	r1, r2
 800f698:	4618      	mov	r0, r3
 800f69a:	f000 fec7 	bl	801042c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f69e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6a0:	f000 f981 	bl	800f9a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f6a4:	f000 fd02 	bl	80100ac <xTaskResumeAll>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	f47f af69 	bne.w	800f582 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800f6b0:	4b18      	ldr	r3, [pc, #96]	; (800f714 <xQueueSemaphoreTake+0x20c>)
 800f6b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6b6:	601a      	str	r2, [r3, #0]
 800f6b8:	f3bf 8f4f 	dsb	sy
 800f6bc:	f3bf 8f6f 	isb	sy
 800f6c0:	e75f      	b.n	800f582 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f6c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6c4:	f000 f96f 	bl	800f9a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f6c8:	f000 fcf0 	bl	80100ac <xTaskResumeAll>
 800f6cc:	e759      	b.n	800f582 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f6ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6d0:	f000 f969 	bl	800f9a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f6d4:	f000 fcea 	bl	80100ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f6d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6da:	f000 f9b6 	bl	800fa4a <prvIsQueueEmpty>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	f43f af4e 	beq.w	800f582 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d00d      	beq.n	800f708 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800f6ec:	f002 f906 	bl	80118fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f6f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6f2:	f000 f8b0 	bl	800f856 <prvGetDisinheritPriorityAfterTimeout>
 800f6f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fa:	689b      	ldr	r3, [r3, #8]
 800f6fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f6fe:	4618      	mov	r0, r3
 800f700:	f001 f9c2 	bl	8010a88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f704:	f002 f928 	bl	8011958 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f708:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3738      	adds	r7, #56	; 0x38
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	e000ed04 	.word	0xe000ed04

0800f718 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b08e      	sub	sp, #56	; 0x38
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d109      	bne.n	800f742 <xQueueReceiveFromISR+0x2a>
 800f72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f732:	f383 8811 	msr	BASEPRI, r3
 800f736:	f3bf 8f6f 	isb	sy
 800f73a:	f3bf 8f4f 	dsb	sy
 800f73e:	623b      	str	r3, [r7, #32]
 800f740:	e7fe      	b.n	800f740 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d103      	bne.n	800f750 <xQueueReceiveFromISR+0x38>
 800f748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d101      	bne.n	800f754 <xQueueReceiveFromISR+0x3c>
 800f750:	2301      	movs	r3, #1
 800f752:	e000      	b.n	800f756 <xQueueReceiveFromISR+0x3e>
 800f754:	2300      	movs	r3, #0
 800f756:	2b00      	cmp	r3, #0
 800f758:	d109      	bne.n	800f76e <xQueueReceiveFromISR+0x56>
 800f75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f75e:	f383 8811 	msr	BASEPRI, r3
 800f762:	f3bf 8f6f 	isb	sy
 800f766:	f3bf 8f4f 	dsb	sy
 800f76a:	61fb      	str	r3, [r7, #28]
 800f76c:	e7fe      	b.n	800f76c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f76e:	f002 f9a1 	bl	8011ab4 <vPortValidateInterruptPriority>
	__asm volatile
 800f772:	f3ef 8211 	mrs	r2, BASEPRI
 800f776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f77a:	f383 8811 	msr	BASEPRI, r3
 800f77e:	f3bf 8f6f 	isb	sy
 800f782:	f3bf 8f4f 	dsb	sy
 800f786:	61ba      	str	r2, [r7, #24]
 800f788:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f78a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f78c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f792:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f796:	2b00      	cmp	r3, #0
 800f798:	d02f      	beq.n	800f7fa <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f7a4:	68b9      	ldr	r1, [r7, #8]
 800f7a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7a8:	f000 f8d7 	bl	800f95a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ae:	1e5a      	subs	r2, r3, #1
 800f7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f7b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7bc:	d112      	bne.n	800f7e4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c0:	691b      	ldr	r3, [r3, #16]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d016      	beq.n	800f7f4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c8:	3310      	adds	r3, #16
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f000 fe7c 	bl	80104c8 <xTaskRemoveFromEventList>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d00e      	beq.n	800f7f4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d00b      	beq.n	800f7f4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	601a      	str	r2, [r3, #0]
 800f7e2:	e007      	b.n	800f7f4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7e8:	3301      	adds	r3, #1
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	b25a      	sxtb	r2, r3
 800f7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	637b      	str	r3, [r7, #52]	; 0x34
 800f7f8:	e001      	b.n	800f7fe <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	637b      	str	r3, [r7, #52]	; 0x34
 800f7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f800:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	3738      	adds	r7, #56	; 0x38
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}

0800f812 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f812:	b580      	push	{r7, lr}
 800f814:	b084      	sub	sp, #16
 800f816:	af00      	add	r7, sp, #0
 800f818:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d109      	bne.n	800f838 <vQueueDelete+0x26>
	__asm volatile
 800f824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f828:	f383 8811 	msr	BASEPRI, r3
 800f82c:	f3bf 8f6f 	isb	sy
 800f830:	f3bf 8f4f 	dsb	sy
 800f834:	60bb      	str	r3, [r7, #8]
 800f836:	e7fe      	b.n	800f836 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f838:	68f8      	ldr	r0, [r7, #12]
 800f83a:	f000 f95d 	bl	800faf8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f844:	2b00      	cmp	r3, #0
 800f846:	d102      	bne.n	800f84e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800f848:	68f8      	ldr	r0, [r7, #12]
 800f84a:	f002 fa33 	bl	8011cb4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f84e:	bf00      	nop
 800f850:	3710      	adds	r7, #16
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}

0800f856 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f856:	b480      	push	{r7}
 800f858:	b085      	sub	sp, #20
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f862:	2b00      	cmp	r3, #0
 800f864:	d006      	beq.n	800f874 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f870:	60fb      	str	r3, [r7, #12]
 800f872:	e001      	b.n	800f878 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f874:	2300      	movs	r3, #0
 800f876:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f878:	68fb      	ldr	r3, [r7, #12]
	}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3714      	adds	r7, #20
 800f87e:	46bd      	mov	sp, r7
 800f880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f884:	4770      	bx	lr

0800f886 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f886:	b580      	push	{r7, lr}
 800f888:	b086      	sub	sp, #24
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	60f8      	str	r0, [r7, #12]
 800f88e:	60b9      	str	r1, [r7, #8]
 800f890:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f892:	2300      	movs	r3, #0
 800f894:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f89a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d10d      	bne.n	800f8c0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d14d      	bne.n	800f948 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	689b      	ldr	r3, [r3, #8]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f001 f87d 	bl	80109b0 <xTaskPriorityDisinherit>
 800f8b6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	609a      	str	r2, [r3, #8]
 800f8be:	e043      	b.n	800f948 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d119      	bne.n	800f8fa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	6858      	ldr	r0, [r3, #4]
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	68b9      	ldr	r1, [r7, #8]
 800f8d2:	f004 f88f 	bl	80139f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	685a      	ldr	r2, [r3, #4]
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8de:	441a      	add	r2, r3
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	685a      	ldr	r2, [r3, #4]
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	689b      	ldr	r3, [r3, #8]
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d32b      	bcc.n	800f948 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	605a      	str	r2, [r3, #4]
 800f8f8:	e026      	b.n	800f948 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	68d8      	ldr	r0, [r3, #12]
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f902:	461a      	mov	r2, r3
 800f904:	68b9      	ldr	r1, [r7, #8]
 800f906:	f004 f875 	bl	80139f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	68da      	ldr	r2, [r3, #12]
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f912:	425b      	negs	r3, r3
 800f914:	441a      	add	r2, r3
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	68da      	ldr	r2, [r3, #12]
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	429a      	cmp	r2, r3
 800f924:	d207      	bcs.n	800f936 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	689a      	ldr	r2, [r3, #8]
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f92e:	425b      	negs	r3, r3
 800f930:	441a      	add	r2, r3
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2b02      	cmp	r3, #2
 800f93a:	d105      	bne.n	800f948 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d002      	beq.n	800f948 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	3b01      	subs	r3, #1
 800f946:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	1c5a      	adds	r2, r3, #1
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f950:	697b      	ldr	r3, [r7, #20]
}
 800f952:	4618      	mov	r0, r3
 800f954:	3718      	adds	r7, #24
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}

0800f95a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f95a:	b580      	push	{r7, lr}
 800f95c:	b082      	sub	sp, #8
 800f95e:	af00      	add	r7, sp, #0
 800f960:	6078      	str	r0, [r7, #4]
 800f962:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d018      	beq.n	800f99e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	68da      	ldr	r2, [r3, #12]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f974:	441a      	add	r2, r3
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	68da      	ldr	r2, [r3, #12]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	689b      	ldr	r3, [r3, #8]
 800f982:	429a      	cmp	r2, r3
 800f984:	d303      	bcc.n	800f98e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681a      	ldr	r2, [r3, #0]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	68d9      	ldr	r1, [r3, #12]
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f996:	461a      	mov	r2, r3
 800f998:	6838      	ldr	r0, [r7, #0]
 800f99a:	f004 f82b 	bl	80139f4 <memcpy>
	}
}
 800f99e:	bf00      	nop
 800f9a0:	3708      	adds	r7, #8
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b084      	sub	sp, #16
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f9ae:	f001 ffa5 	bl	80118fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9b8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f9ba:	e011      	b.n	800f9e0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d012      	beq.n	800f9ea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	3324      	adds	r3, #36	; 0x24
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f000 fd7d 	bl	80104c8 <xTaskRemoveFromEventList>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d001      	beq.n	800f9d8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f9d4:	f000 fe52 	bl	801067c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f9d8:	7bfb      	ldrb	r3, [r7, #15]
 800f9da:	3b01      	subs	r3, #1
 800f9dc:	b2db      	uxtb	r3, r3
 800f9de:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f9e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	dce9      	bgt.n	800f9bc <prvUnlockQueue+0x16>
 800f9e8:	e000      	b.n	800f9ec <prvUnlockQueue+0x46>
					break;
 800f9ea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	22ff      	movs	r2, #255	; 0xff
 800f9f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f9f4:	f001 ffb0 	bl	8011958 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f9f8:	f001 ff80 	bl	80118fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fa02:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fa04:	e011      	b.n	800fa2a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	691b      	ldr	r3, [r3, #16]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d012      	beq.n	800fa34 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	3310      	adds	r3, #16
 800fa12:	4618      	mov	r0, r3
 800fa14:	f000 fd58 	bl	80104c8 <xTaskRemoveFromEventList>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d001      	beq.n	800fa22 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fa1e:	f000 fe2d 	bl	801067c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fa22:	7bbb      	ldrb	r3, [r7, #14]
 800fa24:	3b01      	subs	r3, #1
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fa2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	dce9      	bgt.n	800fa06 <prvUnlockQueue+0x60>
 800fa32:	e000      	b.n	800fa36 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fa34:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	22ff      	movs	r2, #255	; 0xff
 800fa3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fa3e:	f001 ff8b 	bl	8011958 <vPortExitCritical>
}
 800fa42:	bf00      	nop
 800fa44:	3710      	adds	r7, #16
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b084      	sub	sp, #16
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa52:	f001 ff53 	bl	80118fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d102      	bne.n	800fa64 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fa5e:	2301      	movs	r3, #1
 800fa60:	60fb      	str	r3, [r7, #12]
 800fa62:	e001      	b.n	800fa68 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fa64:	2300      	movs	r3, #0
 800fa66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa68:	f001 ff76 	bl	8011958 <vPortExitCritical>

	return xReturn;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3710      	adds	r7, #16
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}

0800fa76 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fa76:	b580      	push	{r7, lr}
 800fa78:	b084      	sub	sp, #16
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa7e:	f001 ff3d 	bl	80118fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d102      	bne.n	800fa94 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fa8e:	2301      	movs	r3, #1
 800fa90:	60fb      	str	r3, [r7, #12]
 800fa92:	e001      	b.n	800fa98 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fa94:	2300      	movs	r3, #0
 800fa96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa98:	f001 ff5e 	bl	8011958 <vPortExitCritical>

	return xReturn;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3710      	adds	r7, #16
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
	...

0800faa8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800faa8:	b480      	push	{r7}
 800faaa:	b085      	sub	sp, #20
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fab2:	2300      	movs	r3, #0
 800fab4:	60fb      	str	r3, [r7, #12]
 800fab6:	e014      	b.n	800fae2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fab8:	4a0e      	ldr	r2, [pc, #56]	; (800faf4 <vQueueAddToRegistry+0x4c>)
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d10b      	bne.n	800fadc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fac4:	490b      	ldr	r1, [pc, #44]	; (800faf4 <vQueueAddToRegistry+0x4c>)
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	683a      	ldr	r2, [r7, #0]
 800faca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800face:	4a09      	ldr	r2, [pc, #36]	; (800faf4 <vQueueAddToRegistry+0x4c>)
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	00db      	lsls	r3, r3, #3
 800fad4:	4413      	add	r3, r2
 800fad6:	687a      	ldr	r2, [r7, #4]
 800fad8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fada:	e005      	b.n	800fae8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	3301      	adds	r3, #1
 800fae0:	60fb      	str	r3, [r7, #12]
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2b07      	cmp	r3, #7
 800fae6:	d9e7      	bls.n	800fab8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fae8:	bf00      	nop
 800faea:	3714      	adds	r7, #20
 800faec:	46bd      	mov	sp, r7
 800faee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf2:	4770      	bx	lr
 800faf4:	20004fc4 	.word	0x20004fc4

0800faf8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800faf8:	b480      	push	{r7}
 800fafa:	b085      	sub	sp, #20
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fb00:	2300      	movs	r3, #0
 800fb02:	60fb      	str	r3, [r7, #12]
 800fb04:	e016      	b.n	800fb34 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800fb06:	4a10      	ldr	r2, [pc, #64]	; (800fb48 <vQueueUnregisterQueue+0x50>)
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	00db      	lsls	r3, r3, #3
 800fb0c:	4413      	add	r3, r2
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d10b      	bne.n	800fb2e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800fb16:	4a0c      	ldr	r2, [pc, #48]	; (800fb48 <vQueueUnregisterQueue+0x50>)
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2100      	movs	r1, #0
 800fb1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800fb20:	4a09      	ldr	r2, [pc, #36]	; (800fb48 <vQueueUnregisterQueue+0x50>)
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	00db      	lsls	r3, r3, #3
 800fb26:	4413      	add	r3, r2
 800fb28:	2200      	movs	r2, #0
 800fb2a:	605a      	str	r2, [r3, #4]
				break;
 800fb2c:	e005      	b.n	800fb3a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	3301      	adds	r3, #1
 800fb32:	60fb      	str	r3, [r7, #12]
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	2b07      	cmp	r3, #7
 800fb38:	d9e5      	bls.n	800fb06 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800fb3a:	bf00      	nop
 800fb3c:	3714      	adds	r7, #20
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb44:	4770      	bx	lr
 800fb46:	bf00      	nop
 800fb48:	20004fc4 	.word	0x20004fc4

0800fb4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b086      	sub	sp, #24
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	60f8      	str	r0, [r7, #12]
 800fb54:	60b9      	str	r1, [r7, #8]
 800fb56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fb5c:	f001 fece 	bl	80118fc <vPortEnterCritical>
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb66:	b25b      	sxtb	r3, r3
 800fb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb6c:	d103      	bne.n	800fb76 <vQueueWaitForMessageRestricted+0x2a>
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	2200      	movs	r2, #0
 800fb72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb7c:	b25b      	sxtb	r3, r3
 800fb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb82:	d103      	bne.n	800fb8c <vQueueWaitForMessageRestricted+0x40>
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	2200      	movs	r2, #0
 800fb88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb8c:	f001 fee4 	bl	8011958 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d106      	bne.n	800fba6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	3324      	adds	r3, #36	; 0x24
 800fb9c:	687a      	ldr	r2, [r7, #4]
 800fb9e:	68b9      	ldr	r1, [r7, #8]
 800fba0:	4618      	mov	r0, r3
 800fba2:	f000 fc67 	bl	8010474 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fba6:	6978      	ldr	r0, [r7, #20]
 800fba8:	f7ff fefd 	bl	800f9a6 <prvUnlockQueue>
	}
 800fbac:	bf00      	nop
 800fbae:	3718      	adds	r7, #24
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}

0800fbb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b08e      	sub	sp, #56	; 0x38
 800fbb8:	af04      	add	r7, sp, #16
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	60b9      	str	r1, [r7, #8]
 800fbbe:	607a      	str	r2, [r7, #4]
 800fbc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d109      	bne.n	800fbdc <xTaskCreateStatic+0x28>
 800fbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbcc:	f383 8811 	msr	BASEPRI, r3
 800fbd0:	f3bf 8f6f 	isb	sy
 800fbd4:	f3bf 8f4f 	dsb	sy
 800fbd8:	623b      	str	r3, [r7, #32]
 800fbda:	e7fe      	b.n	800fbda <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800fbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d109      	bne.n	800fbf6 <xTaskCreateStatic+0x42>
 800fbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe6:	f383 8811 	msr	BASEPRI, r3
 800fbea:	f3bf 8f6f 	isb	sy
 800fbee:	f3bf 8f4f 	dsb	sy
 800fbf2:	61fb      	str	r3, [r7, #28]
 800fbf4:	e7fe      	b.n	800fbf4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fbf6:	235c      	movs	r3, #92	; 0x5c
 800fbf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	2b5c      	cmp	r3, #92	; 0x5c
 800fbfe:	d009      	beq.n	800fc14 <xTaskCreateStatic+0x60>
 800fc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc04:	f383 8811 	msr	BASEPRI, r3
 800fc08:	f3bf 8f6f 	isb	sy
 800fc0c:	f3bf 8f4f 	dsb	sy
 800fc10:	61bb      	str	r3, [r7, #24]
 800fc12:	e7fe      	b.n	800fc12 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fc14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d01e      	beq.n	800fc5a <xTaskCreateStatic+0xa6>
 800fc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d01b      	beq.n	800fc5a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc24:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc2a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2e:	2202      	movs	r2, #2
 800fc30:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fc34:	2300      	movs	r3, #0
 800fc36:	9303      	str	r3, [sp, #12]
 800fc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3a:	9302      	str	r3, [sp, #8]
 800fc3c:	f107 0314 	add.w	r3, r7, #20
 800fc40:	9301      	str	r3, [sp, #4]
 800fc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc44:	9300      	str	r3, [sp, #0]
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	687a      	ldr	r2, [r7, #4]
 800fc4a:	68b9      	ldr	r1, [r7, #8]
 800fc4c:	68f8      	ldr	r0, [r7, #12]
 800fc4e:	f000 f850 	bl	800fcf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fc52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc54:	f000 f8dc 	bl	800fe10 <prvAddNewTaskToReadyList>
 800fc58:	e001      	b.n	800fc5e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fc5e:	697b      	ldr	r3, [r7, #20]
	}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3728      	adds	r7, #40	; 0x28
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b08c      	sub	sp, #48	; 0x30
 800fc6c:	af04      	add	r7, sp, #16
 800fc6e:	60f8      	str	r0, [r7, #12]
 800fc70:	60b9      	str	r1, [r7, #8]
 800fc72:	603b      	str	r3, [r7, #0]
 800fc74:	4613      	mov	r3, r2
 800fc76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fc78:	88fb      	ldrh	r3, [r7, #6]
 800fc7a:	009b      	lsls	r3, r3, #2
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f001 ff57 	bl	8011b30 <pvPortMalloc>
 800fc82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d00e      	beq.n	800fca8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fc8a:	205c      	movs	r0, #92	; 0x5c
 800fc8c:	f001 ff50 	bl	8011b30 <pvPortMalloc>
 800fc90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fc92:	69fb      	ldr	r3, [r7, #28]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d003      	beq.n	800fca0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fc98:	69fb      	ldr	r3, [r7, #28]
 800fc9a:	697a      	ldr	r2, [r7, #20]
 800fc9c:	631a      	str	r2, [r3, #48]	; 0x30
 800fc9e:	e005      	b.n	800fcac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fca0:	6978      	ldr	r0, [r7, #20]
 800fca2:	f002 f807 	bl	8011cb4 <vPortFree>
 800fca6:	e001      	b.n	800fcac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fcac:	69fb      	ldr	r3, [r7, #28]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d017      	beq.n	800fce2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fcb2:	69fb      	ldr	r3, [r7, #28]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fcba:	88fa      	ldrh	r2, [r7, #6]
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	9303      	str	r3, [sp, #12]
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	9302      	str	r3, [sp, #8]
 800fcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc6:	9301      	str	r3, [sp, #4]
 800fcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcca:	9300      	str	r3, [sp, #0]
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	68b9      	ldr	r1, [r7, #8]
 800fcd0:	68f8      	ldr	r0, [r7, #12]
 800fcd2:	f000 f80e 	bl	800fcf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fcd6:	69f8      	ldr	r0, [r7, #28]
 800fcd8:	f000 f89a 	bl	800fe10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fcdc:	2301      	movs	r3, #1
 800fcde:	61bb      	str	r3, [r7, #24]
 800fce0:	e002      	b.n	800fce8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fce2:	f04f 33ff 	mov.w	r3, #4294967295
 800fce6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fce8:	69bb      	ldr	r3, [r7, #24]
	}
 800fcea:	4618      	mov	r0, r3
 800fcec:	3720      	adds	r7, #32
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}

0800fcf2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fcf2:	b580      	push	{r7, lr}
 800fcf4:	b088      	sub	sp, #32
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	60f8      	str	r0, [r7, #12]
 800fcfa:	60b9      	str	r1, [r7, #8]
 800fcfc:	607a      	str	r2, [r7, #4]
 800fcfe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd02:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	009b      	lsls	r3, r3, #2
 800fd08:	461a      	mov	r2, r3
 800fd0a:	21a5      	movs	r1, #165	; 0xa5
 800fd0c:	f003 fe7d 	bl	8013a0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fd1a:	3b01      	subs	r3, #1
 800fd1c:	009b      	lsls	r3, r3, #2
 800fd1e:	4413      	add	r3, r2
 800fd20:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fd22:	69bb      	ldr	r3, [r7, #24]
 800fd24:	f023 0307 	bic.w	r3, r3, #7
 800fd28:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fd2a:	69bb      	ldr	r3, [r7, #24]
 800fd2c:	f003 0307 	and.w	r3, r3, #7
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d009      	beq.n	800fd48 <prvInitialiseNewTask+0x56>
 800fd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd38:	f383 8811 	msr	BASEPRI, r3
 800fd3c:	f3bf 8f6f 	isb	sy
 800fd40:	f3bf 8f4f 	dsb	sy
 800fd44:	617b      	str	r3, [r7, #20]
 800fd46:	e7fe      	b.n	800fd46 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d01f      	beq.n	800fd8e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd4e:	2300      	movs	r3, #0
 800fd50:	61fb      	str	r3, [r7, #28]
 800fd52:	e012      	b.n	800fd7a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fd54:	68ba      	ldr	r2, [r7, #8]
 800fd56:	69fb      	ldr	r3, [r7, #28]
 800fd58:	4413      	add	r3, r2
 800fd5a:	7819      	ldrb	r1, [r3, #0]
 800fd5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	4413      	add	r3, r2
 800fd62:	3334      	adds	r3, #52	; 0x34
 800fd64:	460a      	mov	r2, r1
 800fd66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fd68:	68ba      	ldr	r2, [r7, #8]
 800fd6a:	69fb      	ldr	r3, [r7, #28]
 800fd6c:	4413      	add	r3, r2
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d006      	beq.n	800fd82 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	3301      	adds	r3, #1
 800fd78:	61fb      	str	r3, [r7, #28]
 800fd7a:	69fb      	ldr	r3, [r7, #28]
 800fd7c:	2b0f      	cmp	r3, #15
 800fd7e:	d9e9      	bls.n	800fd54 <prvInitialiseNewTask+0x62>
 800fd80:	e000      	b.n	800fd84 <prvInitialiseNewTask+0x92>
			{
				break;
 800fd82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd86:	2200      	movs	r2, #0
 800fd88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fd8c:	e003      	b.n	800fd96 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd90:	2200      	movs	r2, #0
 800fd92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd98:	2b37      	cmp	r3, #55	; 0x37
 800fd9a:	d901      	bls.n	800fda0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fd9c:	2337      	movs	r3, #55	; 0x37
 800fd9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fda4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdaa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdae:	2200      	movs	r2, #0
 800fdb0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb4:	3304      	adds	r3, #4
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7fe fdc6 	bl	800e948 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdbe:	3318      	adds	r3, #24
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7fe fdc1 	bl	800e948 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdde:	2200      	movs	r2, #0
 800fde0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde4:	2200      	movs	r2, #0
 800fde6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fdea:	683a      	ldr	r2, [r7, #0]
 800fdec:	68f9      	ldr	r1, [r7, #12]
 800fdee:	69b8      	ldr	r0, [r7, #24]
 800fdf0:	f001 fc60 	bl	80116b4 <pxPortInitialiseStack>
 800fdf4:	4602      	mov	r2, r0
 800fdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d002      	beq.n	800fe06 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fe00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe06:	bf00      	nop
 800fe08:	3720      	adds	r7, #32
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
	...

0800fe10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fe18:	f001 fd70 	bl	80118fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fe1c:	4b2d      	ldr	r3, [pc, #180]	; (800fed4 <prvAddNewTaskToReadyList+0xc4>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	3301      	adds	r3, #1
 800fe22:	4a2c      	ldr	r2, [pc, #176]	; (800fed4 <prvAddNewTaskToReadyList+0xc4>)
 800fe24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fe26:	4b2c      	ldr	r3, [pc, #176]	; (800fed8 <prvAddNewTaskToReadyList+0xc8>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d109      	bne.n	800fe42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fe2e:	4a2a      	ldr	r2, [pc, #168]	; (800fed8 <prvAddNewTaskToReadyList+0xc8>)
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fe34:	4b27      	ldr	r3, [pc, #156]	; (800fed4 <prvAddNewTaskToReadyList+0xc4>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	2b01      	cmp	r3, #1
 800fe3a:	d110      	bne.n	800fe5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fe3c:	f000 fc68 	bl	8010710 <prvInitialiseTaskLists>
 800fe40:	e00d      	b.n	800fe5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fe42:	4b26      	ldr	r3, [pc, #152]	; (800fedc <prvAddNewTaskToReadyList+0xcc>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d109      	bne.n	800fe5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fe4a:	4b23      	ldr	r3, [pc, #140]	; (800fed8 <prvAddNewTaskToReadyList+0xc8>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d802      	bhi.n	800fe5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fe58:	4a1f      	ldr	r2, [pc, #124]	; (800fed8 <prvAddNewTaskToReadyList+0xc8>)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fe5e:	4b20      	ldr	r3, [pc, #128]	; (800fee0 <prvAddNewTaskToReadyList+0xd0>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	3301      	adds	r3, #1
 800fe64:	4a1e      	ldr	r2, [pc, #120]	; (800fee0 <prvAddNewTaskToReadyList+0xd0>)
 800fe66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fe68:	4b1d      	ldr	r3, [pc, #116]	; (800fee0 <prvAddNewTaskToReadyList+0xd0>)
 800fe6a:	681a      	ldr	r2, [r3, #0]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe74:	4b1b      	ldr	r3, [pc, #108]	; (800fee4 <prvAddNewTaskToReadyList+0xd4>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d903      	bls.n	800fe84 <prvAddNewTaskToReadyList+0x74>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe80:	4a18      	ldr	r2, [pc, #96]	; (800fee4 <prvAddNewTaskToReadyList+0xd4>)
 800fe82:	6013      	str	r3, [r2, #0]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe88:	4613      	mov	r3, r2
 800fe8a:	009b      	lsls	r3, r3, #2
 800fe8c:	4413      	add	r3, r2
 800fe8e:	009b      	lsls	r3, r3, #2
 800fe90:	4a15      	ldr	r2, [pc, #84]	; (800fee8 <prvAddNewTaskToReadyList+0xd8>)
 800fe92:	441a      	add	r2, r3
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	3304      	adds	r3, #4
 800fe98:	4619      	mov	r1, r3
 800fe9a:	4610      	mov	r0, r2
 800fe9c:	f7fe fd61 	bl	800e962 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fea0:	f001 fd5a 	bl	8011958 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fea4:	4b0d      	ldr	r3, [pc, #52]	; (800fedc <prvAddNewTaskToReadyList+0xcc>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d00e      	beq.n	800feca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800feac:	4b0a      	ldr	r3, [pc, #40]	; (800fed8 <prvAddNewTaskToReadyList+0xc8>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d207      	bcs.n	800feca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800feba:	4b0c      	ldr	r3, [pc, #48]	; (800feec <prvAddNewTaskToReadyList+0xdc>)
 800febc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fec0:	601a      	str	r2, [r3, #0]
 800fec2:	f3bf 8f4f 	dsb	sy
 800fec6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800feca:	bf00      	nop
 800fecc:	3708      	adds	r7, #8
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	20002134 	.word	0x20002134
 800fed8:	20001c60 	.word	0x20001c60
 800fedc:	20002140 	.word	0x20002140
 800fee0:	20002150 	.word	0x20002150
 800fee4:	2000213c 	.word	0x2000213c
 800fee8:	20001c64 	.word	0x20001c64
 800feec:	e000ed04 	.word	0xe000ed04

0800fef0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b084      	sub	sp, #16
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fef8:	2300      	movs	r3, #0
 800fefa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d016      	beq.n	800ff30 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ff02:	4b13      	ldr	r3, [pc, #76]	; (800ff50 <vTaskDelay+0x60>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d009      	beq.n	800ff1e <vTaskDelay+0x2e>
 800ff0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0e:	f383 8811 	msr	BASEPRI, r3
 800ff12:	f3bf 8f6f 	isb	sy
 800ff16:	f3bf 8f4f 	dsb	sy
 800ff1a:	60bb      	str	r3, [r7, #8]
 800ff1c:	e7fe      	b.n	800ff1c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800ff1e:	f000 f87f 	bl	8010020 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ff22:	2100      	movs	r1, #0
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f001 f82b 	bl	8010f80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ff2a:	f000 f8bf 	bl	80100ac <xTaskResumeAll>
 800ff2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d107      	bne.n	800ff46 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800ff36:	4b07      	ldr	r3, [pc, #28]	; (800ff54 <vTaskDelay+0x64>)
 800ff38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff3c:	601a      	str	r2, [r3, #0]
 800ff3e:	f3bf 8f4f 	dsb	sy
 800ff42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff46:	bf00      	nop
 800ff48:	3710      	adds	r7, #16
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	2000215c 	.word	0x2000215c
 800ff54:	e000ed04 	.word	0xe000ed04

0800ff58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b08a      	sub	sp, #40	; 0x28
 800ff5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ff62:	2300      	movs	r3, #0
 800ff64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ff66:	463a      	mov	r2, r7
 800ff68:	1d39      	adds	r1, r7, #4
 800ff6a:	f107 0308 	add.w	r3, r7, #8
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7fe fc96 	bl	800e8a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ff74:	6839      	ldr	r1, [r7, #0]
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	68ba      	ldr	r2, [r7, #8]
 800ff7a:	9202      	str	r2, [sp, #8]
 800ff7c:	9301      	str	r3, [sp, #4]
 800ff7e:	2300      	movs	r3, #0
 800ff80:	9300      	str	r3, [sp, #0]
 800ff82:	2300      	movs	r3, #0
 800ff84:	460a      	mov	r2, r1
 800ff86:	4920      	ldr	r1, [pc, #128]	; (8010008 <vTaskStartScheduler+0xb0>)
 800ff88:	4820      	ldr	r0, [pc, #128]	; (801000c <vTaskStartScheduler+0xb4>)
 800ff8a:	f7ff fe13 	bl	800fbb4 <xTaskCreateStatic>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	4b1f      	ldr	r3, [pc, #124]	; (8010010 <vTaskStartScheduler+0xb8>)
 800ff92:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ff94:	4b1e      	ldr	r3, [pc, #120]	; (8010010 <vTaskStartScheduler+0xb8>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d002      	beq.n	800ffa2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	617b      	str	r3, [r7, #20]
 800ffa0:	e001      	b.n	800ffa6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	d102      	bne.n	800ffb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ffac:	f001 f83c 	bl	8011028 <xTimerCreateTimerTask>
 800ffb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d115      	bne.n	800ffe4 <vTaskStartScheduler+0x8c>
 800ffb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffbc:	f383 8811 	msr	BASEPRI, r3
 800ffc0:	f3bf 8f6f 	isb	sy
 800ffc4:	f3bf 8f4f 	dsb	sy
 800ffc8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ffca:	4b12      	ldr	r3, [pc, #72]	; (8010014 <vTaskStartScheduler+0xbc>)
 800ffcc:	f04f 32ff 	mov.w	r2, #4294967295
 800ffd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ffd2:	4b11      	ldr	r3, [pc, #68]	; (8010018 <vTaskStartScheduler+0xc0>)
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ffd8:	4b10      	ldr	r3, [pc, #64]	; (801001c <vTaskStartScheduler+0xc4>)
 800ffda:	2200      	movs	r2, #0
 800ffdc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ffde:	f001 fbef 	bl	80117c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ffe2:	e00d      	b.n	8010000 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffea:	d109      	bne.n	8010000 <vTaskStartScheduler+0xa8>
 800ffec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff0:	f383 8811 	msr	BASEPRI, r3
 800fff4:	f3bf 8f6f 	isb	sy
 800fff8:	f3bf 8f4f 	dsb	sy
 800fffc:	60fb      	str	r3, [r7, #12]
 800fffe:	e7fe      	b.n	800fffe <vTaskStartScheduler+0xa6>
}
 8010000:	bf00      	nop
 8010002:	3718      	adds	r7, #24
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}
 8010008:	08013afc 	.word	0x08013afc
 801000c:	08010695 	.word	0x08010695
 8010010:	20002158 	.word	0x20002158
 8010014:	20002154 	.word	0x20002154
 8010018:	20002140 	.word	0x20002140
 801001c:	20002138 	.word	0x20002138

08010020 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010020:	b480      	push	{r7}
 8010022:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010024:	4b04      	ldr	r3, [pc, #16]	; (8010038 <vTaskSuspendAll+0x18>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	3301      	adds	r3, #1
 801002a:	4a03      	ldr	r2, [pc, #12]	; (8010038 <vTaskSuspendAll+0x18>)
 801002c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801002e:	bf00      	nop
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr
 8010038:	2000215c 	.word	0x2000215c

0801003c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 801003c:	b480      	push	{r7}
 801003e:	b083      	sub	sp, #12
 8010040:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8010042:	2300      	movs	r3, #0
 8010044:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8010046:	4b14      	ldr	r3, [pc, #80]	; (8010098 <prvGetExpectedIdleTime+0x5c>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d001      	beq.n	8010052 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 801004e:	2301      	movs	r3, #1
 8010050:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8010052:	4b12      	ldr	r3, [pc, #72]	; (801009c <prvGetExpectedIdleTime+0x60>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010058:	2b00      	cmp	r3, #0
 801005a:	d002      	beq.n	8010062 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 801005c:	2300      	movs	r3, #0
 801005e:	607b      	str	r3, [r7, #4]
 8010060:	e012      	b.n	8010088 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8010062:	4b0f      	ldr	r3, [pc, #60]	; (80100a0 <prvGetExpectedIdleTime+0x64>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2b01      	cmp	r3, #1
 8010068:	d902      	bls.n	8010070 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 801006a:	2300      	movs	r3, #0
 801006c:	607b      	str	r3, [r7, #4]
 801006e:	e00b      	b.n	8010088 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d002      	beq.n	801007c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8010076:	2300      	movs	r3, #0
 8010078:	607b      	str	r3, [r7, #4]
 801007a:	e005      	b.n	8010088 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 801007c:	4b09      	ldr	r3, [pc, #36]	; (80100a4 <prvGetExpectedIdleTime+0x68>)
 801007e:	681a      	ldr	r2, [r3, #0]
 8010080:	4b09      	ldr	r3, [pc, #36]	; (80100a8 <prvGetExpectedIdleTime+0x6c>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	1ad3      	subs	r3, r2, r3
 8010086:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8010088:	687b      	ldr	r3, [r7, #4]
	}
 801008a:	4618      	mov	r0, r3
 801008c:	370c      	adds	r7, #12
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr
 8010096:	bf00      	nop
 8010098:	2000213c 	.word	0x2000213c
 801009c:	20001c60 	.word	0x20001c60
 80100a0:	20001c64 	.word	0x20001c64
 80100a4:	20002154 	.word	0x20002154
 80100a8:	20002138 	.word	0x20002138

080100ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80100b2:	2300      	movs	r3, #0
 80100b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80100b6:	2300      	movs	r3, #0
 80100b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80100ba:	4b41      	ldr	r3, [pc, #260]	; (80101c0 <xTaskResumeAll+0x114>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d109      	bne.n	80100d6 <xTaskResumeAll+0x2a>
 80100c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100c6:	f383 8811 	msr	BASEPRI, r3
 80100ca:	f3bf 8f6f 	isb	sy
 80100ce:	f3bf 8f4f 	dsb	sy
 80100d2:	603b      	str	r3, [r7, #0]
 80100d4:	e7fe      	b.n	80100d4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80100d6:	f001 fc11 	bl	80118fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80100da:	4b39      	ldr	r3, [pc, #228]	; (80101c0 <xTaskResumeAll+0x114>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	3b01      	subs	r3, #1
 80100e0:	4a37      	ldr	r2, [pc, #220]	; (80101c0 <xTaskResumeAll+0x114>)
 80100e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80100e4:	4b36      	ldr	r3, [pc, #216]	; (80101c0 <xTaskResumeAll+0x114>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d162      	bne.n	80101b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80100ec:	4b35      	ldr	r3, [pc, #212]	; (80101c4 <xTaskResumeAll+0x118>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d05e      	beq.n	80101b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80100f4:	e02f      	b.n	8010156 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100f6:	4b34      	ldr	r3, [pc, #208]	; (80101c8 <xTaskResumeAll+0x11c>)
 80100f8:	68db      	ldr	r3, [r3, #12]
 80100fa:	68db      	ldr	r3, [r3, #12]
 80100fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	3318      	adds	r3, #24
 8010102:	4618      	mov	r0, r3
 8010104:	f7fe fc8a 	bl	800ea1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	3304      	adds	r3, #4
 801010c:	4618      	mov	r0, r3
 801010e:	f7fe fc85 	bl	800ea1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010116:	4b2d      	ldr	r3, [pc, #180]	; (80101cc <xTaskResumeAll+0x120>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	429a      	cmp	r2, r3
 801011c:	d903      	bls.n	8010126 <xTaskResumeAll+0x7a>
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010122:	4a2a      	ldr	r2, [pc, #168]	; (80101cc <xTaskResumeAll+0x120>)
 8010124:	6013      	str	r3, [r2, #0]
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801012a:	4613      	mov	r3, r2
 801012c:	009b      	lsls	r3, r3, #2
 801012e:	4413      	add	r3, r2
 8010130:	009b      	lsls	r3, r3, #2
 8010132:	4a27      	ldr	r2, [pc, #156]	; (80101d0 <xTaskResumeAll+0x124>)
 8010134:	441a      	add	r2, r3
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	3304      	adds	r3, #4
 801013a:	4619      	mov	r1, r3
 801013c:	4610      	mov	r0, r2
 801013e:	f7fe fc10 	bl	800e962 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010146:	4b23      	ldr	r3, [pc, #140]	; (80101d4 <xTaskResumeAll+0x128>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801014c:	429a      	cmp	r2, r3
 801014e:	d302      	bcc.n	8010156 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010150:	4b21      	ldr	r3, [pc, #132]	; (80101d8 <xTaskResumeAll+0x12c>)
 8010152:	2201      	movs	r2, #1
 8010154:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010156:	4b1c      	ldr	r3, [pc, #112]	; (80101c8 <xTaskResumeAll+0x11c>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d1cb      	bne.n	80100f6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d001      	beq.n	8010168 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010164:	f000 fb6e 	bl	8010844 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010168:	4b1c      	ldr	r3, [pc, #112]	; (80101dc <xTaskResumeAll+0x130>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d010      	beq.n	8010196 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010174:	f000 f846 	bl	8010204 <xTaskIncrementTick>
 8010178:	4603      	mov	r3, r0
 801017a:	2b00      	cmp	r3, #0
 801017c:	d002      	beq.n	8010184 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801017e:	4b16      	ldr	r3, [pc, #88]	; (80101d8 <xTaskResumeAll+0x12c>)
 8010180:	2201      	movs	r2, #1
 8010182:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	3b01      	subs	r3, #1
 8010188:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d1f1      	bne.n	8010174 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8010190:	4b12      	ldr	r3, [pc, #72]	; (80101dc <xTaskResumeAll+0x130>)
 8010192:	2200      	movs	r2, #0
 8010194:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010196:	4b10      	ldr	r3, [pc, #64]	; (80101d8 <xTaskResumeAll+0x12c>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d009      	beq.n	80101b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801019e:	2301      	movs	r3, #1
 80101a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80101a2:	4b0f      	ldr	r3, [pc, #60]	; (80101e0 <xTaskResumeAll+0x134>)
 80101a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101a8:	601a      	str	r2, [r3, #0]
 80101aa:	f3bf 8f4f 	dsb	sy
 80101ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80101b2:	f001 fbd1 	bl	8011958 <vPortExitCritical>

	return xAlreadyYielded;
 80101b6:	68bb      	ldr	r3, [r7, #8]
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3710      	adds	r7, #16
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	2000215c 	.word	0x2000215c
 80101c4:	20002134 	.word	0x20002134
 80101c8:	200020f4 	.word	0x200020f4
 80101cc:	2000213c 	.word	0x2000213c
 80101d0:	20001c64 	.word	0x20001c64
 80101d4:	20001c60 	.word	0x20001c60
 80101d8:	20002148 	.word	0x20002148
 80101dc:	20002144 	.word	0x20002144
 80101e0:	e000ed04 	.word	0xe000ed04

080101e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80101e4:	b480      	push	{r7}
 80101e6:	b083      	sub	sp, #12
 80101e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80101ea:	4b05      	ldr	r3, [pc, #20]	; (8010200 <xTaskGetTickCount+0x1c>)
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80101f0:	687b      	ldr	r3, [r7, #4]
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	370c      	adds	r7, #12
 80101f6:	46bd      	mov	sp, r7
 80101f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fc:	4770      	bx	lr
 80101fe:	bf00      	nop
 8010200:	20002138 	.word	0x20002138

08010204 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b086      	sub	sp, #24
 8010208:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801020a:	2300      	movs	r3, #0
 801020c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801020e:	4b4e      	ldr	r3, [pc, #312]	; (8010348 <xTaskIncrementTick+0x144>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	2b00      	cmp	r3, #0
 8010214:	f040 8088 	bne.w	8010328 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010218:	4b4c      	ldr	r3, [pc, #304]	; (801034c <xTaskIncrementTick+0x148>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	3301      	adds	r3, #1
 801021e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010220:	4a4a      	ldr	r2, [pc, #296]	; (801034c <xTaskIncrementTick+0x148>)
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d11f      	bne.n	801026c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801022c:	4b48      	ldr	r3, [pc, #288]	; (8010350 <xTaskIncrementTick+0x14c>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d009      	beq.n	801024a <xTaskIncrementTick+0x46>
 8010236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801023a:	f383 8811 	msr	BASEPRI, r3
 801023e:	f3bf 8f6f 	isb	sy
 8010242:	f3bf 8f4f 	dsb	sy
 8010246:	603b      	str	r3, [r7, #0]
 8010248:	e7fe      	b.n	8010248 <xTaskIncrementTick+0x44>
 801024a:	4b41      	ldr	r3, [pc, #260]	; (8010350 <xTaskIncrementTick+0x14c>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	60fb      	str	r3, [r7, #12]
 8010250:	4b40      	ldr	r3, [pc, #256]	; (8010354 <xTaskIncrementTick+0x150>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	4a3e      	ldr	r2, [pc, #248]	; (8010350 <xTaskIncrementTick+0x14c>)
 8010256:	6013      	str	r3, [r2, #0]
 8010258:	4a3e      	ldr	r2, [pc, #248]	; (8010354 <xTaskIncrementTick+0x150>)
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	6013      	str	r3, [r2, #0]
 801025e:	4b3e      	ldr	r3, [pc, #248]	; (8010358 <xTaskIncrementTick+0x154>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	3301      	adds	r3, #1
 8010264:	4a3c      	ldr	r2, [pc, #240]	; (8010358 <xTaskIncrementTick+0x154>)
 8010266:	6013      	str	r3, [r2, #0]
 8010268:	f000 faec 	bl	8010844 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801026c:	4b3b      	ldr	r3, [pc, #236]	; (801035c <xTaskIncrementTick+0x158>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	693a      	ldr	r2, [r7, #16]
 8010272:	429a      	cmp	r2, r3
 8010274:	d349      	bcc.n	801030a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010276:	4b36      	ldr	r3, [pc, #216]	; (8010350 <xTaskIncrementTick+0x14c>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d104      	bne.n	801028a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010280:	4b36      	ldr	r3, [pc, #216]	; (801035c <xTaskIncrementTick+0x158>)
 8010282:	f04f 32ff 	mov.w	r2, #4294967295
 8010286:	601a      	str	r2, [r3, #0]
					break;
 8010288:	e03f      	b.n	801030a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801028a:	4b31      	ldr	r3, [pc, #196]	; (8010350 <xTaskIncrementTick+0x14c>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	68db      	ldr	r3, [r3, #12]
 8010290:	68db      	ldr	r3, [r3, #12]
 8010292:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	685b      	ldr	r3, [r3, #4]
 8010298:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801029a:	693a      	ldr	r2, [r7, #16]
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	429a      	cmp	r2, r3
 80102a0:	d203      	bcs.n	80102aa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80102a2:	4a2e      	ldr	r2, [pc, #184]	; (801035c <xTaskIncrementTick+0x158>)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80102a8:	e02f      	b.n	801030a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	3304      	adds	r3, #4
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7fe fbb4 	bl	800ea1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d004      	beq.n	80102c6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	3318      	adds	r3, #24
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7fe fbab 	bl	800ea1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102ca:	4b25      	ldr	r3, [pc, #148]	; (8010360 <xTaskIncrementTick+0x15c>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d903      	bls.n	80102da <xTaskIncrementTick+0xd6>
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102d6:	4a22      	ldr	r2, [pc, #136]	; (8010360 <xTaskIncrementTick+0x15c>)
 80102d8:	6013      	str	r3, [r2, #0]
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102de:	4613      	mov	r3, r2
 80102e0:	009b      	lsls	r3, r3, #2
 80102e2:	4413      	add	r3, r2
 80102e4:	009b      	lsls	r3, r3, #2
 80102e6:	4a1f      	ldr	r2, [pc, #124]	; (8010364 <xTaskIncrementTick+0x160>)
 80102e8:	441a      	add	r2, r3
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	3304      	adds	r3, #4
 80102ee:	4619      	mov	r1, r3
 80102f0:	4610      	mov	r0, r2
 80102f2:	f7fe fb36 	bl	800e962 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102fa:	4b1b      	ldr	r3, [pc, #108]	; (8010368 <xTaskIncrementTick+0x164>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010300:	429a      	cmp	r2, r3
 8010302:	d3b8      	bcc.n	8010276 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010304:	2301      	movs	r3, #1
 8010306:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010308:	e7b5      	b.n	8010276 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801030a:	4b17      	ldr	r3, [pc, #92]	; (8010368 <xTaskIncrementTick+0x164>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010310:	4914      	ldr	r1, [pc, #80]	; (8010364 <xTaskIncrementTick+0x160>)
 8010312:	4613      	mov	r3, r2
 8010314:	009b      	lsls	r3, r3, #2
 8010316:	4413      	add	r3, r2
 8010318:	009b      	lsls	r3, r3, #2
 801031a:	440b      	add	r3, r1
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	2b01      	cmp	r3, #1
 8010320:	d907      	bls.n	8010332 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8010322:	2301      	movs	r3, #1
 8010324:	617b      	str	r3, [r7, #20]
 8010326:	e004      	b.n	8010332 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010328:	4b10      	ldr	r3, [pc, #64]	; (801036c <xTaskIncrementTick+0x168>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	3301      	adds	r3, #1
 801032e:	4a0f      	ldr	r2, [pc, #60]	; (801036c <xTaskIncrementTick+0x168>)
 8010330:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010332:	4b0f      	ldr	r3, [pc, #60]	; (8010370 <xTaskIncrementTick+0x16c>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d001      	beq.n	801033e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801033a:	2301      	movs	r3, #1
 801033c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801033e:	697b      	ldr	r3, [r7, #20]
}
 8010340:	4618      	mov	r0, r3
 8010342:	3718      	adds	r7, #24
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}
 8010348:	2000215c 	.word	0x2000215c
 801034c:	20002138 	.word	0x20002138
 8010350:	200020ec 	.word	0x200020ec
 8010354:	200020f0 	.word	0x200020f0
 8010358:	2000214c 	.word	0x2000214c
 801035c:	20002154 	.word	0x20002154
 8010360:	2000213c 	.word	0x2000213c
 8010364:	20001c64 	.word	0x20001c64
 8010368:	20001c60 	.word	0x20001c60
 801036c:	20002144 	.word	0x20002144
 8010370:	20002148 	.word	0x20002148

08010374 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010374:	b480      	push	{r7}
 8010376:	b085      	sub	sp, #20
 8010378:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801037a:	4b27      	ldr	r3, [pc, #156]	; (8010418 <vTaskSwitchContext+0xa4>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d003      	beq.n	801038a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010382:	4b26      	ldr	r3, [pc, #152]	; (801041c <vTaskSwitchContext+0xa8>)
 8010384:	2201      	movs	r2, #1
 8010386:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010388:	e040      	b.n	801040c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801038a:	4b24      	ldr	r3, [pc, #144]	; (801041c <vTaskSwitchContext+0xa8>)
 801038c:	2200      	movs	r2, #0
 801038e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010390:	4b23      	ldr	r3, [pc, #140]	; (8010420 <vTaskSwitchContext+0xac>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	60fb      	str	r3, [r7, #12]
 8010396:	e00f      	b.n	80103b8 <vTaskSwitchContext+0x44>
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d109      	bne.n	80103b2 <vTaskSwitchContext+0x3e>
 801039e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a2:	f383 8811 	msr	BASEPRI, r3
 80103a6:	f3bf 8f6f 	isb	sy
 80103aa:	f3bf 8f4f 	dsb	sy
 80103ae:	607b      	str	r3, [r7, #4]
 80103b0:	e7fe      	b.n	80103b0 <vTaskSwitchContext+0x3c>
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	3b01      	subs	r3, #1
 80103b6:	60fb      	str	r3, [r7, #12]
 80103b8:	491a      	ldr	r1, [pc, #104]	; (8010424 <vTaskSwitchContext+0xb0>)
 80103ba:	68fa      	ldr	r2, [r7, #12]
 80103bc:	4613      	mov	r3, r2
 80103be:	009b      	lsls	r3, r3, #2
 80103c0:	4413      	add	r3, r2
 80103c2:	009b      	lsls	r3, r3, #2
 80103c4:	440b      	add	r3, r1
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d0e5      	beq.n	8010398 <vTaskSwitchContext+0x24>
 80103cc:	68fa      	ldr	r2, [r7, #12]
 80103ce:	4613      	mov	r3, r2
 80103d0:	009b      	lsls	r3, r3, #2
 80103d2:	4413      	add	r3, r2
 80103d4:	009b      	lsls	r3, r3, #2
 80103d6:	4a13      	ldr	r2, [pc, #76]	; (8010424 <vTaskSwitchContext+0xb0>)
 80103d8:	4413      	add	r3, r2
 80103da:	60bb      	str	r3, [r7, #8]
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	685a      	ldr	r2, [r3, #4]
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	605a      	str	r2, [r3, #4]
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	685a      	ldr	r2, [r3, #4]
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	3308      	adds	r3, #8
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d104      	bne.n	80103fc <vTaskSwitchContext+0x88>
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	685a      	ldr	r2, [r3, #4]
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	605a      	str	r2, [r3, #4]
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	685b      	ldr	r3, [r3, #4]
 8010400:	68db      	ldr	r3, [r3, #12]
 8010402:	4a09      	ldr	r2, [pc, #36]	; (8010428 <vTaskSwitchContext+0xb4>)
 8010404:	6013      	str	r3, [r2, #0]
 8010406:	4a06      	ldr	r2, [pc, #24]	; (8010420 <vTaskSwitchContext+0xac>)
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	6013      	str	r3, [r2, #0]
}
 801040c:	bf00      	nop
 801040e:	3714      	adds	r7, #20
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr
 8010418:	2000215c 	.word	0x2000215c
 801041c:	20002148 	.word	0x20002148
 8010420:	2000213c 	.word	0x2000213c
 8010424:	20001c64 	.word	0x20001c64
 8010428:	20001c60 	.word	0x20001c60

0801042c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b084      	sub	sp, #16
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d109      	bne.n	8010450 <vTaskPlaceOnEventList+0x24>
 801043c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010440:	f383 8811 	msr	BASEPRI, r3
 8010444:	f3bf 8f6f 	isb	sy
 8010448:	f3bf 8f4f 	dsb	sy
 801044c:	60fb      	str	r3, [r7, #12]
 801044e:	e7fe      	b.n	801044e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010450:	4b07      	ldr	r3, [pc, #28]	; (8010470 <vTaskPlaceOnEventList+0x44>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	3318      	adds	r3, #24
 8010456:	4619      	mov	r1, r3
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f7fe faa6 	bl	800e9aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801045e:	2101      	movs	r1, #1
 8010460:	6838      	ldr	r0, [r7, #0]
 8010462:	f000 fd8d 	bl	8010f80 <prvAddCurrentTaskToDelayedList>
}
 8010466:	bf00      	nop
 8010468:	3710      	adds	r7, #16
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	20001c60 	.word	0x20001c60

08010474 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010474:	b580      	push	{r7, lr}
 8010476:	b086      	sub	sp, #24
 8010478:	af00      	add	r7, sp, #0
 801047a:	60f8      	str	r0, [r7, #12]
 801047c:	60b9      	str	r1, [r7, #8]
 801047e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d109      	bne.n	801049a <vTaskPlaceOnEventListRestricted+0x26>
 8010486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801048a:	f383 8811 	msr	BASEPRI, r3
 801048e:	f3bf 8f6f 	isb	sy
 8010492:	f3bf 8f4f 	dsb	sy
 8010496:	617b      	str	r3, [r7, #20]
 8010498:	e7fe      	b.n	8010498 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801049a:	4b0a      	ldr	r3, [pc, #40]	; (80104c4 <vTaskPlaceOnEventListRestricted+0x50>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	3318      	adds	r3, #24
 80104a0:	4619      	mov	r1, r3
 80104a2:	68f8      	ldr	r0, [r7, #12]
 80104a4:	f7fe fa5d 	bl	800e962 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d002      	beq.n	80104b4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80104ae:	f04f 33ff 	mov.w	r3, #4294967295
 80104b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80104b4:	6879      	ldr	r1, [r7, #4]
 80104b6:	68b8      	ldr	r0, [r7, #8]
 80104b8:	f000 fd62 	bl	8010f80 <prvAddCurrentTaskToDelayedList>
	}
 80104bc:	bf00      	nop
 80104be:	3718      	adds	r7, #24
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}
 80104c4:	20001c60 	.word	0x20001c60

080104c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b086      	sub	sp, #24
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	68db      	ldr	r3, [r3, #12]
 80104d4:	68db      	ldr	r3, [r3, #12]
 80104d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d109      	bne.n	80104f2 <xTaskRemoveFromEventList+0x2a>
 80104de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e2:	f383 8811 	msr	BASEPRI, r3
 80104e6:	f3bf 8f6f 	isb	sy
 80104ea:	f3bf 8f4f 	dsb	sy
 80104ee:	60fb      	str	r3, [r7, #12]
 80104f0:	e7fe      	b.n	80104f0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	3318      	adds	r3, #24
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7fe fa90 	bl	800ea1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80104fc:	4b1e      	ldr	r3, [pc, #120]	; (8010578 <xTaskRemoveFromEventList+0xb0>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d11f      	bne.n	8010544 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	3304      	adds	r3, #4
 8010508:	4618      	mov	r0, r3
 801050a:	f7fe fa87 	bl	800ea1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010512:	4b1a      	ldr	r3, [pc, #104]	; (801057c <xTaskRemoveFromEventList+0xb4>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	429a      	cmp	r2, r3
 8010518:	d903      	bls.n	8010522 <xTaskRemoveFromEventList+0x5a>
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801051e:	4a17      	ldr	r2, [pc, #92]	; (801057c <xTaskRemoveFromEventList+0xb4>)
 8010520:	6013      	str	r3, [r2, #0]
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010526:	4613      	mov	r3, r2
 8010528:	009b      	lsls	r3, r3, #2
 801052a:	4413      	add	r3, r2
 801052c:	009b      	lsls	r3, r3, #2
 801052e:	4a14      	ldr	r2, [pc, #80]	; (8010580 <xTaskRemoveFromEventList+0xb8>)
 8010530:	441a      	add	r2, r3
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	3304      	adds	r3, #4
 8010536:	4619      	mov	r1, r3
 8010538:	4610      	mov	r0, r2
 801053a:	f7fe fa12 	bl	800e962 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 801053e:	f000 f981 	bl	8010844 <prvResetNextTaskUnblockTime>
 8010542:	e005      	b.n	8010550 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	3318      	adds	r3, #24
 8010548:	4619      	mov	r1, r3
 801054a:	480e      	ldr	r0, [pc, #56]	; (8010584 <xTaskRemoveFromEventList+0xbc>)
 801054c:	f7fe fa09 	bl	800e962 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010554:	4b0c      	ldr	r3, [pc, #48]	; (8010588 <xTaskRemoveFromEventList+0xc0>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801055a:	429a      	cmp	r2, r3
 801055c:	d905      	bls.n	801056a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801055e:	2301      	movs	r3, #1
 8010560:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010562:	4b0a      	ldr	r3, [pc, #40]	; (801058c <xTaskRemoveFromEventList+0xc4>)
 8010564:	2201      	movs	r2, #1
 8010566:	601a      	str	r2, [r3, #0]
 8010568:	e001      	b.n	801056e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801056a:	2300      	movs	r3, #0
 801056c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801056e:	697b      	ldr	r3, [r7, #20]
}
 8010570:	4618      	mov	r0, r3
 8010572:	3718      	adds	r7, #24
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}
 8010578:	2000215c 	.word	0x2000215c
 801057c:	2000213c 	.word	0x2000213c
 8010580:	20001c64 	.word	0x20001c64
 8010584:	200020f4 	.word	0x200020f4
 8010588:	20001c60 	.word	0x20001c60
 801058c:	20002148 	.word	0x20002148

08010590 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010590:	b480      	push	{r7}
 8010592:	b083      	sub	sp, #12
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010598:	4b06      	ldr	r3, [pc, #24]	; (80105b4 <vTaskInternalSetTimeOutState+0x24>)
 801059a:	681a      	ldr	r2, [r3, #0]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80105a0:	4b05      	ldr	r3, [pc, #20]	; (80105b8 <vTaskInternalSetTimeOutState+0x28>)
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	605a      	str	r2, [r3, #4]
}
 80105a8:	bf00      	nop
 80105aa:	370c      	adds	r7, #12
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr
 80105b4:	2000214c 	.word	0x2000214c
 80105b8:	20002138 	.word	0x20002138

080105bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b088      	sub	sp, #32
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d109      	bne.n	80105e0 <xTaskCheckForTimeOut+0x24>
 80105cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d0:	f383 8811 	msr	BASEPRI, r3
 80105d4:	f3bf 8f6f 	isb	sy
 80105d8:	f3bf 8f4f 	dsb	sy
 80105dc:	613b      	str	r3, [r7, #16]
 80105de:	e7fe      	b.n	80105de <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d109      	bne.n	80105fa <xTaskCheckForTimeOut+0x3e>
 80105e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ea:	f383 8811 	msr	BASEPRI, r3
 80105ee:	f3bf 8f6f 	isb	sy
 80105f2:	f3bf 8f4f 	dsb	sy
 80105f6:	60fb      	str	r3, [r7, #12]
 80105f8:	e7fe      	b.n	80105f8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80105fa:	f001 f97f 	bl	80118fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80105fe:	4b1d      	ldr	r3, [pc, #116]	; (8010674 <xTaskCheckForTimeOut+0xb8>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	685b      	ldr	r3, [r3, #4]
 8010608:	69ba      	ldr	r2, [r7, #24]
 801060a:	1ad3      	subs	r3, r2, r3
 801060c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010616:	d102      	bne.n	801061e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010618:	2300      	movs	r3, #0
 801061a:	61fb      	str	r3, [r7, #28]
 801061c:	e023      	b.n	8010666 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681a      	ldr	r2, [r3, #0]
 8010622:	4b15      	ldr	r3, [pc, #84]	; (8010678 <xTaskCheckForTimeOut+0xbc>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	429a      	cmp	r2, r3
 8010628:	d007      	beq.n	801063a <xTaskCheckForTimeOut+0x7e>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	69ba      	ldr	r2, [r7, #24]
 8010630:	429a      	cmp	r2, r3
 8010632:	d302      	bcc.n	801063a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010634:	2301      	movs	r3, #1
 8010636:	61fb      	str	r3, [r7, #28]
 8010638:	e015      	b.n	8010666 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	697a      	ldr	r2, [r7, #20]
 8010640:	429a      	cmp	r2, r3
 8010642:	d20b      	bcs.n	801065c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	681a      	ldr	r2, [r3, #0]
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	1ad2      	subs	r2, r2, r3
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f7ff ff9d 	bl	8010590 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010656:	2300      	movs	r3, #0
 8010658:	61fb      	str	r3, [r7, #28]
 801065a:	e004      	b.n	8010666 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	2200      	movs	r2, #0
 8010660:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010662:	2301      	movs	r3, #1
 8010664:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010666:	f001 f977 	bl	8011958 <vPortExitCritical>

	return xReturn;
 801066a:	69fb      	ldr	r3, [r7, #28]
}
 801066c:	4618      	mov	r0, r3
 801066e:	3720      	adds	r7, #32
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	20002138 	.word	0x20002138
 8010678:	2000214c 	.word	0x2000214c

0801067c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801067c:	b480      	push	{r7}
 801067e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010680:	4b03      	ldr	r3, [pc, #12]	; (8010690 <vTaskMissedYield+0x14>)
 8010682:	2201      	movs	r2, #1
 8010684:	601a      	str	r2, [r3, #0]
}
 8010686:	bf00      	nop
 8010688:	46bd      	mov	sp, r7
 801068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068e:	4770      	bx	lr
 8010690:	20002148 	.word	0x20002148

08010694 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b084      	sub	sp, #16
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801069c:	f000 f878 	bl	8010790 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80106a0:	4b17      	ldr	r3, [pc, #92]	; (8010700 <prvIdleTask+0x6c>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d907      	bls.n	80106b8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80106a8:	4b16      	ldr	r3, [pc, #88]	; (8010704 <prvIdleTask+0x70>)
 80106aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106ae:	601a      	str	r2, [r3, #0]
 80106b0:	f3bf 8f4f 	dsb	sy
 80106b4:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80106b8:	f7ff fcc0 	bl	801003c <prvGetExpectedIdleTime>
 80106bc:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	d9eb      	bls.n	801069c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 80106c4:	f7ff fcac 	bl	8010020 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80106c8:	4b0f      	ldr	r3, [pc, #60]	; (8010708 <prvIdleTask+0x74>)
 80106ca:	681a      	ldr	r2, [r3, #0]
 80106cc:	4b0f      	ldr	r3, [pc, #60]	; (801070c <prvIdleTask+0x78>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d209      	bcs.n	80106e8 <prvIdleTask+0x54>
 80106d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d8:	f383 8811 	msr	BASEPRI, r3
 80106dc:	f3bf 8f6f 	isb	sy
 80106e0:	f3bf 8f4f 	dsb	sy
 80106e4:	60bb      	str	r3, [r7, #8]
 80106e6:	e7fe      	b.n	80106e6 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 80106e8:	f7ff fca8 	bl	801003c <prvGetExpectedIdleTime>
 80106ec:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d902      	bls.n	80106fa <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80106f4:	68f8      	ldr	r0, [r7, #12]
 80106f6:	f7f0 fd6a 	bl	80011ce <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 80106fa:	f7ff fcd7 	bl	80100ac <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 80106fe:	e7cd      	b.n	801069c <prvIdleTask+0x8>
 8010700:	20001c64 	.word	0x20001c64
 8010704:	e000ed04 	.word	0xe000ed04
 8010708:	20002154 	.word	0x20002154
 801070c:	20002138 	.word	0x20002138

08010710 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010716:	2300      	movs	r3, #0
 8010718:	607b      	str	r3, [r7, #4]
 801071a:	e00c      	b.n	8010736 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801071c:	687a      	ldr	r2, [r7, #4]
 801071e:	4613      	mov	r3, r2
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	4413      	add	r3, r2
 8010724:	009b      	lsls	r3, r3, #2
 8010726:	4a12      	ldr	r2, [pc, #72]	; (8010770 <prvInitialiseTaskLists+0x60>)
 8010728:	4413      	add	r3, r2
 801072a:	4618      	mov	r0, r3
 801072c:	f7fe f8ec 	bl	800e908 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	3301      	adds	r3, #1
 8010734:	607b      	str	r3, [r7, #4]
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2b37      	cmp	r3, #55	; 0x37
 801073a:	d9ef      	bls.n	801071c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801073c:	480d      	ldr	r0, [pc, #52]	; (8010774 <prvInitialiseTaskLists+0x64>)
 801073e:	f7fe f8e3 	bl	800e908 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010742:	480d      	ldr	r0, [pc, #52]	; (8010778 <prvInitialiseTaskLists+0x68>)
 8010744:	f7fe f8e0 	bl	800e908 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010748:	480c      	ldr	r0, [pc, #48]	; (801077c <prvInitialiseTaskLists+0x6c>)
 801074a:	f7fe f8dd 	bl	800e908 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801074e:	480c      	ldr	r0, [pc, #48]	; (8010780 <prvInitialiseTaskLists+0x70>)
 8010750:	f7fe f8da 	bl	800e908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010754:	480b      	ldr	r0, [pc, #44]	; (8010784 <prvInitialiseTaskLists+0x74>)
 8010756:	f7fe f8d7 	bl	800e908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801075a:	4b0b      	ldr	r3, [pc, #44]	; (8010788 <prvInitialiseTaskLists+0x78>)
 801075c:	4a05      	ldr	r2, [pc, #20]	; (8010774 <prvInitialiseTaskLists+0x64>)
 801075e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010760:	4b0a      	ldr	r3, [pc, #40]	; (801078c <prvInitialiseTaskLists+0x7c>)
 8010762:	4a05      	ldr	r2, [pc, #20]	; (8010778 <prvInitialiseTaskLists+0x68>)
 8010764:	601a      	str	r2, [r3, #0]
}
 8010766:	bf00      	nop
 8010768:	3708      	adds	r7, #8
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	20001c64 	.word	0x20001c64
 8010774:	200020c4 	.word	0x200020c4
 8010778:	200020d8 	.word	0x200020d8
 801077c:	200020f4 	.word	0x200020f4
 8010780:	20002108 	.word	0x20002108
 8010784:	20002120 	.word	0x20002120
 8010788:	200020ec 	.word	0x200020ec
 801078c:	200020f0 	.word	0x200020f0

08010790 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010796:	e019      	b.n	80107cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010798:	f001 f8b0 	bl	80118fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801079c:	4b0f      	ldr	r3, [pc, #60]	; (80107dc <prvCheckTasksWaitingTermination+0x4c>)
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	68db      	ldr	r3, [r3, #12]
 80107a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	3304      	adds	r3, #4
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7fe f937 	bl	800ea1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80107ae:	4b0c      	ldr	r3, [pc, #48]	; (80107e0 <prvCheckTasksWaitingTermination+0x50>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	3b01      	subs	r3, #1
 80107b4:	4a0a      	ldr	r2, [pc, #40]	; (80107e0 <prvCheckTasksWaitingTermination+0x50>)
 80107b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80107b8:	4b0a      	ldr	r3, [pc, #40]	; (80107e4 <prvCheckTasksWaitingTermination+0x54>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	3b01      	subs	r3, #1
 80107be:	4a09      	ldr	r2, [pc, #36]	; (80107e4 <prvCheckTasksWaitingTermination+0x54>)
 80107c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80107c2:	f001 f8c9 	bl	8011958 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f000 f80e 	bl	80107e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80107cc:	4b05      	ldr	r3, [pc, #20]	; (80107e4 <prvCheckTasksWaitingTermination+0x54>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d1e1      	bne.n	8010798 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80107d4:	bf00      	nop
 80107d6:	3708      	adds	r7, #8
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	20002108 	.word	0x20002108
 80107e0:	20002134 	.word	0x20002134
 80107e4:	2000211c 	.word	0x2000211c

080107e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b084      	sub	sp, #16
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d108      	bne.n	801080c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107fe:	4618      	mov	r0, r3
 8010800:	f001 fa58 	bl	8011cb4 <vPortFree>
				vPortFree( pxTCB );
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f001 fa55 	bl	8011cb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801080a:	e017      	b.n	801083c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010812:	2b01      	cmp	r3, #1
 8010814:	d103      	bne.n	801081e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f001 fa4c 	bl	8011cb4 <vPortFree>
	}
 801081c:	e00e      	b.n	801083c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010824:	2b02      	cmp	r3, #2
 8010826:	d009      	beq.n	801083c <prvDeleteTCB+0x54>
 8010828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801082c:	f383 8811 	msr	BASEPRI, r3
 8010830:	f3bf 8f6f 	isb	sy
 8010834:	f3bf 8f4f 	dsb	sy
 8010838:	60fb      	str	r3, [r7, #12]
 801083a:	e7fe      	b.n	801083a <prvDeleteTCB+0x52>
	}
 801083c:	bf00      	nop
 801083e:	3710      	adds	r7, #16
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}

08010844 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010844:	b480      	push	{r7}
 8010846:	b083      	sub	sp, #12
 8010848:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801084a:	4b0c      	ldr	r3, [pc, #48]	; (801087c <prvResetNextTaskUnblockTime+0x38>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d104      	bne.n	801085e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010854:	4b0a      	ldr	r3, [pc, #40]	; (8010880 <prvResetNextTaskUnblockTime+0x3c>)
 8010856:	f04f 32ff 	mov.w	r2, #4294967295
 801085a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801085c:	e008      	b.n	8010870 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801085e:	4b07      	ldr	r3, [pc, #28]	; (801087c <prvResetNextTaskUnblockTime+0x38>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	68db      	ldr	r3, [r3, #12]
 8010864:	68db      	ldr	r3, [r3, #12]
 8010866:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	685b      	ldr	r3, [r3, #4]
 801086c:	4a04      	ldr	r2, [pc, #16]	; (8010880 <prvResetNextTaskUnblockTime+0x3c>)
 801086e:	6013      	str	r3, [r2, #0]
}
 8010870:	bf00      	nop
 8010872:	370c      	adds	r7, #12
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr
 801087c:	200020ec 	.word	0x200020ec
 8010880:	20002154 	.word	0x20002154

08010884 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801088a:	4b05      	ldr	r3, [pc, #20]	; (80108a0 <xTaskGetCurrentTaskHandle+0x1c>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010890:	687b      	ldr	r3, [r7, #4]
	}
 8010892:	4618      	mov	r0, r3
 8010894:	370c      	adds	r7, #12
 8010896:	46bd      	mov	sp, r7
 8010898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089c:	4770      	bx	lr
 801089e:	bf00      	nop
 80108a0:	20001c60 	.word	0x20001c60

080108a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80108a4:	b480      	push	{r7}
 80108a6:	b083      	sub	sp, #12
 80108a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80108aa:	4b0b      	ldr	r3, [pc, #44]	; (80108d8 <xTaskGetSchedulerState+0x34>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d102      	bne.n	80108b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80108b2:	2301      	movs	r3, #1
 80108b4:	607b      	str	r3, [r7, #4]
 80108b6:	e008      	b.n	80108ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108b8:	4b08      	ldr	r3, [pc, #32]	; (80108dc <xTaskGetSchedulerState+0x38>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d102      	bne.n	80108c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80108c0:	2302      	movs	r3, #2
 80108c2:	607b      	str	r3, [r7, #4]
 80108c4:	e001      	b.n	80108ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80108c6:	2300      	movs	r3, #0
 80108c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80108ca:	687b      	ldr	r3, [r7, #4]
	}
 80108cc:	4618      	mov	r0, r3
 80108ce:	370c      	adds	r7, #12
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr
 80108d8:	20002140 	.word	0x20002140
 80108dc:	2000215c 	.word	0x2000215c

080108e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b084      	sub	sp, #16
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80108ec:	2300      	movs	r3, #0
 80108ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d051      	beq.n	801099a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108fa:	4b2a      	ldr	r3, [pc, #168]	; (80109a4 <xTaskPriorityInherit+0xc4>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010900:	429a      	cmp	r2, r3
 8010902:	d241      	bcs.n	8010988 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	699b      	ldr	r3, [r3, #24]
 8010908:	2b00      	cmp	r3, #0
 801090a:	db06      	blt.n	801091a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801090c:	4b25      	ldr	r3, [pc, #148]	; (80109a4 <xTaskPriorityInherit+0xc4>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010912:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	6959      	ldr	r1, [r3, #20]
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010922:	4613      	mov	r3, r2
 8010924:	009b      	lsls	r3, r3, #2
 8010926:	4413      	add	r3, r2
 8010928:	009b      	lsls	r3, r3, #2
 801092a:	4a1f      	ldr	r2, [pc, #124]	; (80109a8 <xTaskPriorityInherit+0xc8>)
 801092c:	4413      	add	r3, r2
 801092e:	4299      	cmp	r1, r3
 8010930:	d122      	bne.n	8010978 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	3304      	adds	r3, #4
 8010936:	4618      	mov	r0, r3
 8010938:	f7fe f870 	bl	800ea1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801093c:	4b19      	ldr	r3, [pc, #100]	; (80109a4 <xTaskPriorityInherit+0xc4>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801094a:	4b18      	ldr	r3, [pc, #96]	; (80109ac <xTaskPriorityInherit+0xcc>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	429a      	cmp	r2, r3
 8010950:	d903      	bls.n	801095a <xTaskPriorityInherit+0x7a>
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010956:	4a15      	ldr	r2, [pc, #84]	; (80109ac <xTaskPriorityInherit+0xcc>)
 8010958:	6013      	str	r3, [r2, #0]
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801095e:	4613      	mov	r3, r2
 8010960:	009b      	lsls	r3, r3, #2
 8010962:	4413      	add	r3, r2
 8010964:	009b      	lsls	r3, r3, #2
 8010966:	4a10      	ldr	r2, [pc, #64]	; (80109a8 <xTaskPriorityInherit+0xc8>)
 8010968:	441a      	add	r2, r3
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	3304      	adds	r3, #4
 801096e:	4619      	mov	r1, r3
 8010970:	4610      	mov	r0, r2
 8010972:	f7fd fff6 	bl	800e962 <vListInsertEnd>
 8010976:	e004      	b.n	8010982 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010978:	4b0a      	ldr	r3, [pc, #40]	; (80109a4 <xTaskPriorityInherit+0xc4>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010982:	2301      	movs	r3, #1
 8010984:	60fb      	str	r3, [r7, #12]
 8010986:	e008      	b.n	801099a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801098c:	4b05      	ldr	r3, [pc, #20]	; (80109a4 <xTaskPriorityInherit+0xc4>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010992:	429a      	cmp	r2, r3
 8010994:	d201      	bcs.n	801099a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010996:	2301      	movs	r3, #1
 8010998:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801099a:	68fb      	ldr	r3, [r7, #12]
	}
 801099c:	4618      	mov	r0, r3
 801099e:	3710      	adds	r7, #16
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}
 80109a4:	20001c60 	.word	0x20001c60
 80109a8:	20001c64 	.word	0x20001c64
 80109ac:	2000213c 	.word	0x2000213c

080109b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b086      	sub	sp, #24
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80109bc:	2300      	movs	r3, #0
 80109be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d054      	beq.n	8010a70 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80109c6:	4b2d      	ldr	r3, [pc, #180]	; (8010a7c <xTaskPriorityDisinherit+0xcc>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	693a      	ldr	r2, [r7, #16]
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d009      	beq.n	80109e4 <xTaskPriorityDisinherit+0x34>
 80109d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d4:	f383 8811 	msr	BASEPRI, r3
 80109d8:	f3bf 8f6f 	isb	sy
 80109dc:	f3bf 8f4f 	dsb	sy
 80109e0:	60fb      	str	r3, [r7, #12]
 80109e2:	e7fe      	b.n	80109e2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d109      	bne.n	8010a00 <xTaskPriorityDisinherit+0x50>
 80109ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109f0:	f383 8811 	msr	BASEPRI, r3
 80109f4:	f3bf 8f6f 	isb	sy
 80109f8:	f3bf 8f4f 	dsb	sy
 80109fc:	60bb      	str	r3, [r7, #8]
 80109fe:	e7fe      	b.n	80109fe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8010a00:	693b      	ldr	r3, [r7, #16]
 8010a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a04:	1e5a      	subs	r2, r3, #1
 8010a06:	693b      	ldr	r3, [r7, #16]
 8010a08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a0e:	693b      	ldr	r3, [r7, #16]
 8010a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d02c      	beq.n	8010a70 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d128      	bne.n	8010a70 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a1e:	693b      	ldr	r3, [r7, #16]
 8010a20:	3304      	adds	r3, #4
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7fd fffa 	bl	800ea1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010a2c:	693b      	ldr	r3, [r7, #16]
 8010a2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a30:	693b      	ldr	r3, [r7, #16]
 8010a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010a3c:	693b      	ldr	r3, [r7, #16]
 8010a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a40:	4b0f      	ldr	r3, [pc, #60]	; (8010a80 <xTaskPriorityDisinherit+0xd0>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d903      	bls.n	8010a50 <xTaskPriorityDisinherit+0xa0>
 8010a48:	693b      	ldr	r3, [r7, #16]
 8010a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a4c:	4a0c      	ldr	r2, [pc, #48]	; (8010a80 <xTaskPriorityDisinherit+0xd0>)
 8010a4e:	6013      	str	r3, [r2, #0]
 8010a50:	693b      	ldr	r3, [r7, #16]
 8010a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a54:	4613      	mov	r3, r2
 8010a56:	009b      	lsls	r3, r3, #2
 8010a58:	4413      	add	r3, r2
 8010a5a:	009b      	lsls	r3, r3, #2
 8010a5c:	4a09      	ldr	r2, [pc, #36]	; (8010a84 <xTaskPriorityDisinherit+0xd4>)
 8010a5e:	441a      	add	r2, r3
 8010a60:	693b      	ldr	r3, [r7, #16]
 8010a62:	3304      	adds	r3, #4
 8010a64:	4619      	mov	r1, r3
 8010a66:	4610      	mov	r0, r2
 8010a68:	f7fd ff7b 	bl	800e962 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010a6c:	2301      	movs	r3, #1
 8010a6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010a70:	697b      	ldr	r3, [r7, #20]
	}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3718      	adds	r7, #24
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	20001c60 	.word	0x20001c60
 8010a80:	2000213c 	.word	0x2000213c
 8010a84:	20001c64 	.word	0x20001c64

08010a88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b088      	sub	sp, #32
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010a96:	2301      	movs	r3, #1
 8010a98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d068      	beq.n	8010b72 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010aa0:	69bb      	ldr	r3, [r7, #24]
 8010aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d109      	bne.n	8010abc <vTaskPriorityDisinheritAfterTimeout+0x34>
 8010aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aac:	f383 8811 	msr	BASEPRI, r3
 8010ab0:	f3bf 8f6f 	isb	sy
 8010ab4:	f3bf 8f4f 	dsb	sy
 8010ab8:	60fb      	str	r3, [r7, #12]
 8010aba:	e7fe      	b.n	8010aba <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010abc:	69bb      	ldr	r3, [r7, #24]
 8010abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ac0:	683a      	ldr	r2, [r7, #0]
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d902      	bls.n	8010acc <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	61fb      	str	r3, [r7, #28]
 8010aca:	e002      	b.n	8010ad2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010acc:	69bb      	ldr	r3, [r7, #24]
 8010ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ad0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010ad2:	69bb      	ldr	r3, [r7, #24]
 8010ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ad6:	69fa      	ldr	r2, [r7, #28]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d04a      	beq.n	8010b72 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010adc:	69bb      	ldr	r3, [r7, #24]
 8010ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ae0:	697a      	ldr	r2, [r7, #20]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d145      	bne.n	8010b72 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010ae6:	4b25      	ldr	r3, [pc, #148]	; (8010b7c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	69ba      	ldr	r2, [r7, #24]
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d109      	bne.n	8010b04 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8010af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af4:	f383 8811 	msr	BASEPRI, r3
 8010af8:	f3bf 8f6f 	isb	sy
 8010afc:	f3bf 8f4f 	dsb	sy
 8010b00:	60bb      	str	r3, [r7, #8]
 8010b02:	e7fe      	b.n	8010b02 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010b04:	69bb      	ldr	r3, [r7, #24]
 8010b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b08:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010b0a:	69bb      	ldr	r3, [r7, #24]
 8010b0c:	69fa      	ldr	r2, [r7, #28]
 8010b0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010b10:	69bb      	ldr	r3, [r7, #24]
 8010b12:	699b      	ldr	r3, [r3, #24]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	db04      	blt.n	8010b22 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b18:	69fb      	ldr	r3, [r7, #28]
 8010b1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010b1e:	69bb      	ldr	r3, [r7, #24]
 8010b20:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010b22:	69bb      	ldr	r3, [r7, #24]
 8010b24:	6959      	ldr	r1, [r3, #20]
 8010b26:	693a      	ldr	r2, [r7, #16]
 8010b28:	4613      	mov	r3, r2
 8010b2a:	009b      	lsls	r3, r3, #2
 8010b2c:	4413      	add	r3, r2
 8010b2e:	009b      	lsls	r3, r3, #2
 8010b30:	4a13      	ldr	r2, [pc, #76]	; (8010b80 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010b32:	4413      	add	r3, r2
 8010b34:	4299      	cmp	r1, r3
 8010b36:	d11c      	bne.n	8010b72 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b38:	69bb      	ldr	r3, [r7, #24]
 8010b3a:	3304      	adds	r3, #4
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f7fd ff6d 	bl	800ea1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010b42:	69bb      	ldr	r3, [r7, #24]
 8010b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b46:	4b0f      	ldr	r3, [pc, #60]	; (8010b84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d903      	bls.n	8010b56 <vTaskPriorityDisinheritAfterTimeout+0xce>
 8010b4e:	69bb      	ldr	r3, [r7, #24]
 8010b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b52:	4a0c      	ldr	r2, [pc, #48]	; (8010b84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010b54:	6013      	str	r3, [r2, #0]
 8010b56:	69bb      	ldr	r3, [r7, #24]
 8010b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b5a:	4613      	mov	r3, r2
 8010b5c:	009b      	lsls	r3, r3, #2
 8010b5e:	4413      	add	r3, r2
 8010b60:	009b      	lsls	r3, r3, #2
 8010b62:	4a07      	ldr	r2, [pc, #28]	; (8010b80 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010b64:	441a      	add	r2, r3
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	3304      	adds	r3, #4
 8010b6a:	4619      	mov	r1, r3
 8010b6c:	4610      	mov	r0, r2
 8010b6e:	f7fd fef8 	bl	800e962 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010b72:	bf00      	nop
 8010b74:	3720      	adds	r7, #32
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}
 8010b7a:	bf00      	nop
 8010b7c:	20001c60 	.word	0x20001c60
 8010b80:	20001c64 	.word	0x20001c64
 8010b84:	2000213c 	.word	0x2000213c

08010b88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010b88:	b480      	push	{r7}
 8010b8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010b8c:	4b07      	ldr	r3, [pc, #28]	; (8010bac <pvTaskIncrementMutexHeldCount+0x24>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d004      	beq.n	8010b9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010b94:	4b05      	ldr	r3, [pc, #20]	; (8010bac <pvTaskIncrementMutexHeldCount+0x24>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b9a:	3201      	adds	r2, #1
 8010b9c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010b9e:	4b03      	ldr	r3, [pc, #12]	; (8010bac <pvTaskIncrementMutexHeldCount+0x24>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
	}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010baa:	4770      	bx	lr
 8010bac:	20001c60 	.word	0x20001c60

08010bb0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b086      	sub	sp, #24
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	60f8      	str	r0, [r7, #12]
 8010bb8:	60b9      	str	r1, [r7, #8]
 8010bba:	607a      	str	r2, [r7, #4]
 8010bbc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8010bbe:	f000 fe9d 	bl	80118fc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010bc2:	4b26      	ldr	r3, [pc, #152]	; (8010c5c <xTaskNotifyWait+0xac>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010bca:	b2db      	uxtb	r3, r3
 8010bcc:	2b02      	cmp	r3, #2
 8010bce:	d01a      	beq.n	8010c06 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010bd0:	4b22      	ldr	r3, [pc, #136]	; (8010c5c <xTaskNotifyWait+0xac>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010bd6:	68fa      	ldr	r2, [r7, #12]
 8010bd8:	43d2      	mvns	r2, r2
 8010bda:	400a      	ands	r2, r1
 8010bdc:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010bde:	4b1f      	ldr	r3, [pc, #124]	; (8010c5c <xTaskNotifyWait+0xac>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	2201      	movs	r2, #1
 8010be4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d00b      	beq.n	8010c06 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010bee:	2101      	movs	r1, #1
 8010bf0:	6838      	ldr	r0, [r7, #0]
 8010bf2:	f000 f9c5 	bl	8010f80 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010bf6:	4b1a      	ldr	r3, [pc, #104]	; (8010c60 <xTaskNotifyWait+0xb0>)
 8010bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bfc:	601a      	str	r2, [r3, #0]
 8010bfe:	f3bf 8f4f 	dsb	sy
 8010c02:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010c06:	f000 fea7 	bl	8011958 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010c0a:	f000 fe77 	bl	80118fc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d004      	beq.n	8010c1e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010c14:	4b11      	ldr	r3, [pc, #68]	; (8010c5c <xTaskNotifyWait+0xac>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010c1e:	4b0f      	ldr	r3, [pc, #60]	; (8010c5c <xTaskNotifyWait+0xac>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	2b02      	cmp	r3, #2
 8010c2a:	d002      	beq.n	8010c32 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	617b      	str	r3, [r7, #20]
 8010c30:	e008      	b.n	8010c44 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010c32:	4b0a      	ldr	r3, [pc, #40]	; (8010c5c <xTaskNotifyWait+0xac>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010c38:	68ba      	ldr	r2, [r7, #8]
 8010c3a:	43d2      	mvns	r2, r2
 8010c3c:	400a      	ands	r2, r1
 8010c3e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8010c40:	2301      	movs	r3, #1
 8010c42:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010c44:	4b05      	ldr	r3, [pc, #20]	; (8010c5c <xTaskNotifyWait+0xac>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	2200      	movs	r2, #0
 8010c4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8010c4e:	f000 fe83 	bl	8011958 <vPortExitCritical>

		return xReturn;
 8010c52:	697b      	ldr	r3, [r7, #20]
	}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3718      	adds	r7, #24
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}
 8010c5c:	20001c60 	.word	0x20001c60
 8010c60:	e000ed04 	.word	0xe000ed04

08010c64 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b08a      	sub	sp, #40	; 0x28
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	60f8      	str	r0, [r7, #12]
 8010c6c:	60b9      	str	r1, [r7, #8]
 8010c6e:	603b      	str	r3, [r7, #0]
 8010c70:	4613      	mov	r3, r2
 8010c72:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010c74:	2301      	movs	r3, #1
 8010c76:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d109      	bne.n	8010c92 <xTaskGenericNotify+0x2e>
 8010c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c82:	f383 8811 	msr	BASEPRI, r3
 8010c86:	f3bf 8f6f 	isb	sy
 8010c8a:	f3bf 8f4f 	dsb	sy
 8010c8e:	61bb      	str	r3, [r7, #24]
 8010c90:	e7fe      	b.n	8010c90 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8010c96:	f000 fe31 	bl	80118fc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d003      	beq.n	8010ca8 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010ca0:	6a3b      	ldr	r3, [r7, #32]
 8010ca2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010ca8:	6a3b      	ldr	r3, [r7, #32]
 8010caa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010cae:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010cb0:	6a3b      	ldr	r3, [r7, #32]
 8010cb2:	2202      	movs	r2, #2
 8010cb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8010cb8:	79fb      	ldrb	r3, [r7, #7]
 8010cba:	2b04      	cmp	r3, #4
 8010cbc:	d827      	bhi.n	8010d0e <xTaskGenericNotify+0xaa>
 8010cbe:	a201      	add	r2, pc, #4	; (adr r2, 8010cc4 <xTaskGenericNotify+0x60>)
 8010cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc4:	08010d2d 	.word	0x08010d2d
 8010cc8:	08010cd9 	.word	0x08010cd9
 8010ccc:	08010ce7 	.word	0x08010ce7
 8010cd0:	08010cf3 	.word	0x08010cf3
 8010cd4:	08010cfb 	.word	0x08010cfb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010cd8:	6a3b      	ldr	r3, [r7, #32]
 8010cda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	431a      	orrs	r2, r3
 8010ce0:	6a3b      	ldr	r3, [r7, #32]
 8010ce2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010ce4:	e025      	b.n	8010d32 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010ce6:	6a3b      	ldr	r3, [r7, #32]
 8010ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cea:	1c5a      	adds	r2, r3, #1
 8010cec:	6a3b      	ldr	r3, [r7, #32]
 8010cee:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010cf0:	e01f      	b.n	8010d32 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010cf2:	6a3b      	ldr	r3, [r7, #32]
 8010cf4:	68ba      	ldr	r2, [r7, #8]
 8010cf6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010cf8:	e01b      	b.n	8010d32 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010cfa:	7ffb      	ldrb	r3, [r7, #31]
 8010cfc:	2b02      	cmp	r3, #2
 8010cfe:	d003      	beq.n	8010d08 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010d00:	6a3b      	ldr	r3, [r7, #32]
 8010d02:	68ba      	ldr	r2, [r7, #8]
 8010d04:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010d06:	e014      	b.n	8010d32 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8010d0c:	e011      	b.n	8010d32 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010d0e:	6a3b      	ldr	r3, [r7, #32]
 8010d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d16:	d00b      	beq.n	8010d30 <xTaskGenericNotify+0xcc>
 8010d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d1c:	f383 8811 	msr	BASEPRI, r3
 8010d20:	f3bf 8f6f 	isb	sy
 8010d24:	f3bf 8f4f 	dsb	sy
 8010d28:	617b      	str	r3, [r7, #20]
 8010d2a:	e7fe      	b.n	8010d2a <xTaskGenericNotify+0xc6>
					break;
 8010d2c:	bf00      	nop
 8010d2e:	e000      	b.n	8010d32 <xTaskGenericNotify+0xce>

					break;
 8010d30:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010d32:	7ffb      	ldrb	r3, [r7, #31]
 8010d34:	2b01      	cmp	r3, #1
 8010d36:	d13b      	bne.n	8010db0 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d38:	6a3b      	ldr	r3, [r7, #32]
 8010d3a:	3304      	adds	r3, #4
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7fd fe6d 	bl	800ea1c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010d42:	6a3b      	ldr	r3, [r7, #32]
 8010d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d46:	4b1e      	ldr	r3, [pc, #120]	; (8010dc0 <xTaskGenericNotify+0x15c>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d903      	bls.n	8010d56 <xTaskGenericNotify+0xf2>
 8010d4e:	6a3b      	ldr	r3, [r7, #32]
 8010d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d52:	4a1b      	ldr	r2, [pc, #108]	; (8010dc0 <xTaskGenericNotify+0x15c>)
 8010d54:	6013      	str	r3, [r2, #0]
 8010d56:	6a3b      	ldr	r3, [r7, #32]
 8010d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d5a:	4613      	mov	r3, r2
 8010d5c:	009b      	lsls	r3, r3, #2
 8010d5e:	4413      	add	r3, r2
 8010d60:	009b      	lsls	r3, r3, #2
 8010d62:	4a18      	ldr	r2, [pc, #96]	; (8010dc4 <xTaskGenericNotify+0x160>)
 8010d64:	441a      	add	r2, r3
 8010d66:	6a3b      	ldr	r3, [r7, #32]
 8010d68:	3304      	adds	r3, #4
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	4610      	mov	r0, r2
 8010d6e:	f7fd fdf8 	bl	800e962 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010d72:	6a3b      	ldr	r3, [r7, #32]
 8010d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d009      	beq.n	8010d8e <xTaskGenericNotify+0x12a>
 8010d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d7e:	f383 8811 	msr	BASEPRI, r3
 8010d82:	f3bf 8f6f 	isb	sy
 8010d86:	f3bf 8f4f 	dsb	sy
 8010d8a:	613b      	str	r3, [r7, #16]
 8010d8c:	e7fe      	b.n	8010d8c <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8010d8e:	f7ff fd59 	bl	8010844 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010d92:	6a3b      	ldr	r3, [r7, #32]
 8010d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d96:	4b0c      	ldr	r3, [pc, #48]	; (8010dc8 <xTaskGenericNotify+0x164>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d907      	bls.n	8010db0 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010da0:	4b0a      	ldr	r3, [pc, #40]	; (8010dcc <xTaskGenericNotify+0x168>)
 8010da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010da6:	601a      	str	r2, [r3, #0]
 8010da8:	f3bf 8f4f 	dsb	sy
 8010dac:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010db0:	f000 fdd2 	bl	8011958 <vPortExitCritical>

		return xReturn;
 8010db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3728      	adds	r7, #40	; 0x28
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	2000213c 	.word	0x2000213c
 8010dc4:	20001c64 	.word	0x20001c64
 8010dc8:	20001c60 	.word	0x20001c60
 8010dcc:	e000ed04 	.word	0xe000ed04

08010dd0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b08e      	sub	sp, #56	; 0x38
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	60f8      	str	r0, [r7, #12]
 8010dd8:	60b9      	str	r1, [r7, #8]
 8010dda:	603b      	str	r3, [r7, #0]
 8010ddc:	4613      	mov	r3, r2
 8010dde:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8010de0:	2301      	movs	r3, #1
 8010de2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d109      	bne.n	8010dfe <xTaskGenericNotifyFromISR+0x2e>
 8010dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dee:	f383 8811 	msr	BASEPRI, r3
 8010df2:	f3bf 8f6f 	isb	sy
 8010df6:	f3bf 8f4f 	dsb	sy
 8010dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8010dfc:	e7fe      	b.n	8010dfc <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010dfe:	f000 fe59 	bl	8011ab4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8010e06:	f3ef 8211 	mrs	r2, BASEPRI
 8010e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e0e:	f383 8811 	msr	BASEPRI, r3
 8010e12:	f3bf 8f6f 	isb	sy
 8010e16:	f3bf 8f4f 	dsb	sy
 8010e1a:	623a      	str	r2, [r7, #32]
 8010e1c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8010e1e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010e20:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d003      	beq.n	8010e30 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e3c:	2202      	movs	r2, #2
 8010e3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8010e42:	79fb      	ldrb	r3, [r7, #7]
 8010e44:	2b04      	cmp	r3, #4
 8010e46:	d829      	bhi.n	8010e9c <xTaskGenericNotifyFromISR+0xcc>
 8010e48:	a201      	add	r2, pc, #4	; (adr r2, 8010e50 <xTaskGenericNotifyFromISR+0x80>)
 8010e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e4e:	bf00      	nop
 8010e50:	08010ebb 	.word	0x08010ebb
 8010e54:	08010e65 	.word	0x08010e65
 8010e58:	08010e73 	.word	0x08010e73
 8010e5c:	08010e7f 	.word	0x08010e7f
 8010e60:	08010e87 	.word	0x08010e87
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	431a      	orrs	r2, r3
 8010e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010e70:	e026      	b.n	8010ec0 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e76:	1c5a      	adds	r2, r3, #1
 8010e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010e7c:	e020      	b.n	8010ec0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e80:	68ba      	ldr	r2, [r7, #8]
 8010e82:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010e84:	e01c      	b.n	8010ec0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010e86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010e8a:	2b02      	cmp	r3, #2
 8010e8c:	d003      	beq.n	8010e96 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e90:	68ba      	ldr	r2, [r7, #8]
 8010e92:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010e94:	e014      	b.n	8010ec0 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8010e96:	2300      	movs	r3, #0
 8010e98:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8010e9a:	e011      	b.n	8010ec0 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ea4:	d00b      	beq.n	8010ebe <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8010ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eaa:	f383 8811 	msr	BASEPRI, r3
 8010eae:	f3bf 8f6f 	isb	sy
 8010eb2:	f3bf 8f4f 	dsb	sy
 8010eb6:	61bb      	str	r3, [r7, #24]
 8010eb8:	e7fe      	b.n	8010eb8 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8010eba:	bf00      	nop
 8010ebc:	e000      	b.n	8010ec0 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8010ebe:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010ec0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010ec4:	2b01      	cmp	r3, #1
 8010ec6:	d145      	bne.n	8010f54 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d009      	beq.n	8010ee4 <xTaskGenericNotifyFromISR+0x114>
 8010ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed4:	f383 8811 	msr	BASEPRI, r3
 8010ed8:	f3bf 8f6f 	isb	sy
 8010edc:	f3bf 8f4f 	dsb	sy
 8010ee0:	617b      	str	r3, [r7, #20]
 8010ee2:	e7fe      	b.n	8010ee2 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ee4:	4b20      	ldr	r3, [pc, #128]	; (8010f68 <xTaskGenericNotifyFromISR+0x198>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d11d      	bne.n	8010f28 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eee:	3304      	adds	r3, #4
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f7fd fd93 	bl	800ea1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010efa:	4b1c      	ldr	r3, [pc, #112]	; (8010f6c <xTaskGenericNotifyFromISR+0x19c>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	429a      	cmp	r2, r3
 8010f00:	d903      	bls.n	8010f0a <xTaskGenericNotifyFromISR+0x13a>
 8010f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f06:	4a19      	ldr	r2, [pc, #100]	; (8010f6c <xTaskGenericNotifyFromISR+0x19c>)
 8010f08:	6013      	str	r3, [r2, #0]
 8010f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f0e:	4613      	mov	r3, r2
 8010f10:	009b      	lsls	r3, r3, #2
 8010f12:	4413      	add	r3, r2
 8010f14:	009b      	lsls	r3, r3, #2
 8010f16:	4a16      	ldr	r2, [pc, #88]	; (8010f70 <xTaskGenericNotifyFromISR+0x1a0>)
 8010f18:	441a      	add	r2, r3
 8010f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f1c:	3304      	adds	r3, #4
 8010f1e:	4619      	mov	r1, r3
 8010f20:	4610      	mov	r0, r2
 8010f22:	f7fd fd1e 	bl	800e962 <vListInsertEnd>
 8010f26:	e005      	b.n	8010f34 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f2a:	3318      	adds	r3, #24
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	4811      	ldr	r0, [pc, #68]	; (8010f74 <xTaskGenericNotifyFromISR+0x1a4>)
 8010f30:	f7fd fd17 	bl	800e962 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f38:	4b0f      	ldr	r3, [pc, #60]	; (8010f78 <xTaskGenericNotifyFromISR+0x1a8>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f3e:	429a      	cmp	r2, r3
 8010f40:	d908      	bls.n	8010f54 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d002      	beq.n	8010f4e <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010f4e:	4b0b      	ldr	r3, [pc, #44]	; (8010f7c <xTaskGenericNotifyFromISR+0x1ac>)
 8010f50:	2201      	movs	r2, #1
 8010f52:	601a      	str	r2, [r3, #0]
 8010f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f56:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8010f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3738      	adds	r7, #56	; 0x38
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}
 8010f68:	2000215c 	.word	0x2000215c
 8010f6c:	2000213c 	.word	0x2000213c
 8010f70:	20001c64 	.word	0x20001c64
 8010f74:	200020f4 	.word	0x200020f4
 8010f78:	20001c60 	.word	0x20001c60
 8010f7c:	20002148 	.word	0x20002148

08010f80 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b084      	sub	sp, #16
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010f8a:	4b21      	ldr	r3, [pc, #132]	; (8011010 <prvAddCurrentTaskToDelayedList+0x90>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f90:	4b20      	ldr	r3, [pc, #128]	; (8011014 <prvAddCurrentTaskToDelayedList+0x94>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	3304      	adds	r3, #4
 8010f96:	4618      	mov	r0, r3
 8010f98:	f7fd fd40 	bl	800ea1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fa2:	d10a      	bne.n	8010fba <prvAddCurrentTaskToDelayedList+0x3a>
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d007      	beq.n	8010fba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010faa:	4b1a      	ldr	r3, [pc, #104]	; (8011014 <prvAddCurrentTaskToDelayedList+0x94>)
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	3304      	adds	r3, #4
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	4819      	ldr	r0, [pc, #100]	; (8011018 <prvAddCurrentTaskToDelayedList+0x98>)
 8010fb4:	f7fd fcd5 	bl	800e962 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010fb8:	e026      	b.n	8011008 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010fba:	68fa      	ldr	r2, [r7, #12]
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	4413      	add	r3, r2
 8010fc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010fc2:	4b14      	ldr	r3, [pc, #80]	; (8011014 <prvAddCurrentTaskToDelayedList+0x94>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	68ba      	ldr	r2, [r7, #8]
 8010fc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010fca:	68ba      	ldr	r2, [r7, #8]
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d209      	bcs.n	8010fe6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010fd2:	4b12      	ldr	r3, [pc, #72]	; (801101c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010fd4:	681a      	ldr	r2, [r3, #0]
 8010fd6:	4b0f      	ldr	r3, [pc, #60]	; (8011014 <prvAddCurrentTaskToDelayedList+0x94>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	3304      	adds	r3, #4
 8010fdc:	4619      	mov	r1, r3
 8010fde:	4610      	mov	r0, r2
 8010fe0:	f7fd fce3 	bl	800e9aa <vListInsert>
}
 8010fe4:	e010      	b.n	8011008 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010fe6:	4b0e      	ldr	r3, [pc, #56]	; (8011020 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010fe8:	681a      	ldr	r2, [r3, #0]
 8010fea:	4b0a      	ldr	r3, [pc, #40]	; (8011014 <prvAddCurrentTaskToDelayedList+0x94>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	3304      	adds	r3, #4
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	4610      	mov	r0, r2
 8010ff4:	f7fd fcd9 	bl	800e9aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010ff8:	4b0a      	ldr	r3, [pc, #40]	; (8011024 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	68ba      	ldr	r2, [r7, #8]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d202      	bcs.n	8011008 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011002:	4a08      	ldr	r2, [pc, #32]	; (8011024 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	6013      	str	r3, [r2, #0]
}
 8011008:	bf00      	nop
 801100a:	3710      	adds	r7, #16
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}
 8011010:	20002138 	.word	0x20002138
 8011014:	20001c60 	.word	0x20001c60
 8011018:	20002120 	.word	0x20002120
 801101c:	200020f0 	.word	0x200020f0
 8011020:	200020ec 	.word	0x200020ec
 8011024:	20002154 	.word	0x20002154

08011028 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b08a      	sub	sp, #40	; 0x28
 801102c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801102e:	2300      	movs	r3, #0
 8011030:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011032:	f000 faff 	bl	8011634 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011036:	4b1c      	ldr	r3, [pc, #112]	; (80110a8 <xTimerCreateTimerTask+0x80>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d021      	beq.n	8011082 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801103e:	2300      	movs	r3, #0
 8011040:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011042:	2300      	movs	r3, #0
 8011044:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011046:	1d3a      	adds	r2, r7, #4
 8011048:	f107 0108 	add.w	r1, r7, #8
 801104c:	f107 030c 	add.w	r3, r7, #12
 8011050:	4618      	mov	r0, r3
 8011052:	f7fd fc3f 	bl	800e8d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011056:	6879      	ldr	r1, [r7, #4]
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	68fa      	ldr	r2, [r7, #12]
 801105c:	9202      	str	r2, [sp, #8]
 801105e:	9301      	str	r3, [sp, #4]
 8011060:	2302      	movs	r3, #2
 8011062:	9300      	str	r3, [sp, #0]
 8011064:	2300      	movs	r3, #0
 8011066:	460a      	mov	r2, r1
 8011068:	4910      	ldr	r1, [pc, #64]	; (80110ac <xTimerCreateTimerTask+0x84>)
 801106a:	4811      	ldr	r0, [pc, #68]	; (80110b0 <xTimerCreateTimerTask+0x88>)
 801106c:	f7fe fda2 	bl	800fbb4 <xTaskCreateStatic>
 8011070:	4602      	mov	r2, r0
 8011072:	4b10      	ldr	r3, [pc, #64]	; (80110b4 <xTimerCreateTimerTask+0x8c>)
 8011074:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011076:	4b0f      	ldr	r3, [pc, #60]	; (80110b4 <xTimerCreateTimerTask+0x8c>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d001      	beq.n	8011082 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801107e:	2301      	movs	r3, #1
 8011080:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d109      	bne.n	801109c <xTimerCreateTimerTask+0x74>
	__asm volatile
 8011088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801108c:	f383 8811 	msr	BASEPRI, r3
 8011090:	f3bf 8f6f 	isb	sy
 8011094:	f3bf 8f4f 	dsb	sy
 8011098:	613b      	str	r3, [r7, #16]
 801109a:	e7fe      	b.n	801109a <xTimerCreateTimerTask+0x72>
	return xReturn;
 801109c:	697b      	ldr	r3, [r7, #20]
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3718      	adds	r7, #24
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}
 80110a6:	bf00      	nop
 80110a8:	20002190 	.word	0x20002190
 80110ac:	08013b04 	.word	0x08013b04
 80110b0:	080111e9 	.word	0x080111e9
 80110b4:	20002194 	.word	0x20002194

080110b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b08a      	sub	sp, #40	; 0x28
 80110bc:	af00      	add	r7, sp, #0
 80110be:	60f8      	str	r0, [r7, #12]
 80110c0:	60b9      	str	r1, [r7, #8]
 80110c2:	607a      	str	r2, [r7, #4]
 80110c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80110c6:	2300      	movs	r3, #0
 80110c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d109      	bne.n	80110e4 <xTimerGenericCommand+0x2c>
 80110d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d4:	f383 8811 	msr	BASEPRI, r3
 80110d8:	f3bf 8f6f 	isb	sy
 80110dc:	f3bf 8f4f 	dsb	sy
 80110e0:	623b      	str	r3, [r7, #32]
 80110e2:	e7fe      	b.n	80110e2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80110e4:	4b19      	ldr	r3, [pc, #100]	; (801114c <xTimerGenericCommand+0x94>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d02a      	beq.n	8011142 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	2b05      	cmp	r3, #5
 80110fc:	dc18      	bgt.n	8011130 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80110fe:	f7ff fbd1 	bl	80108a4 <xTaskGetSchedulerState>
 8011102:	4603      	mov	r3, r0
 8011104:	2b02      	cmp	r3, #2
 8011106:	d109      	bne.n	801111c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011108:	4b10      	ldr	r3, [pc, #64]	; (801114c <xTimerGenericCommand+0x94>)
 801110a:	6818      	ldr	r0, [r3, #0]
 801110c:	f107 0110 	add.w	r1, r7, #16
 8011110:	2300      	movs	r3, #0
 8011112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011114:	f7fd ff04 	bl	800ef20 <xQueueGenericSend>
 8011118:	6278      	str	r0, [r7, #36]	; 0x24
 801111a:	e012      	b.n	8011142 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801111c:	4b0b      	ldr	r3, [pc, #44]	; (801114c <xTimerGenericCommand+0x94>)
 801111e:	6818      	ldr	r0, [r3, #0]
 8011120:	f107 0110 	add.w	r1, r7, #16
 8011124:	2300      	movs	r3, #0
 8011126:	2200      	movs	r2, #0
 8011128:	f7fd fefa 	bl	800ef20 <xQueueGenericSend>
 801112c:	6278      	str	r0, [r7, #36]	; 0x24
 801112e:	e008      	b.n	8011142 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011130:	4b06      	ldr	r3, [pc, #24]	; (801114c <xTimerGenericCommand+0x94>)
 8011132:	6818      	ldr	r0, [r3, #0]
 8011134:	f107 0110 	add.w	r1, r7, #16
 8011138:	2300      	movs	r3, #0
 801113a:	683a      	ldr	r2, [r7, #0]
 801113c:	f7fd ffea 	bl	800f114 <xQueueGenericSendFromISR>
 8011140:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011144:	4618      	mov	r0, r3
 8011146:	3728      	adds	r7, #40	; 0x28
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}
 801114c:	20002190 	.word	0x20002190

08011150 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b088      	sub	sp, #32
 8011154:	af02      	add	r7, sp, #8
 8011156:	6078      	str	r0, [r7, #4]
 8011158:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801115a:	4b22      	ldr	r3, [pc, #136]	; (80111e4 <prvProcessExpiredTimer+0x94>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	68db      	ldr	r3, [r3, #12]
 8011162:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	3304      	adds	r3, #4
 8011168:	4618      	mov	r0, r3
 801116a:	f7fd fc57 	bl	800ea1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011174:	f003 0304 	and.w	r3, r3, #4
 8011178:	2b00      	cmp	r3, #0
 801117a:	d021      	beq.n	80111c0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	699a      	ldr	r2, [r3, #24]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	18d1      	adds	r1, r2, r3
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	683a      	ldr	r2, [r7, #0]
 8011188:	6978      	ldr	r0, [r7, #20]
 801118a:	f000 f8d1 	bl	8011330 <prvInsertTimerInActiveList>
 801118e:	4603      	mov	r3, r0
 8011190:	2b00      	cmp	r3, #0
 8011192:	d01e      	beq.n	80111d2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011194:	2300      	movs	r3, #0
 8011196:	9300      	str	r3, [sp, #0]
 8011198:	2300      	movs	r3, #0
 801119a:	687a      	ldr	r2, [r7, #4]
 801119c:	2100      	movs	r1, #0
 801119e:	6978      	ldr	r0, [r7, #20]
 80111a0:	f7ff ff8a 	bl	80110b8 <xTimerGenericCommand>
 80111a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d112      	bne.n	80111d2 <prvProcessExpiredTimer+0x82>
 80111ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b0:	f383 8811 	msr	BASEPRI, r3
 80111b4:	f3bf 8f6f 	isb	sy
 80111b8:	f3bf 8f4f 	dsb	sy
 80111bc:	60fb      	str	r3, [r7, #12]
 80111be:	e7fe      	b.n	80111be <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80111c0:	697b      	ldr	r3, [r7, #20]
 80111c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80111c6:	f023 0301 	bic.w	r3, r3, #1
 80111ca:	b2da      	uxtb	r2, r3
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	6a1b      	ldr	r3, [r3, #32]
 80111d6:	6978      	ldr	r0, [r7, #20]
 80111d8:	4798      	blx	r3
}
 80111da:	bf00      	nop
 80111dc:	3718      	adds	r7, #24
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	20002188 	.word	0x20002188

080111e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b084      	sub	sp, #16
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80111f0:	f107 0308 	add.w	r3, r7, #8
 80111f4:	4618      	mov	r0, r3
 80111f6:	f000 f857 	bl	80112a8 <prvGetNextExpireTime>
 80111fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	4619      	mov	r1, r3
 8011200:	68f8      	ldr	r0, [r7, #12]
 8011202:	f000 f803 	bl	801120c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011206:	f000 f8d5 	bl	80113b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801120a:	e7f1      	b.n	80111f0 <prvTimerTask+0x8>

0801120c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b084      	sub	sp, #16
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011216:	f7fe ff03 	bl	8010020 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801121a:	f107 0308 	add.w	r3, r7, #8
 801121e:	4618      	mov	r0, r3
 8011220:	f000 f866 	bl	80112f0 <prvSampleTimeNow>
 8011224:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d130      	bne.n	801128e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d10a      	bne.n	8011248 <prvProcessTimerOrBlockTask+0x3c>
 8011232:	687a      	ldr	r2, [r7, #4]
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	429a      	cmp	r2, r3
 8011238:	d806      	bhi.n	8011248 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801123a:	f7fe ff37 	bl	80100ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801123e:	68f9      	ldr	r1, [r7, #12]
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f7ff ff85 	bl	8011150 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011246:	e024      	b.n	8011292 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d008      	beq.n	8011260 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801124e:	4b13      	ldr	r3, [pc, #76]	; (801129c <prvProcessTimerOrBlockTask+0x90>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d101      	bne.n	801125c <prvProcessTimerOrBlockTask+0x50>
 8011258:	2301      	movs	r3, #1
 801125a:	e000      	b.n	801125e <prvProcessTimerOrBlockTask+0x52>
 801125c:	2300      	movs	r3, #0
 801125e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011260:	4b0f      	ldr	r3, [pc, #60]	; (80112a0 <prvProcessTimerOrBlockTask+0x94>)
 8011262:	6818      	ldr	r0, [r3, #0]
 8011264:	687a      	ldr	r2, [r7, #4]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	1ad3      	subs	r3, r2, r3
 801126a:	683a      	ldr	r2, [r7, #0]
 801126c:	4619      	mov	r1, r3
 801126e:	f7fe fc6d 	bl	800fb4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011272:	f7fe ff1b 	bl	80100ac <xTaskResumeAll>
 8011276:	4603      	mov	r3, r0
 8011278:	2b00      	cmp	r3, #0
 801127a:	d10a      	bne.n	8011292 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801127c:	4b09      	ldr	r3, [pc, #36]	; (80112a4 <prvProcessTimerOrBlockTask+0x98>)
 801127e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011282:	601a      	str	r2, [r3, #0]
 8011284:	f3bf 8f4f 	dsb	sy
 8011288:	f3bf 8f6f 	isb	sy
}
 801128c:	e001      	b.n	8011292 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801128e:	f7fe ff0d 	bl	80100ac <xTaskResumeAll>
}
 8011292:	bf00      	nop
 8011294:	3710      	adds	r7, #16
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	2000218c 	.word	0x2000218c
 80112a0:	20002190 	.word	0x20002190
 80112a4:	e000ed04 	.word	0xe000ed04

080112a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80112a8:	b480      	push	{r7}
 80112aa:	b085      	sub	sp, #20
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80112b0:	4b0e      	ldr	r3, [pc, #56]	; (80112ec <prvGetNextExpireTime+0x44>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d101      	bne.n	80112be <prvGetNextExpireTime+0x16>
 80112ba:	2201      	movs	r2, #1
 80112bc:	e000      	b.n	80112c0 <prvGetNextExpireTime+0x18>
 80112be:	2200      	movs	r2, #0
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d105      	bne.n	80112d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80112cc:	4b07      	ldr	r3, [pc, #28]	; (80112ec <prvGetNextExpireTime+0x44>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	68db      	ldr	r3, [r3, #12]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	60fb      	str	r3, [r7, #12]
 80112d6:	e001      	b.n	80112dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80112d8:	2300      	movs	r3, #0
 80112da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80112dc:	68fb      	ldr	r3, [r7, #12]
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3714      	adds	r7, #20
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr
 80112ea:	bf00      	nop
 80112ec:	20002188 	.word	0x20002188

080112f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b084      	sub	sp, #16
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80112f8:	f7fe ff74 	bl	80101e4 <xTaskGetTickCount>
 80112fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80112fe:	4b0b      	ldr	r3, [pc, #44]	; (801132c <prvSampleTimeNow+0x3c>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	68fa      	ldr	r2, [r7, #12]
 8011304:	429a      	cmp	r2, r3
 8011306:	d205      	bcs.n	8011314 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011308:	f000 f930 	bl	801156c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2201      	movs	r2, #1
 8011310:	601a      	str	r2, [r3, #0]
 8011312:	e002      	b.n	801131a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2200      	movs	r2, #0
 8011318:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801131a:	4a04      	ldr	r2, [pc, #16]	; (801132c <prvSampleTimeNow+0x3c>)
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011320:	68fb      	ldr	r3, [r7, #12]
}
 8011322:	4618      	mov	r0, r3
 8011324:	3710      	adds	r7, #16
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}
 801132a:	bf00      	nop
 801132c:	20002198 	.word	0x20002198

08011330 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b086      	sub	sp, #24
 8011334:	af00      	add	r7, sp, #0
 8011336:	60f8      	str	r0, [r7, #12]
 8011338:	60b9      	str	r1, [r7, #8]
 801133a:	607a      	str	r2, [r7, #4]
 801133c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801133e:	2300      	movs	r3, #0
 8011340:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	68ba      	ldr	r2, [r7, #8]
 8011346:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	68fa      	ldr	r2, [r7, #12]
 801134c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801134e:	68ba      	ldr	r2, [r7, #8]
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	429a      	cmp	r2, r3
 8011354:	d812      	bhi.n	801137c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011356:	687a      	ldr	r2, [r7, #4]
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	1ad2      	subs	r2, r2, r3
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	699b      	ldr	r3, [r3, #24]
 8011360:	429a      	cmp	r2, r3
 8011362:	d302      	bcc.n	801136a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011364:	2301      	movs	r3, #1
 8011366:	617b      	str	r3, [r7, #20]
 8011368:	e01b      	b.n	80113a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801136a:	4b10      	ldr	r3, [pc, #64]	; (80113ac <prvInsertTimerInActiveList+0x7c>)
 801136c:	681a      	ldr	r2, [r3, #0]
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	3304      	adds	r3, #4
 8011372:	4619      	mov	r1, r3
 8011374:	4610      	mov	r0, r2
 8011376:	f7fd fb18 	bl	800e9aa <vListInsert>
 801137a:	e012      	b.n	80113a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801137c:	687a      	ldr	r2, [r7, #4]
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	429a      	cmp	r2, r3
 8011382:	d206      	bcs.n	8011392 <prvInsertTimerInActiveList+0x62>
 8011384:	68ba      	ldr	r2, [r7, #8]
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	429a      	cmp	r2, r3
 801138a:	d302      	bcc.n	8011392 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801138c:	2301      	movs	r3, #1
 801138e:	617b      	str	r3, [r7, #20]
 8011390:	e007      	b.n	80113a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011392:	4b07      	ldr	r3, [pc, #28]	; (80113b0 <prvInsertTimerInActiveList+0x80>)
 8011394:	681a      	ldr	r2, [r3, #0]
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	3304      	adds	r3, #4
 801139a:	4619      	mov	r1, r3
 801139c:	4610      	mov	r0, r2
 801139e:	f7fd fb04 	bl	800e9aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80113a2:	697b      	ldr	r3, [r7, #20]
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3718      	adds	r7, #24
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}
 80113ac:	2000218c 	.word	0x2000218c
 80113b0:	20002188 	.word	0x20002188

080113b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b08e      	sub	sp, #56	; 0x38
 80113b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80113ba:	e0c6      	b.n	801154a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	da17      	bge.n	80113f2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80113c2:	1d3b      	adds	r3, r7, #4
 80113c4:	3304      	adds	r3, #4
 80113c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80113c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d109      	bne.n	80113e2 <prvProcessReceivedCommands+0x2e>
 80113ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d2:	f383 8811 	msr	BASEPRI, r3
 80113d6:	f3bf 8f6f 	isb	sy
 80113da:	f3bf 8f4f 	dsb	sy
 80113de:	61fb      	str	r3, [r7, #28]
 80113e0:	e7fe      	b.n	80113e0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80113e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113e8:	6850      	ldr	r0, [r2, #4]
 80113ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113ec:	6892      	ldr	r2, [r2, #8]
 80113ee:	4611      	mov	r1, r2
 80113f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	f2c0 80a7 	blt.w	8011548 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80113fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011400:	695b      	ldr	r3, [r3, #20]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d004      	beq.n	8011410 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011408:	3304      	adds	r3, #4
 801140a:	4618      	mov	r0, r3
 801140c:	f7fd fb06 	bl	800ea1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011410:	463b      	mov	r3, r7
 8011412:	4618      	mov	r0, r3
 8011414:	f7ff ff6c 	bl	80112f0 <prvSampleTimeNow>
 8011418:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2b09      	cmp	r3, #9
 801141e:	f200 8094 	bhi.w	801154a <prvProcessReceivedCommands+0x196>
 8011422:	a201      	add	r2, pc, #4	; (adr r2, 8011428 <prvProcessReceivedCommands+0x74>)
 8011424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011428:	08011451 	.word	0x08011451
 801142c:	08011451 	.word	0x08011451
 8011430:	08011451 	.word	0x08011451
 8011434:	080114c3 	.word	0x080114c3
 8011438:	080114d7 	.word	0x080114d7
 801143c:	0801151f 	.word	0x0801151f
 8011440:	08011451 	.word	0x08011451
 8011444:	08011451 	.word	0x08011451
 8011448:	080114c3 	.word	0x080114c3
 801144c:	080114d7 	.word	0x080114d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011452:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011456:	f043 0301 	orr.w	r3, r3, #1
 801145a:	b2da      	uxtb	r2, r3
 801145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011462:	68ba      	ldr	r2, [r7, #8]
 8011464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011466:	699b      	ldr	r3, [r3, #24]
 8011468:	18d1      	adds	r1, r2, r3
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801146e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011470:	f7ff ff5e 	bl	8011330 <prvInsertTimerInActiveList>
 8011474:	4603      	mov	r3, r0
 8011476:	2b00      	cmp	r3, #0
 8011478:	d067      	beq.n	801154a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801147a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801147c:	6a1b      	ldr	r3, [r3, #32]
 801147e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011480:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011488:	f003 0304 	and.w	r3, r3, #4
 801148c:	2b00      	cmp	r3, #0
 801148e:	d05c      	beq.n	801154a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011490:	68ba      	ldr	r2, [r7, #8]
 8011492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011494:	699b      	ldr	r3, [r3, #24]
 8011496:	441a      	add	r2, r3
 8011498:	2300      	movs	r3, #0
 801149a:	9300      	str	r3, [sp, #0]
 801149c:	2300      	movs	r3, #0
 801149e:	2100      	movs	r1, #0
 80114a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114a2:	f7ff fe09 	bl	80110b8 <xTimerGenericCommand>
 80114a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80114a8:	6a3b      	ldr	r3, [r7, #32]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d14d      	bne.n	801154a <prvProcessReceivedCommands+0x196>
 80114ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b2:	f383 8811 	msr	BASEPRI, r3
 80114b6:	f3bf 8f6f 	isb	sy
 80114ba:	f3bf 8f4f 	dsb	sy
 80114be:	61bb      	str	r3, [r7, #24]
 80114c0:	e7fe      	b.n	80114c0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80114c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80114c8:	f023 0301 	bic.w	r3, r3, #1
 80114cc:	b2da      	uxtb	r2, r3
 80114ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80114d4:	e039      	b.n	801154a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80114d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80114dc:	f043 0301 	orr.w	r3, r3, #1
 80114e0:	b2da      	uxtb	r2, r3
 80114e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80114e8:	68ba      	ldr	r2, [r7, #8]
 80114ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80114ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f0:	699b      	ldr	r3, [r3, #24]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d109      	bne.n	801150a <prvProcessReceivedCommands+0x156>
 80114f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114fa:	f383 8811 	msr	BASEPRI, r3
 80114fe:	f3bf 8f6f 	isb	sy
 8011502:	f3bf 8f4f 	dsb	sy
 8011506:	617b      	str	r3, [r7, #20]
 8011508:	e7fe      	b.n	8011508 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801150a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801150c:	699a      	ldr	r2, [r3, #24]
 801150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011510:	18d1      	adds	r1, r2, r3
 8011512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011518:	f7ff ff0a 	bl	8011330 <prvInsertTimerInActiveList>
					break;
 801151c:	e015      	b.n	801154a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011524:	f003 0302 	and.w	r3, r3, #2
 8011528:	2b00      	cmp	r3, #0
 801152a:	d103      	bne.n	8011534 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 801152c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801152e:	f000 fbc1 	bl	8011cb4 <vPortFree>
 8011532:	e00a      	b.n	801154a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801153a:	f023 0301 	bic.w	r3, r3, #1
 801153e:	b2da      	uxtb	r2, r3
 8011540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011546:	e000      	b.n	801154a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011548:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801154a:	4b07      	ldr	r3, [pc, #28]	; (8011568 <prvProcessReceivedCommands+0x1b4>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	1d39      	adds	r1, r7, #4
 8011550:	2200      	movs	r2, #0
 8011552:	4618      	mov	r0, r3
 8011554:	f7fd fefc 	bl	800f350 <xQueueReceive>
 8011558:	4603      	mov	r3, r0
 801155a:	2b00      	cmp	r3, #0
 801155c:	f47f af2e 	bne.w	80113bc <prvProcessReceivedCommands+0x8>
	}
}
 8011560:	bf00      	nop
 8011562:	3730      	adds	r7, #48	; 0x30
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}
 8011568:	20002190 	.word	0x20002190

0801156c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b088      	sub	sp, #32
 8011570:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011572:	e047      	b.n	8011604 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011574:	4b2d      	ldr	r3, [pc, #180]	; (801162c <prvSwitchTimerLists+0xc0>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	68db      	ldr	r3, [r3, #12]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801157e:	4b2b      	ldr	r3, [pc, #172]	; (801162c <prvSwitchTimerLists+0xc0>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	68db      	ldr	r3, [r3, #12]
 8011584:	68db      	ldr	r3, [r3, #12]
 8011586:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	3304      	adds	r3, #4
 801158c:	4618      	mov	r0, r3
 801158e:	f7fd fa45 	bl	800ea1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	6a1b      	ldr	r3, [r3, #32]
 8011596:	68f8      	ldr	r0, [r7, #12]
 8011598:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115a0:	f003 0304 	and.w	r3, r3, #4
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d02d      	beq.n	8011604 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	699b      	ldr	r3, [r3, #24]
 80115ac:	693a      	ldr	r2, [r7, #16]
 80115ae:	4413      	add	r3, r2
 80115b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80115b2:	68ba      	ldr	r2, [r7, #8]
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d90e      	bls.n	80115d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	68ba      	ldr	r2, [r7, #8]
 80115be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	68fa      	ldr	r2, [r7, #12]
 80115c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80115c6:	4b19      	ldr	r3, [pc, #100]	; (801162c <prvSwitchTimerLists+0xc0>)
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	3304      	adds	r3, #4
 80115ce:	4619      	mov	r1, r3
 80115d0:	4610      	mov	r0, r2
 80115d2:	f7fd f9ea 	bl	800e9aa <vListInsert>
 80115d6:	e015      	b.n	8011604 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80115d8:	2300      	movs	r3, #0
 80115da:	9300      	str	r3, [sp, #0]
 80115dc:	2300      	movs	r3, #0
 80115de:	693a      	ldr	r2, [r7, #16]
 80115e0:	2100      	movs	r1, #0
 80115e2:	68f8      	ldr	r0, [r7, #12]
 80115e4:	f7ff fd68 	bl	80110b8 <xTimerGenericCommand>
 80115e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d109      	bne.n	8011604 <prvSwitchTimerLists+0x98>
 80115f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f4:	f383 8811 	msr	BASEPRI, r3
 80115f8:	f3bf 8f6f 	isb	sy
 80115fc:	f3bf 8f4f 	dsb	sy
 8011600:	603b      	str	r3, [r7, #0]
 8011602:	e7fe      	b.n	8011602 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011604:	4b09      	ldr	r3, [pc, #36]	; (801162c <prvSwitchTimerLists+0xc0>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d1b2      	bne.n	8011574 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801160e:	4b07      	ldr	r3, [pc, #28]	; (801162c <prvSwitchTimerLists+0xc0>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011614:	4b06      	ldr	r3, [pc, #24]	; (8011630 <prvSwitchTimerLists+0xc4>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	4a04      	ldr	r2, [pc, #16]	; (801162c <prvSwitchTimerLists+0xc0>)
 801161a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801161c:	4a04      	ldr	r2, [pc, #16]	; (8011630 <prvSwitchTimerLists+0xc4>)
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	6013      	str	r3, [r2, #0]
}
 8011622:	bf00      	nop
 8011624:	3718      	adds	r7, #24
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	20002188 	.word	0x20002188
 8011630:	2000218c 	.word	0x2000218c

08011634 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801163a:	f000 f95f 	bl	80118fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801163e:	4b15      	ldr	r3, [pc, #84]	; (8011694 <prvCheckForValidListAndQueue+0x60>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d120      	bne.n	8011688 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011646:	4814      	ldr	r0, [pc, #80]	; (8011698 <prvCheckForValidListAndQueue+0x64>)
 8011648:	f7fd f95e 	bl	800e908 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801164c:	4813      	ldr	r0, [pc, #76]	; (801169c <prvCheckForValidListAndQueue+0x68>)
 801164e:	f7fd f95b 	bl	800e908 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011652:	4b13      	ldr	r3, [pc, #76]	; (80116a0 <prvCheckForValidListAndQueue+0x6c>)
 8011654:	4a10      	ldr	r2, [pc, #64]	; (8011698 <prvCheckForValidListAndQueue+0x64>)
 8011656:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011658:	4b12      	ldr	r3, [pc, #72]	; (80116a4 <prvCheckForValidListAndQueue+0x70>)
 801165a:	4a10      	ldr	r2, [pc, #64]	; (801169c <prvCheckForValidListAndQueue+0x68>)
 801165c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801165e:	2300      	movs	r3, #0
 8011660:	9300      	str	r3, [sp, #0]
 8011662:	4b11      	ldr	r3, [pc, #68]	; (80116a8 <prvCheckForValidListAndQueue+0x74>)
 8011664:	4a11      	ldr	r2, [pc, #68]	; (80116ac <prvCheckForValidListAndQueue+0x78>)
 8011666:	2110      	movs	r1, #16
 8011668:	200a      	movs	r0, #10
 801166a:	f7fd fa69 	bl	800eb40 <xQueueGenericCreateStatic>
 801166e:	4602      	mov	r2, r0
 8011670:	4b08      	ldr	r3, [pc, #32]	; (8011694 <prvCheckForValidListAndQueue+0x60>)
 8011672:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011674:	4b07      	ldr	r3, [pc, #28]	; (8011694 <prvCheckForValidListAndQueue+0x60>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d005      	beq.n	8011688 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801167c:	4b05      	ldr	r3, [pc, #20]	; (8011694 <prvCheckForValidListAndQueue+0x60>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	490b      	ldr	r1, [pc, #44]	; (80116b0 <prvCheckForValidListAndQueue+0x7c>)
 8011682:	4618      	mov	r0, r3
 8011684:	f7fe fa10 	bl	800faa8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011688:	f000 f966 	bl	8011958 <vPortExitCritical>
}
 801168c:	bf00      	nop
 801168e:	46bd      	mov	sp, r7
 8011690:	bd80      	pop	{r7, pc}
 8011692:	bf00      	nop
 8011694:	20002190 	.word	0x20002190
 8011698:	20002160 	.word	0x20002160
 801169c:	20002174 	.word	0x20002174
 80116a0:	20002188 	.word	0x20002188
 80116a4:	2000218c 	.word	0x2000218c
 80116a8:	2000223c 	.word	0x2000223c
 80116ac:	2000219c 	.word	0x2000219c
 80116b0:	08013b0c 	.word	0x08013b0c

080116b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80116b4:	b480      	push	{r7}
 80116b6:	b085      	sub	sp, #20
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	60b9      	str	r1, [r7, #8]
 80116be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	3b04      	subs	r3, #4
 80116c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80116cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	3b04      	subs	r3, #4
 80116d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80116d4:	68bb      	ldr	r3, [r7, #8]
 80116d6:	f023 0201 	bic.w	r2, r3, #1
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	3b04      	subs	r3, #4
 80116e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80116e4:	4a0c      	ldr	r2, [pc, #48]	; (8011718 <pxPortInitialiseStack+0x64>)
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	3b14      	subs	r3, #20
 80116ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80116f0:	687a      	ldr	r2, [r7, #4]
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	3b04      	subs	r3, #4
 80116fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	f06f 0202 	mvn.w	r2, #2
 8011702:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	3b20      	subs	r3, #32
 8011708:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801170a:	68fb      	ldr	r3, [r7, #12]
}
 801170c:	4618      	mov	r0, r3
 801170e:	3714      	adds	r7, #20
 8011710:	46bd      	mov	sp, r7
 8011712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011716:	4770      	bx	lr
 8011718:	0801171d 	.word	0x0801171d

0801171c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801171c:	b480      	push	{r7}
 801171e:	b085      	sub	sp, #20
 8011720:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011722:	2300      	movs	r3, #0
 8011724:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011726:	4b11      	ldr	r3, [pc, #68]	; (801176c <prvTaskExitError+0x50>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801172e:	d009      	beq.n	8011744 <prvTaskExitError+0x28>
 8011730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011734:	f383 8811 	msr	BASEPRI, r3
 8011738:	f3bf 8f6f 	isb	sy
 801173c:	f3bf 8f4f 	dsb	sy
 8011740:	60fb      	str	r3, [r7, #12]
 8011742:	e7fe      	b.n	8011742 <prvTaskExitError+0x26>
 8011744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011748:	f383 8811 	msr	BASEPRI, r3
 801174c:	f3bf 8f6f 	isb	sy
 8011750:	f3bf 8f4f 	dsb	sy
 8011754:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011756:	bf00      	nop
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d0fc      	beq.n	8011758 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801175e:	bf00      	nop
 8011760:	3714      	adds	r7, #20
 8011762:	46bd      	mov	sp, r7
 8011764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011768:	4770      	bx	lr
 801176a:	bf00      	nop
 801176c:	20000138 	.word	0x20000138

08011770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011770:	4b07      	ldr	r3, [pc, #28]	; (8011790 <pxCurrentTCBConst2>)
 8011772:	6819      	ldr	r1, [r3, #0]
 8011774:	6808      	ldr	r0, [r1, #0]
 8011776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801177a:	f380 8809 	msr	PSP, r0
 801177e:	f3bf 8f6f 	isb	sy
 8011782:	f04f 0000 	mov.w	r0, #0
 8011786:	f380 8811 	msr	BASEPRI, r0
 801178a:	4770      	bx	lr
 801178c:	f3af 8000 	nop.w

08011790 <pxCurrentTCBConst2>:
 8011790:	20001c60 	.word	0x20001c60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011794:	bf00      	nop
 8011796:	bf00      	nop

08011798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011798:	4808      	ldr	r0, [pc, #32]	; (80117bc <prvPortStartFirstTask+0x24>)
 801179a:	6800      	ldr	r0, [r0, #0]
 801179c:	6800      	ldr	r0, [r0, #0]
 801179e:	f380 8808 	msr	MSP, r0
 80117a2:	f04f 0000 	mov.w	r0, #0
 80117a6:	f380 8814 	msr	CONTROL, r0
 80117aa:	b662      	cpsie	i
 80117ac:	b661      	cpsie	f
 80117ae:	f3bf 8f4f 	dsb	sy
 80117b2:	f3bf 8f6f 	isb	sy
 80117b6:	df00      	svc	0
 80117b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80117ba:	bf00      	nop
 80117bc:	e000ed08 	.word	0xe000ed08

080117c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b086      	sub	sp, #24
 80117c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80117c6:	4b44      	ldr	r3, [pc, #272]	; (80118d8 <xPortStartScheduler+0x118>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	4a44      	ldr	r2, [pc, #272]	; (80118dc <xPortStartScheduler+0x11c>)
 80117cc:	4293      	cmp	r3, r2
 80117ce:	d109      	bne.n	80117e4 <xPortStartScheduler+0x24>
 80117d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d4:	f383 8811 	msr	BASEPRI, r3
 80117d8:	f3bf 8f6f 	isb	sy
 80117dc:	f3bf 8f4f 	dsb	sy
 80117e0:	613b      	str	r3, [r7, #16]
 80117e2:	e7fe      	b.n	80117e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80117e4:	4b3c      	ldr	r3, [pc, #240]	; (80118d8 <xPortStartScheduler+0x118>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	4a3d      	ldr	r2, [pc, #244]	; (80118e0 <xPortStartScheduler+0x120>)
 80117ea:	4293      	cmp	r3, r2
 80117ec:	d109      	bne.n	8011802 <xPortStartScheduler+0x42>
 80117ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117f2:	f383 8811 	msr	BASEPRI, r3
 80117f6:	f3bf 8f6f 	isb	sy
 80117fa:	f3bf 8f4f 	dsb	sy
 80117fe:	60fb      	str	r3, [r7, #12]
 8011800:	e7fe      	b.n	8011800 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011802:	4b38      	ldr	r3, [pc, #224]	; (80118e4 <xPortStartScheduler+0x124>)
 8011804:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	781b      	ldrb	r3, [r3, #0]
 801180a:	b2db      	uxtb	r3, r3
 801180c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	22ff      	movs	r2, #255	; 0xff
 8011812:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	b2db      	uxtb	r3, r3
 801181a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801181c:	78fb      	ldrb	r3, [r7, #3]
 801181e:	b2db      	uxtb	r3, r3
 8011820:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011824:	b2da      	uxtb	r2, r3
 8011826:	4b30      	ldr	r3, [pc, #192]	; (80118e8 <xPortStartScheduler+0x128>)
 8011828:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801182a:	4b30      	ldr	r3, [pc, #192]	; (80118ec <xPortStartScheduler+0x12c>)
 801182c:	2207      	movs	r2, #7
 801182e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011830:	e009      	b.n	8011846 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011832:	4b2e      	ldr	r3, [pc, #184]	; (80118ec <xPortStartScheduler+0x12c>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	3b01      	subs	r3, #1
 8011838:	4a2c      	ldr	r2, [pc, #176]	; (80118ec <xPortStartScheduler+0x12c>)
 801183a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801183c:	78fb      	ldrb	r3, [r7, #3]
 801183e:	b2db      	uxtb	r3, r3
 8011840:	005b      	lsls	r3, r3, #1
 8011842:	b2db      	uxtb	r3, r3
 8011844:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011846:	78fb      	ldrb	r3, [r7, #3]
 8011848:	b2db      	uxtb	r3, r3
 801184a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801184e:	2b80      	cmp	r3, #128	; 0x80
 8011850:	d0ef      	beq.n	8011832 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011852:	4b26      	ldr	r3, [pc, #152]	; (80118ec <xPortStartScheduler+0x12c>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	f1c3 0307 	rsb	r3, r3, #7
 801185a:	2b04      	cmp	r3, #4
 801185c:	d009      	beq.n	8011872 <xPortStartScheduler+0xb2>
 801185e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011862:	f383 8811 	msr	BASEPRI, r3
 8011866:	f3bf 8f6f 	isb	sy
 801186a:	f3bf 8f4f 	dsb	sy
 801186e:	60bb      	str	r3, [r7, #8]
 8011870:	e7fe      	b.n	8011870 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011872:	4b1e      	ldr	r3, [pc, #120]	; (80118ec <xPortStartScheduler+0x12c>)
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	021b      	lsls	r3, r3, #8
 8011878:	4a1c      	ldr	r2, [pc, #112]	; (80118ec <xPortStartScheduler+0x12c>)
 801187a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801187c:	4b1b      	ldr	r3, [pc, #108]	; (80118ec <xPortStartScheduler+0x12c>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011884:	4a19      	ldr	r2, [pc, #100]	; (80118ec <xPortStartScheduler+0x12c>)
 8011886:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	b2da      	uxtb	r2, r3
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011890:	4b17      	ldr	r3, [pc, #92]	; (80118f0 <xPortStartScheduler+0x130>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	4a16      	ldr	r2, [pc, #88]	; (80118f0 <xPortStartScheduler+0x130>)
 8011896:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801189a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801189c:	4b14      	ldr	r3, [pc, #80]	; (80118f0 <xPortStartScheduler+0x130>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	4a13      	ldr	r2, [pc, #76]	; (80118f0 <xPortStartScheduler+0x130>)
 80118a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80118a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80118a8:	f000 f8d6 	bl	8011a58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80118ac:	4b11      	ldr	r3, [pc, #68]	; (80118f4 <xPortStartScheduler+0x134>)
 80118ae:	2200      	movs	r2, #0
 80118b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80118b2:	f000 f8f5 	bl	8011aa0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80118b6:	4b10      	ldr	r3, [pc, #64]	; (80118f8 <xPortStartScheduler+0x138>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	4a0f      	ldr	r2, [pc, #60]	; (80118f8 <xPortStartScheduler+0x138>)
 80118bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80118c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80118c2:	f7ff ff69 	bl	8011798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80118c6:	f7fe fd55 	bl	8010374 <vTaskSwitchContext>
	prvTaskExitError();
 80118ca:	f7ff ff27 	bl	801171c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80118ce:	2300      	movs	r3, #0
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	3718      	adds	r7, #24
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}
 80118d8:	e000ed00 	.word	0xe000ed00
 80118dc:	410fc271 	.word	0x410fc271
 80118e0:	410fc270 	.word	0x410fc270
 80118e4:	e000e400 	.word	0xe000e400
 80118e8:	2000228c 	.word	0x2000228c
 80118ec:	20002290 	.word	0x20002290
 80118f0:	e000ed20 	.word	0xe000ed20
 80118f4:	20000138 	.word	0x20000138
 80118f8:	e000ef34 	.word	0xe000ef34

080118fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80118fc:	b480      	push	{r7}
 80118fe:	b083      	sub	sp, #12
 8011900:	af00      	add	r7, sp, #0
 8011902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011906:	f383 8811 	msr	BASEPRI, r3
 801190a:	f3bf 8f6f 	isb	sy
 801190e:	f3bf 8f4f 	dsb	sy
 8011912:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011914:	4b0e      	ldr	r3, [pc, #56]	; (8011950 <vPortEnterCritical+0x54>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	3301      	adds	r3, #1
 801191a:	4a0d      	ldr	r2, [pc, #52]	; (8011950 <vPortEnterCritical+0x54>)
 801191c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801191e:	4b0c      	ldr	r3, [pc, #48]	; (8011950 <vPortEnterCritical+0x54>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	2b01      	cmp	r3, #1
 8011924:	d10e      	bne.n	8011944 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011926:	4b0b      	ldr	r3, [pc, #44]	; (8011954 <vPortEnterCritical+0x58>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	b2db      	uxtb	r3, r3
 801192c:	2b00      	cmp	r3, #0
 801192e:	d009      	beq.n	8011944 <vPortEnterCritical+0x48>
 8011930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011934:	f383 8811 	msr	BASEPRI, r3
 8011938:	f3bf 8f6f 	isb	sy
 801193c:	f3bf 8f4f 	dsb	sy
 8011940:	603b      	str	r3, [r7, #0]
 8011942:	e7fe      	b.n	8011942 <vPortEnterCritical+0x46>
	}
}
 8011944:	bf00      	nop
 8011946:	370c      	adds	r7, #12
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr
 8011950:	20000138 	.word	0x20000138
 8011954:	e000ed04 	.word	0xe000ed04

08011958 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011958:	b480      	push	{r7}
 801195a:	b083      	sub	sp, #12
 801195c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801195e:	4b11      	ldr	r3, [pc, #68]	; (80119a4 <vPortExitCritical+0x4c>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d109      	bne.n	801197a <vPortExitCritical+0x22>
 8011966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801196a:	f383 8811 	msr	BASEPRI, r3
 801196e:	f3bf 8f6f 	isb	sy
 8011972:	f3bf 8f4f 	dsb	sy
 8011976:	607b      	str	r3, [r7, #4]
 8011978:	e7fe      	b.n	8011978 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801197a:	4b0a      	ldr	r3, [pc, #40]	; (80119a4 <vPortExitCritical+0x4c>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	3b01      	subs	r3, #1
 8011980:	4a08      	ldr	r2, [pc, #32]	; (80119a4 <vPortExitCritical+0x4c>)
 8011982:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011984:	4b07      	ldr	r3, [pc, #28]	; (80119a4 <vPortExitCritical+0x4c>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d104      	bne.n	8011996 <vPortExitCritical+0x3e>
 801198c:	2300      	movs	r3, #0
 801198e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011996:	bf00      	nop
 8011998:	370c      	adds	r7, #12
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr
 80119a2:	bf00      	nop
 80119a4:	20000138 	.word	0x20000138
	...

080119b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80119b0:	f3ef 8009 	mrs	r0, PSP
 80119b4:	f3bf 8f6f 	isb	sy
 80119b8:	4b15      	ldr	r3, [pc, #84]	; (8011a10 <pxCurrentTCBConst>)
 80119ba:	681a      	ldr	r2, [r3, #0]
 80119bc:	f01e 0f10 	tst.w	lr, #16
 80119c0:	bf08      	it	eq
 80119c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80119c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ca:	6010      	str	r0, [r2, #0]
 80119cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80119d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80119d4:	f380 8811 	msr	BASEPRI, r0
 80119d8:	f3bf 8f4f 	dsb	sy
 80119dc:	f3bf 8f6f 	isb	sy
 80119e0:	f7fe fcc8 	bl	8010374 <vTaskSwitchContext>
 80119e4:	f04f 0000 	mov.w	r0, #0
 80119e8:	f380 8811 	msr	BASEPRI, r0
 80119ec:	bc09      	pop	{r0, r3}
 80119ee:	6819      	ldr	r1, [r3, #0]
 80119f0:	6808      	ldr	r0, [r1, #0]
 80119f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f6:	f01e 0f10 	tst.w	lr, #16
 80119fa:	bf08      	it	eq
 80119fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011a00:	f380 8809 	msr	PSP, r0
 8011a04:	f3bf 8f6f 	isb	sy
 8011a08:	4770      	bx	lr
 8011a0a:	bf00      	nop
 8011a0c:	f3af 8000 	nop.w

08011a10 <pxCurrentTCBConst>:
 8011a10:	20001c60 	.word	0x20001c60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011a14:	bf00      	nop
 8011a16:	bf00      	nop

08011a18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8011a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a22:	f383 8811 	msr	BASEPRI, r3
 8011a26:	f3bf 8f6f 	isb	sy
 8011a2a:	f3bf 8f4f 	dsb	sy
 8011a2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011a30:	f7fe fbe8 	bl	8010204 <xTaskIncrementTick>
 8011a34:	4603      	mov	r3, r0
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d003      	beq.n	8011a42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011a3a:	4b06      	ldr	r3, [pc, #24]	; (8011a54 <SysTick_Handler+0x3c>)
 8011a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a40:	601a      	str	r2, [r3, #0]
 8011a42:	2300      	movs	r3, #0
 8011a44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8011a4c:	bf00      	nop
 8011a4e:	3708      	adds	r7, #8
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}
 8011a54:	e000ed04 	.word	0xe000ed04

08011a58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011a58:	b480      	push	{r7}
 8011a5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011a5c:	4b0b      	ldr	r3, [pc, #44]	; (8011a8c <vPortSetupTimerInterrupt+0x34>)
 8011a5e:	2200      	movs	r2, #0
 8011a60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011a62:	4b0b      	ldr	r3, [pc, #44]	; (8011a90 <vPortSetupTimerInterrupt+0x38>)
 8011a64:	2200      	movs	r2, #0
 8011a66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011a68:	4b0a      	ldr	r3, [pc, #40]	; (8011a94 <vPortSetupTimerInterrupt+0x3c>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	4a0a      	ldr	r2, [pc, #40]	; (8011a98 <vPortSetupTimerInterrupt+0x40>)
 8011a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8011a72:	099b      	lsrs	r3, r3, #6
 8011a74:	4a09      	ldr	r2, [pc, #36]	; (8011a9c <vPortSetupTimerInterrupt+0x44>)
 8011a76:	3b01      	subs	r3, #1
 8011a78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011a7a:	4b04      	ldr	r3, [pc, #16]	; (8011a8c <vPortSetupTimerInterrupt+0x34>)
 8011a7c:	2207      	movs	r2, #7
 8011a7e:	601a      	str	r2, [r3, #0]
}
 8011a80:	bf00      	nop
 8011a82:	46bd      	mov	sp, r7
 8011a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a88:	4770      	bx	lr
 8011a8a:	bf00      	nop
 8011a8c:	e000e010 	.word	0xe000e010
 8011a90:	e000e018 	.word	0xe000e018
 8011a94:	2000001c 	.word	0x2000001c
 8011a98:	10624dd3 	.word	0x10624dd3
 8011a9c:	e000e014 	.word	0xe000e014

08011aa0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011aa0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011ab0 <vPortEnableVFP+0x10>
 8011aa4:	6801      	ldr	r1, [r0, #0]
 8011aa6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011aaa:	6001      	str	r1, [r0, #0]
 8011aac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011aae:	bf00      	nop
 8011ab0:	e000ed88 	.word	0xe000ed88

08011ab4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b085      	sub	sp, #20
 8011ab8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011aba:	f3ef 8305 	mrs	r3, IPSR
 8011abe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	2b0f      	cmp	r3, #15
 8011ac4:	d913      	bls.n	8011aee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011ac6:	4a16      	ldr	r2, [pc, #88]	; (8011b20 <vPortValidateInterruptPriority+0x6c>)
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	4413      	add	r3, r2
 8011acc:	781b      	ldrb	r3, [r3, #0]
 8011ace:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011ad0:	4b14      	ldr	r3, [pc, #80]	; (8011b24 <vPortValidateInterruptPriority+0x70>)
 8011ad2:	781b      	ldrb	r3, [r3, #0]
 8011ad4:	7afa      	ldrb	r2, [r7, #11]
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d209      	bcs.n	8011aee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8011ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ade:	f383 8811 	msr	BASEPRI, r3
 8011ae2:	f3bf 8f6f 	isb	sy
 8011ae6:	f3bf 8f4f 	dsb	sy
 8011aea:	607b      	str	r3, [r7, #4]
 8011aec:	e7fe      	b.n	8011aec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011aee:	4b0e      	ldr	r3, [pc, #56]	; (8011b28 <vPortValidateInterruptPriority+0x74>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011af6:	4b0d      	ldr	r3, [pc, #52]	; (8011b2c <vPortValidateInterruptPriority+0x78>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d909      	bls.n	8011b12 <vPortValidateInterruptPriority+0x5e>
 8011afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b02:	f383 8811 	msr	BASEPRI, r3
 8011b06:	f3bf 8f6f 	isb	sy
 8011b0a:	f3bf 8f4f 	dsb	sy
 8011b0e:	603b      	str	r3, [r7, #0]
 8011b10:	e7fe      	b.n	8011b10 <vPortValidateInterruptPriority+0x5c>
	}
 8011b12:	bf00      	nop
 8011b14:	3714      	adds	r7, #20
 8011b16:	46bd      	mov	sp, r7
 8011b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1c:	4770      	bx	lr
 8011b1e:	bf00      	nop
 8011b20:	e000e3f0 	.word	0xe000e3f0
 8011b24:	2000228c 	.word	0x2000228c
 8011b28:	e000ed0c 	.word	0xe000ed0c
 8011b2c:	20002290 	.word	0x20002290

08011b30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b08a      	sub	sp, #40	; 0x28
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011b38:	2300      	movs	r3, #0
 8011b3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011b3c:	f7fe fa70 	bl	8010020 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011b40:	4b57      	ldr	r3, [pc, #348]	; (8011ca0 <pvPortMalloc+0x170>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d101      	bne.n	8011b4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011b48:	f000 f90c 	bl	8011d64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011b4c:	4b55      	ldr	r3, [pc, #340]	; (8011ca4 <pvPortMalloc+0x174>)
 8011b4e:	681a      	ldr	r2, [r3, #0]
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	4013      	ands	r3, r2
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	f040 808c 	bne.w	8011c72 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d01c      	beq.n	8011b9a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8011b60:	2208      	movs	r2, #8
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	4413      	add	r3, r2
 8011b66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f003 0307 	and.w	r3, r3, #7
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d013      	beq.n	8011b9a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	f023 0307 	bic.w	r3, r3, #7
 8011b78:	3308      	adds	r3, #8
 8011b7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f003 0307 	and.w	r3, r3, #7
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d009      	beq.n	8011b9a <pvPortMalloc+0x6a>
 8011b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b8a:	f383 8811 	msr	BASEPRI, r3
 8011b8e:	f3bf 8f6f 	isb	sy
 8011b92:	f3bf 8f4f 	dsb	sy
 8011b96:	617b      	str	r3, [r7, #20]
 8011b98:	e7fe      	b.n	8011b98 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d068      	beq.n	8011c72 <pvPortMalloc+0x142>
 8011ba0:	4b41      	ldr	r3, [pc, #260]	; (8011ca8 <pvPortMalloc+0x178>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	687a      	ldr	r2, [r7, #4]
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d863      	bhi.n	8011c72 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011baa:	4b40      	ldr	r3, [pc, #256]	; (8011cac <pvPortMalloc+0x17c>)
 8011bac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011bae:	4b3f      	ldr	r3, [pc, #252]	; (8011cac <pvPortMalloc+0x17c>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011bb4:	e004      	b.n	8011bc0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8011bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc2:	685b      	ldr	r3, [r3, #4]
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d903      	bls.n	8011bd2 <pvPortMalloc+0xa2>
 8011bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d1f1      	bne.n	8011bb6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011bd2:	4b33      	ldr	r3, [pc, #204]	; (8011ca0 <pvPortMalloc+0x170>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d04a      	beq.n	8011c72 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011bdc:	6a3b      	ldr	r3, [r7, #32]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	2208      	movs	r2, #8
 8011be2:	4413      	add	r3, r2
 8011be4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be8:	681a      	ldr	r2, [r3, #0]
 8011bea:	6a3b      	ldr	r3, [r7, #32]
 8011bec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf0:	685a      	ldr	r2, [r3, #4]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	1ad2      	subs	r2, r2, r3
 8011bf6:	2308      	movs	r3, #8
 8011bf8:	005b      	lsls	r3, r3, #1
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d91e      	bls.n	8011c3c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	4413      	add	r3, r2
 8011c04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c06:	69bb      	ldr	r3, [r7, #24]
 8011c08:	f003 0307 	and.w	r3, r3, #7
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d009      	beq.n	8011c24 <pvPortMalloc+0xf4>
 8011c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c14:	f383 8811 	msr	BASEPRI, r3
 8011c18:	f3bf 8f6f 	isb	sy
 8011c1c:	f3bf 8f4f 	dsb	sy
 8011c20:	613b      	str	r3, [r7, #16]
 8011c22:	e7fe      	b.n	8011c22 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c26:	685a      	ldr	r2, [r3, #4]
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	1ad2      	subs	r2, r2, r3
 8011c2c:	69bb      	ldr	r3, [r7, #24]
 8011c2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c32:	687a      	ldr	r2, [r7, #4]
 8011c34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011c36:	69b8      	ldr	r0, [r7, #24]
 8011c38:	f000 f8f6 	bl	8011e28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011c3c:	4b1a      	ldr	r3, [pc, #104]	; (8011ca8 <pvPortMalloc+0x178>)
 8011c3e:	681a      	ldr	r2, [r3, #0]
 8011c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c42:	685b      	ldr	r3, [r3, #4]
 8011c44:	1ad3      	subs	r3, r2, r3
 8011c46:	4a18      	ldr	r2, [pc, #96]	; (8011ca8 <pvPortMalloc+0x178>)
 8011c48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011c4a:	4b17      	ldr	r3, [pc, #92]	; (8011ca8 <pvPortMalloc+0x178>)
 8011c4c:	681a      	ldr	r2, [r3, #0]
 8011c4e:	4b18      	ldr	r3, [pc, #96]	; (8011cb0 <pvPortMalloc+0x180>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	429a      	cmp	r2, r3
 8011c54:	d203      	bcs.n	8011c5e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011c56:	4b14      	ldr	r3, [pc, #80]	; (8011ca8 <pvPortMalloc+0x178>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	4a15      	ldr	r2, [pc, #84]	; (8011cb0 <pvPortMalloc+0x180>)
 8011c5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c60:	685a      	ldr	r2, [r3, #4]
 8011c62:	4b10      	ldr	r3, [pc, #64]	; (8011ca4 <pvPortMalloc+0x174>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	431a      	orrs	r2, r3
 8011c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6e:	2200      	movs	r2, #0
 8011c70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011c72:	f7fe fa1b 	bl	80100ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c76:	69fb      	ldr	r3, [r7, #28]
 8011c78:	f003 0307 	and.w	r3, r3, #7
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d009      	beq.n	8011c94 <pvPortMalloc+0x164>
 8011c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c84:	f383 8811 	msr	BASEPRI, r3
 8011c88:	f3bf 8f6f 	isb	sy
 8011c8c:	f3bf 8f4f 	dsb	sy
 8011c90:	60fb      	str	r3, [r7, #12]
 8011c92:	e7fe      	b.n	8011c92 <pvPortMalloc+0x162>
	return pvReturn;
 8011c94:	69fb      	ldr	r3, [r7, #28]
}
 8011c96:	4618      	mov	r0, r3
 8011c98:	3728      	adds	r7, #40	; 0x28
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd80      	pop	{r7, pc}
 8011c9e:	bf00      	nop
 8011ca0:	200049ac 	.word	0x200049ac
 8011ca4:	200049b8 	.word	0x200049b8
 8011ca8:	200049b0 	.word	0x200049b0
 8011cac:	200049a4 	.word	0x200049a4
 8011cb0:	200049b4 	.word	0x200049b4

08011cb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b086      	sub	sp, #24
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d046      	beq.n	8011d54 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011cc6:	2308      	movs	r3, #8
 8011cc8:	425b      	negs	r3, r3
 8011cca:	697a      	ldr	r2, [r7, #20]
 8011ccc:	4413      	add	r3, r2
 8011cce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011cd4:	693b      	ldr	r3, [r7, #16]
 8011cd6:	685a      	ldr	r2, [r3, #4]
 8011cd8:	4b20      	ldr	r3, [pc, #128]	; (8011d5c <vPortFree+0xa8>)
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	4013      	ands	r3, r2
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d109      	bne.n	8011cf6 <vPortFree+0x42>
 8011ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ce6:	f383 8811 	msr	BASEPRI, r3
 8011cea:	f3bf 8f6f 	isb	sy
 8011cee:	f3bf 8f4f 	dsb	sy
 8011cf2:	60fb      	str	r3, [r7, #12]
 8011cf4:	e7fe      	b.n	8011cf4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d009      	beq.n	8011d12 <vPortFree+0x5e>
 8011cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d02:	f383 8811 	msr	BASEPRI, r3
 8011d06:	f3bf 8f6f 	isb	sy
 8011d0a:	f3bf 8f4f 	dsb	sy
 8011d0e:	60bb      	str	r3, [r7, #8]
 8011d10:	e7fe      	b.n	8011d10 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	685a      	ldr	r2, [r3, #4]
 8011d16:	4b11      	ldr	r3, [pc, #68]	; (8011d5c <vPortFree+0xa8>)
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	4013      	ands	r3, r2
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d019      	beq.n	8011d54 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d115      	bne.n	8011d54 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011d28:	693b      	ldr	r3, [r7, #16]
 8011d2a:	685a      	ldr	r2, [r3, #4]
 8011d2c:	4b0b      	ldr	r3, [pc, #44]	; (8011d5c <vPortFree+0xa8>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	43db      	mvns	r3, r3
 8011d32:	401a      	ands	r2, r3
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011d38:	f7fe f972 	bl	8010020 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	685a      	ldr	r2, [r3, #4]
 8011d40:	4b07      	ldr	r3, [pc, #28]	; (8011d60 <vPortFree+0xac>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	4413      	add	r3, r2
 8011d46:	4a06      	ldr	r2, [pc, #24]	; (8011d60 <vPortFree+0xac>)
 8011d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011d4a:	6938      	ldr	r0, [r7, #16]
 8011d4c:	f000 f86c 	bl	8011e28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011d50:	f7fe f9ac 	bl	80100ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011d54:	bf00      	nop
 8011d56:	3718      	adds	r7, #24
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}
 8011d5c:	200049b8 	.word	0x200049b8
 8011d60:	200049b0 	.word	0x200049b0

08011d64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011d64:	b480      	push	{r7}
 8011d66:	b085      	sub	sp, #20
 8011d68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011d6a:	f242 7310 	movw	r3, #10000	; 0x2710
 8011d6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011d70:	4b27      	ldr	r3, [pc, #156]	; (8011e10 <prvHeapInit+0xac>)
 8011d72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	f003 0307 	and.w	r3, r3, #7
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d00c      	beq.n	8011d98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	3307      	adds	r3, #7
 8011d82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	f023 0307 	bic.w	r3, r3, #7
 8011d8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011d8c:	68ba      	ldr	r2, [r7, #8]
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	1ad3      	subs	r3, r2, r3
 8011d92:	4a1f      	ldr	r2, [pc, #124]	; (8011e10 <prvHeapInit+0xac>)
 8011d94:	4413      	add	r3, r2
 8011d96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011d9c:	4a1d      	ldr	r2, [pc, #116]	; (8011e14 <prvHeapInit+0xb0>)
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011da2:	4b1c      	ldr	r3, [pc, #112]	; (8011e14 <prvHeapInit+0xb0>)
 8011da4:	2200      	movs	r2, #0
 8011da6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	68ba      	ldr	r2, [r7, #8]
 8011dac:	4413      	add	r3, r2
 8011dae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011db0:	2208      	movs	r2, #8
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	1a9b      	subs	r3, r3, r2
 8011db6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	f023 0307 	bic.w	r3, r3, #7
 8011dbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	4a15      	ldr	r2, [pc, #84]	; (8011e18 <prvHeapInit+0xb4>)
 8011dc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011dc6:	4b14      	ldr	r3, [pc, #80]	; (8011e18 <prvHeapInit+0xb4>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011dce:	4b12      	ldr	r3, [pc, #72]	; (8011e18 <prvHeapInit+0xb4>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	68fa      	ldr	r2, [r7, #12]
 8011dde:	1ad2      	subs	r2, r2, r3
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011de4:	4b0c      	ldr	r3, [pc, #48]	; (8011e18 <prvHeapInit+0xb4>)
 8011de6:	681a      	ldr	r2, [r3, #0]
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	4a0a      	ldr	r2, [pc, #40]	; (8011e1c <prvHeapInit+0xb8>)
 8011df2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	685b      	ldr	r3, [r3, #4]
 8011df8:	4a09      	ldr	r2, [pc, #36]	; (8011e20 <prvHeapInit+0xbc>)
 8011dfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011dfc:	4b09      	ldr	r3, [pc, #36]	; (8011e24 <prvHeapInit+0xc0>)
 8011dfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011e02:	601a      	str	r2, [r3, #0]
}
 8011e04:	bf00      	nop
 8011e06:	3714      	adds	r7, #20
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0e:	4770      	bx	lr
 8011e10:	20002294 	.word	0x20002294
 8011e14:	200049a4 	.word	0x200049a4
 8011e18:	200049ac 	.word	0x200049ac
 8011e1c:	200049b4 	.word	0x200049b4
 8011e20:	200049b0 	.word	0x200049b0
 8011e24:	200049b8 	.word	0x200049b8

08011e28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b085      	sub	sp, #20
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011e30:	4b28      	ldr	r3, [pc, #160]	; (8011ed4 <prvInsertBlockIntoFreeList+0xac>)
 8011e32:	60fb      	str	r3, [r7, #12]
 8011e34:	e002      	b.n	8011e3c <prvInsertBlockIntoFreeList+0x14>
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	60fb      	str	r3, [r7, #12]
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	687a      	ldr	r2, [r7, #4]
 8011e42:	429a      	cmp	r2, r3
 8011e44:	d8f7      	bhi.n	8011e36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	685b      	ldr	r3, [r3, #4]
 8011e4e:	68ba      	ldr	r2, [r7, #8]
 8011e50:	4413      	add	r3, r2
 8011e52:	687a      	ldr	r2, [r7, #4]
 8011e54:	429a      	cmp	r2, r3
 8011e56:	d108      	bne.n	8011e6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	685a      	ldr	r2, [r3, #4]
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	441a      	add	r2, r3
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	685b      	ldr	r3, [r3, #4]
 8011e72:	68ba      	ldr	r2, [r7, #8]
 8011e74:	441a      	add	r2, r3
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	429a      	cmp	r2, r3
 8011e7c:	d118      	bne.n	8011eb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	681a      	ldr	r2, [r3, #0]
 8011e82:	4b15      	ldr	r3, [pc, #84]	; (8011ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d00d      	beq.n	8011ea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	685a      	ldr	r2, [r3, #4]
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	441a      	add	r2, r3
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	681a      	ldr	r2, [r3, #0]
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	601a      	str	r2, [r3, #0]
 8011ea4:	e008      	b.n	8011eb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011ea6:	4b0c      	ldr	r3, [pc, #48]	; (8011ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8011ea8:	681a      	ldr	r2, [r3, #0]
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	601a      	str	r2, [r3, #0]
 8011eae:	e003      	b.n	8011eb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	681a      	ldr	r2, [r3, #0]
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011eb8:	68fa      	ldr	r2, [r7, #12]
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	429a      	cmp	r2, r3
 8011ebe:	d002      	beq.n	8011ec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	687a      	ldr	r2, [r7, #4]
 8011ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011ec6:	bf00      	nop
 8011ec8:	3714      	adds	r7, #20
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed0:	4770      	bx	lr
 8011ed2:	bf00      	nop
 8011ed4:	200049a4 	.word	0x200049a4
 8011ed8:	200049ac 	.word	0x200049ac

08011edc <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8011ee2:	f000 f985 	bl	80121f0 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8011ee6:	480e      	ldr	r0, [pc, #56]	; (8011f20 <APP_THREAD_Init+0x44>)
 8011ee8:	f000 fbf2 	bl	80126d0 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8011eec:	2101      	movs	r1, #1
 8011eee:	2002      	movs	r0, #2
 8011ef0:	f001 fd2e 	bl	8013950 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8011ef4:	f000 fce4 	bl	80128c0 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8011ef8:	f000 fcd0 	bl	801289c <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8011efc:	f7fa f800 	bl	800bf00 <SHCI_C2_THREAD_Init>
 8011f00:	4603      	mov	r3, r0
 8011f02:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8011f04:	4a07      	ldr	r2, [pc, #28]	; (8011f24 <APP_THREAD_Init+0x48>)
 8011f06:	2100      	movs	r1, #0
 8011f08:	4807      	ldr	r0, [pc, #28]	; (8011f28 <APP_THREAD_Init+0x4c>)
 8011f0a:	f7fb feef 	bl	800dcec <osThreadNew>
 8011f0e:	4602      	mov	r2, r0
 8011f10:	4b06      	ldr	r3, [pc, #24]	; (8011f2c <APP_THREAD_Init+0x50>)
 8011f12:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8011f14:	f000 f86c 	bl	8011ff0 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 8011f18:	bf00      	nop
 8011f1a:	3708      	adds	r7, #8
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}
 8011f20:	20030834 	.word	0x20030834
 8011f24:	08013f1c 	.word	0x08013f1c
 8011f28:	080122ad 	.word	0x080122ad
 8011f2c:	20004ad0 	.word	0x20004ad0

08011f30 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2b07      	cmp	r3, #7
 8011f3e:	d83b      	bhi.n	8011fb8 <APP_THREAD_Error+0x88>
 8011f40:	a201      	add	r2, pc, #4	; (adr r2, 8011f48 <APP_THREAD_Error+0x18>)
 8011f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f46:	bf00      	nop
 8011f48:	08011f69 	.word	0x08011f69
 8011f4c:	08011f73 	.word	0x08011f73
 8011f50:	08011f7d 	.word	0x08011f7d
 8011f54:	08011f87 	.word	0x08011f87
 8011f58:	08011f91 	.word	0x08011f91
 8011f5c:	08011f9b 	.word	0x08011f9b
 8011f60:	08011fa5 	.word	0x08011fa5
 8011f64:	08011faf 	.word	0x08011faf
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8011f68:	6839      	ldr	r1, [r7, #0]
 8011f6a:	4818      	ldr	r0, [pc, #96]	; (8011fcc <APP_THREAD_Error+0x9c>)
 8011f6c:	f000 f934 	bl	80121d8 <APP_THREAD_TraceError>
    break;
 8011f70:	e027      	b.n	8011fc2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8011f72:	6839      	ldr	r1, [r7, #0]
 8011f74:	4816      	ldr	r0, [pc, #88]	; (8011fd0 <APP_THREAD_Error+0xa0>)
 8011f76:	f000 f92f 	bl	80121d8 <APP_THREAD_TraceError>
    break;
 8011f7a:	e022      	b.n	8011fc2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8011f7c:	6839      	ldr	r1, [r7, #0]
 8011f7e:	4815      	ldr	r0, [pc, #84]	; (8011fd4 <APP_THREAD_Error+0xa4>)
 8011f80:	f000 f92a 	bl	80121d8 <APP_THREAD_TraceError>
    break;
 8011f84:	e01d      	b.n	8011fc2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8011f86:	6839      	ldr	r1, [r7, #0]
 8011f88:	4813      	ldr	r0, [pc, #76]	; (8011fd8 <APP_THREAD_Error+0xa8>)
 8011f8a:	f000 f925 	bl	80121d8 <APP_THREAD_TraceError>
    break;
 8011f8e:	e018      	b.n	8011fc2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8011f90:	6839      	ldr	r1, [r7, #0]
 8011f92:	4812      	ldr	r0, [pc, #72]	; (8011fdc <APP_THREAD_Error+0xac>)
 8011f94:	f000 f920 	bl	80121d8 <APP_THREAD_TraceError>
    break;
 8011f98:	e013      	b.n	8011fc2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8011f9a:	6839      	ldr	r1, [r7, #0]
 8011f9c:	4810      	ldr	r0, [pc, #64]	; (8011fe0 <APP_THREAD_Error+0xb0>)
 8011f9e:	f000 f91b 	bl	80121d8 <APP_THREAD_TraceError>
    break;
 8011fa2:	e00e      	b.n	8011fc2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8011fa4:	6839      	ldr	r1, [r7, #0]
 8011fa6:	480f      	ldr	r0, [pc, #60]	; (8011fe4 <APP_THREAD_Error+0xb4>)
 8011fa8:	f000 f916 	bl	80121d8 <APP_THREAD_TraceError>
    break;
 8011fac:	e009      	b.n	8011fc2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8011fae:	6839      	ldr	r1, [r7, #0]
 8011fb0:	480d      	ldr	r0, [pc, #52]	; (8011fe8 <APP_THREAD_Error+0xb8>)
 8011fb2:	f000 f911 	bl	80121d8 <APP_THREAD_TraceError>
    break;
 8011fb6:	e004      	b.n	8011fc2 <APP_THREAD_Error+0x92>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8011fb8:	2100      	movs	r1, #0
 8011fba:	480c      	ldr	r0, [pc, #48]	; (8011fec <APP_THREAD_Error+0xbc>)
 8011fbc:	f000 f90c 	bl	80121d8 <APP_THREAD_TraceError>
    break;
 8011fc0:	bf00      	nop
  }
}
 8011fc2:	bf00      	nop
 8011fc4:	3708      	adds	r7, #8
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
 8011fca:	bf00      	nop
 8011fcc:	08013b68 	.word	0x08013b68
 8011fd0:	08013b8c 	.word	0x08013b8c
 8011fd4:	08013bb0 	.word	0x08013bb0
 8011fd8:	08013bd0 	.word	0x08013bd0
 8011fdc:	08013bf0 	.word	0x08013bf0
 8011fe0:	08013c10 	.word	0x08013c10
 8011fe4:	08013c2c 	.word	0x08013c2c
 8011fe8:	08013c58 	.word	0x08013c58
 8011fec:	08013c7c 	.word	0x08013c7c

08011ff0 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b082      	sub	sp, #8
 8011ff4:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8011ff6:	2000      	movs	r0, #0
 8011ff8:	f7fa ffb8 	bl	800cf6c <otInstanceErasePersistentInfo>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8012000:	79fb      	ldrb	r3, [r7, #7]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d004      	beq.n	8012010 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8012006:	79fb      	ldrb	r3, [r7, #7]
 8012008:	4619      	mov	r1, r3
 801200a:	2006      	movs	r0, #6
 801200c:	f7ff ff90 	bl	8011f30 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8012010:	2000      	movs	r0, #0
 8012012:	f7fa ff4f 	bl	800ceb4 <otInstanceFinalize>
  otInstanceInitSingle();
 8012016:	f7fa ff26 	bl	800ce66 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 801201a:	2200      	movs	r2, #0
 801201c:	4955      	ldr	r1, [pc, #340]	; (8012174 <APP_THREAD_DeviceConfig+0x184>)
 801201e:	2000      	movs	r0, #0
 8012020:	f7fa ff6e 	bl	800cf00 <otSetStateChangedCallback>
 8012024:	4603      	mov	r3, r0
 8012026:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8012028:	79fb      	ldrb	r3, [r7, #7]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d004      	beq.n	8012038 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 801202e:	79fb      	ldrb	r3, [r7, #7]
 8012030:	4619      	mov	r1, r3
 8012032:	2001      	movs	r0, #1
 8012034:	f7ff ff7c 	bl	8011f30 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8012038:	2117      	movs	r1, #23
 801203a:	2000      	movs	r0, #0
 801203c:	f7fb f89e 	bl	800d17c <otLinkSetChannel>
 8012040:	4603      	mov	r3, r0
 8012042:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8012044:	79fb      	ldrb	r3, [r7, #7]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d004      	beq.n	8012054 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 801204a:	79fb      	ldrb	r3, [r7, #7]
 801204c:	4619      	mov	r1, r3
 801204e:	2002      	movs	r0, #2
 8012050:	f7ff ff6e 	bl	8011f30 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8012054:	f241 2134 	movw	r1, #4660	; 0x1234
 8012058:	2000      	movs	r0, #0
 801205a:	f7fb f8bf 	bl	800d1dc <otLinkSetPanId>
 801205e:	4603      	mov	r3, r0
 8012060:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8012062:	79fb      	ldrb	r3, [r7, #7]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d004      	beq.n	8012072 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8012068:	79fb      	ldrb	r3, [r7, #7]
 801206a:	4619      	mov	r1, r3
 801206c:	2003      	movs	r0, #3
 801206e:	f7ff ff5f 	bl	8011f30 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8012072:	2101      	movs	r1, #1
 8012074:	2000      	movs	r0, #0
 8012076:	f7fa ffa2 	bl	800cfbe <otIp6SetEnabled>
 801207a:	4603      	mov	r3, r0
 801207c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801207e:	79fb      	ldrb	r3, [r7, #7]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d004      	beq.n	801208e <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8012084:	79fb      	ldrb	r3, [r7, #7]
 8012086:	4619      	mov	r1, r3
 8012088:	2004      	movs	r0, #4
 801208a:	f7ff ff51 	bl	8011f30 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 801208e:	2101      	movs	r1, #1
 8012090:	2000      	movs	r0, #0
 8012092:	f7fb fbd8 	bl	800d846 <otThreadSetEnabled>
 8012096:	4603      	mov	r3, r0
 8012098:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801209a:	79fb      	ldrb	r3, [r7, #7]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d004      	beq.n	80120aa <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 80120a0:	79fb      	ldrb	r3, [r7, #7]
 80120a2:	4619      	mov	r1, r3
 80120a4:	2005      	movs	r0, #5
 80120a6:	f7ff ff43 	bl	8011f30 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
  error = otThreadSetEnabled(NULL, false);
 80120aa:	2100      	movs	r1, #0
 80120ac:	2000      	movs	r0, #0
 80120ae:	f7fb fbca 	bl	800d846 <otThreadSetEnabled>
 80120b2:	4603      	mov	r3, r0
 80120b4:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 80120b6:	79fb      	ldrb	r3, [r7, #7]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d004      	beq.n	80120c6 <APP_THREAD_DeviceConfig+0xd6>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 80120bc:	79fb      	ldrb	r3, [r7, #7]
 80120be:	4619      	mov	r1, r3
 80120c0:	2005      	movs	r0, #5
 80120c2:	f7ff ff35 	bl	8011f30 <APP_THREAD_Error>
  	}


  	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 80120c6:	2106      	movs	r1, #6
 80120c8:	2000      	movs	r0, #0
 80120ca:	f7fb fb89 	bl	800d7e0 <otPlatRadioSetTransmitPower>
 80120ce:	4603      	mov	r3, r0
 80120d0:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 80120d2:	79fb      	ldrb	r3, [r7, #7]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d004      	beq.n	80120e2 <APP_THREAD_DeviceConfig+0xf2>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 80120d8:	79fb      	ldrb	r3, [r7, #7]
 80120da:	4619      	mov	r1, r3
 80120dc:	2002      	movs	r0, #2
 80120de:	f7ff ff27 	bl	8011f30 <APP_THREAD_Error>
  	}

  	otThreadSetChildTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 80120e2:	2103      	movs	r1, #3
 80120e4:	2000      	movs	r0, #0
 80120e6:	f7fb fbde 	bl	800d8a6 <otThreadSetChildTimeout>
//  	error = otThreadSetMasterKey(NULL, &masterKey);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otThreadSetNetworkName(NULL, networkName);
 80120ea:	4923      	ldr	r1, [pc, #140]	; (8012178 <APP_THREAD_DeviceConfig+0x188>)
 80120ec:	2000      	movs	r0, #0
 80120ee:	f7fb fc56 	bl	800d99e <otThreadSetNetworkName>
 80120f2:	4603      	mov	r3, r0
 80120f4:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 80120f6:	79fb      	ldrb	r3, [r7, #7]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d004      	beq.n	8012106 <APP_THREAD_DeviceConfig+0x116>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 80120fc:	79fb      	ldrb	r3, [r7, #7]
 80120fe:	4619      	mov	r1, r3
 8012100:	2002      	movs	r0, #2
 8012102:	f7ff ff15 	bl	8011f30 <APP_THREAD_Error>
//  	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otIp6SetEnabled(NULL, true);
 8012106:	2101      	movs	r1, #1
 8012108:	2000      	movs	r0, #0
 801210a:	f7fa ff58 	bl	800cfbe <otIp6SetEnabled>
 801210e:	4603      	mov	r3, r0
 8012110:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8012112:	79fb      	ldrb	r3, [r7, #7]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d004      	beq.n	8012122 <APP_THREAD_DeviceConfig+0x132>
  		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8012118:	79fb      	ldrb	r3, [r7, #7]
 801211a:	4619      	mov	r1, r3
 801211c:	2004      	movs	r0, #4
 801211e:	f7ff ff07 	bl	8011f30 <APP_THREAD_Error>
  	}

  	error = otThreadSetEnabled(NULL, true);
 8012122:	2101      	movs	r1, #1
 8012124:	2000      	movs	r0, #0
 8012126:	f7fb fb8e 	bl	800d846 <otThreadSetEnabled>
 801212a:	4603      	mov	r3, r0
 801212c:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 801212e:	79fb      	ldrb	r3, [r7, #7]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d004      	beq.n	801213e <APP_THREAD_DeviceConfig+0x14e>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 8012134:	79fb      	ldrb	r3, [r7, #7]
 8012136:	4619      	mov	r1, r3
 8012138:	2005      	movs	r0, #5
 801213a:	f7ff fef9 	bl	8011f30 <APP_THREAD_Error>
  	}

  	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 801213e:	f241 6133 	movw	r1, #5683	; 0x1633
 8012142:	2000      	movs	r0, #0
 8012144:	f7fa fdfd 	bl	800cd42 <otCoapStart>
 8012148:	4603      	mov	r3, r0
 801214a:	71fb      	strb	r3, [r7, #7]
//  	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);

  	error = otCoapAddResource(NULL, &OT_Node_Cal_Ressource);
 801214c:	490b      	ldr	r1, [pc, #44]	; (801217c <APP_THREAD_DeviceConfig+0x18c>)
 801214e:	2000      	movs	r0, #0
 8012150:	f7fa fe27 	bl	800cda2 <otCoapAddResource>
 8012154:	4603      	mov	r3, r0
 8012156:	71fb      	strb	r3, [r7, #7]
  	error = otCoapAddResource(NULL, &OT_Node_Spot_Ressource);
 8012158:	4909      	ldr	r1, [pc, #36]	; (8012180 <APP_THREAD_DeviceConfig+0x190>)
 801215a:	2000      	movs	r0, #0
 801215c:	f7fa fe21 	bl	800cda2 <otCoapAddResource>
 8012160:	4603      	mov	r3, r0
 8012162:	71fb      	strb	r3, [r7, #7]
  #ifndef DONGLE_CODE
//      error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
  #endif
  	// set default multicast address for border router
  //    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
  	otIp6AddressFromString("ff03::1", &multicastAddr);
 8012164:	4907      	ldr	r1, [pc, #28]	; (8012184 <APP_THREAD_DeviceConfig+0x194>)
 8012166:	4808      	ldr	r0, [pc, #32]	; (8012188 <APP_THREAD_DeviceConfig+0x198>)
 8012168:	f7fa ffd6 	bl	800d118 <otIp6AddressFromString>
  	// set UID in local state variable
  //	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
  //	 = UID64_BASE;
//  	stm32UID(msgSendMyIP.uid);
  /* USER CODE END DEVICECONFIG */
}
 801216c:	bf00      	nop
 801216e:	3708      	adds	r7, #8
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}
 8012174:	0801218d 	.word	0x0801218d
 8012178:	08013f64 	.word	0x08013f64
 801217c:	2000013c 	.word	0x2000013c
 8012180:	2000014c 	.word	0x2000014c
 8012184:	20005010 	.word	0x20005010
 8012188:	08013c8c 	.word	0x08013c8c

0801218c <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b082      	sub	sp, #8
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f003 0304 	and.w	r3, r3, #4
 801219c:	2b00      	cmp	r3, #0
 801219e:	d013      	beq.n	80121c8 <APP_THREAD_StateNotif+0x3c>
  {
    switch (otThreadGetDeviceRole(NULL))
 80121a0:	2000      	movs	r0, #0
 80121a2:	f7fb fc2b 	bl	800d9fc <otThreadGetDeviceRole>
 80121a6:	4603      	mov	r3, r0
 80121a8:	2b04      	cmp	r3, #4
 80121aa:	d80f      	bhi.n	80121cc <APP_THREAD_StateNotif+0x40>
 80121ac:	a201      	add	r2, pc, #4	; (adr r2, 80121b4 <APP_THREAD_StateNotif+0x28>)
 80121ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121b2:	bf00      	nop
 80121b4:	080121cd 	.word	0x080121cd
 80121b8:	080121cd 	.word	0x080121cd
 80121bc:	080121cd 	.word	0x080121cd
 80121c0:	080121cd 	.word	0x080121cd
 80121c4:	080121cd 	.word	0x080121cd
      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */
      break;
    }
  }
 80121c8:	bf00      	nop
 80121ca:	e000      	b.n	80121ce <APP_THREAD_StateNotif+0x42>
      break;
 80121cc:	bf00      	nop
}
 80121ce:	bf00      	nop
 80121d0:	3708      	adds	r7, #8
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
 80121d6:	bf00      	nop

080121d8 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 80121d8:	b480      	push	{r7}
 80121da:	b083      	sub	sp, #12
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
 80121e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 80121e2:	bf00      	nop
 80121e4:	370c      	adds	r7, #12
 80121e6:	46bd      	mov	sp, r7
 80121e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ec:	4770      	bx	lr
	...

080121f0 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b088      	sub	sp, #32
 80121f4:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 80121f6:	1d3b      	adds	r3, r7, #4
 80121f8:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 80121fa:	6978      	ldr	r0, [r7, #20]
 80121fc:	f7f9 feac 	bl	800bf58 <SHCI_GetWirelessFwInfo>
 8012200:	4603      	mov	r3, r0
 8012202:	2b00      	cmp	r3, #0
 8012204:	d004      	beq.n	8012210 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8012206:	2101      	movs	r1, #1
 8012208:	2007      	movs	r0, #7
 801220a:	f7ff fe91 	bl	8011f30 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 801220e:	e03d      	b.n	801228c <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 8012210:	4a20      	ldr	r2, [pc, #128]	; (8012294 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8012212:	2101      	movs	r1, #1
 8012214:	2000      	movs	r0, #0
 8012216:	f7f0 fbed 	bl	80029f4 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 801221a:	4a1f      	ldr	r2, [pc, #124]	; (8012298 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 801221c:	2101      	movs	r1, #1
 801221e:	2000      	movs	r0, #0
 8012220:	f7f0 fbe8 	bl	80029f4 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	781b      	ldrb	r3, [r3, #0]
 8012228:	4619      	mov	r1, r3
 801222a:	697b      	ldr	r3, [r7, #20]
 801222c:	785b      	ldrb	r3, [r3, #1]
 801222e:	461a      	mov	r2, r3
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	789b      	ldrb	r3, [r3, #2]
 8012234:	9301      	str	r3, [sp, #4]
 8012236:	9200      	str	r2, [sp, #0]
 8012238:	460b      	mov	r3, r1
 801223a:	4a18      	ldr	r2, [pc, #96]	; (801229c <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 801223c:	2101      	movs	r1, #1
 801223e:	2000      	movs	r0, #0
 8012240:	f7f0 fbd8 	bl	80029f4 <logApplication>
    switch(p_wireless_info->StackType)
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	7a5b      	ldrb	r3, [r3, #9]
 8012248:	2b11      	cmp	r3, #17
 801224a:	d009      	beq.n	8012260 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 801224c:	2b50      	cmp	r3, #80	; 0x50
 801224e:	d00d      	beq.n	801226c <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 8012250:	2b10      	cmp	r3, #16
 8012252:	d111      	bne.n	8012278 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8012254:	4a12      	ldr	r2, [pc, #72]	; (80122a0 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8012256:	2101      	movs	r1, #1
 8012258:	2000      	movs	r0, #0
 801225a:	f7f0 fbcb 	bl	80029f4 <logApplication>
      break;
 801225e:	e010      	b.n	8012282 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 8012260:	4a10      	ldr	r2, [pc, #64]	; (80122a4 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 8012262:	2101      	movs	r1, #1
 8012264:	2000      	movs	r0, #0
 8012266:	f7f0 fbc5 	bl	80029f4 <logApplication>
      break;
 801226a:	e00a      	b.n	8012282 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 801226c:	4a0e      	ldr	r2, [pc, #56]	; (80122a8 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 801226e:	2101      	movs	r1, #1
 8012270:	2000      	movs	r0, #0
 8012272:	f7f0 fbbf 	bl	80029f4 <logApplication>
      break;
 8012276:	e004      	b.n	8012282 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8012278:	2101      	movs	r1, #1
 801227a:	2007      	movs	r0, #7
 801227c:	f7ff fe58 	bl	8011f30 <APP_THREAD_Error>
      break;
 8012280:	bf00      	nop
    APP_DBG("**********************************************************");
 8012282:	4a04      	ldr	r2, [pc, #16]	; (8012294 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8012284:	2101      	movs	r1, #1
 8012286:	2000      	movs	r0, #0
 8012288:	f7f0 fbb4 	bl	80029f4 <logApplication>
}
 801228c:	bf00      	nop
 801228e:	3718      	adds	r7, #24
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}
 8012294:	08013c94 	.word	0x08013c94
 8012298:	08013cd0 	.word	0x08013cd0
 801229c:	08013cec 	.word	0x08013cec
 80122a0:	08013d04 	.word	0x08013d04
 80122a4:	08013d1c 	.word	0x08013d1c
 80122a8:	08013d34 	.word	0x08013d34

080122ac <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b082      	sub	sp, #8
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80122b4:	f04f 32ff 	mov.w	r2, #4294967295
 80122b8:	2101      	movs	r1, #1
 80122ba:	2001      	movs	r0, #1
 80122bc:	f7fb fe1e 	bl	800defc <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 80122c0:	f000 fb30 	bl	8012924 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80122c4:	e7f6      	b.n	80122b4 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

080122c6 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 80122c6:	b580      	push	{r7, lr}
 80122c8:	b082      	sub	sp, #8
 80122ca:	af00      	add	r7, sp, #0
 80122cc:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80122ce:	f04f 32ff 	mov.w	r2, #4294967295
 80122d2:	2101      	movs	r1, #1
 80122d4:	2001      	movs	r0, #1
 80122d6:	f7fb fe11 	bl	800defc <osThreadFlagsWait>
    Send_CLI_To_M0();
 80122da:	f000 faa5 	bl	8012828 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80122de:	e7f6      	b.n	80122ce <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

080122e0 <APP_THREAD_CoapNodeSpotRequestHandler>:
//}

static void APP_THREAD_CoapNodeSpotRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b08a      	sub	sp, #40	; 0x28
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	60f8      	str	r0, [r7, #12]
 80122e8:	60b9      	str	r1, [r7, #8]
 80122ea:	607a      	str	r2, [r7, #4]
 80122ec:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		struct MeasMsg receivedMeasMsg;
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedMeasMsg, sizeof(receivedMeasMsg))
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f7fa ffcf 	bl	800d292 <otMessageGetOffset>
 80122f4:	4603      	mov	r3, r0
 80122f6:	4619      	mov	r1, r3
 80122f8:	f107 0214 	add.w	r2, r7, #20
 80122fc:	2314      	movs	r3, #20
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f7fb f82c 	bl	800d35c <otMessageRead>
 8012304:	4603      	mov	r3, r0
 8012306:	2b14      	cmp	r3, #20
 8012308:	d121      	bne.n	801234e <APP_THREAD_CoapNodeSpotRequestHandler+0x6e>
				== sizeof(receivedMeasMsg)) {


			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 801230a:	68b8      	ldr	r0, [r7, #8]
 801230c:	f7fa fbfa 	bl	800cb04 <otCoapHeaderGetCode>
 8012310:	4603      	mov	r3, r0
 8012312:	2b03      	cmp	r3, #3
 8012314:	d111      	bne.n	801233a <APP_THREAD_CoapNodeSpotRequestHandler+0x5a>
			{
//				measMsgReceivedFromNode(&receivedMeasMsg);
				toggleLed(1,1,1);
 8012316:	2201      	movs	r2, #1
 8012318:	2101      	movs	r1, #1
 801231a:	2001      	movs	r0, #1
 801231c:	f7ef fe10 	bl	8001f40 <toggleLed>
				osMessageQueuePut (msgQueueHandle, &receivedMeasMsg, NULL, 0);
 8012320:	4b0d      	ldr	r3, [pc, #52]	; (8012358 <APP_THREAD_CoapNodeSpotRequestHandler+0x78>)
 8012322:	6818      	ldr	r0, [r3, #0]
 8012324:	f107 0114 	add.w	r1, r7, #20
 8012328:	2300      	movs	r3, #0
 801232a:	2200      	movs	r2, #0
 801232c:	f7fc f9d2 	bl	800e6d4 <osMessageQueuePut>
				toggleLed(0,0,1);
 8012330:	2201      	movs	r2, #1
 8012332:	2100      	movs	r1, #0
 8012334:	2000      	movs	r0, #0
 8012336:	f7ef fe03 	bl	8001f40 <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 801233a:	68b8      	ldr	r0, [r7, #8]
 801233c:	f7fa fbb4 	bl	800caa8 <otCoapHeaderGetType>
 8012340:	4603      	mov	r3, r0
 8012342:	2b00      	cmp	r3, #0
 8012344:	d103      	bne.n	801234e <APP_THREAD_CoapNodeSpotRequestHandler+0x6e>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 8012346:	6839      	ldr	r1, [r7, #0]
 8012348:	68b8      	ldr	r0, [r7, #8]
 801234a:	f000 f845 	bl	80123d8 <APP_THREAD_CoapSendDataResponse>
			}

		}
}
 801234e:	bf00      	nop
 8012350:	3728      	adds	r7, #40	; 0x28
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}
 8012356:	bf00      	nop
 8012358:	20000294 	.word	0x20000294

0801235c <APP_THREAD_CoapNodeCalRequestHandler>:

struct CalMsg receivedCalMsg;
static void APP_THREAD_CoapNodeCalRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 801235c:	b580      	push	{r7, lr}
 801235e:	b084      	sub	sp, #16
 8012360:	af00      	add	r7, sp, #0
 8012362:	60f8      	str	r0, [r7, #12]
 8012364:	60b9      	str	r1, [r7, #8]
 8012366:	607a      	str	r2, [r7, #4]
 8012368:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedCalMsg, sizeof(receivedCalMsg))
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f7fa ff91 	bl	800d292 <otMessageGetOffset>
 8012370:	4603      	mov	r3, r0
 8012372:	4619      	mov	r1, r3
 8012374:	230c      	movs	r3, #12
 8012376:	4a17      	ldr	r2, [pc, #92]	; (80123d4 <APP_THREAD_CoapNodeCalRequestHandler+0x78>)
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f7fa ffef 	bl	800d35c <otMessageRead>
 801237e:	4603      	mov	r3, r0
 8012380:	2b0c      	cmp	r3, #12
 8012382:	d122      	bne.n	80123ca <APP_THREAD_CoapNodeCalRequestHandler+0x6e>
				== sizeof(receivedCalMsg)) {

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8012384:	68b8      	ldr	r0, [r7, #8]
 8012386:	f7fa fbbd 	bl	800cb04 <otCoapHeaderGetCode>
 801238a:	4603      	mov	r3, r0
 801238c:	2b03      	cmp	r3, #3
 801238e:	d107      	bne.n	80123a0 <APP_THREAD_CoapNodeCalRequestHandler+0x44>
			{
				if(receivedCalMsg.cal_fcn == CALIBRATION_START_COMMAND){
 8012390:	4b10      	ldr	r3, [pc, #64]	; (80123d4 <APP_THREAD_CoapNodeCalRequestHandler+0x78>)
 8012392:	789b      	ldrb	r3, [r3, #2]
 8012394:	2b01      	cmp	r3, #1
					// TODO: start calibration

				}else if(receivedCalMsg.cal_fcn == CALIBRATION_STOP_COMMAND){
					// TODO: stop calibration
				}
				toggleLed(0,0,1);
 8012396:	2201      	movs	r2, #1
 8012398:	2100      	movs	r1, #0
 801239a:	2000      	movs	r0, #0
 801239c:	f7ef fdd0 	bl	8001f40 <toggleLed>
			}

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET)
 80123a0:	68b8      	ldr	r0, [r7, #8]
 80123a2:	f7fa fbaf 	bl	800cb04 <otCoapHeaderGetCode>
 80123a6:	4603      	mov	r3, r0
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d104      	bne.n	80123b6 <APP_THREAD_CoapNodeCalRequestHandler+0x5a>
					// 		TODO this can be done in an ACK but doing it now in a separate PUT request to the nodeSpot resource
#ifdef SOLAR_SENSOR_NODE
					sendPowerMeasurement(pMessageInfo->mPeerAddr, receivedCalMsg.angle_1, receivedCalMsg.angle_2);
#endif
				}
				toggleLed(1,0,0);
 80123ac:	2200      	movs	r2, #0
 80123ae:	2100      	movs	r1, #0
 80123b0:	2001      	movs	r0, #1
 80123b2:	f7ef fdc5 	bl	8001f40 <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 80123b6:	68b8      	ldr	r0, [r7, #8]
 80123b8:	f7fa fb76 	bl	800caa8 <otCoapHeaderGetType>
 80123bc:	4603      	mov	r3, r0
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d103      	bne.n	80123ca <APP_THREAD_CoapNodeCalRequestHandler+0x6e>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 80123c2:	6839      	ldr	r1, [r7, #0]
 80123c4:	68b8      	ldr	r0, [r7, #8]
 80123c6:	f000 f807 	bl	80123d8 <APP_THREAD_CoapSendDataResponse>
//
//		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
//			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
//		}

}
 80123ca:	bf00      	nop
 80123cc:	3710      	adds	r7, #16
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	bf00      	nop
 80123d4:	2000502c 	.word	0x2000502c

080123d8 <APP_THREAD_CoapSendDataResponse>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_CoapSendDataResponse(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 80123d8:	b590      	push	{r4, r7, lr}
 80123da:	b085      	sub	sp, #20
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 80123e2:	2300      	movs	r3, #0
 80123e4:	73fb      	strb	r3, [r7, #15]

  do{
    APP_DBG(" ********* APP_THREAD_CoapSendDataResponse ********* ");
 80123e6:	4a25      	ldr	r2, [pc, #148]	; (801247c <APP_THREAD_CoapSendDataResponse+0xa4>)
 80123e8:	2101      	movs	r1, #1
 80123ea:	2000      	movs	r0, #0
 80123ec:	f7f0 fb02 	bl	80029f4 <logApplication>
    otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 80123f0:	2244      	movs	r2, #68	; 0x44
 80123f2:	2120      	movs	r1, #32
 80123f4:	4822      	ldr	r0, [pc, #136]	; (8012480 <APP_THREAD_CoapSendDataResponse+0xa8>)
 80123f6:	f7fa f9fb 	bl	800c7f0 <otCoapHeaderInit>
    otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f7fa fbb0 	bl	800cb60 <otCoapHeaderGetMessageId>
 8012400:	4603      	mov	r3, r0
 8012402:	4619      	mov	r1, r3
 8012404:	481e      	ldr	r0, [pc, #120]	; (8012480 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8012406:	f7fa fb1f 	bl	800ca48 <otCoapHeaderSetMessageId>
    otCoapHeaderSetToken(&OT_Header,
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f7fa fc04 	bl	800cc18 <otCoapHeaderGetToken>
 8012410:	4604      	mov	r4, r0
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f7fa fbd2 	bl	800cbbc <otCoapHeaderGetTokenLength>
 8012418:	4603      	mov	r3, r0
 801241a:	461a      	mov	r2, r3
 801241c:	4621      	mov	r1, r4
 801241e:	4818      	ldr	r0, [pc, #96]	; (8012480 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8012420:	f7fa fa1b 	bl	800c85a <otCoapHeaderSetToken>
        otCoapHeaderGetToken(pRequestHeader),
        otCoapHeaderGetTokenLength(pRequestHeader));

    pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8012424:	4916      	ldr	r1, [pc, #88]	; (8012480 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8012426:	2000      	movs	r0, #0
 8012428:	f7fa fc23 	bl	800cc72 <otCoapNewMessage>
 801242c:	4602      	mov	r2, r0
 801242e:	4b15      	ldr	r3, [pc, #84]	; (8012484 <APP_THREAD_CoapSendDataResponse+0xac>)
 8012430:	601a      	str	r2, [r3, #0]
    if (pOT_Message == NULL)
 8012432:	4b14      	ldr	r3, [pc, #80]	; (8012484 <APP_THREAD_CoapSendDataResponse+0xac>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d106      	bne.n	8012448 <APP_THREAD_CoapSendDataResponse+0x70>
    {
      APP_DBG("WARNING : pOT_Message = NULL ! -> exit now");
 801243a:	4a13      	ldr	r2, [pc, #76]	; (8012488 <APP_THREAD_CoapSendDataResponse+0xb0>)
 801243c:	2101      	movs	r1, #1
 801243e:	2000      	movs	r0, #0
 8012440:	f7f0 fad8 	bl	80029f4 <logApplication>
      break;
 8012444:	bf00      	nop
    {
      otMessageFree(pOT_Message);
//      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
    }
  }while(false);
}
 8012446:	e014      	b.n	8012472 <APP_THREAD_CoapSendDataResponse+0x9a>
    error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8012448:	4b0e      	ldr	r3, [pc, #56]	; (8012484 <APP_THREAD_CoapSendDataResponse+0xac>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	683a      	ldr	r2, [r7, #0]
 801244e:	4619      	mov	r1, r3
 8012450:	2000      	movs	r0, #0
 8012452:	f7fa fcd5 	bl	800ce00 <otCoapSendResponse>
 8012456:	4603      	mov	r3, r0
 8012458:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE && pOT_Message != NULL)
 801245a:	7bfb      	ldrb	r3, [r7, #15]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d008      	beq.n	8012472 <APP_THREAD_CoapSendDataResponse+0x9a>
 8012460:	4b08      	ldr	r3, [pc, #32]	; (8012484 <APP_THREAD_CoapSendDataResponse+0xac>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d004      	beq.n	8012472 <APP_THREAD_CoapSendDataResponse+0x9a>
      otMessageFree(pOT_Message);
 8012468:	4b06      	ldr	r3, [pc, #24]	; (8012484 <APP_THREAD_CoapSendDataResponse+0xac>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	4618      	mov	r0, r3
 801246e:	f7fa fee5 	bl	800d23c <otMessageFree>
}
 8012472:	bf00      	nop
 8012474:	3714      	adds	r7, #20
 8012476:	46bd      	mov	sp, r7
 8012478:	bd90      	pop	{r4, r7, pc}
 801247a:	bf00      	nop
 801247c:	08013d60 	.word	0x08013d60
 8012480:	20004b24 	.word	0x20004b24
 8012484:	20004ad8 	.word	0x20004ad8
 8012488:	08013d98 	.word	0x08013d98

0801248c <APP_THREAD_SendCoapMsg>:
//		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
//	}
//}

void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, const char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 801248c:	b590      	push	{r4, r7, lr}
 801248e:	b087      	sub	sp, #28
 8012490:	af02      	add	r7, sp, #8
 8012492:	60f8      	str	r0, [r7, #12]
 8012494:	607a      	str	r2, [r7, #4]
 8012496:	603b      	str	r3, [r7, #0]
 8012498:	460b      	mov	r3, r1
 801249a:	817b      	strh	r3, [r7, #10]
	/************ SET MESSAGE INFO (WHERE THE PACKET GOES) ************/
	// https://openthread.io/reference/struct/ot-message-info.html#structot_message_info
	do {
		// REMOVE BELOW CALLS (ONLY FOR DEBUGGING)
			  myRloc16 = otThreadGetRloc16(NULL);
 801249c:	2000      	movs	r0, #0
 801249e:	f7fb fad6 	bl	800da4e <otThreadGetRloc16>
 80124a2:	4603      	mov	r3, r0
 80124a4:	461a      	mov	r2, r3
 80124a6:	4b7e      	ldr	r3, [pc, #504]	; (80126a0 <APP_THREAD_SendCoapMsg+0x214>)
 80124a8:	801a      	strh	r2, [r3, #0]
			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 80124aa:	2000      	movs	r0, #0
 80124ac:	f7fa fde4 	bl	800d078 <otIp6GetUnicastAddresses>
 80124b0:	4602      	mov	r2, r0
 80124b2:	4b7c      	ldr	r3, [pc, #496]	; (80126a4 <APP_THREAD_SendCoapMsg+0x218>)
 80124b4:	601a      	str	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 80124b6:	2000      	movs	r0, #0
 80124b8:	f7fa fdb1 	bl	800d01e <otIp6IsEnabled>
 80124bc:	4603      	mov	r3, r0
 80124be:	461a      	mov	r2, r3
 80124c0:	4b79      	ldr	r3, [pc, #484]	; (80126a8 <APP_THREAD_SendCoapMsg+0x21c>)
 80124c2:	701a      	strb	r2, [r3, #0]
			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
 80124c4:	2000      	movs	r0, #0
 80124c6:	f7fa fdff 	bl	800d0c8 <otIp6GetMulticastAddresses>
 80124ca:	4602      	mov	r2, r0
 80124cc:	4b77      	ldr	r3, [pc, #476]	; (80126ac <APP_THREAD_SendCoapMsg+0x220>)
 80124ce:	601a      	str	r2, [r3, #0]
			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
 80124d0:	2000      	movs	r0, #0
 80124d2:	f7fb fa14 	bl	800d8fe <otThreadGetMeshLocalEid>
 80124d6:	4602      	mov	r2, r0
 80124d8:	4b75      	ldr	r3, [pc, #468]	; (80126b0 <APP_THREAD_SendCoapMsg+0x224>)
 80124da:	601a      	str	r2, [r3, #0]
			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);
 80124dc:	2000      	movs	r0, #0
 80124de:	f7fb fa36 	bl	800d94e <otThreadGetLinkLocalIp6Address>
 80124e2:	4602      	mov	r2, r0
 80124e4:	4b73      	ldr	r3, [pc, #460]	; (80126b4 <APP_THREAD_SendCoapMsg+0x228>)
 80124e6:	601a      	str	r2, [r3, #0]

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 80124e8:	222c      	movs	r2, #44	; 0x2c
 80124ea:	2100      	movs	r1, #0
 80124ec:	4872      	ldr	r0, [pc, #456]	; (80126b8 <APP_THREAD_SendCoapMsg+0x22c>)
 80124ee:	f001 fa8c 	bl	8013a0a <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 80124f2:	897b      	ldrh	r3, [r7, #10]
 80124f4:	2b64      	cmp	r3, #100	; 0x64
 80124f6:	d914      	bls.n	8012522 <APP_THREAD_SendCoapMsg+0x96>
#ifndef BORDER_ROUTER_NODE_TRANSMITTER
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 80124f8:	4b6f      	ldr	r3, [pc, #444]	; (80126b8 <APP_THREAD_SendCoapMsg+0x22c>)
 80124fa:	4a70      	ldr	r2, [pc, #448]	; (80126bc <APP_THREAD_SendCoapMsg+0x230>)
 80124fc:	f103 0410 	add.w	r4, r3, #16
 8012500:	4613      	mov	r3, r2
 8012502:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012504:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8012508:	2000      	movs	r0, #0
 801250a:	f7fb f9f8 	bl	800d8fe <otThreadGetMeshLocalEid>
 801250e:	4602      	mov	r2, r0
 8012510:	4b69      	ldr	r3, [pc, #420]	; (80126b8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012512:	461c      	mov	r4, r3
 8012514:	4613      	mov	r3, r2
 8012516:	6818      	ldr	r0, [r3, #0]
 8012518:	6859      	ldr	r1, [r3, #4]
 801251a:	689a      	ldr	r2, [r3, #8]
 801251c:	68db      	ldr	r3, [r3, #12]
 801251e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012520:	e015      	b.n	801254e <APP_THREAD_SendCoapMsg+0xc2>
//			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
#else
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
#endif
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8012522:	4b65      	ldr	r3, [pc, #404]	; (80126b8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012524:	4a66      	ldr	r2, [pc, #408]	; (80126c0 <APP_THREAD_SendCoapMsg+0x234>)
 8012526:	f103 0410 	add.w	r4, r3, #16
 801252a:	4613      	mov	r3, r2
 801252c:	6818      	ldr	r0, [r3, #0]
 801252e:	6859      	ldr	r1, [r3, #4]
 8012530:	689a      	ldr	r2, [r3, #8]
 8012532:	68db      	ldr	r3, [r3, #12]
 8012534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8012536:	2000      	movs	r0, #0
 8012538:	f7fb f9e1 	bl	800d8fe <otThreadGetMeshLocalEid>
 801253c:	4602      	mov	r2, r0
 801253e:	4b5e      	ldr	r3, [pc, #376]	; (80126b8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012540:	461c      	mov	r4, r3
 8012542:	4613      	mov	r3, r2
 8012544:	6818      	ldr	r0, [r3, #0]
 8012546:	6859      	ldr	r1, [r3, #4]
 8012548:	689a      	ldr	r2, [r3, #8]
 801254a:	68db      	ldr	r3, [r3, #12]
 801254c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 801254e:	4b5a      	ldr	r3, [pc, #360]	; (80126b8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012550:	2201      	movs	r2, #1
 8012552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8012556:	4b58      	ldr	r3, [pc, #352]	; (80126b8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012558:	f241 6233 	movw	r2, #5683	; 0x1633
 801255c:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 801255e:	4b56      	ldr	r3, [pc, #344]	; (80126b8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012560:	2240      	movs	r2, #64	; 0x40
 8012562:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8012566:	f897 3020 	ldrb.w	r3, [r7, #32]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d009      	beq.n	8012582 <APP_THREAD_SendCoapMsg+0xf6>
 801256e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012572:	2b03      	cmp	r3, #3
 8012574:	d105      	bne.n	8012582 <APP_THREAD_SendCoapMsg+0xf6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8012576:	2203      	movs	r2, #3
 8012578:	2100      	movs	r1, #0
 801257a:	4852      	ldr	r0, [pc, #328]	; (80126c4 <APP_THREAD_SendCoapMsg+0x238>)
 801257c:	f7fa f938 	bl	800c7f0 <otCoapHeaderInit>
 8012580:	e04a      	b.n	8012618 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8012582:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d009      	beq.n	801259e <APP_THREAD_SendCoapMsg+0x112>
 801258a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801258e:	2b01      	cmp	r3, #1
 8012590:	d105      	bne.n	801259e <APP_THREAD_SendCoapMsg+0x112>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8012592:	2201      	movs	r2, #1
 8012594:	2100      	movs	r1, #0
 8012596:	484b      	ldr	r0, [pc, #300]	; (80126c4 <APP_THREAD_SendCoapMsg+0x238>)
 8012598:	f7fa f92a 	bl	800c7f0 <otCoapHeaderInit>
 801259c:	e03c      	b.n	8012618 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 801259e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d009      	beq.n	80125ba <APP_THREAD_SendCoapMsg+0x12e>
 80125a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80125aa:	2b02      	cmp	r3, #2
 80125ac:	d105      	bne.n	80125ba <APP_THREAD_SendCoapMsg+0x12e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 80125ae:	2202      	movs	r2, #2
 80125b0:	2100      	movs	r1, #0
 80125b2:	4844      	ldr	r0, [pc, #272]	; (80126c4 <APP_THREAD_SendCoapMsg+0x238>)
 80125b4:	f7fa f91c 	bl	800c7f0 <otCoapHeaderInit>
 80125b8:	e02e      	b.n	8012618 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 80125ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d109      	bne.n	80125d6 <APP_THREAD_SendCoapMsg+0x14a>
 80125c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80125c6:	2b03      	cmp	r3, #3
 80125c8:	d105      	bne.n	80125d6 <APP_THREAD_SendCoapMsg+0x14a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 80125ca:	2203      	movs	r2, #3
 80125cc:	2110      	movs	r1, #16
 80125ce:	483d      	ldr	r0, [pc, #244]	; (80126c4 <APP_THREAD_SendCoapMsg+0x238>)
 80125d0:	f7fa f90e 	bl	800c7f0 <otCoapHeaderInit>
 80125d4:	e020      	b.n	8012618 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 80125d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d109      	bne.n	80125f2 <APP_THREAD_SendCoapMsg+0x166>
 80125de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80125e2:	2b01      	cmp	r3, #1
 80125e4:	d105      	bne.n	80125f2 <APP_THREAD_SendCoapMsg+0x166>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 80125e6:	2201      	movs	r2, #1
 80125e8:	2110      	movs	r1, #16
 80125ea:	4836      	ldr	r0, [pc, #216]	; (80126c4 <APP_THREAD_SendCoapMsg+0x238>)
 80125ec:	f7fa f900 	bl	800c7f0 <otCoapHeaderInit>
 80125f0:	e012      	b.n	8012618 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 80125f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d109      	bne.n	801260e <APP_THREAD_SendCoapMsg+0x182>
 80125fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80125fe:	2b02      	cmp	r3, #2
 8012600:	d105      	bne.n	801260e <APP_THREAD_SendCoapMsg+0x182>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8012602:	2202      	movs	r2, #2
 8012604:	2110      	movs	r1, #16
 8012606:	482f      	ldr	r0, [pc, #188]	; (80126c4 <APP_THREAD_SendCoapMsg+0x238>)
 8012608:	f7fa f8f2 	bl	800c7f0 <otCoapHeaderInit>
 801260c:	e004      	b.n	8012618 <APP_THREAD_SendCoapMsg+0x18c>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 801260e:	2102      	movs	r1, #2
 8012610:	482c      	ldr	r0, [pc, #176]	; (80126c4 <APP_THREAD_SendCoapMsg+0x238>)
 8012612:	f7fa f956 	bl	800c8c2 <otCoapHeaderGenerateToken>
 8012616:	e040      	b.n	801269a <APP_THREAD_SendCoapMsg+0x20e>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8012618:	6839      	ldr	r1, [r7, #0]
 801261a:	482a      	ldr	r0, [pc, #168]	; (80126c4 <APP_THREAD_SendCoapMsg+0x238>)
 801261c:	f7fa f9b4 	bl	800c988 <otCoapHeaderAppendUriPathOptions>
 8012620:	4603      	mov	r3, r0
 8012622:	461a      	mov	r2, r3
 8012624:	4b28      	ldr	r3, [pc, #160]	; (80126c8 <APP_THREAD_SendCoapMsg+0x23c>)
 8012626:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8012628:	212a      	movs	r1, #42	; 0x2a
 801262a:	4826      	ldr	r0, [pc, #152]	; (80126c4 <APP_THREAD_SendCoapMsg+0x238>)
 801262c:	f7fa f979 	bl	800c922 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		if (msgSize > 0) {
 8012630:	897b      	ldrh	r3, [r7, #10]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d002      	beq.n	801263c <APP_THREAD_SendCoapMsg+0x1b0>
			otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 8012636:	4823      	ldr	r0, [pc, #140]	; (80126c4 <APP_THREAD_SendCoapMsg+0x238>)
 8012638:	f7fa f9d8 	bl	800c9ec <otCoapHeaderSetPayloadMarker>
		}

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 801263c:	4921      	ldr	r1, [pc, #132]	; (80126c4 <APP_THREAD_SendCoapMsg+0x238>)
 801263e:	2000      	movs	r0, #0
 8012640:	f7fa fb17 	bl	800cc72 <otCoapNewMessage>
 8012644:	4602      	mov	r2, r0
 8012646:	4b21      	ldr	r3, [pc, #132]	; (80126cc <APP_THREAD_SendCoapMsg+0x240>)
 8012648:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 801264a:	897b      	ldrh	r3, [r7, #10]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d00a      	beq.n	8012666 <APP_THREAD_SendCoapMsg+0x1da>
			error = otMessageAppend(pOT_Message, message, msgSize);
 8012650:	4b1e      	ldr	r3, [pc, #120]	; (80126cc <APP_THREAD_SendCoapMsg+0x240>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	897a      	ldrh	r2, [r7, #10]
 8012656:	68f9      	ldr	r1, [r7, #12]
 8012658:	4618      	mov	r0, r3
 801265a:	f7fa fe48 	bl	800d2ee <otMessageAppend>
 801265e:	4603      	mov	r3, r0
 8012660:	461a      	mov	r2, r3
 8012662:	4b19      	ldr	r3, [pc, #100]	; (80126c8 <APP_THREAD_SendCoapMsg+0x23c>)
 8012664:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 8012666:	4b19      	ldr	r3, [pc, #100]	; (80126cc <APP_THREAD_SendCoapMsg+0x240>)
 8012668:	6819      	ldr	r1, [r3, #0]
 801266a:	2300      	movs	r3, #0
 801266c:	9300      	str	r3, [sp, #0]
 801266e:	2300      	movs	r3, #0
 8012670:	4a11      	ldr	r2, [pc, #68]	; (80126b8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012672:	2000      	movs	r0, #0
 8012674:	f7fa fb2b 	bl	800ccce <otCoapSendRequest>
 8012678:	4603      	mov	r3, r0
 801267a:	461a      	mov	r2, r3
 801267c:	4b12      	ldr	r3, [pc, #72]	; (80126c8 <APP_THREAD_SendCoapMsg+0x23c>)
 801267e:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8012680:	4b11      	ldr	r3, [pc, #68]	; (80126c8 <APP_THREAD_SendCoapMsg+0x23c>)
 8012682:	781b      	ldrb	r3, [r3, #0]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d008      	beq.n	801269a <APP_THREAD_SendCoapMsg+0x20e>
 8012688:	4b10      	ldr	r3, [pc, #64]	; (80126cc <APP_THREAD_SendCoapMsg+0x240>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d004      	beq.n	801269a <APP_THREAD_SendCoapMsg+0x20e>
			otMessageFree(pOT_Message);
 8012690:	4b0e      	ldr	r3, [pc, #56]	; (80126cc <APP_THREAD_SendCoapMsg+0x240>)
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	4618      	mov	r0, r3
 8012696:	f7fa fdd1 	bl	800d23c <otMessageFree>
		}

	} while (false);
}
 801269a:	3714      	adds	r7, #20
 801269c:	46bd      	mov	sp, r7
 801269e:	bd90      	pop	{r4, r7, pc}
 80126a0:	2000503c 	.word	0x2000503c
 80126a4:	20005040 	.word	0x20005040
 80126a8:	20005020 	.word	0x20005020
 80126ac:	20005008 	.word	0x20005008
 80126b0:	20005038 	.word	0x20005038
 80126b4:	2000500c 	.word	0x2000500c
 80126b8:	20004af8 	.word	0x20004af8
 80126bc:	20004ae0 	.word	0x20004ae0
 80126c0:	20005010 	.word	0x20005010
 80126c4:	20004b24 	.word	0x20004b24
 80126c8:	20004adc 	.word	0x20004adc
 80126cc:	20004ad8 	.word	0x20004ad8

080126d0 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 80126d0:	b480      	push	{r7}
 80126d2:	b083      	sub	sp, #12
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 80126d8:	4a04      	ldr	r2, [pc, #16]	; (80126ec <APP_THREAD_RegisterCmdBuffer+0x1c>)
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	6013      	str	r3, [r2, #0]
}
 80126de:	bf00      	nop
 80126e0:	370c      	adds	r7, #12
 80126e2:	46bd      	mov	sp, r7
 80126e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e8:	4770      	bx	lr
 80126ea:	bf00      	nop
 80126ec:	20004ac0 	.word	0x20004ac0

080126f0 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 80126f0:	b480      	push	{r7}
 80126f2:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 80126f4:	4b03      	ldr	r3, [pc, #12]	; (8012704 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	330c      	adds	r3, #12
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	46bd      	mov	sp, r7
 80126fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012702:	4770      	bx	lr
 8012704:	20004ac0 	.word	0x20004ac0

08012708 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8012708:	b480      	push	{r7}
 801270a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 801270c:	4b03      	ldr	r3, [pc, #12]	; (801271c <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	330b      	adds	r3, #11
}
 8012712:	4618      	mov	r0, r3
 8012714:	46bd      	mov	sp, r7
 8012716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271a:	4770      	bx	lr
 801271c:	20004ac0 	.word	0x20004ac0

08012720 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8012720:	b480      	push	{r7}
 8012722:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8012724:	4b03      	ldr	r3, [pc, #12]	; (8012734 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	330b      	adds	r3, #11
}
 801272a:	4618      	mov	r0, r3
 801272c:	46bd      	mov	sp, r7
 801272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012732:	4770      	bx	lr
 8012734:	20004ac4 	.word	0x20004ac4

08012738 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 801273e:	4b0f      	ldr	r3, [pc, #60]	; (801277c <Ot_Cmd_Transfer+0x44>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	2200      	movs	r2, #0
 8012744:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012748:	725a      	strb	r2, [r3, #9]
 801274a:	2200      	movs	r2, #0
 801274c:	f042 0202 	orr.w	r2, r2, #2
 8012750:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8012752:	4b0a      	ldr	r3, [pc, #40]	; (801277c <Ot_Cmd_Transfer+0x44>)
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	330c      	adds	r3, #12
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	3302      	adds	r3, #2
 801275c:	009b      	lsls	r3, r3, #2
 801275e:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8012760:	4b06      	ldr	r3, [pc, #24]	; (801277c <Ot_Cmd_Transfer+0x44>)
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	687a      	ldr	r2, [r7, #4]
 8012766:	b2d2      	uxtb	r2, r2
 8012768:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 801276a:	f7f9 feeb 	bl	800c544 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 801276e:	f000 f829 	bl	80127c4 <Wait_Getting_Ack_From_M0>
}
 8012772:	bf00      	nop
 8012774:	3708      	adds	r7, #8
 8012776:	46bd      	mov	sp, r7
 8012778:	bd80      	pop	{r7, pc}
 801277a:	bf00      	nop
 801277c:	20004ac0 	.word	0x20004ac0

08012780 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b082      	sub	sp, #8
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8012788:	f000 f82e 	bl	80127e8 <Receive_Ack_From_M0>
}
 801278c:	bf00      	nop
 801278e:	3708      	adds	r7, #8
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}

08012794 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 801279c:	4a04      	ldr	r2, [pc, #16]	; (80127b0 <TL_THREAD_NotReceived+0x1c>)
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 80127a2:	f000 f82d 	bl	8012800 <Receive_Notification_From_M0>
}
 80127a6:	bf00      	nop
 80127a8:	3708      	adds	r7, #8
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}
 80127ae:	bf00      	nop
 80127b0:	20004ac4 	.word	0x20004ac4

080127b4 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 80127b4:	b480      	push	{r7}
 80127b6:	af00      	add	r7, sp, #0

}
 80127b8:	bf00      	nop
 80127ba:	46bd      	mov	sp, r7
 80127bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c0:	4770      	bx	lr
	...

080127c4 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 80127c4:	b480      	push	{r7}
 80127c6:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 80127c8:	bf00      	nop
 80127ca:	4b06      	ldr	r3, [pc, #24]	; (80127e4 <Wait_Getting_Ack_From_M0+0x20>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d0fb      	beq.n	80127ca <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 80127d2:	4b04      	ldr	r3, [pc, #16]	; (80127e4 <Wait_Getting_Ack_From_M0+0x20>)
 80127d4:	2200      	movs	r2, #0
 80127d6:	601a      	str	r2, [r3, #0]
}
 80127d8:	bf00      	nop
 80127da:	46bd      	mov	sp, r7
 80127dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e0:	4770      	bx	lr
 80127e2:	bf00      	nop
 80127e4:	20004acc 	.word	0x20004acc

080127e8 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 80127e8:	b480      	push	{r7}
 80127ea:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 80127ec:	4b03      	ldr	r3, [pc, #12]	; (80127fc <Receive_Ack_From_M0+0x14>)
 80127ee:	2201      	movs	r2, #1
 80127f0:	601a      	str	r2, [r3, #0]
}
 80127f2:	bf00      	nop
 80127f4:	46bd      	mov	sp, r7
 80127f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fa:	4770      	bx	lr
 80127fc:	20004acc 	.word	0x20004acc

08012800 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8012804:	4b06      	ldr	r3, [pc, #24]	; (8012820 <Receive_Notification_From_M0+0x20>)
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	3301      	adds	r3, #1
 801280a:	4a05      	ldr	r2, [pc, #20]	; (8012820 <Receive_Notification_From_M0+0x20>)
 801280c:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 801280e:	4b05      	ldr	r3, [pc, #20]	; (8012824 <Receive_Notification_From_M0+0x24>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	2101      	movs	r1, #1
 8012814:	4618      	mov	r0, r3
 8012816:	f7fb fb0f 	bl	800de38 <osThreadFlagsSet>
}
 801281a:	bf00      	nop
 801281c:	bd80      	pop	{r7, pc}
 801281e:	bf00      	nop
 8012820:	20004ac8 	.word	0x20004ac8
 8012824:	20004ad0 	.word	0x20004ad0

08012828 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 801282c:	22ff      	movs	r2, #255	; 0xff
 801282e:	2100      	movs	r1, #0
 8012830:	4812      	ldr	r0, [pc, #72]	; (801287c <Send_CLI_To_M0+0x54>)
 8012832:	f001 f8ea 	bl	8013a0a <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8012836:	4b12      	ldr	r3, [pc, #72]	; (8012880 <Send_CLI_To_M0+0x58>)
 8012838:	881b      	ldrh	r3, [r3, #0]
 801283a:	b29b      	uxth	r3, r3
 801283c:	461a      	mov	r2, r3
 801283e:	4911      	ldr	r1, [pc, #68]	; (8012884 <Send_CLI_To_M0+0x5c>)
 8012840:	480e      	ldr	r0, [pc, #56]	; (801287c <Send_CLI_To_M0+0x54>)
 8012842:	f001 f8d7 	bl	80139f4 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8012846:	4b0e      	ldr	r3, [pc, #56]	; (8012880 <Send_CLI_To_M0+0x58>)
 8012848:	881b      	ldrh	r3, [r3, #0]
 801284a:	b29b      	uxth	r3, r3
 801284c:	b2da      	uxtb	r2, r3
 801284e:	4b0e      	ldr	r3, [pc, #56]	; (8012888 <Send_CLI_To_M0+0x60>)
 8012850:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8012852:	4b0d      	ldr	r3, [pc, #52]	; (8012888 <Send_CLI_To_M0+0x60>)
 8012854:	2200      	movs	r2, #0
 8012856:	725a      	strb	r2, [r3, #9]
 8012858:	2200      	movs	r2, #0
 801285a:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 801285c:	4b0b      	ldr	r3, [pc, #44]	; (801288c <Send_CLI_To_M0+0x64>)
 801285e:	2200      	movs	r2, #0
 8012860:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8012862:	4b07      	ldr	r3, [pc, #28]	; (8012880 <Send_CLI_To_M0+0x58>)
 8012864:	2200      	movs	r2, #0
 8012866:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8012868:	f44f 7280 	mov.w	r2, #256	; 0x100
 801286c:	2100      	movs	r1, #0
 801286e:	4805      	ldr	r0, [pc, #20]	; (8012884 <Send_CLI_To_M0+0x5c>)
 8012870:	f001 f8cb 	bl	8013a0a <memset>

  TL_CLI_SendCmd();
 8012874:	f7f9 fe74 	bl	800c560 <TL_CLI_SendCmd>
}
 8012878:	bf00      	nop
 801287a:	bd80      	pop	{r7, pc}
 801287c:	20030a58 	.word	0x20030a58
 8012880:	20004abc 	.word	0x20004abc
 8012884:	200049bc 	.word	0x200049bc
 8012888:	20030a4c 	.word	0x20030a4c
 801288c:	20004abe 	.word	0x20004abe

08012890 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8012894:	f7f9 fe80 	bl	800c598 <TL_THREAD_CliSendAck>
}
 8012898:	bf00      	nop
 801289a:	bd80      	pop	{r7, pc}

0801289c <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 80128a0:	4a04      	ldr	r2, [pc, #16]	; (80128b4 <APP_THREAD_Init_UART_CLI+0x18>)
 80128a2:	2100      	movs	r1, #0
 80128a4:	4804      	ldr	r0, [pc, #16]	; (80128b8 <APP_THREAD_Init_UART_CLI+0x1c>)
 80128a6:	f7fb fa21 	bl	800dcec <osThreadNew>
 80128aa:	4602      	mov	r2, r0
 80128ac:	4b03      	ldr	r3, [pc, #12]	; (80128bc <APP_THREAD_Init_UART_CLI+0x20>)
 80128ae:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 80128b0:	bf00      	nop
 80128b2:	bd80      	pop	{r7, pc}
 80128b4:	08013f40 	.word	0x08013f40
 80128b8:	080122c7 	.word	0x080122c7
 80128bc:	20004ad4 	.word	0x20004ad4

080128c0 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 80128c4:	4b06      	ldr	r3, [pc, #24]	; (80128e0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80128c6:	4a07      	ldr	r2, [pc, #28]	; (80128e4 <APP_THREAD_TL_THREAD_INIT+0x24>)
 80128c8:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 80128ca:	4b05      	ldr	r3, [pc, #20]	; (80128e0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80128cc:	4a06      	ldr	r2, [pc, #24]	; (80128e8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80128ce:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 80128d0:	4b03      	ldr	r3, [pc, #12]	; (80128e0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80128d2:	4a06      	ldr	r2, [pc, #24]	; (80128ec <APP_THREAD_TL_THREAD_INIT+0x2c>)
 80128d4:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 80128d6:	4802      	ldr	r0, [pc, #8]	; (80128e0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80128d8:	f7f9 fe18 	bl	800c50c <TL_THREAD_Init>
}
 80128dc:	bf00      	nop
 80128de:	bd80      	pop	{r7, pc}
 80128e0:	200300d4 	.word	0x200300d4
 80128e4:	20030834 	.word	0x20030834
 80128e8:	20030940 	.word	0x20030940
 80128ec:	20030a4c 	.word	0x20030a4c

080128f0 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b084      	sub	sp, #16
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	7adb      	ldrb	r3, [r3, #11]
 8012900:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	330c      	adds	r3, #12
 8012906:	4906      	ldr	r1, [pc, #24]	; (8012920 <TL_THREAD_CliNotReceived+0x30>)
 8012908:	4618      	mov	r0, r3
 801290a:	f7ed fc39 	bl	8000180 <strcmp>
 801290e:	4603      	mov	r3, r0
 8012910:	2b00      	cmp	r3, #0
 8012912:	d101      	bne.n	8012918 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8012914:	f7ff ffbc 	bl	8012890 <Send_CLI_Ack_For_OT>
  }
}
 8012918:	bf00      	nop
 801291a:	3710      	adds	r7, #16
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}
 8012920:	08013dc4 	.word	0x08013dc4

08012924 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8012928:	4b09      	ldr	r3, [pc, #36]	; (8012950 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d00d      	beq.n	801294c <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8012930:	4b07      	ldr	r3, [pc, #28]	; (8012950 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	2b01      	cmp	r3, #1
 8012936:	d904      	bls.n	8012942 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8012938:	2100      	movs	r1, #0
 801293a:	2000      	movs	r0, #0
 801293c:	f7ff faf8 	bl	8011f30 <APP_THREAD_Error>
 8012940:	e001      	b.n	8012946 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8012942:	f7fa fd47 	bl	800d3d4 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8012946:	4b02      	ldr	r3, [pc, #8]	; (8012950 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8012948:	2200      	movs	r2, #0
 801294a:	601a      	str	r2, [r3, #0]
  }
}
 801294c:	bf00      	nop
 801294e:	bd80      	pop	{r7, pc}
 8012950:	20004ac8 	.word	0x20004ac8

08012954 <LL_PWR_EnableBootC2>:
{
 8012954:	b480      	push	{r7}
 8012956:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8012958:	4b05      	ldr	r3, [pc, #20]	; (8012970 <LL_PWR_EnableBootC2+0x1c>)
 801295a:	68db      	ldr	r3, [r3, #12]
 801295c:	4a04      	ldr	r2, [pc, #16]	; (8012970 <LL_PWR_EnableBootC2+0x1c>)
 801295e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012962:	60d3      	str	r3, [r2, #12]
}
 8012964:	bf00      	nop
 8012966:	46bd      	mov	sp, r7
 8012968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296c:	4770      	bx	lr
 801296e:	bf00      	nop
 8012970:	58000400 	.word	0x58000400

08012974 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8012974:	b480      	push	{r7}
 8012976:	b083      	sub	sp, #12
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 801297c:	4b06      	ldr	r3, [pc, #24]	; (8012998 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801297e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8012982:	4905      	ldr	r1, [pc, #20]	; (8012998 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	4313      	orrs	r3, r2
 8012988:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 801298c:	bf00      	nop
 801298e:	370c      	adds	r7, #12
 8012990:	46bd      	mov	sp, r7
 8012992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012996:	4770      	bx	lr
 8012998:	58000800 	.word	0x58000800

0801299c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 801299c:	b480      	push	{r7}
 801299e:	b083      	sub	sp, #12
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80129a4:	4b05      	ldr	r3, [pc, #20]	; (80129bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80129a6:	6a1a      	ldr	r2, [r3, #32]
 80129a8:	4904      	ldr	r1, [pc, #16]	; (80129bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	4313      	orrs	r3, r2
 80129ae:	620b      	str	r3, [r1, #32]
}
 80129b0:	bf00      	nop
 80129b2:	370c      	adds	r7, #12
 80129b4:	46bd      	mov	sp, r7
 80129b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ba:	4770      	bx	lr
 80129bc:	58000800 	.word	0x58000800

080129c0 <LL_AHB3_GRP1_EnableClock>:
{
 80129c0:	b480      	push	{r7}
 80129c2:	b085      	sub	sp, #20
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80129c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80129cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80129ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	4313      	orrs	r3, r2
 80129d6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80129d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80129dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	4013      	ands	r3, r2
 80129e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80129e4:	68fb      	ldr	r3, [r7, #12]
}
 80129e6:	bf00      	nop
 80129e8:	3714      	adds	r7, #20
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr

080129f2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80129f2:	b480      	push	{r7}
 80129f4:	b085      	sub	sp, #20
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80129fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80129fe:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8012a02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	4313      	orrs	r3, r2
 8012a0a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8012a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012a12:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	4013      	ands	r3, r2
 8012a1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012a1c:	68fb      	ldr	r3, [r7, #12]
}
 8012a1e:	bf00      	nop
 8012a20:	3714      	adds	r7, #20
 8012a22:	46bd      	mov	sp, r7
 8012a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a28:	4770      	bx	lr

08012a2a <LL_C1_IPCC_EnableIT_TXF>:
{
 8012a2a:	b480      	push	{r7}
 8012a2c:	b083      	sub	sp, #12
 8012a2e:	af00      	add	r7, sp, #0
 8012a30:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	601a      	str	r2, [r3, #0]
}
 8012a3e:	bf00      	nop
 8012a40:	370c      	adds	r7, #12
 8012a42:	46bd      	mov	sp, r7
 8012a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a48:	4770      	bx	lr

08012a4a <LL_C1_IPCC_EnableIT_RXO>:
{
 8012a4a:	b480      	push	{r7}
 8012a4c:	b083      	sub	sp, #12
 8012a4e:	af00      	add	r7, sp, #0
 8012a50:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	f043 0201 	orr.w	r2, r3, #1
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	601a      	str	r2, [r3, #0]
}
 8012a5e:	bf00      	nop
 8012a60:	370c      	adds	r7, #12
 8012a62:	46bd      	mov	sp, r7
 8012a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a68:	4770      	bx	lr

08012a6a <LL_C1_IPCC_EnableTransmitChannel>:
{
 8012a6a:	b480      	push	{r7}
 8012a6c:	b083      	sub	sp, #12
 8012a6e:	af00      	add	r7, sp, #0
 8012a70:	6078      	str	r0, [r7, #4]
 8012a72:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	685a      	ldr	r2, [r3, #4]
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	041b      	lsls	r3, r3, #16
 8012a7c:	43db      	mvns	r3, r3
 8012a7e:	401a      	ands	r2, r3
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	605a      	str	r2, [r3, #4]
}
 8012a84:	bf00      	nop
 8012a86:	370c      	adds	r7, #12
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8e:	4770      	bx	lr

08012a90 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8012a90:	b480      	push	{r7}
 8012a92:	b083      	sub	sp, #12
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	685a      	ldr	r2, [r3, #4]
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	041b      	lsls	r3, r3, #16
 8012aa2:	431a      	orrs	r2, r3
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	605a      	str	r2, [r3, #4]
}
 8012aa8:	bf00      	nop
 8012aaa:	370c      	adds	r7, #12
 8012aac:	46bd      	mov	sp, r7
 8012aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab2:	4770      	bx	lr

08012ab4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b083      	sub	sp, #12
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
 8012abc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	685a      	ldr	r2, [r3, #4]
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	43db      	mvns	r3, r3
 8012ac6:	401a      	ands	r2, r3
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	605a      	str	r2, [r3, #4]
}
 8012acc:	bf00      	nop
 8012ace:	370c      	adds	r7, #12
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad6:	4770      	bx	lr

08012ad8 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8012ad8:	b480      	push	{r7}
 8012ada:	b083      	sub	sp, #12
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
 8012ae0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	685a      	ldr	r2, [r3, #4]
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	431a      	orrs	r2, r3
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	605a      	str	r2, [r3, #4]
}
 8012aee:	bf00      	nop
 8012af0:	370c      	adds	r7, #12
 8012af2:	46bd      	mov	sp, r7
 8012af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af8:	4770      	bx	lr

08012afa <LL_C1_IPCC_ClearFlag_CHx>:
{
 8012afa:	b480      	push	{r7}
 8012afc:	b083      	sub	sp, #12
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	6078      	str	r0, [r7, #4]
 8012b02:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	683a      	ldr	r2, [r7, #0]
 8012b08:	609a      	str	r2, [r3, #8]
}
 8012b0a:	bf00      	nop
 8012b0c:	370c      	adds	r7, #12
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b14:	4770      	bx	lr

08012b16 <LL_C1_IPCC_SetFlag_CHx>:
{
 8012b16:	b480      	push	{r7}
 8012b18:	b083      	sub	sp, #12
 8012b1a:	af00      	add	r7, sp, #0
 8012b1c:	6078      	str	r0, [r7, #4]
 8012b1e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	041a      	lsls	r2, r3, #16
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	609a      	str	r2, [r3, #8]
}
 8012b28:	bf00      	nop
 8012b2a:	370c      	adds	r7, #12
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b32:	4770      	bx	lr

08012b34 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8012b34:	b480      	push	{r7}
 8012b36:	b083      	sub	sp, #12
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
 8012b3c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	68da      	ldr	r2, [r3, #12]
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	4013      	ands	r3, r2
 8012b46:	683a      	ldr	r2, [r7, #0]
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d101      	bne.n	8012b50 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	e000      	b.n	8012b52 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8012b50:	2300      	movs	r3, #0
}
 8012b52:	4618      	mov	r0, r3
 8012b54:	370c      	adds	r7, #12
 8012b56:	46bd      	mov	sp, r7
 8012b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5c:	4770      	bx	lr

08012b5e <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8012b5e:	b480      	push	{r7}
 8012b60:	b083      	sub	sp, #12
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	6078      	str	r0, [r7, #4]
 8012b66:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	69da      	ldr	r2, [r3, #28]
 8012b6c:	683b      	ldr	r3, [r7, #0]
 8012b6e:	4013      	ands	r3, r2
 8012b70:	683a      	ldr	r2, [r7, #0]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d101      	bne.n	8012b7a <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8012b76:	2301      	movs	r3, #1
 8012b78:	e000      	b.n	8012b7c <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8012b7a:	2300      	movs	r3, #0
}
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	370c      	adds	r7, #12
 8012b80:	46bd      	mov	sp, r7
 8012b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b86:	4770      	bx	lr

08012b88 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8012b8c:	2102      	movs	r1, #2
 8012b8e:	482a      	ldr	r0, [pc, #168]	; (8012c38 <HW_IPCC_Rx_Handler+0xb0>)
 8012b90:	f7ff ffe5 	bl	8012b5e <LL_C2_IPCC_IsActiveFlag_CHx>
 8012b94:	4603      	mov	r3, r0
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d009      	beq.n	8012bae <HW_IPCC_Rx_Handler+0x26>
 8012b9a:	4b27      	ldr	r3, [pc, #156]	; (8012c38 <HW_IPCC_Rx_Handler+0xb0>)
 8012b9c:	685b      	ldr	r3, [r3, #4]
 8012b9e:	43db      	mvns	r3, r3
 8012ba0:	f003 0302 	and.w	r3, r3, #2
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d002      	beq.n	8012bae <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8012ba8:	f000 f90a 	bl	8012dc0 <HW_IPCC_SYS_EvtHandler>
 8012bac:	e041      	b.n	8012c32 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8012bae:	2104      	movs	r1, #4
 8012bb0:	4821      	ldr	r0, [pc, #132]	; (8012c38 <HW_IPCC_Rx_Handler+0xb0>)
 8012bb2:	f7ff ffd4 	bl	8012b5e <LL_C2_IPCC_IsActiveFlag_CHx>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d009      	beq.n	8012bd0 <HW_IPCC_Rx_Handler+0x48>
 8012bbc:	4b1e      	ldr	r3, [pc, #120]	; (8012c38 <HW_IPCC_Rx_Handler+0xb0>)
 8012bbe:	685b      	ldr	r3, [r3, #4]
 8012bc0:	43db      	mvns	r3, r3
 8012bc2:	f003 0304 	and.w	r3, r3, #4
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d002      	beq.n	8012bd0 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8012bca:	f000 f953 	bl	8012e74 <HW_IPCC_THREAD_NotEvtHandler>
 8012bce:	e030      	b.n	8012c32 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8012bd0:	2110      	movs	r1, #16
 8012bd2:	4819      	ldr	r0, [pc, #100]	; (8012c38 <HW_IPCC_Rx_Handler+0xb0>)
 8012bd4:	f7ff ffc3 	bl	8012b5e <LL_C2_IPCC_IsActiveFlag_CHx>
 8012bd8:	4603      	mov	r3, r0
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d009      	beq.n	8012bf2 <HW_IPCC_Rx_Handler+0x6a>
 8012bde:	4b16      	ldr	r3, [pc, #88]	; (8012c38 <HW_IPCC_Rx_Handler+0xb0>)
 8012be0:	685b      	ldr	r3, [r3, #4]
 8012be2:	43db      	mvns	r3, r3
 8012be4:	f003 0310 	and.w	r3, r3, #16
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d002      	beq.n	8012bf2 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8012bec:	f000 f94e 	bl	8012e8c <HW_IPCC_THREAD_CliNotEvtHandler>
 8012bf0:	e01f      	b.n	8012c32 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8012bf2:	2101      	movs	r1, #1
 8012bf4:	4810      	ldr	r0, [pc, #64]	; (8012c38 <HW_IPCC_Rx_Handler+0xb0>)
 8012bf6:	f7ff ffb2 	bl	8012b5e <LL_C2_IPCC_IsActiveFlag_CHx>
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d008      	beq.n	8012c12 <HW_IPCC_Rx_Handler+0x8a>
 8012c00:	4b0d      	ldr	r3, [pc, #52]	; (8012c38 <HW_IPCC_Rx_Handler+0xb0>)
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	f003 0301 	and.w	r3, r3, #1
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d102      	bne.n	8012c12 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8012c0c:	f000 f89c 	bl	8012d48 <HW_IPCC_BLE_EvtHandler>
 8012c10:	e00f      	b.n	8012c32 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8012c12:	2108      	movs	r1, #8
 8012c14:	4808      	ldr	r0, [pc, #32]	; (8012c38 <HW_IPCC_Rx_Handler+0xb0>)
 8012c16:	f7ff ffa2 	bl	8012b5e <LL_C2_IPCC_IsActiveFlag_CHx>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d009      	beq.n	8012c34 <HW_IPCC_Rx_Handler+0xac>
 8012c20:	4b05      	ldr	r3, [pc, #20]	; (8012c38 <HW_IPCC_Rx_Handler+0xb0>)
 8012c22:	685b      	ldr	r3, [r3, #4]
 8012c24:	43db      	mvns	r3, r3
 8012c26:	f003 0308 	and.w	r3, r3, #8
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d002      	beq.n	8012c34 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8012c2e:	f000 f979 	bl	8012f24 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8012c32:	bf00      	nop
 8012c34:	bf00      	nop
}
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	58000c00 	.word	0x58000c00

08012c3c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8012c40:	2102      	movs	r1, #2
 8012c42:	482b      	ldr	r0, [pc, #172]	; (8012cf0 <HW_IPCC_Tx_Handler+0xb4>)
 8012c44:	f7ff ff76 	bl	8012b34 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d109      	bne.n	8012c62 <HW_IPCC_Tx_Handler+0x26>
 8012c4e:	4b28      	ldr	r3, [pc, #160]	; (8012cf0 <HW_IPCC_Tx_Handler+0xb4>)
 8012c50:	685b      	ldr	r3, [r3, #4]
 8012c52:	43db      	mvns	r3, r3
 8012c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d002      	beq.n	8012c62 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8012c5c:	f000 f8a4 	bl	8012da8 <HW_IPCC_SYS_CmdEvtHandler>
 8012c60:	e042      	b.n	8012ce8 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8012c62:	2104      	movs	r1, #4
 8012c64:	4822      	ldr	r0, [pc, #136]	; (8012cf0 <HW_IPCC_Tx_Handler+0xb4>)
 8012c66:	f7ff ff65 	bl	8012b34 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d109      	bne.n	8012c84 <HW_IPCC_Tx_Handler+0x48>
 8012c70:	4b1f      	ldr	r3, [pc, #124]	; (8012cf0 <HW_IPCC_Tx_Handler+0xb4>)
 8012c72:	685b      	ldr	r3, [r3, #4]
 8012c74:	43db      	mvns	r3, r3
 8012c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d002      	beq.n	8012c84 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8012c7e:	f000 f8ed 	bl	8012e5c <HW_IPCC_OT_CmdEvtHandler>
 8012c82:	e031      	b.n	8012ce8 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8012c84:	2102      	movs	r1, #2
 8012c86:	481a      	ldr	r0, [pc, #104]	; (8012cf0 <HW_IPCC_Tx_Handler+0xb4>)
 8012c88:	f7ff ff54 	bl	8012b34 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d109      	bne.n	8012ca6 <HW_IPCC_Tx_Handler+0x6a>
 8012c92:	4b17      	ldr	r3, [pc, #92]	; (8012cf0 <HW_IPCC_Tx_Handler+0xb4>)
 8012c94:	685b      	ldr	r3, [r3, #4]
 8012c96:	43db      	mvns	r3, r3
 8012c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d002      	beq.n	8012ca6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8012ca0:	f000 f882 	bl	8012da8 <HW_IPCC_SYS_CmdEvtHandler>
 8012ca4:	e020      	b.n	8012ce8 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8012ca6:	2108      	movs	r1, #8
 8012ca8:	4811      	ldr	r0, [pc, #68]	; (8012cf0 <HW_IPCC_Tx_Handler+0xb4>)
 8012caa:	f7ff ff43 	bl	8012b34 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d109      	bne.n	8012cc8 <HW_IPCC_Tx_Handler+0x8c>
 8012cb4:	4b0e      	ldr	r3, [pc, #56]	; (8012cf0 <HW_IPCC_Tx_Handler+0xb4>)
 8012cb6:	685b      	ldr	r3, [r3, #4]
 8012cb8:	43db      	mvns	r3, r3
 8012cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d002      	beq.n	8012cc8 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8012cc2:	f000 f911 	bl	8012ee8 <HW_IPCC_MM_FreeBufHandler>
 8012cc6:	e00f      	b.n	8012ce8 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8012cc8:	2120      	movs	r1, #32
 8012cca:	4809      	ldr	r0, [pc, #36]	; (8012cf0 <HW_IPCC_Tx_Handler+0xb4>)
 8012ccc:	f7ff ff32 	bl	8012b34 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d109      	bne.n	8012cea <HW_IPCC_Tx_Handler+0xae>
 8012cd6:	4b06      	ldr	r3, [pc, #24]	; (8012cf0 <HW_IPCC_Tx_Handler+0xb4>)
 8012cd8:	685b      	ldr	r3, [r3, #4]
 8012cda:	43db      	mvns	r3, r3
 8012cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d002      	beq.n	8012cea <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8012ce4:	f000 f83c 	bl	8012d60 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8012ce8:	bf00      	nop
 8012cea:	bf00      	nop
}
 8012cec:	bd80      	pop	{r7, pc}
 8012cee:	bf00      	nop
 8012cf0:	58000c00 	.word	0x58000c00

08012cf4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8012cf8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012cfc:	f7ff fe79 	bl	80129f2 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8012d00:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012d04:	f7ff fe36 	bl	8012974 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8012d08:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012d0c:	f7ff fe46 	bl	801299c <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8012d10:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8012d12:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8012d14:	f7ff fe1e 	bl	8012954 <LL_PWR_EnableBootC2>

  return;
 8012d18:	bf00      	nop
}
 8012d1a:	bd80      	pop	{r7, pc}

08012d1c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8012d20:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012d24:	f7ff fe4c 	bl	80129c0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8012d28:	4806      	ldr	r0, [pc, #24]	; (8012d44 <HW_IPCC_Init+0x28>)
 8012d2a:	f7ff fe8e 	bl	8012a4a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8012d2e:	4805      	ldr	r0, [pc, #20]	; (8012d44 <HW_IPCC_Init+0x28>)
 8012d30:	f7ff fe7b 	bl	8012a2a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8012d34:	202c      	movs	r0, #44	; 0x2c
 8012d36:	f7f1 fca4 	bl	8004682 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8012d3a:	202d      	movs	r0, #45	; 0x2d
 8012d3c:	f7f1 fca1 	bl	8004682 <HAL_NVIC_EnableIRQ>

  return;
 8012d40:	bf00      	nop
}
 8012d42:	bd80      	pop	{r7, pc}
 8012d44:	58000c00 	.word	0x58000c00

08012d48 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8012d4c:	f7f9 fb26 	bl	800c39c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8012d50:	2101      	movs	r1, #1
 8012d52:	4802      	ldr	r0, [pc, #8]	; (8012d5c <HW_IPCC_BLE_EvtHandler+0x14>)
 8012d54:	f7ff fed1 	bl	8012afa <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012d58:	bf00      	nop
}
 8012d5a:	bd80      	pop	{r7, pc}
 8012d5c:	58000c00 	.word	0x58000c00

08012d60 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8012d64:	2120      	movs	r1, #32
 8012d66:	4803      	ldr	r0, [pc, #12]	; (8012d74 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8012d68:	f7ff fe92 	bl	8012a90 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8012d6c:	f7f9 fb46 	bl	800c3fc <HW_IPCC_BLE_AclDataAckNot>

  return;
 8012d70:	bf00      	nop
}
 8012d72:	bd80      	pop	{r7, pc}
 8012d74:	58000c00 	.word	0x58000c00

08012d78 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012d7c:	2102      	movs	r1, #2
 8012d7e:	4802      	ldr	r0, [pc, #8]	; (8012d88 <HW_IPCC_SYS_Init+0x10>)
 8012d80:	f7ff fe98 	bl	8012ab4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012d84:	bf00      	nop
}
 8012d86:	bd80      	pop	{r7, pc}
 8012d88:	58000c00 	.word	0x58000c00

08012d8c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012d90:	2102      	movs	r1, #2
 8012d92:	4804      	ldr	r0, [pc, #16]	; (8012da4 <HW_IPCC_SYS_SendCmd+0x18>)
 8012d94:	f7ff febf 	bl	8012b16 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012d98:	2102      	movs	r1, #2
 8012d9a:	4802      	ldr	r0, [pc, #8]	; (8012da4 <HW_IPCC_SYS_SendCmd+0x18>)
 8012d9c:	f7ff fe65 	bl	8012a6a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8012da0:	bf00      	nop
}
 8012da2:	bd80      	pop	{r7, pc}
 8012da4:	58000c00 	.word	0x58000c00

08012da8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012dac:	2102      	movs	r1, #2
 8012dae:	4803      	ldr	r0, [pc, #12]	; (8012dbc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8012db0:	f7ff fe6e 	bl	8012a90 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8012db4:	f7f9 fb72 	bl	800c49c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8012db8:	bf00      	nop
}
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	58000c00 	.word	0x58000c00

08012dc0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8012dc4:	f7f9 fb80 	bl	800c4c8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012dc8:	2102      	movs	r1, #2
 8012dca:	4802      	ldr	r0, [pc, #8]	; (8012dd4 <HW_IPCC_SYS_EvtHandler+0x14>)
 8012dcc:	f7ff fe95 	bl	8012afa <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012dd0:	bf00      	nop
}
 8012dd2:	bd80      	pop	{r7, pc}
 8012dd4:	58000c00 	.word	0x58000c00

08012dd8 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8012ddc:	2104      	movs	r1, #4
 8012dde:	4804      	ldr	r0, [pc, #16]	; (8012df0 <HW_IPCC_THREAD_Init+0x18>)
 8012de0:	f7ff fe68 	bl	8012ab4 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8012de4:	2110      	movs	r1, #16
 8012de6:	4802      	ldr	r0, [pc, #8]	; (8012df0 <HW_IPCC_THREAD_Init+0x18>)
 8012de8:	f7ff fe64 	bl	8012ab4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012dec:	bf00      	nop
}
 8012dee:	bd80      	pop	{r7, pc}
 8012df0:	58000c00 	.word	0x58000c00

08012df4 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8012df8:	2104      	movs	r1, #4
 8012dfa:	4804      	ldr	r0, [pc, #16]	; (8012e0c <HW_IPCC_OT_SendCmd+0x18>)
 8012dfc:	f7ff fe8b 	bl	8012b16 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8012e00:	2104      	movs	r1, #4
 8012e02:	4802      	ldr	r0, [pc, #8]	; (8012e0c <HW_IPCC_OT_SendCmd+0x18>)
 8012e04:	f7ff fe31 	bl	8012a6a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8012e08:	bf00      	nop
}
 8012e0a:	bd80      	pop	{r7, pc}
 8012e0c:	58000c00 	.word	0x58000c00

08012e10 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8012e14:	2110      	movs	r1, #16
 8012e16:	4802      	ldr	r0, [pc, #8]	; (8012e20 <HW_IPCC_CLI_SendCmd+0x10>)
 8012e18:	f7ff fe7d 	bl	8012b16 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012e1c:	bf00      	nop
}
 8012e1e:	bd80      	pop	{r7, pc}
 8012e20:	58000c00 	.word	0x58000c00

08012e24 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8012e28:	2104      	movs	r1, #4
 8012e2a:	4804      	ldr	r0, [pc, #16]	; (8012e3c <HW_IPCC_THREAD_SendAck+0x18>)
 8012e2c:	f7ff fe65 	bl	8012afa <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8012e30:	2104      	movs	r1, #4
 8012e32:	4802      	ldr	r0, [pc, #8]	; (8012e3c <HW_IPCC_THREAD_SendAck+0x18>)
 8012e34:	f7ff fe3e 	bl	8012ab4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012e38:	bf00      	nop
}
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	58000c00 	.word	0x58000c00

08012e40 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8012e44:	2110      	movs	r1, #16
 8012e46:	4804      	ldr	r0, [pc, #16]	; (8012e58 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8012e48:	f7ff fe57 	bl	8012afa <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8012e4c:	2110      	movs	r1, #16
 8012e4e:	4802      	ldr	r0, [pc, #8]	; (8012e58 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8012e50:	f7ff fe30 	bl	8012ab4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012e54:	bf00      	nop
}
 8012e56:	bd80      	pop	{r7, pc}
 8012e58:	58000c00 	.word	0x58000c00

08012e5c <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8012e60:	2104      	movs	r1, #4
 8012e62:	4803      	ldr	r0, [pc, #12]	; (8012e70 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8012e64:	f7ff fe14 	bl	8012a90 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8012e68:	f7f9 fba4 	bl	800c5b4 <HW_IPCC_OT_CmdEvtNot>

  return;
 8012e6c:	bf00      	nop
}
 8012e6e:	bd80      	pop	{r7, pc}
 8012e70:	58000c00 	.word	0x58000c00

08012e74 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8012e78:	2104      	movs	r1, #4
 8012e7a:	4803      	ldr	r0, [pc, #12]	; (8012e88 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8012e7c:	f7ff fe2c 	bl	8012ad8 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8012e80:	f7f9 fba4 	bl	800c5cc <HW_IPCC_THREAD_EvtNot>

  return;
 8012e84:	bf00      	nop
}
 8012e86:	bd80      	pop	{r7, pc}
 8012e88:	58000c00 	.word	0x58000c00

08012e8c <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8012e90:	2110      	movs	r1, #16
 8012e92:	4803      	ldr	r0, [pc, #12]	; (8012ea0 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8012e94:	f7ff fe20 	bl	8012ad8 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8012e98:	f7f9 fba4 	bl	800c5e4 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8012e9c:	bf00      	nop
}
 8012e9e:	bd80      	pop	{r7, pc}
 8012ea0:	58000c00 	.word	0x58000c00

08012ea4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8012eac:	2108      	movs	r1, #8
 8012eae:	480c      	ldr	r0, [pc, #48]	; (8012ee0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012eb0:	f7ff fe40 	bl	8012b34 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d007      	beq.n	8012eca <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8012eba:	4a0a      	ldr	r2, [pc, #40]	; (8012ee4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012ec0:	2108      	movs	r1, #8
 8012ec2:	4807      	ldr	r0, [pc, #28]	; (8012ee0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012ec4:	f7ff fdd1 	bl	8012a6a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8012ec8:	e006      	b.n	8012ed8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012ece:	2108      	movs	r1, #8
 8012ed0:	4803      	ldr	r0, [pc, #12]	; (8012ee0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012ed2:	f7ff fe20 	bl	8012b16 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8012ed6:	bf00      	nop
}
 8012ed8:	3708      	adds	r7, #8
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}
 8012ede:	bf00      	nop
 8012ee0:	58000c00 	.word	0x58000c00
 8012ee4:	20004bb4 	.word	0x20004bb4

08012ee8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012eec:	2108      	movs	r1, #8
 8012eee:	4806      	ldr	r0, [pc, #24]	; (8012f08 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012ef0:	f7ff fdce 	bl	8012a90 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8012ef4:	4b05      	ldr	r3, [pc, #20]	; (8012f0c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012efa:	2108      	movs	r1, #8
 8012efc:	4802      	ldr	r0, [pc, #8]	; (8012f08 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012efe:	f7ff fe0a 	bl	8012b16 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012f02:	bf00      	nop
}
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	58000c00 	.word	0x58000c00
 8012f0c:	20004bb4 	.word	0x20004bb4

08012f10 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012f14:	2108      	movs	r1, #8
 8012f16:	4802      	ldr	r0, [pc, #8]	; (8012f20 <HW_IPCC_TRACES_Init+0x10>)
 8012f18:	f7ff fdcc 	bl	8012ab4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012f1c:	bf00      	nop
}
 8012f1e:	bd80      	pop	{r7, pc}
 8012f20:	58000c00 	.word	0x58000c00

08012f24 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8012f28:	f7f9 fbee 	bl	800c708 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012f2c:	2108      	movs	r1, #8
 8012f2e:	4802      	ldr	r0, [pc, #8]	; (8012f38 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8012f30:	f7ff fde3 	bl	8012afa <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012f34:	bf00      	nop
}
 8012f36:	bd80      	pop	{r7, pc}
 8012f38:	58000c00 	.word	0x58000c00

08012f3c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8012f40:	2200      	movs	r2, #0
 8012f42:	4912      	ldr	r1, [pc, #72]	; (8012f8c <MX_USB_Device_Init+0x50>)
 8012f44:	4812      	ldr	r0, [pc, #72]	; (8012f90 <MX_USB_Device_Init+0x54>)
 8012f46:	f7f7 fef3 	bl	800ad30 <USBD_Init>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d001      	beq.n	8012f54 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012f50:	f7ef f984 	bl	800225c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012f54:	490f      	ldr	r1, [pc, #60]	; (8012f94 <MX_USB_Device_Init+0x58>)
 8012f56:	480e      	ldr	r0, [pc, #56]	; (8012f90 <MX_USB_Device_Init+0x54>)
 8012f58:	f7f7 ff1a 	bl	800ad90 <USBD_RegisterClass>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d001      	beq.n	8012f66 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012f62:	f7ef f97b 	bl	800225c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012f66:	490c      	ldr	r1, [pc, #48]	; (8012f98 <MX_USB_Device_Init+0x5c>)
 8012f68:	4809      	ldr	r0, [pc, #36]	; (8012f90 <MX_USB_Device_Init+0x54>)
 8012f6a:	f7f7 fe3b 	bl	800abe4 <USBD_CDC_RegisterInterface>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d001      	beq.n	8012f78 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012f74:	f7ef f972 	bl	800225c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012f78:	4805      	ldr	r0, [pc, #20]	; (8012f90 <MX_USB_Device_Init+0x54>)
 8012f7a:	f7f7 ff30 	bl	800adde <USBD_Start>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d001      	beq.n	8012f88 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012f84:	f7ef f96a 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012f88:	bf00      	nop
 8012f8a:	bd80      	pop	{r7, pc}
 8012f8c:	20000170 	.word	0x20000170
 8012f90:	20005044 	.word	0x20005044
 8012f94:	20000034 	.word	0x20000034
 8012f98:	2000015c 	.word	0x2000015c

08012f9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	4905      	ldr	r1, [pc, #20]	; (8012fb8 <CDC_Init_FS+0x1c>)
 8012fa4:	4805      	ldr	r0, [pc, #20]	; (8012fbc <CDC_Init_FS+0x20>)
 8012fa6:	f7f7 fe32 	bl	800ac0e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012faa:	4905      	ldr	r1, [pc, #20]	; (8012fc0 <CDC_Init_FS+0x24>)
 8012fac:	4803      	ldr	r0, [pc, #12]	; (8012fbc <CDC_Init_FS+0x20>)
 8012fae:	f7f7 fe4c 	bl	800ac4a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012fb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	bd80      	pop	{r7, pc}
 8012fb8:	20005b14 	.word	0x20005b14
 8012fbc:	20005044 	.word	0x20005044
 8012fc0:	20005314 	.word	0x20005314

08012fc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012fc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012fca:	4618      	mov	r0, r3
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd2:	4770      	bx	lr

08012fd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012fd4:	b480      	push	{r7}
 8012fd6:	b083      	sub	sp, #12
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	4603      	mov	r3, r0
 8012fdc:	6039      	str	r1, [r7, #0]
 8012fde:	71fb      	strb	r3, [r7, #7]
 8012fe0:	4613      	mov	r3, r2
 8012fe2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012fe4:	79fb      	ldrb	r3, [r7, #7]
 8012fe6:	2b23      	cmp	r3, #35	; 0x23
 8012fe8:	d84a      	bhi.n	8013080 <CDC_Control_FS+0xac>
 8012fea:	a201      	add	r2, pc, #4	; (adr r2, 8012ff0 <CDC_Control_FS+0x1c>)
 8012fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ff0:	08013081 	.word	0x08013081
 8012ff4:	08013081 	.word	0x08013081
 8012ff8:	08013081 	.word	0x08013081
 8012ffc:	08013081 	.word	0x08013081
 8013000:	08013081 	.word	0x08013081
 8013004:	08013081 	.word	0x08013081
 8013008:	08013081 	.word	0x08013081
 801300c:	08013081 	.word	0x08013081
 8013010:	08013081 	.word	0x08013081
 8013014:	08013081 	.word	0x08013081
 8013018:	08013081 	.word	0x08013081
 801301c:	08013081 	.word	0x08013081
 8013020:	08013081 	.word	0x08013081
 8013024:	08013081 	.word	0x08013081
 8013028:	08013081 	.word	0x08013081
 801302c:	08013081 	.word	0x08013081
 8013030:	08013081 	.word	0x08013081
 8013034:	08013081 	.word	0x08013081
 8013038:	08013081 	.word	0x08013081
 801303c:	08013081 	.word	0x08013081
 8013040:	08013081 	.word	0x08013081
 8013044:	08013081 	.word	0x08013081
 8013048:	08013081 	.word	0x08013081
 801304c:	08013081 	.word	0x08013081
 8013050:	08013081 	.word	0x08013081
 8013054:	08013081 	.word	0x08013081
 8013058:	08013081 	.word	0x08013081
 801305c:	08013081 	.word	0x08013081
 8013060:	08013081 	.word	0x08013081
 8013064:	08013081 	.word	0x08013081
 8013068:	08013081 	.word	0x08013081
 801306c:	08013081 	.word	0x08013081
 8013070:	08013081 	.word	0x08013081
 8013074:	08013081 	.word	0x08013081
 8013078:	08013081 	.word	0x08013081
 801307c:	08013081 	.word	0x08013081
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013080:	bf00      	nop
  }

  return (USBD_OK);
 8013082:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013084:	4618      	mov	r0, r3
 8013086:	370c      	adds	r7, #12
 8013088:	46bd      	mov	sp, r7
 801308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308e:	4770      	bx	lr

08013090 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b082      	sub	sp, #8
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
 8013098:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801309a:	6879      	ldr	r1, [r7, #4]
 801309c:	4805      	ldr	r0, [pc, #20]	; (80130b4 <CDC_Receive_FS+0x24>)
 801309e:	f7f7 fdd4 	bl	800ac4a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80130a2:	4804      	ldr	r0, [pc, #16]	; (80130b4 <CDC_Receive_FS+0x24>)
 80130a4:	f7f7 fe1a 	bl	800acdc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80130a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80130aa:	4618      	mov	r0, r3
 80130ac:	3708      	adds	r7, #8
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}
 80130b2:	bf00      	nop
 80130b4:	20005044 	.word	0x20005044

080130b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b084      	sub	sp, #16
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
 80130c0:	460b      	mov	r3, r1
 80130c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80130c4:	2300      	movs	r3, #0
 80130c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80130c8:	4b0d      	ldr	r3, [pc, #52]	; (8013100 <CDC_Transmit_FS+0x48>)
 80130ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80130ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d001      	beq.n	80130de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80130da:	2301      	movs	r3, #1
 80130dc:	e00b      	b.n	80130f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80130de:	887b      	ldrh	r3, [r7, #2]
 80130e0:	461a      	mov	r2, r3
 80130e2:	6879      	ldr	r1, [r7, #4]
 80130e4:	4806      	ldr	r0, [pc, #24]	; (8013100 <CDC_Transmit_FS+0x48>)
 80130e6:	f7f7 fd92 	bl	800ac0e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80130ea:	4805      	ldr	r0, [pc, #20]	; (8013100 <CDC_Transmit_FS+0x48>)
 80130ec:	f7f7 fdc6 	bl	800ac7c <USBD_CDC_TransmitPacket>
 80130f0:	4603      	mov	r3, r0
 80130f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80130f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3710      	adds	r7, #16
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	bf00      	nop
 8013100:	20005044 	.word	0x20005044

08013104 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013104:	b480      	push	{r7}
 8013106:	b087      	sub	sp, #28
 8013108:	af00      	add	r7, sp, #0
 801310a:	60f8      	str	r0, [r7, #12]
 801310c:	60b9      	str	r1, [r7, #8]
 801310e:	4613      	mov	r3, r2
 8013110:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013112:	2300      	movs	r3, #0
 8013114:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013116:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801311a:	4618      	mov	r0, r3
 801311c:	371c      	adds	r7, #28
 801311e:	46bd      	mov	sp, r7
 8013120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013124:	4770      	bx	lr
	...

08013128 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013128:	b480      	push	{r7}
 801312a:	b083      	sub	sp, #12
 801312c:	af00      	add	r7, sp, #0
 801312e:	4603      	mov	r3, r0
 8013130:	6039      	str	r1, [r7, #0]
 8013132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	2212      	movs	r2, #18
 8013138:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801313a:	4b03      	ldr	r3, [pc, #12]	; (8013148 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801313c:	4618      	mov	r0, r3
 801313e:	370c      	adds	r7, #12
 8013140:	46bd      	mov	sp, r7
 8013142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013146:	4770      	bx	lr
 8013148:	2000018c 	.word	0x2000018c

0801314c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801314c:	b480      	push	{r7}
 801314e:	b083      	sub	sp, #12
 8013150:	af00      	add	r7, sp, #0
 8013152:	4603      	mov	r3, r0
 8013154:	6039      	str	r1, [r7, #0]
 8013156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	2204      	movs	r2, #4
 801315c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801315e:	4b03      	ldr	r3, [pc, #12]	; (801316c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8013160:	4618      	mov	r0, r3
 8013162:	370c      	adds	r7, #12
 8013164:	46bd      	mov	sp, r7
 8013166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316a:	4770      	bx	lr
 801316c:	200001a0 	.word	0x200001a0

08013170 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b082      	sub	sp, #8
 8013174:	af00      	add	r7, sp, #0
 8013176:	4603      	mov	r3, r0
 8013178:	6039      	str	r1, [r7, #0]
 801317a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801317c:	79fb      	ldrb	r3, [r7, #7]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d105      	bne.n	801318e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8013182:	683a      	ldr	r2, [r7, #0]
 8013184:	4907      	ldr	r1, [pc, #28]	; (80131a4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8013186:	4808      	ldr	r0, [pc, #32]	; (80131a8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8013188:	f7f8 fdda 	bl	800bd40 <USBD_GetString>
 801318c:	e004      	b.n	8013198 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801318e:	683a      	ldr	r2, [r7, #0]
 8013190:	4904      	ldr	r1, [pc, #16]	; (80131a4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8013192:	4805      	ldr	r0, [pc, #20]	; (80131a8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8013194:	f7f8 fdd4 	bl	800bd40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013198:	4b02      	ldr	r3, [pc, #8]	; (80131a4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801319a:	4618      	mov	r0, r3
 801319c:	3708      	adds	r7, #8
 801319e:	46bd      	mov	sp, r7
 80131a0:	bd80      	pop	{r7, pc}
 80131a2:	bf00      	nop
 80131a4:	20006314 	.word	0x20006314
 80131a8:	08013dc8 	.word	0x08013dc8

080131ac <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b082      	sub	sp, #8
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	4603      	mov	r3, r0
 80131b4:	6039      	str	r1, [r7, #0]
 80131b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80131b8:	683a      	ldr	r2, [r7, #0]
 80131ba:	4904      	ldr	r1, [pc, #16]	; (80131cc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80131bc:	4804      	ldr	r0, [pc, #16]	; (80131d0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80131be:	f7f8 fdbf 	bl	800bd40 <USBD_GetString>
  return USBD_StrDesc;
 80131c2:	4b02      	ldr	r3, [pc, #8]	; (80131cc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3708      	adds	r7, #8
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}
 80131cc:	20006314 	.word	0x20006314
 80131d0:	08013dd4 	.word	0x08013dd4

080131d4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b082      	sub	sp, #8
 80131d8:	af00      	add	r7, sp, #0
 80131da:	4603      	mov	r3, r0
 80131dc:	6039      	str	r1, [r7, #0]
 80131de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	221a      	movs	r2, #26
 80131e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80131e6:	f000 f843 	bl	8013270 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80131ea:	4b02      	ldr	r3, [pc, #8]	; (80131f4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80131ec:	4618      	mov	r0, r3
 80131ee:	3708      	adds	r7, #8
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bd80      	pop	{r7, pc}
 80131f4:	200001a4 	.word	0x200001a4

080131f8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b082      	sub	sp, #8
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	4603      	mov	r3, r0
 8013200:	6039      	str	r1, [r7, #0]
 8013202:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013204:	79fb      	ldrb	r3, [r7, #7]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d105      	bne.n	8013216 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801320a:	683a      	ldr	r2, [r7, #0]
 801320c:	4907      	ldr	r1, [pc, #28]	; (801322c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801320e:	4808      	ldr	r0, [pc, #32]	; (8013230 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013210:	f7f8 fd96 	bl	800bd40 <USBD_GetString>
 8013214:	e004      	b.n	8013220 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8013216:	683a      	ldr	r2, [r7, #0]
 8013218:	4904      	ldr	r1, [pc, #16]	; (801322c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801321a:	4805      	ldr	r0, [pc, #20]	; (8013230 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801321c:	f7f8 fd90 	bl	800bd40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013220:	4b02      	ldr	r3, [pc, #8]	; (801322c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8013222:	4618      	mov	r0, r3
 8013224:	3708      	adds	r7, #8
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}
 801322a:	bf00      	nop
 801322c:	20006314 	.word	0x20006314
 8013230:	08013ddc 	.word	0x08013ddc

08013234 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	4603      	mov	r3, r0
 801323c:	6039      	str	r1, [r7, #0]
 801323e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013240:	79fb      	ldrb	r3, [r7, #7]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d105      	bne.n	8013252 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8013246:	683a      	ldr	r2, [r7, #0]
 8013248:	4907      	ldr	r1, [pc, #28]	; (8013268 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801324a:	4808      	ldr	r0, [pc, #32]	; (801326c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801324c:	f7f8 fd78 	bl	800bd40 <USBD_GetString>
 8013250:	e004      	b.n	801325c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8013252:	683a      	ldr	r2, [r7, #0]
 8013254:	4904      	ldr	r1, [pc, #16]	; (8013268 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8013256:	4805      	ldr	r0, [pc, #20]	; (801326c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8013258:	f7f8 fd72 	bl	800bd40 <USBD_GetString>
  }
  return USBD_StrDesc;
 801325c:	4b02      	ldr	r3, [pc, #8]	; (8013268 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801325e:	4618      	mov	r0, r3
 8013260:	3708      	adds	r7, #8
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}
 8013266:	bf00      	nop
 8013268:	20006314 	.word	0x20006314
 801326c:	08013de8 	.word	0x08013de8

08013270 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013276:	4b0f      	ldr	r3, [pc, #60]	; (80132b4 <Get_SerialNum+0x44>)
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801327c:	4b0e      	ldr	r3, [pc, #56]	; (80132b8 <Get_SerialNum+0x48>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013282:	4b0e      	ldr	r3, [pc, #56]	; (80132bc <Get_SerialNum+0x4c>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013288:	68fa      	ldr	r2, [r7, #12]
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	4413      	add	r3, r2
 801328e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d009      	beq.n	80132aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013296:	2208      	movs	r2, #8
 8013298:	4909      	ldr	r1, [pc, #36]	; (80132c0 <Get_SerialNum+0x50>)
 801329a:	68f8      	ldr	r0, [r7, #12]
 801329c:	f000 f814 	bl	80132c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80132a0:	2204      	movs	r2, #4
 80132a2:	4908      	ldr	r1, [pc, #32]	; (80132c4 <Get_SerialNum+0x54>)
 80132a4:	68b8      	ldr	r0, [r7, #8]
 80132a6:	f000 f80f 	bl	80132c8 <IntToUnicode>
  }
}
 80132aa:	bf00      	nop
 80132ac:	3710      	adds	r7, #16
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}
 80132b2:	bf00      	nop
 80132b4:	1fff7590 	.word	0x1fff7590
 80132b8:	1fff7594 	.word	0x1fff7594
 80132bc:	1fff7598 	.word	0x1fff7598
 80132c0:	200001a6 	.word	0x200001a6
 80132c4:	200001b6 	.word	0x200001b6

080132c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80132c8:	b480      	push	{r7}
 80132ca:	b087      	sub	sp, #28
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	60f8      	str	r0, [r7, #12]
 80132d0:	60b9      	str	r1, [r7, #8]
 80132d2:	4613      	mov	r3, r2
 80132d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80132d6:	2300      	movs	r3, #0
 80132d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80132da:	2300      	movs	r3, #0
 80132dc:	75fb      	strb	r3, [r7, #23]
 80132de:	e027      	b.n	8013330 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	0f1b      	lsrs	r3, r3, #28
 80132e4:	2b09      	cmp	r3, #9
 80132e6:	d80b      	bhi.n	8013300 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	0f1b      	lsrs	r3, r3, #28
 80132ec:	b2da      	uxtb	r2, r3
 80132ee:	7dfb      	ldrb	r3, [r7, #23]
 80132f0:	005b      	lsls	r3, r3, #1
 80132f2:	4619      	mov	r1, r3
 80132f4:	68bb      	ldr	r3, [r7, #8]
 80132f6:	440b      	add	r3, r1
 80132f8:	3230      	adds	r2, #48	; 0x30
 80132fa:	b2d2      	uxtb	r2, r2
 80132fc:	701a      	strb	r2, [r3, #0]
 80132fe:	e00a      	b.n	8013316 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	0f1b      	lsrs	r3, r3, #28
 8013304:	b2da      	uxtb	r2, r3
 8013306:	7dfb      	ldrb	r3, [r7, #23]
 8013308:	005b      	lsls	r3, r3, #1
 801330a:	4619      	mov	r1, r3
 801330c:	68bb      	ldr	r3, [r7, #8]
 801330e:	440b      	add	r3, r1
 8013310:	3237      	adds	r2, #55	; 0x37
 8013312:	b2d2      	uxtb	r2, r2
 8013314:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	011b      	lsls	r3, r3, #4
 801331a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801331c:	7dfb      	ldrb	r3, [r7, #23]
 801331e:	005b      	lsls	r3, r3, #1
 8013320:	3301      	adds	r3, #1
 8013322:	68ba      	ldr	r2, [r7, #8]
 8013324:	4413      	add	r3, r2
 8013326:	2200      	movs	r2, #0
 8013328:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801332a:	7dfb      	ldrb	r3, [r7, #23]
 801332c:	3301      	adds	r3, #1
 801332e:	75fb      	strb	r3, [r7, #23]
 8013330:	7dfa      	ldrb	r2, [r7, #23]
 8013332:	79fb      	ldrb	r3, [r7, #7]
 8013334:	429a      	cmp	r2, r3
 8013336:	d3d3      	bcc.n	80132e0 <IntToUnicode+0x18>
  }
}
 8013338:	bf00      	nop
 801333a:	371c      	adds	r7, #28
 801333c:	46bd      	mov	sp, r7
 801333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013342:	4770      	bx	lr

08013344 <LL_AHB2_GRP1_EnableClock>:
{
 8013344:	b480      	push	{r7}
 8013346:	b085      	sub	sp, #20
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801334c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013350:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013352:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	4313      	orrs	r3, r2
 801335a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801335c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013360:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	4013      	ands	r3, r2
 8013366:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8013368:	68fb      	ldr	r3, [r7, #12]
}
 801336a:	bf00      	nop
 801336c:	3714      	adds	r7, #20
 801336e:	46bd      	mov	sp, r7
 8013370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013374:	4770      	bx	lr

08013376 <LL_APB1_GRP1_EnableClock>:
{
 8013376:	b480      	push	{r7}
 8013378:	b085      	sub	sp, #20
 801337a:	af00      	add	r7, sp, #0
 801337c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801337e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013382:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	4313      	orrs	r3, r2
 801338c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801338e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013392:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	4013      	ands	r3, r2
 8013398:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801339a:	68fb      	ldr	r3, [r7, #12]
}
 801339c:	bf00      	nop
 801339e:	3714      	adds	r7, #20
 80133a0:	46bd      	mov	sp, r7
 80133a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a6:	4770      	bx	lr

080133a8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b088      	sub	sp, #32
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80133b0:	f107 030c 	add.w	r3, r7, #12
 80133b4:	2200      	movs	r2, #0
 80133b6:	601a      	str	r2, [r3, #0]
 80133b8:	605a      	str	r2, [r3, #4]
 80133ba:	609a      	str	r2, [r3, #8]
 80133bc:	60da      	str	r2, [r3, #12]
 80133be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	4a13      	ldr	r2, [pc, #76]	; (8013414 <HAL_PCD_MspInit+0x6c>)
 80133c6:	4293      	cmp	r3, r2
 80133c8:	d120      	bne.n	801340c <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80133ca:	2001      	movs	r0, #1
 80133cc:	f7ff ffba 	bl	8013344 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80133d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80133d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80133d6:	2302      	movs	r3, #2
 80133d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133da:	2300      	movs	r3, #0
 80133dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80133de:	2303      	movs	r3, #3
 80133e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80133e2:	230a      	movs	r3, #10
 80133e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80133e6:	f107 030c 	add.w	r3, r7, #12
 80133ea:	4619      	mov	r1, r3
 80133ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80133f0:	f7f1 fbf8 	bl	8004be4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80133f4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80133f8:	f7ff ffbd 	bl	8013376 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80133fc:	2200      	movs	r2, #0
 80133fe:	2105      	movs	r1, #5
 8013400:	2014      	movs	r0, #20
 8013402:	f7f1 f924 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8013406:	2014      	movs	r0, #20
 8013408:	f7f1 f93b 	bl	8004682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801340c:	bf00      	nop
 801340e:	3720      	adds	r7, #32
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}
 8013414:	40006800 	.word	0x40006800

08013418 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b082      	sub	sp, #8
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f503 730c 	add.w	r3, r3, #560	; 0x230
 801342c:	4619      	mov	r1, r3
 801342e:	4610      	mov	r0, r2
 8013430:	f7f7 fd20 	bl	800ae74 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8013434:	bf00      	nop
 8013436:	3708      	adds	r7, #8
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}

0801343c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b082      	sub	sp, #8
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
 8013444:	460b      	mov	r3, r1
 8013446:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 801344e:	78fb      	ldrb	r3, [r7, #3]
 8013450:	687a      	ldr	r2, [r7, #4]
 8013452:	015b      	lsls	r3, r3, #5
 8013454:	4413      	add	r3, r2
 8013456:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801345a:	681a      	ldr	r2, [r3, #0]
 801345c:	78fb      	ldrb	r3, [r7, #3]
 801345e:	4619      	mov	r1, r3
 8013460:	f7f7 fd5b 	bl	800af1a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8013464:	bf00      	nop
 8013466:	3708      	adds	r7, #8
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}

0801346c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b082      	sub	sp, #8
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
 8013474:	460b      	mov	r3, r1
 8013476:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 801347e:	78fb      	ldrb	r3, [r7, #3]
 8013480:	687a      	ldr	r2, [r7, #4]
 8013482:	015b      	lsls	r3, r3, #5
 8013484:	4413      	add	r3, r2
 8013486:	333c      	adds	r3, #60	; 0x3c
 8013488:	681a      	ldr	r2, [r3, #0]
 801348a:	78fb      	ldrb	r3, [r7, #3]
 801348c:	4619      	mov	r1, r3
 801348e:	f7f7 fda7 	bl	800afe0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8013492:	bf00      	nop
 8013494:	3708      	adds	r7, #8
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}

0801349a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801349a:	b580      	push	{r7, lr}
 801349c:	b082      	sub	sp, #8
 801349e:	af00      	add	r7, sp, #0
 80134a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80134a8:	4618      	mov	r0, r3
 80134aa:	f7f7 febb 	bl	800b224 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80134ae:	bf00      	nop
 80134b0:	3708      	adds	r7, #8
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}

080134b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134b6:	b580      	push	{r7, lr}
 80134b8:	b084      	sub	sp, #16
 80134ba:	af00      	add	r7, sp, #0
 80134bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80134be:	2301      	movs	r3, #1
 80134c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	689b      	ldr	r3, [r3, #8]
 80134c6:	2b02      	cmp	r3, #2
 80134c8:	d001      	beq.n	80134ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80134ca:	f7ee fec7 	bl	800225c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80134d4:	7bfa      	ldrb	r2, [r7, #15]
 80134d6:	4611      	mov	r1, r2
 80134d8:	4618      	mov	r0, r3
 80134da:	f7f7 fe65 	bl	800b1a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7f7 fe11 	bl	800b10c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80134ea:	bf00      	nop
 80134ec:	3710      	adds	r7, #16
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}
	...

080134f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b082      	sub	sp, #8
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013502:	4618      	mov	r0, r3
 8013504:	f7f7 fe60 	bl	800b1c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	699b      	ldr	r3, [r3, #24]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d005      	beq.n	801351c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013510:	4b04      	ldr	r3, [pc, #16]	; (8013524 <HAL_PCD_SuspendCallback+0x30>)
 8013512:	691b      	ldr	r3, [r3, #16]
 8013514:	4a03      	ldr	r2, [pc, #12]	; (8013524 <HAL_PCD_SuspendCallback+0x30>)
 8013516:	f043 0306 	orr.w	r3, r3, #6
 801351a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801351c:	bf00      	nop
 801351e:	3708      	adds	r7, #8
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}
 8013524:	e000ed00 	.word	0xe000ed00

08013528 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	699b      	ldr	r3, [r3, #24]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d007      	beq.n	8013548 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013538:	4b08      	ldr	r3, [pc, #32]	; (801355c <HAL_PCD_ResumeCallback+0x34>)
 801353a:	691b      	ldr	r3, [r3, #16]
 801353c:	4a07      	ldr	r2, [pc, #28]	; (801355c <HAL_PCD_ResumeCallback+0x34>)
 801353e:	f023 0306 	bic.w	r3, r3, #6
 8013542:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013544:	f000 f9be 	bl	80138c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801354e:	4618      	mov	r0, r3
 8013550:	f7f7 fe50 	bl	800b1f4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8013554:	bf00      	nop
 8013556:	3708      	adds	r7, #8
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}
 801355c:	e000ed00 	.word	0xe000ed00

08013560 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b082      	sub	sp, #8
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013568:	4a2c      	ldr	r2, [pc, #176]	; (801361c <USBD_LL_Init+0xbc>)
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	4a2a      	ldr	r2, [pc, #168]	; (801361c <USBD_LL_Init+0xbc>)
 8013574:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8013578:	f7f2 fc44 	bl	8005e04 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 801357c:	4b27      	ldr	r3, [pc, #156]	; (801361c <USBD_LL_Init+0xbc>)
 801357e:	4a28      	ldr	r2, [pc, #160]	; (8013620 <USBD_LL_Init+0xc0>)
 8013580:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013582:	4b26      	ldr	r3, [pc, #152]	; (801361c <USBD_LL_Init+0xbc>)
 8013584:	2208      	movs	r2, #8
 8013586:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8013588:	4b24      	ldr	r3, [pc, #144]	; (801361c <USBD_LL_Init+0xbc>)
 801358a:	2202      	movs	r2, #2
 801358c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801358e:	4b23      	ldr	r3, [pc, #140]	; (801361c <USBD_LL_Init+0xbc>)
 8013590:	2202      	movs	r2, #2
 8013592:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8013594:	4b21      	ldr	r3, [pc, #132]	; (801361c <USBD_LL_Init+0xbc>)
 8013596:	2200      	movs	r2, #0
 8013598:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801359a:	4b20      	ldr	r3, [pc, #128]	; (801361c <USBD_LL_Init+0xbc>)
 801359c:	2200      	movs	r2, #0
 801359e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80135a0:	4b1e      	ldr	r3, [pc, #120]	; (801361c <USBD_LL_Init+0xbc>)
 80135a2:	2200      	movs	r2, #0
 80135a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80135a6:	4b1d      	ldr	r3, [pc, #116]	; (801361c <USBD_LL_Init+0xbc>)
 80135a8:	2200      	movs	r2, #0
 80135aa:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80135ac:	481b      	ldr	r0, [pc, #108]	; (801361c <USBD_LL_Init+0xbc>)
 80135ae:	f7f1 fcc5 	bl	8004f3c <HAL_PCD_Init>
 80135b2:	4603      	mov	r3, r0
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d001      	beq.n	80135bc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80135b8:	f7ee fe50 	bl	800225c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80135c2:	2318      	movs	r3, #24
 80135c4:	2200      	movs	r2, #0
 80135c6:	2100      	movs	r1, #0
 80135c8:	f7f2 fb8a 	bl	8005ce0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80135d2:	2358      	movs	r3, #88	; 0x58
 80135d4:	2200      	movs	r2, #0
 80135d6:	2180      	movs	r1, #128	; 0x80
 80135d8:	f7f2 fb82 	bl	8005ce0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80135e2:	23c0      	movs	r3, #192	; 0xc0
 80135e4:	2200      	movs	r2, #0
 80135e6:	2181      	movs	r1, #129	; 0x81
 80135e8:	f7f2 fb7a 	bl	8005ce0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80135f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80135f6:	2200      	movs	r2, #0
 80135f8:	2101      	movs	r1, #1
 80135fa:	f7f2 fb71 	bl	8005ce0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013608:	2200      	movs	r2, #0
 801360a:	2182      	movs	r1, #130	; 0x82
 801360c:	f7f2 fb68 	bl	8005ce0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8013610:	2300      	movs	r3, #0
}
 8013612:	4618      	mov	r0, r3
 8013614:	3708      	adds	r7, #8
 8013616:	46bd      	mov	sp, r7
 8013618:	bd80      	pop	{r7, pc}
 801361a:	bf00      	nop
 801361c:	20006514 	.word	0x20006514
 8013620:	40006800 	.word	0x40006800

08013624 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b084      	sub	sp, #16
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801362c:	2300      	movs	r3, #0
 801362e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013630:	2300      	movs	r3, #0
 8013632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801363a:	4618      	mov	r0, r3
 801363c:	f7f1 fd39 	bl	80050b2 <HAL_PCD_Start>
 8013640:	4603      	mov	r3, r0
 8013642:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013644:	7bfb      	ldrb	r3, [r7, #15]
 8013646:	4618      	mov	r0, r3
 8013648:	f000 f944 	bl	80138d4 <USBD_Get_USB_Status>
 801364c:	4603      	mov	r3, r0
 801364e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013650:	7bbb      	ldrb	r3, [r7, #14]
}
 8013652:	4618      	mov	r0, r3
 8013654:	3710      	adds	r7, #16
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}

0801365a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801365a:	b580      	push	{r7, lr}
 801365c:	b084      	sub	sp, #16
 801365e:	af00      	add	r7, sp, #0
 8013660:	6078      	str	r0, [r7, #4]
 8013662:	4608      	mov	r0, r1
 8013664:	4611      	mov	r1, r2
 8013666:	461a      	mov	r2, r3
 8013668:	4603      	mov	r3, r0
 801366a:	70fb      	strb	r3, [r7, #3]
 801366c:	460b      	mov	r3, r1
 801366e:	70bb      	strb	r3, [r7, #2]
 8013670:	4613      	mov	r3, r2
 8013672:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013674:	2300      	movs	r3, #0
 8013676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013678:	2300      	movs	r3, #0
 801367a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013682:	78bb      	ldrb	r3, [r7, #2]
 8013684:	883a      	ldrh	r2, [r7, #0]
 8013686:	78f9      	ldrb	r1, [r7, #3]
 8013688:	f7f1 fea8 	bl	80053dc <HAL_PCD_EP_Open>
 801368c:	4603      	mov	r3, r0
 801368e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013690:	7bfb      	ldrb	r3, [r7, #15]
 8013692:	4618      	mov	r0, r3
 8013694:	f000 f91e 	bl	80138d4 <USBD_Get_USB_Status>
 8013698:	4603      	mov	r3, r0
 801369a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801369c:	7bbb      	ldrb	r3, [r7, #14]
}
 801369e:	4618      	mov	r0, r3
 80136a0:	3710      	adds	r7, #16
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}

080136a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80136a6:	b580      	push	{r7, lr}
 80136a8:	b084      	sub	sp, #16
 80136aa:	af00      	add	r7, sp, #0
 80136ac:	6078      	str	r0, [r7, #4]
 80136ae:	460b      	mov	r3, r1
 80136b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136b2:	2300      	movs	r3, #0
 80136b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136b6:	2300      	movs	r3, #0
 80136b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80136c0:	78fa      	ldrb	r2, [r7, #3]
 80136c2:	4611      	mov	r1, r2
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7f1 fee9 	bl	800549c <HAL_PCD_EP_Close>
 80136ca:	4603      	mov	r3, r0
 80136cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80136ce:	7bfb      	ldrb	r3, [r7, #15]
 80136d0:	4618      	mov	r0, r3
 80136d2:	f000 f8ff 	bl	80138d4 <USBD_Get_USB_Status>
 80136d6:	4603      	mov	r3, r0
 80136d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80136da:	7bbb      	ldrb	r3, [r7, #14]
}
 80136dc:	4618      	mov	r0, r3
 80136de:	3710      	adds	r7, #16
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd80      	pop	{r7, pc}

080136e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b084      	sub	sp, #16
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	460b      	mov	r3, r1
 80136ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136f0:	2300      	movs	r3, #0
 80136f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136f4:	2300      	movs	r3, #0
 80136f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80136fe:	78fa      	ldrb	r2, [r7, #3]
 8013700:	4611      	mov	r1, r2
 8013702:	4618      	mov	r0, r3
 8013704:	f7f1 ff94 	bl	8005630 <HAL_PCD_EP_SetStall>
 8013708:	4603      	mov	r3, r0
 801370a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801370c:	7bfb      	ldrb	r3, [r7, #15]
 801370e:	4618      	mov	r0, r3
 8013710:	f000 f8e0 	bl	80138d4 <USBD_Get_USB_Status>
 8013714:	4603      	mov	r3, r0
 8013716:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013718:	7bbb      	ldrb	r3, [r7, #14]
}
 801371a:	4618      	mov	r0, r3
 801371c:	3710      	adds	r7, #16
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}

08013722 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013722:	b580      	push	{r7, lr}
 8013724:	b084      	sub	sp, #16
 8013726:	af00      	add	r7, sp, #0
 8013728:	6078      	str	r0, [r7, #4]
 801372a:	460b      	mov	r3, r1
 801372c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801372e:	2300      	movs	r3, #0
 8013730:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013732:	2300      	movs	r3, #0
 8013734:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801373c:	78fa      	ldrb	r2, [r7, #3]
 801373e:	4611      	mov	r1, r2
 8013740:	4618      	mov	r0, r3
 8013742:	f7f1 ffcf 	bl	80056e4 <HAL_PCD_EP_ClrStall>
 8013746:	4603      	mov	r3, r0
 8013748:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801374a:	7bfb      	ldrb	r3, [r7, #15]
 801374c:	4618      	mov	r0, r3
 801374e:	f000 f8c1 	bl	80138d4 <USBD_Get_USB_Status>
 8013752:	4603      	mov	r3, r0
 8013754:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013756:	7bbb      	ldrb	r3, [r7, #14]
}
 8013758:	4618      	mov	r0, r3
 801375a:	3710      	adds	r7, #16
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}

08013760 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013760:	b480      	push	{r7}
 8013762:	b085      	sub	sp, #20
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	460b      	mov	r3, r1
 801376a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013772:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013778:	2b00      	cmp	r3, #0
 801377a:	da08      	bge.n	801378e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801377c:	78fb      	ldrb	r3, [r7, #3]
 801377e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013782:	68fa      	ldr	r2, [r7, #12]
 8013784:	015b      	lsls	r3, r3, #5
 8013786:	4413      	add	r3, r2
 8013788:	332a      	adds	r3, #42	; 0x2a
 801378a:	781b      	ldrb	r3, [r3, #0]
 801378c:	e008      	b.n	80137a0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801378e:	78fb      	ldrb	r3, [r7, #3]
 8013790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013794:	68fa      	ldr	r2, [r7, #12]
 8013796:	015b      	lsls	r3, r3, #5
 8013798:	4413      	add	r3, r2
 801379a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 801379e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	3714      	adds	r7, #20
 80137a4:	46bd      	mov	sp, r7
 80137a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137aa:	4770      	bx	lr

080137ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b084      	sub	sp, #16
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
 80137b4:	460b      	mov	r3, r1
 80137b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137b8:	2300      	movs	r3, #0
 80137ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80137bc:	2300      	movs	r3, #0
 80137be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80137c6:	78fa      	ldrb	r2, [r7, #3]
 80137c8:	4611      	mov	r1, r2
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7f1 fde1 	bl	8005392 <HAL_PCD_SetAddress>
 80137d0:	4603      	mov	r3, r0
 80137d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80137d4:	7bfb      	ldrb	r3, [r7, #15]
 80137d6:	4618      	mov	r0, r3
 80137d8:	f000 f87c 	bl	80138d4 <USBD_Get_USB_Status>
 80137dc:	4603      	mov	r3, r0
 80137de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80137e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	3710      	adds	r7, #16
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd80      	pop	{r7, pc}

080137ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80137ea:	b580      	push	{r7, lr}
 80137ec:	b086      	sub	sp, #24
 80137ee:	af00      	add	r7, sp, #0
 80137f0:	60f8      	str	r0, [r7, #12]
 80137f2:	607a      	str	r2, [r7, #4]
 80137f4:	603b      	str	r3, [r7, #0]
 80137f6:	460b      	mov	r3, r1
 80137f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137fa:	2300      	movs	r3, #0
 80137fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80137fe:	2300      	movs	r3, #0
 8013800:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013808:	7af9      	ldrb	r1, [r7, #11]
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	687a      	ldr	r2, [r7, #4]
 801380e:	f7f1 fed6 	bl	80055be <HAL_PCD_EP_Transmit>
 8013812:	4603      	mov	r3, r0
 8013814:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013816:	7dfb      	ldrb	r3, [r7, #23]
 8013818:	4618      	mov	r0, r3
 801381a:	f000 f85b 	bl	80138d4 <USBD_Get_USB_Status>
 801381e:	4603      	mov	r3, r0
 8013820:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013822:	7dbb      	ldrb	r3, [r7, #22]
}
 8013824:	4618      	mov	r0, r3
 8013826:	3718      	adds	r7, #24
 8013828:	46bd      	mov	sp, r7
 801382a:	bd80      	pop	{r7, pc}

0801382c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b086      	sub	sp, #24
 8013830:	af00      	add	r7, sp, #0
 8013832:	60f8      	str	r0, [r7, #12]
 8013834:	607a      	str	r2, [r7, #4]
 8013836:	603b      	str	r3, [r7, #0]
 8013838:	460b      	mov	r3, r1
 801383a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801383c:	2300      	movs	r3, #0
 801383e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013840:	2300      	movs	r3, #0
 8013842:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801384a:	7af9      	ldrb	r1, [r7, #11]
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	f7f1 fe66 	bl	8005520 <HAL_PCD_EP_Receive>
 8013854:	4603      	mov	r3, r0
 8013856:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013858:	7dfb      	ldrb	r3, [r7, #23]
 801385a:	4618      	mov	r0, r3
 801385c:	f000 f83a 	bl	80138d4 <USBD_Get_USB_Status>
 8013860:	4603      	mov	r3, r0
 8013862:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013864:	7dbb      	ldrb	r3, [r7, #22]
}
 8013866:	4618      	mov	r0, r3
 8013868:	3718      	adds	r7, #24
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}

0801386e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801386e:	b580      	push	{r7, lr}
 8013870:	b082      	sub	sp, #8
 8013872:	af00      	add	r7, sp, #0
 8013874:	6078      	str	r0, [r7, #4]
 8013876:	460b      	mov	r3, r1
 8013878:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013880:	78fa      	ldrb	r2, [r7, #3]
 8013882:	4611      	mov	r1, r2
 8013884:	4618      	mov	r0, r3
 8013886:	f7f1 fe85 	bl	8005594 <HAL_PCD_EP_GetRxCount>
 801388a:	4603      	mov	r3, r0
}
 801388c:	4618      	mov	r0, r3
 801388e:	3708      	adds	r7, #8
 8013890:	46bd      	mov	sp, r7
 8013892:	bd80      	pop	{r7, pc}

08013894 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013894:	b480      	push	{r7}
 8013896:	b083      	sub	sp, #12
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801389c:	4b03      	ldr	r3, [pc, #12]	; (80138ac <USBD_static_malloc+0x18>)
}
 801389e:	4618      	mov	r0, r3
 80138a0:	370c      	adds	r7, #12
 80138a2:	46bd      	mov	sp, r7
 80138a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a8:	4770      	bx	lr
 80138aa:	bf00      	nop
 80138ac:	20004bb8 	.word	0x20004bb8

080138b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80138b0:	b480      	push	{r7}
 80138b2:	b083      	sub	sp, #12
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]

}
 80138b8:	bf00      	nop
 80138ba:	370c      	adds	r7, #12
 80138bc:	46bd      	mov	sp, r7
 80138be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c2:	4770      	bx	lr

080138c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80138c4:	b480      	push	{r7}
 80138c6:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 80138c8:	bf00      	nop
 80138ca:	46bd      	mov	sp, r7
 80138cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d0:	4770      	bx	lr
	...

080138d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80138d4:	b480      	push	{r7}
 80138d6:	b085      	sub	sp, #20
 80138d8:	af00      	add	r7, sp, #0
 80138da:	4603      	mov	r3, r0
 80138dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80138de:	2300      	movs	r3, #0
 80138e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80138e2:	79fb      	ldrb	r3, [r7, #7]
 80138e4:	2b03      	cmp	r3, #3
 80138e6:	d817      	bhi.n	8013918 <USBD_Get_USB_Status+0x44>
 80138e8:	a201      	add	r2, pc, #4	; (adr r2, 80138f0 <USBD_Get_USB_Status+0x1c>)
 80138ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138ee:	bf00      	nop
 80138f0:	08013901 	.word	0x08013901
 80138f4:	08013907 	.word	0x08013907
 80138f8:	0801390d 	.word	0x0801390d
 80138fc:	08013913 	.word	0x08013913
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013900:	2300      	movs	r3, #0
 8013902:	73fb      	strb	r3, [r7, #15]
    break;
 8013904:	e00b      	b.n	801391e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013906:	2303      	movs	r3, #3
 8013908:	73fb      	strb	r3, [r7, #15]
    break;
 801390a:	e008      	b.n	801391e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801390c:	2301      	movs	r3, #1
 801390e:	73fb      	strb	r3, [r7, #15]
    break;
 8013910:	e005      	b.n	801391e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013912:	2303      	movs	r3, #3
 8013914:	73fb      	strb	r3, [r7, #15]
    break;
 8013916:	e002      	b.n	801391e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013918:	2303      	movs	r3, #3
 801391a:	73fb      	strb	r3, [r7, #15]
    break;
 801391c:	bf00      	nop
  }
  return usb_status;
 801391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013920:	4618      	mov	r0, r3
 8013922:	3714      	adds	r7, #20
 8013924:	46bd      	mov	sp, r7
 8013926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392a:	4770      	bx	lr

0801392c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801392c:	b480      	push	{r7}
 801392e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8013930:	4b05      	ldr	r3, [pc, #20]	; (8013948 <UTIL_LPM_Init+0x1c>)
 8013932:	2200      	movs	r2, #0
 8013934:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013936:	4b05      	ldr	r3, [pc, #20]	; (801394c <UTIL_LPM_Init+0x20>)
 8013938:	2200      	movs	r2, #0
 801393a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801393c:	bf00      	nop
 801393e:	46bd      	mov	sp, r7
 8013940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013944:	4770      	bx	lr
 8013946:	bf00      	nop
 8013948:	20004dd8 	.word	0x20004dd8
 801394c:	20004ddc 	.word	0x20004ddc

08013950 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8013950:	b480      	push	{r7}
 8013952:	b087      	sub	sp, #28
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
 8013958:	460b      	mov	r3, r1
 801395a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801395c:	f3ef 8310 	mrs	r3, PRIMASK
 8013960:	613b      	str	r3, [r7, #16]
  return(result);
 8013962:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8013964:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013966:	b672      	cpsid	i
  
  switch(state)
 8013968:	78fb      	ldrb	r3, [r7, #3]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d009      	beq.n	8013982 <UTIL_LPM_SetOffMode+0x32>
 801396e:	2b01      	cmp	r3, #1
 8013970:	d000      	beq.n	8013974 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 8013972:	e00e      	b.n	8013992 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8013974:	4b0c      	ldr	r3, [pc, #48]	; (80139a8 <UTIL_LPM_SetOffMode+0x58>)
 8013976:	681a      	ldr	r2, [r3, #0]
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	4313      	orrs	r3, r2
 801397c:	4a0a      	ldr	r2, [pc, #40]	; (80139a8 <UTIL_LPM_SetOffMode+0x58>)
 801397e:	6013      	str	r3, [r2, #0]
      break;
 8013980:	e007      	b.n	8013992 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	43da      	mvns	r2, r3
 8013986:	4b08      	ldr	r3, [pc, #32]	; (80139a8 <UTIL_LPM_SetOffMode+0x58>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	4013      	ands	r3, r2
 801398c:	4a06      	ldr	r2, [pc, #24]	; (80139a8 <UTIL_LPM_SetOffMode+0x58>)
 801398e:	6013      	str	r3, [r2, #0]
      break;
 8013990:	bf00      	nop
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801399c:	bf00      	nop
 801399e:	371c      	adds	r7, #28
 80139a0:	46bd      	mov	sp, r7
 80139a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a6:	4770      	bx	lr
 80139a8:	20004ddc 	.word	0x20004ddc

080139ac <__libc_init_array>:
 80139ac:	b570      	push	{r4, r5, r6, lr}
 80139ae:	4e0d      	ldr	r6, [pc, #52]	; (80139e4 <__libc_init_array+0x38>)
 80139b0:	4c0d      	ldr	r4, [pc, #52]	; (80139e8 <__libc_init_array+0x3c>)
 80139b2:	1ba4      	subs	r4, r4, r6
 80139b4:	10a4      	asrs	r4, r4, #2
 80139b6:	2500      	movs	r5, #0
 80139b8:	42a5      	cmp	r5, r4
 80139ba:	d109      	bne.n	80139d0 <__libc_init_array+0x24>
 80139bc:	4e0b      	ldr	r6, [pc, #44]	; (80139ec <__libc_init_array+0x40>)
 80139be:	4c0c      	ldr	r4, [pc, #48]	; (80139f0 <__libc_init_array+0x44>)
 80139c0:	f000 f82c 	bl	8013a1c <_init>
 80139c4:	1ba4      	subs	r4, r4, r6
 80139c6:	10a4      	asrs	r4, r4, #2
 80139c8:	2500      	movs	r5, #0
 80139ca:	42a5      	cmp	r5, r4
 80139cc:	d105      	bne.n	80139da <__libc_init_array+0x2e>
 80139ce:	bd70      	pop	{r4, r5, r6, pc}
 80139d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80139d4:	4798      	blx	r3
 80139d6:	3501      	adds	r5, #1
 80139d8:	e7ee      	b.n	80139b8 <__libc_init_array+0xc>
 80139da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80139de:	4798      	blx	r3
 80139e0:	3501      	adds	r5, #1
 80139e2:	e7f2      	b.n	80139ca <__libc_init_array+0x1e>
 80139e4:	08013f88 	.word	0x08013f88
 80139e8:	08013f88 	.word	0x08013f88
 80139ec:	08013f88 	.word	0x08013f88
 80139f0:	08013f8c 	.word	0x08013f8c

080139f4 <memcpy>:
 80139f4:	b510      	push	{r4, lr}
 80139f6:	1e43      	subs	r3, r0, #1
 80139f8:	440a      	add	r2, r1
 80139fa:	4291      	cmp	r1, r2
 80139fc:	d100      	bne.n	8013a00 <memcpy+0xc>
 80139fe:	bd10      	pop	{r4, pc}
 8013a00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013a08:	e7f7      	b.n	80139fa <memcpy+0x6>

08013a0a <memset>:
 8013a0a:	4402      	add	r2, r0
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	4293      	cmp	r3, r2
 8013a10:	d100      	bne.n	8013a14 <memset+0xa>
 8013a12:	4770      	bx	lr
 8013a14:	f803 1b01 	strb.w	r1, [r3], #1
 8013a18:	e7f9      	b.n	8013a0e <memset+0x4>
	...

08013a1c <_init>:
 8013a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a1e:	bf00      	nop
 8013a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a22:	bc08      	pop	{r3}
 8013a24:	469e      	mov	lr, r3
 8013a26:	4770      	bx	lr

08013a28 <_fini>:
 8013a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a2a:	bf00      	nop
 8013a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a2e:	bc08      	pop	{r3}
 8013a30:	469e      	mov	lr, r3
 8013a32:	4770      	bx	lr


Spotlight_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016af0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08016c30  08016c30  00026c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08017228  08017228  00027228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801722c  0801722c  0002722c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000248  20000004  08017230  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  2000024c  08017478  0003024c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  200002e8  08017511  000302e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000065b0  20000300  08017522  00030300  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200068b0  08017522  000368b0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000302f9  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000000b8  20030028  20030028  00040000  2**2
                  ALLOC
 13 MB_MEM2       00000a77  200300e0  200300e0  00040000  2**2
                  ALLOC
 14 .debug_info   000642a0  00000000  00000000  00030329  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000b021  00000000  00000000  000945c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00003d40  00000000  00000000  0009f5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003898  00000000  00000000  000a3330  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003ae7e  00000000  00000000  000a6bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0003fe0f  00000000  00000000  000e1a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0011a218  00000000  00000000  00121855  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0023ba6d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000100b8  00000000  00000000  0023bae8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000300 	.word	0x20000300
 800015c:	00000000 	.word	0x00000000
 8000160:	08016c18 	.word	0x08016c18

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000304 	.word	0x20000304
 800017c:	08016c18 	.word	0x08016c18

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <calipile_setup>:

uint8_t rawData[3] = {0, 0, 0};
uint8_t packet[3] = {0, 0, 0};


void calipile_setup(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort, I2C_HandleTypeDef* periph){
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60ba      	str	r2, [r7, #8]
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4603      	mov	r3, r0
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	73bb      	strb	r3, [r7, #14]
	_deviceAddress = deviceAddress << 1;
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <calipile_setup+0x3c>)
 8000b26:	701a      	strb	r2, [r3, #0]
	_int = intPin;
 8000b28:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <calipile_setup+0x40>)
 8000b2a:	7bbb      	ldrb	r3, [r7, #14]
 8000b2c:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <calipile_setup+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	6013      	str	r3, [r2, #0]
	i2c_periph = periph;
 8000b34:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <calipile_setup+0x48>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20004e9a 	.word	0x20004e9a
 8000b4c:	20004e9b 	.word	0x20004e9b
 8000b50:	20004eb0 	.word	0x20004eb0
 8000b54:	20004ea8 	.word	0x20004ea8

08000b58 <calipile_wake>:

void calipile_wake(){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af04      	add	r7, sp, #16
	// issue general call and reload command
	packet[0] = 0x00;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <calipile_wake+0x34>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(i2c_periph, 0x00, 0x04, I2C_MEMADD_SIZE_8BIT, packet, 1, 1000);
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <calipile_wake+0x38>)
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6c:	9302      	str	r3, [sp, #8]
 8000b6e:	2301      	movs	r3, #1
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <calipile_wake+0x34>)
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2301      	movs	r3, #1
 8000b78:	2204      	movs	r2, #4
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	f005 fd9e 	bl	80066bc <HAL_I2C_Mem_Write>
//	calipile_writeByte(0x04, packet);
	HAL_Delay(1);
 8000b80:	2001      	movs	r0, #1
 8000b82:	f003 fcaf 	bl	80044e4 <HAL_Delay>
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000320 	.word	0x20000320
 8000b90:	20004ea8 	.word	0x20004ea8

08000b94 <calipile_initMotion>:
//	uint32_t tempObj = calipile_getTPOBJ();
//
//	return (25+273.15) + (tempAmb - _PTAT25) * (1/_M);
//}

void calipile_initMotion(uint8_t tcLP1, uint8_t tcLP2, uint8_t TPsource, uint8_t cycTime){
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4623      	mov	r3, r4
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71bb      	strb	r3, [r7, #6]
 8000baa:	460b      	mov	r3, r1
 8000bac:	717b      	strb	r3, [r7, #5]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	713b      	strb	r3, [r7, #4]
	// issue general call and reload command
	uint8_t packet = 0x00;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]

	 // Initialize the sensor for motion and presence detection
	  // Tthr (bit 4), presence (bit(3), motion (bit 2), amb shock (bit 1), timer (bit 0) interrupts allowed
	calipile_writeByte(CALIPILE_INT_MASK, &packet);
 8000bb6:	f107 030f 	add.w	r3, r7, #15
 8000bba:	4619      	mov	r1, r3
 8000bbc:	2019      	movs	r0, #25
 8000bbe:	f000 fa1f 	bl	8001000 <calipile_writeByte>

	  // time constant for LP1 (bits 0 - 3) and LP2 (bits 4 - 7)
	  packet = tcLP2 << 4 | tcLP1;
 8000bc2:	79bb      	ldrb	r3, [r7, #6]
 8000bc4:	011b      	lsls	r3, r3, #4
 8000bc6:	b25a      	sxtb	r2, r3
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	73fb      	strb	r3, [r7, #15]
	  calipile_writeByte(CALIPILE_SLP12, &packet);
 8000bd4:	f107 030f 	add.w	r3, r7, #15
 8000bd8:	4619      	mov	r1, r3
 8000bda:	2014      	movs	r0, #20
 8000bdc:	f000 fa10 	bl	8001000 <calipile_writeByte>

	  // select cycle time (bits 0 - 1) for motion detection, source (bits) 2 - 3) for presence detection
      uint8_t temp;
	  calipile_readBytes(CALIPILE_SRC_SELECT, &temp, 1);
 8000be0:	f107 030e 	add.w	r3, r7, #14
 8000be4:	2201      	movs	r2, #1
 8000be6:	4619      	mov	r1, r3
 8000be8:	201a      	movs	r0, #26
 8000bea:	f000 fa49 	bl	8001080 <calipile_readBytes>
	  packet = temp | TPsource << 2 | cycTime;
 8000bee:	797b      	ldrb	r3, [r7, #5]
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	b25a      	sxtb	r2, r3
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	b25a      	sxtb	r2, r3
 8000bfc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b25b      	sxtb	r3, r3
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	73fb      	strb	r3, [r7, #15]
	  calipile_writeByte(CALIPILE_SRC_SELECT, &packet);
 8000c08:	f107 030f 	add.w	r3, r7, #15
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	201a      	movs	r0, #26
 8000c10:	f000 f9f6 	bl	8001000 <calipile_writeByte>

	  // select motion threshold
	  packet = 0x22;  // presence threshold, set at 50 counts
 8000c14:	2322      	movs	r3, #34	; 0x22
 8000c16:	73fb      	strb	r3, [r7, #15]
	  calipile_writeByte(CALIPILE_TP_PRES_THLD, &packet);
 8000c18:	f107 030f 	add.w	r3, r7, #15
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	2016      	movs	r0, #22
 8000c20:	f000 f9ee 	bl	8001000 <calipile_writeByte>

	  packet = 0x0A; // motion threshold, set at 10 counts
 8000c24:	230a      	movs	r3, #10
 8000c26:	73fb      	strb	r3, [r7, #15]
	  calipile_writeByte(CALIPILE_TP_MOT_THLD, &packet);
 8000c28:	f107 030f 	add.w	r3, r7, #15
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	2017      	movs	r0, #23
 8000c30:	f000 f9e6 	bl	8001000 <calipile_writeByte>
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd90      	pop	{r4, r7, pc}

08000c3c <calipile_initTempThr>:



void calipile_initTempThr(uint16_t Tcounts){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	80fb      	strh	r3, [r7, #6]
	// specify the over temperature interrupt threshold (2 bytes)
	calipile_writeByte(CALIPILE_TPOT_THR, &Tcounts); // 0x83 means 67,072 counts as threshold
 8000c46:	1dbb      	adds	r3, r7, #6
 8000c48:	4619      	mov	r1, r3
 8000c4a:	201c      	movs	r0, #28
 8000c4c:	f000 f9d8 	bl	8001000 <calipile_writeByte>
	calipile_writeByte((CALIPILE_TPOT_THR + 1), 0x00);
 8000c50:	2100      	movs	r1, #0
 8000c52:	201d      	movs	r0, #29
 8000c54:	f000 f9d4 	bl	8001000 <calipile_writeByte>
	uint8_t temp;
	calipile_readByte(CALIPILE_SRC_SELECT, &temp);
 8000c58:	f107 030d 	add.w	r3, r7, #13
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	201a      	movs	r0, #26
 8000c60:	f000 f9ee 	bl	8001040 <calipile_readByte>

	uint8_t packet = temp | 0x10;
 8000c64:	7b7b      	ldrb	r3, [r7, #13]
 8000c66:	f043 0310 	orr.w	r3, r3, #16
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	733b      	strb	r3, [r7, #12]
	calipile_writeByte(CALIPILE_SRC_SELECT, &packet); // interrupt on exceeding threshold
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	201a      	movs	r0, #26
 8000c76:	f000 f9c3 	bl	8001000 <calipile_writeByte>

	// Verify threshold set
	calipile_readBytes(CALIPILE_TPOT_THR, rawData, 2);
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <calipile_initTempThr+0x64>)
 8000c7e:	201c      	movs	r0, #28
 8000c80:	f000 f9fe 	bl	8001080 <calipile_readBytes>
	uint16_t TPOTTHR = ((uint16_t) rawData[0] << 8) | rawData[1];
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <calipile_initTempThr+0x64>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b21a      	sxth	r2, r3
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <calipile_initTempThr+0x64>)
 8000c8e:	785b      	ldrb	r3, [r3, #1]
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	81fb      	strh	r3, [r7, #14]
//	Serial.print("Overtemp threshold = "); Serial.println(TPOTTHR * 2);
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000031c 	.word	0x2000031c

08000ca4 <calipile_getTPAMB>:

uint16_t calipile_getTPAMB(){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
	calipile_readBytes(CALIPILE_TPAMBIENT, rawData, 2);
 8000caa:	2202      	movs	r2, #2
 8000cac:	490a      	ldr	r1, [pc, #40]	; (8000cd8 <calipile_getTPAMB+0x34>)
 8000cae:	2003      	movs	r0, #3
 8000cb0:	f000 f9e6 	bl	8001080 <calipile_readBytes>
	uint16_t temp = ( (uint16_t)(rawData[0] & 0x7F) << 8) | rawData[1] ;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <calipile_getTPAMB+0x34>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	b21b      	sxth	r3, r3
 8000cbc:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000cc0:	b21a      	sxth	r2, r3
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <calipile_getTPAMB+0x34>)
 8000cc4:	785b      	ldrb	r3, [r3, #1]
 8000cc6:	b21b      	sxth	r3, r3
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	80fb      	strh	r3, [r7, #6]
	return temp;
 8000cce:	88fb      	ldrh	r3, [r7, #6]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000031c 	.word	0x2000031c

08000cdc <calipile_getTPOBJ>:
uint16_t calipile_getTPOBJ(){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
	calipile_readBytes(CALIPILE_TPOBJECT, rawData, 3);
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	490c      	ldr	r1, [pc, #48]	; (8000d18 <calipile_getTPOBJ+0x3c>)
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f000 f9ca 	bl	8001080 <calipile_readBytes>
	uint32_t temp = ( (uint32_t) ( (uint32_t)rawData[0] << 24) | ( (uint32_t)rawData[1] << 16) | ( (uint32_t)rawData[2] & 0x80) << 8) >> 15;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <calipile_getTPOBJ+0x3c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	061a      	lsls	r2, r3, #24
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <calipile_getTPOBJ+0x3c>)
 8000cf4:	785b      	ldrb	r3, [r3, #1]
 8000cf6:	041b      	lsls	r3, r3, #16
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <calipile_getTPOBJ+0x3c>)
 8000cfc:	789b      	ldrb	r3, [r3, #2]
 8000cfe:	021b      	lsls	r3, r3, #8
 8000d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d04:	4313      	orrs	r3, r2
 8000d06:	0bdb      	lsrs	r3, r3, #15
 8000d08:	607b      	str	r3, [r7, #4]
	return temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	b29b      	uxth	r3, r3
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000031c 	.word	0x2000031c

08000d1c <calipile_getTPPRESENCE>:
	   temp /= 128;
	   return temp;
}


uint8_t calipile_getTPPRESENCE(){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
      uint8_t temp;
                  calipile_readByte(CALIPILE_TPPRESENCE, &temp);
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	4619      	mov	r1, r3
 8000d26:	200f      	movs	r0, #15
 8000d28:	f000 f98a 	bl	8001040 <calipile_readByte>
      return temp;
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
  }
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <calipile_getTPMOTION>:


  uint8_t calipile_getTPMOTION(){
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
      uint8_t temp;
            calipile_readByte(CALIPILE_TPMOTION, &temp);
 8000d3c:	1dfb      	adds	r3, r7, #7
 8000d3e:	4619      	mov	r1, r3
 8000d40:	2010      	movs	r0, #16
 8000d42:	f000 f97d 	bl	8001040 <calipile_readByte>
      return temp;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
  }
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <calipile_getTamb>:
      uint8_t temp;
      calipile_readByte(CALIPILE_TPAMB_SHOCK, &temp);
      return temp;
  }

    float calipile_getTamb(uint16_t TPAMB){
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]
      float temp = 298.15f + ((float)TPAMB - (float) _PTAT25) * (1.0f/(float) _M);
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <calipile_getTamb+0x5c>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	ee07 3a90 	vmov	s15, r3
 8000d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <calipile_getTamb+0x60>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	ee07 3a90 	vmov	s15, r3
 8000d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d80:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000d84:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d8c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000db4 <calipile_getTamb+0x64>
 8000d90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d94:	edc7 7a03 	vstr	s15, [r7, #12]
      return temp;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	ee07 3a90 	vmov	s15, r3
  }
 8000d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	20000396 	.word	0x20000396
 8000db0:	20004eb4 	.word	0x20004eb4
 8000db4:	43951333 	.word	0x43951333

08000db8 <calipile_getTobj>:

    float calipile_getTobj(uint32_t TPOBJ, float Tamb){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	ed87 0a00 	vstr	s0, [r7]
      float temp0 = powf(Tamb, 3.8f);
 8000dc4:	eddf 0a18 	vldr	s1, [pc, #96]	; 8000e28 <calipile_getTobj+0x70>
 8000dc8:	ed97 0a00 	vldr	s0, [r7]
 8000dcc:	f002 f982 	bl	80030d4 <powf>
 8000dd0:	ed87 0a05 	vstr	s0, [r7, #20]
      float temp1 = ( ((float) TPOBJ) - ((float) _U0)  ) / _k ;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <calipile_getTobj+0x74>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	ee07 3a90 	vmov	s15, r3
 8000de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dea:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <calipile_getTobj+0x78>)
 8000df0:	ed93 7a00 	vldr	s14, [r3]
 8000df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df8:	edc7 7a04 	vstr	s15, [r7, #16]
      float temp3 = powf( (temp0 + temp1), 0.2631578947f );
 8000dfc:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e00:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e08:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8000e34 <calipile_getTobj+0x7c>
 8000e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e10:	f002 f960 	bl	80030d4 <powf>
 8000e14:	ed87 0a03 	vstr	s0, [r7, #12]
      return temp3;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	ee07 3a90 	vmov	s15, r3
  }
 8000e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40733333 	.word	0x40733333
 8000e2c:	20004eb6 	.word	0x20004eb6
 8000e30:	20004ea4 	.word	0x20004ea4
 8000e34:	3e86bca2 	.word	0x3e86bca2

08000e38 <calipile_readEEPROM>:
  }



  void calipile_readEEPROM()
  {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	ed2d 8b02 	vpush	{d8}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0

  uint8_t rawData[2] = {0, 0};
 8000e42:	2300      	movs	r3, #0
 8000e44:	713b      	strb	r3, [r7, #4]
 8000e46:	2300      	movs	r3, #0
 8000e48:	717b      	strb	r3, [r7, #5]
  uint8_t packet;
  /* Start of EEPROM operations, just have to do once *************************************************** */
 // Check EEPROM protocol number as a test of I2C communication
  packet = 0x80;
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	70fb      	strb	r3, [r7, #3]
  calipile_writeByte(CALIPILE_EEPROM_CONTROL, &packet); // enable EEPROM read
 8000e4e:	1cfb      	adds	r3, r7, #3
 8000e50:	4619      	mov	r1, r3
 8000e52:	201f      	movs	r0, #31
 8000e54:	f000 f8d4 	bl	8001000 <calipile_writeByte>

  uint8_t c;
  calipile_readByte(CALIPILE_EEPROM_PROTOCOL, &c);
 8000e58:	1cbb      	adds	r3, r7, #2
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	2020      	movs	r0, #32
 8000e5e:	f000 f8ef 	bl	8001040 <calipile_readByte>
//  Serial.print("CaliPile EEPROM protocol number is "); Serial.println(c);
//  Serial.println("CaliPile EEPROM protocol number should be 3");

  uint8_t d;
  calipile_readByte(CALIPILE_SLAVE_ADDRESS, &d);
 8000e62:	1c7b      	adds	r3, r7, #1
 8000e64:	4619      	mov	r1, r3
 8000e66:	203f      	movs	r0, #63	; 0x3f
 8000e68:	f000 f8ea 	bl	8001040 <calipile_readByte>
//  Serial.println("CaliPile EEPROM slave address should be 140");
//  Serial.println(" ");

  // Read the EEPROM calibration constants

  calipile_readByte(CALIPILE_EEPROM_LOOKUPNUM, &_LOOKUP);
 8000e6c:	4958      	ldr	r1, [pc, #352]	; (8000fd0 <calipile_readEEPROM+0x198>)
 8000e6e:	2029      	movs	r0, #41	; 0x29
 8000e70:	f000 f8e6 	bl	8001040 <calipile_readByte>
//  Serial.print("CaliPile LookUpNumber is "); Serial.println(_LOOKUP);

  calipile_readBytes(CALIPILE_EEPROM_PTAT25, &rawData[0], 2);
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2202      	movs	r2, #2
 8000e78:	4619      	mov	r1, r3
 8000e7a:	202a      	movs	r0, #42	; 0x2a
 8000e7c:	f000 f900 	bl	8001080 <calipile_readBytes>
  _PTAT25 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 8000e80:	793b      	ldrb	r3, [r7, #4]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	797b      	ldrb	r3, [r7, #5]
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b50      	ldr	r3, [pc, #320]	; (8000fd4 <calipile_readEEPROM+0x19c>)
 8000e92:	801a      	strh	r2, [r3, #0]
//  Serial.print("CaliPile PTAT25 is "); Serial.println(_PTAT25);

  calipile_readBytes(CALIPILE_EEPROM_M, &rawData[0], 2);
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2202      	movs	r2, #2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	202c      	movs	r0, #44	; 0x2c
 8000e9c:	f000 f8f0 	bl	8001080 <calipile_readBytes>
  _M = ( (uint16_t) rawData[0] << 8) | rawData[1];
 8000ea0:	793b      	ldrb	r3, [r7, #4]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	797b      	ldrb	r3, [r7, #5]
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b49      	ldr	r3, [pc, #292]	; (8000fd8 <calipile_readEEPROM+0x1a0>)
 8000eb2:	801a      	strh	r2, [r3, #0]
  _M /= 100;
 8000eb4:	4b48      	ldr	r3, [pc, #288]	; (8000fd8 <calipile_readEEPROM+0x1a0>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	4a48      	ldr	r2, [pc, #288]	; (8000fdc <calipile_readEEPROM+0x1a4>)
 8000eba:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	4b45      	ldr	r3, [pc, #276]	; (8000fd8 <calipile_readEEPROM+0x1a0>)
 8000ec4:	801a      	strh	r2, [r3, #0]
//  Serial.print("CaliPile M is "); Serial.println(_M);

  calipile_readBytes(CALIPILE_EEPROM_U0, &rawData[0], 2);
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2202      	movs	r2, #2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	202e      	movs	r0, #46	; 0x2e
 8000ece:	f000 f8d7 	bl	8001080 <calipile_readBytes>
  _U0 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 8000ed2:	793b      	ldrb	r3, [r7, #4]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	797b      	ldrb	r3, [r7, #5]
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	4b3f      	ldr	r3, [pc, #252]	; (8000fe0 <calipile_readEEPROM+0x1a8>)
 8000ee4:	801a      	strh	r2, [r3, #0]
  _U0 += 32768;
 8000ee6:	4b3e      	ldr	r3, [pc, #248]	; (8000fe0 <calipile_readEEPROM+0x1a8>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b3b      	ldr	r3, [pc, #236]	; (8000fe0 <calipile_readEEPROM+0x1a8>)
 8000ef2:	801a      	strh	r2, [r3, #0]
//  Serial.print("CaliPile U0 is "); Serial.println(_U0);

  calipile_readBytes(CALIPILE_EEPROM_UOUT1, &rawData[0], 2);
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	2030      	movs	r0, #48	; 0x30
 8000efc:	f000 f8c0 	bl	8001080 <calipile_readBytes>
  _UOUT1 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 8000f00:	793b      	ldrb	r3, [r7, #4]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	797a      	ldrb	r2, [r7, #5]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b36      	ldr	r3, [pc, #216]	; (8000fe4 <calipile_readEEPROM+0x1ac>)
 8000f0c:	601a      	str	r2, [r3, #0]
  _UOUT1 *= 2;
 8000f0e:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <calipile_readEEPROM+0x1ac>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4a33      	ldr	r2, [pc, #204]	; (8000fe4 <calipile_readEEPROM+0x1ac>)
 8000f16:	6013      	str	r3, [r2, #0]
//  Serial.print("CaliPile UOUT1 is "); Serial.println(_UOUT1);

  calipile_readByte(CALIPILE_EEPROM_TOBJ1, &_TOBJ1);
 8000f18:	4933      	ldr	r1, [pc, #204]	; (8000fe8 <calipile_readEEPROM+0x1b0>)
 8000f1a:	2032      	movs	r0, #50	; 0x32
 8000f1c:	f000 f890 	bl	8001040 <calipile_readByte>
//  Serial.print("CaliPile TOBJ1 is "); Serial.println(_TOBJ1);

  calipile_readBytes(CALIPILE_EEPROM_CHECKSUM, &rawData[0], 2);
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2202      	movs	r2, #2
 8000f24:	4619      	mov	r1, r3
 8000f26:	2021      	movs	r0, #33	; 0x21
 8000f28:	f000 f8aa 	bl	8001080 <calipile_readBytes>
  _CHECKSUM = ( (uint16_t) rawData[0] << 8) | rawData[1];
 8000f2c:	793b      	ldrb	r3, [r7, #4]
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	797b      	ldrb	r3, [r7, #5]
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <calipile_readEEPROM+0x1b4>)
 8000f3e:	801a      	strh	r2, [r3, #0]
//  Serial.print("CaliPile CHECKSUM is supposed to be "); Serial.println(_CHECKSUM);

  // Calculate the checksum
  uint16_t sum = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	81fb      	strh	r3, [r7, #14]
  uint8_t temp;
  for(int ii = 35; ii < 64; ii++)
 8000f44:	2323      	movs	r3, #35	; 0x23
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	e00e      	b.n	8000f68 <calipile_readEEPROM+0x130>
  {
   calipile_readByte(ii, &temp);
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	463a      	mov	r2, r7
 8000f50:	4611      	mov	r1, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f874 	bl	8001040 <calipile_readByte>
   sum += temp;
 8000f58:	783b      	ldrb	r3, [r7, #0]
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	89fb      	ldrh	r3, [r7, #14]
 8000f5e:	4413      	add	r3, r2
 8000f60:	81fb      	strh	r3, [r7, #14]
  for(int ii = 35; ii < 64; ii++)
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	3301      	adds	r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f6c:	dded      	ble.n	8000f4a <calipile_readEEPROM+0x112>
  }
//  Serial.print("CaliPile CHECKSUM is "); Serial.println(sum + c);

  packet = 0x00;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	70fb      	strb	r3, [r7, #3]
  calipile_writeByte(CALIPILE_EEPROM_CONTROL, &packet); // enable EEPROM read
 8000f72:	1cfb      	adds	r3, r7, #3
 8000f74:	4619      	mov	r1, r3
 8000f76:	201f      	movs	r0, #31
 8000f78:	f000 f842 	bl	8001000 <calipile_writeByte>

  /* End of EEPROM operations, just have to do once *************************************************** */

  // Construct needed calibration constants (just need to calculate once)
  _k = ( (float) (_UOUT1 - _U0) )/(powf((float)(_TOBJ1 + 273.15f), 3.8f) - powf(25.0f + 273.15f, 3.8f) );
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <calipile_readEEPROM+0x1ac>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <calipile_readEEPROM+0x1a8>)
 8000f82:	8812      	ldrh	r2, [r2, #0]
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <calipile_readEEPROM+0x1b0>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	ee07 3a90 	vmov	s15, r3
 8000f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000ff0 <calipile_readEEPROM+0x1b8>
 8000f9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fa2:	eddf 0a14 	vldr	s1, [pc, #80]	; 8000ff4 <calipile_readEEPROM+0x1bc>
 8000fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8000faa:	f002 f893 	bl	80030d4 <powf>
 8000fae:	eeb0 7a40 	vmov.f32	s14, s0
 8000fb2:	eddf 7a11 	vldr	s15, [pc, #68]	; 8000ff8 <calipile_readEEPROM+0x1c0>
 8000fb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fba:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <calipile_readEEPROM+0x1c4>)
 8000fc0:	edc3 7a00 	vstr	s15, [r3]

  }
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	ecbd 8b02 	vpop	{d8}
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20004eac 	.word	0x20004eac
 8000fd4:	20000396 	.word	0x20000396
 8000fd8:	20004eb4 	.word	0x20004eb4
 8000fdc:	51eb851f 	.word	0x51eb851f
 8000fe0:	20004eb6 	.word	0x20004eb6
 8000fe4:	20004ea0 	.word	0x20004ea0
 8000fe8:	20004e9c 	.word	0x20004e9c
 8000fec:	20004e98 	.word	0x20004e98
 8000ff0:	43889333 	.word	0x43889333
 8000ff4:	40733333 	.word	0x40733333
 8000ff8:	4f16b4e3 	.word	0x4f16b4e3
 8000ffc:	20004ea4 	.word	0x20004ea4

08001000 <calipile_writeByte>:

    void calipile_writeByte(uint8_t reg, uint8_t* packet){
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af04      	add	r7, sp, #16
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
      HAL_I2C_Mem_Write(i2c_periph, _deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, packet, 1, 1000);
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <calipile_writeByte+0x38>)
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <calipile_writeByte+0x3c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b299      	uxth	r1, r3
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	b29a      	uxth	r2, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2301      	movs	r3, #1
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	f005 fb47 	bl	80066bc <HAL_I2C_Mem_Write>
//      write_byte[0] = reg;
//      write_byte[1] = *packet;

//  	HAL_I2C_Master_Transmit(i2c_periph, _deviceAddress, write_byte, 2, 100);

    }
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20004ea8 	.word	0x20004ea8
 800103c:	20004e9a 	.word	0x20004e9a

08001040 <calipile_readByte>:

    void calipile_readByte(uint8_t reg, uint8_t* packet){
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af04      	add	r7, sp, #16
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
    	HAL_I2C_Mem_Read(i2c_periph, _deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, packet, 1, 1000);
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <calipile_readByte+0x38>)
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <calipile_readByte+0x3c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b299      	uxth	r1, r3
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	b29a      	uxth	r2, r3
 800105a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	2301      	movs	r3, #1
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	f005 fc3b 	bl	80068e4 <HAL_I2C_Mem_Read>
//    	HAL_I2C_Master_Transmit(i2c_periph, _deviceAddress, &reg, 1, 100);
//    	HAL_I2C_Master_Receive(i2c_periph, _deviceAddress, packet, 1, 100);
    }
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20004ea8 	.word	0x20004ea8
 800107c:	20004e9a 	.word	0x20004e9a

08001080 <calipile_readBytes>:

    void calipile_readBytes(uint8_t reg, uint8_t* packet, uint8_t len){
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b087      	sub	sp, #28
 8001084:	af04      	add	r7, sp, #16
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	4613      	mov	r3, r2
 800108e:	71bb      	strb	r3, [r7, #6]
    	HAL_I2C_Mem_Read(i2c_periph, _deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, packet, len, 1000);
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <calipile_readBytes+0x40>)
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <calipile_readBytes+0x44>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b299      	uxth	r1, r3
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	b29c      	uxth	r4, r3
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a6:	9202      	str	r2, [sp, #8]
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	4622      	mov	r2, r4
 80010b2:	f005 fc17 	bl	80068e4 <HAL_I2C_Mem_Read>
//    	packet[0] = CALIPILE_TPOBJECT;
//    	uint8_t temp;
//    	HAL_I2C_Master_Transmit(i2c_periph, _deviceAddress, &reg, 1, 100);
//    	HAL_I2C_Master_Receive(i2c_periph, _deviceAddress, packet, len, 100);

    }
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd90      	pop	{r4, r7, pc}
 80010be:	bf00      	nop
 80010c0:	20004ea8 	.word	0x20004ea8
 80010c4:	20004e9a 	.word	0x20004e9a

080010c8 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>:
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
//Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
//                                      int motor_pin_3, int motor_pin_4)
Stepper::Stepper(int32_t number_of_steps, 	GPIO_TypeDef* motor_pin_1_port, uint16_t motor_pin_1,
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	807b      	strh	r3, [r7, #2]
											GPIO_TypeDef* motor_pin_2_port, uint16_t motor_pin_2,
											GPIO_TypeDef* motor_pin_3_port, uint16_t motor_pin_3,
											GPIO_TypeDef* motor_pin_4_port, uint16_t motor_pin_4,
											volatile uint16_t* stop_sensor, uint8_t motor_direction)
{
  this->step_number = 0;    // which step the motor is on
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  this->direction = 0;      // motor direction
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	649a      	str	r2, [r3, #72]	; 0x48
  this->number_of_steps = number_of_steps; // total number of steps for this motor
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	609a      	str	r2, [r3, #8]

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	887a      	ldrh	r2, [r7, #2]
 80010f2:	841a      	strh	r2, [r3, #32]
  this->motor_pin_2 = motor_pin_2;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8bba      	ldrh	r2, [r7, #28]
 80010f8:	845a      	strh	r2, [r3, #34]	; 0x22
  this->motor_pin_3 = motor_pin_3;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80010fe:	849a      	strh	r2, [r3, #36]	; 0x24
  this->motor_pin_4 = motor_pin_4;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001104:	84da      	strh	r2, [r3, #38]	; 0x26

  // Arduino ports for the motor control pin connection:
  this->motor_pin_1_port = motor_pin_1_port;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
  this->motor_pin_2_port = motor_pin_2_port;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	631a      	str	r2, [r3, #48]	; 0x30
  this->motor_pin_3_port = motor_pin_3_port;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6a3a      	ldr	r2, [r7, #32]
 8001116:	635a      	str	r2, [r3, #52]	; 0x34
  this->motor_pin_4_port = motor_pin_4_port;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800111c:	639a      	str	r2, [r3, #56]	; 0x38

  this->motor_dir = motor_direction;
 800111e:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
//  pinMode(this->motor_pin_2, OUTPUT);
//  pinMode(this->motor_pin_3, OUTPUT);
//  pinMode(this->motor_pin_4, OUTPUT);

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2200      	movs	r2, #0
 800112c:	851a      	strh	r2, [r3, #40]	; 0x28

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2204      	movs	r2, #4
 8001132:	60da      	str	r2, [r3, #12]

  // pin that is continously updated via DMA on the magnetic end stop value (0 means the magnet is directly aligned with the sensor)
  this->end_stop = stop_sensor;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001138:	645a      	str	r2, [r3, #68]	; 0x44
}
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <_ZN7Stepper8setSpeedEl>:

/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4a07      	ldr	r2, [pc, #28]	; (8001174 <_ZN7Stepper8setSpeedEl+0x2c>)
 8001158:	fb92 f2f3 	sdiv	r2, r2, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001162:	461a      	mov	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	605a      	str	r2, [r3, #4]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	03938700 	.word	0x03938700

08001178 <_ZN7Stepper12setStepBoundEl>:
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */

void Stepper::setStepBound(int32_t max_step){
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
	this->max_step = max_step;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	615a      	str	r2, [r3, #20]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_ZN7Stepper4stepEi>:

uint32_t Stepper::step(int steps_to_move)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	// break if requested steps exceed maximum range
	if( ((this->step_tracker + steps_to_move) > this->max_step) || (this->step_tracker - steps_to_move) < 0 ){
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	699a      	ldr	r2, [r3, #24]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6952      	ldr	r2, [r2, #20]
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d901      	bls.n	80011b2 <_ZN7Stepper4stepEi+0x1e>
		return 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e07f      	b.n	80012b2 <_ZN7Stepper4stepEi+0x11e>
	}

	this->step_tracker += steps_to_move;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699a      	ldr	r2, [r3, #24]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	441a      	add	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	619a      	str	r2, [r3, #24]

	// compensate in case motor direction is flipped
	steps_to_move = steps_to_move * this->motor_dir;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 80011c4:	461a      	mov	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	fb02 f303 	mul.w	r3, r2, r3
 80011cc:	603b      	str	r3, [r7, #0]

	// if requesting to go to 0th position, hone axis to limit drift
	if(this->step_tracker == 0){
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <_ZN7Stepper4stepEi+0x4a>
		honeAxis();
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 fb26 	bl	8001828 <_ZN7Stepper8honeAxisEv>
 80011dc:	e068      	b.n	80012b0 <_ZN7Stepper4stepEi+0x11c>
	}
	else{
		uint32_t steps_left = abs(steps_to_move);  // how many steps to take
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bfb8      	it	lt
 80011e4:	425b      	neglt	r3, r3
 80011e6:	60fb      	str	r3, [r7, #12]
	//	uint32_t steps_left;
	  // determine direction based on whether steps_to_mode is + or -:
	  if (steps_to_move > 0) { this->direction = 1; }
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	dd02      	ble.n	80011f4 <_ZN7Stepper4stepEi+0x60>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
	  if (steps_to_move < 0) { this->direction = 0; }
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	da02      	bge.n	8001200 <_ZN7Stepper4stepEi+0x6c>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]


	  // decrement the number of steps, moving one step each time:
	  while (steps_left > 0)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d054      	beq.n	80012b0 <_ZN7Stepper4stepEi+0x11c>
	  {
			  //    unsigned long now = micros();
		  uint32_t now = __HAL_TIM_GET_COUNTER(&htim2);
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <_ZN7Stepper4stepEi+0x128>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	60bb      	str	r3, [r7, #8]
		// move only if the appropriate delay has passed:
		 if (now - this->last_step_time >= this->step_delay)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	1ad2      	subs	r2, r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	429a      	cmp	r2, r3
 800121c:	d3f0      	bcc.n	8001200 <_ZN7Stepper4stepEi+0x6c>
		{
		  // get the timeStamp of when you stepped:
		  this->last_step_time = now;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	649a      	str	r2, [r3, #72]	; 0x48
		  // increment or decrement the step number,
		  // depending on direction:
		  if (this->direction == 1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d10e      	bne.n	800124a <_ZN7Stepper4stepEi+0xb6>
		  {
			this->step_number++;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	611a      	str	r2, [r3, #16]
			if (this->step_number == this->number_of_steps) {
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691a      	ldr	r2, [r3, #16]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	429a      	cmp	r2, r3
 8001240:	d110      	bne.n	8001264 <_ZN7Stepper4stepEi+0xd0>
			  this->step_number = 0;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	e00c      	b.n	8001264 <_ZN7Stepper4stepEi+0xd0>
			}
		  }
		  else
		  {
			if (this->step_number == 0) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d103      	bne.n	800125a <_ZN7Stepper4stepEi+0xc6>
			  this->step_number = this->number_of_steps;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	611a      	str	r2, [r3, #16]
			}
			this->step_number--;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	1e5a      	subs	r2, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	611a      	str	r2, [r3, #16]
		  }
		  // decrement the steps left:
		  steps_left--;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3b01      	subs	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
		  // step the motor to step number 0, 1, ..., {3 or 10}
		  if (this->pin_count == 5)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b05      	cmp	r3, #5
 8001270:	d110      	bne.n	8001294 <_ZN7Stepper4stepEi+0x100>
			stepMotor(this->step_number % 10);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <_ZN7Stepper4stepEi+0x12c>)
 8001278:	fb83 1302 	smull	r1, r3, r3, r2
 800127c:	1099      	asrs	r1, r3, #2
 800127e:	17d3      	asrs	r3, r2, #31
 8001280:	1ac9      	subs	r1, r1, r3
 8001282:	460b      	mov	r3, r1
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	1ad1      	subs	r1, r2, r3
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f819 	bl	80012c4 <_ZN7Stepper9stepMotorEi>
 8001292:	e7b5      	b.n	8001200 <_ZN7Stepper4stepEi+0x6c>
		  else
			stepMotor(this->step_number % 4);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	425a      	negs	r2, r3
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	f002 0203 	and.w	r2, r2, #3
 80012a2:	bf58      	it	pl
 80012a4:	4253      	negpl	r3, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 f80b 	bl	80012c4 <_ZN7Stepper9stepMotorEi>
	  while (steps_left > 0)
 80012ae:	e7a7      	b.n	8001200 <_ZN7Stepper4stepEi+0x6c>
		}
	  }
	}
  return 1;
 80012b0:	2301      	movs	r3, #1
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20005094 	.word	0x20005094
 80012c0:	66666667 	.word	0x66666667

080012c4 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  if (this->pin_count == 2) {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d152      	bne.n	800137c <_ZN7Stepper9stepMotorEi+0xb8>
    switch (thisStep) {
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d84f      	bhi.n	800137c <_ZN7Stepper9stepMotorEi+0xb8>
 80012dc:	a201      	add	r2, pc, #4	; (adr r2, 80012e4 <_ZN7Stepper9stepMotorEi+0x20>)
 80012de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e2:	bf00      	nop
 80012e4:	080012f5 	.word	0x080012f5
 80012e8:	08001317 	.word	0x08001317
 80012ec:	08001339 	.word	0x08001339
 80012f0:	0800135b 	.word	0x0800135b
      case 0:  // 01
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	8c1b      	ldrh	r3, [r3, #32]
 80012fc:	2200      	movs	r2, #0
 80012fe:	4619      	mov	r1, r3
 8001300:	f005 f910 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800130c:	2201      	movs	r2, #1
 800130e:	4619      	mov	r1, r3
 8001310:	f005 f908 	bl	8006524 <HAL_GPIO_WritePin>
      break;
 8001314:	e032      	b.n	800137c <_ZN7Stepper9stepMotorEi+0xb8>
      case 1:  // 11
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	8c1b      	ldrh	r3, [r3, #32]
 800131e:	2201      	movs	r2, #1
 8001320:	4619      	mov	r1, r3
 8001322:	f005 f8ff 	bl	8006524 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800132e:	2201      	movs	r2, #1
 8001330:	4619      	mov	r1, r3
 8001332:	f005 f8f7 	bl	8006524 <HAL_GPIO_WritePin>
      break;
 8001336:	e021      	b.n	800137c <_ZN7Stepper9stepMotorEi+0xb8>
      case 2:  // 10
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	8c1b      	ldrh	r3, [r3, #32]
 8001340:	2201      	movs	r2, #1
 8001342:	4619      	mov	r1, r3
 8001344:	f005 f8ee 	bl	8006524 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001350:	2200      	movs	r2, #0
 8001352:	4619      	mov	r1, r3
 8001354:	f005 f8e6 	bl	8006524 <HAL_GPIO_WritePin>
      break;
 8001358:	e010      	b.n	800137c <_ZN7Stepper9stepMotorEi+0xb8>
      case 3:  // 00
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	8c1b      	ldrh	r3, [r3, #32]
 8001362:	2200      	movs	r2, #0
 8001364:	4619      	mov	r1, r3
 8001366:	f005 f8dd 	bl	8006524 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001372:	2200      	movs	r2, #0
 8001374:	4619      	mov	r1, r3
 8001376:	f005 f8d5 	bl	8006524 <HAL_GPIO_WritePin>
      break;
 800137a:	bf00      	nop
    }
  }
  if (this->pin_count == 4) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	2b04      	cmp	r3, #4
 8001382:	f040 8093 	bne.w	80014ac <_ZN7Stepper9stepMotorEi+0x1e8>
    switch (thisStep) {
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2b03      	cmp	r3, #3
 800138a:	f200 808f 	bhi.w	80014ac <_ZN7Stepper9stepMotorEi+0x1e8>
 800138e:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <_ZN7Stepper9stepMotorEi+0xd0>)
 8001390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001394:	080013a5 	.word	0x080013a5
 8001398:	080013e7 	.word	0x080013e7
 800139c:	08001429 	.word	0x08001429
 80013a0:	0800146b 	.word	0x0800146b
      case 0:  // 1010
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	8c1b      	ldrh	r3, [r3, #32]
 80013ac:	2201      	movs	r2, #1
 80013ae:	4619      	mov	r1, r3
 80013b0:	f005 f8b8 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80013bc:	2200      	movs	r2, #0
 80013be:	4619      	mov	r1, r3
 80013c0:	f005 f8b0 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013cc:	2201      	movs	r2, #1
 80013ce:	4619      	mov	r1, r3
 80013d0:	f005 f8a8 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80013dc:	2200      	movs	r2, #0
 80013de:	4619      	mov	r1, r3
 80013e0:	f005 f8a0 	bl	8006524 <HAL_GPIO_WritePin>
      break;
 80013e4:	e062      	b.n	80014ac <_ZN7Stepper9stepMotorEi+0x1e8>
      case 1:  // 0110
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	8c1b      	ldrh	r3, [r3, #32]
 80013ee:	2200      	movs	r2, #0
 80013f0:	4619      	mov	r1, r3
 80013f2:	f005 f897 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80013fe:	2201      	movs	r2, #1
 8001400:	4619      	mov	r1, r3
 8001402:	f005 f88f 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800140e:	2201      	movs	r2, #1
 8001410:	4619      	mov	r1, r3
 8001412:	f005 f887 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800141e:	2200      	movs	r2, #0
 8001420:	4619      	mov	r1, r3
 8001422:	f005 f87f 	bl	8006524 <HAL_GPIO_WritePin>
      break;
 8001426:	e041      	b.n	80014ac <_ZN7Stepper9stepMotorEi+0x1e8>
      case 2:  //0101
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	8c1b      	ldrh	r3, [r3, #32]
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	f005 f876 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001440:	2201      	movs	r2, #1
 8001442:	4619      	mov	r1, r3
 8001444:	f005 f86e 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001450:	2200      	movs	r2, #0
 8001452:	4619      	mov	r1, r3
 8001454:	f005 f866 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001460:	2201      	movs	r2, #1
 8001462:	4619      	mov	r1, r3
 8001464:	f005 f85e 	bl	8006524 <HAL_GPIO_WritePin>
      break;
 8001468:	e020      	b.n	80014ac <_ZN7Stepper9stepMotorEi+0x1e8>
      case 3:  //1001
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	8c1b      	ldrh	r3, [r3, #32]
 8001472:	2201      	movs	r2, #1
 8001474:	4619      	mov	r1, r3
 8001476:	f005 f855 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001482:	2200      	movs	r2, #0
 8001484:	4619      	mov	r1, r3
 8001486:	f005 f84d 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001492:	2200      	movs	r2, #0
 8001494:	4619      	mov	r1, r3
 8001496:	f005 f845 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014a2:	2201      	movs	r2, #1
 80014a4:	4619      	mov	r1, r3
 80014a6:	f005 f83d 	bl	8006524 <HAL_GPIO_WritePin>
      break;
 80014aa:	bf00      	nop
    }
  }

  if (this->pin_count == 5) {
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b05      	cmp	r3, #5
 80014b2:	f040 81b5 	bne.w	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
    switch (thisStep) {
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2b09      	cmp	r3, #9
 80014ba:	f200 81b1 	bhi.w	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <_ZN7Stepper9stepMotorEi+0x200>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	080014ed 	.word	0x080014ed
 80014c8:	0800153f 	.word	0x0800153f
 80014cc:	08001591 	.word	0x08001591
 80014d0:	080015e3 	.word	0x080015e3
 80014d4:	08001635 	.word	0x08001635
 80014d8:	08001687 	.word	0x08001687
 80014dc:	080016d9 	.word	0x080016d9
 80014e0:	0800172b 	.word	0x0800172b
 80014e4:	0800177d 	.word	0x0800177d
 80014e8:	080017cf 	.word	0x080017cf
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	8c1b      	ldrh	r3, [r3, #32]
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	f005 f814 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001504:	2201      	movs	r2, #1
 8001506:	4619      	mov	r1, r3
 8001508:	f005 f80c 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001514:	2201      	movs	r2, #1
 8001516:	4619      	mov	r1, r3
 8001518:	f005 f804 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001524:	2200      	movs	r2, #0
 8001526:	4619      	mov	r1, r3
 8001528:	f004 fffc 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f004 fff4 	bl	8006524 <HAL_GPIO_WritePin>
        break;
 800153c:	e170      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	8c1b      	ldrh	r3, [r3, #32]
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	f004 ffeb 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001556:	2201      	movs	r2, #1
 8001558:	4619      	mov	r1, r3
 800155a:	f004 ffe3 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	f004 ffdb 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001576:	2200      	movs	r2, #0
 8001578:	4619      	mov	r1, r3
 800157a:	f004 ffd3 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001586:	2201      	movs	r2, #1
 8001588:	4619      	mov	r1, r3
 800158a:	f004 ffcb 	bl	8006524 <HAL_GPIO_WritePin>
        break;
 800158e:	e147      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	8c1b      	ldrh	r3, [r3, #32]
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	f004 ffc2 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80015a8:	2201      	movs	r2, #1
 80015aa:	4619      	mov	r1, r3
 80015ac:	f004 ffba 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80015b8:	2200      	movs	r2, #0
 80015ba:	4619      	mov	r1, r3
 80015bc:	f004 ffb2 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015c8:	2201      	movs	r2, #1
 80015ca:	4619      	mov	r1, r3
 80015cc:	f004 ffaa 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d8:	2201      	movs	r2, #1
 80015da:	4619      	mov	r1, r3
 80015dc:	f004 ffa2 	bl	8006524 <HAL_GPIO_WritePin>
        break;
 80015e0:	e11e      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	8c1b      	ldrh	r3, [r3, #32]
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	f004 ff99 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80015fa:	2201      	movs	r2, #1
 80015fc:	4619      	mov	r1, r3
 80015fe:	f004 ff91 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	f004 ff89 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800161a:	2201      	movs	r2, #1
 800161c:	4619      	mov	r1, r3
 800161e:	f004 ff81 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	f004 ff79 	bl	8006524 <HAL_GPIO_WritePin>
        break;
 8001632:	e0f5      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	8c1b      	ldrh	r3, [r3, #32]
 800163c:	2201      	movs	r2, #1
 800163e:	4619      	mov	r1, r3
 8001640:	f004 ff70 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800164c:	2201      	movs	r2, #1
 800164e:	4619      	mov	r1, r3
 8001650:	f004 ff68 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	f004 ff60 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800166c:	2201      	movs	r2, #1
 800166e:	4619      	mov	r1, r3
 8001670:	f004 ff58 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167c:	2200      	movs	r2, #0
 800167e:	4619      	mov	r1, r3
 8001680:	f004 ff50 	bl	8006524 <HAL_GPIO_WritePin>
        break;
 8001684:	e0cc      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	8c1b      	ldrh	r3, [r3, #32]
 800168e:	2201      	movs	r2, #1
 8001690:	4619      	mov	r1, r3
 8001692:	f004 ff47 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800169e:	2200      	movs	r2, #0
 80016a0:	4619      	mov	r1, r3
 80016a2:	f004 ff3f 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016ae:	2200      	movs	r2, #0
 80016b0:	4619      	mov	r1, r3
 80016b2:	f004 ff37 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016be:	2201      	movs	r2, #1
 80016c0:	4619      	mov	r1, r3
 80016c2:	f004 ff2f 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ce:	2200      	movs	r2, #0
 80016d0:	4619      	mov	r1, r3
 80016d2:	f004 ff27 	bl	8006524 <HAL_GPIO_WritePin>
        break;
 80016d6:	e0a3      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	8c1b      	ldrh	r3, [r3, #32]
 80016e0:	2201      	movs	r2, #1
 80016e2:	4619      	mov	r1, r3
 80016e4:	f004 ff1e 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80016f0:	2200      	movs	r2, #0
 80016f2:	4619      	mov	r1, r3
 80016f4:	f004 ff16 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001700:	2201      	movs	r2, #1
 8001702:	4619      	mov	r1, r3
 8001704:	f004 ff0e 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001710:	2201      	movs	r2, #1
 8001712:	4619      	mov	r1, r3
 8001714:	f004 ff06 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	2200      	movs	r2, #0
 8001722:	4619      	mov	r1, r3
 8001724:	f004 fefe 	bl	8006524 <HAL_GPIO_WritePin>
        break;
 8001728:	e07a      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	8c1b      	ldrh	r3, [r3, #32]
 8001732:	2201      	movs	r2, #1
 8001734:	4619      	mov	r1, r3
 8001736:	f004 fef5 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001742:	2200      	movs	r2, #0
 8001744:	4619      	mov	r1, r3
 8001746:	f004 feed 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001752:	2201      	movs	r2, #1
 8001754:	4619      	mov	r1, r3
 8001756:	f004 fee5 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001762:	2200      	movs	r2, #0
 8001764:	4619      	mov	r1, r3
 8001766:	f004 fedd 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001772:	2200      	movs	r2, #0
 8001774:	4619      	mov	r1, r3
 8001776:	f004 fed5 	bl	8006524 <HAL_GPIO_WritePin>
        break;
 800177a:	e051      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	8c1b      	ldrh	r3, [r3, #32]
 8001784:	2201      	movs	r2, #1
 8001786:	4619      	mov	r1, r3
 8001788:	f004 fecc 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001794:	2200      	movs	r2, #0
 8001796:	4619      	mov	r1, r3
 8001798:	f004 fec4 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017a4:	2201      	movs	r2, #1
 80017a6:	4619      	mov	r1, r3
 80017a8:	f004 febc 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017b4:	2200      	movs	r2, #0
 80017b6:	4619      	mov	r1, r3
 80017b8:	f004 feb4 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c4:	2201      	movs	r2, #1
 80017c6:	4619      	mov	r1, r3
 80017c8:	f004 feac 	bl	8006524 <HAL_GPIO_WritePin>
        break;
 80017cc:	e028      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	8c1b      	ldrh	r3, [r3, #32]
 80017d6:	2200      	movs	r2, #0
 80017d8:	4619      	mov	r1, r3
 80017da:	f004 fea3 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80017e6:	2200      	movs	r2, #0
 80017e8:	4619      	mov	r1, r3
 80017ea:	f004 fe9b 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017f6:	2201      	movs	r2, #1
 80017f8:	4619      	mov	r1, r3
 80017fa:	f004 fe93 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001806:	2200      	movs	r2, #0
 8001808:	4619      	mov	r1, r3
 800180a:	f004 fe8b 	bl	8006524 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001816:	2201      	movs	r2, #1
 8001818:	4619      	mov	r1, r3
 800181a:	f004 fe83 	bl	8006524 <HAL_GPIO_WritePin>
        break;
 800181e:	bf00      	nop
    }
  }
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_ZN7Stepper8honeAxisEv>:

void Stepper::honeAxis(void){
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

	// set step tracker to max step to bypass over step protection in step()
	this->step_tracker = this->max_step;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	619a      	str	r2, [r3, #24]

	while(*(this->end_stop) != 0){
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf14      	ite	ne
 8001846:	2301      	movne	r3, #1
 8001848:	2300      	moveq	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <_ZN7Stepper8honeAxisEv+0x3a>
		// give time for the end stop value to be updated by the ADC via DMA
		//todo: optimize this to make this quicker (i.e., increase ADC sample frequency)
		HAL_Delay(1);
 8001850:	2001      	movs	r0, #1
 8001852:	f002 fe47 	bl	80044e4 <HAL_Delay>



		step(-1);
 8001856:	f04f 31ff 	mov.w	r1, #4294967295
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fc9a 	bl	8001194 <_ZN7Stepper4stepEi>
	while(*(this->end_stop) != 0){
 8001860:	e7eb      	b.n	800183a <_ZN7Stepper8honeAxisEv+0x12>
	}

	step_tracker = 0;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <_ZN7Stepper9setAbsPosEl>:

void Stepper::setAbsPos(int32_t step_cnt){
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	this->steps_to_move = step_cnt - this->step_tracker;
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	1ad2      	subs	r2, r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	61da      	str	r2, [r3, #28]
	step(this->steps_to_move);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4619      	mov	r1, r3
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff fc81 	bl	8001194 <_ZN7Stepper4stepEi>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800189a:	b480      	push	{r7}
 800189c:	b085      	sub	sp, #20
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4013      	ands	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80018d2:	463b      	mov	r3, r7
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
 80018e0:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018e2:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <MX_ADC1_Init+0x114>)
 80018e4:	4a3f      	ldr	r2, [pc, #252]	; (80019e4 <MX_ADC1_Init+0x118>)
 80018e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80018e8:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <MX_ADC1_Init+0x114>)
 80018ea:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80018ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018f0:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <MX_ADC1_Init+0x114>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018f6:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <MX_ADC1_Init+0x114>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018fc:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <MX_ADC1_Init+0x114>)
 80018fe:	2201      	movs	r2, #1
 8001900:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001902:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001904:	2208      	movs	r2, #8
 8001906:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001908:	4b35      	ldr	r3, [pc, #212]	; (80019e0 <MX_ADC1_Init+0x114>)
 800190a:	2200      	movs	r2, #0
 800190c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800190e:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001910:	2201      	movs	r2, #1
 8001912:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001914:	4b32      	ldr	r3, [pc, #200]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001916:	2204      	movs	r2, #4
 8001918:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800191a:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <MX_ADC1_Init+0x114>)
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001922:	4b2f      	ldr	r3, [pc, #188]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001924:	2200      	movs	r2, #0
 8001926:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <MX_ADC1_Init+0x114>)
 800192a:	2200      	movs	r2, #0
 800192c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800192e:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001936:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001938:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800193c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800193e:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001946:	4826      	ldr	r0, [pc, #152]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001948:	f002 ffd6 	bl	80048f8 <HAL_ADC_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001952:	f001 ff5f 	bl	8003814 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <MX_ADC1_Init+0x11c>)
 8001958:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800195a:	2306      	movs	r3, #6
 800195c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800195e:	2303      	movs	r3, #3
 8001960:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001962:	237f      	movs	r3, #127	; 0x7f
 8001964:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001966:	2304      	movs	r3, #4
 8001968:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800196e:	463b      	mov	r3, r7
 8001970:	4619      	mov	r1, r3
 8001972:	481b      	ldr	r0, [pc, #108]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001974:	f003 fb6c 	bl	8005050 <HAL_ADC_ConfigChannel>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800197e:	f001 ff49 	bl	8003814 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <MX_ADC1_Init+0x120>)
 8001984:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001986:	230c      	movs	r3, #12
 8001988:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800198a:	463b      	mov	r3, r7
 800198c:	4619      	mov	r1, r3
 800198e:	4814      	ldr	r0, [pc, #80]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001990:	f003 fb5e 	bl	8005050 <HAL_ADC_ConfigChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800199a:	f001 ff3b 	bl	8003814 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800199e:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <MX_ADC1_Init+0x124>)
 80019a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80019a2:	2312      	movs	r3, #18
 80019a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a6:	463b      	mov	r3, r7
 80019a8:	4619      	mov	r1, r3
 80019aa:	480d      	ldr	r0, [pc, #52]	; (80019e0 <MX_ADC1_Init+0x114>)
 80019ac:	f003 fb50 	bl	8005050 <HAL_ADC_ConfigChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80019b6:	f001 ff2d 	bl	8003814 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_ADC1_Init+0x128>)
 80019bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80019be:	2318      	movs	r3, #24
 80019c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c2:	463b      	mov	r3, r7
 80019c4:	4619      	mov	r1, r3
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <MX_ADC1_Init+0x114>)
 80019c8:	f003 fb42 	bl	8005050 <HAL_ADC_ConfigChannel>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80019d2:	f001 ff1f 	bl	8003814 <Error_Handler>
  }

}
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20004eb8 	.word	0x20004eb8
 80019e4:	50040000 	.word	0x50040000
 80019e8:	04300002 	.word	0x04300002
 80019ec:	08600004 	.word	0x08600004
 80019f0:	0c900008 	.word	0x0c900008
 80019f4:	1d500080 	.word	0x1d500080

080019f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2e      	ldr	r2, [pc, #184]	; (8001ad0 <HAL_ADC_MspInit+0xd8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d155      	bne.n	8001ac6 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a1a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a1e:	f7ff ff3c 	bl	800189a <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a22:	2004      	movs	r0, #4
 8001a24:	f7ff ff39 	bl	800189a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f7ff ff36 	bl	800189a <LL_AHB2_GRP1_EnableClock>
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = MAG_BASE_Pin|MAG_LIGHT_Pin|MAIN_BOARD_TEMP_Pin;
 8001a2e:	2307      	movs	r3, #7
 8001a30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a32:	2303      	movs	r3, #3
 8001a34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4824      	ldr	r0, [pc, #144]	; (8001ad4 <HAL_ADC_MspInit+0xdc>)
 8001a42:	f004 fbff 	bl	8006244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_TEMP_Pin;
 8001a46:	2304      	movs	r3, #4
 8001a48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	4619      	mov	r1, r3
 8001a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5c:	f004 fbf2 	bl	8006244 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a62:	4a1e      	ldr	r2, [pc, #120]	; (8001adc <HAL_ADC_MspInit+0xe4>)
 8001a64:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a68:	2205      	movs	r2, #5
 8001a6a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a90:	2220      	movs	r2, #32
 8001a92:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a9a:	480f      	ldr	r0, [pc, #60]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a9c:	f004 f95e 	bl	8005d5c <HAL_DMA_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8001aa6:	f001 feb5 	bl	8003814 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001aae:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ab0:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2105      	movs	r1, #5
 8001aba:	2012      	movs	r0, #18
 8001abc:	f004 f8f7 	bl	8005cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001ac0:	2012      	movs	r0, #18
 8001ac2:	f004 f90e 	bl	8005ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3720      	adds	r7, #32
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	50040000 	.word	0x50040000
 8001ad4:	48000800 	.word	0x48000800
 8001ad8:	20004f1c 	.word	0x20004f1c
 8001adc:	40020008 	.word	0x40020008

08001ae0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <LL_C2_PWR_SetPowerMode+0x28>)
 8001aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aee:	f023 0207 	bic.w	r2, r3, #7
 8001af2:	4905      	ldr	r1, [pc, #20]	; (8001b08 <LL_C2_PWR_SetPowerMode+0x28>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	58000400 	.word	0x58000400

08001b0c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001b1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8001b38:	f000 f80a 	bl	8001b50 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001b3c:	4903      	ldr	r1, [pc, #12]	; (8001b4c <APPE_Init+0x18>)
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f000 ffe6 	bl	8002b10 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001b44:	f000 f812 	bl	8001b6c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001b48:	bf00      	nop
}
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20004fd8 	.word	0x20004fd8

08001b50 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001b54:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b58:	f7ff ffd8 	bl	8001b0c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001b5c:	f013 ff86 	bl	8015a6c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001b60:	2004      	movs	r0, #4
 8001b62:	f7ff ffbd 	bl	8001ae0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001b66:	bf00      	nop
}
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001b72:	f00c fc79 	bl	800e468 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001b76:	2000      	movs	r0, #0
 8001b78:	f00e fb22 	bl	80101c0 <osMutexNew>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <appe_Tl_Init+0x70>)
 8001b80:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2001      	movs	r0, #1
 8001b88:	f00e fc62 	bl	8010450 <osSemaphoreNew>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <appe_Tl_Init+0x74>)
 8001b90:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8001b92:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <appe_Tl_Init+0x78>)
 8001b94:	2100      	movs	r1, #0
 8001b96:	4814      	ldr	r0, [pc, #80]	; (8001be8 <appe_Tl_Init+0x7c>)
 8001b98:	f00e f948 	bl	800fe2c <osThreadNew>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <appe_Tl_Init+0x80>)
 8001ba0:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <appe_Tl_Init+0x84>)
 8001ba4:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <appe_Tl_Init+0x88>)
 8001ba8:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001baa:	463b      	mov	r3, r7
 8001bac:	4619      	mov	r1, r3
 8001bae:	4812      	ldr	r0, [pc, #72]	; (8001bf8 <appe_Tl_Init+0x8c>)
 8001bb0:	f00c fb20 	bl	800e1f4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <appe_Tl_Init+0x90>)
 8001bba:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <appe_Tl_Init+0x94>)
 8001bbe:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001bc0:	f240 533c 	movw	r3, #1340	; 0x53c
 8001bc4:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001bc6:	f107 0308 	add.w	r3, r7, #8
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f00c fdb6 	bl	800e73c <TL_MM_Init>

  TL_Enable();
 8001bd0:	f00c fc44 	bl	800e45c <TL_Enable>

  return;
 8001bd4:	bf00      	nop
}
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20004f7c 	.word	0x20004f7c
 8001be0:	20004f84 	.word	0x20004f84
 8001be4:	08016ff4 	.word	0x08016ff4
 8001be8:	08001ced 	.word	0x08001ced
 8001bec:	20004f80 	.word	0x20004f80
 8001bf0:	2003061c 	.word	0x2003061c
 8001bf4:	08001c05 	.word	0x08001c05
 8001bf8:	08001c45 	.word	0x08001c45
 8001bfc:	20030728 	.word	0x20030728
 8001c00:	200300e0 	.word	0x200300e0

08001c04 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <APPE_SysStatusNot+0x16>
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d008      	beq.n	8001c2a <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8001c18:	e00d      	b.n	8001c36 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <APPE_SysStatusNot+0x3c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c22:	4618      	mov	r0, r3
 8001c24:	f00e fb66 	bl	80102f4 <osMutexAcquire>
      break;
 8001c28:	e005      	b.n	8001c36 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <APPE_SysStatusNot+0x3c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f00e fbbe 	bl	80103b0 <osMutexRelease>
      break;
 8001c34:	bf00      	nop
  }
  return;
 8001c36:	bf00      	nop
}
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20004f7c 	.word	0x20004f7c

08001c44 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	330b      	adds	r3, #11
 8001c52:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8001c5e:	d004      	beq.n	8001c6a <APPE_SysUserEvtRx+0x26>
 8001c60:	f249 2201 	movw	r2, #37377	; 0x9201
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d003      	beq.n	8001c70 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001c68:	e008      	b.n	8001c7c <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001c6a:	f000 f833 	bl	8001cd4 <APPE_SysEvtReadyProcessing>
         break;
 8001c6e:	e005      	b.n	8001c7c <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	789b      	ldrb	r3, [r3, #2]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 f805 	bl	8001c84 <APPE_SysEvtError>
         break;
 8001c7a:	bf00      	nop
  }
  return;
 8001c7c:	bf00      	nop
}
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	2b7d      	cmp	r3, #125	; 0x7d
 8001c92:	d002      	beq.n	8001c9a <APPE_SysEvtError+0x16>
 8001c94:	2b7e      	cmp	r3, #126	; 0x7e
 8001c96:	d006      	beq.n	8001ca6 <APPE_SysEvtError+0x22>
 8001c98:	e00b      	b.n	8001cb2 <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <APPE_SysEvtError+0x44>)
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f002 f9d8 	bl	8004054 <logApplication>
       break;
 8001ca4:	e00c      	b.n	8001cc0 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <APPE_SysEvtError+0x48>)
 8001ca8:	2101      	movs	r1, #1
 8001caa:	2000      	movs	r0, #0
 8001cac:	f002 f9d2 	bl	8004054 <logApplication>
       break;
 8001cb0:	e006      	b.n	8001cc0 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <APPE_SysEvtError+0x4c>)
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f002 f9cb 	bl	8004054 <logApplication>
       break;
 8001cbe:	bf00      	nop
  }
  return;
 8001cc0:	bf00      	nop
}
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	08016c48 	.word	0x08016c48
 8001ccc:	08016c6c 	.word	0x08016c6c
 8001cd0:	08016c8c 	.word	0x08016c8c

08001cd4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001cd8:	f00c fda4 	bl	800e824 <TL_TRACES_Init>

  APP_THREAD_Init();
 8001cdc:	f012 f99e 	bl	801401c <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f013 fed4 	bl	8015a90 <UTIL_LPM_SetOffMode>
  return;
 8001ce8:	bf00      	nop
}
 8001cea:	bd80      	pop	{r7, pc}

08001cec <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f00e f99e 	bl	801003c <osThreadFlagsWait>
     shci_user_evt_proc();
 8001d00:	f00c fa94 	bl	800e22c <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001d04:	e7f6      	b.n	8001cf4 <ShciUserEvtProcess+0x8>
	...

08001d08 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <shci_notify_asynch_evt+0x1c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2101      	movs	r1, #1
 8001d16:	4618      	mov	r0, r3
 8001d18:	f00e f92e 	bl	800ff78 <osThreadFlagsSet>
  return;
 8001d1c:	bf00      	nop
}
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20004f80 	.word	0x20004f80

08001d28 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <shci_cmd_resp_release+0x1c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f00e fc8f 	bl	8010658 <osSemaphoreRelease>
  return;
 8001d3a:	bf00      	nop
}
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20004f84 	.word	0x20004f84

08001d48 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <shci_cmd_resp_wait+0x20>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f00e fc17 	bl	801058c <osSemaphoreAcquire>
  return;
 8001d5e:	bf00      	nop
}
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20004f84 	.word	0x20004f84

08001d6c <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f00c fd1d 	bl	800e7b4 <TL_MM_EvtDone>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <_Z16MX_FREERTOS_Initv+0x3c>)
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <_Z16MX_FREERTOS_Initv+0x40>)
 8001d8e:	f00e f84d 	bl	800fe2c <osThreadNew>
 8001d92:	4602      	mov	r2, r0
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <_Z16MX_FREERTOS_Initv+0x44>)
 8001d96:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
#ifndef SOLAR_SENSOR_NODE
  msgTaskHandle = osThreadNew(MsgTask, NULL, &msgTask_attributes);
 8001d98:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <_Z16MX_FREERTOS_Initv+0x48>)
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <_Z16MX_FREERTOS_Initv+0x4c>)
 8001d9e:	f00e f845 	bl	800fe2c <osThreadNew>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <_Z16MX_FREERTOS_Initv+0x50>)
 8001da6:	601a      	str	r2, [r3, #0]

  msgQueueHandle = osMessageQueueNew (10, sizeof(struct MeasMsg), &msgQueue_attributes);
 8001da8:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <_Z16MX_FREERTOS_Initv+0x54>)
 8001daa:	2114      	movs	r1, #20
 8001dac:	200a      	movs	r0, #10
 8001dae:	f00e fcab 	bl	8010708 <osMessageQueueNew>
 8001db2:	4602      	mov	r2, r0
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <_Z16MX_FREERTOS_Initv+0x58>)
 8001db6:	601a      	str	r2, [r3, #0]
#endif

  APPE_Init();
 8001db8:	f7ff febc 	bl	8001b34 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	08017018 	.word	0x08017018
 8001dc4:	08001de1 	.word	0x08001de1
 8001dc8:	20000324 	.word	0x20000324
 8001dcc:	0801703c 	.word	0x0801703c
 8001dd0:	08003d91 	.word	0x08003d91
 8001dd4:	20000328 	.word	0x20000328
 8001dd8:	08017060 	.word	0x08017060
 8001ddc:	2000032c 	.word	0x2000032c

08001de0 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	osDelay(100);
 8001de8:	2064      	movs	r0, #100	; 0x64
 8001dea:	f00e f9bb 	bl	8010164 <osDelay>
	myMain();
 8001dee:	f001 fe1d 	bl	8003a2c <_Z6myMainv>
  for(;;)
  {
	  osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8001df2:	f04f 32ff 	mov.w	r2, #4294967295
 8001df6:	2101      	movs	r1, #1
 8001df8:	2001      	movs	r0, #1
 8001dfa:	f00e f91f 	bl	801003c <osThreadFlagsWait>
 8001dfe:	e7f8      	b.n	8001df2 <_Z16StartDefaultTaskPv+0x12>

08001e00 <startCal>:

struct SensorSamples sensorPacket;

void startCal(float angle_base_min, float angle_base_max,
		float angle_led_min, float angle_led_max,
				Stepper& motor_base, Stepper& motor_led){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e0a:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e0e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e12:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]

	// configure calMsg packet
	calMsg.UID = SPOTLIGHT_UID;
 8001e1a:	4b60      	ldr	r3, [pc, #384]	; (8001f9c <startCal+0x19c>)
 8001e1c:	2218      	movs	r2, #24
 8001e1e:	701a      	strb	r2, [r3, #0]
	calMsg.cal_code = CALIBRATION_START_COMMAND;
 8001e20:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <startCal+0x19c>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	705a      	strb	r2, [r3, #1]

	/* (1) hone axis */
	motor_base.honeAxis();
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fcfe 	bl	8001828 <_ZN7Stepper8honeAxisEv>
	motor_led.honeAxis();
 8001e2c:	6838      	ldr	r0, [r7, #0]
 8001e2e:	f7ff fcfb 	bl	8001828 <_ZN7Stepper8honeAxisEv>

	/* (2) multicast that calibration will begin */

	// clear current calibration table
	memset(calibration_table,0,sizeof(calibration_table));
 8001e32:	2250      	movs	r2, #80	; 0x50
 8001e34:	2100      	movs	r1, #0
 8001e36:	485a      	ldr	r0, [pc, #360]	; (8001fa0 <startCal+0x1a0>)
 8001e38:	f014 fee5 	bl	8016c06 <memset>

	broadcastCalStart(&calMsg); //TODO: implement
 8001e3c:	4857      	ldr	r0, [pc, #348]	; (8001f9c <startCal+0x19c>)
 8001e3e:	f000 f91f 	bl	8002080 <broadcastCalStart>
	/* (3) wait for nodes to ACK and populate a table with the UIDs */

	// note: nodes will be replying to a Coap server (code exists in app_thread.c for populating of table)

	// wait for nodes to reply with their IDs
	osDelay(CAL_INIT_CAL_TIMEOUT);
 8001e42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e46:	f00e f98d 	bl	8010164 <osDelay>
	/* (4) Run through each position, sending an msg to each node indicating the angle is set
	 * and waiting for said nodes to respond with their solar power measurements. If node does
	 * not reply within CAL_POS_TIMEOUT, re-send msg and wait one more cycle before continuing.
	 */
		// calculate step bounds for each axis
		int32_t min_led_axis_step = (((angle_led_min) * LED_STEP_RANGE));
 8001e4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e4e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001fa4 <startCal+0x1a4>
 8001e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e5a:	ee17 3a90 	vmov	r3, s15
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
		int32_t max_led_axis_step = (((angle_led_max) * LED_STEP_RANGE));
 8001e60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e64:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001fa4 <startCal+0x1a4>
 8001e68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e70:	ee17 3a90 	vmov	r3, s15
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
		int32_t min_base_axis_step = (((angle_base_min) * BASE_STEP_RANGE));
 8001e76:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e7a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001fa8 <startCal+0x1a8>
 8001e7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e86:	ee17 3a90 	vmov	r3, s15
 8001e8a:	623b      	str	r3, [r7, #32]
		int32_t max_base_axis_step = (((angle_base_max) * BASE_STEP_RANGE));
 8001e8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e90:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001fa8 <startCal+0x1a8>
 8001e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e9c:	ee17 3a90 	vmov	r3, s15
 8001ea0:	61fb      	str	r3, [r7, #28]

		if( (max_base_axis_step == 0) && (min_base_axis_step == 0)){
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <startCal+0xb4>
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <startCal+0xb4>
			perpetual_record = 1;
 8001eae:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <startCal+0x1ac>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
		}

		if(perpetual_record == 1){
 8001eb4:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <startCal+0x1ac>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d10b      	bne.n	8001ed4 <startCal+0xd4>
			while(true){
				getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8001ebc:	4b3c      	ldr	r3, [pc, #240]	; (8001fb0 <startCal+0x1b0>)
 8001ebe:	6819      	ldr	r1, [r3, #0]
 8001ec0:	4b3c      	ldr	r3, [pc, #240]	; (8001fb4 <startCal+0x1b4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4835      	ldr	r0, [pc, #212]	; (8001f9c <startCal+0x19c>)
 8001ec8:	f000 f91e 	bl	8002108 <getMeasurementsFromNodes>
				osDelay(SPOTLIGHT_INTERVAL_DELAY);
 8001ecc:	2064      	movs	r0, #100	; 0x64
 8001ece:	f00e f949 	bl	8010164 <osDelay>
				getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8001ed2:	e7f3      	b.n	8001ebc <startCal+0xbc>
			}
		}
		else{
			// move to desired angle
			uint8_t flip_dir = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for(base_step = min_base_axis_step; base_step <= max_base_axis_step; base_step += (BASE_CAL_STEP_MULTI * BASE_MIN_ANGLE_STEP)){
 8001eda:	4a35      	ldr	r2, [pc, #212]	; (8001fb0 <startCal+0x1b0>)
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b33      	ldr	r3, [pc, #204]	; (8001fb0 <startCal+0x1b0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	69fa      	ldr	r2, [r7, #28]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	db50      	blt.n	8001f8c <startCal+0x18c>
				motor_base.setAbsPos(base_step);
 8001eea:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <startCal+0x1b0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff fcbd 	bl	8001870 <_ZN7Stepper9setAbsPosEl>

				if(flip_dir == 0){
 8001ef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d120      	bne.n	8001f40 <startCal+0x140>
					for(led_step = min_led_axis_step; led_step <= max_led_axis_step; led_step += (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8001efe:	4a2d      	ldr	r2, [pc, #180]	; (8001fb4 <startCal+0x1b4>)
 8001f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <startCal+0x1b4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	db14      	blt.n	8001f38 <startCal+0x138>
						motor_led.setAbsPos(led_step);
 8001f0e:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <startCal+0x1b4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4619      	mov	r1, r3
 8001f14:	6838      	ldr	r0, [r7, #0]
 8001f16:	f7ff fcab 	bl	8001870 <_ZN7Stepper9setAbsPosEl>
						osDelay(SPOTLIGHT_INTERVAL_DELAY);
 8001f1a:	2064      	movs	r0, #100	; 0x64
 8001f1c:	f00e f922 	bl	8010164 <osDelay>

#ifdef SOLAR_MEAS_EN
						getMeasurementsFromNodes(&calMsg, base_step, led_step);
#endif
						sampleSensors(&sensorPacket);
 8001f20:	4825      	ldr	r0, [pc, #148]	; (8001fb8 <startCal+0x1b8>)
 8001f22:	f000 f84b 	bl	8001fbc <sampleSensors>
						sendSensorMeas_USB(&sensorPacket);
 8001f26:	4824      	ldr	r0, [pc, #144]	; (8001fb8 <startCal+0x1b8>)
 8001f28:	f001 ff78 	bl	8003e1c <sendSensorMeas_USB>
					for(led_step = min_led_axis_step; led_step <= max_led_axis_step; led_step += (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8001f2c:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <startCal+0x1b4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3348      	adds	r3, #72	; 0x48
 8001f32:	4a20      	ldr	r2, [pc, #128]	; (8001fb4 <startCal+0x1b4>)
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e7e5      	b.n	8001f04 <startCal+0x104>

	#else
						osDelay(100);
	#endif
					}
					flip_dir = 1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001f3e:	e01f      	b.n	8001f80 <startCal+0x180>
				}
				else{
					for(led_step = max_led_axis_step; led_step >= min_led_axis_step; led_step -= (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8001f40:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <startCal+0x1b4>)
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <startCal+0x1b4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	dc14      	bgt.n	8001f7a <startCal+0x17a>
						motor_led.setAbsPos(led_step);
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <startCal+0x1b4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	6838      	ldr	r0, [r7, #0]
 8001f58:	f7ff fc8a 	bl	8001870 <_ZN7Stepper9setAbsPosEl>
						osDelay(SPOTLIGHT_INTERVAL_DELAY);
 8001f5c:	2064      	movs	r0, #100	; 0x64
 8001f5e:	f00e f901 	bl	8010164 <osDelay>
#ifdef SOLAR_MEAS_EN
						getMeasurementsFromNodes(&calMsg, base_step, led_step);
#endif
						sampleSensors(&sensorPacket);
 8001f62:	4815      	ldr	r0, [pc, #84]	; (8001fb8 <startCal+0x1b8>)
 8001f64:	f000 f82a 	bl	8001fbc <sampleSensors>
						sendSensorMeas_USB(&sensorPacket);
 8001f68:	4813      	ldr	r0, [pc, #76]	; (8001fb8 <startCal+0x1b8>)
 8001f6a:	f001 ff57 	bl	8003e1c <sendSensorMeas_USB>
					for(led_step = max_led_axis_step; led_step >= min_led_axis_step; led_step -= (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <startCal+0x1b4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	3b48      	subs	r3, #72	; 0x48
 8001f74:	4a0f      	ldr	r2, [pc, #60]	; (8001fb4 <startCal+0x1b4>)
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	e7e5      	b.n	8001f46 <startCal+0x146>
#endif
	#else
						osDelay(100);
	#endif
					}
					flip_dir = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for(base_step = min_base_axis_step; base_step <= max_base_axis_step; base_step += (BASE_CAL_STEP_MULTI * BASE_MIN_ANGLE_STEP)){
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <startCal+0x1b0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	333c      	adds	r3, #60	; 0x3c
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <startCal+0x1b0>)
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e7a9      	b.n	8001ee0 <startCal+0xe0>
			}

		}

//	/* (5) send calibration complete message to all nodes */
		broadcastCalComplete(&calMsg);
 8001f8c:	4803      	ldr	r0, [pc, #12]	; (8001f9c <startCal+0x19c>)
 8001f8e:	f000 f899 	bl	80020c4 <broadcastCalComplete>

}
 8001f92:	bf00      	nop
 8001f94:	3730      	adds	r7, #48	; 0x30
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000380 	.word	0x20000380
 8001fa0:	20000330 	.word	0x20000330
 8001fa4:	46f24600 	.word	0x46f24600
 8001fa8:	45c06000 	.word	0x45c06000
 8001fac:	20000394 	.word	0x20000394
 8001fb0:	20000390 	.word	0x20000390
 8001fb4:	2000038c 	.word	0x2000038c
 8001fb8:	20000398 	.word	0x20000398

08001fbc <sampleSensors>:
#endif


void sampleSensors(struct SensorSamples* packet){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	packet->temp = calipile_getTPOBJ();
 8001fc4:	f7fe fe8a 	bl	8000cdc <calipile_getTPOBJ>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	601a      	str	r2, [r3, #0]
	packet->temp_amb = calipile_getTPAMB();
 8001fd0:	f7fe fe68 	bl	8000ca4 <calipile_getTPAMB>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	605a      	str	r2, [r3, #4]

	packet->conv_temp_amb = calipile_getTamb(packet->temp_amb);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe feb4 	bl	8000d50 <calipile_getTamb>
 8001fe8:	eef0 7a40 	vmov.f32	s15, s0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	edc3 7a03 	vstr	s15, [r3, #12]
	packet->conv_temp = calipile_getTobj(packet->temp, packet->conv_temp_amb );
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8002000:	4610      	mov	r0, r2
 8002002:	f7fe fed9 	bl	8000db8 <calipile_getTobj>
 8002006:	eef0 7a40 	vmov.f32	s15, s0
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	edc3 7a02 	vstr	s15, [r3, #8]
	packet->tp_presence = calipile_getTPPRESENCE();
 8002010:	f7fe fe84 	bl	8000d1c <calipile_getTPPRESENCE>
 8002014:	4603      	mov	r3, r0
 8002016:	b29a      	uxth	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	821a      	strh	r2, [r3, #16]
	packet->tp_motion = calipile_getTPMOTION();
 800201c:	f7fe fe8b 	bl	8000d36 <calipile_getTPMOTION>
 8002020:	4603      	mov	r3, r0
 8002022:	b29a      	uxth	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	825a      	strh	r2, [r3, #18]

	light_getRawData(&packet->r, &packet->g, &packet->b, &packet->c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f103 0014 	add.w	r0, r3, #20
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f103 0116 	add.w	r1, r3, #22
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f103 0218 	add.w	r2, r3, #24
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	331a      	adds	r3, #26
 800203e:	f001 f995 	bl	800336c <light_getRawData>
	// colorTemp = tcs.calculateColorTemperature(r, g, b);
	packet->colorTemp = light_calculateColorTemperature_dn40(packet->r, packet->g, packet->b, packet->c);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	8a98      	ldrh	r0, [r3, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	8ad9      	ldrh	r1, [r3, #22]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	8b1a      	ldrh	r2, [r3, #24]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	8b5b      	ldrh	r3, [r3, #26]
 8002052:	f001 f9df 	bl	8003414 <light_calculateColorTemperature_dn40>
 8002056:	4603      	mov	r3, r0
 8002058:	461a      	mov	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	839a      	strh	r2, [r3, #28]
	packet->lux = light_calculateLux(packet->r, packet->g, packet->b);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	8a98      	ldrh	r0, [r3, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	8ad9      	ldrh	r1, [r3, #22]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	8b1b      	ldrh	r3, [r3, #24]
 800206a:	461a      	mov	r2, r3
 800206c:	f001 fa40 	bl	80034f0 <light_calculateLux>
 8002070:	4603      	mov	r3, r0
 8002072:	461a      	mov	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	83da      	strh	r2, [r3, #30]
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <broadcastCalStart>:

void broadcastCalStart(CalMsg* msg){
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af04      	add	r7, sp, #16
 8002086:	6078      	str	r0, [r7, #4]

	msg->cal_fcn = CALIBRATION_START_COMMAND;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = 0;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	605a      	str	r2, [r3, #4]
	msg->angle_2 = 0;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]

	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 800209a:	2301      	movs	r3, #1
 800209c:	9302      	str	r3, [sp, #8]
 800209e:	2303      	movs	r3, #3
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	2301      	movs	r3, #1
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <broadcastCalStart+0x3c>)
 80020a8:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <broadcastCalStart+0x40>)
 80020aa:	210c      	movs	r1, #12
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f012 fa8d 	bl	80145cc <APP_THREAD_SendCoapMsg>
			&multicastAddr, nodeCalResource,
			REQUEST_ACK, OT_COAP_CODE_PUT, 1U);

	return;
 80020b2:	bf00      	nop
}
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	08017174 	.word	0x08017174
 80020c0:	20005138 	.word	0x20005138

080020c4 <broadcastCalComplete>:

void broadcastCalComplete(CalMsg* msg){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af04      	add	r7, sp, #16
 80020ca:	6078      	str	r0, [r7, #4]

	msg->cal_fcn = CALIBRATION_START_COMMAND;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = 0;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	605a      	str	r2, [r3, #4]
	msg->angle_2 = 0;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]

	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 80020de:	2301      	movs	r3, #1
 80020e0:	9302      	str	r3, [sp, #8]
 80020e2:	2303      	movs	r3, #3
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	2301      	movs	r3, #1
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <broadcastCalComplete+0x3c>)
 80020ec:	4a05      	ldr	r2, [pc, #20]	; (8002104 <broadcastCalComplete+0x40>)
 80020ee:	210c      	movs	r1, #12
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f012 fa6b 	bl	80145cc <APP_THREAD_SendCoapMsg>
			&multicastAddr, nodeCalResource,
			REQUEST_ACK, OT_COAP_CODE_PUT, 1U);

	return;
 80020f6:	bf00      	nop
}
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	08017174 	.word	0x08017174
 8002104:	20005138 	.word	0x20005138

08002108 <getMeasurementsFromNodes>:

void getMeasurementsFromNodes(CalMsg* msg, int32_t angle_1, int32_t angle_2){
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af04      	add	r7, sp, #16
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]

	msg->cal_fcn = CALIBRATION_GET_MEAS;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2202      	movs	r2, #2
 8002118:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = angle_1;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	605a      	str	r2, [r3, #4]
	msg->angle_2 = angle_2;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	609a      	str	r2, [r3, #8]

#ifndef DEBUG_SERIAL
	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 8002126:	2301      	movs	r3, #1
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	2301      	movs	r3, #1
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	2301      	movs	r3, #1
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <getMeasurementsFromNodes+0x40>)
 8002134:	4a05      	ldr	r2, [pc, #20]	; (800214c <getMeasurementsFromNodes+0x44>)
 8002136:	210c      	movs	r1, #12
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f012 fa47 	bl	80145cc <APP_THREAD_SendCoapMsg>
#else
	// TODO REMOVE!!!
	measMsgReceivedFromNode(&measMsg);
#endif

	return;
 800213e:	bf00      	nop
}
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	08017174 	.word	0x08017174
 800214c:	20005138 	.word	0x20005138

08002150 <LL_AHB1_GRP1_EnableClock>:
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800215e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4313      	orrs	r3, r2
 8002166:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4013      	ands	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002174:	68fb      	ldr	r3, [r7, #12]
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002186:	2004      	movs	r0, #4
 8002188:	f7ff ffe2 	bl	8002150 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800218c:	2001      	movs	r0, #1
 800218e:	f7ff ffdf 	bl	8002150 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2105      	movs	r1, #5
 8002196:	200b      	movs	r0, #11
 8002198:	f003 fd89 	bl	8005cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800219c:	200b      	movs	r0, #11
 800219e:	f003 fda0 	bl	8005ce2 <HAL_NVIC_EnableIRQ>

}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <LL_AHB2_GRP1_EnableClock>:
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4013      	ands	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002200:	2004      	movs	r0, #4
 8002202:	f7ff ffda 	bl	80021ba <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002206:	2002      	movs	r0, #2
 8002208:	f7ff ffd7 	bl	80021ba <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800220c:	2001      	movs	r0, #1
 800220e:	f7ff ffd4 	bl	80021ba <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002212:	2010      	movs	r0, #16
 8002214:	f7ff ffd1 	bl	80021ba <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 8002218:	2200      	movs	r2, #0
 800221a:	f240 3193 	movw	r1, #915	; 0x393
 800221e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002222:	f004 f97f 	bl	8006524 <HAL_GPIO_WritePin>
                          |AIN1_1_Pin|BIN1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BIN1_2_Pin|BIN2_2_Pin|BIN2_1_Pin, GPIO_PIN_RESET);
 8002226:	2200      	movs	r2, #0
 8002228:	f44f 4198 	mov.w	r1, #19456	; 0x4c00
 800222c:	4823      	ldr	r0, [pc, #140]	; (80022bc <MX_GPIO_Init+0xd0>)
 800222e:	f004 f979 	bl	8006524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLUE_LED_Pin|GREEN_LED_Pin, GPIO_PIN_SET);
 8002232:	2201      	movs	r2, #1
 8002234:	2103      	movs	r1, #3
 8002236:	4821      	ldr	r0, [pc, #132]	; (80022bc <MX_GPIO_Init+0xd0>)
 8002238:	f004 f974 	bl	8006524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800223c:	2201      	movs	r2, #1
 800223e:	2110      	movs	r1, #16
 8002240:	481f      	ldr	r0, [pc, #124]	; (80022c0 <MX_GPIO_Init+0xd4>)
 8002242:	f004 f96f 	bl	8006524 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 8002246:	f240 3393 	movw	r3, #915	; 0x393
 800224a:	607b      	str	r3, [r7, #4]
                          |AIN1_1_Pin|BIN1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224c:	2301      	movs	r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	4619      	mov	r1, r3
 800225c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002260:	f003 fff0 	bl	8006244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_LED_DISC_Pin;
 8002264:	2308      	movs	r3, #8
 8002266:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(INT_LED_DISC_GPIO_Port, &GPIO_InitStruct);
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	4619      	mov	r1, r3
 8002274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002278:	f003 ffe4 	bl	8006244 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BIN1_2_Pin|BIN2_2_Pin|BLUE_LED_Pin|GREEN_LED_Pin
 800227c:	f644 4303 	movw	r3, #19459	; 0x4c03
 8002280:	607b      	str	r3, [r7, #4]
                          |BIN2_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002282:	2301      	movs	r3, #1
 8002284:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	4619      	mov	r1, r3
 8002292:	480a      	ldr	r0, [pc, #40]	; (80022bc <MX_GPIO_Init+0xd0>)
 8002294:	f003 ffd6 	bl	8006244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8002298:	2310      	movs	r3, #16
 800229a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229c:	2301      	movs	r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	4619      	mov	r1, r3
 80022ac:	4804      	ldr	r0, [pc, #16]	; (80022c0 <MX_GPIO_Init+0xd4>)
 80022ae:	f003 ffc9 	bl	8006244 <HAL_GPIO_Init>

}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	48000400 	.word	0x48000400
 80022c0:	48001000 	.word	0x48001000

080022c4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <LL_EXTI_EnableIT_0_31+0x24>)
 80022ce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80022d2:	4905      	ldr	r1, [pc, #20]	; (80022e8 <LL_EXTI_EnableIT_0_31+0x24>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	58000800 	.word	0x58000800

080022ec <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4904      	ldr	r1, [pc, #16]	; (800230c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]

}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	58000800 	.word	0x58000800

08002310 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002316:	4b0d      	ldr	r3, [pc, #52]	; (800234c <ReadRtcSsrValue+0x3c>)
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	b29b      	uxth	r3, r3
 800231c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <ReadRtcSsrValue+0x3c>)
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	b29b      	uxth	r3, r3
 8002324:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002326:	e005      	b.n	8002334 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <ReadRtcSsrValue+0x3c>)
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	b29b      	uxth	r3, r3
 8002332:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d1f5      	bne.n	8002328 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800233c:	683b      	ldr	r3, [r7, #0]
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40002800 	.word	0x40002800

08002350 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	460a      	mov	r2, r1
 800235a:	71fb      	strb	r3, [r7, #7]
 800235c:	4613      	mov	r3, r2
 800235e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002360:	79ba      	ldrb	r2, [r7, #6]
 8002362:	491d      	ldr	r1, [pc, #116]	; (80023d8 <LinkTimerAfter+0x88>)
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	3315      	adds	r3, #21
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2b06      	cmp	r3, #6
 8002378:	d009      	beq.n	800238e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	4916      	ldr	r1, [pc, #88]	; (80023d8 <LinkTimerAfter+0x88>)
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	3314      	adds	r3, #20
 800238a:	79fa      	ldrb	r2, [r7, #7]
 800238c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800238e:	79fa      	ldrb	r2, [r7, #7]
 8002390:	4911      	ldr	r1, [pc, #68]	; (80023d8 <LinkTimerAfter+0x88>)
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	440b      	add	r3, r1
 800239c:	3315      	adds	r3, #21
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80023a2:	79fa      	ldrb	r2, [r7, #7]
 80023a4:	490c      	ldr	r1, [pc, #48]	; (80023d8 <LinkTimerAfter+0x88>)
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	440b      	add	r3, r1
 80023b0:	3314      	adds	r3, #20
 80023b2:	79ba      	ldrb	r2, [r7, #6]
 80023b4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80023b6:	79ba      	ldrb	r2, [r7, #6]
 80023b8:	4907      	ldr	r1, [pc, #28]	; (80023d8 <LinkTimerAfter+0x88>)
 80023ba:	4613      	mov	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	440b      	add	r3, r1
 80023c4:	3315      	adds	r3, #21
 80023c6:	79fa      	ldrb	r2, [r7, #7]
 80023c8:	701a      	strb	r2, [r3, #0]

  return;
 80023ca:	bf00      	nop
}
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	2000024c 	.word	0x2000024c

080023dc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	460a      	mov	r2, r1
 80023e6:	71fb      	strb	r3, [r7, #7]
 80023e8:	4613      	mov	r3, r2
 80023ea:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80023ec:	4b29      	ldr	r3, [pc, #164]	; (8002494 <LinkTimerBefore+0xb8>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	79ba      	ldrb	r2, [r7, #6]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d032      	beq.n	800245e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80023f8:	79ba      	ldrb	r2, [r7, #6]
 80023fa:	4927      	ldr	r1, [pc, #156]	; (8002498 <LinkTimerBefore+0xbc>)
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	3314      	adds	r3, #20
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	4922      	ldr	r1, [pc, #136]	; (8002498 <LinkTimerBefore+0xbc>)
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	3315      	adds	r3, #21
 800241c:	79fa      	ldrb	r2, [r7, #7]
 800241e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002420:	79fa      	ldrb	r2, [r7, #7]
 8002422:	491d      	ldr	r1, [pc, #116]	; (8002498 <LinkTimerBefore+0xbc>)
 8002424:	4613      	mov	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	440b      	add	r3, r1
 800242e:	3315      	adds	r3, #21
 8002430:	79ba      	ldrb	r2, [r7, #6]
 8002432:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002434:	79fa      	ldrb	r2, [r7, #7]
 8002436:	4918      	ldr	r1, [pc, #96]	; (8002498 <LinkTimerBefore+0xbc>)
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	3314      	adds	r3, #20
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002448:	79ba      	ldrb	r2, [r7, #6]
 800244a:	4913      	ldr	r1, [pc, #76]	; (8002498 <LinkTimerBefore+0xbc>)
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	3314      	adds	r3, #20
 8002458:	79fa      	ldrb	r2, [r7, #7]
 800245a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800245c:	e014      	b.n	8002488 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800245e:	79fa      	ldrb	r2, [r7, #7]
 8002460:	490d      	ldr	r1, [pc, #52]	; (8002498 <LinkTimerBefore+0xbc>)
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	440b      	add	r3, r1
 800246c:	3315      	adds	r3, #21
 800246e:	79ba      	ldrb	r2, [r7, #6]
 8002470:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002472:	79ba      	ldrb	r2, [r7, #6]
 8002474:	4908      	ldr	r1, [pc, #32]	; (8002498 <LinkTimerBefore+0xbc>)
 8002476:	4613      	mov	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4413      	add	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	440b      	add	r3, r1
 8002480:	3314      	adds	r3, #20
 8002482:	79fa      	ldrb	r2, [r7, #7]
 8002484:	701a      	strb	r2, [r3, #0]
  return;
 8002486:	bf00      	nop
}
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	200002dc 	.word	0x200002dc
 8002498:	2000024c 	.word	0x2000024c

0800249c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80024a6:	4b4e      	ldr	r3, [pc, #312]	; (80025e0 <linkTimer+0x144>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b06      	cmp	r3, #6
 80024ae:	d118      	bne.n	80024e2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80024b0:	4b4b      	ldr	r3, [pc, #300]	; (80025e0 <linkTimer+0x144>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4b4b      	ldr	r3, [pc, #300]	; (80025e4 <linkTimer+0x148>)
 80024b8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80024ba:	4a49      	ldr	r2, [pc, #292]	; (80025e0 <linkTimer+0x144>)
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80024c0:	79fa      	ldrb	r2, [r7, #7]
 80024c2:	4949      	ldr	r1, [pc, #292]	; (80025e8 <linkTimer+0x14c>)
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	440b      	add	r3, r1
 80024ce:	3315      	adds	r3, #21
 80024d0:	2206      	movs	r2, #6
 80024d2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80024d4:	4b45      	ldr	r3, [pc, #276]	; (80025ec <linkTimer+0x150>)
 80024d6:	f04f 32ff 	mov.w	r2, #4294967295
 80024da:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	81fb      	strh	r3, [r7, #14]
 80024e0:	e078      	b.n	80025d4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80024e2:	f000 f909 	bl	80026f8 <ReturnTimeElapsed>
 80024e6:	4603      	mov	r3, r0
 80024e8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80024ea:	79fa      	ldrb	r2, [r7, #7]
 80024ec:	493e      	ldr	r1, [pc, #248]	; (80025e8 <linkTimer+0x14c>)
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	440b      	add	r3, r1
 80024f8:	3308      	adds	r3, #8
 80024fa:	6819      	ldr	r1, [r3, #0]
 80024fc:	89fb      	ldrh	r3, [r7, #14]
 80024fe:	79fa      	ldrb	r2, [r7, #7]
 8002500:	4419      	add	r1, r3
 8002502:	4839      	ldr	r0, [pc, #228]	; (80025e8 <linkTimer+0x14c>)
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4403      	add	r3, r0
 800250e:	3308      	adds	r3, #8
 8002510:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002512:	79fa      	ldrb	r2, [r7, #7]
 8002514:	4934      	ldr	r1, [pc, #208]	; (80025e8 <linkTimer+0x14c>)
 8002516:	4613      	mov	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4413      	add	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	440b      	add	r3, r1
 8002520:	3308      	adds	r3, #8
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002526:	4b2e      	ldr	r3, [pc, #184]	; (80025e0 <linkTimer+0x144>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	4619      	mov	r1, r3
 800252e:	4a2e      	ldr	r2, [pc, #184]	; (80025e8 <linkTimer+0x14c>)
 8002530:	460b      	mov	r3, r1
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	440b      	add	r3, r1
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	3308      	adds	r3, #8
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	429a      	cmp	r2, r3
 8002542:	d337      	bcc.n	80025b4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002544:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <linkTimer+0x144>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800254a:	7b7a      	ldrb	r2, [r7, #13]
 800254c:	4926      	ldr	r1, [pc, #152]	; (80025e8 <linkTimer+0x14c>)
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	440b      	add	r3, r1
 8002558:	3315      	adds	r3, #21
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800255e:	e013      	b.n	8002588 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002560:	7b7a      	ldrb	r2, [r7, #13]
 8002562:	4921      	ldr	r1, [pc, #132]	; (80025e8 <linkTimer+0x14c>)
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	440b      	add	r3, r1
 800256e:	3315      	adds	r3, #21
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002574:	7b7a      	ldrb	r2, [r7, #13]
 8002576:	491c      	ldr	r1, [pc, #112]	; (80025e8 <linkTimer+0x14c>)
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	440b      	add	r3, r1
 8002582:	3315      	adds	r3, #21
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002588:	7b3b      	ldrb	r3, [r7, #12]
 800258a:	2b06      	cmp	r3, #6
 800258c:	d00b      	beq.n	80025a6 <linkTimer+0x10a>
 800258e:	7b3a      	ldrb	r2, [r7, #12]
 8002590:	4915      	ldr	r1, [pc, #84]	; (80025e8 <linkTimer+0x14c>)
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	440b      	add	r3, r1
 800259c:	3308      	adds	r3, #8
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d2dc      	bcs.n	8002560 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80025a6:	7b7a      	ldrb	r2, [r7, #13]
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fecf 	bl	8002350 <LinkTimerAfter>
 80025b2:	e00f      	b.n	80025d4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80025b4:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <linkTimer+0x144>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ff0c 	bl	80023dc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <linkTimer+0x144>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <linkTimer+0x148>)
 80025cc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80025ce:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <linkTimer+0x144>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80025d4:	89fb      	ldrh	r3, [r7, #14]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200002dc 	.word	0x200002dc
 80025e4:	200002dd 	.word	0x200002dd
 80025e8:	2000024c 	.word	0x2000024c
 80025ec:	200002e0 	.word	0x200002e0

080025f0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	460a      	mov	r2, r1
 80025fa:	71fb      	strb	r3, [r7, #7]
 80025fc:	4613      	mov	r3, r2
 80025fe:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002600:	4b39      	ldr	r3, [pc, #228]	; (80026e8 <UnlinkTimer+0xf8>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	79fa      	ldrb	r2, [r7, #7]
 8002608:	429a      	cmp	r2, r3
 800260a:	d111      	bne.n	8002630 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800260c:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <UnlinkTimer+0xf8>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4b36      	ldr	r3, [pc, #216]	; (80026ec <UnlinkTimer+0xfc>)
 8002614:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002616:	79fa      	ldrb	r2, [r7, #7]
 8002618:	4935      	ldr	r1, [pc, #212]	; (80026f0 <UnlinkTimer+0x100>)
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	440b      	add	r3, r1
 8002624:	3315      	adds	r3, #21
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <UnlinkTimer+0xf8>)
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e03e      	b.n	80026ae <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002630:	79fa      	ldrb	r2, [r7, #7]
 8002632:	492f      	ldr	r1, [pc, #188]	; (80026f0 <UnlinkTimer+0x100>)
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	440b      	add	r3, r1
 800263e:	3314      	adds	r3, #20
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002644:	79fa      	ldrb	r2, [r7, #7]
 8002646:	492a      	ldr	r1, [pc, #168]	; (80026f0 <UnlinkTimer+0x100>)
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	3315      	adds	r3, #21
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002658:	79f9      	ldrb	r1, [r7, #7]
 800265a:	7bfa      	ldrb	r2, [r7, #15]
 800265c:	4824      	ldr	r0, [pc, #144]	; (80026f0 <UnlinkTimer+0x100>)
 800265e:	460b      	mov	r3, r1
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	440b      	add	r3, r1
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4403      	add	r3, r0
 8002668:	3315      	adds	r3, #21
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	b2d8      	uxtb	r0, r3
 800266e:	4920      	ldr	r1, [pc, #128]	; (80026f0 <UnlinkTimer+0x100>)
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	440b      	add	r3, r1
 800267a:	3315      	adds	r3, #21
 800267c:	4602      	mov	r2, r0
 800267e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002680:	7bbb      	ldrb	r3, [r7, #14]
 8002682:	2b06      	cmp	r3, #6
 8002684:	d013      	beq.n	80026ae <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002686:	79f9      	ldrb	r1, [r7, #7]
 8002688:	7bba      	ldrb	r2, [r7, #14]
 800268a:	4819      	ldr	r0, [pc, #100]	; (80026f0 <UnlinkTimer+0x100>)
 800268c:	460b      	mov	r3, r1
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	440b      	add	r3, r1
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4403      	add	r3, r0
 8002696:	3314      	adds	r3, #20
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b2d8      	uxtb	r0, r3
 800269c:	4914      	ldr	r1, [pc, #80]	; (80026f0 <UnlinkTimer+0x100>)
 800269e:	4613      	mov	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	3314      	adds	r3, #20
 80026aa:	4602      	mov	r2, r0
 80026ac:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80026ae:	79fa      	ldrb	r2, [r7, #7]
 80026b0:	490f      	ldr	r1, [pc, #60]	; (80026f0 <UnlinkTimer+0x100>)
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	440b      	add	r3, r1
 80026bc:	330c      	adds	r3, #12
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <UnlinkTimer+0xf8>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b06      	cmp	r3, #6
 80026ca:	d107      	bne.n	80026dc <UnlinkTimer+0xec>
 80026cc:	79bb      	ldrb	r3, [r7, #6]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d104      	bne.n	80026dc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <UnlinkTimer+0x104>)
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295
 80026d8:	601a      	str	r2, [r3, #0]
  }

  return;
 80026da:	bf00      	nop
 80026dc:	bf00      	nop
}
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	200002dc 	.word	0x200002dc
 80026ec:	200002dd 	.word	0x200002dd
 80026f0:	2000024c 	.word	0x2000024c
 80026f4:	200002e0 	.word	0x200002e0

080026f8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <ReturnTimeElapsed+0x70>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002706:	d026      	beq.n	8002756 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002708:	f7ff fe02 	bl	8002310 <ReadRtcSsrValue>
 800270c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <ReturnTimeElapsed+0x70>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	429a      	cmp	r2, r3
 8002716:	d805      	bhi.n	8002724 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <ReturnTimeElapsed+0x70>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	e00a      	b.n	800273a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <ReturnTimeElapsed+0x74>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002730:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <ReturnTimeElapsed+0x70>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	4413      	add	r3, r2
 8002738:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <ReturnTimeElapsed+0x78>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	fb02 f303 	mul.w	r3, r2, r3
 8002746:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <ReturnTimeElapsed+0x7c>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	40d3      	lsrs	r3, r2
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	e001      	b.n	800275a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	b29b      	uxth	r3, r3
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	200002e0 	.word	0x200002e0
 800276c:	200003be 	.word	0x200003be
 8002770:	200003bd 	.word	0x200003bd
 8002774:	200003bc 	.word	0x200003bc

08002778 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d108      	bne.n	800279a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002788:	f7ff fdc2 	bl	8002310 <ReadRtcSsrValue>
 800278c:	4602      	mov	r2, r0
 800278e:	4b24      	ldr	r3, [pc, #144]	; (8002820 <RestartWakeupCounter+0xa8>)
 8002790:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002792:	2003      	movs	r0, #3
 8002794:	f003 fac5 	bl	8005d22 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002798:	e03e      	b.n	8002818 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d803      	bhi.n	80027a8 <RestartWakeupCounter+0x30>
 80027a0:	4b20      	ldr	r3, [pc, #128]	; (8002824 <RestartWakeupCounter+0xac>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d002      	beq.n	80027ae <RestartWakeupCounter+0x36>
      Value -= 1;
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80027ae:	bf00      	nop
 80027b0:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <RestartWakeupCounter+0xb0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f7      	beq.n	80027b0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <RestartWakeupCounter+0xb0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4b17      	ldr	r3, [pc, #92]	; (8002828 <RestartWakeupCounter+0xb0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80027d4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <RestartWakeupCounter+0xb4>)
 80027d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80027dc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80027de:	2003      	movs	r0, #3
 80027e0:	f003 faad 	bl	8005d3e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <RestartWakeupCounter+0xb8>)
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	0c1b      	lsrs	r3, r3, #16
 80027ea:	041b      	lsls	r3, r3, #16
 80027ec:	88fa      	ldrh	r2, [r7, #6]
 80027ee:	4910      	ldr	r1, [pc, #64]	; (8002830 <RestartWakeupCounter+0xb8>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80027f4:	f7ff fd8c 	bl	8002310 <ReadRtcSsrValue>
 80027f8:	4602      	mov	r2, r0
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <RestartWakeupCounter+0xa8>)
 80027fc:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <RestartWakeupCounter+0xb0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <RestartWakeupCounter+0xb0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002810:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002812:	f3af 8000 	nop.w
  return ;
 8002816:	bf00      	nop
}
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	200002e0 	.word	0x200002e0
 8002824:	200003bc 	.word	0x200003bc
 8002828:	200003b8 	.word	0x200003b8
 800282c:	58000800 	.word	0x58000800
 8002830:	40002800 	.word	0x40002800

08002834 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800283a:	4b47      	ldr	r3, [pc, #284]	; (8002958 <RescheduleTimerList+0x124>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002846:	d108      	bne.n	800285a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8002848:	bf00      	nop
 800284a:	4b44      	ldr	r3, [pc, #272]	; (800295c <RescheduleTimerList+0x128>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f7      	bne.n	800284a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800285a:	4b40      	ldr	r3, [pc, #256]	; (800295c <RescheduleTimerList+0x128>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	4b3e      	ldr	r3, [pc, #248]	; (800295c <RescheduleTimerList+0x128>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800286c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800286e:	4b3c      	ldr	r3, [pc, #240]	; (8002960 <RescheduleTimerList+0x12c>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	493b      	ldr	r1, [pc, #236]	; (8002964 <RescheduleTimerList+0x130>)
 8002878:	4613      	mov	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4413      	add	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	440b      	add	r3, r1
 8002882:	3308      	adds	r3, #8
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002888:	f7ff ff36 	bl	80026f8 <ReturnTimeElapsed>
 800288c:	4603      	mov	r3, r0
 800288e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	429a      	cmp	r2, r3
 8002896:	d205      	bcs.n	80028a4 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800289c:	4b32      	ldr	r3, [pc, #200]	; (8002968 <RescheduleTimerList+0x134>)
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e04d      	b.n	8002940 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	4a31      	ldr	r2, [pc, #196]	; (800296c <RescheduleTimerList+0x138>)
 80028a8:	8812      	ldrh	r2, [r2, #0]
 80028aa:	b292      	uxth	r2, r2
 80028ac:	4413      	add	r3, r2
 80028ae:	461a      	mov	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d906      	bls.n	80028c4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80028b6:	4b2d      	ldr	r3, [pc, #180]	; (800296c <RescheduleTimerList+0x138>)
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80028bc:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <RescheduleTimerList+0x134>)
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	e03d      	b.n	8002940 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80028ce:	4b26      	ldr	r3, [pc, #152]	; (8002968 <RescheduleTimerList+0x134>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80028d4:	e034      	b.n	8002940 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	4922      	ldr	r1, [pc, #136]	; (8002964 <RescheduleTimerList+0x130>)
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	3308      	adds	r3, #8
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d20a      	bcs.n	8002904 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	491c      	ldr	r1, [pc, #112]	; (8002964 <RescheduleTimerList+0x130>)
 80028f2:	4613      	mov	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	3308      	adds	r3, #8
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e013      	b.n	800292c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002904:	7bfa      	ldrb	r2, [r7, #15]
 8002906:	4917      	ldr	r1, [pc, #92]	; (8002964 <RescheduleTimerList+0x130>)
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	440b      	add	r3, r1
 8002912:	3308      	adds	r3, #8
 8002914:	6819      	ldr	r1, [r3, #0]
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	1ac9      	subs	r1, r1, r3
 800291c:	4811      	ldr	r0, [pc, #68]	; (8002964 <RescheduleTimerList+0x130>)
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4403      	add	r3, r0
 8002928:	3308      	adds	r3, #8
 800292a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	490d      	ldr	r1, [pc, #52]	; (8002964 <RescheduleTimerList+0x130>)
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	440b      	add	r3, r1
 800293a:	3315      	adds	r3, #21
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b06      	cmp	r3, #6
 8002944:	d1c7      	bne.n	80028d6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002946:	89bb      	ldrh	r3, [r7, #12]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff15 	bl	8002778 <RestartWakeupCounter>

  return ;
 800294e:	bf00      	nop
}
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40002800 	.word	0x40002800
 800295c:	200003b8 	.word	0x200003b8
 8002960:	200002dc 	.word	0x200002dc
 8002964:	2000024c 	.word	0x2000024c
 8002968:	200002e4 	.word	0x200002e4
 800296c:	200003c0 	.word	0x200003c0

08002970 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002976:	f3ef 8310 	mrs	r3, PRIMASK
 800297a:	617b      	str	r3, [r7, #20]
  return(result);
 800297c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002980:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002982:	4b5e      	ldr	r3, [pc, #376]	; (8002afc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	22ca      	movs	r2, #202	; 0xca
 800298a:	625a      	str	r2, [r3, #36]	; 0x24
 800298c:	4b5b      	ldr	r3, [pc, #364]	; (8002afc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2253      	movs	r2, #83	; 0x53
 8002994:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8002996:	4b59      	ldr	r3, [pc, #356]	; (8002afc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	4b57      	ldr	r3, [pc, #348]	; (8002afc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a8:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80029aa:	4b55      	ldr	r3, [pc, #340]	; (8002b00 <HW_TS_RTC_Wakeup_Handler+0x190>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80029b2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80029b6:	4953      	ldr	r1, [pc, #332]	; (8002b04 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	330c      	adds	r3, #12
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d170      	bne.n	8002aae <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80029cc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80029d0:	494c      	ldr	r1, [pc, #304]	; (8002b04 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80029e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80029e4:	4947      	ldr	r1, [pc, #284]	; (8002b04 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	440b      	add	r3, r1
 80029f0:	3310      	adds	r3, #16
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80029f6:	4b44      	ldr	r3, [pc, #272]	; (8002b08 <HW_TS_RTC_Wakeup_Handler+0x198>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d04e      	beq.n	8002a9e <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002a00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002a04:	493f      	ldr	r1, [pc, #252]	; (8002b04 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	330d      	adds	r3, #13
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d125      	bne.n	8002a66 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a1e:	2101      	movs	r1, #1
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fde5 	bl	80025f0 <UnlinkTimer>
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002a30:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002a34:	4933      	ldr	r1, [pc, #204]	; (8002b04 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	440b      	add	r3, r1
 8002a40:	3304      	adds	r3, #4
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f9d0 	bl	8002df0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002a50:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	22ca      	movs	r2, #202	; 0xca
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24
 8002a5a:	4b28      	ldr	r3, [pc, #160]	; (8002afc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2253      	movs	r2, #83	; 0x53
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24
 8002a64:	e013      	b.n	8002a8e <HW_TS_RTC_Wakeup_Handler+0x11e>
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002a70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f931 	bl	8002cdc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002a7a:	4b20      	ldr	r3, [pc, #128]	; (8002afc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	22ca      	movs	r2, #202	; 0xca
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2253      	movs	r2, #83	; 0x53
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	4619      	mov	r1, r3
 8002a96:	69b8      	ldr	r0, [r7, #24]
 8002a98:	f000 fa30 	bl	8002efc <HW_TS_RTC_Int_AppNot>
 8002a9c:	e024      	b.n	8002ae8 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8002a9e:	f7ff fec9 	bl	8002834 <RescheduleTimerList>
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	f383 8810 	msr	PRIMASK, r3
 8002aac:	e01c      	b.n	8002ae8 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002aae:	bf00      	nop
 8002ab0:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f7      	beq.n	8002ab0 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002ad4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8002ad8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	22ff      	movs	r2, #255	; 0xff
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002af2:	bf00      	nop
}
 8002af4:	3728      	adds	r7, #40	; 0x28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	200003b8 	.word	0x200003b8
 8002b00:	200002dc 	.word	0x200002dc
 8002b04:	2000024c 	.word	0x2000024c
 8002b08:	200002e4 	.word	0x200002e4
 8002b0c:	58000800 	.word	0x58000800

08002b10 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8002b1c:	4a64      	ldr	r2, [pc, #400]	; (8002cb0 <HW_TS_Init+0x1a0>)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002b22:	4b63      	ldr	r3, [pc, #396]	; (8002cb0 <HW_TS_Init+0x1a0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	22ca      	movs	r2, #202	; 0xca
 8002b2a:	625a      	str	r2, [r3, #36]	; 0x24
 8002b2c:	4b60      	ldr	r3, [pc, #384]	; (8002cb0 <HW_TS_Init+0x1a0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2253      	movs	r2, #83	; 0x53
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002b36:	4b5f      	ldr	r3, [pc, #380]	; (8002cb4 <HW_TS_Init+0x1a4>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	4a5e      	ldr	r2, [pc, #376]	; (8002cb4 <HW_TS_Init+0x1a4>)
 8002b3c:	f043 0320 	orr.w	r3, r3, #32
 8002b40:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002b42:	4b5c      	ldr	r3, [pc, #368]	; (8002cb4 <HW_TS_Init+0x1a4>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f1c3 0304 	rsb	r3, r3, #4
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	4b58      	ldr	r3, [pc, #352]	; (8002cb8 <HW_TS_Init+0x1a8>)
 8002b56:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002b58:	4b56      	ldr	r3, [pc, #344]	; (8002cb4 <HW_TS_Init+0x1a4>)
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b60:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002b64:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	fa92 f2a2 	rbit	r2, r2
 8002b6c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	2a00      	cmp	r2, #0
 8002b76:	d101      	bne.n	8002b7c <HW_TS_Init+0x6c>
  {
    return 32U;
 8002b78:	2220      	movs	r2, #32
 8002b7a:	e003      	b.n	8002b84 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	fab2 f282 	clz	r2, r2
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	40d3      	lsrs	r3, r2
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	4b4b      	ldr	r3, [pc, #300]	; (8002cbc <HW_TS_Init+0x1ac>)
 8002b8e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002b90:	4b48      	ldr	r3, [pc, #288]	; (8002cb4 <HW_TS_Init+0x1a4>)
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <HW_TS_Init+0x1b0>)
 8002ba2:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002ba4:	4b46      	ldr	r3, [pc, #280]	; (8002cc0 <HW_TS_Init+0x1b0>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	4a44      	ldr	r2, [pc, #272]	; (8002cbc <HW_TS_Init+0x1ac>)
 8002bac:	7812      	ldrb	r2, [r2, #0]
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002bb6:	4a40      	ldr	r2, [pc, #256]	; (8002cb8 <HW_TS_Init+0x1a8>)
 8002bb8:	7812      	ldrb	r2, [r2, #0]
 8002bba:	40d3      	lsrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d904      	bls.n	8002bd2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002bc8:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <HW_TS_Init+0x1b4>)
 8002bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bce:	801a      	strh	r2, [r3, #0]
 8002bd0:	e003      	b.n	8002bda <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HW_TS_Init+0x1b4>)
 8002bd8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002bda:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002bde:	f7ff fb85 	bl	80022ec <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002be2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002be6:	f7ff fb6d 	bl	80022c4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d143      	bne.n	8002c78 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002bf0:	4b35      	ldr	r3, [pc, #212]	; (8002cc8 <HW_TS_Init+0x1b8>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002bf6:	4b35      	ldr	r3, [pc, #212]	; (8002ccc <HW_TS_Init+0x1bc>)
 8002bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bfc:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	77fb      	strb	r3, [r7, #31]
 8002c02:	e00c      	b.n	8002c1e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002c04:	7ffa      	ldrb	r2, [r7, #31]
 8002c06:	4932      	ldr	r1, [pc, #200]	; (8002cd0 <HW_TS_Init+0x1c0>)
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	440b      	add	r3, r1
 8002c12:	330c      	adds	r3, #12
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002c18:	7ffb      	ldrb	r3, [r7, #31]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	77fb      	strb	r3, [r7, #31]
 8002c1e:	7ffb      	ldrb	r3, [r7, #31]
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d9ef      	bls.n	8002c04 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002c24:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <HW_TS_Init+0x1c4>)
 8002c26:	2206      	movs	r2, #6
 8002c28:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8002c2a:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <HW_TS_Init+0x1a0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <HW_TS_Init+0x1a0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <HW_TS_Init+0x1a0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HW_TS_Init+0x1a0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002c52:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002c54:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <HW_TS_Init+0x1c8>)
 8002c56:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c5a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002c5c:	2003      	movs	r0, #3
 8002c5e:	f003 f86e 	bl	8005d3e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002c62:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <HW_TS_Init+0x1a0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <HW_TS_Init+0x1a0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	e00a      	b.n	8002c8e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8002c78:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <HW_TS_Init+0x1a0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002c88:	2003      	movs	r0, #3
 8002c8a:	f003 f84a 	bl	8005d22 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <HW_TS_Init+0x1a0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	22ff      	movs	r2, #255	; 0xff
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2106      	movs	r1, #6
 8002c9c:	2003      	movs	r0, #3
 8002c9e:	f003 f806 	bl	8005cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002ca2:	2003      	movs	r0, #3
 8002ca4:	f003 f81d 	bl	8005ce2 <HAL_NVIC_EnableIRQ>

  return;
 8002ca8:	bf00      	nop
}
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	200003b8 	.word	0x200003b8
 8002cb4:	40002800 	.word	0x40002800
 8002cb8:	200003bc 	.word	0x200003bc
 8002cbc:	200003bd 	.word	0x200003bd
 8002cc0:	200003be 	.word	0x200003be
 8002cc4:	200003c0 	.word	0x200003c0
 8002cc8:	200002e4 	.word	0x200002e4
 8002ccc:	200002e0 	.word	0x200002e0
 8002cd0:	2000024c 	.word	0x2000024c
 8002cd4:	200002dc 	.word	0x200002dc
 8002cd8:	58000800 	.word	0x58000800

08002cdc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cea:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cec:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002cee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002cf2:	2003      	movs	r0, #3
 8002cf4:	f003 f803 	bl	8005cfe <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002cf8:	4b37      	ldr	r3, [pc, #220]	; (8002dd8 <HW_TS_Stop+0xfc>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	22ca      	movs	r2, #202	; 0xca
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
 8002d02:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <HW_TS_Stop+0xfc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2253      	movs	r2, #83	; 0x53
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002d0c:	79fa      	ldrb	r2, [r7, #7]
 8002d0e:	4933      	ldr	r1, [pc, #204]	; (8002ddc <HW_TS_Stop+0x100>)
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d148      	bne.n	8002db6 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	2100      	movs	r1, #0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fc61 	bl	80025f0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002d2e:	4b2c      	ldr	r3, [pc, #176]	; (8002de0 <HW_TS_Stop+0x104>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002d34:	7cfb      	ldrb	r3, [r7, #19]
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	d135      	bne.n	8002da6 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002d3a:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <HW_TS_Stop+0x108>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d46:	d108      	bne.n	8002d5a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8002d48:	bf00      	nop
 8002d4a:	4b23      	ldr	r3, [pc, #140]	; (8002dd8 <HW_TS_Stop+0xfc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f7      	bne.n	8002d4a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8002d5a:	4b1f      	ldr	r3, [pc, #124]	; (8002dd8 <HW_TS_Stop+0xfc>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <HW_TS_Stop+0xfc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002d6e:	bf00      	nop
 8002d70:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <HW_TS_Stop+0xfc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f7      	beq.n	8002d70 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002d80:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HW_TS_Stop+0xfc>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <HW_TS_Stop+0xfc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002d94:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <HW_TS_Stop+0x10c>)
 8002d98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d9c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002d9e:	2003      	movs	r0, #3
 8002da0:	f002 ffcd 	bl	8005d3e <HAL_NVIC_ClearPendingIRQ>
 8002da4:	e007      	b.n	8002db6 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HW_TS_Stop+0x110>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	7cfa      	ldrb	r2, [r7, #19]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d001      	beq.n	8002db6 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8002db2:	f7ff fd3f 	bl	8002834 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002db6:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <HW_TS_Stop+0xfc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	22ff      	movs	r2, #255	; 0xff
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	f002 ff8e 	bl	8005ce2 <HAL_NVIC_EnableIRQ>
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002dd0:	bf00      	nop
}
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	200003b8 	.word	0x200003b8
 8002ddc:	2000024c 	.word	0x2000024c
 8002de0:	200002dc 	.word	0x200002dc
 8002de4:	40002800 	.word	0x40002800
 8002de8:	58000800 	.word	0x58000800
 8002dec:	200002dd 	.word	0x200002dd

08002df0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	6039      	str	r1, [r7, #0]
 8002dfa:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002dfc:	79fa      	ldrb	r2, [r7, #7]
 8002dfe:	493b      	ldr	r1, [pc, #236]	; (8002eec <HW_TS_Start+0xfc>)
 8002e00:	4613      	mov	r3, r2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	330c      	adds	r3, #12
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d103      	bne.n	8002e1c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff60 	bl	8002cdc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e20:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e22:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002e24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e26:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002e28:	2003      	movs	r0, #3
 8002e2a:	f002 ff68 	bl	8005cfe <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002e2e:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <HW_TS_Start+0x100>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	22ca      	movs	r2, #202	; 0xca
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24
 8002e38:	4b2d      	ldr	r3, [pc, #180]	; (8002ef0 <HW_TS_Start+0x100>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2253      	movs	r2, #83	; 0x53
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002e42:	79fa      	ldrb	r2, [r7, #7]
 8002e44:	4929      	ldr	r1, [pc, #164]	; (8002eec <HW_TS_Start+0xfc>)
 8002e46:	4613      	mov	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	440b      	add	r3, r1
 8002e50:	330c      	adds	r3, #12
 8002e52:	2202      	movs	r2, #2
 8002e54:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002e56:	79fa      	ldrb	r2, [r7, #7]
 8002e58:	4924      	ldr	r1, [pc, #144]	; (8002eec <HW_TS_Start+0xfc>)
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	440b      	add	r3, r1
 8002e64:	3308      	adds	r3, #8
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002e6a:	79fa      	ldrb	r2, [r7, #7]
 8002e6c:	491f      	ldr	r1, [pc, #124]	; (8002eec <HW_TS_Start+0xfc>)
 8002e6e:	4613      	mov	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	440b      	add	r3, r1
 8002e78:	3304      	adds	r3, #4
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fb0b 	bl	800249c <linkTimer>
 8002e86:	4603      	mov	r3, r0
 8002e88:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <HW_TS_Start+0x104>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HW_TS_Start+0x108>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	7c7a      	ldrb	r2, [r7, #17]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d002      	beq.n	8002ea2 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8002e9c:	f7ff fcca 	bl	8002834 <RescheduleTimerList>
 8002ea0:	e013      	b.n	8002eca <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002ea2:	79fa      	ldrb	r2, [r7, #7]
 8002ea4:	4911      	ldr	r1, [pc, #68]	; (8002eec <HW_TS_Start+0xfc>)
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	3308      	adds	r3, #8
 8002eb2:	6819      	ldr	r1, [r3, #0]
 8002eb4:	8a7b      	ldrh	r3, [r7, #18]
 8002eb6:	79fa      	ldrb	r2, [r7, #7]
 8002eb8:	1ac9      	subs	r1, r1, r3
 8002eba:	480c      	ldr	r0, [pc, #48]	; (8002eec <HW_TS_Start+0xfc>)
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4413      	add	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4403      	add	r3, r0
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002eca:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <HW_TS_Start+0x100>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	22ff      	movs	r2, #255	; 0xff
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002ed4:	2003      	movs	r0, #3
 8002ed6:	f002 ff04 	bl	8005ce2 <HAL_NVIC_EnableIRQ>
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002ee4:	bf00      	nop
}
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	2000024c 	.word	0x2000024c
 8002ef0:	200003b8 	.word	0x200003b8
 8002ef4:	200002dc 	.word	0x200002dc
 8002ef8:	200002dd 	.word	0x200002dd

08002efc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	460b      	mov	r3, r1
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4798      	blx	r3

  return;
 8002f0e:	bf00      	nop
}
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <LL_AHB2_GRP1_EnableClock>:
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4013      	ands	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
}
 8002f6e:	bf00      	nop
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002f80:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <MX_I2C1_Init+0x74>)
 8002f82:	4a1c      	ldr	r2, [pc, #112]	; (8002ff4 <MX_I2C1_Init+0x78>)
 8002f84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <MX_I2C1_Init+0x74>)
 8002f88:	4a1b      	ldr	r2, [pc, #108]	; (8002ff8 <MX_I2C1_Init+0x7c>)
 8002f8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002f8c:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <MX_I2C1_Init+0x74>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f92:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <MX_I2C1_Init+0x74>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <MX_I2C1_Init+0x74>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f9e:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <MX_I2C1_Init+0x74>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fa4:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <MX_I2C1_Init+0x74>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002faa:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <MX_I2C1_Init+0x74>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <MX_I2C1_Init+0x74>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fb6:	480e      	ldr	r0, [pc, #56]	; (8002ff0 <MX_I2C1_Init+0x74>)
 8002fb8:	f003 faf0 	bl	800659c <HAL_I2C_Init>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002fc2:	f000 fc27 	bl	8003814 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4809      	ldr	r0, [pc, #36]	; (8002ff0 <MX_I2C1_Init+0x74>)
 8002fca:	f003 ffc1 	bl	8006f50 <HAL_I2CEx_ConfigAnalogFilter>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002fd4:	f000 fc1e 	bl	8003814 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4805      	ldr	r0, [pc, #20]	; (8002ff0 <MX_I2C1_Init+0x74>)
 8002fdc:	f004 f803 	bl	8006fe6 <HAL_I2CEx_ConfigDigitalFilter>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002fe6:	f000 fc15 	bl	8003814 <Error_Handler>
  }

}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20004f88 	.word	0x20004f88
 8002ff4:	40005400 	.word	0x40005400
 8002ff8:	00707cbb 	.word	0x00707cbb

08002ffc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	f107 030c 	add.w	r3, r7, #12
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0e      	ldr	r2, [pc, #56]	; (8003054 <HAL_I2C_MspInit+0x58>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d116      	bne.n	800304c <HAL_I2C_MspInit+0x50>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800301e:	2002      	movs	r0, #2
 8003020:	f7ff ff79 	bl	8002f16 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003024:	23c0      	movs	r3, #192	; 0xc0
 8003026:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003028:	2312      	movs	r3, #18
 800302a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800302c:	2301      	movs	r3, #1
 800302e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003030:	2300      	movs	r3, #0
 8003032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003034:	2304      	movs	r3, #4
 8003036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003038:	f107 030c 	add.w	r3, r7, #12
 800303c:	4619      	mov	r1, r3
 800303e:	4806      	ldr	r0, [pc, #24]	; (8003058 <HAL_I2C_MspInit+0x5c>)
 8003040:	f003 f900 	bl	8006244 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003044:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003048:	f7ff ff7e 	bl	8002f48 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800304c:	bf00      	nop
 800304e:	3720      	adds	r7, #32
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40005400 	.word	0x40005400
 8003058:	48000400 	.word	0x48000400

0800305c <toggleLed>:
 *      Author: patrick
 */

#include "led.h"

void toggleLed(uint8_t red, uint8_t green, uint8_t blue){
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	71fb      	strb	r3, [r7, #7]
 8003066:	460b      	mov	r3, r1
 8003068:	71bb      	strb	r3, [r7, #6]
 800306a:	4613      	mov	r3, r2
 800306c:	717b      	strb	r3, [r7, #5]
	if(red){
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <toggleLed+0x24>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8003074:	2200      	movs	r2, #0
 8003076:	2110      	movs	r1, #16
 8003078:	4814      	ldr	r0, [pc, #80]	; (80030cc <toggleLed+0x70>)
 800307a:	f003 fa53 	bl	8006524 <HAL_GPIO_WritePin>
 800307e:	e004      	b.n	800308a <toggleLed+0x2e>
	}
	else{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8003080:	2201      	movs	r2, #1
 8003082:	2110      	movs	r1, #16
 8003084:	4811      	ldr	r0, [pc, #68]	; (80030cc <toggleLed+0x70>)
 8003086:	f003 fa4d 	bl	8006524 <HAL_GPIO_WritePin>
	}

	if(blue){
 800308a:	797b      	ldrb	r3, [r7, #5]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <toggleLed+0x40>
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8003090:	2200      	movs	r2, #0
 8003092:	2101      	movs	r1, #1
 8003094:	480e      	ldr	r0, [pc, #56]	; (80030d0 <toggleLed+0x74>)
 8003096:	f003 fa45 	bl	8006524 <HAL_GPIO_WritePin>
 800309a:	e004      	b.n	80030a6 <toggleLed+0x4a>
		}
		else{
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800309c:	2201      	movs	r2, #1
 800309e:	2101      	movs	r1, #1
 80030a0:	480b      	ldr	r0, [pc, #44]	; (80030d0 <toggleLed+0x74>)
 80030a2:	f003 fa3f 	bl	8006524 <HAL_GPIO_WritePin>
		}

	if(green){
 80030a6:	79bb      	ldrb	r3, [r7, #6]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <toggleLed+0x5c>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80030ac:	2200      	movs	r2, #0
 80030ae:	2102      	movs	r1, #2
 80030b0:	4807      	ldr	r0, [pc, #28]	; (80030d0 <toggleLed+0x74>)
 80030b2:	f003 fa37 	bl	8006524 <HAL_GPIO_WritePin>
		}
		else{
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
		}
}
 80030b6:	e004      	b.n	80030c2 <toggleLed+0x66>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80030b8:	2201      	movs	r2, #1
 80030ba:	2102      	movs	r1, #2
 80030bc:	4804      	ldr	r0, [pc, #16]	; (80030d0 <toggleLed+0x74>)
 80030be:	f003 fa31 	bl	8006524 <HAL_GPIO_WritePin>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	48001000 	.word	0x48001000
 80030d0:	48000400 	.word	0x48000400

080030d4 <powf>:
 *          Base number
 *  @param  y
 *          Exponent
 *  @return x raised to the power of y
 */
float powf(const float x, const float y) {
 80030d4:	b5b0      	push	{r4, r5, r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	ed87 0a01 	vstr	s0, [r7, #4]
 80030de:	edc7 0a00 	vstr	s1, [r7]
  return (float)(pow((double)x, (double)y));
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fd f9ba 	bl	800045c <__aeabi_f2d>
 80030e8:	4604      	mov	r4, r0
 80030ea:	460d      	mov	r5, r1
 80030ec:	6838      	ldr	r0, [r7, #0]
 80030ee:	f7fd f9b5 	bl	800045c <__aeabi_f2d>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	ec43 2b11 	vmov	d1, r2, r3
 80030fa:	ec45 4b10 	vmov	d0, r4, r5
 80030fe:	f012 fcf5 	bl	8015aec <pow>
 8003102:	ec54 3b10 	vmov	r3, r4, d0
 8003106:	4618      	mov	r0, r3
 8003108:	4621      	mov	r1, r4
 800310a:	f7fd fcaf 	bl	8000a6c <__aeabi_d2f>
 800310e:	4603      	mov	r3, r0
 8003110:	ee07 3a90 	vmov	s15, r3
}
 8003114:	eeb0 0a67 	vmov.f32	s0, s15
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003120 <light_write8>:
/*!
 *  @brief  Writes a register and an 8 bit value over I2C
 *  @param  reg
 *  @param  value
 */
void light_write8(uint8_t reg, uint32_t value) {
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af04      	add	r7, sp, #16
 8003126:	4603      	mov	r3, r0
 8003128:	6039      	str	r1, [r7, #0]
 800312a:	71fb      	strb	r3, [r7, #7]

	uint8_t packet = value;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Mem_Write(i2c_periph, _deviceAddress_light, TCS34725_COMMAND_BIT | reg,
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <light_write8+0x44>)
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <light_write8+0x48>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	b299      	uxth	r1, r3
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003142:	b2db      	uxtb	r3, r3
 8003144:	b29a      	uxth	r2, r3
 8003146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800314a:	9302      	str	r3, [sp, #8]
 800314c:	2301      	movs	r3, #1
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	f107 030f 	add.w	r3, r7, #15
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	2301      	movs	r3, #1
 8003158:	f003 fab0 	bl	80066bc <HAL_I2C_Mem_Write>
//
//    packet = value;
//    HAL_I2C_Master_Transmit(i2c_periph, _deviceAddress_light, &packet, 1, 1000);


}
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20004ea8 	.word	0x20004ea8
 8003168:	20004fd4 	.word	0x20004fd4

0800316c <light_read8>:
/*!
 *  @brief  Reads an 8 bit value over I2C
 *  @param  reg
 *  @return value
 */
uint8_t light_read8(uint8_t reg) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af04      	add	r7, sp, #16
 8003172:	4603      	mov	r3, r0
 8003174:	71fb      	strb	r3, [r7, #7]

	uint8_t read_reg;

	HAL_I2C_Mem_Read(i2c_periph, _deviceAddress_light, TCS34725_COMMAND_BIT | reg,
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <light_read8+0x40>)
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <light_read8+0x44>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	b299      	uxth	r1, r3
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003186:	b2db      	uxtb	r3, r3
 8003188:	b29a      	uxth	r2, r3
 800318a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800318e:	9302      	str	r3, [sp, #8]
 8003190:	2301      	movs	r3, #1
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	f107 030f 	add.w	r3, r7, #15
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	2301      	movs	r3, #1
 800319c:	f003 fba2 	bl	80068e4 <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, &read_reg, 1, 1000);

	return read_reg;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]

}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20004ea8 	.word	0x20004ea8
 80031b0:	20004fd4 	.word	0x20004fd4

080031b4 <light_read16>:
/*!
 *  @brief  Reads a 16 bit values over I2C
 *  @param  reg
 *  @return value
 */
uint16_t light_read16(uint8_t reg) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af04      	add	r7, sp, #16
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
//
//
//  HAL_I2C_Master_Receive(i2c_periph, _deviceAddress_light, &read_reg[0], 2, 1000);


	HAL_I2C_Mem_Read(i2c_periph, _deviceAddress_light, TCS34725_COMMAND_BIT | reg,
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <light_read16+0x50>)
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	4b11      	ldr	r3, [pc, #68]	; (8003208 <light_read16+0x54>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	b299      	uxth	r1, r3
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031d6:	9302      	str	r3, [sp, #8]
 80031d8:	2302      	movs	r3, #2
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	f107 030c 	add.w	r3, r7, #12
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	2301      	movs	r3, #1
 80031e4:	f003 fb7e 	bl	80068e4 <HAL_I2C_Mem_Read>
		I2C_MEMADD_SIZE_8BIT, &read_reg[0], 2, 1000);


	read_reg_concat = ( ((uint16_t) read_reg[1] ) << 8) | read_reg[0];
 80031e8:	7b7b      	ldrb	r3, [r7, #13]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	b21a      	sxth	r2, r3
 80031ee:	7b3b      	ldrb	r3, [r7, #12]
 80031f0:	b21b      	sxth	r3, r3
 80031f2:	4313      	orrs	r3, r2
 80031f4:	b21b      	sxth	r3, r3
 80031f6:	81fb      	strh	r3, [r7, #14]

  return read_reg_concat;
 80031f8:	89fb      	ldrh	r3, [r7, #14]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20004ea8 	.word	0x20004ea8
 8003208:	20004fd4 	.word	0x20004fd4

0800320c <light_enable>:

/*!
 *  @brief  Enables the device
 */
void light_enable() {
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
	light_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 8003210:	2101      	movs	r1, #1
 8003212:	2000      	movs	r0, #0
 8003214:	f7ff ff84 	bl	8003120 <light_write8>
	HAL_Delay(4);
 8003218:	2004      	movs	r0, #4
 800321a:	f001 f963 	bl	80044e4 <HAL_Delay>
    light_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 800321e:	2103      	movs	r1, #3
 8003220:	2000      	movs	r0, #0
 8003222:	f7ff ff7d 	bl	8003120 <light_write8>
    This is only necessary in the case where enabling and then
    immediately trying to read values back. This is because setting
    AEN triggers an automatic integration, so if a read RGBC is
    performed too quickly, the data is not yet valid and all 0's are
    returned */
  switch (_tcs34725IntegrationTime) {
 8003226:	4b16      	ldr	r3, [pc, #88]	; (8003280 <light_enable+0x74>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2bd5      	cmp	r3, #213	; 0xd5
 800322c:	d019      	beq.n	8003262 <light_enable+0x56>
 800322e:	2bd5      	cmp	r3, #213	; 0xd5
 8003230:	dc04      	bgt.n	800323c <light_enable+0x30>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01d      	beq.n	8003272 <light_enable+0x66>
 8003236:	2bc0      	cmp	r3, #192	; 0xc0
 8003238:	d017      	beq.n	800326a <light_enable+0x5e>
    break;
  case TCS34725_INTEGRATIONTIME_700MS:
	  HAL_Delay(700);
    break;
  }
}
 800323a:	e01f      	b.n	800327c <light_enable+0x70>
  switch (_tcs34725IntegrationTime) {
 800323c:	2bf6      	cmp	r3, #246	; 0xf6
 800323e:	d008      	beq.n	8003252 <light_enable+0x46>
 8003240:	2bff      	cmp	r3, #255	; 0xff
 8003242:	d002      	beq.n	800324a <light_enable+0x3e>
 8003244:	2beb      	cmp	r3, #235	; 0xeb
 8003246:	d008      	beq.n	800325a <light_enable+0x4e>
}
 8003248:	e018      	b.n	800327c <light_enable+0x70>
	  HAL_Delay(3);
 800324a:	2003      	movs	r0, #3
 800324c:	f001 f94a 	bl	80044e4 <HAL_Delay>
    break;
 8003250:	e014      	b.n	800327c <light_enable+0x70>
	  HAL_Delay(24);
 8003252:	2018      	movs	r0, #24
 8003254:	f001 f946 	bl	80044e4 <HAL_Delay>
    break;
 8003258:	e010      	b.n	800327c <light_enable+0x70>
	  HAL_Delay(50);
 800325a:	2032      	movs	r0, #50	; 0x32
 800325c:	f001 f942 	bl	80044e4 <HAL_Delay>
    break;
 8003260:	e00c      	b.n	800327c <light_enable+0x70>
	  HAL_Delay(101);
 8003262:	2065      	movs	r0, #101	; 0x65
 8003264:	f001 f93e 	bl	80044e4 <HAL_Delay>
    break;
 8003268:	e008      	b.n	800327c <light_enable+0x70>
	  HAL_Delay(154);
 800326a:	209a      	movs	r0, #154	; 0x9a
 800326c:	f001 f93a 	bl	80044e4 <HAL_Delay>
    break;
 8003270:	e004      	b.n	800327c <light_enable+0x70>
	  HAL_Delay(700);
 8003272:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003276:	f001 f935 	bl	80044e4 <HAL_Delay>
    break;
 800327a:	bf00      	nop
}
 800327c:	bf00      	nop
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20004fd5 	.word	0x20004fd5

08003284 <light_begin>:
 *  @param  *theWire
 *          The Wire object
 *  @return True if initialization was successful, otherwise false.
 */
void light_begin(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort, I2C_HandleTypeDef* periph,
		tcs34725IntegrationTime_t it, tcs34725Gain_t gain) {
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	60ba      	str	r2, [r7, #8]
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	4603      	mov	r3, r0
 8003290:	73fb      	strb	r3, [r7, #15]
 8003292:	460b      	mov	r3, r1
 8003294:	73bb      	strb	r3, [r7, #14]
	_deviceAddress_light = deviceAddress << 1;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	b2da      	uxtb	r2, r3
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <light_begin+0x48>)
 800329e:	701a      	strb	r2, [r3, #0]
	_int = intPin;
 80032a0:	4a0b      	ldr	r2, [pc, #44]	; (80032d0 <light_begin+0x4c>)
 80032a2:	7bbb      	ldrb	r3, [r7, #14]
 80032a4:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 80032a6:	4a0b      	ldr	r2, [pc, #44]	; (80032d4 <light_begin+0x50>)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	6013      	str	r3, [r2, #0]
	i2c_periph = periph;
 80032ac:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <light_begin+0x54>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6013      	str	r3, [r2, #0]
//	_tcs34725Initialised = true;
	_tcs34725IntegrationTime = it;
 80032b2:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <light_begin+0x58>)
 80032b4:	7e3b      	ldrb	r3, [r7, #24]
 80032b6:	7013      	strb	r3, [r2, #0]
	 _tcs34725Gain = gain;
 80032b8:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <light_begin+0x5c>)
 80032ba:	7f3b      	ldrb	r3, [r7, #28]
 80032bc:	7013      	strb	r3, [r2, #0]

	 light_init();
 80032be:	f000 f811 	bl	80032e4 <light_init>

}
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20004fd4 	.word	0x20004fd4
 80032d0:	20004e9b 	.word	0x20004e9b
 80032d4:	20004eb0 	.word	0x20004eb0
 80032d8:	20004ea8 	.word	0x20004ea8
 80032dc:	20004fd5 	.word	0x20004fd5
 80032e0:	20004fd7 	.word	0x20004fd7

080032e4 <light_init>:

/*!
 *  @brief  Part of begin
 *  @return True if initialization was successful, otherwise false.
 */
void light_init() {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0

//	  light_disable();

  /* Make sure we're actually connected */
  uint8_t x = light_read8(TCS34725_ID);
 80032ea:	2012      	movs	r0, #18
 80032ec:	f7ff ff3e 	bl	800316c <light_read8>
 80032f0:	4603      	mov	r3, r0
 80032f2:	71fb      	strb	r3, [r7, #7]
//    return 	false;
//  }
//  _tcs34725Initialised = true;

  /* Set default integration time and gain */
  light_setIntegrationTime(_tcs34725IntegrationTime);
 80032f4:	4b07      	ldr	r3, [pc, #28]	; (8003314 <light_init+0x30>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 f80f 	bl	800331c <light_setIntegrationTime>
  light_setGain(_tcs34725Gain);
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <light_init+0x34>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f81e 	bl	8003344 <light_setGain>
//  light_setWait(0xFF);

  //light_clearInterrupt();

  /* Note: by default, the device is in power down mode on bootup */
  light_enable();
 8003308:	f7ff ff80 	bl	800320c <light_enable>

//  return true;
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20004fd5 	.word	0x20004fd5
 8003318:	20004fd7 	.word	0x20004fd7

0800331c <light_setIntegrationTime>:
/*!
 *  @brief  Sets the integration time for the TC34725
 *  @param  it
 *          Integration Time
 */
void light_setIntegrationTime(tcs34725IntegrationTime_t it) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
//  if (!_tcs34725Initialised)
//	  light_begin();

  /* Update the timing register */
  light_write8(TCS34725_ATIME, it);
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	4619      	mov	r1, r3
 800332a:	2001      	movs	r0, #1
 800332c:	f7ff fef8 	bl	8003120 <light_write8>

  /* Update value placeholders */
  _tcs34725IntegrationTime = it;
 8003330:	4a03      	ldr	r2, [pc, #12]	; (8003340 <light_setIntegrationTime+0x24>)
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	7013      	strb	r3, [r2, #0]
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20004fd5 	.word	0x20004fd5

08003344 <light_setGain>:
/*!
 *  @brief  Adjusts the gain on the TCS34725
 *  @param  gain
 *          Gain (sensitivity to light)
 */
void light_setGain(tcs34725Gain_t gain) {
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	71fb      	strb	r3, [r7, #7]
//  if (!_tcs34725Initialised)
//	  light_begin();

  /* Update the timing register */
  light_write8(TCS34725_CONTROL, gain);
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	4619      	mov	r1, r3
 8003352:	200f      	movs	r0, #15
 8003354:	f7ff fee4 	bl	8003120 <light_write8>

  /* Update value placeholders */
  _tcs34725Gain = gain;
 8003358:	4a03      	ldr	r2, [pc, #12]	; (8003368 <light_setGain+0x24>)
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	7013      	strb	r3, [r2, #0]
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20004fd7 	.word	0x20004fd7

0800336c <light_getRawData>:
 *          Blue value
 *  @param  *c
 *          Clear channel value
 */
void light_getRawData(uint16_t *r, uint16_t *g, uint16_t *b,
                                   uint16_t *c) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
//  if (!_tcs34725Initialised)
//	  light_begin();

  *c = light_read16(TCS34725_CDATAL);
 800337a:	2014      	movs	r0, #20
 800337c:	f7ff ff1a 	bl	80031b4 <light_read16>
 8003380:	4603      	mov	r3, r0
 8003382:	461a      	mov	r2, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	801a      	strh	r2, [r3, #0]
  *r = light_read16(TCS34725_RDATAL);
 8003388:	2016      	movs	r0, #22
 800338a:	f7ff ff13 	bl	80031b4 <light_read16>
 800338e:	4603      	mov	r3, r0
 8003390:	461a      	mov	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	801a      	strh	r2, [r3, #0]
  *g = light_read16(TCS34725_GDATAL);
 8003396:	2018      	movs	r0, #24
 8003398:	f7ff ff0c 	bl	80031b4 <light_read16>
 800339c:	4603      	mov	r3, r0
 800339e:	461a      	mov	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	801a      	strh	r2, [r3, #0]
  *b = light_read16(TCS34725_BDATAL);
 80033a4:	201a      	movs	r0, #26
 80033a6:	f7ff ff05 	bl	80031b4 <light_read16>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461a      	mov	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	801a      	strh	r2, [r3, #0]

  /* Set a delay for the integration time */
  switch (_tcs34725IntegrationTime) {
 80033b2:	4b17      	ldr	r3, [pc, #92]	; (8003410 <light_getRawData+0xa4>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2bd5      	cmp	r3, #213	; 0xd5
 80033b8:	d019      	beq.n	80033ee <light_getRawData+0x82>
 80033ba:	2bd5      	cmp	r3, #213	; 0xd5
 80033bc:	dc04      	bgt.n	80033c8 <light_getRawData+0x5c>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01d      	beq.n	80033fe <light_getRawData+0x92>
 80033c2:	2bc0      	cmp	r3, #192	; 0xc0
 80033c4:	d017      	beq.n	80033f6 <light_getRawData+0x8a>
    break;
  case TCS34725_INTEGRATIONTIME_700MS:
	  HAL_Delay(700);
    break;
  }
}
 80033c6:	e01f      	b.n	8003408 <light_getRawData+0x9c>
  switch (_tcs34725IntegrationTime) {
 80033c8:	2bf6      	cmp	r3, #246	; 0xf6
 80033ca:	d008      	beq.n	80033de <light_getRawData+0x72>
 80033cc:	2bff      	cmp	r3, #255	; 0xff
 80033ce:	d002      	beq.n	80033d6 <light_getRawData+0x6a>
 80033d0:	2beb      	cmp	r3, #235	; 0xeb
 80033d2:	d008      	beq.n	80033e6 <light_getRawData+0x7a>
}
 80033d4:	e018      	b.n	8003408 <light_getRawData+0x9c>
	  HAL_Delay(3);
 80033d6:	2003      	movs	r0, #3
 80033d8:	f001 f884 	bl	80044e4 <HAL_Delay>
    break;
 80033dc:	e014      	b.n	8003408 <light_getRawData+0x9c>
	  HAL_Delay(24);
 80033de:	2018      	movs	r0, #24
 80033e0:	f001 f880 	bl	80044e4 <HAL_Delay>
    break;
 80033e4:	e010      	b.n	8003408 <light_getRawData+0x9c>
	  HAL_Delay(50);
 80033e6:	2032      	movs	r0, #50	; 0x32
 80033e8:	f001 f87c 	bl	80044e4 <HAL_Delay>
    break;
 80033ec:	e00c      	b.n	8003408 <light_getRawData+0x9c>
	  HAL_Delay(101);
 80033ee:	2065      	movs	r0, #101	; 0x65
 80033f0:	f001 f878 	bl	80044e4 <HAL_Delay>
    break;
 80033f4:	e008      	b.n	8003408 <light_getRawData+0x9c>
	  HAL_Delay(154);
 80033f6:	209a      	movs	r0, #154	; 0x9a
 80033f8:	f001 f874 	bl	80044e4 <HAL_Delay>
    break;
 80033fc:	e004      	b.n	8003408 <light_getRawData+0x9c>
	  HAL_Delay(700);
 80033fe:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003402:	f001 f86f 	bl	80044e4 <HAL_Delay>
    break;
 8003406:	bf00      	nop
}
 8003408:	bf00      	nop
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20004fd5 	.word	0x20004fd5

08003414 <light_calculateColorTemperature_dn40>:
 *  @return Color temperature in degrees Kelvin
 */
uint16_t light_calculateColorTemperature_dn40(uint16_t r,
                                                           uint16_t g,
                                                           uint16_t b,
                                                           uint16_t c) {
 8003414:	b490      	push	{r4, r7}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	4604      	mov	r4, r0
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4623      	mov	r3, r4
 8003424:	80fb      	strh	r3, [r7, #6]
 8003426:	4603      	mov	r3, r0
 8003428:	80bb      	strh	r3, [r7, #4]
 800342a:	460b      	mov	r3, r1
 800342c:	807b      	strh	r3, [r7, #2]
 800342e:	4613      	mov	r3, r2
 8003430:	803b      	strh	r3, [r7, #0]
  uint16_t r2, b2; /* RGB values minus IR component */
  uint16_t sat;    /* Digital saturation level */
  uint16_t ir;     /* Inferred IR content */

  if (c == 0) {
 8003432:	883b      	ldrh	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <light_calculateColorTemperature_dn40+0x28>
    return 0;
 8003438:	2300      	movs	r3, #0
 800343a:	e052      	b.n	80034e2 <light_calculateColorTemperature_dn40+0xce>
   *     (64*2.4ms=153.6ms).
   * (c) If the integration time is > 153.6ms, digital saturation will
   *     occur before analog saturation. Digital saturation occurs when
   *     the count reaches 65535.
   */
  if ((256 - _tcs34725IntegrationTime) > 63) {
 800343c:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <light_calculateColorTemperature_dn40+0xd8>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003444:	2b3f      	cmp	r3, #63	; 0x3f
 8003446:	dd03      	ble.n	8003450 <light_calculateColorTemperature_dn40+0x3c>
    /* Track digital saturation */
    sat = 65535;
 8003448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800344c:	82fb      	strh	r3, [r7, #22]
 800344e:	e006      	b.n	800345e <light_calculateColorTemperature_dn40+0x4a>
  } else {
    /* Track analog saturation */
    sat = 1024 * (256 - _tcs34725IntegrationTime);
 8003450:	4b26      	ldr	r3, [pc, #152]	; (80034ec <light_calculateColorTemperature_dn40+0xd8>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003458:	b29b      	uxth	r3, r3
 800345a:	029b      	lsls	r3, r3, #10
 800345c:	82fb      	strh	r3, [r7, #22]
   *     saturated. This means that you can be below the 'sat' value, but
   *     still be saturating. At integration times >150ms this can be
   *     ignored, but <= 150ms you should calculate the 75% saturation
   *     level to avoid this problem.
   */
  if ((256 - _tcs34725IntegrationTime) <= 63) {
 800345e:	4b23      	ldr	r3, [pc, #140]	; (80034ec <light_calculateColorTemperature_dn40+0xd8>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003466:	2b3f      	cmp	r3, #63	; 0x3f
 8003468:	dc05      	bgt.n	8003476 <light_calculateColorTemperature_dn40+0x62>
    /* Adjust sat to 75% to avoid analog saturation if atime < 153.6ms */
    sat -= sat / 4;
 800346a:	8afb      	ldrh	r3, [r7, #22]
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	b29b      	uxth	r3, r3
 8003470:	8afa      	ldrh	r2, [r7, #22]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	82fb      	strh	r3, [r7, #22]
  }

  /* Check for saturation and mark the sample as invalid if true */
  if (c >= sat) {
 8003476:	883a      	ldrh	r2, [r7, #0]
 8003478:	8afb      	ldrh	r3, [r7, #22]
 800347a:	429a      	cmp	r2, r3
 800347c:	d301      	bcc.n	8003482 <light_calculateColorTemperature_dn40+0x6e>
    return 0;
 800347e:	2300      	movs	r3, #0
 8003480:	e02f      	b.n	80034e2 <light_calculateColorTemperature_dn40+0xce>
  }

  /* AMS RGB sensors have no IR channel, so the IR content must be */
  /* calculated indirectly. */
  ir = (r + g + b > c) ? (r + g + b - c) / 2 : 0;
 8003482:	88fa      	ldrh	r2, [r7, #6]
 8003484:	88bb      	ldrh	r3, [r7, #4]
 8003486:	441a      	add	r2, r3
 8003488:	887b      	ldrh	r3, [r7, #2]
 800348a:	441a      	add	r2, r3
 800348c:	883b      	ldrh	r3, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	dd0b      	ble.n	80034aa <light_calculateColorTemperature_dn40+0x96>
 8003492:	88fa      	ldrh	r2, [r7, #6]
 8003494:	88bb      	ldrh	r3, [r7, #4]
 8003496:	441a      	add	r2, r3
 8003498:	887b      	ldrh	r3, [r7, #2]
 800349a:	441a      	add	r2, r3
 800349c:	883b      	ldrh	r3, [r7, #0]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	0fda      	lsrs	r2, r3, #31
 80034a2:	4413      	add	r3, r2
 80034a4:	105b      	asrs	r3, r3, #1
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	e000      	b.n	80034ac <light_calculateColorTemperature_dn40+0x98>
 80034aa:	2300      	movs	r3, #0
 80034ac:	82bb      	strh	r3, [r7, #20]

  /* Remove the IR component from the raw RGB values */
  r2 = r - ir;
 80034ae:	88fa      	ldrh	r2, [r7, #6]
 80034b0:	8abb      	ldrh	r3, [r7, #20]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	827b      	strh	r3, [r7, #18]
  b2 = b - ir;
 80034b6:	887a      	ldrh	r2, [r7, #2]
 80034b8:	8abb      	ldrh	r3, [r7, #20]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	823b      	strh	r3, [r7, #16]

  if (r2 == 0) {
 80034be:	8a7b      	ldrh	r3, [r7, #18]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <light_calculateColorTemperature_dn40+0xb4>
    return 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	e00c      	b.n	80034e2 <light_calculateColorTemperature_dn40+0xce>
  }

  /* A simple method of measuring color temp is to use the ratio of blue */
  /* to red light, taking IR cancellation into account. */
  uint16_t cct = (3810 * (uint32_t)b2) / /** Color temp coefficient. */
 80034c8:	8a3b      	ldrh	r3, [r7, #16]
 80034ca:	f640 62e2 	movw	r2, #3810	; 0xee2
 80034ce:	fb02 f203 	mul.w	r2, r2, r3
                     (uint32_t)r2 +
 80034d2:	8a7b      	ldrh	r3, [r7, #18]
  uint16_t cct = (3810 * (uint32_t)b2) / /** Color temp coefficient. */
 80034d4:	fbb2 f3f3 	udiv	r3, r2, r3
                     (uint32_t)r2 +
 80034d8:	b29b      	uxth	r3, r3
  uint16_t cct = (3810 * (uint32_t)b2) / /** Color temp coefficient. */
 80034da:	f203 536f 	addw	r3, r3, #1391	; 0x56f
 80034de:	81fb      	strh	r3, [r7, #14]
                 1391; /** Color temp offset. */

  return cct;
 80034e0:	89fb      	ldrh	r3, [r7, #14]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc90      	pop	{r4, r7}
 80034ea:	4770      	bx	lr
 80034ec:	20004fd5 	.word	0x20004fd5

080034f0 <light_calculateLux>:
 *          Green value
 *  @param  b
 *          Blue value
 *  @return Lux value
 */
uint16_t light_calculateLux(uint16_t r, uint16_t g, uint16_t b) {
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
 80034fa:	460b      	mov	r3, r1
 80034fc:	80bb      	strh	r3, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	807b      	strh	r3, [r7, #2]
  float illuminance;

  /* This only uses RGB ... how can we integrate clear or calculate lux */
  /* based exclusively on clear since this might be more reliable?      */
  illuminance = (-0.32466F * r) + (1.57837F * g) + (-0.73191F * b);
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	ee07 3a90 	vmov	s15, r3
 8003508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800350c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003560 <light_calculateLux+0x70>
 8003510:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003514:	88bb      	ldrh	r3, [r7, #4]
 8003516:	ee07 3a90 	vmov	s15, r3
 800351a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800351e:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003564 <light_calculateLux+0x74>
 8003522:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800352a:	887b      	ldrh	r3, [r7, #2]
 800352c:	ee07 3a90 	vmov	s15, r3
 8003530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003534:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003568 <light_calculateLux+0x78>
 8003538:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800353c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003540:	edc7 7a03 	vstr	s15, [r7, #12]

  return (uint16_t)illuminance;
 8003544:	edd7 7a03 	vldr	s15, [r7, #12]
 8003548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800354c:	ee17 3a90 	vmov	r3, s15
 8003550:	b29b      	uxth	r3, r3
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	bea639d6 	.word	0xbea639d6
 8003564:	3fca0807 	.word	0x3fca0807
 8003568:	bf3b5e74 	.word	0xbf3b5e74

0800356c <LL_RCC_HSI48_Enable>:
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003578:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <LL_RCC_HSI48_IsReady>:
{
 800358e:	b480      	push	{r7}
 8003590:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d101      	bne.n	80035a6 <LL_RCC_HSI48_IsReady+0x18>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <LL_RCC_HSI48_IsReady+0x1a>
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <LL_RCC_LSE_SetDriveCapability>:
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80035ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	f023 0218 	bic.w	r2, r3, #24
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	3220      	adds	r2, #32
 80035f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f4:	4a05      	ldr	r2, [pc, #20]	; (800360c <LL_HSEM_1StepLock+0x2c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d001      	beq.n	80035fe <LL_HSEM_1StepLock+0x1e>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <LL_HSEM_1StepLock+0x20>
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	80000400 	.word	0x80000400

08003610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  /**
	   * The OPTVERR flag is wrongly set at power on
	   * It shall be cleared before using any HAL_FLASH_xxx() api
	   */
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003614:	4b13      	ldr	r3, [pc, #76]	; (8003664 <main+0x54>)
 8003616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800361a:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800361c:	f000 ff16 	bl	800444c <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8003620:	f000 faf2 	bl	8003c08 <_Z12Reset_Devicev>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003624:	f000 f820 	bl	8003668 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  Init_Exti( );
 8003628:	f000 fb18 	bl	8003c5c <_Z9Init_Extiv>
  initClk();
 800362c:	f000 fb22 	bl	8003c74 <_Z7initClkv>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003630:	f7fe fddc 	bl	80021ec <MX_GPIO_Init>
  MX_DMA_Init();
 8003634:	f7fe fda5 	bl	8002182 <MX_DMA_Init>
  MX_TIM2_Init();
 8003638:	f000 fdbe 	bl	80041b8 <MX_TIM2_Init>
  MX_TIM17_Init();
 800363c:	f000 fe0a 	bl	8004254 <MX_TIM17_Init>
  MX_ADC1_Init();
 8003640:	f7fe f944 	bl	80018cc <MX_ADC1_Init>
  MX_USB_Device_Init();
 8003644:	f011 fd1a 	bl	801507c <MX_USB_Device_Init>
  MX_RF_Init();
 8003648:	f000 fb30 	bl	8003cac <MX_RF_Init>
  MX_RTC_Init();
 800364c:	f000 fb60 	bl	8003d10 <MX_RTC_Init>
  MX_I2C1_Init();
 8003650:	f7ff fc94 	bl	8002f7c <MX_I2C1_Init>


	/* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003654:	f00c fb80 	bl	800fd58 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003658:	f7fe fb94 	bl	8001d84 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 800365c:	f00c fbb0 	bl	800fdc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003660:	e7fe      	b.n	8003660 <main+0x50>
 8003662:	bf00      	nop
 8003664:	58004000 	.word	0x58004000

08003668 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b0ae      	sub	sp, #184	; 0xb8
 800366c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800366e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003672:	2248      	movs	r2, #72	; 0x48
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f013 fac5 	bl	8016c06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800367c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	60da      	str	r2, [r3, #12]
 800368a:	611a      	str	r2, [r3, #16]
 800368c:	615a      	str	r2, [r3, #20]
 800368e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003690:	1d3b      	adds	r3, r7, #4
 8003692:	2250      	movs	r2, #80	; 0x50
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f013 fab5 	bl	8016c06 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 800369c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036aa:	f043 0310 	orr.w	r3, r3, #16
 80036ae:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80036b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ba:	f043 0303 	orr.w	r3, r3, #3
 80036be:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80036c0:	f004 fc22 	bl	8007f08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80036c4:	2000      	movs	r0, #0
 80036c6:	f7ff ff74 	bl	80035b2 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036ca:	4b47      	ldr	r3, [pc, #284]	; (80037e8 <_Z18SystemClock_Configv+0x180>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036d2:	4a45      	ldr	r2, [pc, #276]	; (80037e8 <_Z18SystemClock_Configv+0x180>)
 80036d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	4b43      	ldr	r3, [pc, #268]	; (80037e8 <_Z18SystemClock_Configv+0x180>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80036e6:	2307      	movs	r3, #7
 80036e8:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036ee:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80036f0:	2301      	movs	r3, #1
 80036f2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036fa:	2340      	movs	r3, #64	; 0x40
 80036fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003700:	2300      	movs	r3, #0
 8003702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003706:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800370a:	4618      	mov	r0, r3
 800370c:	f004 ffac 	bl	8008668 <HAL_RCC_OscConfig>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	bf14      	ite	ne
 8003716:	2301      	movne	r3, #1
 8003718:	2300      	moveq	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8003720:	f000 f878 	bl	8003814 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003724:	236f      	movs	r3, #111	; 0x6f
 8003726:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003728:	2302      	movs	r3, #2
 800372a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800372c:	2300      	movs	r3, #0
 800372e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003730:	2300      	movs	r3, #0
 8003732:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003734:	2300      	movs	r3, #0
 8003736:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003738:	2300      	movs	r3, #0
 800373a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800373c:	2300      	movs	r3, #0
 800373e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003740:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003744:	2101      	movs	r1, #1
 8003746:	4618      	mov	r0, r3
 8003748:	f005 fb1a 	bl	8008d80 <HAL_RCC_ClockConfig>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	bf14      	ite	ne
 8003752:	2301      	movne	r3, #1
 8003754:	2300      	moveq	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 800375c:	f000 f85a 	bl	8003814 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8003760:	f44f 5374 	mov.w	r3, #15616	; 0x3d00
 8003764:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8003766:	2306      	movs	r3, #6
 8003768:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800376a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800376e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8003770:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003774:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8003776:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800377a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800377c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003780:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003782:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003788:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800378c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800378e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003792:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8003794:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003798:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800379a:	2300      	movs	r3, #0
 800379c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800379e:	2310      	movs	r3, #16
 80037a0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037a2:	1d3b      	adds	r3, r7, #4
 80037a4:	4618      	mov	r0, r3
 80037a6:	f005 ff46 	bl	8009636 <HAL_RCCEx_PeriphCLKConfig>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf14      	ite	ne
 80037b0:	2301      	movne	r3, #1
 80037b2:	2300      	moveq	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <_Z18SystemClock_Configv+0x156>
  {
    Error_Handler();
 80037ba:	f000 f82b 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  //https://community.st.com/s/question/0D50X0000C0wdqe/stm32wb55-ble-hid?t=1591239574627
  LL_HSEM_1StepLock(HSEM, 5 );
 80037be:	2105      	movs	r1, #5
 80037c0:	480a      	ldr	r0, [pc, #40]	; (80037ec <_Z18SystemClock_Configv+0x184>)
 80037c2:	f7ff ff0d 	bl	80035e0 <LL_HSEM_1StepLock>
  LL_RCC_HSI48_Enable();
 80037c6:	f7ff fed1 	bl	800356c <LL_RCC_HSI48_Enable>
  while(!LL_RCC_HSI48_IsReady());
 80037ca:	f7ff fee0 	bl	800358e <LL_RCC_HSI48_IsReady>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d000      	beq.n	80037e0 <_Z18SystemClock_Configv+0x178>
 80037de:	e7f4      	b.n	80037ca <_Z18SystemClock_Configv+0x162>
  /* USER CODE END Smps */
}
 80037e0:	bf00      	nop
 80037e2:	37b8      	adds	r7, #184	; 0xb8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	58000400 	.word	0x58000400
 80037ec:	58001400 	.word	0x58001400

080037f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a04      	ldr	r2, [pc, #16]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d101      	bne.n	8003806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003802:	f000 fe43 	bl	800448c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40012c00 	.word	0x40012c00

08003814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003818:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800381a:	e7fe      	b.n	800381a <Error_Handler+0x6>

0800381c <LL_EXTI_DisableIT_0_31>:
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003824:	4b07      	ldr	r3, [pc, #28]	; (8003844 <LL_EXTI_DisableIT_0_31+0x28>)
 8003826:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	43db      	mvns	r3, r3
 800382e:	4905      	ldr	r1, [pc, #20]	; (8003844 <LL_EXTI_DisableIT_0_31+0x28>)
 8003830:	4013      	ands	r3, r2
 8003832:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	58000800 	.word	0x58000800

08003848 <LL_EXTI_DisableIT_32_63>:
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003850:	4b07      	ldr	r3, [pc, #28]	; (8003870 <LL_EXTI_DisableIT_32_63+0x28>)
 8003852:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	43db      	mvns	r3, r3
 800385a:	4905      	ldr	r1, [pc, #20]	; (8003870 <LL_EXTI_DisableIT_32_63+0x28>)
 800385c:	4013      	ands	r3, r2
 800385e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	58000800 	.word	0x58000800

08003874 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800389a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80038bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038cc:	d101      	bne.n	80038d2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80038de:	b480      	push	{r7}
 80038e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80038e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038f2:	d101      	bne.n	80038f8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <LL_AHB3_GRP1_EnableClock>:
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800390c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003918:	4313      	orrs	r3, r2
 800391a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800391c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4013      	ands	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003928:	68fb      	ldr	r3, [r7, #12]
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	041b      	lsls	r3, r3, #16
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	605a      	str	r2, [r3, #4]
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	605a      	str	r2, [r3, #4]
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	041b      	lsls	r3, r3, #16
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	615a      	str	r2, [r3, #20]
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	615a      	str	r2, [r3, #20]
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	609a      	str	r2, [r3, #8]
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	619a      	str	r2, [r3, #24]
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <LL_HSEM_1StepLock>:
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	3220      	adds	r2, #32
 8003a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a10:	4a05      	ldr	r2, [pc, #20]	; (8003a28 <LL_HSEM_1StepLock+0x2c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d001      	beq.n	8003a1a <LL_HSEM_1StepLock+0x1e>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <LL_HSEM_1StepLock+0x20>
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	80000400 	.word	0x80000400

08003a2c <_Z6myMainv>:

uint16_t Tcounts = 0x83;  // set threshold for over temperature interrupt, 0x83 == 67072 counts

//uint16_t adc_data[4];

int myMain(void){
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b0b0      	sub	sp, #192	; 0xc0
 8003a30:	af08      	add	r7, sp, #32

	calipile_setup(CALIPILE_ADDRESS, NULL, NULL, &hi2c1);
 8003a32:	4b58      	ldr	r3, [pc, #352]	; (8003b94 <_Z6myMainv+0x168>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	2100      	movs	r1, #0
 8003a38:	200c      	movs	r0, #12
 8003a3a:	f7fd f867 	bl	8000b0c <calipile_setup>
	calipile_wake();
 8003a3e:	f7fd f88b 	bl	8000b58 <calipile_wake>
	calipile_readEEPROM();
 8003a42:	f7fd f9f9 	bl	8000e38 <calipile_readEEPROM>
	calipile_initMotion(tcLP1, tcLP2, LPsource, cycTime); // configure presence and motion interrupts
 8003a46:	4b54      	ldr	r3, [pc, #336]	; (8003b98 <_Z6myMainv+0x16c>)
 8003a48:	7818      	ldrb	r0, [r3, #0]
 8003a4a:	4b54      	ldr	r3, [pc, #336]	; (8003b9c <_Z6myMainv+0x170>)
 8003a4c:	7819      	ldrb	r1, [r3, #0]
 8003a4e:	4b54      	ldr	r3, [pc, #336]	; (8003ba0 <_Z6myMainv+0x174>)
 8003a50:	781a      	ldrb	r2, [r3, #0]
 8003a52:	4b54      	ldr	r3, [pc, #336]	; (8003ba4 <_Z6myMainv+0x178>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	f7fd f89d 	bl	8000b94 <calipile_initMotion>
	calipile_initTempThr(Tcounts);  // choose something ~5% above TPAMB
 8003a5a:	4b53      	ldr	r3, [pc, #332]	; (8003ba8 <_Z6myMainv+0x17c>)
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fd f8ec 	bl	8000c3c <calipile_initTempThr>

	light_begin(TCS34725_ADDRESS, NULL, NULL, &hi2c1, TCS34725_INTEGRATIONTIME_700MS, TCS34725_GAIN_1X);
 8003a64:	2300      	movs	r3, #0
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	4b49      	ldr	r3, [pc, #292]	; (8003b94 <_Z6myMainv+0x168>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2100      	movs	r1, #0
 8003a72:	2029      	movs	r0, #41	; 0x29
 8003a74:	f7ff fc06 	bl	8003284 <light_begin>
		powerMeasSetup();
		HAL_Delay(100);

	#endif
#else
	HAL_TIM_Base_Start_IT(&htim2);
 8003a78:	484c      	ldr	r0, [pc, #304]	; (8003bac <_Z6myMainv+0x180>)
 8003a7a:	f006 fa15 	bl	8009ea8 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, GPIO_PIN_SET);
 8003a7e:	2201      	movs	r2, #1
 8003a80:	2110      	movs	r1, #16
 8003a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a86:	f002 fd4d 	bl	8006524 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim17);
 8003a8a:	4849      	ldr	r0, [pc, #292]	; (8003bb0 <_Z6myMainv+0x184>)
 8003a8c:	f006 f99e 	bl	8009dcc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8003a90:	2100      	movs	r1, #0
 8003a92:	4847      	ldr	r0, [pc, #284]	; (8003bb0 <_Z6myMainv+0x184>)
 8003a94:	f006 fab8 	bl	800a008 <HAL_TIM_PWM_Start>

	Stepper motor_base(STEPS, AIN1_1_GPIO_Port, AIN1_1_Pin,
			AIN2_1_GPIO_Port, AIN2_1_Pin,
			BIN1_1_GPIO_Port, BIN1_1_Pin,
			BIN2_1_GPIO_Port, BIN2_1_Pin, &adc_data.mag_base, NON_INVERTED);
 8003a98:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	9307      	str	r3, [sp, #28]
 8003aa0:	4b44      	ldr	r3, [pc, #272]	; (8003bb4 <_Z6myMainv+0x188>)
 8003aa2:	9306      	str	r3, [sp, #24]
 8003aa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003aa8:	9305      	str	r3, [sp, #20]
 8003aaa:	4b43      	ldr	r3, [pc, #268]	; (8003bb8 <_Z6myMainv+0x18c>)
 8003aac:	9304      	str	r3, [sp, #16]
 8003aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ab2:	9303      	str	r3, [sp, #12]
 8003ab4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ab8:	9302      	str	r3, [sp, #8]
 8003aba:	2380      	movs	r3, #128	; 0x80
 8003abc:	9301      	str	r3, [sp, #4]
 8003abe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ac8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003acc:	f640 0104 	movw	r1, #2052	; 0x804
 8003ad0:	f7fd fafa 	bl	80010c8 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>
	motor_base.setSpeed(12);
 8003ad4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ad8:	210c      	movs	r1, #12
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fd fb34 	bl	8001148 <_ZN7Stepper8setSpeedEl>
	motor_base.setStepBound(BASE_STEP_RANGE);
 8003ae0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ae4:	f641 010c 	movw	r1, #6156	; 0x180c
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fd fb45 	bl	8001178 <_ZN7Stepper12setStepBoundEl>

	Stepper motor_led(STEPS, AIN1_2_GPIO_Port, AIN1_2_Pin,
				AIN2_2_GPIO_Port, AIN2_2_Pin,
				BIN1_2_GPIO_Port, BIN1_2_Pin,
				BIN2_2_GPIO_Port, BIN2_2_Pin,  &adc_data.mag_led, INVERTED);
 8003aee:	1d38      	adds	r0, r7, #4
 8003af0:	23ff      	movs	r3, #255	; 0xff
 8003af2:	9307      	str	r3, [sp, #28]
 8003af4:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <_Z6myMainv+0x190>)
 8003af6:	9306      	str	r3, [sp, #24]
 8003af8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003afc:	9305      	str	r3, [sp, #20]
 8003afe:	4b2e      	ldr	r3, [pc, #184]	; (8003bb8 <_Z6myMainv+0x18c>)
 8003b00:	9304      	str	r3, [sp, #16]
 8003b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b06:	9303      	str	r3, [sp, #12]
 8003b08:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <_Z6myMainv+0x18c>)
 8003b0a:	9302      	str	r3, [sp, #8]
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2302      	movs	r3, #2
 8003b18:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003b1c:	f640 0104 	movw	r1, #2052	; 0x804
 8003b20:	f7fd fad2 	bl	80010c8 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>
	motor_led.setSpeed(16);
 8003b24:	1d3b      	adds	r3, r7, #4
 8003b26:	2110      	movs	r1, #16
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fd fb0d 	bl	8001148 <_ZN7Stepper8setSpeedEl>
	motor_led.setStepBound(LED_STEP_RANGE);
 8003b2e:	1d3b      	adds	r3, r7, #4
 8003b30:	f647 1123 	movw	r1, #31011	; 0x7923
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fd fb1f 	bl	8001178 <_ZN7Stepper12setStepBoundEl>

	uint32_t counter = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_data, 4);
 8003b40:	2204      	movs	r2, #4
 8003b42:	491c      	ldr	r1, [pc, #112]	; (8003bb4 <_Z6myMainv+0x188>)
 8003b44:	481e      	ldr	r0, [pc, #120]	; (8003bc0 <_Z6myMainv+0x194>)
 8003b46:	f001 f821 	bl	8004b8c <HAL_ADC_Start_DMA>
	HAL_Delay(100);
 8003b4a:	2064      	movs	r0, #100	; 0x64
 8003b4c:	f000 fcca 	bl	80044e4 <HAL_Delay>

	while (1)
		  {
			counter += 1;
 8003b50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b54:	3301      	adds	r3, #1
 8003b56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
//
//			startCal(0, 0, 0, 0, motor_base, motor_led);


			// ceiling above desk
			startCal(0, 1.0, 0.6, 0.9, motor_base, motor_led);
 8003b5a:	1d3a      	adds	r2, r7, #4
 8003b5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	eddf 1a17 	vldr	s3, [pc, #92]	; 8003bc4 <_Z6myMainv+0x198>
 8003b68:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8003bc8 <_Z6myMainv+0x19c>
 8003b6c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003b70:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8003bcc <_Z6myMainv+0x1a0>
 8003b74:	f7fe f944 	bl	8001e00 <startCal>


//			startCal(0.0, 0.15, 0.05, 0.2, motor_base, motor_led);

			// turn off spotlight
			HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, GPIO_PIN_RESET);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2110      	movs	r1, #16
 8003b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b80:	f002 fcd0 	bl	8006524 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8003b84:	2100      	movs	r1, #0
 8003b86:	480a      	ldr	r0, [pc, #40]	; (8003bb0 <_Z6myMainv+0x184>)
 8003b88:	f006 fb18 	bl	800a1bc <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim17);
 8003b8c:	4808      	ldr	r0, [pc, #32]	; (8003bb0 <_Z6myMainv+0x184>)
 8003b8e:	f006 f963 	bl	8009e58 <HAL_TIM_Base_Stop>



			while(1){};
 8003b92:	e7fe      	b.n	8003b92 <_Z6myMainv+0x166>
 8003b94:	20004f88 	.word	0x20004f88
 8003b98:	20000004 	.word	0x20000004
 8003b9c:	20000005 	.word	0x20000005
 8003ba0:	200003cc 	.word	0x200003cc
 8003ba4:	200003cd 	.word	0x200003cd
 8003ba8:	20000006 	.word	0x20000006
 8003bac:	20005094 	.word	0x20005094
 8003bb0:	20005048 	.word	0x20005048
 8003bb4:	200003c4 	.word	0x200003c4
 8003bb8:	48000400 	.word	0x48000400
 8003bbc:	200003c6 	.word	0x200003c6
 8003bc0:	20004eb8 	.word	0x20004eb8
 8003bc4:	3f666666 	.word	0x3f666666
 8003bc8:	3f19999a 	.word	0x3f19999a
 8003bcc:	00000000 	.word	0x00000000

08003bd0 <_Z18Reset_BackupDomainv>:




void Reset_BackupDomain( void )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8003bd4:	f7ff fe70 	bl	80038b8 <LL_RCC_IsActiveFlag_PINRST>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d006      	beq.n	8003bec <_Z18Reset_BackupDomainv+0x1c>
 8003bde:	f7ff fe7e 	bl	80038de <LL_RCC_IsActiveFlag_SFTRST>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <_Z18Reset_BackupDomainv+0x1c>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <_Z18Reset_BackupDomainv+0x1e>
 8003bec:	2300      	movs	r3, #0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <_Z18Reset_BackupDomainv+0x34>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8003bf2:	f004 f989 	bl	8007f08 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8003bf6:	f004 f987 	bl	8007f08 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8003bfa:	f7ff fe3b 	bl	8003874 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8003bfe:	f7ff fe4a 	bl	8003896 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8003c02:	bf00      	nop
 8003c04:	bf00      	nop
}
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <_Z12Reset_Devicev>:

void Reset_Device( void )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8003c0c:	f7ff ffe0 	bl	8003bd0 <_Z18Reset_BackupDomainv>

  Reset_IPCC();
 8003c10:	f000 f802 	bl	8003c18 <_Z10Reset_IPCCv>
#endif

  return;
 8003c14:	bf00      	nop
}
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <_Z10Reset_IPCCv>:

void Reset_IPCC( void )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8003c1c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003c20:	f7ff fe70 	bl	8003904 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8003c24:	213f      	movs	r1, #63	; 0x3f
 8003c26:	480c      	ldr	r0, [pc, #48]	; (8003c58 <_Z10Reset_IPCCv+0x40>)
 8003c28:	f7ff fecb 	bl	80039c2 <LL_C1_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8003c2c:	213f      	movs	r1, #63	; 0x3f
 8003c2e:	480a      	ldr	r0, [pc, #40]	; (8003c58 <_Z10Reset_IPCCv+0x40>)
 8003c30:	f7ff fed5 	bl	80039de <LL_C2_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8003c34:	213f      	movs	r1, #63	; 0x3f
 8003c36:	4808      	ldr	r0, [pc, #32]	; (8003c58 <_Z10Reset_IPCCv+0x40>)
 8003c38:	f7ff fe7d 	bl	8003936 <LL_C1_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8003c3c:	213f      	movs	r1, #63	; 0x3f
 8003c3e:	4806      	ldr	r0, [pc, #24]	; (8003c58 <_Z10Reset_IPCCv+0x40>)
 8003c40:	f7ff fe9c 	bl	800397c <LL_C2_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8003c44:	213f      	movs	r1, #63	; 0x3f
 8003c46:	4804      	ldr	r0, [pc, #16]	; (8003c58 <_Z10Reset_IPCCv+0x40>)
 8003c48:	f7ff fe87 	bl	800395a <LL_C1_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8003c4c:	213f      	movs	r1, #63	; 0x3f
 8003c4e:	4802      	ldr	r0, [pc, #8]	; (8003c58 <_Z10Reset_IPCCv+0x40>)
 8003c50:	f7ff fea6 	bl	80039a0 <LL_C2_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8003c54:	bf00      	nop
}
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	58000c00 	.word	0x58000c00

08003c5c <_Z9Init_Extiv>:

void Init_Exti( void )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8003c60:	f04f 30ff 	mov.w	r0, #4294967295
 8003c64:	f7ff fdda 	bl	800381c <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8003c68:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8003c6c:	f7ff fdec 	bl	8003848 <LL_EXTI_DisableIT_32_63>

  return;
 8003c70:	bf00      	nop
}
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <_Z7initClkv>:

  return;
}

void initClk (void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b092      	sub	sp, #72	; 0x48
 8003c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef st_oscInit = {0};
 8003c7a:	463b      	mov	r3, r7
 8003c7c:	2248      	movs	r2, #72	; 0x48
 8003c7e:	2100      	movs	r1, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f012 ffc0 	bl	8016c06 <memset>

  /* Get mutex */
  LL_HSEM_1StepLock(HSEM, 5);
 8003c86:	2105      	movs	r1, #5
 8003c88:	4807      	ldr	r0, [pc, #28]	; (8003ca8 <_Z7initClkv+0x34>)
 8003c8a:	f7ff feb7 	bl	80039fc <LL_HSEM_1StepLock>

  st_oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8003c8e:	2340      	movs	r3, #64	; 0x40
 8003c90:	603b      	str	r3, [r7, #0]
  st_oscInit.HSI48State     = RCC_HSI48_ON; /* Used by USB */
 8003c92:	2301      	movs	r3, #1
 8003c94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_RCC_OscConfig(&st_oscInit);
 8003c96:	463b      	mov	r3, r7
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f004 fce5 	bl	8008668 <HAL_RCC_OscConfig>
}
 8003c9e:	bf00      	nop
 8003ca0:	3748      	adds	r7, #72	; 0x48
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	58001400 	.word	0x58001400

08003cac <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0

}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_RCC_EnableRTC>:
{
 8003cba:	b480      	push	{r7}
 8003cbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003cd2:	bf00      	nop
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_APB1_GRP1_EnableClock>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d00:	68fb      	ldr	r3, [r7, #12]
}
 8003d02:	bf00      	nop
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003d14:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <MX_RTC_Init+0x4c>)
 8003d16:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <MX_RTC_Init+0x50>)
 8003d18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d1a:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <MX_RTC_Init+0x4c>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003d20:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <MX_RTC_Init+0x4c>)
 8003d22:	220f      	movs	r2, #15
 8003d24:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003d26:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <MX_RTC_Init+0x4c>)
 8003d28:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003d2c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003d2e:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <MX_RTC_Init+0x4c>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d34:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <MX_RTC_Init+0x4c>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d3a:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <MX_RTC_Init+0x4c>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <MX_RTC_Init+0x4c>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d46:	4805      	ldr	r0, [pc, #20]	; (8003d5c <MX_RTC_Init+0x4c>)
 8003d48:	f005 fefb 	bl	8009b42 <HAL_RTC_Init>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003d52:	f7ff fd5f 	bl	8003814 <Error_Handler>
  }

}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20004fd8 	.word	0x20004fd8
 8003d60:	40002800 	.word	0x40002800

08003d64 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a06      	ldr	r2, [pc, #24]	; (8003d8c <HAL_RTC_MspInit+0x28>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d105      	bne.n	8003d82 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d76:	f7ff ffa0 	bl	8003cba <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003d7a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003d7e:	f7ff ffad 	bl	8003cdc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40002800 	.word	0x40002800

08003d90 <MsgTask>:

char* endOfLine = "\n\r";

#ifndef SOLAR_SENSOR_NODE
void MsgTask(void *argument)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	struct MeasMsg msg;

	while(1){
		// grab message from queue
		osMessageQueueGet (msgQueueHandle, &msg, NULL, osWaitForever);
 8003d98:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <MsgTask+0x28>)
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	f107 010c 	add.w	r1, r7, #12
 8003da0:	f04f 33ff 	mov.w	r3, #4294967295
 8003da4:	2200      	movs	r2, #0
 8003da6:	f00c fda9 	bl	80108fc <osMessageQueueGet>

		// operate on said message
		measMsgReceivedFromNode(&msg);
 8003daa:	f107 030c 	add.w	r3, r7, #12
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f804 	bl	8003dbc <measMsgReceivedFromNode>
		osMessageQueueGet (msgQueueHandle, &msg, NULL, osWaitForever);
 8003db4:	e7f0      	b.n	8003d98 <MsgTask+0x8>
 8003db6:	bf00      	nop
 8003db8:	2000032c 	.word	0x2000032c

08003dbc <measMsgReceivedFromNode>:
	}
}
#endif

void measMsgReceivedFromNode(struct MeasMsg* msg){
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]

	// send over UART if USB UART active
#if USB_UART_ACTIVE
	int8_t retry = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73fb      	strb	r3, [r7, #15]

	memcpy((struct MeasMsg*) &serialMsg.measMsg, msg, sizeof(struct MeasMsg));
 8003dc8:	2214      	movs	r2, #20
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4811      	ldr	r0, [pc, #68]	; (8003e14 <measMsgReceivedFromNode+0x58>)
 8003dce:	f012 ff0f 	bl	8016bf0 <memcpy>

	/* the "-2" in the size is a hack-ish way of removing the byte padding for the python
	 	 data ingester doesn't screw up*/
	while(CDC_Transmit_FS((uint8_t* ) &serialMsg, sizeof(serialMsg)-2) != USBD_OK){
 8003dd2:	e00d      	b.n	8003df0 <measMsgReceivedFromNode+0x34>
			if(retry == 5){
 8003dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dd8:	2b05      	cmp	r3, #5
 8003dda:	d102      	bne.n	8003de2 <measMsgReceivedFromNode+0x26>
				retry = -1;
 8003ddc:	23ff      	movs	r3, #255	; 0xff
 8003dde:	73fb      	strb	r3, [r7, #15]
				break;
 8003de0:	e00d      	b.n	8003dfe <measMsgReceivedFromNode+0x42>
			}
			HAL_Delay(1);
 8003de2:	2001      	movs	r0, #1
 8003de4:	f000 fb7e 	bl	80044e4 <HAL_Delay>
			retry+=1;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	3301      	adds	r3, #1
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	73fb      	strb	r3, [r7, #15]
	while(CDC_Transmit_FS((uint8_t* ) &serialMsg, sizeof(serialMsg)-2) != USBD_OK){
 8003df0:	2116      	movs	r1, #22
 8003df2:	4808      	ldr	r0, [pc, #32]	; (8003e14 <measMsgReceivedFromNode+0x58>)
 8003df4:	f011 fa00 	bl	80151f8 <CDC_Transmit_FS>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1ea      	bne.n	8003dd4 <measMsgReceivedFromNode+0x18>

	// TODO check if power rating in table is lower than current one
	//		if so, replace and record current angle measurements

	// TODO if all expected nodes have replied, move to next Spotlight position
	osThreadFlagsSet (defaultTaskHandle, CAL_THREAD_FLAG);
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <measMsgReceivedFromNode+0x5c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2103      	movs	r1, #3
 8003e04:	4618      	mov	r0, r3
 8003e06:	f00c f8b7 	bl	800ff78 <osThreadFlagsSet>
}
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20000008 	.word	0x20000008
 8003e18:	20000324 	.word	0x20000324

08003e1c <sendSensorMeas_USB>:

void sendSensorMeas_USB(struct SensorSamples* msg){
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]

	// send over UART if USB UART active
#if USB_UART_ACTIVE
	int8_t retry = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	73fb      	strb	r3, [r7, #15]

	memcpy((struct SensorSamples*) &serialSensorMsg.sensorMeasMsg, msg, sizeof(struct SensorSamples));
 8003e28:	2220      	movs	r2, #32
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	480e      	ldr	r0, [pc, #56]	; (8003e68 <sendSensorMeas_USB+0x4c>)
 8003e2e:	f012 fedf 	bl	8016bf0 <memcpy>

	/* the "-2" in the size is a hack-ish way of removing the byte padding for the python
	 	 data ingester doesn't screw up*/
	while(CDC_Transmit_FS((uint8_t* ) &serialSensorMsg, sizeof(serialSensorMsg)-2) != USBD_OK){
 8003e32:	e00d      	b.n	8003e50 <sendSensorMeas_USB+0x34>
			if(retry == 5){
 8003e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e38:	2b05      	cmp	r3, #5
 8003e3a:	d102      	bne.n	8003e42 <sendSensorMeas_USB+0x26>
				retry = -1;
 8003e3c:	23ff      	movs	r3, #255	; 0xff
 8003e3e:	73fb      	strb	r3, [r7, #15]
				break;
 8003e40:	e00d      	b.n	8003e5e <sendSensorMeas_USB+0x42>
			}
			HAL_Delay(1);
 8003e42:	2001      	movs	r0, #1
 8003e44:	f000 fb4e 	bl	80044e4 <HAL_Delay>
			retry+=1;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	73fb      	strb	r3, [r7, #15]
	while(CDC_Transmit_FS((uint8_t* ) &serialSensorMsg, sizeof(serialSensorMsg)-2) != USBD_OK){
 8003e50:	2122      	movs	r1, #34	; 0x22
 8003e52:	4805      	ldr	r0, [pc, #20]	; (8003e68 <sendSensorMeas_USB+0x4c>)
 8003e54:	f011 f9d0 	bl	80151f8 <CDC_Transmit_FS>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1ea      	bne.n	8003e34 <sendSensorMeas_USB+0x18>

		}

#endif
}
 8003e5e:	bf00      	nop
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20000020 	.word	0x20000020

08003e6c <LL_AHB3_GRP1_EnableClock>:
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e90:	68fb      	ldr	r3, [r7, #12]
}
 8003e92:	bf00      	nop
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003ea2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ea6:	f7ff ffe1 	bl	8003e6c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003eaa:	2200      	movs	r2, #0
 8003eac:	210f      	movs	r1, #15
 8003eae:	f06f 0001 	mvn.w	r0, #1
 8003eb2:	f001 fefc 	bl	8005cae <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2105      	movs	r1, #5
 8003eba:	202e      	movs	r0, #46	; 0x2e
 8003ebc:	f001 fef7 	bl	8005cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003ec0:	202e      	movs	r0, #46	; 0x2e
 8003ec2:	f001 ff0e 	bl	8005ce2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	210f      	movs	r1, #15
 8003eca:	202c      	movs	r0, #44	; 0x2c
 8003ecc:	f001 feef 	bl	8005cae <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	210f      	movs	r1, #15
 8003ed4:	202d      	movs	r0, #45	; 0x2d
 8003ed6:	f001 feea 	bl	8005cae <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}

08003ede <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b085      	sub	sp, #20
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4013      	ands	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f02:	68fb      	ldr	r3, [r7, #12]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08c      	sub	sp, #48	; 0x30
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8003f20:	2200      	movs	r2, #0
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	2019      	movs	r0, #25
 8003f26:	f001 fec2 	bl	8005cae <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003f2a:	2019      	movs	r0, #25
 8003f2c:	f001 fed9 	bl	8005ce2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003f30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f34:	f7ff ffd3 	bl	8003ede <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f38:	f107 0208 	add.w	r2, r7, #8
 8003f3c:	f107 030c 	add.w	r3, r7, #12
 8003f40:	4611      	mov	r1, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f005 f8f0 	bl	8009128 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003f48:	f005 f8d8 	bl	80090fc <HAL_RCC_GetPCLK2Freq>
 8003f4c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	4a12      	ldr	r2, [pc, #72]	; (8003f9c <HAL_InitTick+0x8c>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	0c9b      	lsrs	r3, r3, #18
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003f5c:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <HAL_InitTick+0x90>)
 8003f5e:	4a11      	ldr	r2, [pc, #68]	; (8003fa4 <HAL_InitTick+0x94>)
 8003f60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <HAL_InitTick+0x90>)
 8003f64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f68:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003f6a:	4a0d      	ldr	r2, [pc, #52]	; (8003fa0 <HAL_InitTick+0x90>)
 8003f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_InitTick+0x90>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <HAL_InitTick+0x90>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003f7c:	4808      	ldr	r0, [pc, #32]	; (8003fa0 <HAL_InitTick+0x90>)
 8003f7e:	f005 fece 	bl	8009d1e <HAL_TIM_Base_Init>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d104      	bne.n	8003f92 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003f88:	4805      	ldr	r0, [pc, #20]	; (8003fa0 <HAL_InitTick+0x90>)
 8003f8a:	f005 ff8d 	bl	8009ea8 <HAL_TIM_Base_Start_IT>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	e000      	b.n	8003f94 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3730      	adds	r7, #48	; 0x30
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	431bde83 	.word	0x431bde83
 8003fa0:	20004ffc 	.word	0x20004ffc
 8003fa4:	40012c00 	.word	0x40012c00

08003fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fac:	e7fe      	b.n	8003fac <NMI_Handler+0x4>

08003fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fb2:	e7fe      	b.n	8003fb2 <HardFault_Handler+0x4>

08003fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fb8:	e7fe      	b.n	8003fb8 <MemManage_Handler+0x4>

08003fba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fbe:	e7fe      	b.n	8003fbe <BusFault_Handler+0x4>

08003fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fc4:	e7fe      	b.n	8003fc4 <UsageFault_Handler+0x4>

08003fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003fd8:	4802      	ldr	r0, [pc, #8]	; (8003fe4 <DMA1_Channel1_IRQHandler+0x10>)
 8003fda:	f001 ffe2 	bl	8005fa2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003fde:	bf00      	nop
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20004f1c 	.word	0x20004f1c

08003fe8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003fec:	4802      	ldr	r0, [pc, #8]	; (8003ff8 <ADC1_IRQHandler+0x10>)
 8003fee:	f000 fe51 	bl	8004c94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20004eb8 	.word	0x20004eb8

08003ffc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004000:	4802      	ldr	r0, [pc, #8]	; (800400c <USB_LP_IRQHandler+0x10>)
 8004002:	f003 f919 	bl	8007238 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	2000663c 	.word	0x2000663c

08004010 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004014:	4802      	ldr	r0, [pc, #8]	; (8004020 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004016:	f006 f959 	bl	800a2cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800401a:	bf00      	nop
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20004ffc 	.word	0x20004ffc

08004024 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8004028:	f002 fa94 	bl	8006554 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800402c:	bf00      	nop
 800402e:	bd80      	pop	{r7, pc}

08004030 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8004034:	f7fe fc9c 	bl	8002970 <HW_TS_RTC_Wakeup_Handler>
}
 8004038:	bf00      	nop
 800403a:	bd80      	pop	{r7, pc}

0800403c <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8004040:	f010 fe9c 	bl	8014d7c <HW_IPCC_Tx_Handler>
  return;
 8004044:	bf00      	nop
}
 8004046:	bd80      	pop	{r7, pc}

08004048 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 800404c:	f010 fe3c 	bl	8014cc8 <HW_IPCC_Rx_Handler>
  return;
 8004050:	bf00      	nop
}
 8004052:	bd80      	pop	{r7, pc}

08004054 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8004054:	b40c      	push	{r2, r3}
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	4603      	mov	r3, r0
 800405e:	460a      	mov	r2, r1
 8004060:	71fb      	strb	r3, [r7, #7]
 8004062:	4613      	mov	r3, r2
 8004064:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	b002      	add	sp, #8
 8004072:	4770      	bx	lr

08004074 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8004078:	4b26      	ldr	r3, [pc, #152]	; (8004114 <SystemInit+0xa0>)
 800407a:	2200      	movs	r2, #0
 800407c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800407e:	4b25      	ldr	r3, [pc, #148]	; (8004114 <SystemInit+0xa0>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004084:	4a23      	ldr	r2, [pc, #140]	; (8004114 <SystemInit+0xa0>)
 8004086:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800408a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800408e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800409e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80040a6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80040a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040b2:	4b19      	ldr	r3, [pc, #100]	; (8004118 <SystemInit+0xa4>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80040b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c4:	f023 0305 	bic.w	r3, r3, #5
 80040c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80040cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80040e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e4:	4a0d      	ldr	r2, [pc, #52]	; (800411c <SystemInit+0xa8>)
 80040e6:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80040e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ec:	4a0b      	ldr	r2, [pc, #44]	; (800411c <SystemInit+0xa8>)
 80040ee:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80040f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004104:	2200      	movs	r2, #0
 8004106:	619a      	str	r2, [r3, #24]
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	e000ed00 	.word	0xe000ed00
 8004118:	faf6fefb 	.word	0xfaf6fefb
 800411c:	22041000 	.word	0x22041000

08004120 <LL_AHB2_GRP1_EnableClock>:
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800412e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4313      	orrs	r3, r2
 8004136:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4013      	ands	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004144:	68fb      	ldr	r3, [r7, #12]
}
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <LL_APB1_GRP1_EnableClock>:
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800415a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004160:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4313      	orrs	r3, r2
 8004168:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800416a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4013      	ands	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004176:	68fb      	ldr	r3, [r7, #12]
}
 8004178:	bf00      	nop
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <LL_APB2_GRP1_EnableClock>:
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800418c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004190:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4313      	orrs	r3, r2
 800419a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800419c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4013      	ands	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80041a8:	68fb      	ldr	r3, [r7, #12]
}
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041be:	f107 0310 	add.w	r3, r7, #16
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	605a      	str	r2, [r3, #4]
 80041c8:	609a      	str	r2, [r3, #8]
 80041ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041cc:	1d3b      	adds	r3, r7, #4
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	605a      	str	r2, [r3, #4]
 80041d4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80041d6:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <MX_TIM2_Init+0x98>)
 80041d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80041de:	4b1c      	ldr	r3, [pc, #112]	; (8004250 <MX_TIM2_Init+0x98>)
 80041e0:	221f      	movs	r2, #31
 80041e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041e4:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <MX_TIM2_Init+0x98>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80041ea:	4b19      	ldr	r3, [pc, #100]	; (8004250 <MX_TIM2_Init+0x98>)
 80041ec:	f04f 32ff 	mov.w	r2, #4294967295
 80041f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041f2:	4b17      	ldr	r3, [pc, #92]	; (8004250 <MX_TIM2_Init+0x98>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041f8:	4b15      	ldr	r3, [pc, #84]	; (8004250 <MX_TIM2_Init+0x98>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041fe:	4814      	ldr	r0, [pc, #80]	; (8004250 <MX_TIM2_Init+0x98>)
 8004200:	f005 fd8d 	bl	8009d1e <HAL_TIM_Base_Init>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800420a:	f7ff fb03 	bl	8003814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800420e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004212:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004214:	f107 0310 	add.w	r3, r7, #16
 8004218:	4619      	mov	r1, r3
 800421a:	480d      	ldr	r0, [pc, #52]	; (8004250 <MX_TIM2_Init+0x98>)
 800421c:	f006 fa86 	bl	800a72c <HAL_TIM_ConfigClockSource>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004226:	f7ff faf5 	bl	8003814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800422a:	2300      	movs	r3, #0
 800422c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004232:	1d3b      	adds	r3, r7, #4
 8004234:	4619      	mov	r1, r3
 8004236:	4806      	ldr	r0, [pc, #24]	; (8004250 <MX_TIM2_Init+0x98>)
 8004238:	f006 fefe 	bl	800b038 <HAL_TIMEx_MasterConfigSynchronization>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004242:	f7ff fae7 	bl	8003814 <Error_Handler>
  }

}
 8004246:	bf00      	nop
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20005094 	.word	0x20005094

08004254 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b094      	sub	sp, #80	; 0x50
 8004258:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800425a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	605a      	str	r2, [r3, #4]
 8004264:	609a      	str	r2, [r3, #8]
 8004266:	60da      	str	r2, [r3, #12]
 8004268:	611a      	str	r2, [r3, #16]
 800426a:	615a      	str	r2, [r3, #20]
 800426c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800426e:	463b      	mov	r3, r7
 8004270:	2234      	movs	r2, #52	; 0x34
 8004272:	2100      	movs	r1, #0
 8004274:	4618      	mov	r0, r3
 8004276:	f012 fcc6 	bl	8016c06 <memset>

  htim17.Instance = TIM17;
 800427a:	4b31      	ldr	r3, [pc, #196]	; (8004340 <MX_TIM17_Init+0xec>)
 800427c:	4a31      	ldr	r2, [pc, #196]	; (8004344 <MX_TIM17_Init+0xf0>)
 800427e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3199;
 8004280:	4b2f      	ldr	r3, [pc, #188]	; (8004340 <MX_TIM17_Init+0xec>)
 8004282:	f640 427f 	movw	r2, #3199	; 0xc7f
 8004286:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004288:	4b2d      	ldr	r3, [pc, #180]	; (8004340 <MX_TIM17_Init+0xec>)
 800428a:	2200      	movs	r2, #0
 800428c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 800428e:	4b2c      	ldr	r3, [pc, #176]	; (8004340 <MX_TIM17_Init+0xec>)
 8004290:	2264      	movs	r2, #100	; 0x64
 8004292:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004294:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <MX_TIM17_Init+0xec>)
 8004296:	2200      	movs	r2, #0
 8004298:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800429a:	4b29      	ldr	r3, [pc, #164]	; (8004340 <MX_TIM17_Init+0xec>)
 800429c:	2200      	movs	r2, #0
 800429e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042a0:	4b27      	ldr	r3, [pc, #156]	; (8004340 <MX_TIM17_Init+0xec>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80042a6:	4826      	ldr	r0, [pc, #152]	; (8004340 <MX_TIM17_Init+0xec>)
 80042a8:	f005 fd39 	bl	8009d1e <HAL_TIM_Base_Init>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80042b2:	f7ff faaf 	bl	8003814 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80042b6:	4822      	ldr	r0, [pc, #136]	; (8004340 <MX_TIM17_Init+0xec>)
 80042b8:	f005 fe44 	bl	8009f44 <HAL_TIM_PWM_Init>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80042c2:	f7ff faa7 	bl	8003814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042c6:	2360      	movs	r3, #96	; 0x60
 80042c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 1;
 80042ca:	2301      	movs	r3, #1
 80042cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042ce:	2300      	movs	r3, #0
 80042d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80042d2:	2300      	movs	r3, #0
 80042d4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80042da:	2300      	movs	r3, #0
 80042dc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80042de:	2300      	movs	r3, #0
 80042e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80042e6:	2200      	movs	r2, #0
 80042e8:	4619      	mov	r1, r3
 80042ea:	4815      	ldr	r0, [pc, #84]	; (8004340 <MX_TIM17_Init+0xec>)
 80042ec:	f006 f90e 	bl	800a50c <HAL_TIM_PWM_ConfigChannel>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80042f6:	f7ff fa8d 	bl	8003814 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004302:	2300      	movs	r3, #0
 8004304:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800430a:	2300      	movs	r3, #0
 800430c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800430e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004312:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004318:	2300      	movs	r3, #0
 800431a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800431c:	463b      	mov	r3, r7
 800431e:	4619      	mov	r1, r3
 8004320:	4807      	ldr	r0, [pc, #28]	; (8004340 <MX_TIM17_Init+0xec>)
 8004322:	f006 fee9 	bl	800b0f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 800432c:	f7ff fa72 	bl	8003814 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 8004330:	4803      	ldr	r0, [pc, #12]	; (8004340 <MX_TIM17_Init+0xec>)
 8004332:	f000 f825 	bl	8004380 <HAL_TIM_MspPostInit>

}
 8004336:	bf00      	nop
 8004338:	3750      	adds	r7, #80	; 0x50
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20005048 	.word	0x20005048
 8004344:	40014800 	.word	0x40014800

08004348 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004358:	d103      	bne.n	8004362 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800435a:	2001      	movs	r0, #1
 800435c:	f7ff fef9 	bl	8004152 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8004360:	e008      	b.n	8004374 <HAL_TIM_Base_MspInit+0x2c>
  else if(tim_baseHandle->Instance==TIM17)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a05      	ldr	r2, [pc, #20]	; (800437c <HAL_TIM_Base_MspInit+0x34>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d103      	bne.n	8004374 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800436c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004370:	f7ff ff08 	bl	8004184 <LL_APB2_GRP1_EnableClock>
}
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40014800 	.word	0x40014800

08004380 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004388:	f107 030c 	add.w	r3, r7, #12
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	609a      	str	r2, [r3, #8]
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM17)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a0d      	ldr	r2, [pc, #52]	; (80043d4 <HAL_TIM_MspPostInit+0x54>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d113      	bne.n	80043ca <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a2:	2002      	movs	r0, #2
 80043a4:	f7ff febc 	bl	8004120 <LL_AHB2_GRP1_EnableClock>
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 80043a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ae:	2302      	movs	r3, #2
 80043b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 80043ba:	230e      	movs	r3, #14
 80043bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 80043be:	f107 030c 	add.w	r3, r7, #12
 80043c2:	4619      	mov	r1, r3
 80043c4:	4804      	ldr	r0, [pc, #16]	; (80043d8 <HAL_TIM_MspPostInit+0x58>)
 80043c6:	f001 ff3d 	bl	8006244 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80043ca:	bf00      	nop
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40014800 	.word	0x40014800
 80043d8:	48000400 	.word	0x48000400

080043dc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80043dc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043de:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043e0:	3304      	adds	r3, #4

080043e2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043e2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043e4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80043e6:	d3f9      	bcc.n	80043dc <CopyDataInit>
  bx lr
 80043e8:	4770      	bx	lr

080043ea <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80043ea:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80043ec:	3004      	adds	r0, #4

080043ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80043ee:	4288      	cmp	r0, r1
  bcc FillZerobss
 80043f0:	d3fb      	bcc.n	80043ea <FillZerobss>
  bx lr
 80043f2:	4770      	bx	lr

080043f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043f4:	480c      	ldr	r0, [pc, #48]	; (8004428 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80043f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80043f8:	f7ff fe3c 	bl	8004074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80043fc:	480b      	ldr	r0, [pc, #44]	; (800442c <LoopForever+0x8>)
 80043fe:	490c      	ldr	r1, [pc, #48]	; (8004430 <LoopForever+0xc>)
 8004400:	4a0c      	ldr	r2, [pc, #48]	; (8004434 <LoopForever+0x10>)
 8004402:	2300      	movs	r3, #0
 8004404:	f7ff ffed 	bl	80043e2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004408:	480b      	ldr	r0, [pc, #44]	; (8004438 <LoopForever+0x14>)
 800440a:	490c      	ldr	r1, [pc, #48]	; (800443c <LoopForever+0x18>)
 800440c:	2300      	movs	r3, #0
 800440e:	f7ff ffee 	bl	80043ee <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004412:	480b      	ldr	r0, [pc, #44]	; (8004440 <LoopForever+0x1c>)
 8004414:	490b      	ldr	r1, [pc, #44]	; (8004444 <LoopForever+0x20>)
 8004416:	2300      	movs	r3, #0
 8004418:	f7ff ffe9 	bl	80043ee <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800441c:	f012 fbc4 	bl	8016ba8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004420:	f7ff f8f6 	bl	8003610 <main>

08004424 <LoopForever>:

LoopForever:
  b LoopForever
 8004424:	e7fe      	b.n	8004424 <LoopForever>
 8004426:	0000      	.short	0x0000
  ldr   r0, =_estack
 8004428:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800442c:	20000004 	.word	0x20000004
 8004430:	2000024c 	.word	0x2000024c
 8004434:	08017230 	.word	0x08017230
  INIT_BSS _sbss, _ebss
 8004438:	20000300 	.word	0x20000300
 800443c:	200068b0 	.word	0x200068b0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004440:	200300e0 	.word	0x200300e0
 8004444:	20030b57 	.word	0x20030b57

08004448 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004448:	e7fe      	b.n	8004448 <AES1_IRQHandler>
	...

0800444c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <HAL_Init+0x3c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a0b      	ldr	r2, [pc, #44]	; (8004488 <HAL_Init+0x3c>)
 800445c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004460:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004462:	2003      	movs	r0, #3
 8004464:	f001 fc18 	bl	8005c98 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004468:	2000      	movs	r0, #0
 800446a:	f7ff fd51 	bl	8003f10 <HAL_InitTick>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	71fb      	strb	r3, [r7, #7]
 8004478:	e001      	b.n	800447e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800447a:	f7ff fd10 	bl	8003e9e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800447e:	79fb      	ldrb	r3, [r7, #7]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	58004000 	.word	0x58004000

0800448c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <HAL_IncTick+0x20>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <HAL_IncTick+0x24>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4413      	add	r3, r2
 800449c:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <HAL_IncTick+0x24>)
 800449e:	6013      	str	r3, [r2, #0]
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	2000004c 	.word	0x2000004c
 80044b0:	200050e0 	.word	0x200050e0

080044b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  return uwTick;
 80044b8:	4b03      	ldr	r3, [pc, #12]	; (80044c8 <HAL_GetTick+0x14>)
 80044ba:	681b      	ldr	r3, [r3, #0]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	200050e0 	.word	0x200050e0

080044cc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80044d0:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <HAL_GetTickPrio+0x14>)
 80044d2:	681b      	ldr	r3, [r3, #0]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000048 	.word	0x20000048

080044e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80044ec:	f7ff ffe2 	bl	80044b4 <HAL_GetTick>
 80044f0:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fc:	d005      	beq.n	800450a <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80044fe:	4b09      	ldr	r3, [pc, #36]	; (8004524 <HAL_Delay+0x40>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800450a:	bf00      	nop
 800450c:	f7ff ffd2 	bl	80044b4 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	429a      	cmp	r2, r3
 800451a:	d8f7      	bhi.n	800450c <HAL_Delay+0x28>
    {
    }
  }
 800451c:	bf00      	nop
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	2000004c 	.word	0x2000004c

08004528 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	609a      	str	r2, [r3, #8]
#endif
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	609a      	str	r2, [r3, #8]
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3360      	adds	r3, #96	; 0x60
 80045a2:	461a      	mov	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <LL_ADC_SetOffset+0x44>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	4313      	orrs	r3, r2
 80045c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	03fff000 	.word	0x03fff000

080045d8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3360      	adds	r3, #96	; 0x60
 80045e6:	461a      	mov	r2, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3360      	adds	r3, #96	; 0x60
 8004614:	461a      	mov	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	431a      	orrs	r2, r3
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004652:	2300      	movs	r3, #0
#endif
}
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3330      	adds	r3, #48	; 0x30
 8004670:	461a      	mov	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	0a1b      	lsrs	r3, r3, #8
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	f003 030c 	and.w	r3, r3, #12
 800467c:	4413      	add	r3, r2
 800467e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	211f      	movs	r1, #31
 800468c:	fa01 f303 	lsl.w	r3, r1, r3
 8004690:	43db      	mvns	r3, r3
 8004692:	401a      	ands	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	0e9b      	lsrs	r3, r3, #26
 8004698:	f003 011f 	and.w	r1, r3, #31
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 031f 	and.w	r3, r3, #31
 80046a2:	fa01 f303 	lsl.w	r3, r1, r3
 80046a6:	431a      	orrs	r2, r3
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0303 	and.w	r3, r3, #3
#endif
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b087      	sub	sp, #28
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3314      	adds	r3, #20
 800470a:	461a      	mov	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	0e5b      	lsrs	r3, r3, #25
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	4413      	add	r3, r2
 8004718:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	0d1b      	lsrs	r3, r3, #20
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	2107      	movs	r1, #7
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	43db      	mvns	r3, r3
 800472e:	401a      	ands	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	0d1b      	lsrs	r3, r3, #20
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	431a      	orrs	r2, r3
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004768:	43db      	mvns	r3, r3
 800476a:	401a      	ands	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f003 0318 	and.w	r3, r3, #24
 8004772:	4908      	ldr	r1, [pc, #32]	; (8004794 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004774:	40d9      	lsrs	r1, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	400b      	ands	r3, r1
 800477a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800477e:	431a      	orrs	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	0007ffff 	.word	0x0007ffff

08004798 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80047a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6093      	str	r3, [r2, #8]
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047d0:	d101      	bne.n	80047d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80047f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80047f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004820:	d101      	bne.n	8004826 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004844:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004848:	f043 0201 	orr.w	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <LL_ADC_IsEnabled+0x18>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <LL_ADC_IsEnabled+0x1a>
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004892:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004896:	f043 0204 	orr.w	r2, r3, #4
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d101      	bne.n	80048c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d101      	bne.n	80048e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
	...

080048f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8004904:	2300      	movs	r3, #0
 8004906:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004908:	2300      	movs	r3, #0
 800490a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e12c      	b.n	8004b70 <HAL_ADC_Init+0x278>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004920:	2b00      	cmp	r3, #0
 8004922:	d109      	bne.n	8004938 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7fd f867 	bl	80019f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff ff3d 	bl	80047bc <LL_ADC_IsDeepPowerDownEnabled>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d004      	beq.n	8004952 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff ff23 	bl	8004798 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff ff58 	bl	800480c <LL_ADC_IsInternalRegulatorEnabled>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d113      	bne.n	800498a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff ff3c 	bl	80047e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800496c:	4b82      	ldr	r3, [pc, #520]	; (8004b78 <HAL_ADC_Init+0x280>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	099b      	lsrs	r3, r3, #6
 8004972:	4a82      	ldr	r2, [pc, #520]	; (8004b7c <HAL_ADC_Init+0x284>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	099b      	lsrs	r3, r3, #6
 800497a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800497c:	e002      	b.n	8004984 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	3b01      	subs	r3, #1
 8004982:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f9      	bne.n	800497e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff ff3c 	bl	800480c <LL_ADC_IsInternalRegulatorEnabled>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10d      	bne.n	80049b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	f043 0210 	orr.w	r2, r3, #16
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049aa:	f043 0201 	orr.w	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ff75 	bl	80048aa <LL_ADC_REG_IsConversionOngoing>
 80049c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	f003 0310 	and.w	r3, r3, #16
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f040 80c7 	bne.w	8004b5e <HAL_ADC_Init+0x266>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f040 80c3 	bne.w	8004b5e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80049e0:	f043 0202 	orr.w	r2, r3, #2
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff ff35 	bl	800485c <LL_ADC_IsEnabled>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10b      	bne.n	8004a10 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049f8:	4861      	ldr	r0, [pc, #388]	; (8004b80 <HAL_ADC_Init+0x288>)
 80049fa:	f7ff ff2f 	bl	800485c <LL_ADC_IsEnabled>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d105      	bne.n	8004a10 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	485e      	ldr	r0, [pc, #376]	; (8004b84 <HAL_ADC_Init+0x28c>)
 8004a0c:	f7ff fd8c 	bl	8004528 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	7e5b      	ldrb	r3, [r3, #25]
 8004a14:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a1a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004a20:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004a26:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a2e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8004a30:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d106      	bne.n	8004a50 <HAL_ADC_Init+0x158>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	3b01      	subs	r3, #1
 8004a48:	045b      	lsls	r3, r3, #17
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d009      	beq.n	8004a6c <HAL_ADC_Init+0x174>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	4b45      	ldr	r3, [pc, #276]	; (8004b88 <HAL_ADC_Init+0x290>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6812      	ldr	r2, [r2, #0]
 8004a7a:	69b9      	ldr	r1, [r7, #24]
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff ff10 	bl	80048aa <LL_ADC_REG_IsConversionOngoing>
 8004a8a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff ff1d 	bl	80048d0 <LL_ADC_INJ_IsConversionOngoing>
 8004a96:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d13d      	bne.n	8004b1a <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d13a      	bne.n	8004b1a <HAL_ADC_Init+0x222>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004aa8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ab0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ac0:	f023 0302 	bic.w	r3, r3, #2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	69b9      	ldr	r1, [r7, #24]
 8004aca:	430b      	orrs	r3, r1
 8004acc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d118      	bne.n	8004b0a <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ae2:	f023 0304 	bic.w	r3, r3, #4
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004aee:	4311      	orrs	r1, r2
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004af4:	4311      	orrs	r1, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004afa:	430a      	orrs	r2, r1
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	611a      	str	r2, [r3, #16]
 8004b08:	e007      	b.n	8004b1a <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0201 	bic.w	r2, r2, #1
 8004b18:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d10c      	bne.n	8004b3c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	f023 010f 	bic.w	r1, r3, #15
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	1e5a      	subs	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
 8004b3a:	e007      	b.n	8004b4c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 020f 	bic.w	r2, r2, #15
 8004b4a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b50:	f023 0303 	bic.w	r3, r3, #3
 8004b54:	f043 0201 	orr.w	r2, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54
 8004b5c:	e007      	b.n	8004b6e <HAL_ADC_Init+0x276>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b62:	f043 0210 	orr.w	r2, r3, #16
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3720      	adds	r7, #32
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20000044 	.word	0x20000044
 8004b7c:	053e2d63 	.word	0x053e2d63
 8004b80:	50040000 	.word	0x50040000
 8004b84:	50040300 	.word	0x50040300
 8004b88:	fff0c007 	.word	0xfff0c007

08004b8c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fe84 	bl	80048aa <LL_ADC_REG_IsConversionOngoing>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d167      	bne.n	8004c78 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_ADC_Start_DMA+0x2a>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e063      	b.n	8004c7e <HAL_ADC_Start_DMA+0xf2>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fe0a 	bl	80057d8 <ADC_Enable>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004bc8:	7dfb      	ldrb	r3, [r7, #23]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d14f      	bne.n	8004c6e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d006      	beq.n	8004bfc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf2:	f023 0206 	bic.w	r2, r3, #6
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	659a      	str	r2, [r3, #88]	; 0x58
 8004bfa:	e002      	b.n	8004c02 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c06:	4a20      	ldr	r2, [pc, #128]	; (8004c88 <HAL_ADC_Start_DMA+0xfc>)
 8004c08:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0e:	4a1f      	ldr	r2, [pc, #124]	; (8004c8c <HAL_ADC_Start_DMA+0x100>)
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c16:	4a1e      	ldr	r2, [pc, #120]	; (8004c90 <HAL_ADC_Start_DMA+0x104>)
 8004c18:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	221c      	movs	r2, #28
 8004c20:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0210 	orr.w	r2, r2, #16
 8004c38:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	60da      	str	r2, [r3, #12]
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3340      	adds	r3, #64	; 0x40
 8004c54:	4619      	mov	r1, r3
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f001 f927 	bl	8005eac <HAL_DMA_Start_IT>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff fe0b 	bl	8004882 <LL_ADC_REG_StartConversion>
 8004c6c:	e006      	b.n	8004c7c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004c76:	e001      	b.n	8004c7c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	080058cd 	.word	0x080058cd
 8004c8c:	080059a5 	.word	0x080059a5
 8004c90:	080059c1 	.word	0x080059c1

08004c94 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b088      	sub	sp, #32
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d017      	beq.n	8004cea <HAL_ADC_IRQHandler+0x56>
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d012      	beq.n	8004cea <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc8:	f003 0310 	and.w	r3, r3, #16
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d105      	bne.n	8004cdc <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 feb1 	bl	8005a44 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <HAL_ADC_IRQHandler+0x6a>
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d109      	bne.n	8004d12 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d05d      	beq.n	8004dc4 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d058      	beq.n	8004dc4 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d105      	bne.n	8004d2a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff fc83 	bl	800463a <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d03d      	beq.n	8004db6 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if defined (ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d48:	d035      	beq.n	8004db6 <HAL_ADC_IRQHandler+0x122>
#endif
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d12e      	bne.n	8004db6 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fda4 	bl	80048aa <LL_ADC_REG_IsConversionOngoing>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d11a      	bne.n	8004d9e <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 020c 	bic.w	r2, r2, #12
 8004d76:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d112      	bne.n	8004db6 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d94:	f043 0201 	orr.w	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	655a      	str	r2, [r3, #84]	; 0x54
 8004d9c:	e00b      	b.n	8004db6 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	f043 0210 	orr.w	r2, r3, #16
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dae:	f043 0201 	orr.w	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f922 	bl	8005000 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	220c      	movs	r2, #12
 8004dc2:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d004      	beq.n	8004dd8 <HAL_ADC_IRQHandler+0x144>
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d109      	bne.n	8004dec <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d074      	beq.n	8004ecc <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d06f      	beq.n	8004ecc <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff fc63 	bl	80046d4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004e0e:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fc10 	bl	800463a <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e1a:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d049      	beq.n	8004ebe <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d007      	beq.n	8004e44 <HAL_ADC_IRQHandler+0x1b0>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d041      	beq.n	8004ebe <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d13c      	bne.n	8004ebe <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4e:	2b40      	cmp	r3, #64	; 0x40
 8004e50:	d135      	bne.n	8004ebe <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d12e      	bne.n	8004ebe <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fd33 	bl	80048d0 <LL_ADC_INJ_IsConversionOngoing>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d11a      	bne.n	8004ea6 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e7e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d112      	bne.n	8004ebe <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9c:	f043 0201 	orr.w	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	655a      	str	r2, [r3, #84]	; 0x54
 8004ea4:	e00b      	b.n	8004ebe <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	f043 0210 	orr.w	r2, r3, #16
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb6:	f043 0201 	orr.w	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fd98 	bl	80059f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2260      	movs	r2, #96	; 0x60
 8004eca:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d011      	beq.n	8004efa <HAL_ADC_IRQHandler+0x266>
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00c      	beq.n	8004efa <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f89b 	bl	8005028 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2280      	movs	r2, #128	; 0x80
 8004ef8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d012      	beq.n	8004f2a <HAL_ADC_IRQHandler+0x296>
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00d      	beq.n	8004f2a <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fd7e 	bl	8005a1c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d012      	beq.n	8004f5a <HAL_ADC_IRQHandler+0x2c6>
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00d      	beq.n	8004f5a <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fd70 	bl	8005a30 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d02b      	beq.n	8004fbc <HAL_ADC_IRQHandler+0x328>
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d026      	beq.n	8004fbc <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d102      	bne.n	8004f7c <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8004f76:	2301      	movs	r3, #1
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	e009      	b.n	8004f90 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff fb99 	bl	80046b8 <LL_ADC_REG_GetDMATransfer>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d10e      	bne.n	8004fb4 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	f043 0202 	orr.w	r2, r3, #2
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f844 	bl	800503c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2210      	movs	r2, #16
 8004fba:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d018      	beq.n	8004ff8 <HAL_ADC_IRQHandler+0x364>
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d013      	beq.n	8004ff8 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe0:	f043 0208 	orr.w	r2, r3, #8
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ff0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fd08 	bl	8005a08 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8004ff8:	bf00      	nop
 8004ffa:	3720      	adds	r7, #32
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b0b6      	sub	sp, #216	; 0xd8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_ADC_ConfigChannel+0x22>
 800506e:	2302      	movs	r3, #2
 8005070:	e39e      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x760>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff fc13 	bl	80048aa <LL_ADC_REG_IsConversionOngoing>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	f040 8383 	bne.w	8005792 <HAL_ADC_ConfigChannel+0x742>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6818      	ldr	r0, [r3, #0]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	6859      	ldr	r1, [r3, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	461a      	mov	r2, r3
 800509a:	f7ff fae1 	bl	8004660 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff fc01 	bl	80048aa <LL_ADC_REG_IsConversionOngoing>
 80050a8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fc0d 	bl	80048d0 <LL_ADC_INJ_IsConversionOngoing>
 80050b6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80050ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f040 81a6 	bne.w	8005410 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80050c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f040 81a1 	bne.w	8005410 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6819      	ldr	r1, [r3, #0]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	461a      	mov	r2, r3
 80050dc:	f7ff fb0d 	bl	80046fa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	695a      	ldr	r2, [r3, #20]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	08db      	lsrs	r3, r3, #3
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d00a      	beq.n	8005118 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6919      	ldr	r1, [r3, #16]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005112:	f7ff fa3d 	bl	8004590 <LL_ADC_SetOffset>
 8005116:	e17b      	b.n	8005410 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2100      	movs	r1, #0
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff fa5a 	bl	80045d8 <LL_ADC_GetOffsetChannel>
 8005124:	4603      	mov	r3, r0
 8005126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <HAL_ADC_ConfigChannel+0xf4>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2100      	movs	r1, #0
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff fa4f 	bl	80045d8 <LL_ADC_GetOffsetChannel>
 800513a:	4603      	mov	r3, r0
 800513c:	0e9b      	lsrs	r3, r3, #26
 800513e:	f003 021f 	and.w	r2, r3, #31
 8005142:	e01e      	b.n	8005182 <HAL_ADC_ConfigChannel+0x132>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2100      	movs	r1, #0
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff fa44 	bl	80045d8 <LL_ADC_GetOffsetChannel>
 8005150:	4603      	mov	r3, r0
 8005152:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005156:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800515a:	fa93 f3a3 	rbit	r3, r3
 800515e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8005162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005166:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800516a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8005172:	2320      	movs	r3, #32
 8005174:	e004      	b.n	8005180 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8005176:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800517a:	fab3 f383 	clz	r3, r3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	461a      	mov	r2, r3
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800518a:	2b00      	cmp	r3, #0
 800518c:	d105      	bne.n	800519a <HAL_ADC_ConfigChannel+0x14a>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	0e9b      	lsrs	r3, r3, #26
 8005194:	f003 031f 	and.w	r3, r3, #31
 8005198:	e018      	b.n	80051cc <HAL_ADC_ConfigChannel+0x17c>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80051a6:	fa93 f3a3 	rbit	r3, r3
 80051aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80051ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80051b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80051be:	2320      	movs	r3, #32
 80051c0:	e004      	b.n	80051cc <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80051c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80051c6:	fab3 f383 	clz	r3, r3
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d106      	bne.n	80051de <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2200      	movs	r2, #0
 80051d6:	2100      	movs	r1, #0
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff fa13 	bl	8004604 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2101      	movs	r1, #1
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff f9f7 	bl	80045d8 <LL_ADC_GetOffsetChannel>
 80051ea:	4603      	mov	r3, r0
 80051ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <HAL_ADC_ConfigChannel+0x1ba>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2101      	movs	r1, #1
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff f9ec 	bl	80045d8 <LL_ADC_GetOffsetChannel>
 8005200:	4603      	mov	r3, r0
 8005202:	0e9b      	lsrs	r3, r3, #26
 8005204:	f003 021f 	and.w	r2, r3, #31
 8005208:	e01e      	b.n	8005248 <HAL_ADC_ConfigChannel+0x1f8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2101      	movs	r1, #1
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff f9e1 	bl	80045d8 <LL_ADC_GetOffsetChannel>
 8005216:	4603      	mov	r3, r0
 8005218:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005220:	fa93 f3a3 	rbit	r3, r3
 8005224:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005228:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800522c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8005238:	2320      	movs	r3, #32
 800523a:	e004      	b.n	8005246 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800523c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005240:	fab3 f383 	clz	r3, r3
 8005244:	b2db      	uxtb	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005250:	2b00      	cmp	r3, #0
 8005252:	d105      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x210>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	0e9b      	lsrs	r3, r3, #26
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	e018      	b.n	8005292 <HAL_ADC_ConfigChannel+0x242>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800526c:	fa93 f3a3 	rbit	r3, r3
 8005270:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005274:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005278:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800527c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8005284:	2320      	movs	r3, #32
 8005286:	e004      	b.n	8005292 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8005288:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800528c:	fab3 f383 	clz	r3, r3
 8005290:	b2db      	uxtb	r3, r3
 8005292:	429a      	cmp	r2, r3
 8005294:	d106      	bne.n	80052a4 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2200      	movs	r2, #0
 800529c:	2101      	movs	r1, #1
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff f9b0 	bl	8004604 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2102      	movs	r1, #2
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff f994 	bl	80045d8 <LL_ADC_GetOffsetChannel>
 80052b0:	4603      	mov	r3, r0
 80052b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <HAL_ADC_ConfigChannel+0x280>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2102      	movs	r1, #2
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff f989 	bl	80045d8 <LL_ADC_GetOffsetChannel>
 80052c6:	4603      	mov	r3, r0
 80052c8:	0e9b      	lsrs	r3, r3, #26
 80052ca:	f003 021f 	and.w	r2, r3, #31
 80052ce:	e01e      	b.n	800530e <HAL_ADC_ConfigChannel+0x2be>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2102      	movs	r1, #2
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff f97e 	bl	80045d8 <LL_ADC_GetOffsetChannel>
 80052dc:	4603      	mov	r3, r0
 80052de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052e6:	fa93 f3a3 	rbit	r3, r3
 80052ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80052ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80052f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80052fe:	2320      	movs	r3, #32
 8005300:	e004      	b.n	800530c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005302:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005306:	fab3 f383 	clz	r3, r3
 800530a:	b2db      	uxtb	r3, r3
 800530c:	461a      	mov	r2, r3
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005316:	2b00      	cmp	r3, #0
 8005318:	d105      	bne.n	8005326 <HAL_ADC_ConfigChannel+0x2d6>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	0e9b      	lsrs	r3, r3, #26
 8005320:	f003 031f 	and.w	r3, r3, #31
 8005324:	e016      	b.n	8005354 <HAL_ADC_ConfigChannel+0x304>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005332:	fa93 f3a3 	rbit	r3, r3
 8005336:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005338:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800533a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800533e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8005346:	2320      	movs	r3, #32
 8005348:	e004      	b.n	8005354 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800534a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800534e:	fab3 f383 	clz	r3, r3
 8005352:	b2db      	uxtb	r3, r3
 8005354:	429a      	cmp	r2, r3
 8005356:	d106      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2200      	movs	r2, #0
 800535e:	2102      	movs	r1, #2
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff f94f 	bl	8004604 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2103      	movs	r1, #3
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff f933 	bl	80045d8 <LL_ADC_GetOffsetChannel>
 8005372:	4603      	mov	r3, r0
 8005374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10a      	bne.n	8005392 <HAL_ADC_ConfigChannel+0x342>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2103      	movs	r1, #3
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff f928 	bl	80045d8 <LL_ADC_GetOffsetChannel>
 8005388:	4603      	mov	r3, r0
 800538a:	0e9b      	lsrs	r3, r3, #26
 800538c:	f003 021f 	and.w	r2, r3, #31
 8005390:	e017      	b.n	80053c2 <HAL_ADC_ConfigChannel+0x372>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2103      	movs	r1, #3
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff f91d 	bl	80045d8 <LL_ADC_GetOffsetChannel>
 800539e:	4603      	mov	r3, r0
 80053a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053a4:	fa93 f3a3 	rbit	r3, r3
 80053a8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80053aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053ac:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80053ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80053b4:	2320      	movs	r3, #32
 80053b6:	e003      	b.n	80053c0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80053b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ba:	fab3 f383 	clz	r3, r3
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d105      	bne.n	80053da <HAL_ADC_ConfigChannel+0x38a>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	0e9b      	lsrs	r3, r3, #26
 80053d4:	f003 031f 	and.w	r3, r3, #31
 80053d8:	e011      	b.n	80053fe <HAL_ADC_ConfigChannel+0x3ae>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053e2:	fa93 f3a3 	rbit	r3, r3
 80053e6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80053e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80053ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80053f2:	2320      	movs	r3, #32
 80053f4:	e003      	b.n	80053fe <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80053f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f8:	fab3 f383 	clz	r3, r3
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	429a      	cmp	r2, r3
 8005400:	d106      	bne.n	8005410 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2200      	movs	r2, #0
 8005408:	2103      	movs	r1, #3
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff f8fa 	bl	8004604 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fa21 	bl	800485c <LL_ADC_IsEnabled>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 81c1 	bne.w	80057a4 <HAL_ADC_ConfigChannel+0x754>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6819      	ldr	r1, [r3, #0]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	461a      	mov	r2, r3
 8005430:	f7ff f98e 	bl	8004750 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	4a8e      	ldr	r2, [pc, #568]	; (8005674 <HAL_ADC_ConfigChannel+0x624>)
 800543a:	4293      	cmp	r3, r2
 800543c:	f040 8130 	bne.w	80056a0 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10b      	bne.n	8005468 <HAL_ADC_ConfigChannel+0x418>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	0e9b      	lsrs	r3, r3, #26
 8005456:	3301      	adds	r3, #1
 8005458:	f003 031f 	and.w	r3, r3, #31
 800545c:	2b09      	cmp	r3, #9
 800545e:	bf94      	ite	ls
 8005460:	2301      	movls	r3, #1
 8005462:	2300      	movhi	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	e019      	b.n	800549c <HAL_ADC_ConfigChannel+0x44c>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005470:	fa93 f3a3 	rbit	r3, r3
 8005474:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005478:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800547a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8005480:	2320      	movs	r3, #32
 8005482:	e003      	b.n	800548c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8005484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005486:	fab3 f383 	clz	r3, r3
 800548a:	b2db      	uxtb	r3, r3
 800548c:	3301      	adds	r3, #1
 800548e:	f003 031f 	and.w	r3, r3, #31
 8005492:	2b09      	cmp	r3, #9
 8005494:	bf94      	ite	ls
 8005496:	2301      	movls	r3, #1
 8005498:	2300      	movhi	r3, #0
 800549a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800549c:	2b00      	cmp	r3, #0
 800549e:	d079      	beq.n	8005594 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d107      	bne.n	80054bc <HAL_ADC_ConfigChannel+0x46c>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	0e9b      	lsrs	r3, r3, #26
 80054b2:	3301      	adds	r3, #1
 80054b4:	069b      	lsls	r3, r3, #26
 80054b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054ba:	e015      	b.n	80054e8 <HAL_ADC_ConfigChannel+0x498>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c4:	fa93 f3a3 	rbit	r3, r3
 80054c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80054ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80054ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80054d4:	2320      	movs	r3, #32
 80054d6:	e003      	b.n	80054e0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80054d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054da:	fab3 f383 	clz	r3, r3
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	3301      	adds	r3, #1
 80054e2:	069b      	lsls	r3, r3, #26
 80054e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d109      	bne.n	8005508 <HAL_ADC_ConfigChannel+0x4b8>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	0e9b      	lsrs	r3, r3, #26
 80054fa:	3301      	adds	r3, #1
 80054fc:	f003 031f 	and.w	r3, r3, #31
 8005500:	2101      	movs	r1, #1
 8005502:	fa01 f303 	lsl.w	r3, r1, r3
 8005506:	e017      	b.n	8005538 <HAL_ADC_ConfigChannel+0x4e8>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005510:	fa93 f3a3 	rbit	r3, r3
 8005514:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005518:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800551a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8005520:	2320      	movs	r3, #32
 8005522:	e003      	b.n	800552c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8005524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005526:	fab3 f383 	clz	r3, r3
 800552a:	b2db      	uxtb	r3, r3
 800552c:	3301      	adds	r3, #1
 800552e:	f003 031f 	and.w	r3, r3, #31
 8005532:	2101      	movs	r1, #1
 8005534:	fa01 f303 	lsl.w	r3, r1, r3
 8005538:	ea42 0103 	orr.w	r1, r2, r3
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10a      	bne.n	800555e <HAL_ADC_ConfigChannel+0x50e>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	0e9b      	lsrs	r3, r3, #26
 800554e:	3301      	adds	r3, #1
 8005550:	f003 021f 	and.w	r2, r3, #31
 8005554:	4613      	mov	r3, r2
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	4413      	add	r3, r2
 800555a:	051b      	lsls	r3, r3, #20
 800555c:	e018      	b.n	8005590 <HAL_ADC_ConfigChannel+0x540>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	fa93 f3a3 	rbit	r3, r3
 800556a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800556c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005576:	2320      	movs	r3, #32
 8005578:	e003      	b.n	8005582 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800557a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557c:	fab3 f383 	clz	r3, r3
 8005580:	b2db      	uxtb	r3, r3
 8005582:	3301      	adds	r3, #1
 8005584:	f003 021f 	and.w	r2, r3, #31
 8005588:	4613      	mov	r3, r2
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	4413      	add	r3, r2
 800558e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005590:	430b      	orrs	r3, r1
 8005592:	e080      	b.n	8005696 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800559c:	2b00      	cmp	r3, #0
 800559e:	d107      	bne.n	80055b0 <HAL_ADC_ConfigChannel+0x560>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	0e9b      	lsrs	r3, r3, #26
 80055a6:	3301      	adds	r3, #1
 80055a8:	069b      	lsls	r3, r3, #26
 80055aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055ae:	e015      	b.n	80055dc <HAL_ADC_ConfigChannel+0x58c>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	fa93 f3a3 	rbit	r3, r3
 80055bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80055c8:	2320      	movs	r3, #32
 80055ca:	e003      	b.n	80055d4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	fab3 f383 	clz	r3, r3
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	3301      	adds	r3, #1
 80055d6:	069b      	lsls	r3, r3, #26
 80055d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d109      	bne.n	80055fc <HAL_ADC_ConfigChannel+0x5ac>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	0e9b      	lsrs	r3, r3, #26
 80055ee:	3301      	adds	r3, #1
 80055f0:	f003 031f 	and.w	r3, r3, #31
 80055f4:	2101      	movs	r1, #1
 80055f6:	fa01 f303 	lsl.w	r3, r1, r3
 80055fa:	e017      	b.n	800562c <HAL_ADC_ConfigChannel+0x5dc>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	fa93 f3a3 	rbit	r3, r3
 8005608:	61fb      	str	r3, [r7, #28]
  return result;
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8005614:	2320      	movs	r3, #32
 8005616:	e003      	b.n	8005620 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	fab3 f383 	clz	r3, r3
 800561e:	b2db      	uxtb	r3, r3
 8005620:	3301      	adds	r3, #1
 8005622:	f003 031f 	and.w	r3, r3, #31
 8005626:	2101      	movs	r1, #1
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	ea42 0103 	orr.w	r1, r2, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10d      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x608>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	0e9b      	lsrs	r3, r3, #26
 8005642:	3301      	adds	r3, #1
 8005644:	f003 021f 	and.w	r2, r3, #31
 8005648:	4613      	mov	r3, r2
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	4413      	add	r3, r2
 800564e:	3b1e      	subs	r3, #30
 8005650:	051b      	lsls	r3, r3, #20
 8005652:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005656:	e01d      	b.n	8005694 <HAL_ADC_ConfigChannel+0x644>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	fa93 f3a3 	rbit	r3, r3
 8005664:	613b      	str	r3, [r7, #16]
  return result;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d103      	bne.n	8005678 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8005670:	2320      	movs	r3, #32
 8005672:	e005      	b.n	8005680 <HAL_ADC_ConfigChannel+0x630>
 8005674:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	fab3 f383 	clz	r3, r3
 800567e:	b2db      	uxtb	r3, r3
 8005680:	3301      	adds	r3, #1
 8005682:	f003 021f 	and.w	r2, r3, #31
 8005686:	4613      	mov	r3, r2
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	4413      	add	r3, r2
 800568c:	3b1e      	subs	r3, #30
 800568e:	051b      	lsls	r3, r3, #20
 8005690:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005694:	430b      	orrs	r3, r1
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	6892      	ldr	r2, [r2, #8]
 800569a:	4619      	mov	r1, r3
 800569c:	f7ff f82d 	bl	80046fa <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	4b44      	ldr	r3, [pc, #272]	; (80057b8 <HAL_ADC_ConfigChannel+0x768>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d07b      	beq.n	80057a4 <HAL_ADC_ConfigChannel+0x754>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056ac:	4843      	ldr	r0, [pc, #268]	; (80057bc <HAL_ADC_ConfigChannel+0x76c>)
 80056ae:	f7fe ff61 	bl	8004574 <LL_ADC_GetCommonPathInternalCh>
 80056b2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056b6:	4842      	ldr	r0, [pc, #264]	; (80057c0 <HAL_ADC_ConfigChannel+0x770>)
 80056b8:	f7ff f8d0 	bl	800485c <LL_ADC_IsEnabled>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d15d      	bne.n	800577e <HAL_ADC_ConfigChannel+0x72e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a3f      	ldr	r2, [pc, #252]	; (80057c4 <HAL_ADC_ConfigChannel+0x774>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d126      	bne.n	800571a <HAL_ADC_ConfigChannel+0x6ca>
 80056cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d120      	bne.n	800571a <HAL_ADC_ConfigChannel+0x6ca>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a38      	ldr	r2, [pc, #224]	; (80057c0 <HAL_ADC_ConfigChannel+0x770>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d160      	bne.n	80057a4 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80056e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056ea:	4619      	mov	r1, r3
 80056ec:	4833      	ldr	r0, [pc, #204]	; (80057bc <HAL_ADC_ConfigChannel+0x76c>)
 80056ee:	f7fe ff2e 	bl	800454e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80056f2:	4b35      	ldr	r3, [pc, #212]	; (80057c8 <HAL_ADC_ConfigChannel+0x778>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	099b      	lsrs	r3, r3, #6
 80056f8:	4a34      	ldr	r2, [pc, #208]	; (80057cc <HAL_ADC_ConfigChannel+0x77c>)
 80056fa:	fba2 2303 	umull	r2, r3, r2, r3
 80056fe:	099a      	lsrs	r2, r3, #6
 8005700:	4613      	mov	r3, r2
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	4413      	add	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800570a:	e002      	b.n	8005712 <HAL_ADC_ConfigChannel+0x6c2>
              {
                wait_loop_index--;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3b01      	subs	r3, #1
 8005710:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1f9      	bne.n	800570c <HAL_ADC_ConfigChannel+0x6bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005718:	e044      	b.n	80057a4 <HAL_ADC_ConfigChannel+0x754>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a2c      	ldr	r2, [pc, #176]	; (80057d0 <HAL_ADC_ConfigChannel+0x780>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d113      	bne.n	800574c <HAL_ADC_ConfigChannel+0x6fc>
 8005724:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10d      	bne.n	800574c <HAL_ADC_ConfigChannel+0x6fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a22      	ldr	r2, [pc, #136]	; (80057c0 <HAL_ADC_ConfigChannel+0x770>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d134      	bne.n	80057a4 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800573a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800573e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005742:	4619      	mov	r1, r3
 8005744:	481d      	ldr	r0, [pc, #116]	; (80057bc <HAL_ADC_ConfigChannel+0x76c>)
 8005746:	f7fe ff02 	bl	800454e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800574a:	e02b      	b.n	80057a4 <HAL_ADC_ConfigChannel+0x754>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a20      	ldr	r2, [pc, #128]	; (80057d4 <HAL_ADC_ConfigChannel+0x784>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d126      	bne.n	80057a4 <HAL_ADC_ConfigChannel+0x754>
 8005756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800575a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d120      	bne.n	80057a4 <HAL_ADC_ConfigChannel+0x754>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a16      	ldr	r2, [pc, #88]	; (80057c0 <HAL_ADC_ConfigChannel+0x770>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d11b      	bne.n	80057a4 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800576c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005770:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005774:	4619      	mov	r1, r3
 8005776:	4811      	ldr	r0, [pc, #68]	; (80057bc <HAL_ADC_ConfigChannel+0x76c>)
 8005778:	f7fe fee9 	bl	800454e <LL_ADC_SetCommonPathInternalCh>
 800577c:	e012      	b.n	80057a4 <HAL_ADC_ConfigChannel+0x754>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005782:	f043 0220 	orr.w	r2, r3, #32
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005790:	e008      	b.n	80057a4 <HAL_ADC_ConfigChannel+0x754>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005796:	f043 0220 	orr.w	r2, r3, #32
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80057ac:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	37d8      	adds	r7, #216	; 0xd8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	80080000 	.word	0x80080000
 80057bc:	50040300 	.word	0x50040300
 80057c0:	50040000 	.word	0x50040000
 80057c4:	c7520000 	.word	0xc7520000
 80057c8:	20000044 	.word	0x20000044
 80057cc:	053e2d63 	.word	0x053e2d63
 80057d0:	cb840000 	.word	0xcb840000
 80057d4:	80000001 	.word	0x80000001

080057d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff f837 	bl	800485c <LL_ADC_IsEnabled>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d15e      	bne.n	80058b2 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	4b30      	ldr	r3, [pc, #192]	; (80058bc <ADC_Enable+0xe4>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00d      	beq.n	800581e <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005806:	f043 0210 	orr.w	r2, r3, #16
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005812:	f043 0201 	orr.w	r2, r3, #1
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e04a      	b.n	80058b4 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff f806 	bl	8004834 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005828:	4825      	ldr	r0, [pc, #148]	; (80058c0 <ADC_Enable+0xe8>)
 800582a:	f7fe fea3 	bl	8004574 <LL_ADC_GetCommonPathInternalCh>
 800582e:	4603      	mov	r3, r0
 8005830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00f      	beq.n	8005858 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8005838:	4b22      	ldr	r3, [pc, #136]	; (80058c4 <ADC_Enable+0xec>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	099b      	lsrs	r3, r3, #6
 800583e:	4a22      	ldr	r2, [pc, #136]	; (80058c8 <ADC_Enable+0xf0>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	099b      	lsrs	r3, r3, #6
 8005846:	3301      	adds	r3, #1
 8005848:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800584a:	e002      	b.n	8005852 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	3b01      	subs	r3, #1
 8005850:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f9      	bne.n	800584c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005858:	f7fe fe2c 	bl	80044b4 <HAL_GetTick>
 800585c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800585e:	e021      	b.n	80058a4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f7fe fff9 	bl	800485c <LL_ADC_IsEnabled>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d104      	bne.n	800587a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4618      	mov	r0, r3
 8005876:	f7fe ffdd 	bl	8004834 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800587a:	f7fe fe1b 	bl	80044b4 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d90d      	bls.n	80058a4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588c:	f043 0210 	orr.w	r2, r3, #16
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005898:	f043 0201 	orr.w	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e007      	b.n	80058b4 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d1d6      	bne.n	8005860 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	8000003f 	.word	0x8000003f
 80058c0:	50040300 	.word	0x50040300
 80058c4:	20000044 	.word	0x20000044
 80058c8:	053e2d63 	.word	0x053e2d63

080058cc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d14b      	bne.n	800597e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d021      	beq.n	8005944 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe fe98 	bl	800463a <LL_ADC_REG_IsTriggerSourceSWStart>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d032      	beq.n	8005976 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d12b      	bne.n	8005976 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d11f      	bne.n	8005976 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593a:	f043 0201 	orr.w	r2, r3, #1
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	655a      	str	r2, [r3, #84]	; 0x54
 8005942:	e018      	b.n	8005976 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d111      	bne.n	8005976 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d105      	bne.n	8005976 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596e:	f043 0201 	orr.w	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f7ff fb42 	bl	8005000 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800597c:	e00e      	b.n	800599c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff fb56 	bl	800503c <HAL_ADC_ErrorCallback>
}
 8005990:	e004      	b.n	800599c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	4798      	blx	r3
}
 800599c:	bf00      	nop
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7ff fb2e 	bl	8005014 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059b8:	bf00      	nop
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059de:	f043 0204 	orr.w	r2, r3, #4
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7ff fb28 	bl	800503c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059ec:	bf00      	nop
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f003 0307 	and.w	r3, r3, #7
 8005a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a68:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <__NVIC_SetPriorityGrouping+0x44>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a74:	4013      	ands	r3, r2
 8005a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a8a:	4a04      	ldr	r2, [pc, #16]	; (8005a9c <__NVIC_SetPriorityGrouping+0x44>)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	60d3      	str	r3, [r2, #12]
}
 8005a90:	bf00      	nop
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	e000ed00 	.word	0xe000ed00

08005aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005aa4:	4b04      	ldr	r3, [pc, #16]	; (8005ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	0a1b      	lsrs	r3, r3, #8
 8005aaa:	f003 0307 	and.w	r3, r3, #7
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	e000ed00 	.word	0xe000ed00

08005abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	db0b      	blt.n	8005ae6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ace:	79fb      	ldrb	r3, [r7, #7]
 8005ad0:	f003 021f 	and.w	r2, r3, #31
 8005ad4:	4907      	ldr	r1, [pc, #28]	; (8005af4 <__NVIC_EnableIRQ+0x38>)
 8005ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	2001      	movs	r0, #1
 8005ade:	fa00 f202 	lsl.w	r2, r0, r2
 8005ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	e000e100 	.word	0xe000e100

08005af8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	4603      	mov	r3, r0
 8005b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	db10      	blt.n	8005b2c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	f003 021f 	and.w	r2, r3, #31
 8005b10:	4909      	ldr	r1, [pc, #36]	; (8005b38 <__NVIC_DisableIRQ+0x40>)
 8005b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	2001      	movs	r0, #1
 8005b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b1e:	3320      	adds	r3, #32
 8005b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005b28:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	e000e100 	.word	0xe000e100

08005b3c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	4603      	mov	r3, r0
 8005b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	db0c      	blt.n	8005b68 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b4e:	79fb      	ldrb	r3, [r7, #7]
 8005b50:	f003 021f 	and.w	r2, r3, #31
 8005b54:	4907      	ldr	r1, [pc, #28]	; (8005b74 <__NVIC_SetPendingIRQ+0x38>)
 8005b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	2001      	movs	r0, #1
 8005b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b62:	3340      	adds	r3, #64	; 0x40
 8005b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	e000e100 	.word	0xe000e100

08005b78 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	db0c      	blt.n	8005ba4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	f003 021f 	and.w	r2, r3, #31
 8005b90:	4907      	ldr	r1, [pc, #28]	; (8005bb0 <__NVIC_ClearPendingIRQ+0x38>)
 8005b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	2001      	movs	r0, #1
 8005b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b9e:	3360      	adds	r3, #96	; 0x60
 8005ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	e000e100 	.word	0xe000e100

08005bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	6039      	str	r1, [r7, #0]
 8005bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	db0a      	blt.n	8005bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	490c      	ldr	r1, [pc, #48]	; (8005c00 <__NVIC_SetPriority+0x4c>)
 8005bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd2:	0112      	lsls	r2, r2, #4
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bdc:	e00a      	b.n	8005bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	4908      	ldr	r1, [pc, #32]	; (8005c04 <__NVIC_SetPriority+0x50>)
 8005be4:	79fb      	ldrb	r3, [r7, #7]
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	3b04      	subs	r3, #4
 8005bec:	0112      	lsls	r2, r2, #4
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	761a      	strb	r2, [r3, #24]
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	e000e100 	.word	0xe000e100
 8005c04:	e000ed00 	.word	0xe000ed00

08005c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b089      	sub	sp, #36	; 0x24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f1c3 0307 	rsb	r3, r3, #7
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	bf28      	it	cs
 8005c26:	2304      	movcs	r3, #4
 8005c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	2b06      	cmp	r3, #6
 8005c30:	d902      	bls.n	8005c38 <NVIC_EncodePriority+0x30>
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	3b03      	subs	r3, #3
 8005c36:	e000      	b.n	8005c3a <NVIC_EncodePriority+0x32>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	43da      	mvns	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	401a      	ands	r2, r3
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c50:	f04f 31ff 	mov.w	r1, #4294967295
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5a:	43d9      	mvns	r1, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c60:	4313      	orrs	r3, r2
         );
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3724      	adds	r7, #36	; 0x24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
	...

08005c70 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005c74:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005c78:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <__NVIC_SystemReset+0x20>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005c80:	4903      	ldr	r1, [pc, #12]	; (8005c90 <__NVIC_SystemReset+0x20>)
 8005c82:	4b04      	ldr	r3, [pc, #16]	; (8005c94 <__NVIC_SystemReset+0x24>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60cb      	str	r3, [r1, #12]
 8005c88:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005c8c:	bf00      	nop
 8005c8e:	e7fd      	b.n	8005c8c <__NVIC_SystemReset+0x1c>
 8005c90:	e000ed00 	.word	0xe000ed00
 8005c94:	05fa0004 	.word	0x05fa0004

08005c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff fed9 	bl	8005a58 <__NVIC_SetPriorityGrouping>
}
 8005ca6:	bf00      	nop
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b086      	sub	sp, #24
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	607a      	str	r2, [r7, #4]
 8005cba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cbc:	f7ff fef0 	bl	8005aa0 <__NVIC_GetPriorityGrouping>
 8005cc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	6978      	ldr	r0, [r7, #20]
 8005cc8:	f7ff ff9e 	bl	8005c08 <NVIC_EncodePriority>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff ff6d 	bl	8005bb4 <__NVIC_SetPriority>
}
 8005cda:	bf00      	nop
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	4603      	mov	r3, r0
 8005cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fee3 	bl	8005abc <__NVIC_EnableIRQ>
}
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	4603      	mov	r3, r0
 8005d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff fef3 	bl	8005af8 <__NVIC_DisableIRQ>
}
 8005d12:	bf00      	nop
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005d1e:	f7ff ffa7 	bl	8005c70 <__NVIC_SystemReset>

08005d22 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	4603      	mov	r3, r0
 8005d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff ff03 	bl	8005b3c <__NVIC_SetPendingIRQ>
}
 8005d36:	bf00      	nop
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	4603      	mov	r3, r0
 8005d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff ff13 	bl	8005b78 <__NVIC_ClearPendingIRQ>
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e08e      	b.n	8005e8c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	4b47      	ldr	r3, [pc, #284]	; (8005e94 <HAL_DMA_Init+0x138>)
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d80f      	bhi.n	8005d9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	4b45      	ldr	r3, [pc, #276]	; (8005e98 <HAL_DMA_Init+0x13c>)
 8005d82:	4413      	add	r3, r2
 8005d84:	4a45      	ldr	r2, [pc, #276]	; (8005e9c <HAL_DMA_Init+0x140>)
 8005d86:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8a:	091b      	lsrs	r3, r3, #4
 8005d8c:	009a      	lsls	r2, r3, #2
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a42      	ldr	r2, [pc, #264]	; (8005ea0 <HAL_DMA_Init+0x144>)
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40
 8005d98:	e00e      	b.n	8005db8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4b40      	ldr	r3, [pc, #256]	; (8005ea4 <HAL_DMA_Init+0x148>)
 8005da2:	4413      	add	r3, r2
 8005da4:	4a3d      	ldr	r2, [pc, #244]	; (8005e9c <HAL_DMA_Init+0x140>)
 8005da6:	fba2 2303 	umull	r2, r3, r2, r3
 8005daa:	091b      	lsrs	r3, r3, #4
 8005dac:	009a      	lsls	r2, r3, #2
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a3c      	ldr	r2, [pc, #240]	; (8005ea8 <HAL_DMA_Init+0x14c>)
 8005db6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005df4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f9b6 	bl	800617c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e18:	d102      	bne.n	8005e20 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e28:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005e2c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e36:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d010      	beq.n	8005e62 <HAL_DMA_Init+0x106>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d80c      	bhi.n	8005e62 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f9d5 	bl	80061f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e5e:	605a      	str	r2, [r3, #4]
 8005e60:	e008      	b.n	8005e74 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	40020407 	.word	0x40020407
 8005e98:	bffdfff8 	.word	0xbffdfff8
 8005e9c:	cccccccd 	.word	0xcccccccd
 8005ea0:	40020000 	.word	0x40020000
 8005ea4:	bffdfbf8 	.word	0xbffdfbf8
 8005ea8:	40020400 	.word	0x40020400

08005eac <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_DMA_Start_IT+0x20>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e066      	b.n	8005f9a <HAL_DMA_Start_IT+0xee>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d155      	bne.n	8005f8c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0201 	bic.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	68b9      	ldr	r1, [r7, #8]
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f8fb 	bl	8006100 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d008      	beq.n	8005f24 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 020e 	orr.w	r2, r2, #14
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	e00f      	b.n	8005f44 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0204 	bic.w	r2, r2, #4
 8005f32:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 020a 	orr.w	r2, r2, #10
 8005f42:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d007      	beq.n	8005f62 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f60:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d007      	beq.n	8005f7a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f78:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0201 	orr.w	r2, r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	e005      	b.n	8005f98 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005f94:	2302      	movs	r3, #2
 8005f96:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fbe:	f003 031c 	and.w	r3, r3, #28
 8005fc2:	2204      	movs	r2, #4
 8005fc4:	409a      	lsls	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d026      	beq.n	800601c <HAL_DMA_IRQHandler+0x7a>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d021      	beq.n	800601c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d107      	bne.n	8005ff6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0204 	bic.w	r2, r2, #4
 8005ff4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffa:	f003 021c 	and.w	r2, r3, #28
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	2104      	movs	r1, #4
 8006004:	fa01 f202 	lsl.w	r2, r1, r2
 8006008:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600e:	2b00      	cmp	r3, #0
 8006010:	d071      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800601a:	e06c      	b.n	80060f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006020:	f003 031c 	and.w	r3, r3, #28
 8006024:	2202      	movs	r2, #2
 8006026:	409a      	lsls	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4013      	ands	r3, r2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d02e      	beq.n	800608e <HAL_DMA_IRQHandler+0xec>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d029      	beq.n	800608e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0320 	and.w	r3, r3, #32
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10b      	bne.n	8006060 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 020a 	bic.w	r2, r2, #10
 8006056:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006064:	f003 021c 	and.w	r2, r3, #28
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	2102      	movs	r1, #2
 800606e:	fa01 f202 	lsl.w	r2, r1, r2
 8006072:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	2b00      	cmp	r3, #0
 8006082:	d038      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800608c:	e033      	b.n	80060f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006092:	f003 031c 	and.w	r3, r3, #28
 8006096:	2208      	movs	r2, #8
 8006098:	409a      	lsls	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4013      	ands	r3, r2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d02a      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x156>
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d025      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 020e 	bic.w	r2, r2, #14
 80060ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c0:	f003 021c 	and.w	r2, r3, #28
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	2101      	movs	r1, #1
 80060ca:	fa01 f202 	lsl.w	r2, r1, r2
 80060ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d004      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80060f6:	bf00      	nop
 80060f8:	bf00      	nop
}
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006116:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611c:	2b00      	cmp	r3, #0
 800611e:	d004      	beq.n	800612a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006128:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612e:	f003 021c 	and.w	r2, r3, #28
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	2101      	movs	r1, #1
 8006138:	fa01 f202 	lsl.w	r2, r1, r2
 800613c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b10      	cmp	r3, #16
 800614c:	d108      	bne.n	8006160 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800615e:	e007      	b.n	8006170 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	60da      	str	r2, [r3, #12]
}
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	4b17      	ldr	r3, [pc, #92]	; (80061e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800618c:	429a      	cmp	r2, r3
 800618e:	d80a      	bhi.n	80061a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006194:	089b      	lsrs	r3, r3, #2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800619c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6493      	str	r3, [r2, #72]	; 0x48
 80061a4:	e007      	b.n	80061b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061aa:	089b      	lsrs	r3, r3, #2
 80061ac:	009a      	lsls	r2, r3, #2
 80061ae:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80061b0:	4413      	add	r3, r2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	3b08      	subs	r3, #8
 80061be:	4a0c      	ldr	r2, [pc, #48]	; (80061f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80061c0:	fba2 2303 	umull	r2, r3, r2, r3
 80061c4:	091b      	lsrs	r3, r3, #4
 80061c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a0a      	ldr	r2, [pc, #40]	; (80061f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80061cc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f003 031f 	and.w	r3, r3, #31
 80061d4:	2201      	movs	r2, #1
 80061d6:	409a      	lsls	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	651a      	str	r2, [r3, #80]	; 0x50
}
 80061dc:	bf00      	nop
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	40020407 	.word	0x40020407
 80061ec:	4002081c 	.word	0x4002081c
 80061f0:	cccccccd 	.word	0xcccccccd
 80061f4:	40020880 	.word	0x40020880

080061f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006208:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4b0b      	ldr	r3, [pc, #44]	; (800623c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800620e:	4413      	add	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	461a      	mov	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a09      	ldr	r2, [pc, #36]	; (8006240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800621c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3b01      	subs	r3, #1
 8006222:	f003 0303 	and.w	r3, r3, #3
 8006226:	2201      	movs	r2, #1
 8006228:	409a      	lsls	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800622e:	bf00      	nop
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	1000823f 	.word	0x1000823f
 8006240:	40020940 	.word	0x40020940

08006244 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006252:	e14c      	b.n	80064ee <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	2101      	movs	r1, #1
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	fa01 f303 	lsl.w	r3, r1, r3
 8006260:	4013      	ands	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 813e 	beq.w	80064e8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d00b      	beq.n	800628c <HAL_GPIO_Init+0x48>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b02      	cmp	r3, #2
 800627a:	d007      	beq.n	800628c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006280:	2b11      	cmp	r3, #17
 8006282:	d003      	beq.n	800628c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2b12      	cmp	r3, #18
 800628a:	d130      	bne.n	80062ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	2203      	movs	r2, #3
 8006298:	fa02 f303 	lsl.w	r3, r2, r3
 800629c:	43db      	mvns	r3, r3
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4013      	ands	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	fa02 f303 	lsl.w	r3, r2, r3
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80062c2:	2201      	movs	r2, #1
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ca:	43db      	mvns	r3, r3
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4013      	ands	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	091b      	lsrs	r3, r3, #4
 80062d8:	f003 0201 	and.w	r2, r3, #1
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	fa02 f303 	lsl.w	r3, r2, r3
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	2203      	movs	r2, #3
 80062fa:	fa02 f303 	lsl.w	r3, r2, r3
 80062fe:	43db      	mvns	r3, r3
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4013      	ands	r3, r2
 8006304:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d003      	beq.n	800632e <HAL_GPIO_Init+0xea>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b12      	cmp	r3, #18
 800632c:	d123      	bne.n	8006376 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	08da      	lsrs	r2, r3, #3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3208      	adds	r2, #8
 8006336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800633a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f003 0307 	and.w	r3, r3, #7
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	220f      	movs	r2, #15
 8006346:	fa02 f303 	lsl.w	r3, r2, r3
 800634a:	43db      	mvns	r3, r3
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4013      	ands	r3, r2
 8006350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	691a      	ldr	r2, [r3, #16]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	fa02 f303 	lsl.w	r3, r2, r3
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	08da      	lsrs	r2, r3, #3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3208      	adds	r2, #8
 8006370:	6939      	ldr	r1, [r7, #16]
 8006372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	2203      	movs	r2, #3
 8006382:	fa02 f303 	lsl.w	r3, r2, r3
 8006386:	43db      	mvns	r3, r3
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4013      	ands	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f003 0203 	and.w	r2, r3, #3
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	fa02 f303 	lsl.w	r3, r2, r3
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 8098 	beq.w	80064e8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80063b8:	4a54      	ldr	r2, [pc, #336]	; (800650c <HAL_GPIO_Init+0x2c8>)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	089b      	lsrs	r3, r3, #2
 80063be:	3302      	adds	r3, #2
 80063c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f003 0303 	and.w	r3, r3, #3
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	220f      	movs	r2, #15
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	43db      	mvns	r3, r3
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4013      	ands	r3, r2
 80063da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80063e2:	d019      	beq.n	8006418 <HAL_GPIO_Init+0x1d4>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a4a      	ldr	r2, [pc, #296]	; (8006510 <HAL_GPIO_Init+0x2cc>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d013      	beq.n	8006414 <HAL_GPIO_Init+0x1d0>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a49      	ldr	r2, [pc, #292]	; (8006514 <HAL_GPIO_Init+0x2d0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00d      	beq.n	8006410 <HAL_GPIO_Init+0x1cc>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a48      	ldr	r2, [pc, #288]	; (8006518 <HAL_GPIO_Init+0x2d4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d007      	beq.n	800640c <HAL_GPIO_Init+0x1c8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a47      	ldr	r2, [pc, #284]	; (800651c <HAL_GPIO_Init+0x2d8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d101      	bne.n	8006408 <HAL_GPIO_Init+0x1c4>
 8006404:	2304      	movs	r3, #4
 8006406:	e008      	b.n	800641a <HAL_GPIO_Init+0x1d6>
 8006408:	2307      	movs	r3, #7
 800640a:	e006      	b.n	800641a <HAL_GPIO_Init+0x1d6>
 800640c:	2303      	movs	r3, #3
 800640e:	e004      	b.n	800641a <HAL_GPIO_Init+0x1d6>
 8006410:	2302      	movs	r3, #2
 8006412:	e002      	b.n	800641a <HAL_GPIO_Init+0x1d6>
 8006414:	2301      	movs	r3, #1
 8006416:	e000      	b.n	800641a <HAL_GPIO_Init+0x1d6>
 8006418:	2300      	movs	r3, #0
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	f002 0203 	and.w	r2, r2, #3
 8006420:	0092      	lsls	r2, r2, #2
 8006422:	4093      	lsls	r3, r2
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800642a:	4938      	ldr	r1, [pc, #224]	; (800650c <HAL_GPIO_Init+0x2c8>)
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	089b      	lsrs	r3, r3, #2
 8006430:	3302      	adds	r3, #2
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006438:	4b39      	ldr	r3, [pc, #228]	; (8006520 <HAL_GPIO_Init+0x2dc>)
 800643a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800643e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	43db      	mvns	r3, r3
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	4013      	ands	r3, r2
 8006448:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800645e:	4a30      	ldr	r2, [pc, #192]	; (8006520 <HAL_GPIO_Init+0x2dc>)
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8006466:	4b2e      	ldr	r3, [pc, #184]	; (8006520 <HAL_GPIO_Init+0x2dc>)
 8006468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800646c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	43db      	mvns	r3, r3
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	4013      	ands	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4313      	orrs	r3, r2
 800648a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800648c:	4a24      	ldr	r2, [pc, #144]	; (8006520 <HAL_GPIO_Init+0x2dc>)
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006494:	4b22      	ldr	r3, [pc, #136]	; (8006520 <HAL_GPIO_Init+0x2dc>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	43db      	mvns	r3, r3
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	4013      	ands	r3, r2
 80064a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80064b8:	4a19      	ldr	r2, [pc, #100]	; (8006520 <HAL_GPIO_Init+0x2dc>)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80064be:	4b18      	ldr	r3, [pc, #96]	; (8006520 <HAL_GPIO_Init+0x2dc>)
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	43db      	mvns	r3, r3
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4013      	ands	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80064e2:	4a0f      	ldr	r2, [pc, #60]	; (8006520 <HAL_GPIO_Init+0x2dc>)
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	3301      	adds	r3, #1
 80064ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	fa22 f303 	lsr.w	r3, r2, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f47f aeab 	bne.w	8006254 <HAL_GPIO_Init+0x10>
  }
}
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40010000 	.word	0x40010000
 8006510:	48000400 	.word	0x48000400
 8006514:	48000800 	.word	0x48000800
 8006518:	48000c00 	.word	0x48000c00
 800651c:	48001000 	.word	0x48001000
 8006520:	58000800 	.word	0x58000800

08006524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	460b      	mov	r3, r1
 800652e:	807b      	strh	r3, [r7, #2]
 8006530:	4613      	mov	r3, r2
 8006532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006534:	787b      	ldrb	r3, [r7, #1]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800653a:	887a      	ldrh	r2, [r7, #2]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006540:	e002      	b.n	8006548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006542:	887a      	ldrh	r2, [r7, #2]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800655a:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <HAL_HSEM_IRQHandler+0x30>)
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8006560:	4b08      	ldr	r3, [pc, #32]	; (8006584 <HAL_HSEM_IRQHandler+0x30>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	43db      	mvns	r3, r3
 8006568:	4906      	ldr	r1, [pc, #24]	; (8006584 <HAL_HSEM_IRQHandler+0x30>)
 800656a:	4013      	ands	r3, r2
 800656c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800656e:	4a05      	ldr	r2, [pc, #20]	; (8006584 <HAL_HSEM_IRQHandler+0x30>)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f807 	bl	8006588 <HAL_HSEM_FreeCallback>
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	58001500 	.word	0x58001500

08006588 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e081      	b.n	80066b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d106      	bne.n	80065c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fc fd1a 	bl	8002ffc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2224      	movs	r2, #36	; 0x24
 80065cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0201 	bic.w	r2, r2, #1
 80065de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80065ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d107      	bne.n	8006616 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006612:	609a      	str	r2, [r3, #8]
 8006614:	e006      	b.n	8006624 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	689a      	ldr	r2, [r3, #8]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006622:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d104      	bne.n	8006636 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006634:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6812      	ldr	r2, [r2, #0]
 8006640:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006648:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006658:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691a      	ldr	r2, [r3, #16]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	ea42 0103 	orr.w	r1, r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	021a      	lsls	r2, r3, #8
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	69d9      	ldr	r1, [r3, #28]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a1a      	ldr	r2, [r3, #32]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f042 0201 	orr.w	r2, r2, #1
 8006692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
	...

080066bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b088      	sub	sp, #32
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	4608      	mov	r0, r1
 80066c6:	4611      	mov	r1, r2
 80066c8:	461a      	mov	r2, r3
 80066ca:	4603      	mov	r3, r0
 80066cc:	817b      	strh	r3, [r7, #10]
 80066ce:	460b      	mov	r3, r1
 80066d0:	813b      	strh	r3, [r7, #8]
 80066d2:	4613      	mov	r3, r2
 80066d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b20      	cmp	r3, #32
 80066e0:	f040 80f9 	bne.w	80068d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_I2C_Mem_Write+0x34>
 80066ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d105      	bne.n	80066fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e0ed      	b.n	80068d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006702:	2b01      	cmp	r3, #1
 8006704:	d101      	bne.n	800670a <HAL_I2C_Mem_Write+0x4e>
 8006706:	2302      	movs	r3, #2
 8006708:	e0e6      	b.n	80068d8 <HAL_I2C_Mem_Write+0x21c>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006712:	f7fd fecf 	bl	80044b4 <HAL_GetTick>
 8006716:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	2319      	movs	r3, #25
 800671e:	2201      	movs	r2, #1
 8006720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 fac3 	bl	8006cb0 <I2C_WaitOnFlagUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e0d1      	b.n	80068d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2221      	movs	r2, #33	; 0x21
 8006738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2240      	movs	r2, #64	; 0x40
 8006740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6a3a      	ldr	r2, [r7, #32]
 800674e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006754:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800675c:	88f8      	ldrh	r0, [r7, #6]
 800675e:	893a      	ldrh	r2, [r7, #8]
 8006760:	8979      	ldrh	r1, [r7, #10]
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	9301      	str	r3, [sp, #4]
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	4603      	mov	r3, r0
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 f9d3 	bl	8006b18 <I2C_RequestMemoryWrite>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e0a9      	b.n	80068d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006788:	b29b      	uxth	r3, r3
 800678a:	2bff      	cmp	r3, #255	; 0xff
 800678c:	d90e      	bls.n	80067ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	22ff      	movs	r2, #255	; 0xff
 8006792:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006798:	b2da      	uxtb	r2, r3
 800679a:	8979      	ldrh	r1, [r7, #10]
 800679c:	2300      	movs	r3, #0
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 fba5 	bl	8006ef4 <I2C_TransferConfig>
 80067aa:	e00f      	b.n	80067cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	8979      	ldrh	r1, [r7, #10]
 80067be:	2300      	movs	r3, #0
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 fb94 	bl	8006ef4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 faad 	bl	8006d30 <I2C_WaitOnTXISFlagUntilTimeout>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e07b      	b.n	80068d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	781a      	ldrb	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006808:	3b01      	subs	r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d034      	beq.n	8006884 <HAL_I2C_Mem_Write+0x1c8>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681e:	2b00      	cmp	r3, #0
 8006820:	d130      	bne.n	8006884 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	2200      	movs	r2, #0
 800682a:	2180      	movs	r1, #128	; 0x80
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 fa3f 	bl	8006cb0 <I2C_WaitOnFlagUntilTimeout>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e04d      	b.n	80068d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006840:	b29b      	uxth	r3, r3
 8006842:	2bff      	cmp	r3, #255	; 0xff
 8006844:	d90e      	bls.n	8006864 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	22ff      	movs	r2, #255	; 0xff
 800684a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006850:	b2da      	uxtb	r2, r3
 8006852:	8979      	ldrh	r1, [r7, #10]
 8006854:	2300      	movs	r3, #0
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 fb49 	bl	8006ef4 <I2C_TransferConfig>
 8006862:	e00f      	b.n	8006884 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006872:	b2da      	uxtb	r2, r3
 8006874:	8979      	ldrh	r1, [r7, #10]
 8006876:	2300      	movs	r3, #0
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 fb38 	bl	8006ef4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d19e      	bne.n	80067cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 fa8c 	bl	8006db0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e01a      	b.n	80068d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2220      	movs	r2, #32
 80068a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6859      	ldr	r1, [r3, #4]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <HAL_I2C_Mem_Write+0x224>)
 80068b6:	400b      	ands	r3, r1
 80068b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2220      	movs	r2, #32
 80068be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	e000      	b.n	80068d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80068d6:	2302      	movs	r3, #2
  }
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3718      	adds	r7, #24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	fe00e800 	.word	0xfe00e800

080068e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	4608      	mov	r0, r1
 80068ee:	4611      	mov	r1, r2
 80068f0:	461a      	mov	r2, r3
 80068f2:	4603      	mov	r3, r0
 80068f4:	817b      	strh	r3, [r7, #10]
 80068f6:	460b      	mov	r3, r1
 80068f8:	813b      	strh	r3, [r7, #8]
 80068fa:	4613      	mov	r3, r2
 80068fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b20      	cmp	r3, #32
 8006908:	f040 80fd 	bne.w	8006b06 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <HAL_I2C_Mem_Read+0x34>
 8006912:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006914:	2b00      	cmp	r3, #0
 8006916:	d105      	bne.n	8006924 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800691e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e0f1      	b.n	8006b08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800692a:	2b01      	cmp	r3, #1
 800692c:	d101      	bne.n	8006932 <HAL_I2C_Mem_Read+0x4e>
 800692e:	2302      	movs	r3, #2
 8006930:	e0ea      	b.n	8006b08 <HAL_I2C_Mem_Read+0x224>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800693a:	f7fd fdbb 	bl	80044b4 <HAL_GetTick>
 800693e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	2319      	movs	r3, #25
 8006946:	2201      	movs	r2, #1
 8006948:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 f9af 	bl	8006cb0 <I2C_WaitOnFlagUntilTimeout>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e0d5      	b.n	8006b08 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2222      	movs	r2, #34	; 0x22
 8006960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2240      	movs	r2, #64	; 0x40
 8006968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a3a      	ldr	r2, [r7, #32]
 8006976:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800697c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006984:	88f8      	ldrh	r0, [r7, #6]
 8006986:	893a      	ldrh	r2, [r7, #8]
 8006988:	8979      	ldrh	r1, [r7, #10]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	9301      	str	r3, [sp, #4]
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	4603      	mov	r3, r0
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 f913 	bl	8006bc0 <I2C_RequestMemoryRead>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e0ad      	b.n	8006b08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2bff      	cmp	r3, #255	; 0xff
 80069b4:	d90e      	bls.n	80069d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	22ff      	movs	r2, #255	; 0xff
 80069ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	8979      	ldrh	r1, [r7, #10]
 80069c4:	4b52      	ldr	r3, [pc, #328]	; (8006b10 <HAL_I2C_Mem_Read+0x22c>)
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 fa91 	bl	8006ef4 <I2C_TransferConfig>
 80069d2:	e00f      	b.n	80069f4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d8:	b29a      	uxth	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	8979      	ldrh	r1, [r7, #10]
 80069e6:	4b4a      	ldr	r3, [pc, #296]	; (8006b10 <HAL_I2C_Mem_Read+0x22c>)
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 fa80 	bl	8006ef4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fa:	2200      	movs	r2, #0
 80069fc:	2104      	movs	r1, #4
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 f956 	bl	8006cb0 <I2C_WaitOnFlagUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e07c      	b.n	8006b08 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	b2d2      	uxtb	r2, r2
 8006a1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d034      	beq.n	8006ab4 <HAL_I2C_Mem_Read+0x1d0>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d130      	bne.n	8006ab4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2180      	movs	r1, #128	; 0x80
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 f927 	bl	8006cb0 <I2C_WaitOnFlagUntilTimeout>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e04d      	b.n	8006b08 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	2bff      	cmp	r3, #255	; 0xff
 8006a74:	d90e      	bls.n	8006a94 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	22ff      	movs	r2, #255	; 0xff
 8006a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	8979      	ldrh	r1, [r7, #10]
 8006a84:	2300      	movs	r3, #0
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 fa31 	bl	8006ef4 <I2C_TransferConfig>
 8006a92:	e00f      	b.n	8006ab4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	8979      	ldrh	r1, [r7, #10]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 fa20 	bl	8006ef4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d19a      	bne.n	80069f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 f974 	bl	8006db0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e01a      	b.n	8006b08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6859      	ldr	r1, [r3, #4]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <HAL_I2C_Mem_Read+0x230>)
 8006ae6:	400b      	ands	r3, r1
 8006ae8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	e000      	b.n	8006b08 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006b06:	2302      	movs	r3, #2
  }
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	80002400 	.word	0x80002400
 8006b14:	fe00e800 	.word	0xfe00e800

08006b18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af02      	add	r7, sp, #8
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	4608      	mov	r0, r1
 8006b22:	4611      	mov	r1, r2
 8006b24:	461a      	mov	r2, r3
 8006b26:	4603      	mov	r3, r0
 8006b28:	817b      	strh	r3, [r7, #10]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	813b      	strh	r3, [r7, #8]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b32:	88fb      	ldrh	r3, [r7, #6]
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	8979      	ldrh	r1, [r7, #10]
 8006b38:	4b20      	ldr	r3, [pc, #128]	; (8006bbc <I2C_RequestMemoryWrite+0xa4>)
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 f9d7 	bl	8006ef4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b46:	69fa      	ldr	r2, [r7, #28]
 8006b48:	69b9      	ldr	r1, [r7, #24]
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 f8f0 	bl	8006d30 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e02c      	b.n	8006bb4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b5a:	88fb      	ldrh	r3, [r7, #6]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d105      	bne.n	8006b6c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b60:	893b      	ldrh	r3, [r7, #8]
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	629a      	str	r2, [r3, #40]	; 0x28
 8006b6a:	e015      	b.n	8006b98 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b6c:	893b      	ldrh	r3, [r7, #8]
 8006b6e:	0a1b      	lsrs	r3, r3, #8
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b7a:	69fa      	ldr	r2, [r7, #28]
 8006b7c:	69b9      	ldr	r1, [r7, #24]
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f000 f8d6 	bl	8006d30 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e012      	b.n	8006bb4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b8e:	893b      	ldrh	r3, [r7, #8]
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2180      	movs	r1, #128	; 0x80
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 f884 	bl	8006cb0 <I2C_WaitOnFlagUntilTimeout>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e000      	b.n	8006bb4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	80002000 	.word	0x80002000

08006bc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	4608      	mov	r0, r1
 8006bca:	4611      	mov	r1, r2
 8006bcc:	461a      	mov	r2, r3
 8006bce:	4603      	mov	r3, r0
 8006bd0:	817b      	strh	r3, [r7, #10]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	813b      	strh	r3, [r7, #8]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006bda:	88fb      	ldrh	r3, [r7, #6]
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	8979      	ldrh	r1, [r7, #10]
 8006be0:	4b20      	ldr	r3, [pc, #128]	; (8006c64 <I2C_RequestMemoryRead+0xa4>)
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	2300      	movs	r3, #0
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 f984 	bl	8006ef4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bec:	69fa      	ldr	r2, [r7, #28]
 8006bee:	69b9      	ldr	r1, [r7, #24]
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 f89d 	bl	8006d30 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e02c      	b.n	8006c5a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c00:	88fb      	ldrh	r3, [r7, #6]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d105      	bne.n	8006c12 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c06:	893b      	ldrh	r3, [r7, #8]
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c10:	e015      	b.n	8006c3e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c12:	893b      	ldrh	r3, [r7, #8]
 8006c14:	0a1b      	lsrs	r3, r3, #8
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c20:	69fa      	ldr	r2, [r7, #28]
 8006c22:	69b9      	ldr	r1, [r7, #24]
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f883 	bl	8006d30 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e012      	b.n	8006c5a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c34:	893b      	ldrh	r3, [r7, #8]
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	2200      	movs	r2, #0
 8006c46:	2140      	movs	r1, #64	; 0x40
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 f831 	bl	8006cb0 <I2C_WaitOnFlagUntilTimeout>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e000      	b.n	8006c5a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	80002000 	.word	0x80002000

08006c68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d103      	bne.n	8006c86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2200      	movs	r2, #0
 8006c84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d007      	beq.n	8006ca4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0201 	orr.w	r2, r2, #1
 8006ca2:	619a      	str	r2, [r3, #24]
  }
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cc0:	e022      	b.n	8006d08 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc8:	d01e      	beq.n	8006d08 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cca:	f7fd fbf3 	bl	80044b4 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d302      	bcc.n	8006ce0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d113      	bne.n	8006d08 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce4:	f043 0220 	orr.w	r2, r3, #32
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e00f      	b.n	8006d28 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	4013      	ands	r3, r2
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	bf0c      	ite	eq
 8006d18:	2301      	moveq	r3, #1
 8006d1a:	2300      	movne	r3, #0
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	461a      	mov	r2, r3
 8006d20:	79fb      	ldrb	r3, [r7, #7]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d0cd      	beq.n	8006cc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d3c:	e02c      	b.n	8006d98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 f870 	bl	8006e28 <I2C_IsAcknowledgeFailed>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e02a      	b.n	8006da8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d58:	d01e      	beq.n	8006d98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d5a:	f7fd fbab 	bl	80044b4 <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d302      	bcc.n	8006d70 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d113      	bne.n	8006d98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d74:	f043 0220 	orr.w	r2, r3, #32
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e007      	b.n	8006da8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d1cb      	bne.n	8006d3e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dbc:	e028      	b.n	8006e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 f830 	bl	8006e28 <I2C_IsAcknowledgeFailed>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e026      	b.n	8006e20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd2:	f7fd fb6f 	bl	80044b4 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d302      	bcc.n	8006de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d113      	bne.n	8006e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dec:	f043 0220 	orr.w	r2, r3, #32
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e007      	b.n	8006e20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	f003 0320 	and.w	r3, r3, #32
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	d1cf      	bne.n	8006dbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	f003 0310 	and.w	r3, r3, #16
 8006e3e:	2b10      	cmp	r3, #16
 8006e40:	d151      	bne.n	8006ee6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e42:	e022      	b.n	8006e8a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4a:	d01e      	beq.n	8006e8a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e4c:	f7fd fb32 	bl	80044b4 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d302      	bcc.n	8006e62 <I2C_IsAcknowledgeFailed+0x3a>
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d113      	bne.n	8006e8a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e66:	f043 0220 	orr.w	r2, r3, #32
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e02e      	b.n	8006ee8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	f003 0320 	and.w	r3, r3, #32
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d1d5      	bne.n	8006e44 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2210      	movs	r2, #16
 8006e9e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f7ff fedd 	bl	8006c68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6859      	ldr	r1, [r3, #4]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ef0 <I2C_IsAcknowledgeFailed+0xc8>)
 8006eba:	400b      	ands	r3, r1
 8006ebc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec2:	f043 0204 	orr.w	r2, r3, #4
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e000      	b.n	8006ee8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	fe00e800 	.word	0xfe00e800

08006ef4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	607b      	str	r3, [r7, #4]
 8006efe:	460b      	mov	r3, r1
 8006f00:	817b      	strh	r3, [r7, #10]
 8006f02:	4613      	mov	r3, r2
 8006f04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	0d5b      	lsrs	r3, r3, #21
 8006f10:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006f14:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <I2C_TransferConfig+0x58>)
 8006f16:	430b      	orrs	r3, r1
 8006f18:	43db      	mvns	r3, r3
 8006f1a:	ea02 0103 	and.w	r1, r2, r3
 8006f1e:	897b      	ldrh	r3, [r7, #10]
 8006f20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006f24:	7a7b      	ldrb	r3, [r7, #9]
 8006f26:	041b      	lsls	r3, r3, #16
 8006f28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	431a      	orrs	r2, r3
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	431a      	orrs	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006f3e:	bf00      	nop
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	03ff63ff 	.word	0x03ff63ff

08006f50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	d138      	bne.n	8006fd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e032      	b.n	8006fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2224      	movs	r2, #36	; 0x24
 8006f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0201 	bic.w	r2, r2, #1
 8006f92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fa2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6819      	ldr	r1, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0201 	orr.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e000      	b.n	8006fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006fd8:	2302      	movs	r3, #2
  }
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d139      	bne.n	8007070 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007002:	2b01      	cmp	r3, #1
 8007004:	d101      	bne.n	800700a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007006:	2302      	movs	r3, #2
 8007008:	e033      	b.n	8007072 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2224      	movs	r2, #36	; 0x24
 8007016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 0201 	bic.w	r2, r2, #1
 8007028:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007038:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	021b      	lsls	r3, r3, #8
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4313      	orrs	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0201 	orr.w	r2, r2, #1
 800705a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2220      	movs	r2, #32
 8007060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	e000      	b.n	8007072 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007070:	2302      	movs	r3, #2
  }
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800707e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007080:	b08b      	sub	sp, #44	; 0x2c
 8007082:	af06      	add	r7, sp, #24
 8007084:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e0ad      	b.n	80071ec <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f00e fa1f 	bl	80154e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2203      	movs	r2, #3
 80070ae:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f004 f8e5 	bl	800b286 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070bc:	2300      	movs	r3, #0
 80070be:	73fb      	strb	r3, [r7, #15]
 80070c0:	e035      	b.n	800712e <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	015b      	lsls	r3, r3, #5
 80070c8:	4413      	add	r3, r2
 80070ca:	3329      	adds	r3, #41	; 0x29
 80070cc:	2201      	movs	r2, #1
 80070ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	015b      	lsls	r3, r3, #5
 80070d6:	4413      	add	r3, r2
 80070d8:	3328      	adds	r3, #40	; 0x28
 80070da:	7bfa      	ldrb	r2, [r7, #15]
 80070dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	7bfa      	ldrb	r2, [r7, #15]
 80070e2:	b291      	uxth	r1, r2
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	015b      	lsls	r3, r3, #5
 80070e8:	4413      	add	r3, r2
 80070ea:	3336      	adds	r3, #54	; 0x36
 80070ec:	460a      	mov	r2, r1
 80070ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	015b      	lsls	r3, r3, #5
 80070f6:	4413      	add	r3, r2
 80070f8:	332b      	adds	r3, #43	; 0x2b
 80070fa:	2200      	movs	r2, #0
 80070fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	015b      	lsls	r3, r3, #5
 8007104:	4413      	add	r3, r2
 8007106:	3338      	adds	r3, #56	; 0x38
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	015b      	lsls	r3, r3, #5
 8007112:	4413      	add	r3, r2
 8007114:	333c      	adds	r3, #60	; 0x3c
 8007116:	2200      	movs	r2, #0
 8007118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800711a:	7bfb      	ldrb	r3, [r7, #15]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	3302      	adds	r3, #2
 8007120:	015b      	lsls	r3, r3, #5
 8007122:	4413      	add	r3, r2
 8007124:	2200      	movs	r2, #0
 8007126:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007128:	7bfb      	ldrb	r3, [r7, #15]
 800712a:	3301      	adds	r3, #1
 800712c:	73fb      	strb	r3, [r7, #15]
 800712e:	7bfa      	ldrb	r2, [r7, #15]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	429a      	cmp	r2, r3
 8007136:	d3c4      	bcc.n	80070c2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007138:	2300      	movs	r3, #0
 800713a:	73fb      	strb	r3, [r7, #15]
 800713c:	e031      	b.n	80071a2 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	015b      	lsls	r3, r3, #5
 8007144:	4413      	add	r3, r2
 8007146:	f203 1329 	addw	r3, r3, #297	; 0x129
 800714a:	2200      	movs	r2, #0
 800714c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	015b      	lsls	r3, r3, #5
 8007154:	4413      	add	r3, r2
 8007156:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800715a:	7bfa      	ldrb	r2, [r7, #15]
 800715c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800715e:	7bfb      	ldrb	r3, [r7, #15]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	015b      	lsls	r3, r3, #5
 8007164:	4413      	add	r3, r2
 8007166:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800716a:	2200      	movs	r2, #0
 800716c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800716e:	7bfb      	ldrb	r3, [r7, #15]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	015b      	lsls	r3, r3, #5
 8007174:	4413      	add	r3, r2
 8007176:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	015b      	lsls	r3, r3, #5
 8007184:	4413      	add	r3, r2
 8007186:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800718a:	2200      	movs	r2, #0
 800718c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	330a      	adds	r3, #10
 8007194:	015b      	lsls	r3, r3, #5
 8007196:	4413      	add	r3, r2
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	3301      	adds	r3, #1
 80071a0:	73fb      	strb	r3, [r7, #15]
 80071a2:	7bfa      	ldrb	r2, [r7, #15]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d3c8      	bcc.n	800713e <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	603b      	str	r3, [r7, #0]
 80071b2:	687e      	ldr	r6, [r7, #4]
 80071b4:	466d      	mov	r5, sp
 80071b6:	f106 0410 	add.w	r4, r6, #16
 80071ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	602b      	str	r3, [r5, #0]
 80071c2:	1d33      	adds	r3, r6, #4
 80071c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071c6:	6838      	ldr	r0, [r7, #0]
 80071c8:	f004 f878 	bl	800b2bc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d102      	bne.n	80071ea <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fe59 	bl	8007e9c <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_PCD_Start+0x16>
 8007206:	2302      	movs	r3, #2
 8007208:	e012      	b.n	8007230 <HAL_PCD_Start+0x3c>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4618      	mov	r0, r3
 8007218:	f005 fa48 	bl	800c6ac <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4618      	mov	r0, r3
 8007222:	f004 f817 	bl	800b254 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4618      	mov	r0, r3
 8007246:	f005 fa48 	bl	800c6da <USB_ReadInterrupts>
 800724a:	4603      	mov	r3, r0
 800724c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007254:	d102      	bne.n	800725c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fb33 	bl	80078c2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4618      	mov	r0, r3
 8007262:	f005 fa3a 	bl	800c6da <USB_ReadInterrupts>
 8007266:	4603      	mov	r3, r0
 8007268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800726c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007270:	d112      	bne.n	8007298 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800727a:	b29a      	uxth	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007284:	b292      	uxth	r2, r2
 8007286:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f00e f9b3 	bl	80155f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007290:	2100      	movs	r1, #0
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f91e 	bl	80074d4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4618      	mov	r0, r3
 800729e:	f005 fa1c 	bl	800c6da <USB_ReadInterrupts>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ac:	d10b      	bne.n	80072c6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072c0:	b292      	uxth	r2, r2
 80072c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f005 fa05 	bl	800c6da <USB_ReadInterrupts>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072da:	d10b      	bne.n	80072f4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072ee:	b292      	uxth	r2, r2
 80072f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f005 f9ee 	bl	800c6da <USB_ReadInterrupts>
 80072fe:	4603      	mov	r3, r0
 8007300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007308:	d133      	bne.n	8007372 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007312:	b29a      	uxth	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0204 	bic.w	r2, r2, #4
 800731c:	b292      	uxth	r2, r2
 800731e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800732a:	b29a      	uxth	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0208 	bic.w	r2, r2, #8
 8007334:	b292      	uxth	r2, r2
 8007336:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007340:	2b01      	cmp	r3, #1
 8007342:	d107      	bne.n	8007354 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800734c:	2100      	movs	r1, #0
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fdce 	bl	8007ef0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f00e f987 	bl	8015668 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007362:	b29a      	uxth	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800736c:	b292      	uxth	r2, r2
 800736e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4618      	mov	r0, r3
 8007378:	f005 f9af 	bl	800c6da <USB_ReadInterrupts>
 800737c:	4603      	mov	r3, r0
 800737e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007386:	d126      	bne.n	80073d6 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007390:	b29a      	uxth	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f042 0208 	orr.w	r2, r2, #8
 800739a:	b292      	uxth	r2, r2
 800739c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073b2:	b292      	uxth	r2, r2
 80073b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0204 	orr.w	r2, r2, #4
 80073ca:	b292      	uxth	r2, r2
 80073cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f00e f92f 	bl	8015634 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4618      	mov	r0, r3
 80073dc:	f005 f97d 	bl	800c6da <USB_ReadInterrupts>
 80073e0:	4603      	mov	r3, r0
 80073e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e6:	2b80      	cmp	r3, #128	; 0x80
 80073e8:	d13f      	bne.n	800746a <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073fc:	b292      	uxth	r2, r2
 80073fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007408:	2b00      	cmp	r3, #0
 800740a:	d12b      	bne.n	8007464 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007414:	b29a      	uxth	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f042 0204 	orr.w	r2, r2, #4
 800741e:	b292      	uxth	r2, r2
 8007420:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800742c:	b29a      	uxth	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0208 	orr.w	r2, r2, #8
 8007436:	b292      	uxth	r2, r2
 8007438:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800744c:	b29b      	uxth	r3, r3
 800744e:	089b      	lsrs	r3, r3, #2
 8007450:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800745a:	2101      	movs	r1, #1
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fd47 	bl	8007ef0 <HAL_PCDEx_LPM_Callback>
 8007462:	e002      	b.n	800746a <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f00e f8e5 	bl	8015634 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4618      	mov	r0, r3
 8007470:	f005 f933 	bl	800c6da <USB_ReadInterrupts>
 8007474:	4603      	mov	r3, r0
 8007476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800747a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800747e:	d10e      	bne.n	800749e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007488:	b29a      	uxth	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007492:	b292      	uxth	r2, r2
 8007494:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f00e f89e 	bl	80155da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f005 f919 	bl	800c6da <USB_ReadInterrupts>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b2:	d10b      	bne.n	80074cc <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074bc:	b29a      	uxth	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074c6:	b292      	uxth	r2, r2
 80074c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d101      	bne.n	80074ee <HAL_PCD_SetAddress+0x1a>
 80074ea:	2302      	movs	r3, #2
 80074ec:	e013      	b.n	8007516 <HAL_PCD_SetAddress+0x42>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	78fa      	ldrb	r2, [r7, #3]
 80074fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	78fa      	ldrb	r2, [r7, #3]
 8007504:	4611      	mov	r1, r2
 8007506:	4618      	mov	r0, r3
 8007508:	f005 f8bc 	bl	800c684 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	4608      	mov	r0, r1
 8007528:	4611      	mov	r1, r2
 800752a:	461a      	mov	r2, r3
 800752c:	4603      	mov	r3, r0
 800752e:	70fb      	strb	r3, [r7, #3]
 8007530:	460b      	mov	r3, r1
 8007532:	803b      	strh	r3, [r7, #0]
 8007534:	4613      	mov	r3, r2
 8007536:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800753c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007540:	2b00      	cmp	r3, #0
 8007542:	da0b      	bge.n	800755c <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007544:	78fb      	ldrb	r3, [r7, #3]
 8007546:	f003 0307 	and.w	r3, r3, #7
 800754a:	015b      	lsls	r3, r3, #5
 800754c:	3328      	adds	r3, #40	; 0x28
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	4413      	add	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2201      	movs	r2, #1
 8007558:	705a      	strb	r2, [r3, #1]
 800755a:	e00b      	b.n	8007574 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800755c:	78fb      	ldrb	r3, [r7, #3]
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	015b      	lsls	r3, r3, #5
 8007564:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	4413      	add	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	f003 0307 	and.w	r3, r3, #7
 800757a:	b2da      	uxtb	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007580:	883a      	ldrh	r2, [r7, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	78ba      	ldrb	r2, [r7, #2]
 800758a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	785b      	ldrb	r3, [r3, #1]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d004      	beq.n	800759e <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	b29a      	uxth	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800759e:	78bb      	ldrb	r3, [r7, #2]
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d102      	bne.n	80075aa <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d101      	bne.n	80075b8 <HAL_PCD_EP_Open+0x9a>
 80075b4:	2302      	movs	r3, #2
 80075b6:	e00e      	b.n	80075d6 <HAL_PCD_EP_Open+0xb8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68f9      	ldr	r1, [r7, #12]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f003 fe9c 	bl	800b304 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80075d4:	7afb      	ldrb	r3, [r7, #11]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b084      	sub	sp, #16
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80075ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	da0b      	bge.n	800760a <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075f2:	78fb      	ldrb	r3, [r7, #3]
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	015b      	lsls	r3, r3, #5
 80075fa:	3328      	adds	r3, #40	; 0x28
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	4413      	add	r3, r2
 8007600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	705a      	strb	r2, [r3, #1]
 8007608:	e00b      	b.n	8007622 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800760a:	78fb      	ldrb	r3, [r7, #3]
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	015b      	lsls	r3, r3, #5
 8007612:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	4413      	add	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007622:	78fb      	ldrb	r3, [r7, #3]
 8007624:	f003 0307 	and.w	r3, r3, #7
 8007628:	b2da      	uxtb	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8007634:	2b01      	cmp	r3, #1
 8007636:	d101      	bne.n	800763c <HAL_PCD_EP_Close+0x5e>
 8007638:	2302      	movs	r3, #2
 800763a:	e00e      	b.n	800765a <HAL_PCD_EP_Close+0x7c>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68f9      	ldr	r1, [r7, #12]
 800764a:	4618      	mov	r0, r3
 800764c:	f004 fa08 	bl	800ba60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b086      	sub	sp, #24
 8007666:	af00      	add	r7, sp, #0
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]
 800766e:	460b      	mov	r3, r1
 8007670:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007672:	7afb      	ldrb	r3, [r7, #11]
 8007674:	f003 0307 	and.w	r3, r3, #7
 8007678:	015b      	lsls	r3, r3, #5
 800767a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4413      	add	r3, r2
 8007682:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2200      	movs	r2, #0
 8007694:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2200      	movs	r2, #0
 800769a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800769c:	7afb      	ldrb	r3, [r7, #11]
 800769e:	f003 0307 	and.w	r3, r3, #7
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	f003 0307 	and.w	r3, r3, #7
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d106      	bne.n	80076c0 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6979      	ldr	r1, [r7, #20]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f004 fbbe 	bl	800be3a <USB_EPStartXfer>
 80076be:	e005      	b.n	80076cc <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6979      	ldr	r1, [r7, #20]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f004 fbb7 	bl	800be3a <USB_EPStartXfer>
  }

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	460b      	mov	r3, r1
 80076e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	330a      	adds	r3, #10
 80076ec:	015b      	lsls	r3, r3, #5
 80076ee:	4413      	add	r3, r2
 80076f0:	3304      	adds	r3, #4
 80076f2:	681b      	ldr	r3, [r3, #0]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	607a      	str	r2, [r7, #4]
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	460b      	mov	r3, r1
 800770e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007710:	7afb      	ldrb	r3, [r7, #11]
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	015b      	lsls	r3, r3, #5
 8007718:	3328      	adds	r3, #40	; 0x28
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	4413      	add	r3, r2
 800771e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	2200      	movs	r2, #0
 8007730:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2201      	movs	r2, #1
 8007736:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007738:	7afb      	ldrb	r3, [r7, #11]
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	b2da      	uxtb	r2, r3
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007744:	7afb      	ldrb	r3, [r7, #11]
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	2b00      	cmp	r3, #0
 800774c:	d106      	bne.n	800775c <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6979      	ldr	r1, [r7, #20]
 8007754:	4618      	mov	r0, r3
 8007756:	f004 fb70 	bl	800be3a <USB_EPStartXfer>
 800775a:	e005      	b.n	8007768 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6979      	ldr	r1, [r7, #20]
 8007762:	4618      	mov	r0, r3
 8007764:	f004 fb69 	bl	800be3a <USB_EPStartXfer>
  }

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	460b      	mov	r3, r1
 800777c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800777e:	78fb      	ldrb	r3, [r7, #3]
 8007780:	f003 0207 	and.w	r2, r3, #7
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	429a      	cmp	r2, r3
 800778a:	d901      	bls.n	8007790 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e046      	b.n	800781e <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007794:	2b00      	cmp	r3, #0
 8007796:	da0b      	bge.n	80077b0 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007798:	78fb      	ldrb	r3, [r7, #3]
 800779a:	f003 0307 	and.w	r3, r3, #7
 800779e:	015b      	lsls	r3, r3, #5
 80077a0:	3328      	adds	r3, #40	; 0x28
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	4413      	add	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2201      	movs	r2, #1
 80077ac:	705a      	strb	r2, [r3, #1]
 80077ae:	e009      	b.n	80077c4 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	015b      	lsls	r3, r3, #5
 80077b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	4413      	add	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2201      	movs	r2, #1
 80077c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077ca:	78fb      	ldrb	r3, [r7, #3]
 80077cc:	f003 0307 	and.w	r3, r3, #7
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d101      	bne.n	80077e4 <HAL_PCD_EP_SetStall+0x72>
 80077e0:	2302      	movs	r3, #2
 80077e2:	e01c      	b.n	800781e <HAL_PCD_EP_SetStall+0xac>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68f9      	ldr	r1, [r7, #12]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f004 fe47 	bl	800c486 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80077f8:	78fb      	ldrb	r3, [r7, #3]
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d108      	bne.n	8007814 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800780c:	4619      	mov	r1, r3
 800780e:	4610      	mov	r0, r2
 8007810:	f004 ff73 	bl	800c6fa <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	460b      	mov	r3, r1
 8007830:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	f003 020f 	and.w	r2, r3, #15
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	429a      	cmp	r2, r3
 800783e:	d901      	bls.n	8007844 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e03a      	b.n	80078ba <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007848:	2b00      	cmp	r3, #0
 800784a:	da0b      	bge.n	8007864 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800784c:	78fb      	ldrb	r3, [r7, #3]
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	015b      	lsls	r3, r3, #5
 8007854:	3328      	adds	r3, #40	; 0x28
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	4413      	add	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2201      	movs	r2, #1
 8007860:	705a      	strb	r2, [r3, #1]
 8007862:	e00b      	b.n	800787c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	015b      	lsls	r3, r3, #5
 800786c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	4413      	add	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	f003 0307 	and.w	r3, r3, #7
 8007888:	b2da      	uxtb	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8007894:	2b01      	cmp	r3, #1
 8007896:	d101      	bne.n	800789c <HAL_PCD_EP_ClrStall+0x76>
 8007898:	2302      	movs	r3, #2
 800789a:	e00e      	b.n	80078ba <HAL_PCD_EP_ClrStall+0x94>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68f9      	ldr	r1, [r7, #12]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f004 fe3c 	bl	800c528 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b08e      	sub	sp, #56	; 0x38
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80078ca:	e29c      	b.n	8007e06 <PCD_EP_ISR_Handler+0x544>
  {
    wIstr = hpcd->Instance->ISTR;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80078d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80078d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	f003 030f 	and.w	r3, r3, #15
 80078de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80078e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f040 8152 	bne.w	8007b90 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80078ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80078ee:	f003 0310 	and.w	r3, r3, #16
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d150      	bne.n	8007998 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007906:	81fb      	strh	r3, [r7, #14]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	89fb      	ldrh	r3, [r7, #14]
 800790e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007916:	b29b      	uxth	r3, r3
 8007918:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3328      	adds	r3, #40	; 0x28
 800791e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007928:	b29b      	uxth	r3, r3
 800792a:	461a      	mov	r2, r3
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	00db      	lsls	r3, r3, #3
 8007932:	4413      	add	r3, r2
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	6812      	ldr	r2, [r2, #0]
 8007938:	4413      	add	r3, r2
 800793a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	695a      	ldr	r2, [r3, #20]
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	69db      	ldr	r3, [r3, #28]
 8007950:	441a      	add	r2, r3
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007956:	2100      	movs	r1, #0
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f00d fe27 	bl	80155ac <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 824d 	beq.w	8007e06 <PCD_EP_ISR_Handler+0x544>
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	2b00      	cmp	r3, #0
 8007972:	f040 8248 	bne.w	8007e06 <PCD_EP_ISR_Handler+0x544>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800797c:	b2db      	uxtb	r3, r3
 800797e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007982:	b2da      	uxtb	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	b292      	uxth	r2, r2
 800798a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007996:	e236      	b.n	8007e06 <PCD_EP_ISR_Handler+0x544>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800799e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80079a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80079aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d032      	beq.n	8007a18 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	4413      	add	r3, r2
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6812      	ldr	r2, [r2, #0]
 80079ca:	4413      	add	r3, r2
 80079cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6818      	ldr	r0, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	f004 fed1 	bl	800c794 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80079fe:	4013      	ands	r3, r2
 8007a00:	823b      	strh	r3, [r7, #16]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	8a3a      	ldrh	r2, [r7, #16]
 8007a08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a0c:	b292      	uxth	r2, r2
 8007a0e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f00d fda1 	bl	8015558 <HAL_PCD_SetupStageCallback>
 8007a16:	e1f6      	b.n	8007e06 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007a18:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f280 81f2 	bge.w	8007e06 <PCD_EP_ISR_Handler+0x544>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007a2e:	4013      	ands	r3, r2
 8007a30:	83fb      	strh	r3, [r7, #30]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	8bfa      	ldrh	r2, [r7, #30]
 8007a38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a3c:	b292      	uxth	r2, r2
 8007a3e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	4413      	add	r3, r2
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	6812      	ldr	r2, [r2, #0]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a5e:	881b      	ldrh	r3, [r3, #0]
 8007a60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	69db      	ldr	r3, [r3, #28]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d019      	beq.n	8007aa4 <PCD_EP_ISR_Handler+0x1e2>
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d015      	beq.n	8007aa4 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6818      	ldr	r0, [r3, #0]
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	6959      	ldr	r1, [r3, #20]
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	f004 fe83 	bl	800c794 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	695a      	ldr	r2, [r3, #20]
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	441a      	add	r2, r3
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f00d fd6c 	bl	801557c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	61bb      	str	r3, [r7, #24]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	4413      	add	r3, r2
 8007aba:	61bb      	str	r3, [r7, #24]
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ac2:	617b      	str	r3, [r7, #20]
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d112      	bne.n	8007af2 <PCD_EP_ISR_Handler+0x230>
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	801a      	strh	r2, [r3, #0]
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	801a      	strh	r2, [r3, #0]
 8007af0:	e02f      	b.n	8007b52 <PCD_EP_ISR_Handler+0x290>
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	2b3e      	cmp	r3, #62	; 0x3e
 8007af8:	d813      	bhi.n	8007b22 <PCD_EP_ISR_Handler+0x260>
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	085b      	lsrs	r3, r3, #1
 8007b00:	633b      	str	r3, [r7, #48]	; 0x30
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <PCD_EP_ISR_Handler+0x252>
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	3301      	adds	r3, #1
 8007b12:	633b      	str	r3, [r7, #48]	; 0x30
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	029b      	lsls	r3, r3, #10
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	801a      	strh	r2, [r3, #0]
 8007b20:	e017      	b.n	8007b52 <PCD_EP_ISR_Handler+0x290>
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	095b      	lsrs	r3, r3, #5
 8007b28:	633b      	str	r3, [r7, #48]	; 0x30
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f003 031f 	and.w	r3, r3, #31
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d102      	bne.n	8007b3c <PCD_EP_ISR_Handler+0x27a>
 8007b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	029b      	lsls	r3, r3, #10
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b62:	827b      	strh	r3, [r7, #18]
 8007b64:	8a7b      	ldrh	r3, [r7, #18]
 8007b66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b6a:	827b      	strh	r3, [r7, #18]
 8007b6c:	8a7b      	ldrh	r3, [r7, #18]
 8007b6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b72:	827b      	strh	r3, [r7, #18]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	8a7b      	ldrh	r3, [r7, #18]
 8007b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	8013      	strh	r3, [r2, #0]
 8007b8e:	e13a      	b.n	8007e06 <PCD_EP_ISR_Handler+0x544>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	461a      	mov	r2, r3
 8007b96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	857b      	strh	r3, [r7, #42]	; 0x2a
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007ba2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f280 80d6 	bge.w	8007d58 <PCD_EP_ISR_Handler+0x496>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	853b      	strh	r3, [r7, #40]	; 0x28
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007bd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007bda:	b292      	uxth	r2, r2
 8007bdc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007bde:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007be2:	015b      	lsls	r3, r3, #5
 8007be4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	4413      	add	r3, r2
 8007bec:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	7b1b      	ldrb	r3, [r3, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d11f      	bne.n	8007c36 <PCD_EP_ISR_Handler+0x374>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	4413      	add	r3, r2
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	6812      	ldr	r2, [r2, #0]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c1a:	86fb      	strh	r3, [r7, #54]	; 0x36
          if (count != 0U)
 8007c1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d075      	beq.n	8007d0e <PCD_EP_ISR_Handler+0x44c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	6959      	ldr	r1, [r3, #20]
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	88da      	ldrh	r2, [r3, #6]
 8007c2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c30:	f004 fdb0 	bl	800c794 <USB_ReadPMA>
 8007c34:	e06b      	b.n	8007d0e <PCD_EP_ISR_Handler+0x44c>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c50:	847b      	strh	r3, [r7, #34]	; 0x22
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	441a      	add	r2, r3
 8007c60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d01f      	beq.n	8007cd0 <PCD_EP_ISR_Handler+0x40e>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	4413      	add	r3, r2
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	6812      	ldr	r2, [r2, #0]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cb4:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8007cb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d028      	beq.n	8007d0e <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6818      	ldr	r0, [r3, #0]
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	6959      	ldr	r1, [r3, #20]
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	891a      	ldrh	r2, [r3, #8]
 8007cc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007cca:	f004 fd63 	bl	800c794 <USB_ReadPMA>
 8007cce:	e01e      	b.n	8007d0e <PCD_EP_ISR_Handler+0x44c>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	461a      	mov	r2, r3
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	00db      	lsls	r3, r3, #3
 8007ce2:	4413      	add	r3, r2
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6812      	ldr	r2, [r2, #0]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cf4:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8007cf6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d008      	beq.n	8007d0e <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	6959      	ldr	r1, [r3, #20]
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	895a      	ldrh	r2, [r3, #10]
 8007d08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d0a:	f004 fd43 	bl	800c794 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	69da      	ldr	r2, [r3, #28]
 8007d12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d14:	441a      	add	r2, r3
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	695a      	ldr	r2, [r3, #20]
 8007d1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d20:	441a      	add	r2, r3
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <PCD_EP_ISR_Handler+0x476>
 8007d2e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d206      	bcs.n	8007d46 <PCD_EP_ISR_Handler+0x484>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f00d fc1c 	bl	801557c <HAL_PCD_DataOutStageCallback>
 8007d44:	e008      	b.n	8007d58 <PCD_EP_ISR_Handler+0x496>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	7819      	ldrb	r1, [r3, #0]
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	695a      	ldr	r2, [r3, #20]
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7ff fc85 	bl	8007662 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007d58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d051      	beq.n	8007e06 <PCD_EP_ISR_Handler+0x544>
      {
        ep = &hpcd->IN_ep[epindex];
 8007d62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007d66:	015b      	lsls	r3, r3, #5
 8007d68:	3328      	adds	r3, #40	; 0x28
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4413      	add	r3, r2
 8007d7e:	881b      	ldrh	r3, [r3, #0]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d8a:	843b      	strh	r3, [r7, #32]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	461a      	mov	r2, r3
 8007d92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	441a      	add	r2, r3
 8007d9a:	8c3b      	ldrh	r3, [r7, #32]
 8007d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	461a      	mov	r2, r3
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	00db      	lsls	r3, r3, #3
 8007dba:	4413      	add	r3, r2
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	6812      	ldr	r2, [r2, #0]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	695a      	ldr	r2, [r3, #20]
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	441a      	add	r2, r3
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d106      	bne.n	8007df4 <PCD_EP_ISR_Handler+0x532>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f00d fbdd 	bl	80155ac <HAL_PCD_DataInStageCallback>
 8007df2:	e008      	b.n	8007e06 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	7819      	ldrb	r1, [r3, #0]
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	695a      	ldr	r2, [r3, #20]
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7ff fc7d 	bl	8007700 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	b21b      	sxth	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f6ff ad5a 	blt.w	80078cc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3738      	adds	r7, #56	; 0x38
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b087      	sub	sp, #28
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	607b      	str	r3, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	817b      	strh	r3, [r7, #10]
 8007e30:	4613      	mov	r3, r2
 8007e32:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007e34:	897b      	ldrh	r3, [r7, #10]
 8007e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d008      	beq.n	8007e52 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e40:	897b      	ldrh	r3, [r7, #10]
 8007e42:	f003 0307 	and.w	r3, r3, #7
 8007e46:	015b      	lsls	r3, r3, #5
 8007e48:	3328      	adds	r3, #40	; 0x28
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	e006      	b.n	8007e60 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e52:	897b      	ldrh	r3, [r7, #10]
 8007e54:	015b      	lsls	r3, r3, #5
 8007e56:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007e60:	893b      	ldrh	r3, [r7, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d107      	bne.n	8007e76 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	80da      	strh	r2, [r3, #6]
 8007e74:	e00b      	b.n	8007e8e <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	0c1b      	lsrs	r3, r3, #16
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	371c      	adds	r7, #28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	f043 0301 	orr.w	r3, r3, #1
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	f043 0302 	orr.w	r3, r3, #2
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f0c:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a04      	ldr	r2, [pc, #16]	; (8007f24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f16:	6013      	str	r3, [r2, #0]
}
 8007f18:	bf00      	nop
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	58000400 	.word	0x58000400

08007f28 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007f2c:	4b04      	ldr	r3, [pc, #16]	; (8007f40 <HAL_PWREx_GetVoltageRange+0x18>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	58000400 	.word	0x58000400

08007f44 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007f44:	b480      	push	{r7}
 8007f46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007f48:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	4a04      	ldr	r2, [pc, #16]	; (8007f60 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f52:	6053      	str	r3, [r2, #4]
}
 8007f54:	bf00      	nop
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	58000400 	.word	0x58000400

08007f64 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007f64:	b480      	push	{r7}
 8007f66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f76:	d101      	bne.n	8007f7c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e000      	b.n	8007f7e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <LL_RCC_HSE_Enable>:
{
 8007f88:	b480      	push	{r7}
 8007f8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f9a:	6013      	str	r3, [r2, #0]
}
 8007f9c:	bf00      	nop
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <LL_RCC_HSE_Disable>:
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fb8:	6013      	str	r3, [r2, #0]
}
 8007fba:	bf00      	nop
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <LL_RCC_HSE_IsReady>:
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fd6:	d101      	bne.n	8007fdc <LL_RCC_HSE_IsReady+0x18>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e000      	b.n	8007fde <LL_RCC_HSE_IsReady+0x1a>
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <LL_RCC_HSI_Enable>:
{
 8007fe8:	b480      	push	{r7}
 8007fea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ffa:	6013      	str	r3, [r2, #0]
}
 8007ffc:	bf00      	nop
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <LL_RCC_HSI_Disable>:
{
 8008006:	b480      	push	{r7}
 8008008:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800800a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008018:	6013      	str	r3, [r2, #0]
}
 800801a:	bf00      	nop
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <LL_RCC_HSI_IsReady>:
{
 8008024:	b480      	push	{r7}
 8008026:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008036:	d101      	bne.n	800803c <LL_RCC_HSI_IsReady+0x18>
 8008038:	2301      	movs	r3, #1
 800803a:	e000      	b.n	800803e <LL_RCC_HSI_IsReady+0x1a>
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <LL_RCC_HSI_SetCalibTrimming>:
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8008050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	061b      	lsls	r3, r3, #24
 800805e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008062:	4313      	orrs	r3, r2
 8008064:	604b      	str	r3, [r1, #4]
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <LL_RCC_HSI48_Enable>:
{
 8008072:	b480      	push	{r7}
 8008074:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800807a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800807e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008082:	f043 0301 	orr.w	r3, r3, #1
 8008086:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800808a:	bf00      	nop
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <LL_RCC_HSI48_Disable>:
{
 8008094:	b480      	push	{r7}
 8008096:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800809c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080a4:	f023 0301 	bic.w	r3, r3, #1
 80080a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80080ac:	bf00      	nop
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <LL_RCC_HSI48_IsReady>:
{
 80080b6:	b480      	push	{r7}
 80080b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80080ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080c2:	f003 0302 	and.w	r3, r3, #2
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d101      	bne.n	80080ce <LL_RCC_HSI48_IsReady+0x18>
 80080ca:	2301      	movs	r3, #1
 80080cc:	e000      	b.n	80080d0 <LL_RCC_HSI48_IsReady+0x1a>
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <LL_RCC_LSE_Enable>:
{
 80080da:	b480      	push	{r7}
 80080dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80080de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080ea:	f043 0301 	orr.w	r3, r3, #1
 80080ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80080f2:	bf00      	nop
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <LL_RCC_LSE_Disable>:
{
 80080fc:	b480      	push	{r7}
 80080fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800810c:	f023 0301 	bic.w	r3, r3, #1
 8008110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008114:	bf00      	nop
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <LL_RCC_LSE_EnableBypass>:
{
 800811e:	b480      	push	{r7}
 8008120:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800812a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800812e:	f043 0304 	orr.w	r3, r3, #4
 8008132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008136:	bf00      	nop
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <LL_RCC_LSE_DisableBypass>:
{
 8008140:	b480      	push	{r7}
 8008142:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800814c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008150:	f023 0304 	bic.w	r3, r3, #4
 8008154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008158:	bf00      	nop
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <LL_RCC_LSE_IsReady>:
{
 8008162:	b480      	push	{r7}
 8008164:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800816a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b02      	cmp	r3, #2
 8008174:	d101      	bne.n	800817a <LL_RCC_LSE_IsReady+0x18>
 8008176:	2301      	movs	r3, #1
 8008178:	e000      	b.n	800817c <LL_RCC_LSE_IsReady+0x1a>
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <LL_RCC_LSI1_Enable>:
{
 8008186:	b480      	push	{r7}
 8008188:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800818a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800818e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008196:	f043 0301 	orr.w	r3, r3, #1
 800819a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800819e:	bf00      	nop
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <LL_RCC_LSI1_Disable>:
{
 80081a8:	b480      	push	{r7}
 80081aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80081ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081b8:	f023 0301 	bic.w	r3, r3, #1
 80081bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80081c0:	bf00      	nop
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <LL_RCC_LSI1_IsReady>:
{
 80081ca:	b480      	push	{r7}
 80081cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80081ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d101      	bne.n	80081e2 <LL_RCC_LSI1_IsReady+0x18>
 80081de:	2301      	movs	r3, #1
 80081e0:	e000      	b.n	80081e4 <LL_RCC_LSI1_IsReady+0x1a>
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <LL_RCC_LSI2_Enable>:
{
 80081ee:	b480      	push	{r7}
 80081f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80081f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081fe:	f043 0304 	orr.w	r3, r3, #4
 8008202:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008206:	bf00      	nop
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <LL_RCC_LSI2_Disable>:
{
 8008210:	b480      	push	{r7}
 8008212:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800821c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008220:	f023 0304 	bic.w	r3, r3, #4
 8008224:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008228:	bf00      	nop
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <LL_RCC_LSI2_IsReady>:
{
 8008232:	b480      	push	{r7}
 8008234:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8008236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800823a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800823e:	f003 0308 	and.w	r3, r3, #8
 8008242:	2b08      	cmp	r3, #8
 8008244:	d101      	bne.n	800824a <LL_RCC_LSI2_IsReady+0x18>
 8008246:	2301      	movs	r3, #1
 8008248:	e000      	b.n	800824c <LL_RCC_LSI2_IsReady+0x1a>
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <LL_RCC_LSI2_SetTrimming>:
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800825e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008266:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	021b      	lsls	r3, r3, #8
 800826e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008272:	4313      	orrs	r3, r2
 8008274:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <LL_RCC_MSI_Enable>:
{
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8008288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008292:	f043 0301 	orr.w	r3, r3, #1
 8008296:	6013      	str	r3, [r2, #0]
}
 8008298:	bf00      	nop
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <LL_RCC_MSI_Disable>:
{
 80082a2:	b480      	push	{r7}
 80082a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80082a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082b0:	f023 0301 	bic.w	r3, r3, #1
 80082b4:	6013      	str	r3, [r2, #0]
}
 80082b6:	bf00      	nop
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <LL_RCC_MSI_IsReady>:
{
 80082c0:	b480      	push	{r7}
 80082c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80082c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d101      	bne.n	80082d6 <LL_RCC_MSI_IsReady+0x16>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e000      	b.n	80082d8 <LL_RCC_MSI_IsReady+0x18>
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <LL_RCC_MSI_SetRange>:
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80082ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	600b      	str	r3, [r1, #0]
}
 80082fe:	bf00      	nop
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <LL_RCC_MSI_GetRange>:
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800831a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2bb0      	cmp	r3, #176	; 0xb0
 8008320:	d901      	bls.n	8008326 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8008322:	23b0      	movs	r3, #176	; 0xb0
 8008324:	607b      	str	r3, [r7, #4]
  return msiRange;
 8008326:	687b      	ldr	r3, [r7, #4]
}
 8008328:	4618      	mov	r0, r3
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <LL_RCC_MSI_SetCalibTrimming>:
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800833c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	021b      	lsls	r3, r3, #8
 800834a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800834e:	4313      	orrs	r3, r2
 8008350:	604b      	str	r3, [r1, #4]
}
 8008352:	bf00      	nop
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <LL_RCC_SetSysClkSource>:
{
 800835e:	b480      	push	{r7}
 8008360:	b083      	sub	sp, #12
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f023 0203 	bic.w	r2, r3, #3
 8008370:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4313      	orrs	r3, r2
 8008378:	608b      	str	r3, [r1, #8]
}
 800837a:	bf00      	nop
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <LL_RCC_GetSysClkSource>:
{
 8008386:	b480      	push	{r7}
 8008388:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800838a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f003 030c 	and.w	r3, r3, #12
}
 8008394:	4618      	mov	r0, r3
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <LL_RCC_SetAHBPrescaler>:
{
 800839e:	b480      	push	{r7}
 80083a0:	b083      	sub	sp, #12
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80083a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	608b      	str	r3, [r1, #8]
}
 80083ba:	bf00      	nop
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80083c6:	b480      	push	{r7}
 80083c8:	b083      	sub	sp, #12
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80083ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80083d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <LL_RCC_SetAHB4Prescaler>:
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80083fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008402:	f023 020f 	bic.w	r2, r3, #15
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	091b      	lsrs	r3, r3, #4
 800840a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800840e:	4313      	orrs	r3, r2
 8008410:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <LL_RCC_SetAPB1Prescaler>:
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4313      	orrs	r3, r2
 800843a:	608b      	str	r3, [r1, #8]
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <LL_RCC_SetAPB2Prescaler>:
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800845a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4313      	orrs	r3, r2
 8008462:	608b      	str	r3, [r1, #8]
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <LL_RCC_GetAHBPrescaler>:
{
 8008470:	b480      	push	{r7}
 8008472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800847e:	4618      	mov	r0, r3
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <LL_C2_RCC_GetAHBPrescaler>:
{
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800848c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008490:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008498:	4618      	mov	r0, r3
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <LL_RCC_GetAHB4Prescaler>:
{
 80084a2:	b480      	push	{r7}
 80084a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80084a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <LL_RCC_GetAPB1Prescaler>:
{
 80084be:	b480      	push	{r7}
 80084c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80084c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <LL_RCC_GetAPB2Prescaler>:
{
 80084d6:	b480      	push	{r7}
 80084d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80084da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <LL_RCC_PLL_Enable>:
{
 80084ee:	b480      	push	{r7}
 80084f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80084f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008500:	6013      	str	r3, [r2, #0]
}
 8008502:	bf00      	nop
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <LL_RCC_PLL_Disable>:
{
 800850c:	b480      	push	{r7}
 800850e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800851a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800851e:	6013      	str	r3, [r2, #0]
}
 8008520:	bf00      	nop
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <LL_RCC_PLL_IsReady>:
{
 800852a:	b480      	push	{r7}
 800852c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800852e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008538:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800853c:	d101      	bne.n	8008542 <LL_RCC_PLL_IsReady+0x18>
 800853e:	2301      	movs	r3, #1
 8008540:	e000      	b.n	8008544 <LL_RCC_PLL_IsReady+0x1a>
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <LL_RCC_PLL_GetN>:
{
 800854e:	b480      	push	{r7}
 8008550:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	0a1b      	lsrs	r3, r3, #8
 800855a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800855e:	4618      	mov	r0, r3
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <LL_RCC_PLL_GetR>:
{
 8008568:	b480      	push	{r7}
 800856a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800856c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8008576:	4618      	mov	r0, r3
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <LL_RCC_PLL_GetDivider>:
{
 8008580:	b480      	push	{r7}
 8008582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800858e:	4618      	mov	r0, r3
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <LL_RCC_PLL_GetMainSource>:
{
 8008598:	b480      	push	{r7}
 800859a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800859c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	f003 0303 	and.w	r3, r3, #3
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <LL_RCC_IsActiveFlag_HPRE>:
{
 80085b0:	b480      	push	{r7}
 80085b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80085b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085c2:	d101      	bne.n	80085c8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80085c4:	2301      	movs	r3, #1
 80085c6:	e000      	b.n	80085ca <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80085d4:	b480      	push	{r7}
 80085d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80085d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80085e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085e8:	d101      	bne.n	80085ee <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80085ea:	2301      	movs	r3, #1
 80085ec:	e000      	b.n	80085f0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80085fa:	b480      	push	{r7}
 80085fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80085fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008602:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800860a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800860e:	d101      	bne.n	8008614 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008610:	2301      	movs	r3, #1
 8008612:	e000      	b.n	8008616 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8008620:	b480      	push	{r7}
 8008622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800862e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008632:	d101      	bne.n	8008638 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008634:	2301      	movs	r3, #1
 8008636:	e000      	b.n	800863a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008652:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008656:	d101      	bne.n	800865c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008658:	2301      	movs	r3, #1
 800865a:	e000      	b.n	800865e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008668:	b590      	push	{r4, r7, lr}
 800866a:	b08d      	sub	sp, #52	; 0x34
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e37e      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0320 	and.w	r3, r3, #32
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 8092 	beq.w	80087ac <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008688:	f7ff fe7d 	bl	8008386 <LL_RCC_GetSysClkSource>
 800868c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800868e:	f7ff ff83 	bl	8008598 <LL_RCC_PLL_GetMainSource>
 8008692:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d005      	beq.n	80086a6 <HAL_RCC_OscConfig+0x3e>
 800869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869c:	2b0c      	cmp	r3, #12
 800869e:	d14c      	bne.n	800873a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80086a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d149      	bne.n	800873a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80086a6:	f7ff fe0b 	bl	80082c0 <LL_RCC_MSI_IsReady>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d005      	beq.n	80086bc <HAL_RCC_OscConfig+0x54>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e35d      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80086c0:	f7ff fe23 	bl	800830a <LL_RCC_MSI_GetRange>
 80086c4:	4603      	mov	r3, r0
 80086c6:	429c      	cmp	r4, r3
 80086c8:	d914      	bls.n	80086f4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 fd5c 	bl	800918c <RCC_SetFlashLatencyFromMSIRange>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e34c      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7ff fdfd 	bl	80082e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a1b      	ldr	r3, [r3, #32]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7ff fe21 	bl	8008334 <LL_RCC_MSI_SetCalibTrimming>
 80086f2:	e013      	b.n	800871c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7ff fdf2 	bl	80082e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff fe16 	bl	8008334 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	4618      	mov	r0, r3
 800870e:	f000 fd3d 	bl	800918c <RCC_SetFlashLatencyFromMSIRange>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e32d      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800871c:	f000 fcda 	bl	80090d4 <HAL_RCC_GetHCLKFreq>
 8008720:	4602      	mov	r2, r0
 8008722:	4bb3      	ldr	r3, [pc, #716]	; (80089f0 <HAL_RCC_OscConfig+0x388>)
 8008724:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008726:	4bb3      	ldr	r3, [pc, #716]	; (80089f4 <HAL_RCC_OscConfig+0x38c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4618      	mov	r0, r3
 800872c:	f7fb fbf0 	bl	8003f10 <HAL_InitTick>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d039      	beq.n	80087aa <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e31e      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d01e      	beq.n	8008780 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008742:	f7ff fd9f 	bl	8008284 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008746:	f7fb feb5 	bl	80044b4 <HAL_GetTick>
 800874a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800874c:	e008      	b.n	8008760 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800874e:	f7fb feb1 	bl	80044b4 <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	2b02      	cmp	r3, #2
 800875a:	d901      	bls.n	8008760 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e30b      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008760:	f7ff fdae 	bl	80082c0 <LL_RCC_MSI_IsReady>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0f1      	beq.n	800874e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876e:	4618      	mov	r0, r3
 8008770:	f7ff fdb7 	bl	80082e2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a1b      	ldr	r3, [r3, #32]
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff fddb 	bl	8008334 <LL_RCC_MSI_SetCalibTrimming>
 800877e:	e015      	b.n	80087ac <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008780:	f7ff fd8f 	bl	80082a2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008784:	f7fb fe96 	bl	80044b4 <HAL_GetTick>
 8008788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800878a:	e008      	b.n	800879e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800878c:	f7fb fe92 	bl	80044b4 <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	2b02      	cmp	r3, #2
 8008798:	d901      	bls.n	800879e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e2ec      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800879e:	f7ff fd8f 	bl	80082c0 <LL_RCC_MSI_IsReady>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1f1      	bne.n	800878c <HAL_RCC_OscConfig+0x124>
 80087a8:	e000      	b.n	80087ac <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80087aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d04e      	beq.n	8008856 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087b8:	f7ff fde5 	bl	8008386 <LL_RCC_GetSysClkSource>
 80087bc:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087be:	f7ff feeb 	bl	8008598 <LL_RCC_PLL_GetMainSource>
 80087c2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	2b08      	cmp	r3, #8
 80087c8:	d005      	beq.n	80087d6 <HAL_RCC_OscConfig+0x16e>
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	2b0c      	cmp	r3, #12
 80087ce:	d10d      	bne.n	80087ec <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d10a      	bne.n	80087ec <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087d6:	f7ff fbf5 	bl	8007fc4 <LL_RCC_HSE_IsReady>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d039      	beq.n	8008854 <HAL_RCC_OscConfig+0x1ec>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d135      	bne.n	8008854 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e2c5      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087f4:	d102      	bne.n	80087fc <HAL_RCC_OscConfig+0x194>
 80087f6:	f7ff fbc7 	bl	8007f88 <LL_RCC_HSE_Enable>
 80087fa:	e001      	b.n	8008800 <HAL_RCC_OscConfig+0x198>
 80087fc:	f7ff fbd3 	bl	8007fa6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d012      	beq.n	800882e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008808:	f7fb fe54 	bl	80044b4 <HAL_GetTick>
 800880c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800880e:	e008      	b.n	8008822 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008810:	f7fb fe50 	bl	80044b4 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	2b64      	cmp	r3, #100	; 0x64
 800881c:	d901      	bls.n	8008822 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e2aa      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008822:	f7ff fbcf 	bl	8007fc4 <LL_RCC_HSE_IsReady>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d0f1      	beq.n	8008810 <HAL_RCC_OscConfig+0x1a8>
 800882c:	e013      	b.n	8008856 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800882e:	f7fb fe41 	bl	80044b4 <HAL_GetTick>
 8008832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008834:	e008      	b.n	8008848 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008836:	f7fb fe3d 	bl	80044b4 <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	2b64      	cmp	r3, #100	; 0x64
 8008842:	d901      	bls.n	8008848 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e297      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008848:	f7ff fbbc 	bl	8007fc4 <LL_RCC_HSE_IsReady>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1f1      	bne.n	8008836 <HAL_RCC_OscConfig+0x1ce>
 8008852:	e000      	b.n	8008856 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d051      	beq.n	8008906 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008862:	f7ff fd90 	bl	8008386 <LL_RCC_GetSysClkSource>
 8008866:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008868:	f7ff fe96 	bl	8008598 <LL_RCC_PLL_GetMainSource>
 800886c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	2b04      	cmp	r3, #4
 8008872:	d005      	beq.n	8008880 <HAL_RCC_OscConfig+0x218>
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	2b0c      	cmp	r3, #12
 8008878:	d113      	bne.n	80088a2 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2b02      	cmp	r3, #2
 800887e:	d110      	bne.n	80088a2 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008880:	f7ff fbd0 	bl	8008024 <LL_RCC_HSI_IsReady>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d005      	beq.n	8008896 <HAL_RCC_OscConfig+0x22e>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e270      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff fbd4 	bl	8008048 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088a0:	e031      	b.n	8008906 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d019      	beq.n	80088de <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088aa:	f7ff fb9d 	bl	8007fe8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ae:	f7fb fe01 	bl	80044b4 <HAL_GetTick>
 80088b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80088b4:	e008      	b.n	80088c8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088b6:	f7fb fdfd 	bl	80044b4 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d901      	bls.n	80088c8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e257      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80088c8:	f7ff fbac 	bl	8008024 <LL_RCC_HSI_IsReady>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0f1      	beq.n	80088b6 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7ff fbb6 	bl	8008048 <LL_RCC_HSI_SetCalibTrimming>
 80088dc:	e013      	b.n	8008906 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088de:	f7ff fb92 	bl	8008006 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e2:	f7fb fde7 	bl	80044b4 <HAL_GetTick>
 80088e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80088e8:	e008      	b.n	80088fc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088ea:	f7fb fde3 	bl	80044b4 <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d901      	bls.n	80088fc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e23d      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80088fc:	f7ff fb92 	bl	8008024 <LL_RCC_HSI_IsReady>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1f1      	bne.n	80088ea <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0308 	and.w	r3, r3, #8
 800890e:	2b00      	cmp	r3, #0
 8008910:	d106      	bne.n	8008920 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 80a3 	beq.w	8008a66 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d076      	beq.n	8008a16 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0310 	and.w	r3, r3, #16
 8008930:	2b00      	cmp	r3, #0
 8008932:	d046      	beq.n	80089c2 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008934:	f7ff fc49 	bl	80081ca <LL_RCC_LSI1_IsReady>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d113      	bne.n	8008966 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800893e:	f7ff fc22 	bl	8008186 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008942:	f7fb fdb7 	bl	80044b4 <HAL_GetTick>
 8008946:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008948:	e008      	b.n	800895c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800894a:	f7fb fdb3 	bl	80044b4 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	2b02      	cmp	r3, #2
 8008956:	d901      	bls.n	800895c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e20d      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800895c:	f7ff fc35 	bl	80081ca <LL_RCC_LSI1_IsReady>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d0f1      	beq.n	800894a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008966:	f7ff fc42 	bl	80081ee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800896a:	f7fb fda3 	bl	80044b4 <HAL_GetTick>
 800896e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008970:	e008      	b.n	8008984 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008972:	f7fb fd9f 	bl	80044b4 <HAL_GetTick>
 8008976:	4602      	mov	r2, r0
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	2b03      	cmp	r3, #3
 800897e:	d901      	bls.n	8008984 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e1f9      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008984:	f7ff fc55 	bl	8008232 <LL_RCC_LSI2_IsReady>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d0f1      	beq.n	8008972 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff fc5f 	bl	8008256 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8008998:	f7ff fc06 	bl	80081a8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800899c:	f7fb fd8a 	bl	80044b4 <HAL_GetTick>
 80089a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80089a2:	e008      	b.n	80089b6 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80089a4:	f7fb fd86 	bl	80044b4 <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d901      	bls.n	80089b6 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e1e0      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80089b6:	f7ff fc08 	bl	80081ca <LL_RCC_LSI1_IsReady>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1f1      	bne.n	80089a4 <HAL_RCC_OscConfig+0x33c>
 80089c0:	e051      	b.n	8008a66 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80089c2:	f7ff fbe0 	bl	8008186 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c6:	f7fb fd75 	bl	80044b4 <HAL_GetTick>
 80089ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80089cc:	e008      	b.n	80089e0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80089ce:	f7fb fd71 	bl	80044b4 <HAL_GetTick>
 80089d2:	4602      	mov	r2, r0
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d901      	bls.n	80089e0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e1cb      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80089e0:	f7ff fbf3 	bl	80081ca <LL_RCC_LSI1_IsReady>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0f1      	beq.n	80089ce <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80089ea:	f7ff fc11 	bl	8008210 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80089ee:	e00c      	b.n	8008a0a <HAL_RCC_OscConfig+0x3a2>
 80089f0:	20000044 	.word	0x20000044
 80089f4:	20000048 	.word	0x20000048
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80089f8:	f7fb fd5c 	bl	80044b4 <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d901      	bls.n	8008a0a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e1b6      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008a0a:	f7ff fc12 	bl	8008232 <LL_RCC_LSI2_IsReady>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1f1      	bne.n	80089f8 <HAL_RCC_OscConfig+0x390>
 8008a14:	e027      	b.n	8008a66 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8008a16:	f7ff fbfb 	bl	8008210 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a1a:	f7fb fd4b 	bl	80044b4 <HAL_GetTick>
 8008a1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008a20:	e008      	b.n	8008a34 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008a22:	f7fb fd47 	bl	80044b4 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	2b03      	cmp	r3, #3
 8008a2e:	d901      	bls.n	8008a34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e1a1      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008a34:	f7ff fbfd 	bl	8008232 <LL_RCC_LSI2_IsReady>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1f1      	bne.n	8008a22 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008a3e:	f7ff fbb3 	bl	80081a8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a42:	f7fb fd37 	bl	80044b4 <HAL_GetTick>
 8008a46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008a48:	e008      	b.n	8008a5c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008a4a:	f7fb fd33 	bl	80044b4 <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d901      	bls.n	8008a5c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e18d      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008a5c:	f7ff fbb5 	bl	80081ca <LL_RCC_LSI1_IsReady>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1f1      	bne.n	8008a4a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 0304 	and.w	r3, r3, #4
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d05b      	beq.n	8008b2a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a72:	4bb5      	ldr	r3, [pc, #724]	; (8008d48 <HAL_RCC_OscConfig+0x6e0>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d114      	bne.n	8008aa8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008a7e:	f7ff fa43 	bl	8007f08 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a82:	f7fb fd17 	bl	80044b4 <HAL_GetTick>
 8008a86:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a88:	e008      	b.n	8008a9c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a8a:	f7fb fd13 	bl	80044b4 <HAL_GetTick>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d901      	bls.n	8008a9c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e16d      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a9c:	4baa      	ldr	r3, [pc, #680]	; (8008d48 <HAL_RCC_OscConfig+0x6e0>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0f0      	beq.n	8008a8a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d102      	bne.n	8008ab6 <HAL_RCC_OscConfig+0x44e>
 8008ab0:	f7ff fb13 	bl	80080da <LL_RCC_LSE_Enable>
 8008ab4:	e00c      	b.n	8008ad0 <HAL_RCC_OscConfig+0x468>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	2b05      	cmp	r3, #5
 8008abc:	d104      	bne.n	8008ac8 <HAL_RCC_OscConfig+0x460>
 8008abe:	f7ff fb2e 	bl	800811e <LL_RCC_LSE_EnableBypass>
 8008ac2:	f7ff fb0a 	bl	80080da <LL_RCC_LSE_Enable>
 8008ac6:	e003      	b.n	8008ad0 <HAL_RCC_OscConfig+0x468>
 8008ac8:	f7ff fb18 	bl	80080fc <LL_RCC_LSE_Disable>
 8008acc:	f7ff fb38 	bl	8008140 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d014      	beq.n	8008b02 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad8:	f7fb fcec 	bl	80044b4 <HAL_GetTick>
 8008adc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008ade:	e00a      	b.n	8008af6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ae0:	f7fb fce8 	bl	80044b4 <HAL_GetTick>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d901      	bls.n	8008af6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e140      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008af6:	f7ff fb34 	bl	8008162 <LL_RCC_LSE_IsReady>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0ef      	beq.n	8008ae0 <HAL_RCC_OscConfig+0x478>
 8008b00:	e013      	b.n	8008b2a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b02:	f7fb fcd7 	bl	80044b4 <HAL_GetTick>
 8008b06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008b08:	e00a      	b.n	8008b20 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b0a:	f7fb fcd3 	bl	80044b4 <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d901      	bls.n	8008b20 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e12b      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008b20:	f7ff fb1f 	bl	8008162 <LL_RCC_LSE_IsReady>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1ef      	bne.n	8008b0a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d02c      	beq.n	8008b90 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d014      	beq.n	8008b68 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b3e:	f7ff fa98 	bl	8008072 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b42:	f7fb fcb7 	bl	80044b4 <HAL_GetTick>
 8008b46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008b48:	e008      	b.n	8008b5c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b4a:	f7fb fcb3 	bl	80044b4 <HAL_GetTick>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d901      	bls.n	8008b5c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e10d      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008b5c:	f7ff faab 	bl	80080b6 <LL_RCC_HSI48_IsReady>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0f1      	beq.n	8008b4a <HAL_RCC_OscConfig+0x4e2>
 8008b66:	e013      	b.n	8008b90 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b68:	f7ff fa94 	bl	8008094 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b6c:	f7fb fca2 	bl	80044b4 <HAL_GetTick>
 8008b70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008b72:	e008      	b.n	8008b86 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b74:	f7fb fc9e 	bl	80044b4 <HAL_GetTick>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d901      	bls.n	8008b86 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e0f8      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008b86:	f7ff fa96 	bl	80080b6 <LL_RCC_HSI48_IsReady>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1f1      	bne.n	8008b74 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 80ee 	beq.w	8008d76 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b9a:	f7ff fbf4 	bl	8008386 <LL_RCC_GetSysClkSource>
 8008b9e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	f040 80af 	bne.w	8008d10 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f003 0203 	and.w	r2, r3, #3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d123      	bne.n	8008c08 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d11c      	bne.n	8008c08 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	0a1b      	lsrs	r3, r3, #8
 8008bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d114      	bne.n	8008c08 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d10d      	bne.n	8008c08 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d106      	bne.n	8008c08 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d05d      	beq.n	8008cc4 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	2b0c      	cmp	r3, #12
 8008c0c:	d058      	beq.n	8008cc0 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d001      	beq.n	8008c20 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e0ab      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008c20:	f7ff fc74 	bl	800850c <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008c24:	f7fb fc46 	bl	80044b4 <HAL_GetTick>
 8008c28:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c2a:	e008      	b.n	8008c3e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c2c:	f7fb fc42 	bl	80044b4 <HAL_GetTick>
 8008c30:	4602      	mov	r2, r0
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d901      	bls.n	8008c3e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e09c      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1ef      	bne.n	8008c2c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c50:	68da      	ldr	r2, [r3, #12]
 8008c52:	4b3e      	ldr	r3, [pc, #248]	; (8008d4c <HAL_RCC_OscConfig+0x6e4>)
 8008c54:	4013      	ands	r3, r2
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008c5e:	4311      	orrs	r1, r2
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c64:	0212      	lsls	r2, r2, #8
 8008c66:	4311      	orrs	r1, r2
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008c6c:	4311      	orrs	r1, r2
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008c72:	4311      	orrs	r1, r2
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008c82:	f7ff fc34 	bl	80084ee <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c94:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008c96:	f7fb fc0d 	bl	80044b4 <HAL_GetTick>
 8008c9a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c9c:	e008      	b.n	8008cb0 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c9e:	f7fb fc09 	bl	80044b4 <HAL_GetTick>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	1ad3      	subs	r3, r2, r3
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d901      	bls.n	8008cb0 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e063      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d0ef      	beq.n	8008c9e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008cbe:	e05a      	b.n	8008d76 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e059      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d151      	bne.n	8008d76 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008cd2:	f7ff fc0c 	bl	80084ee <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ce4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ce6:	f7fb fbe5 	bl	80044b4 <HAL_GetTick>
 8008cea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cec:	e008      	b.n	8008d00 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cee:	f7fb fbe1 	bl	80044b4 <HAL_GetTick>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d901      	bls.n	8008d00 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e03b      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0ef      	beq.n	8008cee <HAL_RCC_OscConfig+0x686>
 8008d0e:	e032      	b.n	8008d76 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	2b0c      	cmp	r3, #12
 8008d14:	d02d      	beq.n	8008d72 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d16:	f7ff fbf9 	bl	800850c <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8008d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d24:	f023 0303 	bic.w	r3, r3, #3
 8008d28:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8008d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d34:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8008d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d3e:	f7fb fbb9 	bl	80044b4 <HAL_GetTick>
 8008d42:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d44:	e00d      	b.n	8008d62 <HAL_RCC_OscConfig+0x6fa>
 8008d46:	bf00      	nop
 8008d48:	58000400 	.word	0x58000400
 8008d4c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d50:	f7fb fbb0 	bl	80044b4 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d901      	bls.n	8008d62 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e00a      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1ef      	bne.n	8008d50 <HAL_RCC_OscConfig+0x6e8>
 8008d70:	e001      	b.n	8008d76 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e000      	b.n	8008d78 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3734      	adds	r7, #52	; 0x34
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd90      	pop	{r4, r7, pc}

08008d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e12d      	b.n	8008ff0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d94:	4b98      	ldr	r3, [pc, #608]	; (8008ff8 <HAL_RCC_ClockConfig+0x278>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0307 	and.w	r3, r3, #7
 8008d9c:	683a      	ldr	r2, [r7, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d91b      	bls.n	8008dda <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008da2:	4b95      	ldr	r3, [pc, #596]	; (8008ff8 <HAL_RCC_ClockConfig+0x278>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f023 0207 	bic.w	r2, r3, #7
 8008daa:	4993      	ldr	r1, [pc, #588]	; (8008ff8 <HAL_RCC_ClockConfig+0x278>)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008db2:	f7fb fb7f 	bl	80044b4 <HAL_GetTick>
 8008db6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008db8:	e008      	b.n	8008dcc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008dba:	f7fb fb7b 	bl	80044b4 <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d901      	bls.n	8008dcc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e111      	b.n	8008ff0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dcc:	4b8a      	ldr	r3, [pc, #552]	; (8008ff8 <HAL_RCC_ClockConfig+0x278>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0307 	and.w	r3, r3, #7
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d1ef      	bne.n	8008dba <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0302 	and.w	r3, r3, #2
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d016      	beq.n	8008e14 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7ff fad7 	bl	800839e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008df0:	f7fb fb60 	bl	80044b4 <HAL_GetTick>
 8008df4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008df6:	e008      	b.n	8008e0a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008df8:	f7fb fb5c 	bl	80044b4 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d901      	bls.n	8008e0a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	e0f2      	b.n	8008ff0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008e0a:	f7ff fbd1 	bl	80085b0 <LL_RCC_IsActiveFlag_HPRE>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d0f1      	beq.n	8008df8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0320 	and.w	r3, r3, #32
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d016      	beq.n	8008e4e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	695b      	ldr	r3, [r3, #20]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7ff face 	bl	80083c6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008e2a:	f7fb fb43 	bl	80044b4 <HAL_GetTick>
 8008e2e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008e30:	e008      	b.n	8008e44 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008e32:	f7fb fb3f 	bl	80044b4 <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d901      	bls.n	8008e44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e0d5      	b.n	8008ff0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008e44:	f7ff fbc6 	bl	80085d4 <LL_RCC_IsActiveFlag_C2HPRE>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0f1      	beq.n	8008e32 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d016      	beq.n	8008e88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7ff fac7 	bl	80083f2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008e64:	f7fb fb26 	bl	80044b4 <HAL_GetTick>
 8008e68:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008e6a:	e008      	b.n	8008e7e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008e6c:	f7fb fb22 	bl	80044b4 <HAL_GetTick>
 8008e70:	4602      	mov	r2, r0
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d901      	bls.n	8008e7e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	e0b8      	b.n	8008ff0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008e7e:	f7ff fbbc 	bl	80085fa <LL_RCC_IsActiveFlag_SHDHPRE>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d0f1      	beq.n	8008e6c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0304 	and.w	r3, r3, #4
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d016      	beq.n	8008ec2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7ff fac1 	bl	8008420 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008e9e:	f7fb fb09 	bl	80044b4 <HAL_GetTick>
 8008ea2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008ea4:	e008      	b.n	8008eb8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008ea6:	f7fb fb05 	bl	80044b4 <HAL_GetTick>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d901      	bls.n	8008eb8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e09b      	b.n	8008ff0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008eb8:	f7ff fbb2 	bl	8008620 <LL_RCC_IsActiveFlag_PPRE1>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0f1      	beq.n	8008ea6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0308 	and.w	r3, r3, #8
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d017      	beq.n	8008efe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	00db      	lsls	r3, r3, #3
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7ff fab7 	bl	8008448 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008eda:	f7fb faeb 	bl	80044b4 <HAL_GetTick>
 8008ede:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008ee0:	e008      	b.n	8008ef4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008ee2:	f7fb fae7 	bl	80044b4 <HAL_GetTick>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d901      	bls.n	8008ef4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	e07d      	b.n	8008ff0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008ef4:	f7ff fba6 	bl	8008644 <LL_RCC_IsActiveFlag_PPRE2>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d0f1      	beq.n	8008ee2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d043      	beq.n	8008f92 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d106      	bne.n	8008f20 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008f12:	f7ff f857 	bl	8007fc4 <LL_RCC_HSE_IsReady>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d11e      	bne.n	8008f5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e067      	b.n	8008ff0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	d106      	bne.n	8008f36 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008f28:	f7ff faff 	bl	800852a <LL_RCC_PLL_IsReady>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d113      	bne.n	8008f5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e05c      	b.n	8008ff0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d106      	bne.n	8008f4c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008f3e:	f7ff f9bf 	bl	80082c0 <LL_RCC_MSI_IsReady>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d108      	bne.n	8008f5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e051      	b.n	8008ff0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008f4c:	f7ff f86a 	bl	8008024 <LL_RCC_HSI_IsReady>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e04a      	b.n	8008ff0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7ff f9fd 	bl	800835e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f64:	f7fb faa6 	bl	80044b4 <HAL_GetTick>
 8008f68:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f6a:	e00a      	b.n	8008f82 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f6c:	f7fb faa2 	bl	80044b4 <HAL_GetTick>
 8008f70:	4602      	mov	r2, r0
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d901      	bls.n	8008f82 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e036      	b.n	8008ff0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f82:	f7ff fa00 	bl	8008386 <LL_RCC_GetSysClkSource>
 8008f86:	4602      	mov	r2, r0
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d1ec      	bne.n	8008f6c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f92:	4b19      	ldr	r3, [pc, #100]	; (8008ff8 <HAL_RCC_ClockConfig+0x278>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 0307 	and.w	r3, r3, #7
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d21b      	bcs.n	8008fd8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fa0:	4b15      	ldr	r3, [pc, #84]	; (8008ff8 <HAL_RCC_ClockConfig+0x278>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f023 0207 	bic.w	r2, r3, #7
 8008fa8:	4913      	ldr	r1, [pc, #76]	; (8008ff8 <HAL_RCC_ClockConfig+0x278>)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fb0:	f7fb fa80 	bl	80044b4 <HAL_GetTick>
 8008fb4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fb6:	e008      	b.n	8008fca <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008fb8:	f7fb fa7c 	bl	80044b4 <HAL_GetTick>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d901      	bls.n	8008fca <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e012      	b.n	8008ff0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fca:	4b0b      	ldr	r3, [pc, #44]	; (8008ff8 <HAL_RCC_ClockConfig+0x278>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 0307 	and.w	r3, r3, #7
 8008fd2:	683a      	ldr	r2, [r7, #0]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d1ef      	bne.n	8008fb8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008fd8:	f000 f87c 	bl	80090d4 <HAL_RCC_GetHCLKFreq>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	4b07      	ldr	r3, [pc, #28]	; (8008ffc <HAL_RCC_ClockConfig+0x27c>)
 8008fe0:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008fe2:	f7fb fa73 	bl	80044cc <HAL_GetTickPrio>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fa ff91 	bl	8003f10 <HAL_InitTick>
 8008fee:	4603      	mov	r3, r0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	58004000 	.word	0x58004000
 8008ffc:	20000044 	.word	0x20000044

08009000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009000:	b590      	push	{r4, r7, lr}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009006:	f7ff f9be 	bl	8008386 <LL_RCC_GetSysClkSource>
 800900a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10a      	bne.n	8009028 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009012:	f7ff f97a 	bl	800830a <LL_RCC_MSI_GetRange>
 8009016:	4603      	mov	r3, r0
 8009018:	091b      	lsrs	r3, r3, #4
 800901a:	f003 030f 	and.w	r3, r3, #15
 800901e:	4a2a      	ldr	r2, [pc, #168]	; (80090c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009024:	60fb      	str	r3, [r7, #12]
 8009026:	e04a      	b.n	80090be <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b04      	cmp	r3, #4
 800902c:	d102      	bne.n	8009034 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800902e:	4b27      	ldr	r3, [pc, #156]	; (80090cc <HAL_RCC_GetSysClockFreq+0xcc>)
 8009030:	60fb      	str	r3, [r7, #12]
 8009032:	e044      	b.n	80090be <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b08      	cmp	r3, #8
 8009038:	d10a      	bne.n	8009050 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800903a:	f7fe ff93 	bl	8007f64 <LL_RCC_HSE_IsEnabledDiv2>
 800903e:	4603      	mov	r3, r0
 8009040:	2b01      	cmp	r3, #1
 8009042:	d102      	bne.n	800904a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8009044:	4b21      	ldr	r3, [pc, #132]	; (80090cc <HAL_RCC_GetSysClockFreq+0xcc>)
 8009046:	60fb      	str	r3, [r7, #12]
 8009048:	e039      	b.n	80090be <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800904a:	4b21      	ldr	r3, [pc, #132]	; (80090d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800904c:	60fb      	str	r3, [r7, #12]
 800904e:	e036      	b.n	80090be <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8009050:	f7ff faa2 	bl	8008598 <LL_RCC_PLL_GetMainSource>
 8009054:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b02      	cmp	r3, #2
 800905a:	d002      	beq.n	8009062 <HAL_RCC_GetSysClockFreq+0x62>
 800905c:	2b03      	cmp	r3, #3
 800905e:	d003      	beq.n	8009068 <HAL_RCC_GetSysClockFreq+0x68>
 8009060:	e00d      	b.n	800907e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8009062:	4b1a      	ldr	r3, [pc, #104]	; (80090cc <HAL_RCC_GetSysClockFreq+0xcc>)
 8009064:	60bb      	str	r3, [r7, #8]
        break;
 8009066:	e015      	b.n	8009094 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009068:	f7fe ff7c 	bl	8007f64 <LL_RCC_HSE_IsEnabledDiv2>
 800906c:	4603      	mov	r3, r0
 800906e:	2b01      	cmp	r3, #1
 8009070:	d102      	bne.n	8009078 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8009072:	4b16      	ldr	r3, [pc, #88]	; (80090cc <HAL_RCC_GetSysClockFreq+0xcc>)
 8009074:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8009076:	e00d      	b.n	8009094 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8009078:	4b15      	ldr	r3, [pc, #84]	; (80090d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800907a:	60bb      	str	r3, [r7, #8]
        break;
 800907c:	e00a      	b.n	8009094 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800907e:	f7ff f944 	bl	800830a <LL_RCC_MSI_GetRange>
 8009082:	4603      	mov	r3, r0
 8009084:	091b      	lsrs	r3, r3, #4
 8009086:	f003 030f 	and.w	r3, r3, #15
 800908a:	4a0f      	ldr	r2, [pc, #60]	; (80090c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800908c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009090:	60bb      	str	r3, [r7, #8]
        break;
 8009092:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8009094:	f7ff fa5b 	bl	800854e <LL_RCC_PLL_GetN>
 8009098:	4602      	mov	r2, r0
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	fb03 f402 	mul.w	r4, r3, r2
 80090a0:	f7ff fa6e 	bl	8008580 <LL_RCC_PLL_GetDivider>
 80090a4:	4603      	mov	r3, r0
 80090a6:	091b      	lsrs	r3, r3, #4
 80090a8:	3301      	adds	r3, #1
 80090aa:	fbb4 f4f3 	udiv	r4, r4, r3
 80090ae:	f7ff fa5b 	bl	8008568 <LL_RCC_PLL_GetR>
 80090b2:	4603      	mov	r3, r0
 80090b4:	0f5b      	lsrs	r3, r3, #29
 80090b6:	3301      	adds	r3, #1
 80090b8:	fbb4 f3f3 	udiv	r3, r4, r3
 80090bc:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80090be:	68fb      	ldr	r3, [r7, #12]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd90      	pop	{r4, r7, pc}
 80090c8:	080170d8 	.word	0x080170d8
 80090cc:	00f42400 	.word	0x00f42400
 80090d0:	01e84800 	.word	0x01e84800

080090d4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090d4:	b598      	push	{r3, r4, r7, lr}
 80090d6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80090d8:	f7ff ff92 	bl	8009000 <HAL_RCC_GetSysClockFreq>
 80090dc:	4604      	mov	r4, r0
 80090de:	f7ff f9c7 	bl	8008470 <LL_RCC_GetAHBPrescaler>
 80090e2:	4603      	mov	r3, r0
 80090e4:	091b      	lsrs	r3, r3, #4
 80090e6:	f003 030f 	and.w	r3, r3, #15
 80090ea:	4a03      	ldr	r2, [pc, #12]	; (80090f8 <HAL_RCC_GetHCLKFreq+0x24>)
 80090ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090f0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	bd98      	pop	{r3, r4, r7, pc}
 80090f8:	08017078 	.word	0x08017078

080090fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090fc:	b598      	push	{r3, r4, r7, lr}
 80090fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009100:	f7ff ffe8 	bl	80090d4 <HAL_RCC_GetHCLKFreq>
 8009104:	4604      	mov	r4, r0
 8009106:	f7ff f9e6 	bl	80084d6 <LL_RCC_GetAPB2Prescaler>
 800910a:	4603      	mov	r3, r0
 800910c:	0adb      	lsrs	r3, r3, #11
 800910e:	f003 0307 	and.w	r3, r3, #7
 8009112:	4a04      	ldr	r2, [pc, #16]	; (8009124 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009118:	f003 031f 	and.w	r3, r3, #31
 800911c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009120:	4618      	mov	r0, r3
 8009122:	bd98      	pop	{r3, r4, r7, pc}
 8009124:	080170b8 	.word	0x080170b8

08009128 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	226f      	movs	r2, #111	; 0x6f
 8009136:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8009138:	f7ff f925 	bl	8008386 <LL_RCC_GetSysClkSource>
 800913c:	4602      	mov	r2, r0
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8009142:	f7ff f995 	bl	8008470 <LL_RCC_GetAHBPrescaler>
 8009146:	4602      	mov	r2, r0
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800914c:	f7ff f9b7 	bl	80084be <LL_RCC_GetAPB1Prescaler>
 8009150:	4602      	mov	r2, r0
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8009156:	f7ff f9be 	bl	80084d6 <LL_RCC_GetAPB2Prescaler>
 800915a:	4602      	mov	r2, r0
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8009160:	f7ff f992 	bl	8008488 <LL_C2_RCC_GetAHBPrescaler>
 8009164:	4602      	mov	r2, r0
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800916a:	f7ff f99a 	bl	80084a2 <LL_RCC_GetAHB4Prescaler>
 800916e:	4602      	mov	r2, r0
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009174:	4b04      	ldr	r3, [pc, #16]	; (8009188 <HAL_RCC_GetClockConfig+0x60>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0207 	and.w	r2, r3, #7
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	601a      	str	r2, [r3, #0]
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	58004000 	.word	0x58004000

0800918c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800918c:	b590      	push	{r4, r7, lr}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2bb0      	cmp	r3, #176	; 0xb0
 8009198:	d903      	bls.n	80091a2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800919a:	4b15      	ldr	r3, [pc, #84]	; (80091f0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800919c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919e:	60fb      	str	r3, [r7, #12]
 80091a0:	e007      	b.n	80091b2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	091b      	lsrs	r3, r3, #4
 80091a6:	f003 030f 	and.w	r3, r3, #15
 80091aa:	4a11      	ldr	r2, [pc, #68]	; (80091f0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80091ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091b0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80091b2:	f7ff f976 	bl	80084a2 <LL_RCC_GetAHB4Prescaler>
 80091b6:	4603      	mov	r3, r0
 80091b8:	091b      	lsrs	r3, r3, #4
 80091ba:	f003 030f 	and.w	r3, r3, #15
 80091be:	4a0d      	ldr	r2, [pc, #52]	; (80091f4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80091c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ca:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	4a0a      	ldr	r2, [pc, #40]	; (80091f8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80091d0:	fba2 2303 	umull	r2, r3, r2, r3
 80091d4:	0c9c      	lsrs	r4, r3, #18
 80091d6:	f7fe fea7 	bl	8007f28 <HAL_PWREx_GetVoltageRange>
 80091da:	4603      	mov	r3, r0
 80091dc:	4619      	mov	r1, r3
 80091de:	4620      	mov	r0, r4
 80091e0:	f000 f80c 	bl	80091fc <RCC_SetFlashLatency>
 80091e4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd90      	pop	{r4, r7, pc}
 80091ee:	bf00      	nop
 80091f0:	080170d8 	.word	0x080170d8
 80091f4:	08017078 	.word	0x08017078
 80091f8:	431bde83 	.word	0x431bde83

080091fc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80091fc:	b590      	push	{r4, r7, lr}
 80091fe:	b093      	sub	sp, #76	; 0x4c
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8009206:	4b39      	ldr	r3, [pc, #228]	; (80092ec <RCC_SetFlashLatency+0xf0>)
 8009208:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800920c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800920e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8009212:	4a37      	ldr	r2, [pc, #220]	; (80092f0 <RCC_SetFlashLatency+0xf4>)
 8009214:	f107 031c 	add.w	r3, r7, #28
 8009218:	ca07      	ldmia	r2, {r0, r1, r2}
 800921a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800921e:	4b35      	ldr	r3, [pc, #212]	; (80092f4 <RCC_SetFlashLatency+0xf8>)
 8009220:	f107 040c 	add.w	r4, r7, #12
 8009224:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800922a:	2300      	movs	r3, #0
 800922c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009234:	d11c      	bne.n	8009270 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009236:	2300      	movs	r3, #0
 8009238:	643b      	str	r3, [r7, #64]	; 0x40
 800923a:	e015      	b.n	8009268 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800923c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009244:	4413      	add	r3, r2
 8009246:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	429a      	cmp	r2, r3
 800924e:	d808      	bhi.n	8009262 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009258:	4413      	add	r3, r2
 800925a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800925e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8009260:	e022      	b.n	80092a8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009264:	3301      	adds	r3, #1
 8009266:	643b      	str	r3, [r7, #64]	; 0x40
 8009268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800926a:	2b03      	cmp	r3, #3
 800926c:	d9e6      	bls.n	800923c <RCC_SetFlashLatency+0x40>
 800926e:	e01b      	b.n	80092a8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009270:	2300      	movs	r3, #0
 8009272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009274:	e015      	b.n	80092a2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800927e:	4413      	add	r3, r2
 8009280:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	429a      	cmp	r2, r3
 8009288:	d808      	bhi.n	800929c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800928a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009292:	4413      	add	r3, r2
 8009294:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009298:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800929a:	e005      	b.n	80092a8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800929c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929e:	3301      	adds	r3, #1
 80092a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d9e6      	bls.n	8009276 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80092a8:	4b13      	ldr	r3, [pc, #76]	; (80092f8 <RCC_SetFlashLatency+0xfc>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f023 0207 	bic.w	r2, r3, #7
 80092b0:	4911      	ldr	r1, [pc, #68]	; (80092f8 <RCC_SetFlashLatency+0xfc>)
 80092b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b4:	4313      	orrs	r3, r2
 80092b6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80092b8:	f7fb f8fc 	bl	80044b4 <HAL_GetTick>
 80092bc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80092be:	e008      	b.n	80092d2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80092c0:	f7fb f8f8 	bl	80044b4 <HAL_GetTick>
 80092c4:	4602      	mov	r2, r0
 80092c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d901      	bls.n	80092d2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e007      	b.n	80092e2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80092d2:	4b09      	ldr	r3, [pc, #36]	; (80092f8 <RCC_SetFlashLatency+0xfc>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092dc:	429a      	cmp	r2, r3
 80092de:	d1ef      	bne.n	80092c0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	374c      	adds	r7, #76	; 0x4c
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd90      	pop	{r4, r7, pc}
 80092ea:	bf00      	nop
 80092ec:	08016ccc 	.word	0x08016ccc
 80092f0:	08016cdc 	.word	0x08016cdc
 80092f4:	08016ce8 	.word	0x08016ce8
 80092f8:	58004000 	.word	0x58004000

080092fc <LL_RCC_LSE_IsEnabled>:
{
 80092fc:	b480      	push	{r7}
 80092fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8009300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	2b01      	cmp	r3, #1
 800930e:	d101      	bne.n	8009314 <LL_RCC_LSE_IsEnabled+0x18>
 8009310:	2301      	movs	r3, #1
 8009312:	e000      	b.n	8009316 <LL_RCC_LSE_IsEnabled+0x1a>
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <LL_RCC_LSE_IsReady>:
{
 8009320:	b480      	push	{r7}
 8009322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800932c:	f003 0302 	and.w	r3, r3, #2
 8009330:	2b02      	cmp	r3, #2
 8009332:	d101      	bne.n	8009338 <LL_RCC_LSE_IsReady+0x18>
 8009334:	2301      	movs	r3, #1
 8009336:	e000      	b.n	800933a <LL_RCC_LSE_IsReady+0x1a>
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <LL_RCC_SetRFWKPClockSource>:
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800934c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009354:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009358:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4313      	orrs	r3, r2
 8009360:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <LL_RCC_SetSMPSClockSource>:
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8009378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800937c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937e:	f023 0203 	bic.w	r2, r3, #3
 8009382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4313      	orrs	r3, r2
 800938a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <LL_RCC_SetSMPSPrescaler>:
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80093a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80093aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <LL_RCC_SetUSARTClockSource>:
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80093c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093d0:	f023 0203 	bic.w	r2, r3, #3
 80093d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4313      	orrs	r3, r2
 80093dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <LL_RCC_SetLPUARTClockSource>:
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80093f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4313      	orrs	r3, r2
 8009408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <LL_RCC_SetI2CClockSource>:
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8009420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009424:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	091b      	lsrs	r3, r3, #4
 800942c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009430:	43db      	mvns	r3, r3
 8009432:	401a      	ands	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	011b      	lsls	r3, r3, #4
 8009438:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800943c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009440:	4313      	orrs	r3, r2
 8009442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009446:	bf00      	nop
 8009448:	370c      	adds	r7, #12
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr

08009452 <LL_RCC_SetLPTIMClockSource>:
{
 8009452:	b480      	push	{r7}
 8009454:	b083      	sub	sp, #12
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800945a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800945e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	0c1b      	lsrs	r3, r3, #16
 8009466:	041b      	lsls	r3, r3, #16
 8009468:	43db      	mvns	r3, r3
 800946a:	401a      	ands	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	041b      	lsls	r3, r3, #16
 8009470:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009474:	4313      	orrs	r3, r2
 8009476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800947a:	bf00      	nop
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <LL_RCC_SetSAIClockSource>:
{
 8009486:	b480      	push	{r7}
 8009488:	b083      	sub	sp, #12
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800948e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009496:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800949a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80094a6:	bf00      	nop
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <LL_RCC_SetRNGClockSource>:
{
 80094b2:	b480      	push	{r7}
 80094b4:	b083      	sub	sp, #12
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80094ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094c2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80094c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80094d2:	bf00      	nop
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <LL_RCC_SetCLK48ClockSource>:
{
 80094de:	b480      	push	{r7}
 80094e0:	b083      	sub	sp, #12
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80094e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80094f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80094fe:	bf00      	nop
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <LL_RCC_SetUSBClockSource>:
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b082      	sub	sp, #8
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7ff ffe3 	bl	80094de <LL_RCC_SetCLK48ClockSource>
}
 8009518:	bf00      	nop
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <LL_RCC_SetADCClockSource>:
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800952c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009530:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009534:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4313      	orrs	r3, r2
 800953c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <LL_RCC_SetRTCClockSource>:
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800955c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009560:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4313      	orrs	r3, r2
 8009568:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <LL_RCC_GetRTCClockSource>:
{
 8009578:	b480      	push	{r7}
 800957a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800957c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009584:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8009588:	4618      	mov	r0, r3
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <LL_RCC_ForceBackupDomainReset>:
{
 8009592:	b480      	push	{r7}
 8009594:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800959a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800959e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80095aa:	bf00      	nop
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80095b4:	b480      	push	{r7}
 80095b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80095b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80095cc:	bf00      	nop
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <LL_RCC_PLLSAI1_Enable>:
{
 80095d6:	b480      	push	{r7}
 80095d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80095da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80095e8:	6013      	str	r3, [r2, #0]
}
 80095ea:	bf00      	nop
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <LL_RCC_PLLSAI1_Disable>:
{
 80095f4:	b480      	push	{r7}
 80095f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80095f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009602:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009606:	6013      	str	r3, [r2, #0]
}
 8009608:	bf00      	nop
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr

08009612 <LL_RCC_PLLSAI1_IsReady>:
{
 8009612:	b480      	push	{r7}
 8009614:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009624:	d101      	bne.n	800962a <LL_RCC_PLLSAI1_IsReady+0x18>
 8009626:	2301      	movs	r3, #1
 8009628:	e000      	b.n	800962c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr

08009636 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b088      	sub	sp, #32
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800963e:	2300      	movs	r3, #0
 8009640:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009642:	2300      	movs	r3, #0
 8009644:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964e:	2b00      	cmp	r3, #0
 8009650:	d033      	beq.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800965a:	d00c      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800965c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009660:	d802      	bhi.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009662:	2b00      	cmp	r3, #0
 8009664:	d010      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009666:	e017      	b.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009668:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800966c:	d017      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x68>
 800966e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009672:	d016      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8009674:	e010      	b.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8009676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009684:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8009686:	e00d      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3304      	adds	r3, #4
 800968c:	4618      	mov	r0, r3
 800968e:	f000 f947 	bl	8009920 <RCCEx_PLLSAI1_ConfigNP>
 8009692:	4603      	mov	r3, r0
 8009694:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009696:	e005      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	77fb      	strb	r3, [r7, #31]
        break;
 800969c:	e002      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800969e:	bf00      	nop
 80096a0:	e000      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80096a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096a4:	7ffb      	ldrb	r3, [r7, #31]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d105      	bne.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff fee9 	bl	8009486 <LL_RCC_SetSAIClockSource>
 80096b4:	e001      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b6:	7ffb      	ldrb	r3, [r7, #31]
 80096b8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d046      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80096c6:	f7ff ff57 	bl	8009578 <LL_RCC_GetRTCClockSource>
 80096ca:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d0:	69ba      	ldr	r2, [r7, #24]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d03c      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80096d6:	f7fe fc17 	bl	8007f08 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d105      	bne.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7ff ff31 	bl	800954c <LL_RCC_SetRTCClockSource>
 80096ea:	e02e      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80096ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096f4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80096f6:	f7ff ff4c 	bl	8009592 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80096fa:	f7ff ff5b 	bl	80095b4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009708:	4313      	orrs	r3, r2
 800970a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800970c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8009716:	f7ff fdf1 	bl	80092fc <LL_RCC_LSE_IsEnabled>
 800971a:	4603      	mov	r3, r0
 800971c:	2b01      	cmp	r3, #1
 800971e:	d114      	bne.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009720:	f7fa fec8 	bl	80044b4 <HAL_GetTick>
 8009724:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8009726:	e00b      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009728:	f7fa fec4 	bl	80044b4 <HAL_GetTick>
 800972c:	4602      	mov	r2, r0
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	f241 3288 	movw	r2, #5000	; 0x1388
 8009736:	4293      	cmp	r3, r2
 8009738:	d902      	bls.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	77fb      	strb	r3, [r7, #31]
              break;
 800973e:	e004      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8009740:	f7ff fdee 	bl	8009320 <LL_RCC_LSE_IsReady>
 8009744:	4603      	mov	r3, r0
 8009746:	2b01      	cmp	r3, #1
 8009748:	d1ee      	bne.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800974a:	7ffb      	ldrb	r3, [r7, #31]
 800974c:	77bb      	strb	r3, [r7, #30]
 800974e:	e001      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009750:	7ffb      	ldrb	r3, [r7, #31]
 8009752:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0301 	and.w	r3, r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	d004      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	4618      	mov	r0, r3
 8009766:	f7ff fe2b 	bl	80093c0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 0302 	and.w	r3, r3, #2
 8009772:	2b00      	cmp	r3, #0
 8009774:	d004      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	69db      	ldr	r3, [r3, #28]
 800977a:	4618      	mov	r0, r3
 800977c:	f7ff fe36 	bl	80093ec <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f003 0310 	and.w	r3, r3, #16
 8009788:	2b00      	cmp	r3, #0
 800978a:	d004      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009790:	4618      	mov	r0, r3
 8009792:	f7ff fe5e 	bl	8009452 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0320 	and.w	r3, r3, #32
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d004      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7ff fe53 	bl	8009452 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0304 	and.w	r3, r3, #4
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d004      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a1b      	ldr	r3, [r3, #32]
 80097bc:	4618      	mov	r0, r3
 80097be:	f7ff fe2b 	bl	8009418 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 0308 	and.w	r3, r3, #8
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d004      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7ff fe20 	bl	8009418 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d022      	beq.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7ff fe8e 	bl	800950a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097f6:	d107      	bne.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80097f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009806:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009810:	d10b      	bne.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	3304      	adds	r3, #4
 8009816:	4618      	mov	r0, r3
 8009818:	f000 f8dd 	bl	80099d6 <RCCEx_PLLSAI1_ConfigNQ>
 800981c:	4603      	mov	r3, r0
 800981e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8009820:	7ffb      	ldrb	r3, [r7, #31]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8009826:	7ffb      	ldrb	r3, [r7, #31]
 8009828:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009832:	2b00      	cmp	r3, #0
 8009834:	d02b      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800983e:	d008      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009848:	d003      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984e:	2b00      	cmp	r3, #0
 8009850:	d105      	bne.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x228>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009856:	4618      	mov	r0, r3
 8009858:	f7ff fe2b 	bl	80094b2 <LL_RCC_SetRNGClockSource>
 800985c:	e00a      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	2000      	movs	r0, #0
 800986a:	f7ff fe22 	bl	80094b2 <LL_RCC_SetRNGClockSource>
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7ff fe35 	bl	80094de <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009878:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800987c:	d107      	bne.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800987e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009888:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800988c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009896:	2b00      	cmp	r3, #0
 8009898:	d022      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800989e:	4618      	mov	r0, r3
 80098a0:	f7ff fe3e 	bl	8009520 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098ac:	d107      	bne.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80098ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80098b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098bc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098c6:	d10b      	bne.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3304      	adds	r3, #4
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 f8dd 	bl	8009a8c <RCCEx_PLLSAI1_ConfigNR>
 80098d2:	4603      	mov	r3, r0
 80098d4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80098d6:	7ffb      	ldrb	r3, [r7, #31]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80098dc:	7ffb      	ldrb	r3, [r7, #31]
 80098de:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7ff fd27 	bl	8009344 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d009      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff fd46 	bl	8009398 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009910:	4618      	mov	r0, r3
 8009912:	f7ff fd2d 	bl	8009370 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8009916:	7fbb      	ldrb	r3, [r7, #30]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3720      	adds	r7, #32
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800992c:	f7ff fe62 	bl	80095f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009930:	f7fa fdc0 	bl	80044b4 <HAL_GetTick>
 8009934:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009936:	e009      	b.n	800994c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009938:	f7fa fdbc 	bl	80044b4 <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	2b02      	cmp	r3, #2
 8009944:	d902      	bls.n	800994c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	73fb      	strb	r3, [r7, #15]
      break;
 800994a:	e004      	b.n	8009956 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800994c:	f7ff fe61 	bl	8009612 <LL_RCC_PLLSAI1_IsReady>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1f0      	bne.n	8009938 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009956:	7bfb      	ldrb	r3, [r7, #15]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d137      	bne.n	80099cc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800995c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	021b      	lsls	r3, r3, #8
 800996c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009970:	4313      	orrs	r3, r2
 8009972:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009986:	4313      	orrs	r3, r2
 8009988:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800998a:	f7ff fe24 	bl	80095d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800998e:	f7fa fd91 	bl	80044b4 <HAL_GetTick>
 8009992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009994:	e009      	b.n	80099aa <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009996:	f7fa fd8d 	bl	80044b4 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d902      	bls.n	80099aa <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	73fb      	strb	r3, [r7, #15]
        break;
 80099a8:	e004      	b.n	80099b4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80099aa:	f7ff fe32 	bl	8009612 <LL_RCC_PLLSAI1_IsReady>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d1f0      	bne.n	8009996 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d108      	bne.n	80099cc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80099ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099be:	691a      	ldr	r2, [r3, #16]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80099c8:	4313      	orrs	r3, r2
 80099ca:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80099e2:	f7ff fe07 	bl	80095f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80099e6:	f7fa fd65 	bl	80044b4 <HAL_GetTick>
 80099ea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80099ec:	e009      	b.n	8009a02 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80099ee:	f7fa fd61 	bl	80044b4 <HAL_GetTick>
 80099f2:	4602      	mov	r2, r0
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d902      	bls.n	8009a02 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80099fc:	2303      	movs	r3, #3
 80099fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009a00:	e004      	b.n	8009a0c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009a02:	f7ff fe06 	bl	8009612 <LL_RCC_PLLSAI1_IsReady>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1f0      	bne.n	80099ee <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d137      	bne.n	8009a82 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	021b      	lsls	r3, r3, #8
 8009a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a26:	4313      	orrs	r3, r2
 8009a28:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8009a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009a40:	f7ff fdc9 	bl	80095d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a44:	f7fa fd36 	bl	80044b4 <HAL_GetTick>
 8009a48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009a4a:	e009      	b.n	8009a60 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009a4c:	f7fa fd32 	bl	80044b4 <HAL_GetTick>
 8009a50:	4602      	mov	r2, r0
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d902      	bls.n	8009a60 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	73fb      	strb	r3, [r7, #15]
        break;
 8009a5e:	e004      	b.n	8009a6a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009a60:	f7ff fdd7 	bl	8009612 <LL_RCC_PLLSAI1_IsReady>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d1f0      	bne.n	8009a4c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d108      	bne.n	8009a82 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a74:	691a      	ldr	r2, [r3, #16]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009a98:	f7ff fdac 	bl	80095f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a9c:	f7fa fd0a 	bl	80044b4 <HAL_GetTick>
 8009aa0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009aa2:	e009      	b.n	8009ab8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009aa4:	f7fa fd06 	bl	80044b4 <HAL_GetTick>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d902      	bls.n	8009ab8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab6:	e004      	b.n	8009ac2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009ab8:	f7ff fdab 	bl	8009612 <LL_RCC_PLLSAI1_IsReady>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1f0      	bne.n	8009aa4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d137      	bne.n	8009b38 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	021b      	lsls	r3, r3, #8
 8009ad8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009adc:	4313      	orrs	r3, r2
 8009ade:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8009ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009af2:	4313      	orrs	r3, r2
 8009af4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009af6:	f7ff fd6e 	bl	80095d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009afa:	f7fa fcdb 	bl	80044b4 <HAL_GetTick>
 8009afe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009b00:	e009      	b.n	8009b16 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009b02:	f7fa fcd7 	bl	80044b4 <HAL_GetTick>
 8009b06:	4602      	mov	r2, r0
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d902      	bls.n	8009b16 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	73fb      	strb	r3, [r7, #15]
        break;
 8009b14:	e004      	b.n	8009b20 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009b16:	f7ff fd7c 	bl	8009612 <LL_RCC_PLLSAI1_IsReady>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d1f0      	bne.n	8009b02 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8009b20:	7bfb      	ldrb	r3, [r7, #15]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d108      	bne.n	8009b38 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b2a:	691a      	ldr	r2, [r3, #16]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b34:	4313      	orrs	r3, r2
 8009b36:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b082      	sub	sp, #8
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d101      	bne.n	8009b54 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e090      	b.n	8009c76 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d106      	bne.n	8009b6e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7fa f8fb 	bl	8003d64 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2202      	movs	r2, #2
 8009b72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	22ca      	movs	r2, #202	; 0xca
 8009b7c:	625a      	str	r2, [r3, #36]	; 0x24
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2253      	movs	r2, #83	; 0x53
 8009b84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f89f 	bl	8009cca <RTC_EnterInitMode>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d009      	beq.n	8009ba6 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	22ff      	movs	r2, #255	; 0xff
 8009b98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2204      	movs	r2, #4
 8009b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e067      	b.n	8009c76 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	6812      	ldr	r2, [r2, #0]
 8009bb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bb8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6899      	ldr	r1, [r3, #8]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	431a      	orrs	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	431a      	orrs	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	430a      	orrs	r2, r1
 8009bd6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	68d2      	ldr	r2, [r2, #12]
 8009be0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6919      	ldr	r1, [r3, #16]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	041a      	lsls	r2, r3, #16
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68da      	ldr	r2, [r3, #12]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c04:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f022 0203 	bic.w	r2, r2, #3
 8009c14:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	69da      	ldr	r2, [r3, #28]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	431a      	orrs	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	f003 0320 	and.w	r3, r3, #32
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d113      	bne.n	8009c64 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f81e 	bl	8009c7e <HAL_RTC_WaitForSynchro>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00d      	beq.n	8009c64 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	22ff      	movs	r2, #255	; 0xff
 8009c4e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2204      	movs	r2, #4
 8009c54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e008      	b.n	8009c76 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	22ff      	movs	r2, #255	; 0xff
 8009c6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8009c74:	2300      	movs	r3, #0
  }
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b084      	sub	sp, #16
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68da      	ldr	r2, [r3, #12]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009c94:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009c96:	f7fa fc0d 	bl	80044b4 <HAL_GetTick>
 8009c9a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009c9c:	e009      	b.n	8009cb2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009c9e:	f7fa fc09 	bl	80044b4 <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cac:	d901      	bls.n	8009cb2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e007      	b.n	8009cc2 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	f003 0320 	and.w	r3, r3, #32
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d0ee      	beq.n	8009c9e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b084      	sub	sp, #16
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d119      	bne.n	8009d14 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009cea:	f7fa fbe3 	bl	80044b4 <HAL_GetTick>
 8009cee:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009cf0:	e009      	b.n	8009d06 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8009cf2:	f7fa fbdf 	bl	80044b4 <HAL_GetTick>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d00:	d901      	bls.n	8009d06 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009d02:	2303      	movs	r3, #3
 8009d04:	e007      	b.n	8009d16 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d0ee      	beq.n	8009cf2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b082      	sub	sp, #8
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e049      	b.n	8009dc4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d106      	bne.n	8009d4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7fa faff 	bl	8004348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2202      	movs	r2, #2
 8009d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	3304      	adds	r3, #4
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	4610      	mov	r0, r2
 8009d5e:	f000 fdc7 	bl	800a8f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d001      	beq.n	8009de4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	e02e      	b.n	8009e42 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2202      	movs	r2, #2
 8009de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a17      	ldr	r2, [pc, #92]	; (8009e50 <HAL_TIM_Base_Start+0x84>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d004      	beq.n	8009e00 <HAL_TIM_Base_Start+0x34>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dfe:	d115      	bne.n	8009e2c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	689a      	ldr	r2, [r3, #8]
 8009e06:	4b13      	ldr	r3, [pc, #76]	; (8009e54 <HAL_TIM_Base_Start+0x88>)
 8009e08:	4013      	ands	r3, r2
 8009e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b06      	cmp	r3, #6
 8009e10:	d015      	beq.n	8009e3e <HAL_TIM_Base_Start+0x72>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e18:	d011      	beq.n	8009e3e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f042 0201 	orr.w	r2, r2, #1
 8009e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e2a:	e008      	b.n	8009e3e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f042 0201 	orr.w	r2, r2, #1
 8009e3a:	601a      	str	r2, [r3, #0]
 8009e3c:	e000      	b.n	8009e40 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	40012c00 	.word	0x40012c00
 8009e54:	00010007 	.word	0x00010007

08009e58 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	6a1a      	ldr	r2, [r3, #32]
 8009e66:	f241 1311 	movw	r3, #4369	; 0x1111
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10f      	bne.n	8009e90 <HAL_TIM_Base_Stop+0x38>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6a1a      	ldr	r2, [r3, #32]
 8009e76:	f240 4344 	movw	r3, #1092	; 0x444
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d107      	bne.n	8009e90 <HAL_TIM_Base_Stop+0x38>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f022 0201 	bic.w	r2, r2, #1
 8009e8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr
	...

08009ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d001      	beq.n	8009ec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e036      	b.n	8009f2e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68da      	ldr	r2, [r3, #12]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f042 0201 	orr.w	r2, r2, #1
 8009ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a17      	ldr	r2, [pc, #92]	; (8009f3c <HAL_TIM_Base_Start_IT+0x94>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d004      	beq.n	8009eec <HAL_TIM_Base_Start_IT+0x44>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eea:	d115      	bne.n	8009f18 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	689a      	ldr	r2, [r3, #8]
 8009ef2:	4b13      	ldr	r3, [pc, #76]	; (8009f40 <HAL_TIM_Base_Start_IT+0x98>)
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2b06      	cmp	r3, #6
 8009efc:	d015      	beq.n	8009f2a <HAL_TIM_Base_Start_IT+0x82>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f04:	d011      	beq.n	8009f2a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f042 0201 	orr.w	r2, r2, #1
 8009f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f16:	e008      	b.n	8009f2a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f042 0201 	orr.w	r2, r2, #1
 8009f26:	601a      	str	r2, [r3, #0]
 8009f28:	e000      	b.n	8009f2c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3714      	adds	r7, #20
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	40012c00 	.word	0x40012c00
 8009f40:	00010007 	.word	0x00010007

08009f44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d101      	bne.n	8009f56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e049      	b.n	8009fea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d106      	bne.n	8009f70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f841 	bl	8009ff2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2202      	movs	r2, #2
 8009f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3304      	adds	r3, #4
 8009f80:	4619      	mov	r1, r3
 8009f82:	4610      	mov	r0, r2
 8009f84:	f000 fcb4 	bl	800a8f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b083      	sub	sp, #12
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009ffa:	bf00      	nop
 8009ffc:	370c      	adds	r7, #12
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
	...

0800a008 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d109      	bne.n	800a02c <HAL_TIM_PWM_Start+0x24>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	2b01      	cmp	r3, #1
 800a022:	bf14      	ite	ne
 800a024:	2301      	movne	r3, #1
 800a026:	2300      	moveq	r3, #0
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	e03c      	b.n	800a0a6 <HAL_TIM_PWM_Start+0x9e>
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	2b04      	cmp	r3, #4
 800a030:	d109      	bne.n	800a046 <HAL_TIM_PWM_Start+0x3e>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	bf14      	ite	ne
 800a03e:	2301      	movne	r3, #1
 800a040:	2300      	moveq	r3, #0
 800a042:	b2db      	uxtb	r3, r3
 800a044:	e02f      	b.n	800a0a6 <HAL_TIM_PWM_Start+0x9e>
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	2b08      	cmp	r3, #8
 800a04a:	d109      	bne.n	800a060 <HAL_TIM_PWM_Start+0x58>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a052:	b2db      	uxtb	r3, r3
 800a054:	2b01      	cmp	r3, #1
 800a056:	bf14      	ite	ne
 800a058:	2301      	movne	r3, #1
 800a05a:	2300      	moveq	r3, #0
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	e022      	b.n	800a0a6 <HAL_TIM_PWM_Start+0x9e>
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2b0c      	cmp	r3, #12
 800a064:	d109      	bne.n	800a07a <HAL_TIM_PWM_Start+0x72>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b01      	cmp	r3, #1
 800a070:	bf14      	ite	ne
 800a072:	2301      	movne	r3, #1
 800a074:	2300      	moveq	r3, #0
 800a076:	b2db      	uxtb	r3, r3
 800a078:	e015      	b.n	800a0a6 <HAL_TIM_PWM_Start+0x9e>
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	2b10      	cmp	r3, #16
 800a07e:	d109      	bne.n	800a094 <HAL_TIM_PWM_Start+0x8c>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a086:	b2db      	uxtb	r3, r3
 800a088:	2b01      	cmp	r3, #1
 800a08a:	bf14      	ite	ne
 800a08c:	2301      	movne	r3, #1
 800a08e:	2300      	moveq	r3, #0
 800a090:	b2db      	uxtb	r3, r3
 800a092:	e008      	b.n	800a0a6 <HAL_TIM_PWM_Start+0x9e>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	bf14      	ite	ne
 800a0a0:	2301      	movne	r3, #1
 800a0a2:	2300      	moveq	r3, #0
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e079      	b.n	800a1a2 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d104      	bne.n	800a0be <HAL_TIM_PWM_Start+0xb6>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2202      	movs	r2, #2
 800a0b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0bc:	e023      	b.n	800a106 <HAL_TIM_PWM_Start+0xfe>
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b04      	cmp	r3, #4
 800a0c2:	d104      	bne.n	800a0ce <HAL_TIM_PWM_Start+0xc6>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0cc:	e01b      	b.n	800a106 <HAL_TIM_PWM_Start+0xfe>
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	2b08      	cmp	r3, #8
 800a0d2:	d104      	bne.n	800a0de <HAL_TIM_PWM_Start+0xd6>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2202      	movs	r2, #2
 800a0d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0dc:	e013      	b.n	800a106 <HAL_TIM_PWM_Start+0xfe>
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	2b0c      	cmp	r3, #12
 800a0e2:	d104      	bne.n	800a0ee <HAL_TIM_PWM_Start+0xe6>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0ec:	e00b      	b.n	800a106 <HAL_TIM_PWM_Start+0xfe>
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	2b10      	cmp	r3, #16
 800a0f2:	d104      	bne.n	800a0fe <HAL_TIM_PWM_Start+0xf6>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0fc:	e003      	b.n	800a106 <HAL_TIM_PWM_Start+0xfe>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2202      	movs	r2, #2
 800a102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2201      	movs	r2, #1
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 ff6c 	bl	800afec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a24      	ldr	r2, [pc, #144]	; (800a1ac <HAL_TIM_PWM_Start+0x1a4>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d009      	beq.n	800a132 <HAL_TIM_PWM_Start+0x12a>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a23      	ldr	r2, [pc, #140]	; (800a1b0 <HAL_TIM_PWM_Start+0x1a8>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d004      	beq.n	800a132 <HAL_TIM_PWM_Start+0x12a>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a21      	ldr	r2, [pc, #132]	; (800a1b4 <HAL_TIM_PWM_Start+0x1ac>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d101      	bne.n	800a136 <HAL_TIM_PWM_Start+0x12e>
 800a132:	2301      	movs	r3, #1
 800a134:	e000      	b.n	800a138 <HAL_TIM_PWM_Start+0x130>
 800a136:	2300      	movs	r3, #0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d007      	beq.n	800a14c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a14a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a16      	ldr	r2, [pc, #88]	; (800a1ac <HAL_TIM_PWM_Start+0x1a4>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d004      	beq.n	800a160 <HAL_TIM_PWM_Start+0x158>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a15e:	d115      	bne.n	800a18c <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	689a      	ldr	r2, [r3, #8]
 800a166:	4b14      	ldr	r3, [pc, #80]	; (800a1b8 <HAL_TIM_PWM_Start+0x1b0>)
 800a168:	4013      	ands	r3, r2
 800a16a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2b06      	cmp	r3, #6
 800a170:	d015      	beq.n	800a19e <HAL_TIM_PWM_Start+0x196>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a178:	d011      	beq.n	800a19e <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f042 0201 	orr.w	r2, r2, #1
 800a188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a18a:	e008      	b.n	800a19e <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f042 0201 	orr.w	r2, r2, #1
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	e000      	b.n	800a1a0 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a19e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	40012c00 	.word	0x40012c00
 800a1b0:	40014400 	.word	0x40014400
 800a1b4:	40014800 	.word	0x40014800
 800a1b8:	00010007 	.word	0x00010007

0800a1bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 ff0c 	bl	800afec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a39      	ldr	r2, [pc, #228]	; (800a2c0 <HAL_TIM_PWM_Stop+0x104>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d009      	beq.n	800a1f2 <HAL_TIM_PWM_Stop+0x36>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a38      	ldr	r2, [pc, #224]	; (800a2c4 <HAL_TIM_PWM_Stop+0x108>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d004      	beq.n	800a1f2 <HAL_TIM_PWM_Stop+0x36>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a36      	ldr	r2, [pc, #216]	; (800a2c8 <HAL_TIM_PWM_Stop+0x10c>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d101      	bne.n	800a1f6 <HAL_TIM_PWM_Stop+0x3a>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e000      	b.n	800a1f8 <HAL_TIM_PWM_Stop+0x3c>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d017      	beq.n	800a22c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	6a1a      	ldr	r2, [r3, #32]
 800a202:	f241 1311 	movw	r3, #4369	; 0x1111
 800a206:	4013      	ands	r3, r2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10f      	bne.n	800a22c <HAL_TIM_PWM_Stop+0x70>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6a1a      	ldr	r2, [r3, #32]
 800a212:	f240 4344 	movw	r3, #1092	; 0x444
 800a216:	4013      	ands	r3, r2
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d107      	bne.n	800a22c <HAL_TIM_PWM_Stop+0x70>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a22a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6a1a      	ldr	r2, [r3, #32]
 800a232:	f241 1311 	movw	r3, #4369	; 0x1111
 800a236:	4013      	ands	r3, r2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10f      	bne.n	800a25c <HAL_TIM_PWM_Stop+0xa0>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	6a1a      	ldr	r2, [r3, #32]
 800a242:	f240 4344 	movw	r3, #1092	; 0x444
 800a246:	4013      	ands	r3, r2
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d107      	bne.n	800a25c <HAL_TIM_PWM_Stop+0xa0>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f022 0201 	bic.w	r2, r2, #1
 800a25a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d104      	bne.n	800a26c <HAL_TIM_PWM_Stop+0xb0>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a26a:	e023      	b.n	800a2b4 <HAL_TIM_PWM_Stop+0xf8>
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2b04      	cmp	r3, #4
 800a270:	d104      	bne.n	800a27c <HAL_TIM_PWM_Stop+0xc0>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a27a:	e01b      	b.n	800a2b4 <HAL_TIM_PWM_Stop+0xf8>
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	2b08      	cmp	r3, #8
 800a280:	d104      	bne.n	800a28c <HAL_TIM_PWM_Stop+0xd0>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a28a:	e013      	b.n	800a2b4 <HAL_TIM_PWM_Stop+0xf8>
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2b0c      	cmp	r3, #12
 800a290:	d104      	bne.n	800a29c <HAL_TIM_PWM_Stop+0xe0>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a29a:	e00b      	b.n	800a2b4 <HAL_TIM_PWM_Stop+0xf8>
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2b10      	cmp	r3, #16
 800a2a0:	d104      	bne.n	800a2ac <HAL_TIM_PWM_Stop+0xf0>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2aa:	e003      	b.n	800a2b4 <HAL_TIM_PWM_Stop+0xf8>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	40012c00 	.word	0x40012c00
 800a2c4:	40014400 	.word	0x40014400
 800a2c8:	40014800 	.word	0x40014800

0800a2cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	f003 0302 	and.w	r3, r3, #2
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d122      	bne.n	800a328 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	f003 0302 	and.w	r3, r3, #2
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d11b      	bne.n	800a328 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f06f 0202 	mvn.w	r2, #2
 800a2f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d003      	beq.n	800a316 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 facf 	bl	800a8b2 <HAL_TIM_IC_CaptureCallback>
 800a314:	e005      	b.n	800a322 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 fac1 	bl	800a89e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fad2 	bl	800a8c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	f003 0304 	and.w	r3, r3, #4
 800a332:	2b04      	cmp	r3, #4
 800a334:	d122      	bne.n	800a37c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	f003 0304 	and.w	r3, r3, #4
 800a340:	2b04      	cmp	r3, #4
 800a342:	d11b      	bne.n	800a37c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f06f 0204 	mvn.w	r2, #4
 800a34c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2202      	movs	r2, #2
 800a352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	699b      	ldr	r3, [r3, #24]
 800a35a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d003      	beq.n	800a36a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 faa5 	bl	800a8b2 <HAL_TIM_IC_CaptureCallback>
 800a368:	e005      	b.n	800a376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fa97 	bl	800a89e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 faa8 	bl	800a8c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	f003 0308 	and.w	r3, r3, #8
 800a386:	2b08      	cmp	r3, #8
 800a388:	d122      	bne.n	800a3d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	f003 0308 	and.w	r3, r3, #8
 800a394:	2b08      	cmp	r3, #8
 800a396:	d11b      	bne.n	800a3d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f06f 0208 	mvn.w	r2, #8
 800a3a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2204      	movs	r2, #4
 800a3a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	69db      	ldr	r3, [r3, #28]
 800a3ae:	f003 0303 	and.w	r3, r3, #3
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d003      	beq.n	800a3be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 fa7b 	bl	800a8b2 <HAL_TIM_IC_CaptureCallback>
 800a3bc:	e005      	b.n	800a3ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 fa6d 	bl	800a89e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fa7e 	bl	800a8c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	f003 0310 	and.w	r3, r3, #16
 800a3da:	2b10      	cmp	r3, #16
 800a3dc:	d122      	bne.n	800a424 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	f003 0310 	and.w	r3, r3, #16
 800a3e8:	2b10      	cmp	r3, #16
 800a3ea:	d11b      	bne.n	800a424 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f06f 0210 	mvn.w	r2, #16
 800a3f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2208      	movs	r2, #8
 800a3fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	69db      	ldr	r3, [r3, #28]
 800a402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fa51 	bl	800a8b2 <HAL_TIM_IC_CaptureCallback>
 800a410:	e005      	b.n	800a41e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 fa43 	bl	800a89e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fa54 	bl	800a8c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	f003 0301 	and.w	r3, r3, #1
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d10e      	bne.n	800a450 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d107      	bne.n	800a450 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f06f 0201 	mvn.w	r2, #1
 800a448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7f9 f9d0 	bl	80037f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a45a:	2b80      	cmp	r3, #128	; 0x80
 800a45c:	d10e      	bne.n	800a47c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a468:	2b80      	cmp	r3, #128	; 0x80
 800a46a:	d107      	bne.n	800a47c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fed8 	bl	800b22c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a48a:	d10e      	bne.n	800a4aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a496:	2b80      	cmp	r3, #128	; 0x80
 800a498:	d107      	bne.n	800a4aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a4a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fecb 	bl	800b240 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b4:	2b40      	cmp	r3, #64	; 0x40
 800a4b6:	d10e      	bne.n	800a4d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4c2:	2b40      	cmp	r3, #64	; 0x40
 800a4c4:	d107      	bne.n	800a4d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a4ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fa02 	bl	800a8da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	f003 0320 	and.w	r3, r3, #32
 800a4e0:	2b20      	cmp	r3, #32
 800a4e2:	d10e      	bne.n	800a502 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	f003 0320 	and.w	r3, r3, #32
 800a4ee:	2b20      	cmp	r3, #32
 800a4f0:	d107      	bne.n	800a502 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f06f 0220 	mvn.w	r2, #32
 800a4fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 fe8b 	bl	800b218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a502:	bf00      	nop
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
	...

0800a50c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d101      	bne.n	800a526 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a522:	2302      	movs	r3, #2
 800a524:	e0fd      	b.n	800a722 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b14      	cmp	r3, #20
 800a532:	f200 80f0 	bhi.w	800a716 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a536:	a201      	add	r2, pc, #4	; (adr r2, 800a53c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a53c:	0800a591 	.word	0x0800a591
 800a540:	0800a717 	.word	0x0800a717
 800a544:	0800a717 	.word	0x0800a717
 800a548:	0800a717 	.word	0x0800a717
 800a54c:	0800a5d1 	.word	0x0800a5d1
 800a550:	0800a717 	.word	0x0800a717
 800a554:	0800a717 	.word	0x0800a717
 800a558:	0800a717 	.word	0x0800a717
 800a55c:	0800a613 	.word	0x0800a613
 800a560:	0800a717 	.word	0x0800a717
 800a564:	0800a717 	.word	0x0800a717
 800a568:	0800a717 	.word	0x0800a717
 800a56c:	0800a653 	.word	0x0800a653
 800a570:	0800a717 	.word	0x0800a717
 800a574:	0800a717 	.word	0x0800a717
 800a578:	0800a717 	.word	0x0800a717
 800a57c:	0800a695 	.word	0x0800a695
 800a580:	0800a717 	.word	0x0800a717
 800a584:	0800a717 	.word	0x0800a717
 800a588:	0800a717 	.word	0x0800a717
 800a58c:	0800a6d5 	.word	0x0800a6d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68b9      	ldr	r1, [r7, #8]
 800a596:	4618      	mov	r0, r3
 800a598:	f000 fa0e 	bl	800a9b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	699a      	ldr	r2, [r3, #24]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f042 0208 	orr.w	r2, r2, #8
 800a5aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	699a      	ldr	r2, [r3, #24]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f022 0204 	bic.w	r2, r2, #4
 800a5ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6999      	ldr	r1, [r3, #24]
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	691a      	ldr	r2, [r3, #16]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	619a      	str	r2, [r3, #24]
      break;
 800a5ce:	e0a3      	b.n	800a718 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68b9      	ldr	r1, [r7, #8]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 fa6a 	bl	800aab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	699a      	ldr	r2, [r3, #24]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	699a      	ldr	r2, [r3, #24]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6999      	ldr	r1, [r3, #24]
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	021a      	lsls	r2, r3, #8
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	430a      	orrs	r2, r1
 800a60e:	619a      	str	r2, [r3, #24]
      break;
 800a610:	e082      	b.n	800a718 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68b9      	ldr	r1, [r7, #8]
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 fac3 	bl	800aba4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	69da      	ldr	r2, [r3, #28]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f042 0208 	orr.w	r2, r2, #8
 800a62c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	69da      	ldr	r2, [r3, #28]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f022 0204 	bic.w	r2, r2, #4
 800a63c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	69d9      	ldr	r1, [r3, #28]
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	691a      	ldr	r2, [r3, #16]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	430a      	orrs	r2, r1
 800a64e:	61da      	str	r2, [r3, #28]
      break;
 800a650:	e062      	b.n	800a718 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68b9      	ldr	r1, [r7, #8]
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 fb1b 	bl	800ac94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	69da      	ldr	r2, [r3, #28]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a66c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	69da      	ldr	r2, [r3, #28]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a67c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69d9      	ldr	r1, [r3, #28]
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	021a      	lsls	r2, r3, #8
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	430a      	orrs	r2, r1
 800a690:	61da      	str	r2, [r3, #28]
      break;
 800a692:	e041      	b.n	800a718 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68b9      	ldr	r1, [r7, #8]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 fb58 	bl	800ad50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f042 0208 	orr.w	r2, r2, #8
 800a6ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f022 0204 	bic.w	r2, r2, #4
 800a6be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	691a      	ldr	r2, [r3, #16]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a6d2:	e021      	b.n	800a718 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68b9      	ldr	r1, [r7, #8]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 fb90 	bl	800ae00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	021a      	lsls	r2, r3, #8
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	430a      	orrs	r2, r1
 800a712:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a714:	e000      	b.n	800a718 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a716:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop

0800a72c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d101      	bne.n	800a744 <HAL_TIM_ConfigClockSource+0x18>
 800a740:	2302      	movs	r3, #2
 800a742:	e0a8      	b.n	800a896 <HAL_TIM_ConfigClockSource+0x16a>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2202      	movs	r2, #2
 800a750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a762:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a766:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a76e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b40      	cmp	r3, #64	; 0x40
 800a77e:	d067      	beq.n	800a850 <HAL_TIM_ConfigClockSource+0x124>
 800a780:	2b40      	cmp	r3, #64	; 0x40
 800a782:	d80b      	bhi.n	800a79c <HAL_TIM_ConfigClockSource+0x70>
 800a784:	2b10      	cmp	r3, #16
 800a786:	d073      	beq.n	800a870 <HAL_TIM_ConfigClockSource+0x144>
 800a788:	2b10      	cmp	r3, #16
 800a78a:	d802      	bhi.n	800a792 <HAL_TIM_ConfigClockSource+0x66>
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d06f      	beq.n	800a870 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a790:	e078      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800a792:	2b20      	cmp	r3, #32
 800a794:	d06c      	beq.n	800a870 <HAL_TIM_ConfigClockSource+0x144>
 800a796:	2b30      	cmp	r3, #48	; 0x30
 800a798:	d06a      	beq.n	800a870 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800a79a:	e073      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800a79c:	2b70      	cmp	r3, #112	; 0x70
 800a79e:	d00d      	beq.n	800a7bc <HAL_TIM_ConfigClockSource+0x90>
 800a7a0:	2b70      	cmp	r3, #112	; 0x70
 800a7a2:	d804      	bhi.n	800a7ae <HAL_TIM_ConfigClockSource+0x82>
 800a7a4:	2b50      	cmp	r3, #80	; 0x50
 800a7a6:	d033      	beq.n	800a810 <HAL_TIM_ConfigClockSource+0xe4>
 800a7a8:	2b60      	cmp	r3, #96	; 0x60
 800a7aa:	d041      	beq.n	800a830 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800a7ac:	e06a      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800a7ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7b2:	d066      	beq.n	800a882 <HAL_TIM_ConfigClockSource+0x156>
 800a7b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7b8:	d017      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800a7ba:	e063      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6818      	ldr	r0, [r3, #0]
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	6899      	ldr	r1, [r3, #8]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	685a      	ldr	r2, [r3, #4]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	f000 fbee 	bl	800afac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a7de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	609a      	str	r2, [r3, #8]
      break;
 800a7e8:	e04c      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6818      	ldr	r0, [r3, #0]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	6899      	ldr	r1, [r3, #8]
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	685a      	ldr	r2, [r3, #4]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	f000 fbd7 	bl	800afac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	689a      	ldr	r2, [r3, #8]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a80c:	609a      	str	r2, [r3, #8]
      break;
 800a80e:	e039      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6818      	ldr	r0, [r3, #0]
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	6859      	ldr	r1, [r3, #4]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	461a      	mov	r2, r3
 800a81e:	f000 fb49 	bl	800aeb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2150      	movs	r1, #80	; 0x50
 800a828:	4618      	mov	r0, r3
 800a82a:	f000 fba2 	bl	800af72 <TIM_ITRx_SetConfig>
      break;
 800a82e:	e029      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6818      	ldr	r0, [r3, #0]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	6859      	ldr	r1, [r3, #4]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	461a      	mov	r2, r3
 800a83e:	f000 fb68 	bl	800af12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2160      	movs	r1, #96	; 0x60
 800a848:	4618      	mov	r0, r3
 800a84a:	f000 fb92 	bl	800af72 <TIM_ITRx_SetConfig>
      break;
 800a84e:	e019      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6818      	ldr	r0, [r3, #0]
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	6859      	ldr	r1, [r3, #4]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	461a      	mov	r2, r3
 800a85e:	f000 fb29 	bl	800aeb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2140      	movs	r1, #64	; 0x40
 800a868:	4618      	mov	r0, r3
 800a86a:	f000 fb82 	bl	800af72 <TIM_ITRx_SetConfig>
      break;
 800a86e:	e009      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4619      	mov	r1, r3
 800a87a:	4610      	mov	r0, r2
 800a87c:	f000 fb79 	bl	800af72 <TIM_ITRx_SetConfig>
        break;
 800a880:	e000      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800a882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b083      	sub	sp, #12
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8a6:	bf00      	nop
 800a8a8:	370c      	adds	r7, #12
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b083      	sub	sp, #12
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a8ba:	bf00      	nop
 800a8bc:	370c      	adds	r7, #12
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b083      	sub	sp, #12
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8ce:	bf00      	nop
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b083      	sub	sp, #12
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8e2:	bf00      	nop
 800a8e4:	370c      	adds	r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
	...

0800a8f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a2a      	ldr	r2, [pc, #168]	; (800a9ac <TIM_Base_SetConfig+0xbc>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d003      	beq.n	800a910 <TIM_Base_SetConfig+0x20>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a90e:	d108      	bne.n	800a922 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	4313      	orrs	r3, r2
 800a920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a21      	ldr	r2, [pc, #132]	; (800a9ac <TIM_Base_SetConfig+0xbc>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d00b      	beq.n	800a942 <TIM_Base_SetConfig+0x52>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a930:	d007      	beq.n	800a942 <TIM_Base_SetConfig+0x52>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a1e      	ldr	r2, [pc, #120]	; (800a9b0 <TIM_Base_SetConfig+0xc0>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d003      	beq.n	800a942 <TIM_Base_SetConfig+0x52>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a1d      	ldr	r2, [pc, #116]	; (800a9b4 <TIM_Base_SetConfig+0xc4>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d108      	bne.n	800a954 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	4313      	orrs	r3, r2
 800a952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	4313      	orrs	r3, r2
 800a960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	689a      	ldr	r2, [r3, #8]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	4a0c      	ldr	r2, [pc, #48]	; (800a9ac <TIM_Base_SetConfig+0xbc>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d007      	beq.n	800a990 <TIM_Base_SetConfig+0xa0>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	4a0b      	ldr	r2, [pc, #44]	; (800a9b0 <TIM_Base_SetConfig+0xc0>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d003      	beq.n	800a990 <TIM_Base_SetConfig+0xa0>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	4a0a      	ldr	r2, [pc, #40]	; (800a9b4 <TIM_Base_SetConfig+0xc4>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d103      	bne.n	800a998 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	691a      	ldr	r2, [r3, #16]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	615a      	str	r2, [r3, #20]
}
 800a99e:	bf00      	nop
 800a9a0:	3714      	adds	r7, #20
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	40012c00 	.word	0x40012c00
 800a9b0:	40014400 	.word	0x40014400
 800a9b4:	40014800 	.word	0x40014800

0800a9b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b087      	sub	sp, #28
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a1b      	ldr	r3, [r3, #32]
 800a9c6:	f023 0201 	bic.w	r2, r3, #1
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a1b      	ldr	r3, [r3, #32]
 800a9d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f023 0303 	bic.w	r3, r3, #3
 800a9f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	f023 0302 	bic.w	r3, r3, #2
 800aa04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	697a      	ldr	r2, [r7, #20]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a24      	ldr	r2, [pc, #144]	; (800aaa4 <TIM_OC1_SetConfig+0xec>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d007      	beq.n	800aa28 <TIM_OC1_SetConfig+0x70>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4a23      	ldr	r2, [pc, #140]	; (800aaa8 <TIM_OC1_SetConfig+0xf0>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d003      	beq.n	800aa28 <TIM_OC1_SetConfig+0x70>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	4a22      	ldr	r2, [pc, #136]	; (800aaac <TIM_OC1_SetConfig+0xf4>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d10c      	bne.n	800aa42 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	f023 0308 	bic.w	r3, r3, #8
 800aa2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	f023 0304 	bic.w	r3, r3, #4
 800aa40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a17      	ldr	r2, [pc, #92]	; (800aaa4 <TIM_OC1_SetConfig+0xec>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d007      	beq.n	800aa5a <TIM_OC1_SetConfig+0xa2>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a17      	ldr	r2, [pc, #92]	; (800aaac <TIM_OC1_SetConfig+0xf4>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d003      	beq.n	800aa5a <TIM_OC1_SetConfig+0xa2>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a14      	ldr	r2, [pc, #80]	; (800aaa8 <TIM_OC1_SetConfig+0xf0>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d111      	bne.n	800aa7e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	693a      	ldr	r2, [r7, #16]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	693a      	ldr	r2, [r7, #16]
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	68fa      	ldr	r2, [r7, #12]
 800aa88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	685a      	ldr	r2, [r3, #4]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	697a      	ldr	r2, [r7, #20]
 800aa96:	621a      	str	r2, [r3, #32]
}
 800aa98:	bf00      	nop
 800aa9a:	371c      	adds	r7, #28
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	40012c00 	.word	0x40012c00
 800aaa8:	40014800 	.word	0x40014800
 800aaac:	40014400 	.word	0x40014400

0800aab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b087      	sub	sp, #28
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a1b      	ldr	r3, [r3, #32]
 800aabe:	f023 0210 	bic.w	r2, r3, #16
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a1b      	ldr	r3, [r3, #32]
 800aaca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	699b      	ldr	r3, [r3, #24]
 800aad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	021b      	lsls	r3, r3, #8
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	f023 0320 	bic.w	r3, r3, #32
 800aafe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	011b      	lsls	r3, r3, #4
 800ab06:	697a      	ldr	r2, [r7, #20]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a22      	ldr	r2, [pc, #136]	; (800ab98 <TIM_OC2_SetConfig+0xe8>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d10d      	bne.n	800ab30 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	011b      	lsls	r3, r3, #4
 800ab22:	697a      	ldr	r2, [r7, #20]
 800ab24:	4313      	orrs	r3, r2
 800ab26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a19      	ldr	r2, [pc, #100]	; (800ab98 <TIM_OC2_SetConfig+0xe8>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d007      	beq.n	800ab48 <TIM_OC2_SetConfig+0x98>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a18      	ldr	r2, [pc, #96]	; (800ab9c <TIM_OC2_SetConfig+0xec>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d003      	beq.n	800ab48 <TIM_OC2_SetConfig+0x98>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a17      	ldr	r2, [pc, #92]	; (800aba0 <TIM_OC2_SetConfig+0xf0>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d113      	bne.n	800ab70 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	695b      	ldr	r3, [r3, #20]
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	693a      	ldr	r2, [r7, #16]
 800ab74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	685a      	ldr	r2, [r3, #4]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	697a      	ldr	r2, [r7, #20]
 800ab88:	621a      	str	r2, [r3, #32]
}
 800ab8a:	bf00      	nop
 800ab8c:	371c      	adds	r7, #28
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	40012c00 	.word	0x40012c00
 800ab9c:	40014400 	.word	0x40014400
 800aba0:	40014800 	.word	0x40014800

0800aba4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b087      	sub	sp, #28
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a1b      	ldr	r3, [r3, #32]
 800abb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a1b      	ldr	r3, [r3, #32]
 800abbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	69db      	ldr	r3, [r3, #28]
 800abca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f023 0303 	bic.w	r3, r3, #3
 800abde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	021b      	lsls	r3, r3, #8
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a21      	ldr	r2, [pc, #132]	; (800ac88 <TIM_OC3_SetConfig+0xe4>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d10d      	bne.n	800ac22 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	021b      	lsls	r3, r3, #8
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a18      	ldr	r2, [pc, #96]	; (800ac88 <TIM_OC3_SetConfig+0xe4>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d007      	beq.n	800ac3a <TIM_OC3_SetConfig+0x96>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a17      	ldr	r2, [pc, #92]	; (800ac8c <TIM_OC3_SetConfig+0xe8>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d003      	beq.n	800ac3a <TIM_OC3_SetConfig+0x96>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a16      	ldr	r2, [pc, #88]	; (800ac90 <TIM_OC3_SetConfig+0xec>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d113      	bne.n	800ac62 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	695b      	ldr	r3, [r3, #20]
 800ac4e:	011b      	lsls	r3, r3, #4
 800ac50:	693a      	ldr	r2, [r7, #16]
 800ac52:	4313      	orrs	r3, r2
 800ac54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	699b      	ldr	r3, [r3, #24]
 800ac5a:	011b      	lsls	r3, r3, #4
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	693a      	ldr	r2, [r7, #16]
 800ac66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	685a      	ldr	r2, [r3, #4]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	697a      	ldr	r2, [r7, #20]
 800ac7a:	621a      	str	r2, [r3, #32]
}
 800ac7c:	bf00      	nop
 800ac7e:	371c      	adds	r7, #28
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	40012c00 	.word	0x40012c00
 800ac8c:	40014400 	.word	0x40014400
 800ac90:	40014800 	.word	0x40014800

0800ac94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a1b      	ldr	r3, [r3, #32]
 800aca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	69db      	ldr	r3, [r3, #28]
 800acba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	021b      	lsls	r3, r3, #8
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	4313      	orrs	r3, r2
 800acda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ace2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	031b      	lsls	r3, r3, #12
 800acea:	693a      	ldr	r2, [r7, #16]
 800acec:	4313      	orrs	r3, r2
 800acee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4a14      	ldr	r2, [pc, #80]	; (800ad44 <TIM_OC4_SetConfig+0xb0>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d007      	beq.n	800ad08 <TIM_OC4_SetConfig+0x74>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a13      	ldr	r2, [pc, #76]	; (800ad48 <TIM_OC4_SetConfig+0xb4>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d003      	beq.n	800ad08 <TIM_OC4_SetConfig+0x74>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a12      	ldr	r2, [pc, #72]	; (800ad4c <TIM_OC4_SetConfig+0xb8>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d109      	bne.n	800ad1c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	695b      	ldr	r3, [r3, #20]
 800ad14:	019b      	lsls	r3, r3, #6
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	697a      	ldr	r2, [r7, #20]
 800ad20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	685a      	ldr	r2, [r3, #4]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	693a      	ldr	r2, [r7, #16]
 800ad34:	621a      	str	r2, [r3, #32]
}
 800ad36:	bf00      	nop
 800ad38:	371c      	adds	r7, #28
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	40012c00 	.word	0x40012c00
 800ad48:	40014400 	.word	0x40014400
 800ad4c:	40014800 	.word	0x40014800

0800ad50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b087      	sub	sp, #28
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a1b      	ldr	r3, [r3, #32]
 800ad5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	041b      	lsls	r3, r3, #16
 800ad9c:	693a      	ldr	r2, [r7, #16]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a13      	ldr	r2, [pc, #76]	; (800adf4 <TIM_OC5_SetConfig+0xa4>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d007      	beq.n	800adba <TIM_OC5_SetConfig+0x6a>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a12      	ldr	r2, [pc, #72]	; (800adf8 <TIM_OC5_SetConfig+0xa8>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d003      	beq.n	800adba <TIM_OC5_SetConfig+0x6a>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a11      	ldr	r2, [pc, #68]	; (800adfc <TIM_OC5_SetConfig+0xac>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d109      	bne.n	800adce <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800adc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	021b      	lsls	r3, r3, #8
 800adc8:	697a      	ldr	r2, [r7, #20]
 800adca:	4313      	orrs	r3, r2
 800adcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	697a      	ldr	r2, [r7, #20]
 800add2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	685a      	ldr	r2, [r3, #4]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	693a      	ldr	r2, [r7, #16]
 800ade6:	621a      	str	r2, [r3, #32]
}
 800ade8:	bf00      	nop
 800adea:	371c      	adds	r7, #28
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	40012c00 	.word	0x40012c00
 800adf8:	40014400 	.word	0x40014400
 800adfc:	40014800 	.word	0x40014800

0800ae00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b087      	sub	sp, #28
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a1b      	ldr	r3, [r3, #32]
 800ae0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	021b      	lsls	r3, r3, #8
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	051b      	lsls	r3, r3, #20
 800ae4e:	693a      	ldr	r2, [r7, #16]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a14      	ldr	r2, [pc, #80]	; (800aea8 <TIM_OC6_SetConfig+0xa8>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d007      	beq.n	800ae6c <TIM_OC6_SetConfig+0x6c>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a13      	ldr	r2, [pc, #76]	; (800aeac <TIM_OC6_SetConfig+0xac>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d003      	beq.n	800ae6c <TIM_OC6_SetConfig+0x6c>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a12      	ldr	r2, [pc, #72]	; (800aeb0 <TIM_OC6_SetConfig+0xb0>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d109      	bne.n	800ae80 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	695b      	ldr	r3, [r3, #20]
 800ae78:	029b      	lsls	r3, r3, #10
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	697a      	ldr	r2, [r7, #20]
 800ae84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	685a      	ldr	r2, [r3, #4]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	693a      	ldr	r2, [r7, #16]
 800ae98:	621a      	str	r2, [r3, #32]
}
 800ae9a:	bf00      	nop
 800ae9c:	371c      	adds	r7, #28
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	40012c00 	.word	0x40012c00
 800aeac:	40014400 	.word	0x40014400
 800aeb0:	40014800 	.word	0x40014800

0800aeb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b087      	sub	sp, #28
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6a1b      	ldr	r3, [r3, #32]
 800aec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	f023 0201 	bic.w	r2, r3, #1
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	699b      	ldr	r3, [r3, #24]
 800aed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	011b      	lsls	r3, r3, #4
 800aee4:	693a      	ldr	r2, [r7, #16]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	f023 030a 	bic.w	r3, r3, #10
 800aef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aef2:	697a      	ldr	r2, [r7, #20]
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	693a      	ldr	r2, [r7, #16]
 800aefe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	621a      	str	r2, [r3, #32]
}
 800af06:	bf00      	nop
 800af08:	371c      	adds	r7, #28
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af12:	b480      	push	{r7}
 800af14:	b087      	sub	sp, #28
 800af16:	af00      	add	r7, sp, #0
 800af18:	60f8      	str	r0, [r7, #12]
 800af1a:	60b9      	str	r1, [r7, #8]
 800af1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	f023 0210 	bic.w	r2, r3, #16
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	699b      	ldr	r3, [r3, #24]
 800af2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	6a1b      	ldr	r3, [r3, #32]
 800af34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	031b      	lsls	r3, r3, #12
 800af42:	697a      	ldr	r2, [r7, #20]
 800af44:	4313      	orrs	r3, r2
 800af46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	011b      	lsls	r3, r3, #4
 800af54:	693a      	ldr	r2, [r7, #16]
 800af56:	4313      	orrs	r3, r2
 800af58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	693a      	ldr	r2, [r7, #16]
 800af64:	621a      	str	r2, [r3, #32]
}
 800af66:	bf00      	nop
 800af68:	371c      	adds	r7, #28
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr

0800af72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af72:	b480      	push	{r7}
 800af74:	b085      	sub	sp, #20
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800af88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	4313      	orrs	r3, r2
 800af94:	f043 0307 	orr.w	r3, r3, #7
 800af98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	609a      	str	r2, [r3, #8]
}
 800afa0:	bf00      	nop
 800afa2:	3714      	adds	r7, #20
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afac:	b480      	push	{r7}
 800afae:	b087      	sub	sp, #28
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
 800afb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	021a      	lsls	r2, r3, #8
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	431a      	orrs	r2, r3
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	697a      	ldr	r2, [r7, #20]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	609a      	str	r2, [r3, #8]
}
 800afe0:	bf00      	nop
 800afe2:	371c      	adds	r7, #28
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800afec:	b480      	push	{r7}
 800afee:	b087      	sub	sp, #28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	f003 031f 	and.w	r3, r3, #31
 800affe:	2201      	movs	r2, #1
 800b000:	fa02 f303 	lsl.w	r3, r2, r3
 800b004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6a1a      	ldr	r2, [r3, #32]
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	43db      	mvns	r3, r3
 800b00e:	401a      	ands	r2, r3
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6a1a      	ldr	r2, [r3, #32]
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	f003 031f 	and.w	r3, r3, #31
 800b01e:	6879      	ldr	r1, [r7, #4]
 800b020:	fa01 f303 	lsl.w	r3, r1, r3
 800b024:	431a      	orrs	r2, r3
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	621a      	str	r2, [r3, #32]
}
 800b02a:	bf00      	nop
 800b02c:	371c      	adds	r7, #28
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
	...

0800b038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d101      	bne.n	800b050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b04c:	2302      	movs	r3, #2
 800b04e:	e04a      	b.n	800b0e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2202      	movs	r2, #2
 800b05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a1f      	ldr	r2, [pc, #124]	; (800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d108      	bne.n	800b08c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b080:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	4313      	orrs	r3, r2
 800b08a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a12      	ldr	r2, [pc, #72]	; (800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d004      	beq.n	800b0ba <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0b8:	d10c      	bne.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0e4:	2300      	movs	r3, #0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3714      	adds	r7, #20
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	40012c00 	.word	0x40012c00

0800b0f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b102:	2300      	movs	r3, #0
 800b104:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d101      	bne.n	800b114 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b110:	2302      	movs	r3, #2
 800b112:	e078      	b.n	800b206 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	4313      	orrs	r3, r2
 800b128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	4313      	orrs	r3, r2
 800b136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	4313      	orrs	r3, r2
 800b144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4313      	orrs	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	4313      	orrs	r3, r2
 800b160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	695b      	ldr	r3, [r3, #20]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b17a:	4313      	orrs	r3, r2
 800b17c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	699b      	ldr	r3, [r3, #24]
 800b188:	041b      	lsls	r3, r3, #16
 800b18a:	4313      	orrs	r3, r2
 800b18c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a20      	ldr	r2, [pc, #128]	; (800b214 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d106      	bne.n	800b1a6 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	69db      	ldr	r3, [r3, #28]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a1a      	ldr	r2, [pc, #104]	; (800b214 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d121      	bne.n	800b1f4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ba:	051b      	lsls	r3, r3, #20
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	6a1b      	ldr	r3, [r3, #32]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a0c      	ldr	r2, [pc, #48]	; (800b214 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d106      	bne.n	800b1f4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3714      	adds	r7, #20
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	40012c00 	.word	0x40012c00

0800b218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b25c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b260:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b268:	b29a      	uxth	r2, r3
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	4313      	orrs	r3, r2
 800b270:	b29a      	uxth	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3714      	adds	r7, #20
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b286:	b480      	push	{r7}
 800b288:	b085      	sub	sp, #20
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b28e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b292:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	43db      	mvns	r3, r3
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	4013      	ands	r3, r2
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b2ae:	2300      	movs	r3, #0
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3714      	adds	r7, #20
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b2bc:	b084      	sub	sp, #16
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b082      	sub	sp, #8
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	f107 0014 	add.w	r0, r7, #20
 800b2ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f7ff ffb0 	bl	800b254 <USB_EnableGlobalInt>

  return HAL_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3708      	adds	r7, #8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b300:	b004      	add	sp, #16
 800b302:	4770      	bx	lr

0800b304 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b304:	b480      	push	{r7}
 800b306:	b09d      	sub	sp, #116	; 0x74
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b30e:	2300      	movs	r3, #0
 800b310:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4413      	add	r3, r2
 800b31e:	881b      	ldrh	r3, [r3, #0]
 800b320:	b29b      	uxth	r3, r3
 800b322:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b32a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	78db      	ldrb	r3, [r3, #3]
 800b332:	2b03      	cmp	r3, #3
 800b334:	d81f      	bhi.n	800b376 <USB_ActivateEndpoint+0x72>
 800b336:	a201      	add	r2, pc, #4	; (adr r2, 800b33c <USB_ActivateEndpoint+0x38>)
 800b338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b33c:	0800b34d 	.word	0x0800b34d
 800b340:	0800b369 	.word	0x0800b369
 800b344:	0800b37f 	.word	0x0800b37f
 800b348:	0800b35b 	.word	0x0800b35b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b34c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b354:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b358:	e012      	b.n	800b380 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b35a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b35e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800b362:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b366:	e00b      	b.n	800b380 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b368:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b36c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b370:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b374:	e004      	b.n	800b380 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800b37c:	e000      	b.n	800b380 <USB_ActivateEndpoint+0x7c>
      break;
 800b37e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	441a      	add	r2, r3
 800b38a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b38e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b39a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	b21b      	sxth	r3, r3
 800b3b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ba:	b21a      	sxth	r2, r3
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	b21b      	sxth	r3, r3
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	b21b      	sxth	r3, r3
 800b3c6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	441a      	add	r2, r3
 800b3d4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b3d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	7b1b      	ldrb	r3, [r3, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f040 8149 	bne.w	800b688 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	785b      	ldrb	r3, [r3, #1]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f000 8084 	beq.w	800b508 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	61bb      	str	r3, [r7, #24]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	461a      	mov	r2, r3
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	4413      	add	r3, r2
 800b412:	61bb      	str	r3, [r7, #24]
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	00da      	lsls	r2, r3, #3
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	4413      	add	r3, r2
 800b41e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b422:	617b      	str	r3, [r7, #20]
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	88db      	ldrh	r3, [r3, #6]
 800b428:	085b      	lsrs	r3, r3, #1
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	005b      	lsls	r3, r3, #1
 800b42e:	b29a      	uxth	r2, r3
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	881b      	ldrh	r3, [r3, #0]
 800b440:	827b      	strh	r3, [r7, #18]
 800b442:	8a7b      	ldrh	r3, [r7, #18]
 800b444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d01b      	beq.n	800b484 <USB_ActivateEndpoint+0x180>
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	4413      	add	r3, r2
 800b456:	881b      	ldrh	r3, [r3, #0]
 800b458:	b29b      	uxth	r3, r3
 800b45a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b45e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b462:	823b      	strh	r3, [r7, #16]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	441a      	add	r2, r3
 800b46e:	8a3b      	ldrh	r3, [r7, #16]
 800b470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b47c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b480:	b29b      	uxth	r3, r3
 800b482:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	78db      	ldrb	r3, [r3, #3]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d020      	beq.n	800b4ce <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4413      	add	r3, r2
 800b496:	881b      	ldrh	r3, [r3, #0]
 800b498:	b29b      	uxth	r3, r3
 800b49a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b49e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4a2:	81bb      	strh	r3, [r7, #12]
 800b4a4:	89bb      	ldrh	r3, [r7, #12]
 800b4a6:	f083 0320 	eor.w	r3, r3, #32
 800b4aa:	81bb      	strh	r3, [r7, #12]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	441a      	add	r2, r3
 800b4b6:	89bb      	ldrh	r3, [r7, #12]
 800b4b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	8013      	strh	r3, [r2, #0]
 800b4cc:	e2bf      	b.n	800ba4e <USB_ActivateEndpoint+0x74a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4413      	add	r3, r2
 800b4d8:	881b      	ldrh	r3, [r3, #0]
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4e4:	81fb      	strh	r3, [r7, #14]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	441a      	add	r2, r3
 800b4f0:	89fb      	ldrh	r3, [r7, #14]
 800b4f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b502:	b29b      	uxth	r3, r3
 800b504:	8013      	strh	r3, [r2, #0]
 800b506:	e2a2      	b.n	800ba4e <USB_ActivateEndpoint+0x74a>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	633b      	str	r3, [r7, #48]	; 0x30
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b512:	b29b      	uxth	r3, r3
 800b514:	461a      	mov	r2, r3
 800b516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b518:	4413      	add	r3, r2
 800b51a:	633b      	str	r3, [r7, #48]	; 0x30
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	00da      	lsls	r2, r3, #3
 800b522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b524:	4413      	add	r3, r2
 800b526:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b52a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	88db      	ldrh	r3, [r3, #6]
 800b530:	085b      	lsrs	r3, r3, #1
 800b532:	b29b      	uxth	r3, r3
 800b534:	005b      	lsls	r3, r3, #1
 800b536:	b29a      	uxth	r2, r3
 800b538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53a:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b546:	b29b      	uxth	r3, r3
 800b548:	461a      	mov	r2, r3
 800b54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54c:	4413      	add	r3, r2
 800b54e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	00da      	lsls	r2, r3, #3
 800b556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b558:	4413      	add	r3, r2
 800b55a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b55e:	627b      	str	r3, [r7, #36]	; 0x24
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d112      	bne.n	800b58e <USB_ActivateEndpoint+0x28a>
 800b568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56a:	881b      	ldrh	r3, [r3, #0]
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b572:	b29a      	uxth	r2, r3
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b576:	801a      	strh	r2, [r3, #0]
 800b578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57a:	881b      	ldrh	r3, [r3, #0]
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b586:	b29a      	uxth	r2, r3
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58a:	801a      	strh	r2, [r3, #0]
 800b58c:	e02f      	b.n	800b5ee <USB_ActivateEndpoint+0x2ea>
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	2b3e      	cmp	r3, #62	; 0x3e
 800b594:	d813      	bhi.n	800b5be <USB_ActivateEndpoint+0x2ba>
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	691b      	ldr	r3, [r3, #16]
 800b59a:	085b      	lsrs	r3, r3, #1
 800b59c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	f003 0301 	and.w	r3, r3, #1
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d002      	beq.n	800b5b0 <USB_ActivateEndpoint+0x2ac>
 800b5aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	029b      	lsls	r3, r3, #10
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ba:	801a      	strh	r2, [r3, #0]
 800b5bc:	e017      	b.n	800b5ee <USB_ActivateEndpoint+0x2ea>
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	691b      	ldr	r3, [r3, #16]
 800b5c2:	095b      	lsrs	r3, r3, #5
 800b5c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	f003 031f 	and.w	r3, r3, #31
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d102      	bne.n	800b5d8 <USB_ActivateEndpoint+0x2d4>
 800b5d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	029b      	lsls	r3, r3, #10
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	4413      	add	r3, r2
 800b5f8:	881b      	ldrh	r3, [r3, #0]
 800b5fa:	847b      	strh	r3, [r7, #34]	; 0x22
 800b5fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b602:	2b00      	cmp	r3, #0
 800b604:	d01b      	beq.n	800b63e <USB_ActivateEndpoint+0x33a>
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4413      	add	r3, r2
 800b610:	881b      	ldrh	r3, [r3, #0]
 800b612:	b29b      	uxth	r3, r3
 800b614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b61c:	843b      	strh	r3, [r7, #32]
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	441a      	add	r2, r3
 800b628:	8c3b      	ldrh	r3, [r7, #32]
 800b62a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b62e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	881b      	ldrh	r3, [r3, #0]
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b654:	83fb      	strh	r3, [r7, #30]
 800b656:	8bfb      	ldrh	r3, [r7, #30]
 800b658:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b65c:	83fb      	strh	r3, [r7, #30]
 800b65e:	8bfb      	ldrh	r3, [r7, #30]
 800b660:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b664:	83fb      	strh	r3, [r7, #30]
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	441a      	add	r2, r3
 800b670:	8bfb      	ldrh	r3, [r7, #30]
 800b672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b67a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b67e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b682:	b29b      	uxth	r3, r3
 800b684:	8013      	strh	r3, [r2, #0]
 800b686:	e1e2      	b.n	800ba4e <USB_ActivateEndpoint+0x74a>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	4413      	add	r3, r2
 800b692:	881b      	ldrh	r3, [r3, #0]
 800b694:	b29b      	uxth	r3, r3
 800b696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b69e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	441a      	add	r2, r3
 800b6ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b6b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b6bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	663b      	str	r3, [r7, #96]	; 0x60
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6d4:	4413      	add	r3, r2
 800b6d6:	663b      	str	r3, [r7, #96]	; 0x60
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	00da      	lsls	r2, r3, #3
 800b6de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6e0:	4413      	add	r3, r2
 800b6e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	891b      	ldrh	r3, [r3, #8]
 800b6ec:	085b      	lsrs	r3, r3, #1
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	005b      	lsls	r3, r3, #1
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6f6:	801a      	strh	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b702:	b29b      	uxth	r3, r3
 800b704:	461a      	mov	r2, r3
 800b706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b708:	4413      	add	r3, r2
 800b70a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	00da      	lsls	r2, r3, #3
 800b712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b714:	4413      	add	r3, r2
 800b716:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b71a:	657b      	str	r3, [r7, #84]	; 0x54
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	895b      	ldrh	r3, [r3, #10]
 800b720:	085b      	lsrs	r3, r3, #1
 800b722:	b29b      	uxth	r3, r3
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	b29a      	uxth	r2, r3
 800b728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b72a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	785b      	ldrb	r3, [r3, #1]
 800b730:	2b00      	cmp	r3, #0
 800b732:	f040 80b1 	bne.w	800b898 <USB_ActivateEndpoint+0x594>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4413      	add	r3, r2
 800b740:	881b      	ldrh	r3, [r3, #0]
 800b742:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b746:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b74a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d01d      	beq.n	800b78e <USB_ActivateEndpoint+0x48a>
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	4413      	add	r3, r2
 800b75c:	881b      	ldrh	r3, [r3, #0]
 800b75e:	b29b      	uxth	r3, r3
 800b760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b768:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	441a      	add	r2, r3
 800b776:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b77a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b77e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	881b      	ldrh	r3, [r3, #0]
 800b79a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b79c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b79e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d01b      	beq.n	800b7de <USB_ActivateEndpoint+0x4da>
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4413      	add	r3, r2
 800b7b0:	881b      	ldrh	r3, [r3, #0]
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	441a      	add	r2, r3
 800b7c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b7ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	4413      	add	r3, r2
 800b7e8:	881b      	ldrh	r3, [r3, #0]
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	441a      	add	r2, r3
 800b800:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b80a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b80e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b812:	b29b      	uxth	r3, r3
 800b814:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4413      	add	r3, r2
 800b820:	881b      	ldrh	r3, [r3, #0]
 800b822:	b29b      	uxth	r3, r3
 800b824:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b82c:	873b      	strh	r3, [r7, #56]	; 0x38
 800b82e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b830:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b834:	873b      	strh	r3, [r7, #56]	; 0x38
 800b836:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b838:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b83c:	873b      	strh	r3, [r7, #56]	; 0x38
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	441a      	add	r2, r3
 800b848:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b84a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b84e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4413      	add	r3, r2
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b874:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	441a      	add	r2, r3
 800b880:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b88a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b88e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b892:	b29b      	uxth	r3, r3
 800b894:	8013      	strh	r3, [r2, #0]
 800b896:	e0da      	b.n	800ba4e <USB_ActivateEndpoint+0x74a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4413      	add	r3, r2
 800b8a2:	881b      	ldrh	r3, [r3, #0]
 800b8a4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800b8a8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b8ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d01d      	beq.n	800b8f0 <USB_ActivateEndpoint+0x5ec>
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	4413      	add	r3, r2
 800b8be:	881b      	ldrh	r3, [r3, #0]
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8ca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	441a      	add	r2, r3
 800b8d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b8dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b8e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	4413      	add	r3, r2
 800b8fa:	881b      	ldrh	r3, [r3, #0]
 800b8fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b900:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d01d      	beq.n	800b948 <USB_ActivateEndpoint+0x644>
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4413      	add	r3, r2
 800b916:	881b      	ldrh	r3, [r3, #0]
 800b918:	b29b      	uxth	r3, r3
 800b91a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b91e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b922:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	441a      	add	r2, r3
 800b930:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b93c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b940:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b944:	b29b      	uxth	r3, r3
 800b946:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4413      	add	r3, r2
 800b952:	881b      	ldrh	r3, [r3, #0]
 800b954:	b29b      	uxth	r3, r3
 800b956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b95a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b95e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	441a      	add	r2, r3
 800b96c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b97c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b980:	b29b      	uxth	r3, r3
 800b982:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	78db      	ldrb	r3, [r3, #3]
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d024      	beq.n	800b9d6 <USB_ActivateEndpoint+0x6d2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4413      	add	r3, r2
 800b996:	881b      	ldrh	r3, [r3, #0]
 800b998:	b29b      	uxth	r3, r3
 800b99a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b99e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b9a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b9aa:	f083 0320 	eor.w	r3, r3, #32
 800b9ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	441a      	add	r2, r3
 800b9bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b9c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	8013      	strh	r3, [r2, #0]
 800b9d4:	e01d      	b.n	800ba12 <USB_ActivateEndpoint+0x70e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	4413      	add	r3, r2
 800b9e0:	881b      	ldrh	r3, [r3, #0]
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	441a      	add	r2, r3
 800b9fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b9fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	4413      	add	r3, r2
 800ba1c:	881b      	ldrh	r3, [r3, #0]
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba28:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	441a      	add	r2, r3
 800ba36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ba3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800ba4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3774      	adds	r7, #116	; 0x74
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop

0800ba60 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b08d      	sub	sp, #52	; 0x34
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	7b1b      	ldrb	r3, [r3, #12]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	f040 808e 	bne.w	800bb90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	785b      	ldrb	r3, [r3, #1]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d044      	beq.n	800bb06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	881b      	ldrh	r3, [r3, #0]
 800ba88:	81bb      	strh	r3, [r7, #12]
 800ba8a:	89bb      	ldrh	r3, [r7, #12]
 800ba8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d01b      	beq.n	800bacc <USB_DeactivateEndpoint+0x6c>
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	881b      	ldrh	r3, [r3, #0]
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800baa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baaa:	817b      	strh	r3, [r7, #10]
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	441a      	add	r2, r3
 800bab6:	897b      	ldrh	r3, [r7, #10]
 800bab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800babc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bac4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bac8:	b29b      	uxth	r3, r3
 800baca:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	4413      	add	r3, r2
 800bad6:	881b      	ldrh	r3, [r3, #0]
 800bad8:	b29b      	uxth	r3, r3
 800bada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bae2:	813b      	strh	r3, [r7, #8]
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	441a      	add	r2, r3
 800baee:	893b      	ldrh	r3, [r7, #8]
 800baf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800baf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800baf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bafc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	8013      	strh	r3, [r2, #0]
 800bb04:	e192      	b.n	800be2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	4413      	add	r3, r2
 800bb10:	881b      	ldrh	r3, [r3, #0]
 800bb12:	827b      	strh	r3, [r7, #18]
 800bb14:	8a7b      	ldrh	r3, [r7, #18]
 800bb16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d01b      	beq.n	800bb56 <USB_DeactivateEndpoint+0xf6>
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	4413      	add	r3, r2
 800bb28:	881b      	ldrh	r3, [r3, #0]
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb34:	823b      	strh	r3, [r7, #16]
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	441a      	add	r2, r3
 800bb40:	8a3b      	ldrh	r3, [r7, #16]
 800bb42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bb4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	4413      	add	r3, r2
 800bb60:	881b      	ldrh	r3, [r3, #0]
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb6c:	81fb      	strh	r3, [r7, #14]
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	441a      	add	r2, r3
 800bb78:	89fb      	ldrh	r3, [r7, #14]
 800bb7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	8013      	strh	r3, [r2, #0]
 800bb8e:	e14d      	b.n	800be2c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	785b      	ldrb	r3, [r3, #1]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f040 80a5 	bne.w	800bce4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	4413      	add	r3, r2
 800bba4:	881b      	ldrh	r3, [r3, #0]
 800bba6:	843b      	strh	r3, [r7, #32]
 800bba8:	8c3b      	ldrh	r3, [r7, #32]
 800bbaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d01b      	beq.n	800bbea <USB_DeactivateEndpoint+0x18a>
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	4413      	add	r3, r2
 800bbbc:	881b      	ldrh	r3, [r3, #0]
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbc8:	83fb      	strh	r3, [r7, #30]
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	441a      	add	r2, r3
 800bbd4:	8bfb      	ldrh	r3, [r7, #30]
 800bbd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bbe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bbea:	687a      	ldr	r2, [r7, #4]
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	4413      	add	r3, r2
 800bbf4:	881b      	ldrh	r3, [r3, #0]
 800bbf6:	83bb      	strh	r3, [r7, #28]
 800bbf8:	8bbb      	ldrh	r3, [r7, #28]
 800bbfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d01b      	beq.n	800bc3a <USB_DeactivateEndpoint+0x1da>
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	4413      	add	r3, r2
 800bc0c:	881b      	ldrh	r3, [r3, #0]
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc18:	837b      	strh	r3, [r7, #26]
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	441a      	add	r2, r3
 800bc24:	8b7b      	ldrh	r3, [r7, #26]
 800bc26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	4413      	add	r3, r2
 800bc44:	881b      	ldrh	r3, [r3, #0]
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc50:	833b      	strh	r3, [r7, #24]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	441a      	add	r2, r3
 800bc5c:	8b3b      	ldrh	r3, [r7, #24]
 800bc5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	881b      	ldrh	r3, [r3, #0]
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc88:	82fb      	strh	r3, [r7, #22]
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	441a      	add	r2, r3
 800bc94:	8afb      	ldrh	r3, [r7, #22]
 800bc96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	4413      	add	r3, r2
 800bcb4:	881b      	ldrh	r3, [r3, #0]
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcc0:	82bb      	strh	r3, [r7, #20]
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	441a      	add	r2, r3
 800bccc:	8abb      	ldrh	r3, [r7, #20]
 800bcce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	8013      	strh	r3, [r2, #0]
 800bce2:	e0a3      	b.n	800be2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4413      	add	r3, r2
 800bcee:	881b      	ldrh	r3, [r3, #0]
 800bcf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bcf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bcf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d01b      	beq.n	800bd34 <USB_DeactivateEndpoint+0x2d4>
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	4413      	add	r3, r2
 800bd06:	881b      	ldrh	r3, [r3, #0]
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd12:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	441a      	add	r2, r3
 800bd1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bd2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4413      	add	r3, r2
 800bd3e:	881b      	ldrh	r3, [r3, #0]
 800bd40:	857b      	strh	r3, [r7, #42]	; 0x2a
 800bd42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bd44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d01b      	beq.n	800bd84 <USB_DeactivateEndpoint+0x324>
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	4413      	add	r3, r2
 800bd56:	881b      	ldrh	r3, [r3, #0]
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd62:	853b      	strh	r3, [r7, #40]	; 0x28
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	441a      	add	r2, r3
 800bd6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bd70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	4413      	add	r3, r2
 800bd8e:	881b      	ldrh	r3, [r3, #0]
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	441a      	add	r2, r3
 800bda6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bda8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bdb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	4413      	add	r3, r2
 800bdc6:	881b      	ldrh	r3, [r3, #0]
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	441a      	add	r2, r3
 800bdde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bde0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bde4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bde8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	4413      	add	r3, r2
 800bdfe:	881b      	ldrh	r3, [r3, #0]
 800be00:	b29b      	uxth	r3, r3
 800be02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be0a:	847b      	strh	r3, [r7, #34]	; 0x22
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	441a      	add	r2, r3
 800be16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be28:	b29b      	uxth	r3, r3
 800be2a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3734      	adds	r7, #52	; 0x34
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr

0800be3a <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b0a0      	sub	sp, #128	; 0x80
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	785b      	ldrb	r3, [r3, #1]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	f040 81a1 	bne.w	800c190 <USB_EPStartXfer+0x356>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	699a      	ldr	r2, [r3, #24]
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	691b      	ldr	r3, [r3, #16]
 800be56:	429a      	cmp	r2, r3
 800be58:	d909      	bls.n	800be6e <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	691b      	ldr	r3, [r3, #16]
 800be5e:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	699a      	ldr	r2, [r3, #24]
 800be64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be66:	1ad2      	subs	r2, r2, r3
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	619a      	str	r2, [r3, #24]
 800be6c:	e005      	b.n	800be7a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	699b      	ldr	r3, [r3, #24]
 800be72:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	2200      	movs	r2, #0
 800be78:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	7b1b      	ldrb	r3, [r3, #12]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d11f      	bne.n	800bec2 <USB_EPStartXfer+0x88>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	6959      	ldr	r1, [r3, #20]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	88da      	ldrh	r2, [r3, #6]
 800be8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fc3f 	bl	800c712 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	613b      	str	r3, [r7, #16]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	461a      	mov	r2, r3
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	4413      	add	r3, r2
 800bea6:	613b      	str	r3, [r7, #16]
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	00da      	lsls	r2, r3, #3
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	4413      	add	r3, r2
 800beb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800beb6:	60fb      	str	r3, [r7, #12]
 800beb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800beba:	b29a      	uxth	r2, r3
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	801a      	strh	r2, [r3, #0]
 800bec0:	e141      	b.n	800c146 <USB_EPStartXfer+0x30c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	881b      	ldrh	r3, [r3, #0]
 800bece:	b29b      	uxth	r3, r3
 800bed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d076      	beq.n	800bfc6 <USB_EPStartXfer+0x18c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	627b      	str	r3, [r7, #36]	; 0x24
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	785b      	ldrb	r3, [r3, #1]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d153      	bne.n	800bf8c <USB_EPStartXfer+0x152>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	61fb      	str	r3, [r7, #28]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800beee:	b29b      	uxth	r3, r3
 800bef0:	461a      	mov	r2, r3
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	4413      	add	r3, r2
 800bef6:	61fb      	str	r3, [r7, #28]
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	00da      	lsls	r2, r3, #3
 800befe:	69fb      	ldr	r3, [r7, #28]
 800bf00:	4413      	add	r3, r2
 800bf02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bf06:	61bb      	str	r3, [r7, #24]
 800bf08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d112      	bne.n	800bf34 <USB_EPStartXfer+0xfa>
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	881b      	ldrh	r3, [r3, #0]
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	801a      	strh	r2, [r3, #0]
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	881b      	ldrh	r3, [r3, #0]
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	801a      	strh	r2, [r3, #0]
 800bf32:	e043      	b.n	800bfbc <USB_EPStartXfer+0x182>
 800bf34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf36:	2b3e      	cmp	r3, #62	; 0x3e
 800bf38:	d811      	bhi.n	800bf5e <USB_EPStartXfer+0x124>
 800bf3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf3c:	085b      	lsrs	r3, r3, #1
 800bf3e:	677b      	str	r3, [r7, #116]	; 0x74
 800bf40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf42:	f003 0301 	and.w	r3, r3, #1
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d002      	beq.n	800bf50 <USB_EPStartXfer+0x116>
 800bf4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	677b      	str	r3, [r7, #116]	; 0x74
 800bf50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	029b      	lsls	r3, r3, #10
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	801a      	strh	r2, [r3, #0]
 800bf5c:	e02e      	b.n	800bfbc <USB_EPStartXfer+0x182>
 800bf5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf60:	095b      	lsrs	r3, r3, #5
 800bf62:	677b      	str	r3, [r7, #116]	; 0x74
 800bf64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf66:	f003 031f 	and.w	r3, r3, #31
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d102      	bne.n	800bf74 <USB_EPStartXfer+0x13a>
 800bf6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf70:	3b01      	subs	r3, #1
 800bf72:	677b      	str	r3, [r7, #116]	; 0x74
 800bf74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	029b      	lsls	r3, r3, #10
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf84:	b29a      	uxth	r2, r3
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	801a      	strh	r2, [r3, #0]
 800bf8a:	e017      	b.n	800bfbc <USB_EPStartXfer+0x182>
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	785b      	ldrb	r3, [r3, #1]
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d113      	bne.n	800bfbc <USB_EPStartXfer+0x182>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	4413      	add	r3, r2
 800bfa2:	627b      	str	r3, [r7, #36]	; 0x24
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	00da      	lsls	r2, r3, #3
 800bfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfac:	4413      	add	r3, r2
 800bfae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bfb2:	623b      	str	r3, [r7, #32]
 800bfb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	6a3b      	ldr	r3, [r7, #32]
 800bfba:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	895b      	ldrh	r3, [r3, #10]
 800bfc0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800bfc4:	e075      	b.n	800c0b2 <USB_EPStartXfer+0x278>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	785b      	ldrb	r3, [r3, #1]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d153      	bne.n	800c076 <USB_EPStartXfer+0x23c>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	461a      	mov	r2, r3
 800bfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfde:	4413      	add	r3, r2
 800bfe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	00da      	lsls	r2, r3, #3
 800bfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfea:	4413      	add	r3, r2
 800bfec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bff0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d112      	bne.n	800c01e <USB_EPStartXfer+0x1e4>
 800bff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffa:	881b      	ldrh	r3, [r3, #0]
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c002:	b29a      	uxth	r2, r3
 800c004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c006:	801a      	strh	r2, [r3, #0]
 800c008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00a:	881b      	ldrh	r3, [r3, #0]
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c016:	b29a      	uxth	r2, r3
 800c018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01a:	801a      	strh	r2, [r3, #0]
 800c01c:	e045      	b.n	800c0aa <USB_EPStartXfer+0x270>
 800c01e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c020:	2b3e      	cmp	r3, #62	; 0x3e
 800c022:	d811      	bhi.n	800c048 <USB_EPStartXfer+0x20e>
 800c024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c026:	085b      	lsrs	r3, r3, #1
 800c028:	673b      	str	r3, [r7, #112]	; 0x70
 800c02a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c02c:	f003 0301 	and.w	r3, r3, #1
 800c030:	2b00      	cmp	r3, #0
 800c032:	d002      	beq.n	800c03a <USB_EPStartXfer+0x200>
 800c034:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c036:	3301      	adds	r3, #1
 800c038:	673b      	str	r3, [r7, #112]	; 0x70
 800c03a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	029b      	lsls	r3, r3, #10
 800c040:	b29a      	uxth	r2, r3
 800c042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c044:	801a      	strh	r2, [r3, #0]
 800c046:	e030      	b.n	800c0aa <USB_EPStartXfer+0x270>
 800c048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c04a:	095b      	lsrs	r3, r3, #5
 800c04c:	673b      	str	r3, [r7, #112]	; 0x70
 800c04e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c050:	f003 031f 	and.w	r3, r3, #31
 800c054:	2b00      	cmp	r3, #0
 800c056:	d102      	bne.n	800c05e <USB_EPStartXfer+0x224>
 800c058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c05a:	3b01      	subs	r3, #1
 800c05c:	673b      	str	r3, [r7, #112]	; 0x70
 800c05e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c060:	b29b      	uxth	r3, r3
 800c062:	029b      	lsls	r3, r3, #10
 800c064:	b29b      	uxth	r3, r3
 800c066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c06a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c06e:	b29a      	uxth	r2, r3
 800c070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c072:	801a      	strh	r2, [r3, #0]
 800c074:	e019      	b.n	800c0aa <USB_EPStartXfer+0x270>
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	785b      	ldrb	r3, [r3, #1]
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d115      	bne.n	800c0aa <USB_EPStartXfer+0x270>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	637b      	str	r3, [r7, #52]	; 0x34
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c088:	b29b      	uxth	r3, r3
 800c08a:	461a      	mov	r2, r3
 800c08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c08e:	4413      	add	r3, r2
 800c090:	637b      	str	r3, [r7, #52]	; 0x34
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	00da      	lsls	r2, r3, #3
 800c098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c09a:	4413      	add	r3, r2
 800c09c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c0a0:	633b      	str	r3, [r7, #48]	; 0x30
 800c0a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	891b      	ldrh	r3, [r3, #8]
 800c0ae:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	6959      	ldr	r1, [r3, #20]
 800c0b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 fb27 	bl	800c712 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	785b      	ldrb	r3, [r3, #1]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d11c      	bne.n	800c106 <USB_EPStartXfer+0x2cc>
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	881b      	ldrh	r3, [r3, #0]
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0e2:	82bb      	strh	r3, [r7, #20]
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	441a      	add	r2, r3
 800c0ee:	8abb      	ldrh	r3, [r7, #20]
 800c0f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c100:	b29b      	uxth	r3, r3
 800c102:	8013      	strh	r3, [r2, #0]
 800c104:	e01f      	b.n	800c146 <USB_EPStartXfer+0x30c>
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	785b      	ldrb	r3, [r3, #1]
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d11b      	bne.n	800c146 <USB_EPStartXfer+0x30c>
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	4413      	add	r3, r2
 800c118:	881b      	ldrh	r3, [r3, #0]
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c124:	82fb      	strh	r3, [r7, #22]
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	441a      	add	r2, r3
 800c130:	8afb      	ldrh	r3, [r7, #22]
 800c132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c13a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c13e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c142:	b29b      	uxth	r3, r3
 800c144:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4413      	add	r3, r2
 800c150:	881b      	ldrh	r3, [r3, #0]
 800c152:	b29b      	uxth	r3, r3
 800c154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c15c:	817b      	strh	r3, [r7, #10]
 800c15e:	897b      	ldrh	r3, [r7, #10]
 800c160:	f083 0310 	eor.w	r3, r3, #16
 800c164:	817b      	strh	r3, [r7, #10]
 800c166:	897b      	ldrh	r3, [r7, #10]
 800c168:	f083 0320 	eor.w	r3, r3, #32
 800c16c:	817b      	strh	r3, [r7, #10]
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	441a      	add	r2, r3
 800c178:	897b      	ldrh	r3, [r7, #10]
 800c17a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c17e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	8013      	strh	r3, [r2, #0]
 800c18e:	e175      	b.n	800c47c <USB_EPStartXfer+0x642>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	699a      	ldr	r2, [r3, #24]
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d909      	bls.n	800c1b0 <USB_EPStartXfer+0x376>
    {
      len = ep->maxpacket;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	699a      	ldr	r2, [r3, #24]
 800c1a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1a8:	1ad2      	subs	r2, r2, r3
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	619a      	str	r2, [r3, #24]
 800c1ae:	e005      	b.n	800c1bc <USB_EPStartXfer+0x382>
    }
    else
    {
      len = ep->xfer_len;
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	699b      	ldr	r3, [r3, #24]
 800c1b4:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	7b1b      	ldrb	r3, [r3, #12]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d153      	bne.n	800c26c <USB_EPStartXfer+0x432>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	643b      	str	r3, [r7, #64]	; 0x40
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d4:	4413      	add	r3, r2
 800c1d6:	643b      	str	r3, [r7, #64]	; 0x40
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	00da      	lsls	r2, r3, #3
 800c1de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1e0:	4413      	add	r3, r2
 800c1e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d112      	bne.n	800c214 <USB_EPStartXfer+0x3da>
 800c1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1f0:	881b      	ldrh	r3, [r3, #0]
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1fc:	801a      	strh	r2, [r3, #0]
 800c1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c200:	881b      	ldrh	r3, [r3, #0]
 800c202:	b29b      	uxth	r3, r3
 800c204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c210:	801a      	strh	r2, [r3, #0]
 800c212:	e10f      	b.n	800c434 <USB_EPStartXfer+0x5fa>
 800c214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c216:	2b3e      	cmp	r3, #62	; 0x3e
 800c218:	d811      	bhi.n	800c23e <USB_EPStartXfer+0x404>
 800c21a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c21c:	085b      	lsrs	r3, r3, #1
 800c21e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c222:	f003 0301 	and.w	r3, r3, #1
 800c226:	2b00      	cmp	r3, #0
 800c228:	d002      	beq.n	800c230 <USB_EPStartXfer+0x3f6>
 800c22a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c22c:	3301      	adds	r3, #1
 800c22e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c232:	b29b      	uxth	r3, r3
 800c234:	029b      	lsls	r3, r3, #10
 800c236:	b29a      	uxth	r2, r3
 800c238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c23a:	801a      	strh	r2, [r3, #0]
 800c23c:	e0fa      	b.n	800c434 <USB_EPStartXfer+0x5fa>
 800c23e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c240:	095b      	lsrs	r3, r3, #5
 800c242:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c246:	f003 031f 	and.w	r3, r3, #31
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d102      	bne.n	800c254 <USB_EPStartXfer+0x41a>
 800c24e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c250:	3b01      	subs	r3, #1
 800c252:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c256:	b29b      	uxth	r3, r3
 800c258:	029b      	lsls	r3, r3, #10
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c264:	b29a      	uxth	r2, r3
 800c266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c268:	801a      	strh	r2, [r3, #0]
 800c26a:	e0e3      	b.n	800c434 <USB_EPStartXfer+0x5fa>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	785b      	ldrb	r3, [r3, #1]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d153      	bne.n	800c31c <USB_EPStartXfer+0x4e2>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	65bb      	str	r3, [r7, #88]	; 0x58
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c27e:	b29b      	uxth	r3, r3
 800c280:	461a      	mov	r2, r3
 800c282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c284:	4413      	add	r3, r2
 800c286:	65bb      	str	r3, [r7, #88]	; 0x58
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	00da      	lsls	r2, r3, #3
 800c28e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c290:	4413      	add	r3, r2
 800c292:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c296:	657b      	str	r3, [r7, #84]	; 0x54
 800c298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d112      	bne.n	800c2c4 <USB_EPStartXfer+0x48a>
 800c29e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2a0:	881b      	ldrh	r3, [r3, #0]
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c2a8:	b29a      	uxth	r2, r3
 800c2aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2ac:	801a      	strh	r2, [r3, #0]
 800c2ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2b0:	881b      	ldrh	r3, [r3, #0]
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2bc:	b29a      	uxth	r2, r3
 800c2be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2c0:	801a      	strh	r2, [r3, #0]
 800c2c2:	e045      	b.n	800c350 <USB_EPStartXfer+0x516>
 800c2c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2c6:	2b3e      	cmp	r3, #62	; 0x3e
 800c2c8:	d811      	bhi.n	800c2ee <USB_EPStartXfer+0x4b4>
 800c2ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2cc:	085b      	lsrs	r3, r3, #1
 800c2ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2d2:	f003 0301 	and.w	r3, r3, #1
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d002      	beq.n	800c2e0 <USB_EPStartXfer+0x4a6>
 800c2da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c2dc:	3301      	adds	r3, #1
 800c2de:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	029b      	lsls	r3, r3, #10
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2ea:	801a      	strh	r2, [r3, #0]
 800c2ec:	e030      	b.n	800c350 <USB_EPStartXfer+0x516>
 800c2ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2f0:	095b      	lsrs	r3, r3, #5
 800c2f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2f6:	f003 031f 	and.w	r3, r3, #31
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d102      	bne.n	800c304 <USB_EPStartXfer+0x4ca>
 800c2fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c300:	3b01      	subs	r3, #1
 800c302:	66bb      	str	r3, [r7, #104]	; 0x68
 800c304:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c306:	b29b      	uxth	r3, r3
 800c308:	029b      	lsls	r3, r3, #10
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c314:	b29a      	uxth	r2, r3
 800c316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c318:	801a      	strh	r2, [r3, #0]
 800c31a:	e019      	b.n	800c350 <USB_EPStartXfer+0x516>
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	785b      	ldrb	r3, [r3, #1]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d115      	bne.n	800c350 <USB_EPStartXfer+0x516>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	663b      	str	r3, [r7, #96]	; 0x60
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c32e:	b29b      	uxth	r3, r3
 800c330:	461a      	mov	r2, r3
 800c332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c334:	4413      	add	r3, r2
 800c336:	663b      	str	r3, [r7, #96]	; 0x60
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	00da      	lsls	r2, r3, #3
 800c33e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c340:	4413      	add	r3, r2
 800c342:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c346:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c34a:	b29a      	uxth	r2, r3
 800c34c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c34e:	801a      	strh	r2, [r3, #0]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	653b      	str	r3, [r7, #80]	; 0x50
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	785b      	ldrb	r3, [r3, #1]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d153      	bne.n	800c404 <USB_EPStartXfer+0x5ca>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c366:	b29b      	uxth	r3, r3
 800c368:	461a      	mov	r2, r3
 800c36a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c36c:	4413      	add	r3, r2
 800c36e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	00da      	lsls	r2, r3, #3
 800c376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c378:	4413      	add	r3, r2
 800c37a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c37e:	647b      	str	r3, [r7, #68]	; 0x44
 800c380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c382:	2b00      	cmp	r3, #0
 800c384:	d112      	bne.n	800c3ac <USB_EPStartXfer+0x572>
 800c386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c388:	881b      	ldrh	r3, [r3, #0]
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c390:	b29a      	uxth	r2, r3
 800c392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c394:	801a      	strh	r2, [r3, #0]
 800c396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c398:	881b      	ldrh	r3, [r3, #0]
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3a8:	801a      	strh	r2, [r3, #0]
 800c3aa:	e043      	b.n	800c434 <USB_EPStartXfer+0x5fa>
 800c3ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3ae:	2b3e      	cmp	r3, #62	; 0x3e
 800c3b0:	d811      	bhi.n	800c3d6 <USB_EPStartXfer+0x59c>
 800c3b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3b4:	085b      	lsrs	r3, r3, #1
 800c3b6:	667b      	str	r3, [r7, #100]	; 0x64
 800c3b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3ba:	f003 0301 	and.w	r3, r3, #1
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d002      	beq.n	800c3c8 <USB_EPStartXfer+0x58e>
 800c3c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	667b      	str	r3, [r7, #100]	; 0x64
 800c3c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	029b      	lsls	r3, r3, #10
 800c3ce:	b29a      	uxth	r2, r3
 800c3d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3d2:	801a      	strh	r2, [r3, #0]
 800c3d4:	e02e      	b.n	800c434 <USB_EPStartXfer+0x5fa>
 800c3d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3d8:	095b      	lsrs	r3, r3, #5
 800c3da:	667b      	str	r3, [r7, #100]	; 0x64
 800c3dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3de:	f003 031f 	and.w	r3, r3, #31
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d102      	bne.n	800c3ec <USB_EPStartXfer+0x5b2>
 800c3e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	667b      	str	r3, [r7, #100]	; 0x64
 800c3ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	029b      	lsls	r3, r3, #10
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c400:	801a      	strh	r2, [r3, #0]
 800c402:	e017      	b.n	800c434 <USB_EPStartXfer+0x5fa>
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	785b      	ldrb	r3, [r3, #1]
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d113      	bne.n	800c434 <USB_EPStartXfer+0x5fa>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c412:	b29b      	uxth	r3, r3
 800c414:	461a      	mov	r2, r3
 800c416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c418:	4413      	add	r3, r2
 800c41a:	653b      	str	r3, [r7, #80]	; 0x50
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	00da      	lsls	r2, r3, #3
 800c422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c424:	4413      	add	r3, r2
 800c426:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c42a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c42c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c42e:	b29a      	uxth	r2, r3
 800c430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c432:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	4413      	add	r3, r2
 800c43e:	881b      	ldrh	r3, [r3, #0]
 800c440:	b29b      	uxth	r3, r3
 800c442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c44a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800c44c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c44e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c452:	877b      	strh	r3, [r7, #58]	; 0x3a
 800c454:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c456:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c45a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	441a      	add	r2, r3
 800c466:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c46c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c478:	b29b      	uxth	r3, r3
 800c47a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3780      	adds	r7, #128	; 0x80
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c486:	b480      	push	{r7}
 800c488:	b085      	sub	sp, #20
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
 800c48e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	785b      	ldrb	r3, [r3, #1]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d020      	beq.n	800c4da <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	4413      	add	r3, r2
 800c4a2:	881b      	ldrh	r3, [r3, #0]
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4ae:	81bb      	strh	r3, [r7, #12]
 800c4b0:	89bb      	ldrh	r3, [r7, #12]
 800c4b2:	f083 0310 	eor.w	r3, r3, #16
 800c4b6:	81bb      	strh	r3, [r7, #12]
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	441a      	add	r2, r3
 800c4c2:	89bb      	ldrh	r3, [r7, #12]
 800c4c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	8013      	strh	r3, [r2, #0]
 800c4d8:	e01f      	b.n	800c51a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	4413      	add	r3, r2
 800c4e4:	881b      	ldrh	r3, [r3, #0]
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c4ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4f0:	81fb      	strh	r3, [r7, #14]
 800c4f2:	89fb      	ldrh	r3, [r7, #14]
 800c4f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c4f8:	81fb      	strh	r3, [r7, #14]
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	441a      	add	r2, r3
 800c504:	89fb      	ldrh	r3, [r7, #14]
 800c506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c50a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c50e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c516:	b29b      	uxth	r3, r3
 800c518:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3714      	adds	r7, #20
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr

0800c528 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c528:	b480      	push	{r7}
 800c52a:	b087      	sub	sp, #28
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	7b1b      	ldrb	r3, [r3, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	f040 809d 	bne.w	800c676 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	785b      	ldrb	r3, [r3, #1]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d04c      	beq.n	800c5de <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	4413      	add	r3, r2
 800c54e:	881b      	ldrh	r3, [r3, #0]
 800c550:	823b      	strh	r3, [r7, #16]
 800c552:	8a3b      	ldrh	r3, [r7, #16]
 800c554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d01b      	beq.n	800c594 <USB_EPClearStall+0x6c>
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4413      	add	r3, r2
 800c566:	881b      	ldrh	r3, [r3, #0]
 800c568:	b29b      	uxth	r3, r3
 800c56a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c56e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c572:	81fb      	strh	r3, [r7, #14]
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	441a      	add	r2, r3
 800c57e:	89fb      	ldrh	r3, [r7, #14]
 800c580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c58c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c590:	b29b      	uxth	r3, r3
 800c592:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	78db      	ldrb	r3, [r3, #3]
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d06c      	beq.n	800c676 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	4413      	add	r3, r2
 800c5a6:	881b      	ldrh	r3, [r3, #0]
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5b2:	81bb      	strh	r3, [r7, #12]
 800c5b4:	89bb      	ldrh	r3, [r7, #12]
 800c5b6:	f083 0320 	eor.w	r3, r3, #32
 800c5ba:	81bb      	strh	r3, [r7, #12]
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	441a      	add	r2, r3
 800c5c6:	89bb      	ldrh	r3, [r7, #12]
 800c5c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	8013      	strh	r3, [r2, #0]
 800c5dc:	e04b      	b.n	800c676 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	4413      	add	r3, r2
 800c5e8:	881b      	ldrh	r3, [r3, #0]
 800c5ea:	82fb      	strh	r3, [r7, #22]
 800c5ec:	8afb      	ldrh	r3, [r7, #22]
 800c5ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d01b      	beq.n	800c62e <USB_EPClearStall+0x106>
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	009b      	lsls	r3, r3, #2
 800c5fe:	4413      	add	r3, r2
 800c600:	881b      	ldrh	r3, [r3, #0]
 800c602:	b29b      	uxth	r3, r3
 800c604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c60c:	82bb      	strh	r3, [r7, #20]
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	441a      	add	r2, r3
 800c618:	8abb      	ldrh	r3, [r7, #20]
 800c61a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c61e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	4413      	add	r3, r2
 800c638:	881b      	ldrh	r3, [r3, #0]
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c644:	827b      	strh	r3, [r7, #18]
 800c646:	8a7b      	ldrh	r3, [r7, #18]
 800c648:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c64c:	827b      	strh	r3, [r7, #18]
 800c64e:	8a7b      	ldrh	r3, [r7, #18]
 800c650:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c654:	827b      	strh	r3, [r7, #18]
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	441a      	add	r2, r3
 800c660:	8a7b      	ldrh	r3, [r7, #18]
 800c662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c66a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c66e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c672:	b29b      	uxth	r3, r3
 800c674:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c676:	2300      	movs	r3, #0
}
 800c678:	4618      	mov	r0, r3
 800c67a:	371c      	adds	r7, #28
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c684:	b480      	push	{r7}
 800c686:	b083      	sub	sp, #12
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	460b      	mov	r3, r1
 800c68e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c690:	78fb      	ldrb	r3, [r7, #3]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d103      	bne.n	800c69e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2280      	movs	r2, #128	; 0x80
 800c69a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c69e:	2300      	movs	r3, #0
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	370c      	adds	r7, #12
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr

0800c6da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c6da:	b480      	push	{r7}
 800c6dc:	b085      	sub	sp, #20
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3714      	adds	r7, #20
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr

0800c6fa <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800c6fa:	b480      	push	{r7}
 800c6fc:	b083      	sub	sp, #12
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
 800c702:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	370c      	adds	r7, #12
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr

0800c712 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c712:	b480      	push	{r7}
 800c714:	b08d      	sub	sp, #52	; 0x34
 800c716:	af00      	add	r7, sp, #0
 800c718:	60f8      	str	r0, [r7, #12]
 800c71a:	60b9      	str	r1, [r7, #8]
 800c71c:	4611      	mov	r1, r2
 800c71e:	461a      	mov	r2, r3
 800c720:	460b      	mov	r3, r1
 800c722:	80fb      	strh	r3, [r7, #6]
 800c724:	4613      	mov	r3, r2
 800c726:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c728:	88bb      	ldrh	r3, [r7, #4]
 800c72a:	3301      	adds	r3, #1
 800c72c:	085b      	lsrs	r3, r3, #1
 800c72e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c738:	88fa      	ldrh	r2, [r7, #6]
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	4413      	add	r3, r2
 800c73e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c742:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800c744:	6a3b      	ldr	r3, [r7, #32]
 800c746:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c748:	e01b      	b.n	800c782 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800c74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800c750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c752:	3301      	adds	r3, #1
 800c754:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	021b      	lsls	r3, r3, #8
 800c75e:	b29b      	uxth	r3, r3
 800c760:	461a      	mov	r2, r3
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	4313      	orrs	r3, r2
 800c766:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	b29a      	uxth	r2, r3
 800c76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c772:	3302      	adds	r3, #2
 800c774:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800c776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c778:	3301      	adds	r3, #1
 800c77a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	3b01      	subs	r3, #1
 800c780:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1e0      	bne.n	800c74a <USB_WritePMA+0x38>
  }
}
 800c788:	bf00      	nop
 800c78a:	3734      	adds	r7, #52	; 0x34
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c794:	b480      	push	{r7}
 800c796:	b08b      	sub	sp, #44	; 0x2c
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	4611      	mov	r1, r2
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	80fb      	strh	r3, [r7, #6]
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c7aa:	88bb      	ldrh	r3, [r7, #4]
 800c7ac:	085b      	lsrs	r3, r3, #1
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c7ba:	88fa      	ldrh	r2, [r7, #6]
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	4413      	add	r3, r2
 800c7c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c7c4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	627b      	str	r3, [r7, #36]	; 0x24
 800c7ca:	e018      	b.n	800c7fe <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c7cc:	6a3b      	ldr	r3, [r7, #32]
 800c7ce:	881b      	ldrh	r3, [r3, #0]
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c7d4:	6a3b      	ldr	r3, [r7, #32]
 800c7d6:	3302      	adds	r3, #2
 800c7d8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	0a1b      	lsrs	r3, r3, #8
 800c7ec:	b2da      	uxtb	r2, r3
 800c7ee:	69fb      	ldr	r3, [r7, #28]
 800c7f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800c7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	627b      	str	r3, [r7, #36]	; 0x24
 800c7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c800:	2b00      	cmp	r3, #0
 800c802:	d1e3      	bne.n	800c7cc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800c804:	88bb      	ldrh	r3, [r7, #4]
 800c806:	f003 0301 	and.w	r3, r3, #1
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d007      	beq.n	800c820 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800c810:	6a3b      	ldr	r3, [r7, #32]
 800c812:	881b      	ldrh	r3, [r3, #0]
 800c814:	b29b      	uxth	r3, r3
 800c816:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	69fb      	ldr	r3, [r7, #28]
 800c81e:	701a      	strb	r2, [r3, #0]
  }
}
 800c820:	bf00      	nop
 800c822:	372c      	adds	r7, #44	; 0x2c
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	460b      	mov	r3, r1
 800c836:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c838:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c83c:	f009 f8ca 	bl	80159d4 <USBD_static_malloc>
 800c840:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d105      	bne.n	800c854 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c850:	2302      	movs	r3, #2
 800c852:	e066      	b.n	800c922 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	7c1b      	ldrb	r3, [r3, #16]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d119      	bne.n	800c898 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c864:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c868:	2202      	movs	r2, #2
 800c86a:	2181      	movs	r1, #129	; 0x81
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f008 ff94 	bl	801579a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2201      	movs	r2, #1
 800c876:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c87c:	2202      	movs	r2, #2
 800c87e:	2101      	movs	r1, #1
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f008 ff8a 	bl	801579a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2210      	movs	r2, #16
 800c892:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c896:	e016      	b.n	800c8c6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c898:	2340      	movs	r3, #64	; 0x40
 800c89a:	2202      	movs	r2, #2
 800c89c:	2181      	movs	r1, #129	; 0x81
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f008 ff7b 	bl	801579a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c8aa:	2340      	movs	r3, #64	; 0x40
 800c8ac:	2202      	movs	r2, #2
 800c8ae:	2101      	movs	r1, #1
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f008 ff72 	bl	801579a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2210      	movs	r2, #16
 800c8c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c8c6:	2308      	movs	r3, #8
 800c8c8:	2203      	movs	r2, #3
 800c8ca:	2182      	movs	r1, #130	; 0x82
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f008 ff64 	bl	801579a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	7c1b      	ldrb	r3, [r3, #16]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d109      	bne.n	800c910 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c902:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c906:	2101      	movs	r1, #1
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f009 f82f 	bl	801596c <USBD_LL_PrepareReceive>
 800c90e:	e007      	b.n	800c920 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c916:	2340      	movs	r3, #64	; 0x40
 800c918:	2101      	movs	r1, #1
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f009 f826 	bl	801596c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c920:	2300      	movs	r3, #0
}
 800c922:	4618      	mov	r0, r3
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b082      	sub	sp, #8
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	460b      	mov	r3, r1
 800c934:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c936:	2181      	movs	r1, #129	; 0x81
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f008 ff54 	bl	80157e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c944:	2101      	movs	r1, #1
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f008 ff4d 	bl	80157e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c954:	2182      	movs	r1, #130	; 0x82
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f008 ff45 	bl	80157e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00e      	beq.n	800c994 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c986:	4618      	mov	r0, r3
 800c988:	f009 f832 	bl	80159f0 <USBD_static_free>
    pdev->pClassData = NULL;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2200      	movs	r2, #0
 800c990:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c994:	2300      	movs	r3, #0
}
 800c996:	4618      	mov	r0, r3
 800c998:	3708      	adds	r7, #8
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
	...

0800c9a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b086      	sub	sp, #24
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d101      	bne.n	800c9c8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c9c4:	2303      	movs	r3, #3
 800c9c6:	e0af      	b.n	800cb28 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d03f      	beq.n	800ca54 <USBD_CDC_Setup+0xb4>
 800c9d4:	2b20      	cmp	r3, #32
 800c9d6:	f040 809f 	bne.w	800cb18 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	88db      	ldrh	r3, [r3, #6]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d02e      	beq.n	800ca40 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	b25b      	sxtb	r3, r3
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	da16      	bge.n	800ca1a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	683a      	ldr	r2, [r7, #0]
 800c9f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c9f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c9fa:	683a      	ldr	r2, [r7, #0]
 800c9fc:	88d2      	ldrh	r2, [r2, #6]
 800c9fe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	88db      	ldrh	r3, [r3, #6]
 800ca04:	2b07      	cmp	r3, #7
 800ca06:	bf28      	it	cs
 800ca08:	2307      	movcs	r3, #7
 800ca0a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	89fa      	ldrh	r2, [r7, #14]
 800ca10:	4619      	mov	r1, r3
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f001 fa94 	bl	800df40 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ca18:	e085      	b.n	800cb26 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	785a      	ldrb	r2, [r3, #1]
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	88db      	ldrh	r3, [r3, #6]
 800ca28:	b2da      	uxtb	r2, r3
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ca30:	6939      	ldr	r1, [r7, #16]
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	88db      	ldrh	r3, [r3, #6]
 800ca36:	461a      	mov	r2, r3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f001 faad 	bl	800df98 <USBD_CtlPrepareRx>
      break;
 800ca3e:	e072      	b.n	800cb26 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	683a      	ldr	r2, [r7, #0]
 800ca4a:	7850      	ldrb	r0, [r2, #1]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	6839      	ldr	r1, [r7, #0]
 800ca50:	4798      	blx	r3
      break;
 800ca52:	e068      	b.n	800cb26 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	785b      	ldrb	r3, [r3, #1]
 800ca58:	2b0b      	cmp	r3, #11
 800ca5a:	d852      	bhi.n	800cb02 <USBD_CDC_Setup+0x162>
 800ca5c:	a201      	add	r2, pc, #4	; (adr r2, 800ca64 <USBD_CDC_Setup+0xc4>)
 800ca5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca62:	bf00      	nop
 800ca64:	0800ca95 	.word	0x0800ca95
 800ca68:	0800cb11 	.word	0x0800cb11
 800ca6c:	0800cb03 	.word	0x0800cb03
 800ca70:	0800cb03 	.word	0x0800cb03
 800ca74:	0800cb03 	.word	0x0800cb03
 800ca78:	0800cb03 	.word	0x0800cb03
 800ca7c:	0800cb03 	.word	0x0800cb03
 800ca80:	0800cb03 	.word	0x0800cb03
 800ca84:	0800cb03 	.word	0x0800cb03
 800ca88:	0800cb03 	.word	0x0800cb03
 800ca8c:	0800cabf 	.word	0x0800cabf
 800ca90:	0800cae9 	.word	0x0800cae9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	2b03      	cmp	r3, #3
 800ca9e:	d107      	bne.n	800cab0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800caa0:	f107 030a 	add.w	r3, r7, #10
 800caa4:	2202      	movs	r2, #2
 800caa6:	4619      	mov	r1, r3
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f001 fa49 	bl	800df40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800caae:	e032      	b.n	800cb16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cab0:	6839      	ldr	r1, [r7, #0]
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f001 f9d3 	bl	800de5e <USBD_CtlError>
            ret = USBD_FAIL;
 800cab8:	2303      	movs	r3, #3
 800caba:	75fb      	strb	r3, [r7, #23]
          break;
 800cabc:	e02b      	b.n	800cb16 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	2b03      	cmp	r3, #3
 800cac8:	d107      	bne.n	800cada <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800caca:	f107 030d 	add.w	r3, r7, #13
 800cace:	2201      	movs	r2, #1
 800cad0:	4619      	mov	r1, r3
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f001 fa34 	bl	800df40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cad8:	e01d      	b.n	800cb16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cada:	6839      	ldr	r1, [r7, #0]
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f001 f9be 	bl	800de5e <USBD_CtlError>
            ret = USBD_FAIL;
 800cae2:	2303      	movs	r3, #3
 800cae4:	75fb      	strb	r3, [r7, #23]
          break;
 800cae6:	e016      	b.n	800cb16 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	2b03      	cmp	r3, #3
 800caf2:	d00f      	beq.n	800cb14 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800caf4:	6839      	ldr	r1, [r7, #0]
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f001 f9b1 	bl	800de5e <USBD_CtlError>
            ret = USBD_FAIL;
 800cafc:	2303      	movs	r3, #3
 800cafe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cb00:	e008      	b.n	800cb14 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cb02:	6839      	ldr	r1, [r7, #0]
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f001 f9aa 	bl	800de5e <USBD_CtlError>
          ret = USBD_FAIL;
 800cb0a:	2303      	movs	r3, #3
 800cb0c:	75fb      	strb	r3, [r7, #23]
          break;
 800cb0e:	e002      	b.n	800cb16 <USBD_CDC_Setup+0x176>
          break;
 800cb10:	bf00      	nop
 800cb12:	e008      	b.n	800cb26 <USBD_CDC_Setup+0x186>
          break;
 800cb14:	bf00      	nop
      }
      break;
 800cb16:	e006      	b.n	800cb26 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800cb18:	6839      	ldr	r1, [r7, #0]
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f001 f99f 	bl	800de5e <USBD_CtlError>
      ret = USBD_FAIL;
 800cb20:	2303      	movs	r3, #3
 800cb22:	75fb      	strb	r3, [r7, #23]
      break;
 800cb24:	bf00      	nop
  }

  return (uint8_t)ret;
 800cb26:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3718      	adds	r7, #24
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	460b      	mov	r3, r1
 800cb3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d101      	bne.n	800cb52 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cb4e:	2303      	movs	r3, #3
 800cb50:	e04c      	b.n	800cbec <USBD_CDC_DataIn+0xbc>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cb5a:	78fa      	ldrb	r2, [r7, #3]
 800cb5c:	6879      	ldr	r1, [r7, #4]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	4413      	add	r3, r2
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	440b      	add	r3, r1
 800cb68:	3318      	adds	r3, #24
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d026      	beq.n	800cbbe <USBD_CDC_DataIn+0x8e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cb70:	78fa      	ldrb	r2, [r7, #3]
 800cb72:	6879      	ldr	r1, [r7, #4]
 800cb74:	4613      	mov	r3, r2
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	4413      	add	r3, r2
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	440b      	add	r3, r1
 800cb7e:	3318      	adds	r3, #24
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	78fa      	ldrb	r2, [r7, #3]
 800cb84:	68f9      	ldr	r1, [r7, #12]
 800cb86:	0152      	lsls	r2, r2, #5
 800cb88:	440a      	add	r2, r1
 800cb8a:	3238      	adds	r2, #56	; 0x38
 800cb8c:	6812      	ldr	r2, [r2, #0]
 800cb8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb92:	fb02 f201 	mul.w	r2, r2, r1
 800cb96:	1a9b      	subs	r3, r3, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d110      	bne.n	800cbbe <USBD_CDC_DataIn+0x8e>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cb9c:	78fa      	ldrb	r2, [r7, #3]
 800cb9e:	6879      	ldr	r1, [r7, #4]
 800cba0:	4613      	mov	r3, r2
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	4413      	add	r3, r2
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	440b      	add	r3, r1
 800cbaa:	3318      	adds	r3, #24
 800cbac:	2200      	movs	r2, #0
 800cbae:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cbb0:	78f9      	ldrb	r1, [r7, #3]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f008 feb7 	bl	801592a <USBD_LL_Transmit>
 800cbbc:	e015      	b.n	800cbea <USBD_CDC_DataIn+0xba>
  }
  else
  {
    hcdc->TxState = 0U;
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbcc:	691b      	ldr	r3, [r3, #16]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d00b      	beq.n	800cbea <USBD_CDC_DataIn+0xba>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbd8:	691b      	ldr	r3, [r3, #16]
 800cbda:	68ba      	ldr	r2, [r7, #8]
 800cbdc:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cbe0:	68ba      	ldr	r2, [r7, #8]
 800cbe2:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cbe6:	78fa      	ldrb	r2, [r7, #3]
 800cbe8:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cbea:	2300      	movs	r3, #0
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3710      	adds	r7, #16
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d101      	bne.n	800cc16 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cc12:	2303      	movs	r3, #3
 800cc14:	e015      	b.n	800cc42 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cc16:	78fb      	ldrb	r3, [r7, #3]
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f008 fec7 	bl	80159ae <USBD_LL_GetRxDataSize>
 800cc20:	4602      	mov	r2, r0
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cc3c:	4611      	mov	r1, r2
 800cc3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cc40:	2300      	movs	r3, #0
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3710      	adds	r7, #16
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b084      	sub	sp, #16
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d101      	bne.n	800cc64 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cc60:	2303      	movs	r3, #3
 800cc62:	e01b      	b.n	800cc9c <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d015      	beq.n	800cc9a <USBD_CDC_EP0_RxReady+0x50>
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cc74:	2bff      	cmp	r3, #255	; 0xff
 800cc76:	d010      	beq.n	800cc9a <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800cc86:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cc8e:	b292      	uxth	r2, r2
 800cc90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	22ff      	movs	r2, #255	; 0xff
 800cc96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2243      	movs	r2, #67	; 0x43
 800ccb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ccb2:	4b03      	ldr	r3, [pc, #12]	; (800ccc0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	370c      	adds	r7, #12
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr
 800ccc0:	200000d8 	.word	0x200000d8

0800ccc4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2243      	movs	r2, #67	; 0x43
 800ccd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ccd2:	4b03      	ldr	r3, [pc, #12]	; (800cce0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr
 800cce0:	20000094 	.word	0x20000094

0800cce4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2243      	movs	r2, #67	; 0x43
 800ccf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ccf2:	4b03      	ldr	r3, [pc, #12]	; (800cd00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr
 800cd00:	2000011c 	.word	0x2000011c

0800cd04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	220a      	movs	r2, #10
 800cd10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cd12:	4b03      	ldr	r3, [pc, #12]	; (800cd20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr
 800cd20:	20000050 	.word	0x20000050

0800cd24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d101      	bne.n	800cd38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cd34:	2303      	movs	r3, #3
 800cd36:	e004      	b.n	800cd42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	683a      	ldr	r2, [r7, #0]
 800cd3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800cd40:	2300      	movs	r3, #0
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	370c      	adds	r7, #12
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr

0800cd4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cd4e:	b480      	push	{r7}
 800cd50:	b087      	sub	sp, #28
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	60f8      	str	r0, [r7, #12]
 800cd56:	60b9      	str	r1, [r7, #8]
 800cd58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd60:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d101      	bne.n	800cd6c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cd68:	2303      	movs	r3, #3
 800cd6a:	e008      	b.n	800cd7e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	68ba      	ldr	r2, [r7, #8]
 800cd70:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	371c      	adds	r7, #28
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cd8a:	b480      	push	{r7}
 800cd8c:	b085      	sub	sp, #20
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
 800cd92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d101      	bne.n	800cda6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800cda2:	2303      	movs	r3, #3
 800cda4:	e004      	b.n	800cdb0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	683a      	ldr	r2, [r7, #0]
 800cdaa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cdae:	2300      	movs	r3, #0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cdca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d101      	bne.n	800cdde <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cdda:	2303      	movs	r3, #3
 800cddc:	e01a      	b.n	800ce14 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d114      	bne.n	800ce12 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2201      	movs	r2, #1
 800cdec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ce06:	2181      	movs	r1, #129	; 0x81
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f008 fd8e 	bl	801592a <USBD_LL_Transmit>

    ret = USBD_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ce12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3710      	adds	r7, #16
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d101      	bne.n	800ce3a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ce36:	2303      	movs	r3, #3
 800ce38:	e016      	b.n	800ce68 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	7c1b      	ldrb	r3, [r3, #16]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d109      	bne.n	800ce56 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce4c:	2101      	movs	r1, #1
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f008 fd8c 	bl	801596c <USBD_LL_PrepareReceive>
 800ce54:	e007      	b.n	800ce66 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce5c:	2340      	movs	r3, #64	; 0x40
 800ce5e:	2101      	movs	r1, #1
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f008 fd83 	bl	801596c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ce66:	2300      	movs	r3, #0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3710      	adds	r7, #16
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	4613      	mov	r3, r2
 800ce7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d101      	bne.n	800ce88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ce84:	2303      	movs	r3, #3
 800ce86:	e01f      	b.n	800cec8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2200      	movs	r2, #0
 800ce94:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d003      	beq.n	800ceae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	68ba      	ldr	r2, [r7, #8]
 800ceaa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	79fa      	ldrb	r2, [r7, #7]
 800ceba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cebc:	68f8      	ldr	r0, [r7, #12]
 800cebe:	f008 fbef 	bl	80156a0 <USBD_LL_Init>
 800cec2:	4603      	mov	r3, r0
 800cec4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cec6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3718      	adds	r7, #24
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ceda:	2300      	movs	r3, #0
 800cedc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d101      	bne.n	800cee8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cee4:	2303      	movs	r3, #3
 800cee6:	e016      	b.n	800cf16 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	683a      	ldr	r2, [r7, #0]
 800ceec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d00b      	beq.n	800cf14 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf04:	f107 020e 	add.w	r2, r7, #14
 800cf08:	4610      	mov	r0, r2
 800cf0a:	4798      	blx	r3
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cf14:	2300      	movs	r3, #0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3710      	adds	r7, #16
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b082      	sub	sp, #8
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f008 fc1c 	bl	8015764 <USBD_LL_Start>
 800cf2c:	4603      	mov	r3, r0
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3708      	adds	r7, #8
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cf36:	b480      	push	{r7}
 800cf38:	b083      	sub	sp, #12
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	460b      	mov	r3, r1
 800cf56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cf58:	2303      	movs	r3, #3
 800cf5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d009      	beq.n	800cf7a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	78fa      	ldrb	r2, [r7, #3]
 800cf70:	4611      	mov	r1, r2
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	4798      	blx	r3
 800cf76:	4603      	mov	r3, r0
 800cf78:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cf7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3710      	adds	r7, #16
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d007      	beq.n	800cfaa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	78fa      	ldrb	r2, [r7, #3]
 800cfa4:	4611      	mov	r1, r2
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	4798      	blx	r3
  }

  return USBD_OK;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cfc4:	6839      	ldr	r1, [r7, #0]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f000 ff0f 	bl	800ddea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cfda:	461a      	mov	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cfe8:	f003 031f 	and.w	r3, r3, #31
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d00e      	beq.n	800d00e <USBD_LL_SetupStage+0x5a>
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d302      	bcc.n	800cffa <USBD_LL_SetupStage+0x46>
 800cff4:	2b02      	cmp	r3, #2
 800cff6:	d014      	beq.n	800d022 <USBD_LL_SetupStage+0x6e>
 800cff8:	e01d      	b.n	800d036 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d000:	4619      	mov	r1, r3
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f000 f9ee 	bl	800d3e4 <USBD_StdDevReq>
 800d008:	4603      	mov	r3, r0
 800d00a:	73fb      	strb	r3, [r7, #15]
      break;
 800d00c:	e020      	b.n	800d050 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d014:	4619      	mov	r1, r3
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f000 fa52 	bl	800d4c0 <USBD_StdItfReq>
 800d01c:	4603      	mov	r3, r0
 800d01e:	73fb      	strb	r3, [r7, #15]
      break;
 800d020:	e016      	b.n	800d050 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d028:	4619      	mov	r1, r3
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 fa8f 	bl	800d54e <USBD_StdEPReq>
 800d030:	4603      	mov	r3, r0
 800d032:	73fb      	strb	r3, [r7, #15]
      break;
 800d034:	e00c      	b.n	800d050 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d03c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d040:	b2db      	uxtb	r3, r3
 800d042:	4619      	mov	r1, r3
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f008 fbed 	bl	8015824 <USBD_LL_StallEP>
 800d04a:	4603      	mov	r3, r0
 800d04c:	73fb      	strb	r3, [r7, #15]
      break;
 800d04e:	bf00      	nop
  }

  return ret;
 800d050:	7bfb      	ldrb	r3, [r7, #15]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}

0800d05a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b086      	sub	sp, #24
 800d05e:	af00      	add	r7, sp, #0
 800d060:	60f8      	str	r0, [r7, #12]
 800d062:	460b      	mov	r3, r1
 800d064:	607a      	str	r2, [r7, #4]
 800d066:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d068:	7afb      	ldrb	r3, [r7, #11]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d138      	bne.n	800d0e0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d074:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d07c:	2b03      	cmp	r3, #3
 800d07e:	d14a      	bne.n	800d116 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	689a      	ldr	r2, [r3, #8]
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	68db      	ldr	r3, [r3, #12]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d913      	bls.n	800d0b4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	689a      	ldr	r2, [r3, #8]
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	1ad2      	subs	r2, r2, r3
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	68da      	ldr	r2, [r3, #12]
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	689b      	ldr	r3, [r3, #8]
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	bf28      	it	cs
 800d0a6:	4613      	movcs	r3, r2
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	6879      	ldr	r1, [r7, #4]
 800d0ac:	68f8      	ldr	r0, [r7, #12]
 800d0ae:	f000 ff90 	bl	800dfd2 <USBD_CtlContinueRx>
 800d0b2:	e030      	b.n	800d116 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0ba:	b2db      	uxtb	r3, r3
 800d0bc:	2b03      	cmp	r3, #3
 800d0be:	d10b      	bne.n	800d0d8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0c6:	691b      	ldr	r3, [r3, #16]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d005      	beq.n	800d0d8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0d2:	691b      	ldr	r3, [r3, #16]
 800d0d4:	68f8      	ldr	r0, [r7, #12]
 800d0d6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d0d8:	68f8      	ldr	r0, [r7, #12]
 800d0da:	f000 ff8b 	bl	800dff4 <USBD_CtlSendStatus>
 800d0de:	e01a      	b.n	800d116 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	2b03      	cmp	r3, #3
 800d0ea:	d114      	bne.n	800d116 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0f2:	699b      	ldr	r3, [r3, #24]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00e      	beq.n	800d116 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0fe:	699b      	ldr	r3, [r3, #24]
 800d100:	7afa      	ldrb	r2, [r7, #11]
 800d102:	4611      	mov	r1, r2
 800d104:	68f8      	ldr	r0, [r7, #12]
 800d106:	4798      	blx	r3
 800d108:	4603      	mov	r3, r0
 800d10a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d10c:	7dfb      	ldrb	r3, [r7, #23]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d001      	beq.n	800d116 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d112:	7dfb      	ldrb	r3, [r7, #23]
 800d114:	e000      	b.n	800d118 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3718      	adds	r7, #24
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b086      	sub	sp, #24
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	460b      	mov	r3, r1
 800d12a:	607a      	str	r2, [r7, #4]
 800d12c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d12e:	7afb      	ldrb	r3, [r7, #11]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d16b      	bne.n	800d20c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	3314      	adds	r3, #20
 800d138:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d140:	2b02      	cmp	r3, #2
 800d142:	d156      	bne.n	800d1f2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	689a      	ldr	r2, [r3, #8]
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d914      	bls.n	800d17a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	689a      	ldr	r2, [r3, #8]
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	1ad2      	subs	r2, r2, r3
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	461a      	mov	r2, r3
 800d164:	6879      	ldr	r1, [r7, #4]
 800d166:	68f8      	ldr	r0, [r7, #12]
 800d168:	f000 ff05 	bl	800df76 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d16c:	2300      	movs	r3, #0
 800d16e:	2200      	movs	r2, #0
 800d170:	2100      	movs	r1, #0
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	f008 fbfa 	bl	801596c <USBD_LL_PrepareReceive>
 800d178:	e03b      	b.n	800d1f2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	68da      	ldr	r2, [r3, #12]
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	429a      	cmp	r2, r3
 800d184:	d11c      	bne.n	800d1c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	685a      	ldr	r2, [r3, #4]
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d18e:	429a      	cmp	r2, r3
 800d190:	d316      	bcc.n	800d1c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	685a      	ldr	r2, [r3, #4]
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d20f      	bcs.n	800d1c0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	2100      	movs	r1, #0
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	f000 fee6 	bl	800df76 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f008 fbd7 	bl	801596c <USBD_LL_PrepareReceive>
 800d1be:	e018      	b.n	800d1f2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	2b03      	cmp	r3, #3
 800d1ca:	d10b      	bne.n	800d1e4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d005      	beq.n	800d1e4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1de:	68db      	ldr	r3, [r3, #12]
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1e4:	2180      	movs	r1, #128	; 0x80
 800d1e6:	68f8      	ldr	r0, [r7, #12]
 800d1e8:	f008 fb1c 	bl	8015824 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	f000 ff14 	bl	800e01a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d122      	bne.n	800d242 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d1fc:	68f8      	ldr	r0, [r7, #12]
 800d1fe:	f7ff fe9a 	bl	800cf36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2200      	movs	r2, #0
 800d206:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d20a:	e01a      	b.n	800d242 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d212:	b2db      	uxtb	r3, r3
 800d214:	2b03      	cmp	r3, #3
 800d216:	d114      	bne.n	800d242 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d21e:	695b      	ldr	r3, [r3, #20]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d00e      	beq.n	800d242 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d22a:	695b      	ldr	r3, [r3, #20]
 800d22c:	7afa      	ldrb	r2, [r7, #11]
 800d22e:	4611      	mov	r1, r2
 800d230:	68f8      	ldr	r0, [r7, #12]
 800d232:	4798      	blx	r3
 800d234:	4603      	mov	r3, r0
 800d236:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d238:	7dfb      	ldrb	r3, [r7, #23]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d001      	beq.n	800d242 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d23e:	7dfb      	ldrb	r3, [r7, #23]
 800d240:	e000      	b.n	800d244 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d242:	2300      	movs	r3, #0
}
 800d244:	4618      	mov	r0, r3
 800d246:	3718      	adds	r7, #24
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2201      	movs	r2, #1
 800d258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2200      	movs	r2, #0
 800d26e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d101      	bne.n	800d280 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d27c:	2303      	movs	r3, #3
 800d27e:	e02f      	b.n	800d2e0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d286:	2b00      	cmp	r3, #0
 800d288:	d00f      	beq.n	800d2aa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d009      	beq.n	800d2aa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	6852      	ldr	r2, [r2, #4]
 800d2a2:	b2d2      	uxtb	r2, r2
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2aa:	2340      	movs	r3, #64	; 0x40
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	2100      	movs	r1, #0
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f008 fa72 	bl	801579a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2240      	movs	r2, #64	; 0x40
 800d2c2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2c6:	2340      	movs	r3, #64	; 0x40
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	2180      	movs	r1, #128	; 0x80
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f008 fa64 	bl	801579a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2240      	movs	r2, #64	; 0x40
 800d2dc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b083      	sub	sp, #12
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	78fa      	ldrb	r2, [r7, #3]
 800d2f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	370c      	adds	r7, #12
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr

0800d308 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d308:	b480      	push	{r7}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d316:	b2da      	uxtb	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2204      	movs	r2, #4
 800d322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d326:	2300      	movs	r3, #0
}
 800d328:	4618      	mov	r0, r3
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d342:	b2db      	uxtb	r3, r3
 800d344:	2b04      	cmp	r3, #4
 800d346:	d106      	bne.n	800d356 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d34e:	b2da      	uxtb	r2, r3
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d356:	2300      	movs	r3, #0
}
 800d358:	4618      	mov	r0, r3
 800d35a:	370c      	adds	r7, #12
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr

0800d364 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d372:	2b00      	cmp	r3, #0
 800d374:	d101      	bne.n	800d37a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d376:	2303      	movs	r3, #3
 800d378:	e012      	b.n	800d3a0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d380:	b2db      	uxtb	r3, r3
 800d382:	2b03      	cmp	r3, #3
 800d384:	d10b      	bne.n	800d39e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d38c:	69db      	ldr	r3, [r3, #28]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d005      	beq.n	800d39e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d398:	69db      	ldr	r3, [r3, #28]
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b087      	sub	sp, #28
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d3c6:	8a3b      	ldrh	r3, [r7, #16]
 800d3c8:	021b      	lsls	r3, r3, #8
 800d3ca:	b21a      	sxth	r2, r3
 800d3cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	b21b      	sxth	r3, r3
 800d3d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d3d6:	89fb      	ldrh	r3, [r7, #14]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	371c      	adds	r7, #28
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3fa:	2b20      	cmp	r3, #32
 800d3fc:	d004      	beq.n	800d408 <USBD_StdDevReq+0x24>
 800d3fe:	2b40      	cmp	r3, #64	; 0x40
 800d400:	d002      	beq.n	800d408 <USBD_StdDevReq+0x24>
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00a      	beq.n	800d41c <USBD_StdDevReq+0x38>
 800d406:	e050      	b.n	800d4aa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	6839      	ldr	r1, [r7, #0]
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	4798      	blx	r3
 800d416:	4603      	mov	r3, r0
 800d418:	73fb      	strb	r3, [r7, #15]
      break;
 800d41a:	e04b      	b.n	800d4b4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	785b      	ldrb	r3, [r3, #1]
 800d420:	2b09      	cmp	r3, #9
 800d422:	d83c      	bhi.n	800d49e <USBD_StdDevReq+0xba>
 800d424:	a201      	add	r2, pc, #4	; (adr r2, 800d42c <USBD_StdDevReq+0x48>)
 800d426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d42a:	bf00      	nop
 800d42c:	0800d481 	.word	0x0800d481
 800d430:	0800d495 	.word	0x0800d495
 800d434:	0800d49f 	.word	0x0800d49f
 800d438:	0800d48b 	.word	0x0800d48b
 800d43c:	0800d49f 	.word	0x0800d49f
 800d440:	0800d45f 	.word	0x0800d45f
 800d444:	0800d455 	.word	0x0800d455
 800d448:	0800d49f 	.word	0x0800d49f
 800d44c:	0800d477 	.word	0x0800d477
 800d450:	0800d469 	.word	0x0800d469
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d454:	6839      	ldr	r1, [r7, #0]
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 f9d4 	bl	800d804 <USBD_GetDescriptor>
          break;
 800d45c:	e024      	b.n	800d4a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d45e:	6839      	ldr	r1, [r7, #0]
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f000 fb39 	bl	800dad8 <USBD_SetAddress>
          break;
 800d466:	e01f      	b.n	800d4a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d468:	6839      	ldr	r1, [r7, #0]
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 fb78 	bl	800db60 <USBD_SetConfig>
 800d470:	4603      	mov	r3, r0
 800d472:	73fb      	strb	r3, [r7, #15]
          break;
 800d474:	e018      	b.n	800d4a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d476:	6839      	ldr	r1, [r7, #0]
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 fc17 	bl	800dcac <USBD_GetConfig>
          break;
 800d47e:	e013      	b.n	800d4a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d480:	6839      	ldr	r1, [r7, #0]
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 fc47 	bl	800dd16 <USBD_GetStatus>
          break;
 800d488:	e00e      	b.n	800d4a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d48a:	6839      	ldr	r1, [r7, #0]
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 fc76 	bl	800dd7e <USBD_SetFeature>
          break;
 800d492:	e009      	b.n	800d4a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d494:	6839      	ldr	r1, [r7, #0]
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f000 fc85 	bl	800dda6 <USBD_ClrFeature>
          break;
 800d49c:	e004      	b.n	800d4a8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d49e:	6839      	ldr	r1, [r7, #0]
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f000 fcdc 	bl	800de5e <USBD_CtlError>
          break;
 800d4a6:	bf00      	nop
      }
      break;
 800d4a8:	e004      	b.n	800d4b4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d4aa:	6839      	ldr	r1, [r7, #0]
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 fcd6 	bl	800de5e <USBD_CtlError>
      break;
 800d4b2:	bf00      	nop
  }

  return ret;
 800d4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3710      	adds	r7, #16
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop

0800d4c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d4d6:	2b20      	cmp	r3, #32
 800d4d8:	d003      	beq.n	800d4e2 <USBD_StdItfReq+0x22>
 800d4da:	2b40      	cmp	r3, #64	; 0x40
 800d4dc:	d001      	beq.n	800d4e2 <USBD_StdItfReq+0x22>
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d12b      	bne.n	800d53a <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	3b01      	subs	r3, #1
 800d4ec:	2b02      	cmp	r3, #2
 800d4ee:	d81d      	bhi.n	800d52c <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	889b      	ldrh	r3, [r3, #4]
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d813      	bhi.n	800d522 <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d500:	689b      	ldr	r3, [r3, #8]
 800d502:	6839      	ldr	r1, [r7, #0]
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	4798      	blx	r3
 800d508:	4603      	mov	r3, r0
 800d50a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	88db      	ldrh	r3, [r3, #6]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d110      	bne.n	800d536 <USBD_StdItfReq+0x76>
 800d514:	7bfb      	ldrb	r3, [r7, #15]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10d      	bne.n	800d536 <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 fd6a 	bl	800dff4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d520:	e009      	b.n	800d536 <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 800d522:	6839      	ldr	r1, [r7, #0]
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 fc9a 	bl	800de5e <USBD_CtlError>
          break;
 800d52a:	e004      	b.n	800d536 <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 800d52c:	6839      	ldr	r1, [r7, #0]
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 fc95 	bl	800de5e <USBD_CtlError>
          break;
 800d534:	e000      	b.n	800d538 <USBD_StdItfReq+0x78>
          break;
 800d536:	bf00      	nop
      }
      break;
 800d538:	e004      	b.n	800d544 <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 800d53a:	6839      	ldr	r1, [r7, #0]
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 fc8e 	bl	800de5e <USBD_CtlError>
      break;
 800d542:	bf00      	nop
  }

  return ret;
 800d544:	7bfb      	ldrb	r3, [r7, #15]
}
 800d546:	4618      	mov	r0, r3
 800d548:	3710      	adds	r7, #16
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}

0800d54e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d54e:	b580      	push	{r7, lr}
 800d550:	b084      	sub	sp, #16
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
 800d556:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d558:	2300      	movs	r3, #0
 800d55a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	889b      	ldrh	r3, [r3, #4]
 800d560:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	781b      	ldrb	r3, [r3, #0]
 800d566:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d56a:	2b20      	cmp	r3, #32
 800d56c:	d004      	beq.n	800d578 <USBD_StdEPReq+0x2a>
 800d56e:	2b40      	cmp	r3, #64	; 0x40
 800d570:	d002      	beq.n	800d578 <USBD_StdEPReq+0x2a>
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00a      	beq.n	800d58c <USBD_StdEPReq+0x3e>
 800d576:	e13a      	b.n	800d7ee <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	6839      	ldr	r1, [r7, #0]
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	4798      	blx	r3
 800d586:	4603      	mov	r3, r0
 800d588:	73fb      	strb	r3, [r7, #15]
      break;
 800d58a:	e135      	b.n	800d7f8 <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	785b      	ldrb	r3, [r3, #1]
 800d590:	2b01      	cmp	r3, #1
 800d592:	d03f      	beq.n	800d614 <USBD_StdEPReq+0xc6>
 800d594:	2b03      	cmp	r3, #3
 800d596:	d002      	beq.n	800d59e <USBD_StdEPReq+0x50>
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d07b      	beq.n	800d694 <USBD_StdEPReq+0x146>
 800d59c:	e121      	b.n	800d7e2 <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	2b02      	cmp	r3, #2
 800d5a8:	d002      	beq.n	800d5b0 <USBD_StdEPReq+0x62>
 800d5aa:	2b03      	cmp	r3, #3
 800d5ac:	d015      	beq.n	800d5da <USBD_StdEPReq+0x8c>
 800d5ae:	e02b      	b.n	800d608 <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5b0:	7bbb      	ldrb	r3, [r7, #14]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d00c      	beq.n	800d5d0 <USBD_StdEPReq+0x82>
 800d5b6:	7bbb      	ldrb	r3, [r7, #14]
 800d5b8:	2b80      	cmp	r3, #128	; 0x80
 800d5ba:	d009      	beq.n	800d5d0 <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d5bc:	7bbb      	ldrb	r3, [r7, #14]
 800d5be:	4619      	mov	r1, r3
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f008 f92f 	bl	8015824 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5c6:	2180      	movs	r1, #128	; 0x80
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f008 f92b 	bl	8015824 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d5ce:	e020      	b.n	800d612 <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 800d5d0:	6839      	ldr	r1, [r7, #0]
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f000 fc43 	bl	800de5e <USBD_CtlError>
              break;
 800d5d8:	e01b      	b.n	800d612 <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	885b      	ldrh	r3, [r3, #2]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d10e      	bne.n	800d600 <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d5e2:	7bbb      	ldrb	r3, [r7, #14]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d00b      	beq.n	800d600 <USBD_StdEPReq+0xb2>
 800d5e8:	7bbb      	ldrb	r3, [r7, #14]
 800d5ea:	2b80      	cmp	r3, #128	; 0x80
 800d5ec:	d008      	beq.n	800d600 <USBD_StdEPReq+0xb2>
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	88db      	ldrh	r3, [r3, #6]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d104      	bne.n	800d600 <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d5f6:	7bbb      	ldrb	r3, [r7, #14]
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f008 f912 	bl	8015824 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 fcf7 	bl	800dff4 <USBD_CtlSendStatus>

              break;
 800d606:	e004      	b.n	800d612 <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 800d608:	6839      	ldr	r1, [r7, #0]
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 fc27 	bl	800de5e <USBD_CtlError>
              break;
 800d610:	bf00      	nop
          }
          break;
 800d612:	e0eb      	b.n	800d7ec <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d61a:	b2db      	uxtb	r3, r3
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	d002      	beq.n	800d626 <USBD_StdEPReq+0xd8>
 800d620:	2b03      	cmp	r3, #3
 800d622:	d015      	beq.n	800d650 <USBD_StdEPReq+0x102>
 800d624:	e02f      	b.n	800d686 <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d626:	7bbb      	ldrb	r3, [r7, #14]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d00c      	beq.n	800d646 <USBD_StdEPReq+0xf8>
 800d62c:	7bbb      	ldrb	r3, [r7, #14]
 800d62e:	2b80      	cmp	r3, #128	; 0x80
 800d630:	d009      	beq.n	800d646 <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d632:	7bbb      	ldrb	r3, [r7, #14]
 800d634:	4619      	mov	r1, r3
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f008 f8f4 	bl	8015824 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d63c:	2180      	movs	r1, #128	; 0x80
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f008 f8f0 	bl	8015824 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d644:	e025      	b.n	800d692 <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 800d646:	6839      	ldr	r1, [r7, #0]
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f000 fc08 	bl	800de5e <USBD_CtlError>
              break;
 800d64e:	e020      	b.n	800d692 <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	885b      	ldrh	r3, [r3, #2]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d11b      	bne.n	800d690 <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d658:	7bbb      	ldrb	r3, [r7, #14]
 800d65a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d004      	beq.n	800d66c <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d662:	7bbb      	ldrb	r3, [r7, #14]
 800d664:	4619      	mov	r1, r3
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f008 f8fb 	bl	8015862 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 fcc1 	bl	800dff4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	6839      	ldr	r1, [r7, #0]
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	4798      	blx	r3
 800d680:	4603      	mov	r3, r0
 800d682:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d684:	e004      	b.n	800d690 <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 800d686:	6839      	ldr	r1, [r7, #0]
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f000 fbe8 	bl	800de5e <USBD_CtlError>
              break;
 800d68e:	e000      	b.n	800d692 <USBD_StdEPReq+0x144>
              break;
 800d690:	bf00      	nop
          }
          break;
 800d692:	e0ab      	b.n	800d7ec <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	2b02      	cmp	r3, #2
 800d69e:	d002      	beq.n	800d6a6 <USBD_StdEPReq+0x158>
 800d6a0:	2b03      	cmp	r3, #3
 800d6a2:	d032      	beq.n	800d70a <USBD_StdEPReq+0x1bc>
 800d6a4:	e097      	b.n	800d7d6 <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d6a6:	7bbb      	ldrb	r3, [r7, #14]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d007      	beq.n	800d6bc <USBD_StdEPReq+0x16e>
 800d6ac:	7bbb      	ldrb	r3, [r7, #14]
 800d6ae:	2b80      	cmp	r3, #128	; 0x80
 800d6b0:	d004      	beq.n	800d6bc <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 800d6b2:	6839      	ldr	r1, [r7, #0]
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 fbd2 	bl	800de5e <USBD_CtlError>
                break;
 800d6ba:	e091      	b.n	800d7e0 <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	da0b      	bge.n	800d6dc <USBD_StdEPReq+0x18e>
 800d6c4:	7bbb      	ldrb	r3, [r7, #14]
 800d6c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	4413      	add	r3, r2
 800d6d0:	009b      	lsls	r3, r3, #2
 800d6d2:	3310      	adds	r3, #16
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	3304      	adds	r3, #4
 800d6da:	e00b      	b.n	800d6f4 <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d6dc:	7bbb      	ldrb	r3, [r7, #14]
 800d6de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	4413      	add	r3, r2
 800d6e8:	009b      	lsls	r3, r3, #2
 800d6ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	4413      	add	r3, r2
 800d6f2:	3304      	adds	r3, #4
 800d6f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	2202      	movs	r2, #2
 800d700:	4619      	mov	r1, r3
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 fc1c 	bl	800df40 <USBD_CtlSendData>
              break;
 800d708:	e06a      	b.n	800d7e0 <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d70a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	da11      	bge.n	800d736 <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d712:	7bbb      	ldrb	r3, [r7, #14]
 800d714:	f003 020f 	and.w	r2, r3, #15
 800d718:	6879      	ldr	r1, [r7, #4]
 800d71a:	4613      	mov	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	4413      	add	r3, r2
 800d720:	009b      	lsls	r3, r3, #2
 800d722:	440b      	add	r3, r1
 800d724:	3324      	adds	r3, #36	; 0x24
 800d726:	881b      	ldrh	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d117      	bne.n	800d75c <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 fb95 	bl	800de5e <USBD_CtlError>
                  break;
 800d734:	e054      	b.n	800d7e0 <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d736:	7bbb      	ldrb	r3, [r7, #14]
 800d738:	f003 020f 	and.w	r2, r3, #15
 800d73c:	6879      	ldr	r1, [r7, #4]
 800d73e:	4613      	mov	r3, r2
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	4413      	add	r3, r2
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	440b      	add	r3, r1
 800d748:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d74c:	881b      	ldrh	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d104      	bne.n	800d75c <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800d752:	6839      	ldr	r1, [r7, #0]
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 fb82 	bl	800de5e <USBD_CtlError>
                  break;
 800d75a:	e041      	b.n	800d7e0 <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d75c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d760:	2b00      	cmp	r3, #0
 800d762:	da0b      	bge.n	800d77c <USBD_StdEPReq+0x22e>
 800d764:	7bbb      	ldrb	r3, [r7, #14]
 800d766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d76a:	4613      	mov	r3, r2
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	4413      	add	r3, r2
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	3310      	adds	r3, #16
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	4413      	add	r3, r2
 800d778:	3304      	adds	r3, #4
 800d77a:	e00b      	b.n	800d794 <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d77c:	7bbb      	ldrb	r3, [r7, #14]
 800d77e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d782:	4613      	mov	r3, r2
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	4413      	add	r3, r2
 800d788:	009b      	lsls	r3, r3, #2
 800d78a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	4413      	add	r3, r2
 800d792:	3304      	adds	r3, #4
 800d794:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d796:	7bbb      	ldrb	r3, [r7, #14]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d002      	beq.n	800d7a2 <USBD_StdEPReq+0x254>
 800d79c:	7bbb      	ldrb	r3, [r7, #14]
 800d79e:	2b80      	cmp	r3, #128	; 0x80
 800d7a0:	d103      	bne.n	800d7aa <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	601a      	str	r2, [r3, #0]
 800d7a8:	e00e      	b.n	800d7c8 <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d7aa:	7bbb      	ldrb	r3, [r7, #14]
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f008 f876 	bl	80158a0 <USBD_LL_IsStallEP>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d003      	beq.n	800d7c2 <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	2201      	movs	r2, #1
 800d7be:	601a      	str	r2, [r3, #0]
 800d7c0:	e002      	b.n	800d7c8 <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	2202      	movs	r2, #2
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 fbb6 	bl	800df40 <USBD_CtlSendData>
              break;
 800d7d4:	e004      	b.n	800d7e0 <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 800d7d6:	6839      	ldr	r1, [r7, #0]
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 fb40 	bl	800de5e <USBD_CtlError>
              break;
 800d7de:	bf00      	nop
          }
          break;
 800d7e0:	e004      	b.n	800d7ec <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 800d7e2:	6839      	ldr	r1, [r7, #0]
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f000 fb3a 	bl	800de5e <USBD_CtlError>
          break;
 800d7ea:	bf00      	nop
      }
      break;
 800d7ec:	e004      	b.n	800d7f8 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 800d7ee:	6839      	ldr	r1, [r7, #0]
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 fb34 	bl	800de5e <USBD_CtlError>
      break;
 800d7f6:	bf00      	nop
  }

  return ret;
 800d7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3710      	adds	r7, #16
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
	...

0800d804 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b084      	sub	sp, #16
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d80e:	2300      	movs	r3, #0
 800d810:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d812:	2300      	movs	r3, #0
 800d814:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d816:	2300      	movs	r3, #0
 800d818:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	885b      	ldrh	r3, [r3, #2]
 800d81e:	0a1b      	lsrs	r3, r3, #8
 800d820:	b29b      	uxth	r3, r3
 800d822:	3b01      	subs	r3, #1
 800d824:	2b06      	cmp	r3, #6
 800d826:	f200 8128 	bhi.w	800da7a <USBD_GetDescriptor+0x276>
 800d82a:	a201      	add	r2, pc, #4	; (adr r2, 800d830 <USBD_GetDescriptor+0x2c>)
 800d82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d830:	0800d84d 	.word	0x0800d84d
 800d834:	0800d865 	.word	0x0800d865
 800d838:	0800d8a5 	.word	0x0800d8a5
 800d83c:	0800da7b 	.word	0x0800da7b
 800d840:	0800da7b 	.word	0x0800da7b
 800d844:	0800da1b 	.word	0x0800da1b
 800d848:	0800da47 	.word	0x0800da47
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	7c12      	ldrb	r2, [r2, #16]
 800d858:	f107 0108 	add.w	r1, r7, #8
 800d85c:	4610      	mov	r0, r2
 800d85e:	4798      	blx	r3
 800d860:	60f8      	str	r0, [r7, #12]
      break;
 800d862:	e112      	b.n	800da8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	7c1b      	ldrb	r3, [r3, #16]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d10d      	bne.n	800d888 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d874:	f107 0208 	add.w	r2, r7, #8
 800d878:	4610      	mov	r0, r2
 800d87a:	4798      	blx	r3
 800d87c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	3301      	adds	r3, #1
 800d882:	2202      	movs	r2, #2
 800d884:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d886:	e100      	b.n	800da8a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d890:	f107 0208 	add.w	r2, r7, #8
 800d894:	4610      	mov	r0, r2
 800d896:	4798      	blx	r3
 800d898:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	3301      	adds	r3, #1
 800d89e:	2202      	movs	r2, #2
 800d8a0:	701a      	strb	r2, [r3, #0]
      break;
 800d8a2:	e0f2      	b.n	800da8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	885b      	ldrh	r3, [r3, #2]
 800d8a8:	b2db      	uxtb	r3, r3
 800d8aa:	2b05      	cmp	r3, #5
 800d8ac:	f200 80ac 	bhi.w	800da08 <USBD_GetDescriptor+0x204>
 800d8b0:	a201      	add	r2, pc, #4	; (adr r2, 800d8b8 <USBD_GetDescriptor+0xb4>)
 800d8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b6:	bf00      	nop
 800d8b8:	0800d8d1 	.word	0x0800d8d1
 800d8bc:	0800d905 	.word	0x0800d905
 800d8c0:	0800d939 	.word	0x0800d939
 800d8c4:	0800d96d 	.word	0x0800d96d
 800d8c8:	0800d9a1 	.word	0x0800d9a1
 800d8cc:	0800d9d5 	.word	0x0800d9d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d00b      	beq.n	800d8f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	7c12      	ldrb	r2, [r2, #16]
 800d8e8:	f107 0108 	add.w	r1, r7, #8
 800d8ec:	4610      	mov	r0, r2
 800d8ee:	4798      	blx	r3
 800d8f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8f2:	e091      	b.n	800da18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d8f4:	6839      	ldr	r1, [r7, #0]
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 fab1 	bl	800de5e <USBD_CtlError>
            err++;
 800d8fc:	7afb      	ldrb	r3, [r7, #11]
 800d8fe:	3301      	adds	r3, #1
 800d900:	72fb      	strb	r3, [r7, #11]
          break;
 800d902:	e089      	b.n	800da18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d90a:	689b      	ldr	r3, [r3, #8]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00b      	beq.n	800d928 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	7c12      	ldrb	r2, [r2, #16]
 800d91c:	f107 0108 	add.w	r1, r7, #8
 800d920:	4610      	mov	r0, r2
 800d922:	4798      	blx	r3
 800d924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d926:	e077      	b.n	800da18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d928:	6839      	ldr	r1, [r7, #0]
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 fa97 	bl	800de5e <USBD_CtlError>
            err++;
 800d930:	7afb      	ldrb	r3, [r7, #11]
 800d932:	3301      	adds	r3, #1
 800d934:	72fb      	strb	r3, [r7, #11]
          break;
 800d936:	e06f      	b.n	800da18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00b      	beq.n	800d95c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	7c12      	ldrb	r2, [r2, #16]
 800d950:	f107 0108 	add.w	r1, r7, #8
 800d954:	4610      	mov	r0, r2
 800d956:	4798      	blx	r3
 800d958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d95a:	e05d      	b.n	800da18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d95c:	6839      	ldr	r1, [r7, #0]
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 fa7d 	bl	800de5e <USBD_CtlError>
            err++;
 800d964:	7afb      	ldrb	r3, [r7, #11]
 800d966:	3301      	adds	r3, #1
 800d968:	72fb      	strb	r3, [r7, #11]
          break;
 800d96a:	e055      	b.n	800da18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d972:	691b      	ldr	r3, [r3, #16]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d00b      	beq.n	800d990 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d97e:	691b      	ldr	r3, [r3, #16]
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	7c12      	ldrb	r2, [r2, #16]
 800d984:	f107 0108 	add.w	r1, r7, #8
 800d988:	4610      	mov	r0, r2
 800d98a:	4798      	blx	r3
 800d98c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d98e:	e043      	b.n	800da18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d990:	6839      	ldr	r1, [r7, #0]
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f000 fa63 	bl	800de5e <USBD_CtlError>
            err++;
 800d998:	7afb      	ldrb	r3, [r7, #11]
 800d99a:	3301      	adds	r3, #1
 800d99c:	72fb      	strb	r3, [r7, #11]
          break;
 800d99e:	e03b      	b.n	800da18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9a6:	695b      	ldr	r3, [r3, #20]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d00b      	beq.n	800d9c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9b2:	695b      	ldr	r3, [r3, #20]
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	7c12      	ldrb	r2, [r2, #16]
 800d9b8:	f107 0108 	add.w	r1, r7, #8
 800d9bc:	4610      	mov	r0, r2
 800d9be:	4798      	blx	r3
 800d9c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9c2:	e029      	b.n	800da18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d9c4:	6839      	ldr	r1, [r7, #0]
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 fa49 	bl	800de5e <USBD_CtlError>
            err++;
 800d9cc:	7afb      	ldrb	r3, [r7, #11]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	72fb      	strb	r3, [r7, #11]
          break;
 800d9d2:	e021      	b.n	800da18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9da:	699b      	ldr	r3, [r3, #24]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00b      	beq.n	800d9f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9e6:	699b      	ldr	r3, [r3, #24]
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	7c12      	ldrb	r2, [r2, #16]
 800d9ec:	f107 0108 	add.w	r1, r7, #8
 800d9f0:	4610      	mov	r0, r2
 800d9f2:	4798      	blx	r3
 800d9f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9f6:	e00f      	b.n	800da18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d9f8:	6839      	ldr	r1, [r7, #0]
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 fa2f 	bl	800de5e <USBD_CtlError>
            err++;
 800da00:	7afb      	ldrb	r3, [r7, #11]
 800da02:	3301      	adds	r3, #1
 800da04:	72fb      	strb	r3, [r7, #11]
          break;
 800da06:	e007      	b.n	800da18 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800da08:	6839      	ldr	r1, [r7, #0]
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 fa27 	bl	800de5e <USBD_CtlError>
          err++;
 800da10:	7afb      	ldrb	r3, [r7, #11]
 800da12:	3301      	adds	r3, #1
 800da14:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800da16:	bf00      	nop
      }
      break;
 800da18:	e037      	b.n	800da8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	7c1b      	ldrb	r3, [r3, #16]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d109      	bne.n	800da36 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da2a:	f107 0208 	add.w	r2, r7, #8
 800da2e:	4610      	mov	r0, r2
 800da30:	4798      	blx	r3
 800da32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da34:	e029      	b.n	800da8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800da36:	6839      	ldr	r1, [r7, #0]
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 fa10 	bl	800de5e <USBD_CtlError>
        err++;
 800da3e:	7afb      	ldrb	r3, [r7, #11]
 800da40:	3301      	adds	r3, #1
 800da42:	72fb      	strb	r3, [r7, #11]
      break;
 800da44:	e021      	b.n	800da8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	7c1b      	ldrb	r3, [r3, #16]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d10d      	bne.n	800da6a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da56:	f107 0208 	add.w	r2, r7, #8
 800da5a:	4610      	mov	r0, r2
 800da5c:	4798      	blx	r3
 800da5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	3301      	adds	r3, #1
 800da64:	2207      	movs	r2, #7
 800da66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da68:	e00f      	b.n	800da8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800da6a:	6839      	ldr	r1, [r7, #0]
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 f9f6 	bl	800de5e <USBD_CtlError>
        err++;
 800da72:	7afb      	ldrb	r3, [r7, #11]
 800da74:	3301      	adds	r3, #1
 800da76:	72fb      	strb	r3, [r7, #11]
      break;
 800da78:	e007      	b.n	800da8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800da7a:	6839      	ldr	r1, [r7, #0]
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 f9ee 	bl	800de5e <USBD_CtlError>
      err++;
 800da82:	7afb      	ldrb	r3, [r7, #11]
 800da84:	3301      	adds	r3, #1
 800da86:	72fb      	strb	r3, [r7, #11]
      break;
 800da88:	bf00      	nop
  }

  if (err != 0U)
 800da8a:	7afb      	ldrb	r3, [r7, #11]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d11e      	bne.n	800dace <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	88db      	ldrh	r3, [r3, #6]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d016      	beq.n	800dac6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800da98:	893b      	ldrh	r3, [r7, #8]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00e      	beq.n	800dabc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	88da      	ldrh	r2, [r3, #6]
 800daa2:	893b      	ldrh	r3, [r7, #8]
 800daa4:	4293      	cmp	r3, r2
 800daa6:	bf28      	it	cs
 800daa8:	4613      	movcs	r3, r2
 800daaa:	b29b      	uxth	r3, r3
 800daac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800daae:	893b      	ldrh	r3, [r7, #8]
 800dab0:	461a      	mov	r2, r3
 800dab2:	68f9      	ldr	r1, [r7, #12]
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 fa43 	bl	800df40 <USBD_CtlSendData>
 800daba:	e009      	b.n	800dad0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dabc:	6839      	ldr	r1, [r7, #0]
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f9cd 	bl	800de5e <USBD_CtlError>
 800dac4:	e004      	b.n	800dad0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 fa94 	bl	800dff4 <USBD_CtlSendStatus>
 800dacc:	e000      	b.n	800dad0 <USBD_GetDescriptor+0x2cc>
    return;
 800dace:	bf00      	nop
  }
}
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop

0800dad8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b084      	sub	sp, #16
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	889b      	ldrh	r3, [r3, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d131      	bne.n	800db4e <USBD_SetAddress+0x76>
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	88db      	ldrh	r3, [r3, #6]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d12d      	bne.n	800db4e <USBD_SetAddress+0x76>
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	885b      	ldrh	r3, [r3, #2]
 800daf6:	2b7f      	cmp	r3, #127	; 0x7f
 800daf8:	d829      	bhi.n	800db4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	885b      	ldrh	r3, [r3, #2]
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	2b03      	cmp	r3, #3
 800db10:	d104      	bne.n	800db1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800db12:	6839      	ldr	r1, [r7, #0]
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 f9a2 	bl	800de5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db1a:	e01c      	b.n	800db56 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	7bfa      	ldrb	r2, [r7, #15]
 800db20:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800db24:	7bfb      	ldrb	r3, [r7, #15]
 800db26:	4619      	mov	r1, r3
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f007 fedf 	bl	80158ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 fa60 	bl	800dff4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800db34:	7bfb      	ldrb	r3, [r7, #15]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d004      	beq.n	800db44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2202      	movs	r2, #2
 800db3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db42:	e008      	b.n	800db56 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2201      	movs	r2, #1
 800db48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db4c:	e003      	b.n	800db56 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800db4e:	6839      	ldr	r1, [r7, #0]
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f000 f984 	bl	800de5e <USBD_CtlError>
  }
}
 800db56:	bf00      	nop
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
	...

0800db60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db6a:	2300      	movs	r3, #0
 800db6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	885b      	ldrh	r3, [r3, #2]
 800db72:	b2da      	uxtb	r2, r3
 800db74:	4b4c      	ldr	r3, [pc, #304]	; (800dca8 <USBD_SetConfig+0x148>)
 800db76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800db78:	4b4b      	ldr	r3, [pc, #300]	; (800dca8 <USBD_SetConfig+0x148>)
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d905      	bls.n	800db8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800db80:	6839      	ldr	r1, [r7, #0]
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f000 f96b 	bl	800de5e <USBD_CtlError>
    return USBD_FAIL;
 800db88:	2303      	movs	r3, #3
 800db8a:	e088      	b.n	800dc9e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db92:	b2db      	uxtb	r3, r3
 800db94:	2b02      	cmp	r3, #2
 800db96:	d002      	beq.n	800db9e <USBD_SetConfig+0x3e>
 800db98:	2b03      	cmp	r3, #3
 800db9a:	d025      	beq.n	800dbe8 <USBD_SetConfig+0x88>
 800db9c:	e071      	b.n	800dc82 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800db9e:	4b42      	ldr	r3, [pc, #264]	; (800dca8 <USBD_SetConfig+0x148>)
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d01c      	beq.n	800dbe0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800dba6:	4b40      	ldr	r3, [pc, #256]	; (800dca8 <USBD_SetConfig+0x148>)
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	461a      	mov	r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dbb0:	4b3d      	ldr	r3, [pc, #244]	; (800dca8 <USBD_SetConfig+0x148>)
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7ff f9c8 	bl	800cf4c <USBD_SetClassConfig>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dbc0:	7bfb      	ldrb	r3, [r7, #15]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d004      	beq.n	800dbd0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800dbc6:	6839      	ldr	r1, [r7, #0]
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 f948 	bl	800de5e <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dbce:	e065      	b.n	800dc9c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 fa0f 	bl	800dff4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2203      	movs	r2, #3
 800dbda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dbde:	e05d      	b.n	800dc9c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f000 fa07 	bl	800dff4 <USBD_CtlSendStatus>
      break;
 800dbe6:	e059      	b.n	800dc9c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dbe8:	4b2f      	ldr	r3, [pc, #188]	; (800dca8 <USBD_SetConfig+0x148>)
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d112      	bne.n	800dc16 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2202      	movs	r2, #2
 800dbf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800dbf8:	4b2b      	ldr	r3, [pc, #172]	; (800dca8 <USBD_SetConfig+0x148>)
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc02:	4b29      	ldr	r3, [pc, #164]	; (800dca8 <USBD_SetConfig+0x148>)
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	4619      	mov	r1, r3
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f7ff f9bb 	bl	800cf84 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 f9f0 	bl	800dff4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc14:	e042      	b.n	800dc9c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800dc16:	4b24      	ldr	r3, [pc, #144]	; (800dca8 <USBD_SetConfig+0x148>)
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d02a      	beq.n	800dc7a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f7ff f9a9 	bl	800cf84 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dc32:	4b1d      	ldr	r3, [pc, #116]	; (800dca8 <USBD_SetConfig+0x148>)
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	461a      	mov	r2, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dc3c:	4b1a      	ldr	r3, [pc, #104]	; (800dca8 <USBD_SetConfig+0x148>)
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	4619      	mov	r1, r3
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f7ff f982 	bl	800cf4c <USBD_SetClassConfig>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dc4c:	7bfb      	ldrb	r3, [r7, #15]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00f      	beq.n	800dc72 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800dc52:	6839      	ldr	r1, [r7, #0]
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 f902 	bl	800de5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	4619      	mov	r1, r3
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f7ff f98e 	bl	800cf84 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2202      	movs	r2, #2
 800dc6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dc70:	e014      	b.n	800dc9c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 f9be 	bl	800dff4 <USBD_CtlSendStatus>
      break;
 800dc78:	e010      	b.n	800dc9c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f9ba 	bl	800dff4 <USBD_CtlSendStatus>
      break;
 800dc80:	e00c      	b.n	800dc9c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800dc82:	6839      	ldr	r1, [r7, #0]
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 f8ea 	bl	800de5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc8a:	4b07      	ldr	r3, [pc, #28]	; (800dca8 <USBD_SetConfig+0x148>)
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7ff f977 	bl	800cf84 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dc96:	2303      	movs	r3, #3
 800dc98:	73fb      	strb	r3, [r7, #15]
      break;
 800dc9a:	bf00      	nop
  }

  return ret;
 800dc9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	200003ce 	.word	0x200003ce

0800dcac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	88db      	ldrh	r3, [r3, #6]
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d004      	beq.n	800dcc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dcbe:	6839      	ldr	r1, [r7, #0]
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 f8cc 	bl	800de5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dcc6:	e022      	b.n	800dd0e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	db17      	blt.n	800dd04 <USBD_GetConfig+0x58>
 800dcd4:	2b02      	cmp	r3, #2
 800dcd6:	dd02      	ble.n	800dcde <USBD_GetConfig+0x32>
 800dcd8:	2b03      	cmp	r3, #3
 800dcda:	d00b      	beq.n	800dcf4 <USBD_GetConfig+0x48>
 800dcdc:	e012      	b.n	800dd04 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	3308      	adds	r3, #8
 800dce8:	2201      	movs	r2, #1
 800dcea:	4619      	mov	r1, r3
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f000 f927 	bl	800df40 <USBD_CtlSendData>
        break;
 800dcf2:	e00c      	b.n	800dd0e <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	3304      	adds	r3, #4
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 f91f 	bl	800df40 <USBD_CtlSendData>
        break;
 800dd02:	e004      	b.n	800dd0e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800dd04:	6839      	ldr	r1, [r7, #0]
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 f8a9 	bl	800de5e <USBD_CtlError>
        break;
 800dd0c:	bf00      	nop
}
 800dd0e:	bf00      	nop
 800dd10:	3708      	adds	r7, #8
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}

0800dd16 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd16:	b580      	push	{r7, lr}
 800dd18:	b082      	sub	sp, #8
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
 800dd1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	3b01      	subs	r3, #1
 800dd2a:	2b02      	cmp	r3, #2
 800dd2c:	d81e      	bhi.n	800dd6c <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	88db      	ldrh	r3, [r3, #6]
 800dd32:	2b02      	cmp	r3, #2
 800dd34:	d004      	beq.n	800dd40 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dd36:	6839      	ldr	r1, [r7, #0]
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f000 f890 	bl	800de5e <USBD_CtlError>
        break;
 800dd3e:	e01a      	b.n	800dd76 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2201      	movs	r2, #1
 800dd44:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d005      	beq.n	800dd5c <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	68db      	ldr	r3, [r3, #12]
 800dd54:	f043 0202 	orr.w	r2, r3, #2
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	330c      	adds	r3, #12
 800dd60:	2202      	movs	r2, #2
 800dd62:	4619      	mov	r1, r3
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f000 f8eb 	bl	800df40 <USBD_CtlSendData>
      break;
 800dd6a:	e004      	b.n	800dd76 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dd6c:	6839      	ldr	r1, [r7, #0]
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 f875 	bl	800de5e <USBD_CtlError>
      break;
 800dd74:	bf00      	nop
  }
}
 800dd76:	bf00      	nop
 800dd78:	3708      	adds	r7, #8
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}

0800dd7e <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd7e:	b580      	push	{r7, lr}
 800dd80:	b082      	sub	sp, #8
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
 800dd86:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	885b      	ldrh	r3, [r3, #2]
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d106      	bne.n	800dd9e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2201      	movs	r2, #1
 800dd94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f000 f92b 	bl	800dff4 <USBD_CtlSendStatus>
  }
}
 800dd9e:	bf00      	nop
 800dda0:	3708      	adds	r7, #8
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b082      	sub	sp, #8
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
 800ddae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	2b02      	cmp	r3, #2
 800ddbc:	d80b      	bhi.n	800ddd6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	885b      	ldrh	r3, [r3, #2]
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d10c      	bne.n	800dde0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f000 f910 	bl	800dff4 <USBD_CtlSendStatus>
      }
      break;
 800ddd4:	e004      	b.n	800dde0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ddd6:	6839      	ldr	r1, [r7, #0]
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 f840 	bl	800de5e <USBD_CtlError>
      break;
 800ddde:	e000      	b.n	800dde2 <USBD_ClrFeature+0x3c>
      break;
 800dde0:	bf00      	nop
  }
}
 800dde2:	bf00      	nop
 800dde4:	3708      	adds	r7, #8
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}

0800ddea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b084      	sub	sp, #16
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
 800ddf2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	781a      	ldrb	r2, [r3, #0]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	3301      	adds	r3, #1
 800de04:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	781a      	ldrb	r2, [r3, #0]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	3301      	adds	r3, #1
 800de12:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800de14:	68f8      	ldr	r0, [r7, #12]
 800de16:	f7ff fac7 	bl	800d3a8 <SWAPBYTE>
 800de1a:	4603      	mov	r3, r0
 800de1c:	461a      	mov	r2, r3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	3301      	adds	r3, #1
 800de26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	3301      	adds	r3, #1
 800de2c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800de2e:	68f8      	ldr	r0, [r7, #12]
 800de30:	f7ff faba 	bl	800d3a8 <SWAPBYTE>
 800de34:	4603      	mov	r3, r0
 800de36:	461a      	mov	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	3301      	adds	r3, #1
 800de40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	3301      	adds	r3, #1
 800de46:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f7ff faad 	bl	800d3a8 <SWAPBYTE>
 800de4e:	4603      	mov	r3, r0
 800de50:	461a      	mov	r2, r3
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	80da      	strh	r2, [r3, #6]
}
 800de56:	bf00      	nop
 800de58:	3710      	adds	r7, #16
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b082      	sub	sp, #8
 800de62:	af00      	add	r7, sp, #0
 800de64:	6078      	str	r0, [r7, #4]
 800de66:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800de68:	2180      	movs	r1, #128	; 0x80
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f007 fcda 	bl	8015824 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800de70:	2100      	movs	r1, #0
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f007 fcd6 	bl	8015824 <USBD_LL_StallEP>
}
 800de78:	bf00      	nop
 800de7a:	3708      	adds	r7, #8
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b086      	sub	sp, #24
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800de8c:	2300      	movs	r3, #0
 800de8e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d036      	beq.n	800df04 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800de9a:	6938      	ldr	r0, [r7, #16]
 800de9c:	f000 f836 	bl	800df0c <USBD_GetLen>
 800dea0:	4603      	mov	r3, r0
 800dea2:	3301      	adds	r3, #1
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	005b      	lsls	r3, r3, #1
 800dea8:	b29a      	uxth	r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800deae:	7dfb      	ldrb	r3, [r7, #23]
 800deb0:	68ba      	ldr	r2, [r7, #8]
 800deb2:	4413      	add	r3, r2
 800deb4:	687a      	ldr	r2, [r7, #4]
 800deb6:	7812      	ldrb	r2, [r2, #0]
 800deb8:	701a      	strb	r2, [r3, #0]
  idx++;
 800deba:	7dfb      	ldrb	r3, [r7, #23]
 800debc:	3301      	adds	r3, #1
 800debe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dec0:	7dfb      	ldrb	r3, [r7, #23]
 800dec2:	68ba      	ldr	r2, [r7, #8]
 800dec4:	4413      	add	r3, r2
 800dec6:	2203      	movs	r2, #3
 800dec8:	701a      	strb	r2, [r3, #0]
  idx++;
 800deca:	7dfb      	ldrb	r3, [r7, #23]
 800decc:	3301      	adds	r3, #1
 800dece:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ded0:	e013      	b.n	800defa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ded2:	7dfb      	ldrb	r3, [r7, #23]
 800ded4:	68ba      	ldr	r2, [r7, #8]
 800ded6:	4413      	add	r3, r2
 800ded8:	693a      	ldr	r2, [r7, #16]
 800deda:	7812      	ldrb	r2, [r2, #0]
 800dedc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	3301      	adds	r3, #1
 800dee2:	613b      	str	r3, [r7, #16]
    idx++;
 800dee4:	7dfb      	ldrb	r3, [r7, #23]
 800dee6:	3301      	adds	r3, #1
 800dee8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800deea:	7dfb      	ldrb	r3, [r7, #23]
 800deec:	68ba      	ldr	r2, [r7, #8]
 800deee:	4413      	add	r3, r2
 800def0:	2200      	movs	r2, #0
 800def2:	701a      	strb	r2, [r3, #0]
    idx++;
 800def4:	7dfb      	ldrb	r3, [r7, #23]
 800def6:	3301      	adds	r3, #1
 800def8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d1e7      	bne.n	800ded2 <USBD_GetString+0x52>
 800df02:	e000      	b.n	800df06 <USBD_GetString+0x86>
    return;
 800df04:	bf00      	nop
  }
}
 800df06:	3718      	adds	r7, #24
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b085      	sub	sp, #20
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800df14:	2300      	movs	r3, #0
 800df16:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800df1c:	e005      	b.n	800df2a <USBD_GetLen+0x1e>
  {
    len++;
 800df1e:	7bfb      	ldrb	r3, [r7, #15]
 800df20:	3301      	adds	r3, #1
 800df22:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	3301      	adds	r3, #1
 800df28:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1f5      	bne.n	800df1e <USBD_GetLen+0x12>
  }

  return len;
 800df32:	7bfb      	ldrb	r3, [r7, #15]
}
 800df34:	4618      	mov	r0, r3
 800df36:	3714      	adds	r7, #20
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2202      	movs	r2, #2
 800df50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	68ba      	ldr	r2, [r7, #8]
 800df64:	2100      	movs	r1, #0
 800df66:	68f8      	ldr	r0, [r7, #12]
 800df68:	f007 fcdf 	bl	801592a <USBD_LL_Transmit>

  return USBD_OK;
 800df6c:	2300      	movs	r3, #0
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}

0800df76 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800df76:	b580      	push	{r7, lr}
 800df78:	b084      	sub	sp, #16
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	60f8      	str	r0, [r7, #12]
 800df7e:	60b9      	str	r1, [r7, #8]
 800df80:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	68ba      	ldr	r2, [r7, #8]
 800df86:	2100      	movs	r1, #0
 800df88:	68f8      	ldr	r0, [r7, #12]
 800df8a:	f007 fcce 	bl	801592a <USBD_LL_Transmit>

  return USBD_OK;
 800df8e:	2300      	movs	r3, #0
}
 800df90:	4618      	mov	r0, r3
 800df92:	3710      	adds	r7, #16
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	60f8      	str	r0, [r7, #12]
 800dfa0:	60b9      	str	r1, [r7, #8]
 800dfa2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2203      	movs	r2, #3
 800dfa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	68ba      	ldr	r2, [r7, #8]
 800dfc0:	2100      	movs	r1, #0
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f007 fcd2 	bl	801596c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dfc8:	2300      	movs	r3, #0
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3710      	adds	r7, #16
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b084      	sub	sp, #16
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	60f8      	str	r0, [r7, #12]
 800dfda:	60b9      	str	r1, [r7, #8]
 800dfdc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	68ba      	ldr	r2, [r7, #8]
 800dfe2:	2100      	movs	r1, #0
 800dfe4:	68f8      	ldr	r0, [r7, #12]
 800dfe6:	f007 fcc1 	bl	801596c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dfea:	2300      	movs	r3, #0
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3710      	adds	r7, #16
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2204      	movs	r2, #4
 800e000:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e004:	2300      	movs	r3, #0
 800e006:	2200      	movs	r2, #0
 800e008:	2100      	movs	r1, #0
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f007 fc8d 	bl	801592a <USBD_LL_Transmit>

  return USBD_OK;
 800e010:	2300      	movs	r3, #0
}
 800e012:	4618      	mov	r0, r3
 800e014:	3708      	adds	r7, #8
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}

0800e01a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b082      	sub	sp, #8
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2205      	movs	r2, #5
 800e026:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e02a:	2300      	movs	r3, #0
 800e02c:	2200      	movs	r2, #0
 800e02e:	2100      	movs	r1, #0
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f007 fc9b 	bl	801596c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e036:	2300      	movs	r3, #0
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3708      	adds	r7, #8
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b086      	sub	sp, #24
 800e044:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e046:	1d3b      	adds	r3, r7, #4
 800e048:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	2200      	movs	r2, #0
 800e04e:	2100      	movs	r1, #0
 800e050:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800e054:	f000 f938 	bl	800e2c8 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	330b      	adds	r3, #11
 800e05c:	78db      	ldrb	r3, [r3, #3]
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3718      	adds	r7, #24
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800e066:	b580      	push	{r7, lr}
 800e068:	b088      	sub	sp, #32
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	4603      	mov	r3, r0
 800e06e:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e070:	f107 030c 	add.w	r3, r7, #12
 800e074:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800e076:	79fb      	ldrb	r3, [r7, #7]
 800e078:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800e07a:	f107 020c 	add.w	r2, r7, #12
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	2101      	movs	r1, #1
 800e082:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800e086:	f000 f91f 	bl	800e2c8 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	330b      	adds	r3, #11
 800e08e:	78db      	ldrb	r3, [r3, #3]
}
 800e090:	4618      	mov	r0, r3
 800e092:	3720      	adds	r7, #32
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800e098:	b480      	push	{r7}
 800e09a:	b08b      	sub	sp, #44	; 0x2c
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800e0c0:	4b4a      	ldr	r3, [pc, #296]	; (800e1ec <SHCI_GetWirelessFwInfo+0x154>)
 800e0c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e0c8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e0d2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	4a44      	ldr	r2, [pc, #272]	; (800e1f0 <SHCI_GetWirelessFwInfo+0x158>)
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d10f      	bne.n	800e104 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	695b      	ldr	r3, [r3, #20]
 800e0e8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	699b      	ldr	r3, [r3, #24]
 800e0ee:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	69db      	ldr	r3, [r3, #28]
 800e0f4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	68db      	ldr	r3, [r3, #12]
 800e0fa:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	691b      	ldr	r3, [r3, #16]
 800e100:	617b      	str	r3, [r7, #20]
 800e102:	e01a      	b.n	800e13a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e10c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800e110:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	691b      	ldr	r3, [r3, #16]
 800e118:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	695b      	ldr	r3, [r3, #20]
 800e120:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	699b      	ldr	r3, [r3, #24]
 800e128:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	689b      	ldr	r3, [r3, #8]
 800e138:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13c:	0e1b      	lsrs	r3, r3, #24
 800e13e:	b2da      	uxtb	r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e146:	0c1b      	lsrs	r3, r3, #16
 800e148:	b2da      	uxtb	r2, r3
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e150:	0a1b      	lsrs	r3, r3, #8
 800e152:	b2da      	uxtb	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800e158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15a:	091b      	lsrs	r3, r3, #4
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	f003 030f 	and.w	r3, r3, #15
 800e162:	b2da      	uxtb	r2, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800e168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	f003 030f 	and.w	r3, r3, #15
 800e170:	b2da      	uxtb	r2, r3
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e176:	6a3b      	ldr	r3, [r7, #32]
 800e178:	0e1b      	lsrs	r3, r3, #24
 800e17a:	b2da      	uxtb	r2, r3
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e180:	6a3b      	ldr	r3, [r7, #32]
 800e182:	0c1b      	lsrs	r3, r3, #16
 800e184:	b2da      	uxtb	r2, r3
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800e18a:	6a3b      	ldr	r3, [r7, #32]
 800e18c:	0a1b      	lsrs	r3, r3, #8
 800e18e:	b2da      	uxtb	r2, r3
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e194:	6a3b      	ldr	r3, [r7, #32]
 800e196:	b2da      	uxtb	r2, r3
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	b2da      	uxtb	r2, r3
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e1a4:	69bb      	ldr	r3, [r7, #24]
 800e1a6:	0e1b      	lsrs	r3, r3, #24
 800e1a8:	b2da      	uxtb	r2, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e1ae:	69bb      	ldr	r3, [r7, #24]
 800e1b0:	0c1b      	lsrs	r3, r3, #16
 800e1b2:	b2da      	uxtb	r2, r3
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	0a1b      	lsrs	r3, r3, #8
 800e1bc:	b2da      	uxtb	r2, r3
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	0e1b      	lsrs	r3, r3, #24
 800e1c6:	b2da      	uxtb	r2, r3
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	0c1b      	lsrs	r3, r3, #16
 800e1d0:	b2da      	uxtb	r2, r3
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800e1de:	2300      	movs	r3, #0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	372c      	adds	r7, #44	; 0x2c
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr
 800e1ec:	58004000 	.word	0x58004000
 800e1f0:	a94656b9 	.word	0xa94656b9

0800e1f4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	4a08      	ldr	r2, [pc, #32]	; (800e224 <shci_init+0x30>)
 800e204:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e206:	4a08      	ldr	r2, [pc, #32]	; (800e228 <shci_init+0x34>)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e20c:	4806      	ldr	r0, [pc, #24]	; (800e228 <shci_init+0x34>)
 800e20e:	f000 f911 	bl	800e434 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4618      	mov	r0, r3
 800e218:	f000 f894 	bl	800e344 <TlInit>

  return;
 800e21c:	bf00      	nop
}
 800e21e:	3708      	adds	r7, #8
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}
 800e224:	200003f0 	.word	0x200003f0
 800e228:	200003d0 	.word	0x200003d0

0800e22c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e232:	4822      	ldr	r0, [pc, #136]	; (800e2bc <shci_user_evt_proc+0x90>)
 800e234:	f001 fce4 	bl	800fc00 <LST_is_empty>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d12b      	bne.n	800e296 <shci_user_evt_proc+0x6a>
 800e23e:	4b20      	ldr	r3, [pc, #128]	; (800e2c0 <shci_user_evt_proc+0x94>)
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d027      	beq.n	800e296 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e246:	f107 030c 	add.w	r3, r7, #12
 800e24a:	4619      	mov	r1, r3
 800e24c:	481b      	ldr	r0, [pc, #108]	; (800e2bc <shci_user_evt_proc+0x90>)
 800e24e:	f001 fd5e 	bl	800fd0e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e252:	4b1c      	ldr	r3, [pc, #112]	; (800e2c4 <shci_user_evt_proc+0x98>)
 800e254:	69db      	ldr	r3, [r3, #28]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d00c      	beq.n	800e274 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e25e:	2301      	movs	r3, #1
 800e260:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e262:	4b18      	ldr	r3, [pc, #96]	; (800e2c4 <shci_user_evt_proc+0x98>)
 800e264:	69db      	ldr	r3, [r3, #28]
 800e266:	1d3a      	adds	r2, r7, #4
 800e268:	4610      	mov	r0, r2
 800e26a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e26c:	793a      	ldrb	r2, [r7, #4]
 800e26e:	4b14      	ldr	r3, [pc, #80]	; (800e2c0 <shci_user_evt_proc+0x94>)
 800e270:	701a      	strb	r2, [r3, #0]
 800e272:	e002      	b.n	800e27a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e274:	4b12      	ldr	r3, [pc, #72]	; (800e2c0 <shci_user_evt_proc+0x94>)
 800e276:	2201      	movs	r2, #1
 800e278:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e27a:	4b11      	ldr	r3, [pc, #68]	; (800e2c0 <shci_user_evt_proc+0x94>)
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d004      	beq.n	800e28c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	4618      	mov	r0, r3
 800e286:	f000 fa95 	bl	800e7b4 <TL_MM_EvtDone>
 800e28a:	e004      	b.n	800e296 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	4619      	mov	r1, r3
 800e290:	480a      	ldr	r0, [pc, #40]	; (800e2bc <shci_user_evt_proc+0x90>)
 800e292:	f001 fcd5 	bl	800fc40 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e296:	4809      	ldr	r0, [pc, #36]	; (800e2bc <shci_user_evt_proc+0x90>)
 800e298:	f001 fcb2 	bl	800fc00 <LST_is_empty>
 800e29c:	4603      	mov	r3, r0
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d107      	bne.n	800e2b2 <shci_user_evt_proc+0x86>
 800e2a2:	4b07      	ldr	r3, [pc, #28]	; (800e2c0 <shci_user_evt_proc+0x94>)
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d003      	beq.n	800e2b2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e2aa:	4804      	ldr	r0, [pc, #16]	; (800e2bc <shci_user_evt_proc+0x90>)
 800e2ac:	f7f3 fd2c 	bl	8001d08 <shci_notify_asynch_evt>
  }


  return;
 800e2b0:	bf00      	nop
 800e2b2:	bf00      	nop
}
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	200002e8 	.word	0x200002e8
 800e2c0:	200002f8 	.word	0x200002f8
 800e2c4:	200003d0 	.word	0x200003d0

0800e2c8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	60ba      	str	r2, [r7, #8]
 800e2d0:	607b      	str	r3, [r7, #4]
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	81fb      	strh	r3, [r7, #14]
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e2da:	2000      	movs	r0, #0
 800e2dc:	f000 f864 	bl	800e3a8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e2e0:	4b16      	ldr	r3, [pc, #88]	; (800e33c <shci_send+0x74>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	89fa      	ldrh	r2, [r7, #14]
 800e2e6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e2ea:	4b14      	ldr	r3, [pc, #80]	; (800e33c <shci_send+0x74>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	7b7a      	ldrb	r2, [r7, #13]
 800e2f0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e2f2:	4b12      	ldr	r3, [pc, #72]	; (800e33c <shci_send+0x74>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	330c      	adds	r3, #12
 800e2f8:	7b7a      	ldrb	r2, [r7, #13]
 800e2fa:	68b9      	ldr	r1, [r7, #8]
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f008 fc77 	bl	8016bf0 <memcpy>

  shciContext.io.Send(0,0);
 800e302:	4b0f      	ldr	r3, [pc, #60]	; (800e340 <shci_send+0x78>)
 800e304:	691b      	ldr	r3, [r3, #16]
 800e306:	2100      	movs	r1, #0
 800e308:	2000      	movs	r0, #0
 800e30a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800e30c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800e310:	f7f3 fd1a 	bl	8001d48 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f103 0008 	add.w	r0, r3, #8
 800e31a:	4b08      	ldr	r3, [pc, #32]	; (800e33c <shci_send+0x74>)
 800e31c:	6819      	ldr	r1, [r3, #0]
 800e31e:	4b07      	ldr	r3, [pc, #28]	; (800e33c <shci_send+0x74>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	789b      	ldrb	r3, [r3, #2]
 800e324:	3303      	adds	r3, #3
 800e326:	461a      	mov	r2, r3
 800e328:	f008 fc62 	bl	8016bf0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e32c:	2001      	movs	r0, #1
 800e32e:	f000 f83b 	bl	800e3a8 <Cmd_SetStatus>

  return;
 800e332:	bf00      	nop
}
 800e334:	3710      	adds	r7, #16
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	200002f4 	.word	0x200002f4
 800e340:	200003d0 	.word	0x200003d0

0800e344 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b086      	sub	sp, #24
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e34c:	4a10      	ldr	r2, [pc, #64]	; (800e390 <TlInit+0x4c>)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e352:	4810      	ldr	r0, [pc, #64]	; (800e394 <TlInit+0x50>)
 800e354:	f001 fc44 	bl	800fbe0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e358:	2001      	movs	r0, #1
 800e35a:	f000 f825 	bl	800e3a8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e35e:	4b0e      	ldr	r3, [pc, #56]	; (800e398 <TlInit+0x54>)
 800e360:	2201      	movs	r2, #1
 800e362:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e364:	4b0d      	ldr	r3, [pc, #52]	; (800e39c <TlInit+0x58>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d00c      	beq.n	800e386 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e370:	4b0b      	ldr	r3, [pc, #44]	; (800e3a0 <TlInit+0x5c>)
 800e372:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e374:	4b0b      	ldr	r3, [pc, #44]	; (800e3a4 <TlInit+0x60>)
 800e376:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e378:	4b08      	ldr	r3, [pc, #32]	; (800e39c <TlInit+0x58>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f107 020c 	add.w	r2, r7, #12
 800e380:	4610      	mov	r0, r2
 800e382:	4798      	blx	r3
  }

  return;
 800e384:	bf00      	nop
 800e386:	bf00      	nop
}
 800e388:	3718      	adds	r7, #24
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	200002f4 	.word	0x200002f4
 800e394:	200002e8 	.word	0x200002e8
 800e398:	200002f8 	.word	0x200002f8
 800e39c:	200003d0 	.word	0x200003d0
 800e3a0:	0800e3f9 	.word	0x0800e3f9
 800e3a4:	0800e411 	.word	0x0800e411

0800e3a8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e3b2:	79fb      	ldrb	r3, [r7, #7]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d10b      	bne.n	800e3d0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e3b8:	4b0d      	ldr	r3, [pc, #52]	; (800e3f0 <Cmd_SetStatus+0x48>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d003      	beq.n	800e3c8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e3c0:	4b0b      	ldr	r3, [pc, #44]	; (800e3f0 <Cmd_SetStatus+0x48>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2000      	movs	r0, #0
 800e3c6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e3c8:	4b0a      	ldr	r3, [pc, #40]	; (800e3f4 <Cmd_SetStatus+0x4c>)
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e3ce:	e00b      	b.n	800e3e8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e3d0:	4b08      	ldr	r3, [pc, #32]	; (800e3f4 <Cmd_SetStatus+0x4c>)
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e3d6:	4b06      	ldr	r3, [pc, #24]	; (800e3f0 <Cmd_SetStatus+0x48>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d004      	beq.n	800e3e8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e3de:	4b04      	ldr	r3, [pc, #16]	; (800e3f0 <Cmd_SetStatus+0x48>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2001      	movs	r0, #1
 800e3e4:	4798      	blx	r3
  return;
 800e3e6:	bf00      	nop
 800e3e8:	bf00      	nop
}
 800e3ea:	3708      	adds	r7, #8
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	200003f0 	.word	0x200003f0
 800e3f4:	200002f0 	.word	0x200002f0

0800e3f8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e400:	2000      	movs	r0, #0
 800e402:	f7f3 fc91 	bl	8001d28 <shci_cmd_resp_release>

  return;
 800e406:	bf00      	nop
}
 800e408:	3708      	adds	r7, #8
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}
	...

0800e410 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e418:	6879      	ldr	r1, [r7, #4]
 800e41a:	4805      	ldr	r0, [pc, #20]	; (800e430 <TlUserEvtReceived+0x20>)
 800e41c:	f001 fc34 	bl	800fc88 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e420:	4803      	ldr	r0, [pc, #12]	; (800e430 <TlUserEvtReceived+0x20>)
 800e422:	f7f3 fc71 	bl	8001d08 <shci_notify_asynch_evt>

  return;
 800e426:	bf00      	nop
}
 800e428:	3708      	adds	r7, #8
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	200002e8 	.word	0x200002e8

0800e434 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e434:	b480      	push	{r7}
 800e436:	b083      	sub	sp, #12
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	4a05      	ldr	r2, [pc, #20]	; (800e454 <shci_register_io_bus+0x20>)
 800e440:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	4a04      	ldr	r2, [pc, #16]	; (800e458 <shci_register_io_bus+0x24>)
 800e446:	611a      	str	r2, [r3, #16]

  return;
 800e448:	bf00      	nop
}
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr
 800e454:	0800e551 	.word	0x0800e551
 800e458:	0800e5a5 	.word	0x0800e5a5

0800e45c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e460:	f006 fce8 	bl	8014e34 <HW_IPCC_Enable>

  return;
 800e464:	bf00      	nop
}
 800e466:	bd80      	pop	{r7, pc}

0800e468 <TL_Init>:


void TL_Init( void )
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800e46c:	4b10      	ldr	r3, [pc, #64]	; (800e4b0 <TL_Init+0x48>)
 800e46e:	4a11      	ldr	r2, [pc, #68]	; (800e4b4 <TL_Init+0x4c>)
 800e470:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800e472:	4b0f      	ldr	r3, [pc, #60]	; (800e4b0 <TL_Init+0x48>)
 800e474:	4a10      	ldr	r2, [pc, #64]	; (800e4b8 <TL_Init+0x50>)
 800e476:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800e478:	4b0d      	ldr	r3, [pc, #52]	; (800e4b0 <TL_Init+0x48>)
 800e47a:	4a10      	ldr	r2, [pc, #64]	; (800e4bc <TL_Init+0x54>)
 800e47c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800e47e:	4b0c      	ldr	r3, [pc, #48]	; (800e4b0 <TL_Init+0x48>)
 800e480:	4a0f      	ldr	r2, [pc, #60]	; (800e4c0 <TL_Init+0x58>)
 800e482:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800e484:	4b0a      	ldr	r3, [pc, #40]	; (800e4b0 <TL_Init+0x48>)
 800e486:	4a0f      	ldr	r2, [pc, #60]	; (800e4c4 <TL_Init+0x5c>)
 800e488:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800e48a:	4b09      	ldr	r3, [pc, #36]	; (800e4b0 <TL_Init+0x48>)
 800e48c:	4a0e      	ldr	r2, [pc, #56]	; (800e4c8 <TL_Init+0x60>)
 800e48e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800e490:	4b07      	ldr	r3, [pc, #28]	; (800e4b0 <TL_Init+0x48>)
 800e492:	4a0e      	ldr	r2, [pc, #56]	; (800e4cc <TL_Init+0x64>)
 800e494:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800e496:	4b06      	ldr	r3, [pc, #24]	; (800e4b0 <TL_Init+0x48>)
 800e498:	4a0d      	ldr	r2, [pc, #52]	; (800e4d0 <TL_Init+0x68>)
 800e49a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800e49c:	4b04      	ldr	r3, [pc, #16]	; (800e4b0 <TL_Init+0x48>)
 800e49e:	4a0d      	ldr	r2, [pc, #52]	; (800e4d4 <TL_Init+0x6c>)
 800e4a0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800e4a2:	4b03      	ldr	r3, [pc, #12]	; (800e4b0 <TL_Init+0x48>)
 800e4a4:	4a0c      	ldr	r2, [pc, #48]	; (800e4d8 <TL_Init+0x70>)
 800e4a6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800e4a8:	f006 fcd8 	bl	8014e5c <HW_IPCC_Init>

  return;
 800e4ac:	bf00      	nop
}
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	20030000 	.word	0x20030000
 800e4b4:	20030028 	.word	0x20030028
 800e4b8:	20030048 	.word	0x20030048
 800e4bc:	20030058 	.word	0x20030058
 800e4c0:	20030064 	.word	0x20030064
 800e4c4:	2003006c 	.word	0x2003006c
 800e4c8:	20030074 	.word	0x20030074
 800e4cc:	2003007c 	.word	0x2003007c
 800e4d0:	20030098 	.word	0x20030098
 800e4d4:	2003009c 	.word	0x2003009c
 800e4d8:	200300a8 	.word	0x200300a8

0800e4dc <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e4e2:	e01c      	b.n	800e51e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e4e4:	1d3b      	adds	r3, r7, #4
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	4812      	ldr	r0, [pc, #72]	; (800e534 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e4ea:	f001 fc10 	bl	800fd0e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	7a5b      	ldrb	r3, [r3, #9]
 800e4f2:	2b0f      	cmp	r3, #15
 800e4f4:	d003      	beq.n	800e4fe <HW_IPCC_BLE_RxEvtNot+0x22>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	7a5b      	ldrb	r3, [r3, #9]
 800e4fa:	2b0e      	cmp	r3, #14
 800e4fc:	d105      	bne.n	800e50a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	4619      	mov	r1, r3
 800e502:	2002      	movs	r0, #2
 800e504:	f000 f9ba 	bl	800e87c <OutputDbgTrace>
 800e508:	e004      	b.n	800e514 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	4619      	mov	r1, r3
 800e50e:	2003      	movs	r0, #3
 800e510:	f000 f9b4 	bl	800e87c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e514:	4b08      	ldr	r3, [pc, #32]	; (800e538 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	4610      	mov	r0, r2
 800e51c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e51e:	4805      	ldr	r0, [pc, #20]	; (800e534 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e520:	f001 fb6e 	bl	800fc00 <LST_is_empty>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d0dc      	beq.n	800e4e4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e52a:	bf00      	nop
}
 800e52c:	3708      	adds	r7, #8
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	200300c4 	.word	0x200300c4
 800e538:	200003fc 	.word	0x200003fc

0800e53c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e540:	4b02      	ldr	r3, [pc, #8]	; (800e54c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	4798      	blx	r3

  return;
 800e546:	bf00      	nop
}
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	20000400 	.word	0x20000400

0800e550 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e55c:	480d      	ldr	r0, [pc, #52]	; (800e594 <TL_SYS_Init+0x44>)
 800e55e:	f001 fb3f 	bl	800fbe0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e562:	4b0d      	ldr	r3, [pc, #52]	; (800e598 <TL_SYS_Init+0x48>)
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	689a      	ldr	r2, [r3, #8]
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	4a08      	ldr	r2, [pc, #32]	; (800e594 <TL_SYS_Init+0x44>)
 800e574:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e576:	f006 fc9f 	bl	8014eb8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	4a07      	ldr	r2, [pc, #28]	; (800e59c <TL_SYS_Init+0x4c>)
 800e580:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	685b      	ldr	r3, [r3, #4]
 800e586:	4a06      	ldr	r2, [pc, #24]	; (800e5a0 <TL_SYS_Init+0x50>)
 800e588:	6013      	str	r3, [r2, #0]

  return 0;
 800e58a:	2300      	movs	r3, #0
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3710      	adds	r7, #16
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}
 800e594:	200300cc 	.word	0x200300cc
 800e598:	20030000 	.word	0x20030000
 800e59c:	20000404 	.word	0x20000404
 800e5a0:	20000408 	.word	0x20000408

0800e5a4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e5b0:	4b09      	ldr	r3, [pc, #36]	; (800e5d8 <TL_SYS_SendCmd+0x34>)
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	2210      	movs	r2, #16
 800e5b8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e5ba:	4b07      	ldr	r3, [pc, #28]	; (800e5d8 <TL_SYS_SendCmd+0x34>)
 800e5bc:	68db      	ldr	r3, [r3, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	2004      	movs	r0, #4
 800e5c4:	f000 f95a 	bl	800e87c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800e5c8:	f006 fc80 	bl	8014ecc <HW_IPCC_SYS_SendCmd>

  return 0;
 800e5cc:	2300      	movs	r3, #0
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3708      	adds	r7, #8
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
 800e5d6:	bf00      	nop
 800e5d8:	20030000 	.word	0x20030000

0800e5dc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e5e0:	4b07      	ldr	r3, [pc, #28]	; (800e600 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e5e2:	68db      	ldr	r3, [r3, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	2005      	movs	r0, #5
 800e5ea:	f000 f947 	bl	800e87c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e5ee:	4b05      	ldr	r3, [pc, #20]	; (800e604 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	4a03      	ldr	r2, [pc, #12]	; (800e600 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e5f4:	68d2      	ldr	r2, [r2, #12]
 800e5f6:	6812      	ldr	r2, [r2, #0]
 800e5f8:	4610      	mov	r0, r2
 800e5fa:	4798      	blx	r3

  return;
 800e5fc:	bf00      	nop
}
 800e5fe:	bd80      	pop	{r7, pc}
 800e600:	20030000 	.word	0x20030000
 800e604:	20000404 	.word	0x20000404

0800e608 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e60e:	e00e      	b.n	800e62e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800e610:	1d3b      	adds	r3, r7, #4
 800e612:	4619      	mov	r1, r3
 800e614:	480b      	ldr	r0, [pc, #44]	; (800e644 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e616:	f001 fb7a 	bl	800fd0e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	4619      	mov	r1, r3
 800e61e:	2006      	movs	r0, #6
 800e620:	f000 f92c 	bl	800e87c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800e624:	4b08      	ldr	r3, [pc, #32]	; (800e648 <HW_IPCC_SYS_EvtNot+0x40>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	4610      	mov	r0, r2
 800e62c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e62e:	4805      	ldr	r0, [pc, #20]	; (800e644 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e630:	f001 fae6 	bl	800fc00 <LST_is_empty>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	d0ea      	beq.n	800e610 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800e63a:	bf00      	nop
}
 800e63c:	3708      	adds	r7, #8
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	200300cc 	.word	0x200300cc
 800e648:	20000408 	.word	0x20000408

0800e64c <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800e654:	4b0a      	ldr	r3, [pc, #40]	; (800e680 <TL_THREAD_Init+0x34>)
 800e656:	689b      	ldr	r3, [r3, #8]
 800e658:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	685a      	ldr	r2, [r3, #4]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681a      	ldr	r2, [r3, #0]
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	689a      	ldr	r2, [r3, #8]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 800e672:	f006 fc51 	bl	8014f18 <HW_IPCC_THREAD_Init>

  return;
 800e676:	bf00      	nop
}
 800e678:	3710      	adds	r7, #16
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	20030000 	.word	0x20030000

0800e684 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800e684:	b580      	push	{r7, lr}
 800e686:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800e688:	4b04      	ldr	r3, [pc, #16]	; (800e69c <TL_OT_SendCmd+0x18>)
 800e68a:	689b      	ldr	r3, [r3, #8]
 800e68c:	689b      	ldr	r3, [r3, #8]
 800e68e:	2208      	movs	r2, #8
 800e690:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800e692:	f006 fc4f 	bl	8014f34 <HW_IPCC_OT_SendCmd>

  return;
 800e696:	bf00      	nop
}
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop
 800e69c:	20030000 	.word	0x20030000

0800e6a0 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800e6a4:	4b04      	ldr	r3, [pc, #16]	; (800e6b8 <TL_CLI_SendCmd+0x18>)
 800e6a6:	689b      	ldr	r3, [r3, #8]
 800e6a8:	685b      	ldr	r3, [r3, #4]
 800e6aa:	220a      	movs	r2, #10
 800e6ac:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 800e6ae:	f006 fc4f 	bl	8014f50 <HW_IPCC_CLI_SendCmd>

  return;
 800e6b2:	bf00      	nop
}
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20030000 	.word	0x20030000

0800e6bc <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800e6c0:	4b04      	ldr	r3, [pc, #16]	; (800e6d4 <TL_THREAD_SendAck+0x18>)
 800e6c2:	689b      	ldr	r3, [r3, #8]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	220d      	movs	r2, #13
 800e6c8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800e6ca:	f006 fc4b 	bl	8014f64 <HW_IPCC_THREAD_SendAck>

  return;
 800e6ce:	bf00      	nop
}
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	20030000 	.word	0x20030000

0800e6d8 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800e6dc:	4b04      	ldr	r3, [pc, #16]	; (800e6f0 <TL_THREAD_CliSendAck+0x18>)
 800e6de:	689b      	ldr	r3, [r3, #8]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	220d      	movs	r2, #13
 800e6e4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800e6e6:	f006 fc4b 	bl	8014f80 <HW_IPCC_THREAD_CliSendAck>

  return;
 800e6ea:	bf00      	nop
}
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	20030000 	.word	0x20030000

0800e6f4 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800e6f8:	4b03      	ldr	r3, [pc, #12]	; (800e708 <HW_IPCC_OT_CmdEvtNot+0x14>)
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	4618      	mov	r0, r3
 800e700:	f006 f8de 	bl	80148c0 <TL_OT_CmdEvtReceived>

  return;
 800e704:	bf00      	nop
}
 800e706:	bd80      	pop	{r7, pc}
 800e708:	20030000 	.word	0x20030000

0800e70c <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800e710:	4b03      	ldr	r3, [pc, #12]	; (800e720 <HW_IPCC_THREAD_EvtNot+0x14>)
 800e712:	689b      	ldr	r3, [r3, #8]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	4618      	mov	r0, r3
 800e718:	f006 f8dc 	bl	80148d4 <TL_THREAD_NotReceived>

  return;
 800e71c:	bf00      	nop
}
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	20030000 	.word	0x20030000

0800e724 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800e724:	b580      	push	{r7, lr}
 800e726:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 800e728:	4b03      	ldr	r3, [pc, #12]	; (800e738 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800e72a:	689b      	ldr	r3, [r3, #8]
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	4618      	mov	r0, r3
 800e730:	f006 f97e 	bl	8014a30 <TL_THREAD_CliNotReceived>

  return;
 800e734:	bf00      	nop
}
 800e736:	bd80      	pop	{r7, pc}
 800e738:	20030000 	.word	0x20030000

0800e73c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b082      	sub	sp, #8
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800e744:	4817      	ldr	r0, [pc, #92]	; (800e7a4 <TL_MM_Init+0x68>)
 800e746:	f001 fa4b 	bl	800fbe0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800e74a:	4817      	ldr	r0, [pc, #92]	; (800e7a8 <TL_MM_Init+0x6c>)
 800e74c:	f001 fa48 	bl	800fbe0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800e750:	4b16      	ldr	r3, [pc, #88]	; (800e7ac <TL_MM_Init+0x70>)
 800e752:	691b      	ldr	r3, [r3, #16]
 800e754:	4a16      	ldr	r2, [pc, #88]	; (800e7b0 <TL_MM_Init+0x74>)
 800e756:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800e758:	4b15      	ldr	r3, [pc, #84]	; (800e7b0 <TL_MM_Init+0x74>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	6892      	ldr	r2, [r2, #8]
 800e760:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800e762:	4b13      	ldr	r3, [pc, #76]	; (800e7b0 <TL_MM_Init+0x74>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	68d2      	ldr	r2, [r2, #12]
 800e76a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800e76c:	4b10      	ldr	r3, [pc, #64]	; (800e7b0 <TL_MM_Init+0x74>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a0c      	ldr	r2, [pc, #48]	; (800e7a4 <TL_MM_Init+0x68>)
 800e772:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800e774:	4b0e      	ldr	r3, [pc, #56]	; (800e7b0 <TL_MM_Init+0x74>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	6812      	ldr	r2, [r2, #0]
 800e77c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800e77e:	4b0c      	ldr	r3, [pc, #48]	; (800e7b0 <TL_MM_Init+0x74>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	6852      	ldr	r2, [r2, #4]
 800e786:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800e788:	4b09      	ldr	r3, [pc, #36]	; (800e7b0 <TL_MM_Init+0x74>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	6912      	ldr	r2, [r2, #16]
 800e790:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800e792:	4b07      	ldr	r3, [pc, #28]	; (800e7b0 <TL_MM_Init+0x74>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	6952      	ldr	r2, [r2, #20]
 800e79a:	619a      	str	r2, [r3, #24]

  return;
 800e79c:	bf00      	nop
}
 800e79e:	3708      	adds	r7, #8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	200300b4 	.word	0x200300b4
 800e7a8:	200003f4 	.word	0x200003f4
 800e7ac:	20030000 	.word	0x20030000
 800e7b0:	2000040c 	.word	0x2000040c

0800e7b4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800e7bc:	6879      	ldr	r1, [r7, #4]
 800e7be:	4807      	ldr	r0, [pc, #28]	; (800e7dc <TL_MM_EvtDone+0x28>)
 800e7c0:	f001 fa62 	bl	800fc88 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800e7c4:	6879      	ldr	r1, [r7, #4]
 800e7c6:	2000      	movs	r0, #0
 800e7c8:	f000 f858 	bl	800e87c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800e7cc:	4804      	ldr	r0, [pc, #16]	; (800e7e0 <TL_MM_EvtDone+0x2c>)
 800e7ce:	f006 fc09 	bl	8014fe4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800e7d2:	bf00      	nop
}
 800e7d4:	3708      	adds	r7, #8
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	200003f4 	.word	0x200003f4
 800e7e0:	0800e7e5 	.word	0x0800e7e5

0800e7e4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e7ea:	e00c      	b.n	800e806 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800e7ec:	1d3b      	adds	r3, r7, #4
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	480a      	ldr	r0, [pc, #40]	; (800e81c <SendFreeBuf+0x38>)
 800e7f2:	f001 fa8c 	bl	800fd0e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800e7f6:	4b0a      	ldr	r3, [pc, #40]	; (800e820 <SendFreeBuf+0x3c>)
 800e7f8:	691b      	ldr	r3, [r3, #16]
 800e7fa:	691b      	ldr	r3, [r3, #16]
 800e7fc:	687a      	ldr	r2, [r7, #4]
 800e7fe:	4611      	mov	r1, r2
 800e800:	4618      	mov	r0, r3
 800e802:	f001 fa41 	bl	800fc88 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e806:	4805      	ldr	r0, [pc, #20]	; (800e81c <SendFreeBuf+0x38>)
 800e808:	f001 f9fa 	bl	800fc00 <LST_is_empty>
 800e80c:	4603      	mov	r3, r0
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d0ec      	beq.n	800e7ec <SendFreeBuf+0x8>
  }

  return;
 800e812:	bf00      	nop
}
 800e814:	3708      	adds	r7, #8
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	200003f4 	.word	0x200003f4
 800e820:	20030000 	.word	0x20030000

0800e824 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800e824:	b580      	push	{r7, lr}
 800e826:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800e828:	4805      	ldr	r0, [pc, #20]	; (800e840 <TL_TRACES_Init+0x1c>)
 800e82a:	f001 f9d9 	bl	800fbe0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800e82e:	4b05      	ldr	r3, [pc, #20]	; (800e844 <TL_TRACES_Init+0x20>)
 800e830:	695b      	ldr	r3, [r3, #20]
 800e832:	4a03      	ldr	r2, [pc, #12]	; (800e840 <TL_TRACES_Init+0x1c>)
 800e834:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800e836:	f006 fc0b 	bl	8015050 <HW_IPCC_TRACES_Init>

  return;
 800e83a:	bf00      	nop
}
 800e83c:	bd80      	pop	{r7, pc}
 800e83e:	bf00      	nop
 800e840:	200300bc 	.word	0x200300bc
 800e844:	20030000 	.word	0x20030000

0800e848 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e84e:	e008      	b.n	800e862 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800e850:	1d3b      	adds	r3, r7, #4
 800e852:	4619      	mov	r1, r3
 800e854:	4808      	ldr	r0, [pc, #32]	; (800e878 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e856:	f001 fa5a 	bl	800fd0e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7f3 fa85 	bl	8001d6c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e862:	4805      	ldr	r0, [pc, #20]	; (800e878 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e864:	f001 f9cc 	bl	800fc00 <LST_is_empty>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d0f0      	beq.n	800e850 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800e86e:	bf00      	nop
}
 800e870:	3708      	adds	r7, #8
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop
 800e878:	200300bc 	.word	0x200300bc

0800e87c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b085      	sub	sp, #20
 800e880:	af00      	add	r7, sp, #0
 800e882:	4603      	mov	r3, r0
 800e884:	6039      	str	r1, [r7, #0]
 800e886:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800e888:	79fb      	ldrb	r3, [r7, #7]
 800e88a:	2b06      	cmp	r3, #6
 800e88c:	d849      	bhi.n	800e922 <OutputDbgTrace+0xa6>
 800e88e:	a201      	add	r2, pc, #4	; (adr r2, 800e894 <OutputDbgTrace+0x18>)
 800e890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e894:	0800e8b1 	.word	0x0800e8b1
 800e898:	0800e8d3 	.word	0x0800e8d3
 800e89c:	0800e8d9 	.word	0x0800e8d9
 800e8a0:	0800e8f3 	.word	0x0800e8f3
 800e8a4:	0800e8ff 	.word	0x0800e8ff
 800e8a8:	0800e905 	.word	0x0800e905
 800e8ac:	0800e917 	.word	0x0800e917
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	7a5b      	ldrb	r3, [r3, #9]
 800e8b8:	2b0f      	cmp	r3, #15
 800e8ba:	d004      	beq.n	800e8c6 <OutputDbgTrace+0x4a>
 800e8bc:	2bff      	cmp	r3, #255	; 0xff
 800e8be:	d004      	beq.n	800e8ca <OutputDbgTrace+0x4e>
 800e8c0:	2b0e      	cmp	r3, #14
 800e8c2:	d004      	beq.n	800e8ce <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800e8c4:	e004      	b.n	800e8d0 <OutputDbgTrace+0x54>
          break;
 800e8c6:	bf00      	nop
 800e8c8:	e02c      	b.n	800e924 <OutputDbgTrace+0xa8>
          break;
 800e8ca:	bf00      	nop
 800e8cc:	e02a      	b.n	800e924 <OutputDbgTrace+0xa8>
          break;
 800e8ce:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800e8d0:	e028      	b.n	800e924 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e8d6:	e025      	b.n	800e924 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	7a5b      	ldrb	r3, [r3, #9]
 800e8e0:	2b0e      	cmp	r3, #14
 800e8e2:	d002      	beq.n	800e8ea <OutputDbgTrace+0x6e>
 800e8e4:	2b0f      	cmp	r3, #15
 800e8e6:	d002      	beq.n	800e8ee <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e8e8:	e002      	b.n	800e8f0 <OutputDbgTrace+0x74>
          break;
 800e8ea:	bf00      	nop
 800e8ec:	e01a      	b.n	800e924 <OutputDbgTrace+0xa8>
          break;
 800e8ee:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e8f0:	e018      	b.n	800e924 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	7a5b      	ldrb	r3, [r3, #9]
 800e8fa:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e8fc:	e012      	b.n	800e924 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e902:	e00f      	b.n	800e924 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	7a5b      	ldrb	r3, [r3, #9]
 800e90c:	2b0e      	cmp	r3, #14
 800e90e:	d000      	beq.n	800e912 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e910:	e000      	b.n	800e914 <OutputDbgTrace+0x98>
          break;
 800e912:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e914:	e006      	b.n	800e924 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	7a5b      	ldrb	r3, [r3, #9]
 800e91e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e920:	e000      	b.n	800e924 <OutputDbgTrace+0xa8>

    default:
      break;
 800e922:	bf00      	nop
  }

  return;
 800e924:	bf00      	nop
}
 800e926:	3714      	adds	r7, #20
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <otCoapHeaderInit>:
extern otCoapRequestHandler defaultCoapRequestHandlerCb;

#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b084      	sub	sp, #16
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	460b      	mov	r3, r1
 800e93a:	70fb      	strb	r3, [r7, #3]
 800e93c:	4613      	mov	r3, r2
 800e93e:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800e940:	f005 ffd8 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800e944:	f005 ff74 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800e948:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2200      	movs	r2, #0
 800e94e:	f062 0260 	orn	r2, r2, #96	; 0x60
 800e952:	701a      	strb	r2, [r3, #0]
 800e954:	2200      	movs	r2, #0
 800e956:	705a      	strb	r2, [r3, #1]
 800e958:	2200      	movs	r2, #0
 800e95a:	709a      	strb	r2, [r3, #2]
 800e95c:	2200      	movs	r2, #0
 800e95e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2200      	movs	r2, #0
 800e964:	f042 0203 	orr.w	r2, r2, #3
 800e968:	711a      	strb	r2, [r3, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	715a      	strb	r2, [r3, #5]
 800e96e:	2200      	movs	r2, #0
 800e970:	719a      	strb	r2, [r3, #6]
 800e972:	2200      	movs	r2, #0
 800e974:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 800e97c:	78fa      	ldrb	r2, [r7, #3]
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 800e982:	78ba      	ldrb	r2, [r7, #2]
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800e988:	f005 ff76 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800e98c:	f005 ff5c 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800e990:	60f8      	str	r0, [r7, #12]
}
 800e992:	bf00      	nop
 800e994:	3710      	adds	r7, #16
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}

0800e99a <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 800e99a:	b580      	push	{r7, lr}
 800e99c:	b086      	sub	sp, #24
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	60f8      	str	r0, [r7, #12]
 800e9a2:	60b9      	str	r1, [r7, #8]
 800e9a4:	4613      	mov	r3, r2
 800e9a6:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 800e9a8:	f005 ffa4 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800e9ac:	f005 ff40 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800e9b0:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	f062 025f 	orn	r2, r2, #95	; 0x5f
 800e9ba:	701a      	strb	r2, [r3, #0]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	705a      	strb	r2, [r3, #1]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	709a      	strb	r2, [r3, #2]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f042 0203 	orr.w	r2, r2, #3
 800e9d0:	711a      	strb	r2, [r3, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	715a      	strb	r2, [r3, #5]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	719a      	strb	r2, [r3, #6]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800e9de:	68fa      	ldr	r2, [r7, #12]
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 800e9e4:	68ba      	ldr	r2, [r7, #8]
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 800e9ea:	79fa      	ldrb	r2, [r7, #7]
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800e9f0:	f005 ff42 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800e9f4:	f005 ff28 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800e9f8:	6178      	str	r0, [r7, #20]
}
 800e9fa:	bf00      	nop
 800e9fc:	3718      	adds	r7, #24
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}

0800ea02 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 800ea02:	b580      	push	{r7, lr}
 800ea04:	b084      	sub	sp, #16
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800ea0e:	f005 ff71 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ea12:	f005 ff0d 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800ea16:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f062 025e 	orn	r2, r2, #94	; 0x5e
 800ea20:	701a      	strb	r2, [r3, #0]
 800ea22:	2200      	movs	r2, #0
 800ea24:	705a      	strb	r2, [r3, #1]
 800ea26:	2200      	movs	r2, #0
 800ea28:	709a      	strb	r2, [r3, #2]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2200      	movs	r2, #0
 800ea32:	f042 0202 	orr.w	r2, r2, #2
 800ea36:	711a      	strb	r2, [r3, #4]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	715a      	strb	r2, [r3, #5]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	719a      	strb	r2, [r3, #6]
 800ea40:	2200      	movs	r2, #0
 800ea42:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800ea4a:	78fa      	ldrb	r2, [r7, #3]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800ea50:	f005 ff12 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ea54:	f005 fef8 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ea58:	60f8      	str	r0, [r7, #12]
}
 800ea5a:	bf00      	nop
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b084      	sub	sp, #16
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800ea6e:	f005 ff41 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ea72:	f005 fedd 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800ea76:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	f062 025d 	orn	r2, r2, #93	; 0x5d
 800ea80:	701a      	strb	r2, [r3, #0]
 800ea82:	2200      	movs	r2, #0
 800ea84:	705a      	strb	r2, [r3, #1]
 800ea86:	2200      	movs	r2, #0
 800ea88:	709a      	strb	r2, [r3, #2]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2200      	movs	r2, #0
 800ea92:	f042 0202 	orr.w	r2, r2, #2
 800ea96:	711a      	strb	r2, [r3, #4]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	715a      	strb	r2, [r3, #5]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	719a      	strb	r2, [r3, #6]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 800eaaa:	78fa      	ldrb	r2, [r7, #3]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800eab0:	f005 fee2 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800eab4:	f005 fec8 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800eab8:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	b2db      	uxtb	r3, r3
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3710      	adds	r7, #16
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800ead2:	f005 ff0f 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ead6:	f005 feab 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800eada:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2200      	movs	r2, #0
 800eae0:	f062 0250 	orn	r2, r2, #80	; 0x50
 800eae4:	701a      	strb	r2, [r3, #0]
 800eae6:	2200      	movs	r2, #0
 800eae8:	705a      	strb	r2, [r3, #1]
 800eaea:	2200      	movs	r2, #0
 800eaec:	709a      	strb	r2, [r3, #2]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f042 0202 	orr.w	r2, r2, #2
 800eafa:	711a      	strb	r2, [r3, #4]
 800eafc:	2200      	movs	r2, #0
 800eafe:	715a      	strb	r2, [r3, #5]
 800eb00:	2200      	movs	r2, #0
 800eb02:	719a      	strb	r2, [r3, #6]
 800eb04:	2200      	movs	r2, #0
 800eb06:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800eb08:	687a      	ldr	r2, [r7, #4]
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 800eb0e:	683a      	ldr	r2, [r7, #0]
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800eb14:	f005 feb0 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800eb18:	f005 fe96 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800eb1c:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	689b      	ldr	r3, [r3, #8]
 800eb22:	b2db      	uxtb	r3, r3
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800eb34:	f005 fede 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800eb38:	f005 fe7a 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800eb3c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2200      	movs	r2, #0
 800eb42:	f062 024d 	orn	r2, r2, #77	; 0x4d
 800eb46:	701a      	strb	r2, [r3, #0]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	705a      	strb	r2, [r3, #1]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	709a      	strb	r2, [r3, #2]
 800eb50:	2200      	movs	r2, #0
 800eb52:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2200      	movs	r2, #0
 800eb58:	f042 0201 	orr.w	r2, r2, #1
 800eb5c:	711a      	strb	r2, [r3, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	715a      	strb	r2, [r3, #5]
 800eb62:	2200      	movs	r2, #0
 800eb64:	719a      	strb	r2, [r3, #6]
 800eb66:	2200      	movs	r2, #0
 800eb68:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800eb70:	f005 fe82 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800eb74:	f005 fe68 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800eb78:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	689b      	ldr	r3, [r3, #8]
 800eb7e:	b2db      	uxtb	r3, r3
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3710      	adds	r7, #16
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b084      	sub	sp, #16
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	460b      	mov	r3, r1
 800eb92:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800eb94:	f005 feae 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800eb98:	f005 fe4a 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800eb9c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2200      	movs	r2, #0
 800eba2:	f062 0256 	orn	r2, r2, #86	; 0x56
 800eba6:	701a      	strb	r2, [r3, #0]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	705a      	strb	r2, [r3, #1]
 800ebac:	2200      	movs	r2, #0
 800ebae:	709a      	strb	r2, [r3, #2]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	f042 0202 	orr.w	r2, r2, #2
 800ebbc:	711a      	strb	r2, [r3, #4]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	715a      	strb	r2, [r3, #5]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	719a      	strb	r2, [r3, #6]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 800ebd0:	887a      	ldrh	r2, [r7, #2]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800ebd6:	f005 fe4f 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ebda:	f005 fe35 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ebde:	60f8      	str	r0, [r7, #12]
}
 800ebe0:	bf00      	nop
 800ebe2:	3710      	adds	r7, #16
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ebf0:	f005 fe80 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ebf4:	f005 fe1c 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800ebf8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	f062 0261 	orn	r2, r2, #97	; 0x61
 800ec02:	701a      	strb	r2, [r3, #0]
 800ec04:	2200      	movs	r2, #0
 800ec06:	705a      	strb	r2, [r3, #1]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	709a      	strb	r2, [r3, #2]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2200      	movs	r2, #0
 800ec14:	f042 0201 	orr.w	r2, r2, #1
 800ec18:	711a      	strb	r2, [r3, #4]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	715a      	strb	r2, [r3, #5]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	719a      	strb	r2, [r3, #6]
 800ec22:	2200      	movs	r2, #0
 800ec24:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ec26:	687a      	ldr	r2, [r7, #4]
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ec2c:	f005 fe24 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ec30:	f005 fe0a 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ec34:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	689b      	ldr	r3, [r3, #8]
 800ec3a:	b2db      	uxtb	r3, r3
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3710      	adds	r7, #16
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ec4c:	f005 fe52 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ec50:	f005 fdee 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800ec54:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	f062 024c 	orn	r2, r2, #76	; 0x4c
 800ec5e:	701a      	strb	r2, [r3, #0]
 800ec60:	2200      	movs	r2, #0
 800ec62:	705a      	strb	r2, [r3, #1]
 800ec64:	2200      	movs	r2, #0
 800ec66:	709a      	strb	r2, [r3, #2]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f042 0201 	orr.w	r2, r2, #1
 800ec74:	711a      	strb	r2, [r3, #4]
 800ec76:	2200      	movs	r2, #0
 800ec78:	715a      	strb	r2, [r3, #5]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	719a      	strb	r2, [r3, #6]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ec88:	f005 fdf6 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ec8c:	f005 fddc 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ec90:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	689b      	ldr	r3, [r3, #8]
 800ec96:	b2db      	uxtb	r3, r3
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3710      	adds	r7, #16
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800eca8:	f005 fe24 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ecac:	f005 fdc0 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800ecb0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f062 0255 	orn	r2, r2, #85	; 0x55
 800ecba:	701a      	strb	r2, [r3, #0]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	705a      	strb	r2, [r3, #1]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	709a      	strb	r2, [r3, #2]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2200      	movs	r2, #0
 800eccc:	f042 0201 	orr.w	r2, r2, #1
 800ecd0:	711a      	strb	r2, [r3, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	715a      	strb	r2, [r3, #5]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	719a      	strb	r2, [r3, #6]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ecde:	687a      	ldr	r2, [r7, #4]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ece4:	f005 fdc8 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ece8:	f005 fdae 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ecec:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	b29b      	uxth	r3, r3
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3710      	adds	r7, #16
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ed04:	f005 fdf6 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ed08:	f005 fd92 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800ed0c:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2200      	movs	r2, #0
 800ed12:	f062 0254 	orn	r2, r2, #84	; 0x54
 800ed16:	701a      	strb	r2, [r3, #0]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	705a      	strb	r2, [r3, #1]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	709a      	strb	r2, [r3, #2]
 800ed20:	2200      	movs	r2, #0
 800ed22:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2200      	movs	r2, #0
 800ed28:	f042 0201 	orr.w	r2, r2, #1
 800ed2c:	711a      	strb	r2, [r3, #4]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	715a      	strb	r2, [r3, #5]
 800ed32:	2200      	movs	r2, #0
 800ed34:	719a      	strb	r2, [r3, #6]
 800ed36:	2200      	movs	r2, #0
 800ed38:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ed40:	f005 fd9a 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ed44:	f005 fd80 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ed48:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	689b      	ldr	r3, [r3, #8]
 800ed4e:	b2db      	uxtb	r3, r3
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3710      	adds	r7, #16
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ed60:	f005 fdc8 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ed64:	f005 fd64 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800ed68:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	f062 0253 	orn	r2, r2, #83	; 0x53
 800ed72:	701a      	strb	r2, [r3, #0]
 800ed74:	2200      	movs	r2, #0
 800ed76:	705a      	strb	r2, [r3, #1]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	709a      	strb	r2, [r3, #2]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2200      	movs	r2, #0
 800ed84:	f042 0201 	orr.w	r2, r2, #1
 800ed88:	711a      	strb	r2, [r3, #4]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	715a      	strb	r2, [r3, #5]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	719a      	strb	r2, [r3, #6]
 800ed92:	2200      	movs	r2, #0
 800ed94:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ed96:	687a      	ldr	r2, [r7, #4]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ed9c:	f005 fd6c 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800eda0:	f005 fd52 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800eda4:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	689b      	ldr	r3, [r3, #8]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3710      	adds	r7, #16
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 800edb2:	b580      	push	{r7, lr}
 800edb4:	b084      	sub	sp, #16
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
 800edba:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800edbc:	f005 fd9a 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800edc0:	f005 fd36 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800edc4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2200      	movs	r2, #0
 800edca:	f062 0259 	orn	r2, r2, #89	; 0x59
 800edce:	701a      	strb	r2, [r3, #0]
 800edd0:	2200      	movs	r2, #0
 800edd2:	705a      	strb	r2, [r3, #1]
 800edd4:	2200      	movs	r2, #0
 800edd6:	709a      	strb	r2, [r3, #2]
 800edd8:	2200      	movs	r2, #0
 800edda:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2200      	movs	r2, #0
 800ede0:	f042 0201 	orr.w	r2, r2, #1
 800ede4:	711a      	strb	r2, [r3, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	715a      	strb	r2, [r3, #5]
 800edea:	2200      	movs	r2, #0
 800edec:	719a      	strb	r2, [r3, #6]
 800edee:	2200      	movs	r2, #0
 800edf0:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800edf2:	683a      	ldr	r2, [r7, #0]
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800edf8:	f005 fd3e 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800edfc:	f005 fd24 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ee00:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	689b      	ldr	r3, [r3, #8]

}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3710      	adds	r7, #16
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}

0800ee0e <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 800ee0e:	b580      	push	{r7, lr}
 800ee10:	b086      	sub	sp, #24
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	60f8      	str	r0, [r7, #12]
 800ee16:	60b9      	str	r1, [r7, #8]
 800ee18:	607a      	str	r2, [r7, #4]
 800ee1a:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 800ee1c:	f005 fd6a 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ee20:	f005 fd06 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800ee24:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	f062 0258 	orn	r2, r2, #88	; 0x58
 800ee2e:	701a      	strb	r2, [r3, #0]
 800ee30:	2200      	movs	r2, #0
 800ee32:	705a      	strb	r2, [r3, #1]
 800ee34:	2200      	movs	r2, #0
 800ee36:	709a      	strb	r2, [r3, #2]
 800ee38:	2200      	movs	r2, #0
 800ee3a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	f042 0203 	orr.w	r2, r2, #3
 800ee44:	711a      	strb	r2, [r3, #4]
 800ee46:	2200      	movs	r2, #0
 800ee48:	715a      	strb	r2, [r3, #5]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	719a      	strb	r2, [r3, #6]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800ee52:	68ba      	ldr	r2, [r7, #8]
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 800ee5e:	683a      	ldr	r2, [r7, #0]
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 800ee64:	6a3a      	ldr	r2, [r7, #32]
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800ee6a:	f005 fd05 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ee6e:	f005 fceb 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ee72:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	689b      	ldr	r3, [r3, #8]
 800ee78:	b2db      	uxtb	r3, r3
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3718      	adds	r7, #24
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800ee82:	b580      	push	{r7, lr}
 800ee84:	b084      	sub	sp, #16
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
 800ee8a:	460b      	mov	r3, r1
 800ee8c:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800ee8e:	f005 fd31 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ee92:	f005 fccd 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800ee96:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f062 024b 	orn	r2, r2, #75	; 0x4b
 800eea0:	701a      	strb	r2, [r3, #0]
 800eea2:	2200      	movs	r2, #0
 800eea4:	705a      	strb	r2, [r3, #1]
 800eea6:	2200      	movs	r2, #0
 800eea8:	709a      	strb	r2, [r3, #2]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	f042 0201 	orr.w	r2, r2, #1
 800eeb6:	711a      	strb	r2, [r3, #4]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	715a      	strb	r2, [r3, #5]
 800eebc:	2200      	movs	r2, #0
 800eebe:	719a      	strb	r2, [r3, #6]
 800eec0:	2200      	movs	r2, #0
 800eec2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 800eec4:	887a      	ldrh	r2, [r7, #2]
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800eeca:	f005 fcd5 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800eece:	f005 fcbb 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800eed2:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	689b      	ldr	r3, [r3, #8]
 800eed8:	b2db      	uxtb	r3, r3
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3710      	adds	r7, #16
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}

0800eee2 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800eee2:	b580      	push	{r7, lr}
 800eee4:	b084      	sub	sp, #16
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
 800eeea:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800eeec:	f005 fd02 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800eef0:	f005 fc9e 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800eef4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	2200      	movs	r2, #0
 800eefa:	f062 0249 	orn	r2, r2, #73	; 0x49
 800eefe:	701a      	strb	r2, [r3, #0]
 800ef00:	2200      	movs	r2, #0
 800ef02:	705a      	strb	r2, [r3, #1]
 800ef04:	2200      	movs	r2, #0
 800ef06:	709a      	strb	r2, [r3, #2]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	f042 0201 	orr.w	r2, r2, #1
 800ef14:	711a      	strb	r2, [r3, #4]
 800ef16:	2200      	movs	r2, #0
 800ef18:	715a      	strb	r2, [r3, #5]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	719a      	strb	r2, [r3, #6]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 800ef22:	683a      	ldr	r2, [r7, #0]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ef28:	f005 fca6 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ef2c:	f005 fc8c 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ef30:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	689b      	ldr	r3, [r3, #8]
 800ef36:	b2db      	uxtb	r3, r3
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3710      	adds	r7, #16
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b086      	sub	sp, #24
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	60b9      	str	r1, [r7, #8]
 800ef4a:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800ef4c:	f005 fcd2 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ef50:	f005 fc6e 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800ef54:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f062 0257 	orn	r2, r2, #87	; 0x57
 800ef5e:	701a      	strb	r2, [r3, #0]
 800ef60:	2200      	movs	r2, #0
 800ef62:	705a      	strb	r2, [r3, #1]
 800ef64:	2200      	movs	r2, #0
 800ef66:	709a      	strb	r2, [r3, #2]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	f042 0202 	orr.w	r2, r2, #2
 800ef74:	711a      	strb	r2, [r3, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	715a      	strb	r2, [r3, #5]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	719a      	strb	r2, [r3, #6]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800ef82:	68ba      	ldr	r2, [r7, #8]
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800ef88:	687a      	ldr	r2, [r7, #4]
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800ef8e:	f005 fc73 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ef92:	f005 fc59 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ef96:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	b2db      	uxtb	r3, r3
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3718      	adds	r7, #24
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}

0800efa6 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800efa6:	b580      	push	{r7, lr}
 800efa8:	b082      	sub	sp, #8
 800efaa:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 800efac:	f005 fca2 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800efb0:	f005 fc3e 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800efb4:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2200      	movs	r2, #0
 800efba:	f062 026b 	orn	r2, r2, #107	; 0x6b
 800efbe:	701a      	strb	r2, [r3, #0]
 800efc0:	2200      	movs	r2, #0
 800efc2:	705a      	strb	r2, [r3, #1]
 800efc4:	2200      	movs	r2, #0
 800efc6:	709a      	strb	r2, [r3, #2]
 800efc8:	2200      	movs	r2, #0
 800efca:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	711a      	strb	r2, [r3, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	715a      	strb	r2, [r3, #5]
 800efd6:	2200      	movs	r2, #0
 800efd8:	719a      	strb	r2, [r3, #6]
 800efda:	2200      	movs	r2, #0
 800efdc:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800efde:	f005 fc4b 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800efe2:	f005 fc31 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800efe6:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	689b      	ldr	r3, [r3, #8]
}
 800efec:	4618      	mov	r0, r3
 800efee:	3708      	adds	r7, #8
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800effc:	f005 fc7a 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f000:	f005 fc16 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f004:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2200      	movs	r2, #0
 800f00a:	f062 0269 	orn	r2, r2, #105	; 0x69
 800f00e:	701a      	strb	r2, [r3, #0]
 800f010:	2200      	movs	r2, #0
 800f012:	705a      	strb	r2, [r3, #1]
 800f014:	2200      	movs	r2, #0
 800f016:	709a      	strb	r2, [r3, #2]
 800f018:	2200      	movs	r2, #0
 800f01a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2200      	movs	r2, #0
 800f020:	711a      	strb	r2, [r3, #4]
 800f022:	2200      	movs	r2, #0
 800f024:	715a      	strb	r2, [r3, #5]
 800f026:	2200      	movs	r2, #0
 800f028:	719a      	strb	r2, [r3, #6]
 800f02a:	2200      	movs	r2, #0
 800f02c:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800f02e:	f005 fc23 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f032:	f005 fc09 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f036:	60f8      	str	r0, [r7, #12]
}
 800f038:	bf00      	nop
 800f03a:	3710      	adds	r7, #16
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b086      	sub	sp, #24
 800f044:	af00      	add	r7, sp, #0
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800f04c:	f005 fc52 	bl	80148f4 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 800f050:	4a15      	ldr	r2, [pc, #84]	; (800f0a8 <otSetStateChangedCallback+0x68>)
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f056:	f005 fbeb 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f05a:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	2200      	movs	r2, #0
 800f060:	f062 0268 	orn	r2, r2, #104	; 0x68
 800f064:	701a      	strb	r2, [r3, #0]
 800f066:	2200      	movs	r2, #0
 800f068:	705a      	strb	r2, [r3, #1]
 800f06a:	2200      	movs	r2, #0
 800f06c:	709a      	strb	r2, [r3, #2]
 800f06e:	2200      	movs	r2, #0
 800f070:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	2200      	movs	r2, #0
 800f076:	f042 0201 	orr.w	r2, r2, #1
 800f07a:	711a      	strb	r2, [r3, #4]
 800f07c:	2200      	movs	r2, #0
 800f07e:	715a      	strb	r2, [r3, #5]
 800f080:	2200      	movs	r2, #0
 800f082:	719a      	strb	r2, [r3, #6]
 800f084:	2200      	movs	r2, #0
 800f086:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 800f088:	687a      	ldr	r2, [r7, #4]
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800f08e:	f005 fbf3 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f092:	f005 fbd9 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f096:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	689b      	ldr	r3, [r3, #8]
 800f09c:	b2db      	uxtb	r3, r3
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3718      	adds	r7, #24
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	20000410 	.word	0x20000410

0800f0ac <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800f0b4:	f005 fc1e 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f0b8:	f005 fbba 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f0bc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	f062 0264 	orn	r2, r2, #100	; 0x64
 800f0c6:	701a      	strb	r2, [r3, #0]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	705a      	strb	r2, [r3, #1]
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	709a      	strb	r2, [r3, #2]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	711a      	strb	r2, [r3, #4]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	715a      	strb	r2, [r3, #5]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	719a      	strb	r2, [r3, #6]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800f0e6:	f005 fbc7 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f0ea:	f005 fbad 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f0ee:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	689b      	ldr	r3, [r3, #8]
 800f0f4:	b2db      	uxtb	r3, r3
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}

0800f0fe <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800f0fe:	b580      	push	{r7, lr}
 800f100:	b084      	sub	sp, #16
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
 800f106:	460b      	mov	r3, r1
 800f108:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800f10a:	f005 fbf3 	bl	80148f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f10e:	f005 fb8f 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f112:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2200      	movs	r2, #0
 800f118:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800f11c:	701a      	strb	r2, [r3, #0]
 800f11e:	2200      	movs	r2, #0
 800f120:	705a      	strb	r2, [r3, #1]
 800f122:	2200      	movs	r2, #0
 800f124:	709a      	strb	r2, [r3, #2]
 800f126:	2200      	movs	r2, #0
 800f128:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2200      	movs	r2, #0
 800f12e:	f042 0201 	orr.w	r2, r2, #1
 800f132:	711a      	strb	r2, [r3, #4]
 800f134:	2200      	movs	r2, #0
 800f136:	715a      	strb	r2, [r3, #5]
 800f138:	2200      	movs	r2, #0
 800f13a:	719a      	strb	r2, [r3, #6]
 800f13c:	2200      	movs	r2, #0
 800f13e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800f140:	78fa      	ldrb	r2, [r7, #3]
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800f146:	f005 fb97 	bl	8014878 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f14a:	f005 fb7d 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f14e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	689b      	ldr	r3, [r3, #8]
 800f154:	b2db      	uxtb	r3, r3
}
 800f156:	4618      	mov	r0, r3
 800f158:	3710      	adds	r7, #16
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 800f15e:	b580      	push	{r7, lr}
 800f160:	b084      	sub	sp, #16
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800f166:	f005 fbc5 	bl	80148f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f16a:	f005 fb61 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f16e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2200      	movs	r2, #0
 800f174:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800f178:	701a      	strb	r2, [r3, #0]
 800f17a:	2200      	movs	r2, #0
 800f17c:	705a      	strb	r2, [r3, #1]
 800f17e:	2200      	movs	r2, #0
 800f180:	709a      	strb	r2, [r3, #2]
 800f182:	2200      	movs	r2, #0
 800f184:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2200      	movs	r2, #0
 800f18a:	711a      	strb	r2, [r3, #4]
 800f18c:	2200      	movs	r2, #0
 800f18e:	715a      	strb	r2, [r3, #5]
 800f190:	2200      	movs	r2, #0
 800f192:	719a      	strb	r2, [r3, #6]
 800f194:	2200      	movs	r2, #0
 800f196:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800f198:	f005 fb6e 	bl	8014878 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f19c:	f005 fb54 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f1a0:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	689b      	ldr	r3, [r3, #8]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	bf14      	ite	ne
 800f1aa:	2301      	movne	r3, #1
 800f1ac:	2300      	moveq	r3, #0
 800f1ae:	b2db      	uxtb	r3, r3
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3710      	adds	r7, #16
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800f1c0:	f005 fb98 	bl	80148f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f1c4:	f005 fb34 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f1c8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 800f1d2:	701a      	strb	r2, [r3, #0]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	705a      	strb	r2, [r3, #1]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	709a      	strb	r2, [r3, #2]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	711a      	strb	r2, [r3, #4]
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	715a      	strb	r2, [r3, #5]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	719a      	strb	r2, [r3, #6]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800f1f2:	f005 fb41 	bl	8014878 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f1f6:	f005 fb27 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f1fa:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	689b      	ldr	r3, [r3, #8]
}
 800f200:	4618      	mov	r0, r3
 800f202:	3710      	adds	r7, #16
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <otIp6GetMulticastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otNetifMulticastAddress *otIp6GetMulticastAddresses(otInstance *aInstance)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800f210:	f005 fb70 	bl	80148f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f214:	f005 fb0c 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f218:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_MULTICAST_ADDRESSES;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2200      	movs	r2, #0
 800f21e:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
 800f222:	701a      	strb	r2, [r3, #0]
 800f224:	2200      	movs	r2, #0
 800f226:	705a      	strb	r2, [r3, #1]
 800f228:	2200      	movs	r2, #0
 800f22a:	709a      	strb	r2, [r3, #2]
 800f22c:	2200      	movs	r2, #0
 800f22e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2200      	movs	r2, #0
 800f234:	711a      	strb	r2, [r3, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	715a      	strb	r2, [r3, #5]
 800f23a:	2200      	movs	r2, #0
 800f23c:	719a      	strb	r2, [r3, #6]
 800f23e:	2200      	movs	r2, #0
 800f240:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800f242:	f005 fb19 	bl	8014878 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f246:	f005 faff 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f24a:	60f8      	str	r0, [r7, #12]
  return (otNetifMulticastAddress *)p_ot_req->Data[0];
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	689b      	ldr	r3, [r3, #8]
}
 800f250:	4618      	mov	r0, r3
 800f252:	3710      	adds	r7, #16
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}

0800f258 <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800f262:	f005 fb47 	bl	80148f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f266:	f005 fae3 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f26a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	2200      	movs	r2, #0
 800f270:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800f274:	701a      	strb	r2, [r3, #0]
 800f276:	2200      	movs	r2, #0
 800f278:	705a      	strb	r2, [r3, #1]
 800f27a:	2200      	movs	r2, #0
 800f27c:	709a      	strb	r2, [r3, #2]
 800f27e:	2200      	movs	r2, #0
 800f280:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2200      	movs	r2, #0
 800f286:	f042 0202 	orr.w	r2, r2, #2
 800f28a:	711a      	strb	r2, [r3, #4]
 800f28c:	2200      	movs	r2, #0
 800f28e:	715a      	strb	r2, [r3, #5]
 800f290:	2200      	movs	r2, #0
 800f292:	719a      	strb	r2, [r3, #6]
 800f294:	2200      	movs	r2, #0
 800f296:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 800f29e:	683a      	ldr	r2, [r7, #0]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800f2a4:	f005 fae8 	bl	8014878 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f2a8:	f005 face 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f2ac:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	689b      	ldr	r3, [r3, #8]
 800f2b2:	b2db      	uxtb	r3, r3
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3710      	adds	r7, #16
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800f2c8:	f005 fb14 	bl	80148f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f2cc:	f005 fab0 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f2d0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	f042 0208 	orr.w	r2, r2, #8
 800f2da:	701a      	strb	r2, [r3, #0]
 800f2dc:	2200      	movs	r2, #0
 800f2de:	705a      	strb	r2, [r3, #1]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	709a      	strb	r2, [r3, #2]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	f042 0201 	orr.w	r2, r2, #1
 800f2f0:	711a      	strb	r2, [r3, #4]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	715a      	strb	r2, [r3, #5]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	719a      	strb	r2, [r3, #6]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800f2fe:	78fa      	ldrb	r2, [r7, #3]
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800f304:	f005 fab8 	bl	8014878 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f308:	f005 fa9e 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f30c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	689b      	ldr	r3, [r3, #8]
 800f312:	b2db      	uxtb	r3, r3
}
 800f314:	4618      	mov	r0, r3
 800f316:	3710      	adds	r7, #16
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b084      	sub	sp, #16
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	460b      	mov	r3, r1
 800f326:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800f328:	f005 fae4 	bl	80148f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f32c:	f005 fa80 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f330:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2200      	movs	r2, #0
 800f336:	f042 020f 	orr.w	r2, r2, #15
 800f33a:	701a      	strb	r2, [r3, #0]
 800f33c:	2200      	movs	r2, #0
 800f33e:	705a      	strb	r2, [r3, #1]
 800f340:	2200      	movs	r2, #0
 800f342:	709a      	strb	r2, [r3, #2]
 800f344:	2200      	movs	r2, #0
 800f346:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2200      	movs	r2, #0
 800f34c:	f042 0201 	orr.w	r2, r2, #1
 800f350:	711a      	strb	r2, [r3, #4]
 800f352:	2200      	movs	r2, #0
 800f354:	715a      	strb	r2, [r3, #5]
 800f356:	2200      	movs	r2, #0
 800f358:	719a      	strb	r2, [r3, #6]
 800f35a:	2200      	movs	r2, #0
 800f35c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800f35e:	887a      	ldrh	r2, [r7, #2]
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800f364:	f005 fa88 	bl	8014878 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f368:	f005 fa6e 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f36c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	689b      	ldr	r3, [r3, #8]
 800f372:	b2db      	uxtb	r3, r3
}
 800f374:	4618      	mov	r0, r3
 800f376:	3710      	adds	r7, #16
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800f384:	f005 fab6 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f388:	f005 fa52 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f38c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2200      	movs	r2, #0
 800f392:	f062 0246 	orn	r2, r2, #70	; 0x46
 800f396:	701a      	strb	r2, [r3, #0]
 800f398:	2200      	movs	r2, #0
 800f39a:	705a      	strb	r2, [r3, #1]
 800f39c:	2200      	movs	r2, #0
 800f39e:	709a      	strb	r2, [r3, #2]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	f042 0201 	orr.w	r2, r2, #1
 800f3ac:	711a      	strb	r2, [r3, #4]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	715a      	strb	r2, [r3, #5]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	719a      	strb	r2, [r3, #6]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800f3ba:	687a      	ldr	r2, [r7, #4]
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800f3c0:	f005 fa5a 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f3c4:	f005 fa40 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f3c8:	60f8      	str	r0, [r7, #12]
}
 800f3ca:	bf00      	nop
 800f3cc:	3710      	adds	r7, #16
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}

0800f3d2 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 800f3d2:	b580      	push	{r7, lr}
 800f3d4:	b084      	sub	sp, #16
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800f3da:	f005 fa8b 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f3de:	f005 fa27 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f3e2:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	f062 0243 	orn	r2, r2, #67	; 0x43
 800f3ec:	701a      	strb	r2, [r3, #0]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	705a      	strb	r2, [r3, #1]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	709a      	strb	r2, [r3, #2]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	f042 0201 	orr.w	r2, r2, #1
 800f402:	711a      	strb	r2, [r3, #4]
 800f404:	2200      	movs	r2, #0
 800f406:	715a      	strb	r2, [r3, #5]
 800f408:	2200      	movs	r2, #0
 800f40a:	719a      	strb	r2, [r3, #6]
 800f40c:	2200      	movs	r2, #0
 800f40e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800f410:	687a      	ldr	r2, [r7, #4]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800f416:	f005 fa2f 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f41a:	f005 fa15 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f41e:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	689b      	ldr	r3, [r3, #8]
 800f424:	b29b      	uxth	r3, r3
}
 800f426:	4618      	mov	r0, r3
 800f428:	3710      	adds	r7, #16
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}

0800f42e <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800f42e:	b580      	push	{r7, lr}
 800f430:	b086      	sub	sp, #24
 800f432:	af00      	add	r7, sp, #0
 800f434:	60f8      	str	r0, [r7, #12]
 800f436:	60b9      	str	r1, [r7, #8]
 800f438:	4613      	mov	r3, r2
 800f43a:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 800f43c:	f005 fa5a 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f440:	f005 f9f6 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f444:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	2200      	movs	r2, #0
 800f44a:	f062 023e 	orn	r2, r2, #62	; 0x3e
 800f44e:	701a      	strb	r2, [r3, #0]
 800f450:	2200      	movs	r2, #0
 800f452:	705a      	strb	r2, [r3, #1]
 800f454:	2200      	movs	r2, #0
 800f456:	709a      	strb	r2, [r3, #2]
 800f458:	2200      	movs	r2, #0
 800f45a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	2200      	movs	r2, #0
 800f460:	f042 0203 	orr.w	r2, r2, #3
 800f464:	711a      	strb	r2, [r3, #4]
 800f466:	2200      	movs	r2, #0
 800f468:	715a      	strb	r2, [r3, #5]
 800f46a:	2200      	movs	r2, #0
 800f46c:	719a      	strb	r2, [r3, #6]
 800f46e:	2200      	movs	r2, #0
 800f470:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800f472:	68fa      	ldr	r2, [r7, #12]
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 800f478:	68ba      	ldr	r2, [r7, #8]
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 800f47e:	88fa      	ldrh	r2, [r7, #6]
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800f484:	f005 f9f8 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f488:	f005 f9de 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f48c:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	689b      	ldr	r3, [r3, #8]
 800f492:	b2db      	uxtb	r3, r3
}
 800f494:	4618      	mov	r0, r3
 800f496:	3718      	adds	r7, #24
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b086      	sub	sp, #24
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	607a      	str	r2, [r7, #4]
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	817b      	strh	r3, [r7, #10]
 800f4ac:	4613      	mov	r3, r2
 800f4ae:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 800f4b0:	f005 fa20 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f4b4:	f005 f9bc 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f4b8:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f062 023d 	orn	r2, r2, #61	; 0x3d
 800f4c2:	701a      	strb	r2, [r3, #0]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	705a      	strb	r2, [r3, #1]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	709a      	strb	r2, [r3, #2]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	f042 0204 	orr.w	r2, r2, #4
 800f4d8:	711a      	strb	r2, [r3, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	715a      	strb	r2, [r3, #5]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	719a      	strb	r2, [r3, #6]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800f4e6:	68fa      	ldr	r2, [r7, #12]
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 800f4ec:	897a      	ldrh	r2, [r7, #10]
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 800f4f8:	893a      	ldrh	r2, [r7, #8]
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800f4fe:	f005 f9bb 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f502:	f005 f9a1 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f506:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	689b      	ldr	r3, [r3, #8]
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3718      	adds	r7, #24
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800f514:	b5b0      	push	{r4, r5, r7, lr}
 800f516:	b084      	sub	sp, #16
 800f518:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800f51a:	2300      	movs	r3, #0
 800f51c:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800f51e:	f005 f99f 	bl	8014860 <THREAD_Get_NotificationPayloadBuffer>
 800f522:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	3b01      	subs	r3, #1
 800f52a:	2b17      	cmp	r3, #23
 800f52c:	f200 81c3 	bhi.w	800f8b6 <OpenThread_CallBack_Processing+0x3a2>
 800f530:	a201      	add	r2, pc, #4	; (adr r2, 800f538 <OpenThread_CallBack_Processing+0x24>)
 800f532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f536:	bf00      	nop
 800f538:	0800f599 	.word	0x0800f599
 800f53c:	0800f5b5 	.word	0x0800f5b5
 800f540:	0800f619 	.word	0x0800f619
 800f544:	0800f661 	.word	0x0800f661
 800f548:	0800f66d 	.word	0x0800f66d
 800f54c:	0800f68b 	.word	0x0800f68b
 800f550:	0800f6a9 	.word	0x0800f6a9
 800f554:	0800f6c7 	.word	0x0800f6c7
 800f558:	0800f6e5 	.word	0x0800f6e5
 800f55c:	0800f703 	.word	0x0800f703
 800f560:	0800f725 	.word	0x0800f725
 800f564:	0800f743 	.word	0x0800f743
 800f568:	0800f8b7 	.word	0x0800f8b7
 800f56c:	0800f769 	.word	0x0800f769
 800f570:	0800f79d 	.word	0x0800f79d
 800f574:	0800f7c5 	.word	0x0800f7c5
 800f578:	0800f7e3 	.word	0x0800f7e3
 800f57c:	0800f851 	.word	0x0800f851
 800f580:	0800f879 	.word	0x0800f879
 800f584:	0800f8b7 	.word	0x0800f8b7
 800f588:	0800f897 	.word	0x0800f897
 800f58c:	0800f8b7 	.word	0x0800f8b7
 800f590:	0800f8b7 	.word	0x0800f8b7
 800f594:	0800f5f1 	.word	0x0800f5f1
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 800f598:	4b9b      	ldr	r3, [pc, #620]	; (800f808 <OpenThread_CallBack_Processing+0x2f4>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f000 818d 	beq.w	800f8bc <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800f5a2:	4b99      	ldr	r3, [pc, #612]	; (800f808 <OpenThread_CallBack_Processing+0x2f4>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	683a      	ldr	r2, [r7, #0]
 800f5a8:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 800f5aa:	683a      	ldr	r2, [r7, #0]
 800f5ac:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800f5ae:	4611      	mov	r1, r2
 800f5b0:	4798      	blx	r3
        }
        break;
 800f5b2:	e183      	b.n	800f8bc <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	689b      	ldr	r3, [r3, #8]
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	4b94      	ldr	r3, [pc, #592]	; (800f80c <OpenThread_CallBack_Processing+0x2f8>)
 800f5bc:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 800f5be:	4b93      	ldr	r3, [pc, #588]	; (800f80c <OpenThread_CallBack_Processing+0x2f8>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	4a92      	ldr	r2, [pc, #584]	; (800f810 <OpenThread_CallBack_Processing+0x2fc>)
 800f5c6:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 800f5c8:	4b91      	ldr	r3, [pc, #580]	; (800f810 <OpenThread_CallBack_Processing+0x2fc>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	f000 8177 	beq.w	800f8c0 <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800f5d2:	4b8f      	ldr	r3, [pc, #572]	; (800f810 <OpenThread_CallBack_Processing+0x2fc>)
 800f5d4:	681c      	ldr	r4, [r3, #0]
 800f5d6:	4b8d      	ldr	r3, [pc, #564]	; (800f80c <OpenThread_CallBack_Processing+0x2f8>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800f5e0:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800f5e6:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800f5ec:	47a0      	blx	r4
        }
        break;
 800f5ee:	e167      	b.n	800f8c0 <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 800f5f0:	4b88      	ldr	r3, [pc, #544]	; (800f814 <OpenThread_CallBack_Processing+0x300>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	f000 8165 	beq.w	800f8c4 <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800f5fa:	4b86      	ldr	r3, [pc, #536]	; (800f814 <OpenThread_CallBack_Processing+0x300>)
 800f5fc:	681c      	ldr	r4, [r3, #0]
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	689b      	ldr	r3, [r3, #8]
 800f602:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800f608:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800f60e:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800f614:	47a0      	blx	r4
        }
        break;
 800f616:	e155      	b.n	800f8c4 <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	689b      	ldr	r3, [r3, #8]
 800f61c:	461a      	mov	r2, r3
 800f61e:	4b7e      	ldr	r3, [pc, #504]	; (800f818 <OpenThread_CallBack_Processing+0x304>)
 800f620:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800f622:	4b7d      	ldr	r3, [pc, #500]	; (800f818 <OpenThread_CallBack_Processing+0x304>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	4a7c      	ldr	r2, [pc, #496]	; (800f81c <OpenThread_CallBack_Processing+0x308>)
 800f62a:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 800f62c:	4b7b      	ldr	r3, [pc, #492]	; (800f81c <OpenThread_CallBack_Processing+0x308>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	2b00      	cmp	r3, #0
 800f632:	f000 8149 	beq.w	800f8c8 <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800f636:	4b79      	ldr	r3, [pc, #484]	; (800f81c <OpenThread_CallBack_Processing+0x308>)
 800f638:	681c      	ldr	r4, [r3, #0]
 800f63a:	4b77      	ldr	r3, [pc, #476]	; (800f818 <OpenThread_CallBack_Processing+0x304>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800f644:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800f64a:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800f650:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800f656:	b2db      	uxtb	r3, r3
 800f658:	9300      	str	r3, [sp, #0]
 800f65a:	462b      	mov	r3, r5
 800f65c:	47a0      	blx	r4
        }
        break;
 800f65e:	e133      	b.n	800f8c8 <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 800f660:	2001      	movs	r0, #1
 800f662:	f7fe fd00 	bl	800e066 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800f666:	f7f6 fb58 	bl	8005d1a <HAL_NVIC_SystemReset>
        break;
 800f66a:	e14c      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 800f66c:	4b6c      	ldr	r3, [pc, #432]	; (800f820 <OpenThread_CallBack_Processing+0x30c>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	2b00      	cmp	r3, #0
 800f672:	f000 812b 	beq.w	800f8cc <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800f676:	4b6a      	ldr	r3, [pc, #424]	; (800f820 <OpenThread_CallBack_Processing+0x30c>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	683a      	ldr	r2, [r7, #0]
 800f67c:	6892      	ldr	r2, [r2, #8]
 800f67e:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800f680:	683a      	ldr	r2, [r7, #0]
 800f682:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800f684:	4611      	mov	r1, r2
 800f686:	4798      	blx	r3
        }
        break;
 800f688:	e120      	b.n	800f8cc <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 800f68a:	4b66      	ldr	r3, [pc, #408]	; (800f824 <OpenThread_CallBack_Processing+0x310>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	f000 811e 	beq.w	800f8d0 <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800f694:	4b63      	ldr	r3, [pc, #396]	; (800f824 <OpenThread_CallBack_Processing+0x310>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	683a      	ldr	r2, [r7, #0]
 800f69a:	6892      	ldr	r2, [r2, #8]
 800f69c:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 800f69e:	683a      	ldr	r2, [r7, #0]
 800f6a0:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800f6a2:	2000      	movs	r0, #0
 800f6a4:	4798      	blx	r3
        }
        break;
 800f6a6:	e113      	b.n	800f8d0 <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 800f6a8:	4b5f      	ldr	r3, [pc, #380]	; (800f828 <OpenThread_CallBack_Processing+0x314>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	f000 8111 	beq.w	800f8d4 <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800f6b2:	4b5d      	ldr	r3, [pc, #372]	; (800f828 <OpenThread_CallBack_Processing+0x314>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	683a      	ldr	r2, [r7, #0]
 800f6b8:	6892      	ldr	r2, [r2, #8]
 800f6ba:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800f6bc:	683a      	ldr	r2, [r7, #0]
 800f6be:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800f6c0:	4611      	mov	r1, r2
 800f6c2:	4798      	blx	r3
        }
        break;
 800f6c4:	e106      	b.n	800f8d4 <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 800f6c6:	4b59      	ldr	r3, [pc, #356]	; (800f82c <OpenThread_CallBack_Processing+0x318>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	f000 8104 	beq.w	800f8d8 <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800f6d0:	4b56      	ldr	r3, [pc, #344]	; (800f82c <OpenThread_CallBack_Processing+0x318>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	683a      	ldr	r2, [r7, #0]
 800f6d6:	6892      	ldr	r2, [r2, #8]
 800f6d8:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800f6da:	683a      	ldr	r2, [r7, #0]
 800f6dc:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800f6de:	4611      	mov	r1, r2
 800f6e0:	4798      	blx	r3
        }
        break;
 800f6e2:	e0f9      	b.n	800f8d8 <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 800f6e4:	4b52      	ldr	r3, [pc, #328]	; (800f830 <OpenThread_CallBack_Processing+0x31c>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	f000 80f7 	beq.w	800f8dc <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800f6ee:	4b50      	ldr	r3, [pc, #320]	; (800f830 <OpenThread_CallBack_Processing+0x31c>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	683a      	ldr	r2, [r7, #0]
 800f6f4:	6892      	ldr	r2, [r2, #8]
 800f6f6:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800f6f8:	683a      	ldr	r2, [r7, #0]
 800f6fa:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800f6fc:	4611      	mov	r1, r2
 800f6fe:	4798      	blx	r3
        }
        break;
 800f700:	e0ec      	b.n	800f8dc <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 800f702:	4b4c      	ldr	r3, [pc, #304]	; (800f834 <OpenThread_CallBack_Processing+0x320>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	f000 80ea 	beq.w	800f8e0 <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800f70c:	4b49      	ldr	r3, [pc, #292]	; (800f834 <OpenThread_CallBack_Processing+0x320>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	683a      	ldr	r2, [r7, #0]
 800f712:	6892      	ldr	r2, [r2, #8]
 800f714:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 800f716:	683a      	ldr	r2, [r7, #0]
 800f718:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800f71a:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 800f71c:	683a      	ldr	r2, [r7, #0]
 800f71e:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800f720:	4798      	blx	r3
        }
        break;
 800f722:	e0dd      	b.n	800f8e0 <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 800f724:	4b44      	ldr	r3, [pc, #272]	; (800f838 <OpenThread_CallBack_Processing+0x324>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	f000 80db 	beq.w	800f8e4 <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800f72e:	4b42      	ldr	r3, [pc, #264]	; (800f838 <OpenThread_CallBack_Processing+0x324>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	683a      	ldr	r2, [r7, #0]
 800f734:	6892      	ldr	r2, [r2, #8]
 800f736:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 800f738:	683a      	ldr	r2, [r7, #0]
 800f73a:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800f73c:	4611      	mov	r1, r2
 800f73e:	4798      	blx	r3
        }
        break;
 800f740:	e0d0      	b.n	800f8e4 <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 800f742:	4b3e      	ldr	r3, [pc, #248]	; (800f83c <OpenThread_CallBack_Processing+0x328>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	2b00      	cmp	r3, #0
 800f748:	f000 80ce 	beq.w	800f8e8 <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800f74c:	4b3b      	ldr	r3, [pc, #236]	; (800f83c <OpenThread_CallBack_Processing+0x328>)
 800f74e:	681c      	ldr	r4, [r3, #0]
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800f758:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800f75e:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800f764:	47a0      	blx	r4
        }
        break;
 800f766:	e0bf      	b.n	800f8e8 <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 800f768:	4b35      	ldr	r3, [pc, #212]	; (800f840 <OpenThread_CallBack_Processing+0x32c>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	f000 80bd 	beq.w	800f8ec <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800f772:	4b33      	ldr	r3, [pc, #204]	; (800f840 <OpenThread_CallBack_Processing+0x32c>)
 800f774:	681c      	ldr	r4, [r3, #0]
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800f780:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800f786:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800f790:	b2db      	uxtb	r3, r3
 800f792:	9300      	str	r3, [sp, #0]
 800f794:	4613      	mov	r3, r2
 800f796:	462a      	mov	r2, r5
 800f798:	47a0      	blx	r4
        }
        break;
 800f79a:	e0a7      	b.n	800f8ec <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 800f79c:	4b29      	ldr	r3, [pc, #164]	; (800f844 <OpenThread_CallBack_Processing+0x330>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	f000 80a5 	beq.w	800f8f0 <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800f7a6:	4b27      	ldr	r3, [pc, #156]	; (800f844 <OpenThread_CallBack_Processing+0x330>)
 800f7a8:	681c      	ldr	r4, [r3, #0]
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	689b      	ldr	r3, [r3, #8]
 800f7ae:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800f7b4:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800f7ba:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800f7c0:	47a0      	blx	r4
        }
        break;
 800f7c2:	e095      	b.n	800f8f0 <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 800f7c4:	4b20      	ldr	r3, [pc, #128]	; (800f848 <OpenThread_CallBack_Processing+0x334>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	f000 8093 	beq.w	800f8f4 <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 800f7ce:	4b1e      	ldr	r3, [pc, #120]	; (800f848 <OpenThread_CallBack_Processing+0x334>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	683a      	ldr	r2, [r7, #0]
 800f7d4:	6892      	ldr	r2, [r2, #8]
 800f7d6:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 800f7d8:	683a      	ldr	r2, [r7, #0]
 800f7da:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 800f7dc:	4611      	mov	r1, r2
 800f7de:	4798      	blx	r3
        }
        break;
 800f7e0:	e088      	b.n	800f8f4 <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 800f7e2:	4b1a      	ldr	r3, [pc, #104]	; (800f84c <OpenThread_CallBack_Processing+0x338>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	f000 8086 	beq.w	800f8f8 <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800f7ec:	4b17      	ldr	r3, [pc, #92]	; (800f84c <OpenThread_CallBack_Processing+0x338>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	683a      	ldr	r2, [r7, #0]
 800f7f2:	6892      	ldr	r2, [r2, #8]
 800f7f4:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 800f7f6:	683a      	ldr	r2, [r7, #0]
 800f7f8:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800f7fa:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 800f7fc:	683a      	ldr	r2, [r7, #0]
 800f7fe:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800f800:	b2d2      	uxtb	r2, r2
 800f802:	4798      	blx	r3
        }
        break;
 800f804:	e078      	b.n	800f8f8 <OpenThread_CallBack_Processing+0x3e4>
 800f806:	bf00      	nop
 800f808:	20000410 	.word	0x20000410
 800f80c:	200050e8 	.word	0x200050e8
 800f810:	20000450 	.word	0x20000450
 800f814:	20000454 	.word	0x20000454
 800f818:	200050e4 	.word	0x200050e4
 800f81c:	20000458 	.word	0x20000458
 800f820:	20000418 	.word	0x20000418
 800f824:	20000414 	.word	0x20000414
 800f828:	2000041c 	.word	0x2000041c
 800f82c:	20000420 	.word	0x20000420
 800f830:	20000424 	.word	0x20000424
 800f834:	20000428 	.word	0x20000428
 800f838:	2000042c 	.word	0x2000042c
 800f83c:	20000430 	.word	0x20000430
 800f840:	20000434 	.word	0x20000434
 800f844:	20000438 	.word	0x20000438
 800f848:	2000043c 	.word	0x2000043c
 800f84c:	20000440 	.word	0x20000440
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 800f850:	4b30      	ldr	r3, [pc, #192]	; (800f914 <OpenThread_CallBack_Processing+0x400>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d051      	beq.n	800f8fc <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800f858:	4b2e      	ldr	r3, [pc, #184]	; (800f914 <OpenThread_CallBack_Processing+0x400>)
 800f85a:	681c      	ldr	r4, [r3, #0]
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	689b      	ldr	r3, [r3, #8]
 800f860:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800f866:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800f86c:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800f872:	b2db      	uxtb	r3, r3
 800f874:	47a0      	blx	r4
        }
        break;
 800f876:	e041      	b.n	800f8fc <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 800f878:	4b27      	ldr	r3, [pc, #156]	; (800f918 <OpenThread_CallBack_Processing+0x404>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d03f      	beq.n	800f900 <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800f880:	4b25      	ldr	r3, [pc, #148]	; (800f918 <OpenThread_CallBack_Processing+0x404>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	683a      	ldr	r2, [r7, #0]
 800f886:	6892      	ldr	r2, [r2, #8]
 800f888:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 800f88a:	683a      	ldr	r2, [r7, #0]
 800f88c:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800f88e:	b252      	sxtb	r2, r2
 800f890:	4611      	mov	r1, r2
 800f892:	4798      	blx	r3
        }
        break;
 800f894:	e034      	b.n	800f900 <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 800f896:	4b21      	ldr	r3, [pc, #132]	; (800f91c <OpenThread_CallBack_Processing+0x408>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d032      	beq.n	800f904 <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 800f89e:	4b1f      	ldr	r3, [pc, #124]	; (800f91c <OpenThread_CallBack_Processing+0x408>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	683a      	ldr	r2, [r7, #0]
 800f8a4:	6892      	ldr	r2, [r2, #8]
 800f8a6:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 800f8a8:	683a      	ldr	r2, [r7, #0]
 800f8aa:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800f8ac:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 800f8ae:	683a      	ldr	r2, [r7, #0]
 800f8b0:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800f8b2:	4798      	blx	r3
        }
        break;
 800f8b4:	e026      	b.n	800f904 <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	71fb      	strb	r3, [r7, #7]
        break;
 800f8ba:	e024      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8bc:	bf00      	nop
 800f8be:	e022      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8c0:	bf00      	nop
 800f8c2:	e020      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8c4:	bf00      	nop
 800f8c6:	e01e      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8c8:	bf00      	nop
 800f8ca:	e01c      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8cc:	bf00      	nop
 800f8ce:	e01a      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8d0:	bf00      	nop
 800f8d2:	e018      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8d4:	bf00      	nop
 800f8d6:	e016      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8d8:	bf00      	nop
 800f8da:	e014      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8dc:	bf00      	nop
 800f8de:	e012      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8e0:	bf00      	nop
 800f8e2:	e010      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8e4:	bf00      	nop
 800f8e6:	e00e      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8e8:	bf00      	nop
 800f8ea:	e00c      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8ec:	bf00      	nop
 800f8ee:	e00a      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8f0:	bf00      	nop
 800f8f2:	e008      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8f4:	bf00      	nop
 800f8f6:	e006      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8f8:	bf00      	nop
 800f8fa:	e004      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8fc:	bf00      	nop
 800f8fe:	e002      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f900:	bf00      	nop
 800f902:	e000      	b.n	800f906 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f904:	bf00      	nop
    }

    TL_THREAD_SendAck();
 800f906:	f7fe fed9 	bl	800e6bc <TL_THREAD_SendAck>
    return status;
 800f90a:	79fb      	ldrb	r3, [r7, #7]

}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3708      	adds	r7, #8
 800f910:	46bd      	mov	sp, r7
 800f912:	bdb0      	pop	{r4, r5, r7, pc}
 800f914:	20000444 	.word	0x20000444
 800f918:	20000448 	.word	0x20000448
 800f91c:	2000044c 	.word	0x2000044c

0800f920 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	460b      	mov	r3, r1
 800f92a:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800f92c:	f004 ffe2 	bl	80148f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f930:	f004 ff7e 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f934:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2200      	movs	r2, #0
 800f93a:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 800f93e:	701a      	strb	r2, [r3, #0]
 800f940:	2200      	movs	r2, #0
 800f942:	f042 0201 	orr.w	r2, r2, #1
 800f946:	705a      	strb	r2, [r3, #1]
 800f948:	2200      	movs	r2, #0
 800f94a:	709a      	strb	r2, [r3, #2]
 800f94c:	2200      	movs	r2, #0
 800f94e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	2200      	movs	r2, #0
 800f954:	f042 0201 	orr.w	r2, r2, #1
 800f958:	711a      	strb	r2, [r3, #4]
 800f95a:	2200      	movs	r2, #0
 800f95c:	715a      	strb	r2, [r3, #5]
 800f95e:	2200      	movs	r2, #0
 800f960:	719a      	strb	r2, [r3, #6]
 800f962:	2200      	movs	r2, #0
 800f964:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 800f966:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800f96e:	f004 ff83 	bl	8014878 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f972:	f004 ff69 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f976:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	689b      	ldr	r3, [r3, #8]
 800f97c:	b2db      	uxtb	r3, r3
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3710      	adds	r7, #16
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}

0800f986 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800f986:	b580      	push	{r7, lr}
 800f988:	b084      	sub	sp, #16
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
 800f98e:	460b      	mov	r3, r1
 800f990:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800f992:	f004 ffaf 	bl	80148f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f996:	f004 ff4b 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f99a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 800f9a4:	701a      	strb	r2, [r3, #0]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	705a      	strb	r2, [r3, #1]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	709a      	strb	r2, [r3, #2]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	f042 0201 	orr.w	r2, r2, #1
 800f9ba:	711a      	strb	r2, [r3, #4]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	715a      	strb	r2, [r3, #5]
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	719a      	strb	r2, [r3, #6]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800f9c8:	78fa      	ldrb	r2, [r7, #3]
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800f9ce:	f004 ff53 	bl	8014878 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f9d2:	f004 ff39 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f9d6:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	689b      	ldr	r3, [r3, #8]
 800f9dc:	b2db      	uxtb	r3, r3
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3710      	adds	r7, #16
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}

0800f9e6 <otThreadSetChildTimeout>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI void OTCALL otThreadSetChildTimeout(otInstance *aInstance, uint32_t aTimeout)
{
 800f9e6:	b580      	push	{r7, lr}
 800f9e8:	b084      	sub	sp, #16
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]
 800f9ee:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800f9f0:	f004 ff80 	bl	80148f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f9f4:	f004 ff1c 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800f9f8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_CHILD_TIMEOUT;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 800fa02:	701a      	strb	r2, [r3, #0]
 800fa04:	2200      	movs	r2, #0
 800fa06:	705a      	strb	r2, [r3, #1]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	709a      	strb	r2, [r3, #2]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2200      	movs	r2, #0
 800fa14:	f042 0201 	orr.w	r2, r2, #1
 800fa18:	711a      	strb	r2, [r3, #4]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	715a      	strb	r2, [r3, #5]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	719a      	strb	r2, [r3, #6]
 800fa22:	2200      	movs	r2, #0
 800fa24:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aTimeout;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	683a      	ldr	r2, [r7, #0]
 800fa2a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800fa2c:	f004 ff24 	bl	8014878 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800fa30:	f004 ff0a 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800fa34:	60f8      	str	r0, [r7, #12]
}
 800fa36:	bf00      	nop
 800fa38:	3710      	adds	r7, #16
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}

0800fa3e <otThreadGetMeshLocalEid>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 800fa3e:	b580      	push	{r7, lr}
 800fa40:	b084      	sub	sp, #16
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800fa46:	f004 ff55 	bl	80148f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800fa4a:	f004 fef1 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800fa4e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2200      	movs	r2, #0
 800fa54:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 800fa58:	701a      	strb	r2, [r3, #0]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	705a      	strb	r2, [r3, #1]
 800fa5e:	2200      	movs	r2, #0
 800fa60:	709a      	strb	r2, [r3, #2]
 800fa62:	2200      	movs	r2, #0
 800fa64:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	711a      	strb	r2, [r3, #4]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	715a      	strb	r2, [r3, #5]
 800fa70:	2200      	movs	r2, #0
 800fa72:	719a      	strb	r2, [r3, #6]
 800fa74:	2200      	movs	r2, #0
 800fa76:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800fa78:	f004 fefe 	bl	8014878 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800fa7c:	f004 fee4 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800fa80:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	689b      	ldr	r3, [r3, #8]
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3710      	adds	r7, #16
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}

0800fa8e <otThreadGetLinkLocalIp6Address>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otIp6Address *otThreadGetLinkLocalIp6Address(otInstance *aInstance)
{
 800fa8e:	b580      	push	{r7, lr}
 800fa90:	b084      	sub	sp, #16
 800fa92:	af00      	add	r7, sp, #0
 800fa94:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800fa96:	f004 ff2d 	bl	80148f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800fa9a:	f004 fec9 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800fa9e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_LINK_LOCAL_IP6_ADDRESS;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2200      	movs	r2, #0
 800faa4:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 800faa8:	701a      	strb	r2, [r3, #0]
 800faaa:	2200      	movs	r2, #0
 800faac:	705a      	strb	r2, [r3, #1]
 800faae:	2200      	movs	r2, #0
 800fab0:	709a      	strb	r2, [r3, #2]
 800fab2:	2200      	movs	r2, #0
 800fab4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2200      	movs	r2, #0
 800faba:	711a      	strb	r2, [r3, #4]
 800fabc:	2200      	movs	r2, #0
 800fabe:	715a      	strb	r2, [r3, #5]
 800fac0:	2200      	movs	r2, #0
 800fac2:	719a      	strb	r2, [r3, #6]
 800fac4:	2200      	movs	r2, #0
 800fac6:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800fac8:	f004 fed6 	bl	8014878 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800facc:	f004 febc 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800fad0:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	689b      	ldr	r3, [r3, #8]
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3710      	adds	r7, #16
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}

0800fade <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 800fade:	b580      	push	{r7, lr}
 800fae0:	b084      	sub	sp, #16
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
 800fae6:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800fae8:	f004 ff04 	bl	80148f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800faec:	f004 fea0 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800faf0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	2200      	movs	r2, #0
 800faf6:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 800fafa:	701a      	strb	r2, [r3, #0]
 800fafc:	2200      	movs	r2, #0
 800fafe:	705a      	strb	r2, [r3, #1]
 800fb00:	2200      	movs	r2, #0
 800fb02:	709a      	strb	r2, [r3, #2]
 800fb04:	2200      	movs	r2, #0
 800fb06:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f042 0201 	orr.w	r2, r2, #1
 800fb10:	711a      	strb	r2, [r3, #4]
 800fb12:	2200      	movs	r2, #0
 800fb14:	715a      	strb	r2, [r3, #5]
 800fb16:	2200      	movs	r2, #0
 800fb18:	719a      	strb	r2, [r3, #6]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 800fb1e:	683a      	ldr	r2, [r7, #0]
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800fb24:	f004 fea8 	bl	8014878 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800fb28:	f004 fe8e 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800fb2c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	689b      	ldr	r3, [r3, #8]
 800fb32:	b2db      	uxtb	r3, r3
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3710      	adds	r7, #16
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b084      	sub	sp, #16
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800fb44:	f004 fed6 	bl	80148f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800fb48:	f004 fe72 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800fb4c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2200      	movs	r2, #0
 800fb52:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 800fb56:	701a      	strb	r2, [r3, #0]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	705a      	strb	r2, [r3, #1]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	709a      	strb	r2, [r3, #2]
 800fb60:	2200      	movs	r2, #0
 800fb62:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	2200      	movs	r2, #0
 800fb68:	711a      	strb	r2, [r3, #4]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	715a      	strb	r2, [r3, #5]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	719a      	strb	r2, [r3, #6]
 800fb72:	2200      	movs	r2, #0
 800fb74:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800fb76:	f004 fe7f 	bl	8014878 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800fb7a:	f004 fe65 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800fb7e:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	689b      	ldr	r3, [r3, #8]
 800fb84:	b2db      	uxtb	r3, r3
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3710      	adds	r7, #16
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}

0800fb8e <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b084      	sub	sp, #16
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800fb96:	f004 fead 	bl	80148f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800fb9a:	f004 fe49 	bl	8014830 <THREAD_Get_OTCmdPayloadBuffer>
 800fb9e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2200      	movs	r2, #0
 800fba4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800fba8:	701a      	strb	r2, [r3, #0]
 800fbaa:	2200      	movs	r2, #0
 800fbac:	705a      	strb	r2, [r3, #1]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	709a      	strb	r2, [r3, #2]
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	2200      	movs	r2, #0
 800fbba:	711a      	strb	r2, [r3, #4]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	715a      	strb	r2, [r3, #5]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	719a      	strb	r2, [r3, #6]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800fbc8:	f004 fe56 	bl	8014878 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800fbcc:	f004 fe3c 	bl	8014848 <THREAD_Get_OTCmdRspPayloadBuffer>
 800fbd0:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	689b      	ldr	r3, [r3, #8]
 800fbd6:	b29b      	uxth	r3, r3
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3710      	adds	r7, #16
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	b083      	sub	sp, #12
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	687a      	ldr	r2, [r7, #4]
 800fbf2:	605a      	str	r2, [r3, #4]
}
 800fbf4:	bf00      	nop
 800fbf6:	370c      	adds	r7, #12
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr

0800fc00 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800fc00:	b480      	push	{r7}
 800fc02:	b087      	sub	sp, #28
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc08:	f3ef 8310 	mrs	r3, PRIMASK
 800fc0c:	60fb      	str	r3, [r7, #12]
  return(result);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fc10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800fc12:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	687a      	ldr	r2, [r7, #4]
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d102      	bne.n	800fc24 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800fc1e:	2301      	movs	r3, #1
 800fc20:	75fb      	strb	r3, [r7, #23]
 800fc22:	e001      	b.n	800fc28 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800fc24:	2300      	movs	r3, #0
 800fc26:	75fb      	strb	r3, [r7, #23]
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800fc32:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	371c      	adds	r7, #28
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3e:	4770      	bx	lr

0800fc40 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b087      	sub	sp, #28
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc4a:	f3ef 8310 	mrs	r3, PRIMASK
 800fc4e:	60fb      	str	r3, [r7, #12]
  return(result);
 800fc50:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fc52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fc54:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	683a      	ldr	r2, [r7, #0]
 800fc68:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	683a      	ldr	r2, [r7, #0]
 800fc70:	605a      	str	r2, [r3, #4]
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fc7c:	bf00      	nop
 800fc7e:	371c      	adds	r7, #28
 800fc80:	46bd      	mov	sp, r7
 800fc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc86:	4770      	bx	lr

0800fc88 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b087      	sub	sp, #28
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
 800fc90:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc92:	f3ef 8310 	mrs	r3, PRIMASK
 800fc96:	60fb      	str	r3, [r7, #12]
  return(result);
 800fc98:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fc9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fc9c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	687a      	ldr	r2, [r7, #4]
 800fca2:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	685a      	ldr	r2, [r3, #4]
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	683a      	ldr	r2, [r7, #0]
 800fcb0:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	685b      	ldr	r3, [r3, #4]
 800fcb6:	683a      	ldr	r2, [r7, #0]
 800fcb8:	601a      	str	r2, [r3, #0]
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fcc4:	bf00      	nop
 800fcc6:	371c      	adds	r7, #28
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcce:	4770      	bx	lr

0800fcd0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b087      	sub	sp, #28
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fcd8:	f3ef 8310 	mrs	r3, PRIMASK
 800fcdc:	60fb      	str	r3, [r7, #12]
  return(result);
 800fcde:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fce0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fce2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	685b      	ldr	r3, [r3, #4]
 800fce8:	687a      	ldr	r2, [r7, #4]
 800fcea:	6812      	ldr	r2, [r2, #0]
 800fcec:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	687a      	ldr	r2, [r7, #4]
 800fcf4:	6852      	ldr	r2, [r2, #4]
 800fcf6:	605a      	str	r2, [r3, #4]
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fd02:	bf00      	nop
 800fd04:	371c      	adds	r7, #28
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr

0800fd0e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800fd0e:	b580      	push	{r7, lr}
 800fd10:	b086      	sub	sp, #24
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
 800fd16:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd18:	f3ef 8310 	mrs	r3, PRIMASK
 800fd1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd1e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fd20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd22:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681a      	ldr	r2, [r3, #0]
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7ff ffcd 	bl	800fcd0 <LST_remove_node>
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fd40:	bf00      	nop
 800fd42:	3718      	adds	r7, #24
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fd48:	b480      	push	{r7}
 800fd4a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800fd4c:	bf00      	nop
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd54:	4770      	bx	lr
	...

0800fd58 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fd58:	b480      	push	{r7}
 800fd5a:	b085      	sub	sp, #20
 800fd5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd5e:	f3ef 8305 	mrs	r3, IPSR
 800fd62:	60bb      	str	r3, [r7, #8]
  return(result);
 800fd64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d10f      	bne.n	800fd8a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd6a:	f3ef 8310 	mrs	r3, PRIMASK
 800fd6e:	607b      	str	r3, [r7, #4]
  return(result);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d105      	bne.n	800fd82 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fd76:	f3ef 8311 	mrs	r3, BASEPRI
 800fd7a:	603b      	str	r3, [r7, #0]
  return(result);
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d007      	beq.n	800fd92 <osKernelInitialize+0x3a>
 800fd82:	4b0e      	ldr	r3, [pc, #56]	; (800fdbc <osKernelInitialize+0x64>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	2b02      	cmp	r3, #2
 800fd88:	d103      	bne.n	800fd92 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800fd8a:	f06f 0305 	mvn.w	r3, #5
 800fd8e:	60fb      	str	r3, [r7, #12]
 800fd90:	e00c      	b.n	800fdac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fd92:	4b0a      	ldr	r3, [pc, #40]	; (800fdbc <osKernelInitialize+0x64>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d105      	bne.n	800fda6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fd9a:	4b08      	ldr	r3, [pc, #32]	; (800fdbc <osKernelInitialize+0x64>)
 800fd9c:	2201      	movs	r2, #1
 800fd9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fda0:	2300      	movs	r3, #0
 800fda2:	60fb      	str	r3, [r7, #12]
 800fda4:	e002      	b.n	800fdac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800fda6:	f04f 33ff 	mov.w	r3, #4294967295
 800fdaa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800fdac:	68fb      	ldr	r3, [r7, #12]
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3714      	adds	r7, #20
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr
 800fdba:	bf00      	nop
 800fdbc:	2000045c 	.word	0x2000045c

0800fdc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdc6:	f3ef 8305 	mrs	r3, IPSR
 800fdca:	60bb      	str	r3, [r7, #8]
  return(result);
 800fdcc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d10f      	bne.n	800fdf2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fdd2:	f3ef 8310 	mrs	r3, PRIMASK
 800fdd6:	607b      	str	r3, [r7, #4]
  return(result);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d105      	bne.n	800fdea <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fdde:	f3ef 8311 	mrs	r3, BASEPRI
 800fde2:	603b      	str	r3, [r7, #0]
  return(result);
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d007      	beq.n	800fdfa <osKernelStart+0x3a>
 800fdea:	4b0f      	ldr	r3, [pc, #60]	; (800fe28 <osKernelStart+0x68>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2b02      	cmp	r3, #2
 800fdf0:	d103      	bne.n	800fdfa <osKernelStart+0x3a>
    stat = osErrorISR;
 800fdf2:	f06f 0305 	mvn.w	r3, #5
 800fdf6:	60fb      	str	r3, [r7, #12]
 800fdf8:	e010      	b.n	800fe1c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fdfa:	4b0b      	ldr	r3, [pc, #44]	; (800fe28 <osKernelStart+0x68>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	2b01      	cmp	r3, #1
 800fe00:	d109      	bne.n	800fe16 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fe02:	f7ff ffa1 	bl	800fd48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fe06:	4b08      	ldr	r3, [pc, #32]	; (800fe28 <osKernelStart+0x68>)
 800fe08:	2202      	movs	r2, #2
 800fe0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fe0c:	f002 f944 	bl	8012098 <vTaskStartScheduler>
      stat = osOK;
 800fe10:	2300      	movs	r3, #0
 800fe12:	60fb      	str	r3, [r7, #12]
 800fe14:	e002      	b.n	800fe1c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800fe16:	f04f 33ff 	mov.w	r3, #4294967295
 800fe1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800fe1c:	68fb      	ldr	r3, [r7, #12]
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3710      	adds	r7, #16
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	2000045c 	.word	0x2000045c

0800fe2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b090      	sub	sp, #64	; 0x40
 800fe30:	af04      	add	r7, sp, #16
 800fe32:	60f8      	str	r0, [r7, #12]
 800fe34:	60b9      	str	r1, [r7, #8]
 800fe36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe3c:	f3ef 8305 	mrs	r3, IPSR
 800fe40:	61fb      	str	r3, [r7, #28]
  return(result);
 800fe42:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	f040 8090 	bne.w	800ff6a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe4a:	f3ef 8310 	mrs	r3, PRIMASK
 800fe4e:	61bb      	str	r3, [r7, #24]
  return(result);
 800fe50:	69bb      	ldr	r3, [r7, #24]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d105      	bne.n	800fe62 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fe56:	f3ef 8311 	mrs	r3, BASEPRI
 800fe5a:	617b      	str	r3, [r7, #20]
  return(result);
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d003      	beq.n	800fe6a <osThreadNew+0x3e>
 800fe62:	4b44      	ldr	r3, [pc, #272]	; (800ff74 <osThreadNew+0x148>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	2b02      	cmp	r3, #2
 800fe68:	d07f      	beq.n	800ff6a <osThreadNew+0x13e>
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d07c      	beq.n	800ff6a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800fe70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe74:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800fe76:	2318      	movs	r3, #24
 800fe78:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800fe7e:	f04f 33ff 	mov.w	r3, #4294967295
 800fe82:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d045      	beq.n	800ff16 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d002      	beq.n	800fe98 <osThreadNew+0x6c>
        name = attr->name;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	699b      	ldr	r3, [r3, #24]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d002      	beq.n	800fea6 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	699b      	ldr	r3, [r3, #24]
 800fea4:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d008      	beq.n	800febe <osThreadNew+0x92>
 800feac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feae:	2b38      	cmp	r3, #56	; 0x38
 800feb0:	d805      	bhi.n	800febe <osThreadNew+0x92>
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	f003 0301 	and.w	r3, r3, #1
 800feba:	2b00      	cmp	r3, #0
 800febc:	d001      	beq.n	800fec2 <osThreadNew+0x96>
        return (NULL);
 800febe:	2300      	movs	r3, #0
 800fec0:	e054      	b.n	800ff6c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	695b      	ldr	r3, [r3, #20]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d003      	beq.n	800fed2 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	695b      	ldr	r3, [r3, #20]
 800fece:	089b      	lsrs	r3, r3, #2
 800fed0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	689b      	ldr	r3, [r3, #8]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d00e      	beq.n	800fef8 <osThreadNew+0xcc>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	68db      	ldr	r3, [r3, #12]
 800fede:	2b5b      	cmp	r3, #91	; 0x5b
 800fee0:	d90a      	bls.n	800fef8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d006      	beq.n	800fef8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	695b      	ldr	r3, [r3, #20]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d002      	beq.n	800fef8 <osThreadNew+0xcc>
        mem = 1;
 800fef2:	2301      	movs	r3, #1
 800fef4:	623b      	str	r3, [r7, #32]
 800fef6:	e010      	b.n	800ff1a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	689b      	ldr	r3, [r3, #8]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d10c      	bne.n	800ff1a <osThreadNew+0xee>
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	68db      	ldr	r3, [r3, #12]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d108      	bne.n	800ff1a <osThreadNew+0xee>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	691b      	ldr	r3, [r3, #16]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d104      	bne.n	800ff1a <osThreadNew+0xee>
          mem = 0;
 800ff10:	2300      	movs	r3, #0
 800ff12:	623b      	str	r3, [r7, #32]
 800ff14:	e001      	b.n	800ff1a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800ff16:	2300      	movs	r3, #0
 800ff18:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ff1a:	6a3b      	ldr	r3, [r7, #32]
 800ff1c:	2b01      	cmp	r3, #1
 800ff1e:	d110      	bne.n	800ff42 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ff28:	9202      	str	r2, [sp, #8]
 800ff2a:	9301      	str	r3, [sp, #4]
 800ff2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2e:	9300      	str	r3, [sp, #0]
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff36:	68f8      	ldr	r0, [r7, #12]
 800ff38:	f001 fedc 	bl	8011cf4 <xTaskCreateStatic>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	613b      	str	r3, [r7, #16]
 800ff40:	e013      	b.n	800ff6a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800ff42:	6a3b      	ldr	r3, [r7, #32]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d110      	bne.n	800ff6a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ff48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4a:	b29a      	uxth	r2, r3
 800ff4c:	f107 0310 	add.w	r3, r7, #16
 800ff50:	9301      	str	r3, [sp, #4]
 800ff52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff54:	9300      	str	r3, [sp, #0]
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff5a:	68f8      	ldr	r0, [r7, #12]
 800ff5c:	f001 ff24 	bl	8011da8 <xTaskCreate>
 800ff60:	4603      	mov	r3, r0
 800ff62:	2b01      	cmp	r3, #1
 800ff64:	d001      	beq.n	800ff6a <osThreadNew+0x13e>
          hTask = NULL;
 800ff66:	2300      	movs	r3, #0
 800ff68:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ff6a:	693b      	ldr	r3, [r7, #16]
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3730      	adds	r7, #48	; 0x30
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	2000045c 	.word	0x2000045c

0800ff78 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b08a      	sub	sp, #40	; 0x28
 800ff7c:	af02      	add	r7, sp, #8
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800ff86:	69fb      	ldr	r3, [r7, #28]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d002      	beq.n	800ff92 <osThreadFlagsSet+0x1a>
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	da03      	bge.n	800ff9a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800ff92:	f06f 0303 	mvn.w	r3, #3
 800ff96:	60fb      	str	r3, [r7, #12]
 800ff98:	e046      	b.n	8010028 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800ff9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ff9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffa0:	f3ef 8305 	mrs	r3, IPSR
 800ffa4:	61bb      	str	r3, [r7, #24]
  return(result);
 800ffa6:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d10f      	bne.n	800ffcc <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffac:	f3ef 8310 	mrs	r3, PRIMASK
 800ffb0:	617b      	str	r3, [r7, #20]
  return(result);
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d105      	bne.n	800ffc4 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ffb8:	f3ef 8311 	mrs	r3, BASEPRI
 800ffbc:	613b      	str	r3, [r7, #16]
  return(result);
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d024      	beq.n	801000e <osThreadFlagsSet+0x96>
 800ffc4:	4b1b      	ldr	r3, [pc, #108]	; (8010034 <osThreadFlagsSet+0xbc>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	2b02      	cmp	r3, #2
 800ffca:	d120      	bne.n	801000e <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800ffcc:	2300      	movs	r3, #0
 800ffce:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800ffd0:	f107 0308 	add.w	r3, r7, #8
 800ffd4:	9300      	str	r3, [sp, #0]
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	2201      	movs	r2, #1
 800ffda:	6839      	ldr	r1, [r7, #0]
 800ffdc:	69f8      	ldr	r0, [r7, #28]
 800ffde:	f002 ff97 	bl	8012f10 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800ffe2:	f107 020c 	add.w	r2, r7, #12
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	9300      	str	r3, [sp, #0]
 800ffea:	4613      	mov	r3, r2
 800ffec:	2200      	movs	r2, #0
 800ffee:	2100      	movs	r1, #0
 800fff0:	69f8      	ldr	r0, [r7, #28]
 800fff2:	f002 ff8d 	bl	8012f10 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d015      	beq.n	8010028 <osThreadFlagsSet+0xb0>
 800fffc:	4b0e      	ldr	r3, [pc, #56]	; (8010038 <osThreadFlagsSet+0xc0>)
 800fffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010002:	601a      	str	r2, [r3, #0]
 8010004:	f3bf 8f4f 	dsb	sy
 8010008:	f3bf 8f6f 	isb	sy
 801000c:	e00c      	b.n	8010028 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 801000e:	2300      	movs	r3, #0
 8010010:	2201      	movs	r2, #1
 8010012:	6839      	ldr	r1, [r7, #0]
 8010014:	69f8      	ldr	r0, [r7, #28]
 8010016:	f002 fec5 	bl	8012da4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 801001a:	f107 030c 	add.w	r3, r7, #12
 801001e:	2200      	movs	r2, #0
 8010020:	2100      	movs	r1, #0
 8010022:	69f8      	ldr	r0, [r7, #28]
 8010024:	f002 febe 	bl	8012da4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8010028:	68fb      	ldr	r3, [r7, #12]
}
 801002a:	4618      	mov	r0, r3
 801002c:	3720      	adds	r7, #32
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
 8010032:	bf00      	nop
 8010034:	2000045c 	.word	0x2000045c
 8010038:	e000ed04 	.word	0xe000ed04

0801003c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 801003c:	b580      	push	{r7, lr}
 801003e:	b08e      	sub	sp, #56	; 0x38
 8010040:	af00      	add	r7, sp, #0
 8010042:	60f8      	str	r0, [r7, #12]
 8010044:	60b9      	str	r1, [r7, #8]
 8010046:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010048:	f3ef 8305 	mrs	r3, IPSR
 801004c:	61fb      	str	r3, [r7, #28]
  return(result);
 801004e:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8010050:	2b00      	cmp	r3, #0
 8010052:	d10f      	bne.n	8010074 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010054:	f3ef 8310 	mrs	r3, PRIMASK
 8010058:	61bb      	str	r3, [r7, #24]
  return(result);
 801005a:	69bb      	ldr	r3, [r7, #24]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d105      	bne.n	801006c <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010060:	f3ef 8311 	mrs	r3, BASEPRI
 8010064:	617b      	str	r3, [r7, #20]
  return(result);
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d007      	beq.n	801007c <osThreadFlagsWait+0x40>
 801006c:	4b3c      	ldr	r3, [pc, #240]	; (8010160 <osThreadFlagsWait+0x124>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	2b02      	cmp	r3, #2
 8010072:	d103      	bne.n	801007c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8010074:	f06f 0305 	mvn.w	r3, #5
 8010078:	637b      	str	r3, [r7, #52]	; 0x34
 801007a:	e06b      	b.n	8010154 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2b00      	cmp	r3, #0
 8010080:	da03      	bge.n	801008a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8010082:	f06f 0303 	mvn.w	r3, #3
 8010086:	637b      	str	r3, [r7, #52]	; 0x34
 8010088:	e064      	b.n	8010154 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	f003 0302 	and.w	r3, r3, #2
 8010090:	2b00      	cmp	r3, #0
 8010092:	d002      	beq.n	801009a <osThreadFlagsWait+0x5e>
      clear = 0U;
 8010094:	2300      	movs	r3, #0
 8010096:	633b      	str	r3, [r7, #48]	; 0x30
 8010098:	e001      	b.n	801009e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 801009e:	2300      	movs	r3, #0
 80100a0:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 80100a6:	f002 f93d 	bl	8012324 <xTaskGetTickCount>
 80100aa:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80100ac:	f107 0210 	add.w	r2, r7, #16
 80100b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80100b4:	2000      	movs	r0, #0
 80100b6:	f002 fe1b 	bl	8012cf0 <xTaskNotifyWait>
 80100ba:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 80100bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100be:	2b01      	cmp	r3, #1
 80100c0:	d137      	bne.n	8010132 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 80100c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	4013      	ands	r3, r2
 80100c8:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100ce:	4313      	orrs	r3, r2
 80100d0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	f003 0301 	and.w	r3, r3, #1
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d00c      	beq.n	80100f6 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 80100dc:	68fa      	ldr	r2, [r7, #12]
 80100de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100e0:	4013      	ands	r3, r2
 80100e2:	68fa      	ldr	r2, [r7, #12]
 80100e4:	429a      	cmp	r2, r3
 80100e6:	d032      	beq.n	801014e <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d10f      	bne.n	801010e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80100ee:	f06f 0302 	mvn.w	r3, #2
 80100f2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80100f4:	e02e      	b.n	8010154 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80100f6:	68fa      	ldr	r2, [r7, #12]
 80100f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100fa:	4013      	ands	r3, r2
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d128      	bne.n	8010152 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d103      	bne.n	801010e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8010106:	f06f 0302 	mvn.w	r3, #2
 801010a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 801010c:	e022      	b.n	8010154 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 801010e:	f002 f909 	bl	8012324 <xTaskGetTickCount>
 8010112:	4602      	mov	r2, r0
 8010114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010116:	1ad3      	subs	r3, r2, r3
 8010118:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 801011a:	6a3a      	ldr	r2, [r7, #32]
 801011c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011e:	429a      	cmp	r2, r3
 8010120:	d902      	bls.n	8010128 <osThreadFlagsWait+0xec>
          tout  = 0;
 8010122:	2300      	movs	r3, #0
 8010124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010126:	e00e      	b.n	8010146 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8010128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801012a:	6a3b      	ldr	r3, [r7, #32]
 801012c:	1ad3      	subs	r3, r2, r3
 801012e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010130:	e009      	b.n	8010146 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d103      	bne.n	8010140 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8010138:	f06f 0302 	mvn.w	r3, #2
 801013c:	637b      	str	r3, [r7, #52]	; 0x34
 801013e:	e002      	b.n	8010146 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8010140:	f06f 0301 	mvn.w	r3, #1
 8010144:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8010146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010148:	2b00      	cmp	r3, #0
 801014a:	d1af      	bne.n	80100ac <osThreadFlagsWait+0x70>
 801014c:	e002      	b.n	8010154 <osThreadFlagsWait+0x118>
            break;
 801014e:	bf00      	nop
 8010150:	e000      	b.n	8010154 <osThreadFlagsWait+0x118>
            break;
 8010152:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8010154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010156:	4618      	mov	r0, r3
 8010158:	3738      	adds	r7, #56	; 0x38
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	2000045c 	.word	0x2000045c

08010164 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8010164:	b580      	push	{r7, lr}
 8010166:	b086      	sub	sp, #24
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801016c:	f3ef 8305 	mrs	r3, IPSR
 8010170:	613b      	str	r3, [r7, #16]
  return(result);
 8010172:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010174:	2b00      	cmp	r3, #0
 8010176:	d10f      	bne.n	8010198 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010178:	f3ef 8310 	mrs	r3, PRIMASK
 801017c:	60fb      	str	r3, [r7, #12]
  return(result);
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d105      	bne.n	8010190 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010184:	f3ef 8311 	mrs	r3, BASEPRI
 8010188:	60bb      	str	r3, [r7, #8]
  return(result);
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d007      	beq.n	80101a0 <osDelay+0x3c>
 8010190:	4b0a      	ldr	r3, [pc, #40]	; (80101bc <osDelay+0x58>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2b02      	cmp	r3, #2
 8010196:	d103      	bne.n	80101a0 <osDelay+0x3c>
    stat = osErrorISR;
 8010198:	f06f 0305 	mvn.w	r3, #5
 801019c:	617b      	str	r3, [r7, #20]
 801019e:	e007      	b.n	80101b0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80101a0:	2300      	movs	r3, #0
 80101a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d002      	beq.n	80101b0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f001 ff40 	bl	8012030 <vTaskDelay>
    }
  }

  return (stat);
 80101b0:	697b      	ldr	r3, [r7, #20]
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3718      	adds	r7, #24
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	2000045c 	.word	0x2000045c

080101c0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b08a      	sub	sp, #40	; 0x28
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80101c8:	2300      	movs	r3, #0
 80101ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101cc:	f3ef 8305 	mrs	r3, IPSR
 80101d0:	613b      	str	r3, [r7, #16]
  return(result);
 80101d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	f040 8085 	bne.w	80102e4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101da:	f3ef 8310 	mrs	r3, PRIMASK
 80101de:	60fb      	str	r3, [r7, #12]
  return(result);
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d105      	bne.n	80101f2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80101e6:	f3ef 8311 	mrs	r3, BASEPRI
 80101ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d003      	beq.n	80101fa <osMutexNew+0x3a>
 80101f2:	4b3f      	ldr	r3, [pc, #252]	; (80102f0 <osMutexNew+0x130>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	2b02      	cmp	r3, #2
 80101f8:	d074      	beq.n	80102e4 <osMutexNew+0x124>
    if (attr != NULL) {
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d003      	beq.n	8010208 <osMutexNew+0x48>
      type = attr->attr_bits;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	685b      	ldr	r3, [r3, #4]
 8010204:	623b      	str	r3, [r7, #32]
 8010206:	e001      	b.n	801020c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8010208:	2300      	movs	r3, #0
 801020a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801020c:	6a3b      	ldr	r3, [r7, #32]
 801020e:	f003 0301 	and.w	r3, r3, #1
 8010212:	2b00      	cmp	r3, #0
 8010214:	d002      	beq.n	801021c <osMutexNew+0x5c>
      rmtx = 1U;
 8010216:	2301      	movs	r3, #1
 8010218:	61fb      	str	r3, [r7, #28]
 801021a:	e001      	b.n	8010220 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 801021c:	2300      	movs	r3, #0
 801021e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8010220:	6a3b      	ldr	r3, [r7, #32]
 8010222:	f003 0308 	and.w	r3, r3, #8
 8010226:	2b00      	cmp	r3, #0
 8010228:	d15c      	bne.n	80102e4 <osMutexNew+0x124>
      mem = -1;
 801022a:	f04f 33ff 	mov.w	r3, #4294967295
 801022e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d015      	beq.n	8010262 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	689b      	ldr	r3, [r3, #8]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d006      	beq.n	801024c <osMutexNew+0x8c>
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	68db      	ldr	r3, [r3, #12]
 8010242:	2b4f      	cmp	r3, #79	; 0x4f
 8010244:	d902      	bls.n	801024c <osMutexNew+0x8c>
          mem = 1;
 8010246:	2301      	movs	r3, #1
 8010248:	61bb      	str	r3, [r7, #24]
 801024a:	e00c      	b.n	8010266 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	689b      	ldr	r3, [r3, #8]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d108      	bne.n	8010266 <osMutexNew+0xa6>
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	68db      	ldr	r3, [r3, #12]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d104      	bne.n	8010266 <osMutexNew+0xa6>
            mem = 0;
 801025c:	2300      	movs	r3, #0
 801025e:	61bb      	str	r3, [r7, #24]
 8010260:	e001      	b.n	8010266 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8010262:	2300      	movs	r3, #0
 8010264:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	2b01      	cmp	r3, #1
 801026a:	d112      	bne.n	8010292 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d007      	beq.n	8010282 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	689b      	ldr	r3, [r3, #8]
 8010276:	4619      	mov	r1, r3
 8010278:	2004      	movs	r0, #4
 801027a:	f000 fe08 	bl	8010e8e <xQueueCreateMutexStatic>
 801027e:	6278      	str	r0, [r7, #36]	; 0x24
 8010280:	e016      	b.n	80102b0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	689b      	ldr	r3, [r3, #8]
 8010286:	4619      	mov	r1, r3
 8010288:	2001      	movs	r0, #1
 801028a:	f000 fe00 	bl	8010e8e <xQueueCreateMutexStatic>
 801028e:	6278      	str	r0, [r7, #36]	; 0x24
 8010290:	e00e      	b.n	80102b0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8010292:	69bb      	ldr	r3, [r7, #24]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d10b      	bne.n	80102b0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d004      	beq.n	80102a8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 801029e:	2004      	movs	r0, #4
 80102a0:	f000 fddd 	bl	8010e5e <xQueueCreateMutex>
 80102a4:	6278      	str	r0, [r7, #36]	; 0x24
 80102a6:	e003      	b.n	80102b0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80102a8:	2001      	movs	r0, #1
 80102aa:	f000 fdd8 	bl	8010e5e <xQueueCreateMutex>
 80102ae:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80102b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d00c      	beq.n	80102d0 <osMutexNew+0x110>
        if (attr != NULL) {
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d003      	beq.n	80102c4 <osMutexNew+0x104>
          name = attr->name;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	617b      	str	r3, [r7, #20]
 80102c2:	e001      	b.n	80102c8 <osMutexNew+0x108>
        } else {
          name = NULL;
 80102c4:	2300      	movs	r3, #0
 80102c6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80102c8:	6979      	ldr	r1, [r7, #20]
 80102ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102cc:	f001 fc8c 	bl	8011be8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80102d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d006      	beq.n	80102e4 <osMutexNew+0x124>
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d003      	beq.n	80102e4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80102dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102de:	f043 0301 	orr.w	r3, r3, #1
 80102e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80102e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3728      	adds	r7, #40	; 0x28
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}
 80102ee:	bf00      	nop
 80102f0:	2000045c 	.word	0x2000045c

080102f4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b088      	sub	sp, #32
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f023 0301 	bic.w	r3, r3, #1
 8010304:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f003 0301 	and.w	r3, r3, #1
 801030c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 801030e:	2300      	movs	r3, #0
 8010310:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010312:	f3ef 8305 	mrs	r3, IPSR
 8010316:	613b      	str	r3, [r7, #16]
  return(result);
 8010318:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 801031a:	2b00      	cmp	r3, #0
 801031c:	d10f      	bne.n	801033e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801031e:	f3ef 8310 	mrs	r3, PRIMASK
 8010322:	60fb      	str	r3, [r7, #12]
  return(result);
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d105      	bne.n	8010336 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801032a:	f3ef 8311 	mrs	r3, BASEPRI
 801032e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d007      	beq.n	8010346 <osMutexAcquire+0x52>
 8010336:	4b1d      	ldr	r3, [pc, #116]	; (80103ac <osMutexAcquire+0xb8>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	2b02      	cmp	r3, #2
 801033c:	d103      	bne.n	8010346 <osMutexAcquire+0x52>
    stat = osErrorISR;
 801033e:	f06f 0305 	mvn.w	r3, #5
 8010342:	61fb      	str	r3, [r7, #28]
 8010344:	e02c      	b.n	80103a0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8010346:	69bb      	ldr	r3, [r7, #24]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d103      	bne.n	8010354 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 801034c:	f06f 0303 	mvn.w	r3, #3
 8010350:	61fb      	str	r3, [r7, #28]
 8010352:	e025      	b.n	80103a0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d011      	beq.n	801037e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801035a:	6839      	ldr	r1, [r7, #0]
 801035c:	69b8      	ldr	r0, [r7, #24]
 801035e:	f000 fde4 	bl	8010f2a <xQueueTakeMutexRecursive>
 8010362:	4603      	mov	r3, r0
 8010364:	2b01      	cmp	r3, #1
 8010366:	d01b      	beq.n	80103a0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d003      	beq.n	8010376 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 801036e:	f06f 0301 	mvn.w	r3, #1
 8010372:	61fb      	str	r3, [r7, #28]
 8010374:	e014      	b.n	80103a0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010376:	f06f 0302 	mvn.w	r3, #2
 801037a:	61fb      	str	r3, [r7, #28]
 801037c:	e010      	b.n	80103a0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801037e:	6839      	ldr	r1, [r7, #0]
 8010380:	69b8      	ldr	r0, [r7, #24]
 8010382:	f001 f961 	bl	8011648 <xQueueSemaphoreTake>
 8010386:	4603      	mov	r3, r0
 8010388:	2b01      	cmp	r3, #1
 801038a:	d009      	beq.n	80103a0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d003      	beq.n	801039a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8010392:	f06f 0301 	mvn.w	r3, #1
 8010396:	61fb      	str	r3, [r7, #28]
 8010398:	e002      	b.n	80103a0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801039a:	f06f 0302 	mvn.w	r3, #2
 801039e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80103a0:	69fb      	ldr	r3, [r7, #28]
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	3720      	adds	r7, #32
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	2000045c 	.word	0x2000045c

080103b0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b088      	sub	sp, #32
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f023 0301 	bic.w	r3, r3, #1
 80103be:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f003 0301 	and.w	r3, r3, #1
 80103c6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80103c8:	2300      	movs	r3, #0
 80103ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103cc:	f3ef 8305 	mrs	r3, IPSR
 80103d0:	613b      	str	r3, [r7, #16]
  return(result);
 80103d2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d10f      	bne.n	80103f8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103d8:	f3ef 8310 	mrs	r3, PRIMASK
 80103dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d105      	bne.n	80103f0 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80103e4:	f3ef 8311 	mrs	r3, BASEPRI
 80103e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d007      	beq.n	8010400 <osMutexRelease+0x50>
 80103f0:	4b16      	ldr	r3, [pc, #88]	; (801044c <osMutexRelease+0x9c>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	2b02      	cmp	r3, #2
 80103f6:	d103      	bne.n	8010400 <osMutexRelease+0x50>
    stat = osErrorISR;
 80103f8:	f06f 0305 	mvn.w	r3, #5
 80103fc:	61fb      	str	r3, [r7, #28]
 80103fe:	e01f      	b.n	8010440 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d103      	bne.n	801040e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8010406:	f06f 0303 	mvn.w	r3, #3
 801040a:	61fb      	str	r3, [r7, #28]
 801040c:	e018      	b.n	8010440 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d009      	beq.n	8010428 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8010414:	69b8      	ldr	r0, [r7, #24]
 8010416:	f000 fd55 	bl	8010ec4 <xQueueGiveMutexRecursive>
 801041a:	4603      	mov	r3, r0
 801041c:	2b01      	cmp	r3, #1
 801041e:	d00f      	beq.n	8010440 <osMutexRelease+0x90>
        stat = osErrorResource;
 8010420:	f06f 0302 	mvn.w	r3, #2
 8010424:	61fb      	str	r3, [r7, #28]
 8010426:	e00b      	b.n	8010440 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8010428:	2300      	movs	r3, #0
 801042a:	2200      	movs	r2, #0
 801042c:	2100      	movs	r1, #0
 801042e:	69b8      	ldr	r0, [r7, #24]
 8010430:	f000 fe16 	bl	8011060 <xQueueGenericSend>
 8010434:	4603      	mov	r3, r0
 8010436:	2b01      	cmp	r3, #1
 8010438:	d002      	beq.n	8010440 <osMutexRelease+0x90>
        stat = osErrorResource;
 801043a:	f06f 0302 	mvn.w	r3, #2
 801043e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8010440:	69fb      	ldr	r3, [r7, #28]
}
 8010442:	4618      	mov	r0, r3
 8010444:	3720      	adds	r7, #32
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}
 801044a:	bf00      	nop
 801044c:	2000045c 	.word	0x2000045c

08010450 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010450:	b580      	push	{r7, lr}
 8010452:	b08c      	sub	sp, #48	; 0x30
 8010454:	af02      	add	r7, sp, #8
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	60b9      	str	r1, [r7, #8]
 801045a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801045c:	2300      	movs	r3, #0
 801045e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010460:	f3ef 8305 	mrs	r3, IPSR
 8010464:	61bb      	str	r3, [r7, #24]
  return(result);
 8010466:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010468:	2b00      	cmp	r3, #0
 801046a:	f040 8087 	bne.w	801057c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801046e:	f3ef 8310 	mrs	r3, PRIMASK
 8010472:	617b      	str	r3, [r7, #20]
  return(result);
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d105      	bne.n	8010486 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801047a:	f3ef 8311 	mrs	r3, BASEPRI
 801047e:	613b      	str	r3, [r7, #16]
  return(result);
 8010480:	693b      	ldr	r3, [r7, #16]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d003      	beq.n	801048e <osSemaphoreNew+0x3e>
 8010486:	4b40      	ldr	r3, [pc, #256]	; (8010588 <osSemaphoreNew+0x138>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2b02      	cmp	r3, #2
 801048c:	d076      	beq.n	801057c <osSemaphoreNew+0x12c>
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d073      	beq.n	801057c <osSemaphoreNew+0x12c>
 8010494:	68ba      	ldr	r2, [r7, #8]
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	429a      	cmp	r2, r3
 801049a:	d86f      	bhi.n	801057c <osSemaphoreNew+0x12c>
    mem = -1;
 801049c:	f04f 33ff 	mov.w	r3, #4294967295
 80104a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d015      	beq.n	80104d4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	689b      	ldr	r3, [r3, #8]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d006      	beq.n	80104be <osSemaphoreNew+0x6e>
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	68db      	ldr	r3, [r3, #12]
 80104b4:	2b4f      	cmp	r3, #79	; 0x4f
 80104b6:	d902      	bls.n	80104be <osSemaphoreNew+0x6e>
        mem = 1;
 80104b8:	2301      	movs	r3, #1
 80104ba:	623b      	str	r3, [r7, #32]
 80104bc:	e00c      	b.n	80104d8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	689b      	ldr	r3, [r3, #8]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d108      	bne.n	80104d8 <osSemaphoreNew+0x88>
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	68db      	ldr	r3, [r3, #12]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d104      	bne.n	80104d8 <osSemaphoreNew+0x88>
          mem = 0;
 80104ce:	2300      	movs	r3, #0
 80104d0:	623b      	str	r3, [r7, #32]
 80104d2:	e001      	b.n	80104d8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80104d4:	2300      	movs	r3, #0
 80104d6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80104d8:	6a3b      	ldr	r3, [r7, #32]
 80104da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104de:	d04d      	beq.n	801057c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	d129      	bne.n	801053a <osSemaphoreNew+0xea>
        if (mem == 1) {
 80104e6:	6a3b      	ldr	r3, [r7, #32]
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	d10b      	bne.n	8010504 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	689a      	ldr	r2, [r3, #8]
 80104f0:	2303      	movs	r3, #3
 80104f2:	9300      	str	r3, [sp, #0]
 80104f4:	4613      	mov	r3, r2
 80104f6:	2200      	movs	r2, #0
 80104f8:	2100      	movs	r1, #0
 80104fa:	2001      	movs	r0, #1
 80104fc:	f000 fbc0 	bl	8010c80 <xQueueGenericCreateStatic>
 8010500:	6278      	str	r0, [r7, #36]	; 0x24
 8010502:	e005      	b.n	8010510 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8010504:	2203      	movs	r2, #3
 8010506:	2100      	movs	r1, #0
 8010508:	2001      	movs	r0, #1
 801050a:	f000 fc2c 	bl	8010d66 <xQueueGenericCreate>
 801050e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010512:	2b00      	cmp	r3, #0
 8010514:	d022      	beq.n	801055c <osSemaphoreNew+0x10c>
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d01f      	beq.n	801055c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801051c:	2300      	movs	r3, #0
 801051e:	2200      	movs	r2, #0
 8010520:	2100      	movs	r1, #0
 8010522:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010524:	f000 fd9c 	bl	8011060 <xQueueGenericSend>
 8010528:	4603      	mov	r3, r0
 801052a:	2b01      	cmp	r3, #1
 801052c:	d016      	beq.n	801055c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 801052e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010530:	f001 fa0f 	bl	8011952 <vQueueDelete>
            hSemaphore = NULL;
 8010534:	2300      	movs	r3, #0
 8010536:	627b      	str	r3, [r7, #36]	; 0x24
 8010538:	e010      	b.n	801055c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 801053a:	6a3b      	ldr	r3, [r7, #32]
 801053c:	2b01      	cmp	r3, #1
 801053e:	d108      	bne.n	8010552 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	689b      	ldr	r3, [r3, #8]
 8010544:	461a      	mov	r2, r3
 8010546:	68b9      	ldr	r1, [r7, #8]
 8010548:	68f8      	ldr	r0, [r7, #12]
 801054a:	f000 fd23 	bl	8010f94 <xQueueCreateCountingSemaphoreStatic>
 801054e:	6278      	str	r0, [r7, #36]	; 0x24
 8010550:	e004      	b.n	801055c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010552:	68b9      	ldr	r1, [r7, #8]
 8010554:	68f8      	ldr	r0, [r7, #12]
 8010556:	f000 fd52 	bl	8010ffe <xQueueCreateCountingSemaphore>
 801055a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801055c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801055e:	2b00      	cmp	r3, #0
 8010560:	d00c      	beq.n	801057c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d003      	beq.n	8010570 <osSemaphoreNew+0x120>
          name = attr->name;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	61fb      	str	r3, [r7, #28]
 801056e:	e001      	b.n	8010574 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8010570:	2300      	movs	r3, #0
 8010572:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010574:	69f9      	ldr	r1, [r7, #28]
 8010576:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010578:	f001 fb36 	bl	8011be8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801057e:	4618      	mov	r0, r3
 8010580:	3728      	adds	r7, #40	; 0x28
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
 8010586:	bf00      	nop
 8010588:	2000045c 	.word	0x2000045c

0801058c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801058c:	b580      	push	{r7, lr}
 801058e:	b088      	sub	sp, #32
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801059a:	2300      	movs	r3, #0
 801059c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801059e:	69bb      	ldr	r3, [r7, #24]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d103      	bne.n	80105ac <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80105a4:	f06f 0303 	mvn.w	r3, #3
 80105a8:	61fb      	str	r3, [r7, #28]
 80105aa:	e04b      	b.n	8010644 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105ac:	f3ef 8305 	mrs	r3, IPSR
 80105b0:	617b      	str	r3, [r7, #20]
  return(result);
 80105b2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d10f      	bne.n	80105d8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105b8:	f3ef 8310 	mrs	r3, PRIMASK
 80105bc:	613b      	str	r3, [r7, #16]
  return(result);
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d105      	bne.n	80105d0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80105c4:	f3ef 8311 	mrs	r3, BASEPRI
 80105c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d026      	beq.n	801061e <osSemaphoreAcquire+0x92>
 80105d0:	4b1f      	ldr	r3, [pc, #124]	; (8010650 <osSemaphoreAcquire+0xc4>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	2b02      	cmp	r3, #2
 80105d6:	d122      	bne.n	801061e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d003      	beq.n	80105e6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80105de:	f06f 0303 	mvn.w	r3, #3
 80105e2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80105e4:	e02d      	b.n	8010642 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80105e6:	2300      	movs	r3, #0
 80105e8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80105ea:	f107 0308 	add.w	r3, r7, #8
 80105ee:	461a      	mov	r2, r3
 80105f0:	2100      	movs	r1, #0
 80105f2:	69b8      	ldr	r0, [r7, #24]
 80105f4:	f001 f930 	bl	8011858 <xQueueReceiveFromISR>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d003      	beq.n	8010606 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80105fe:	f06f 0302 	mvn.w	r3, #2
 8010602:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010604:	e01d      	b.n	8010642 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d01a      	beq.n	8010642 <osSemaphoreAcquire+0xb6>
 801060c:	4b11      	ldr	r3, [pc, #68]	; (8010654 <osSemaphoreAcquire+0xc8>)
 801060e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010612:	601a      	str	r2, [r3, #0]
 8010614:	f3bf 8f4f 	dsb	sy
 8010618:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 801061c:	e011      	b.n	8010642 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801061e:	6839      	ldr	r1, [r7, #0]
 8010620:	69b8      	ldr	r0, [r7, #24]
 8010622:	f001 f811 	bl	8011648 <xQueueSemaphoreTake>
 8010626:	4603      	mov	r3, r0
 8010628:	2b01      	cmp	r3, #1
 801062a:	d00b      	beq.n	8010644 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d003      	beq.n	801063a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8010632:	f06f 0301 	mvn.w	r3, #1
 8010636:	61fb      	str	r3, [r7, #28]
 8010638:	e004      	b.n	8010644 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801063a:	f06f 0302 	mvn.w	r3, #2
 801063e:	61fb      	str	r3, [r7, #28]
 8010640:	e000      	b.n	8010644 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8010642:	bf00      	nop
      }
    }
  }

  return (stat);
 8010644:	69fb      	ldr	r3, [r7, #28]
}
 8010646:	4618      	mov	r0, r3
 8010648:	3720      	adds	r7, #32
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	2000045c 	.word	0x2000045c
 8010654:	e000ed04 	.word	0xe000ed04

08010658 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010658:	b580      	push	{r7, lr}
 801065a:	b088      	sub	sp, #32
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010664:	2300      	movs	r3, #0
 8010666:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010668:	69bb      	ldr	r3, [r7, #24]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d103      	bne.n	8010676 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801066e:	f06f 0303 	mvn.w	r3, #3
 8010672:	61fb      	str	r3, [r7, #28]
 8010674:	e03e      	b.n	80106f4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010676:	f3ef 8305 	mrs	r3, IPSR
 801067a:	617b      	str	r3, [r7, #20]
  return(result);
 801067c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801067e:	2b00      	cmp	r3, #0
 8010680:	d10f      	bne.n	80106a2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010682:	f3ef 8310 	mrs	r3, PRIMASK
 8010686:	613b      	str	r3, [r7, #16]
  return(result);
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d105      	bne.n	801069a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801068e:	f3ef 8311 	mrs	r3, BASEPRI
 8010692:	60fb      	str	r3, [r7, #12]
  return(result);
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d01e      	beq.n	80106d8 <osSemaphoreRelease+0x80>
 801069a:	4b19      	ldr	r3, [pc, #100]	; (8010700 <osSemaphoreRelease+0xa8>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	2b02      	cmp	r3, #2
 80106a0:	d11a      	bne.n	80106d8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80106a2:	2300      	movs	r3, #0
 80106a4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106a6:	f107 0308 	add.w	r3, r7, #8
 80106aa:	4619      	mov	r1, r3
 80106ac:	69b8      	ldr	r0, [r7, #24]
 80106ae:	f000 fe65 	bl	801137c <xQueueGiveFromISR>
 80106b2:	4603      	mov	r3, r0
 80106b4:	2b01      	cmp	r3, #1
 80106b6:	d003      	beq.n	80106c0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80106b8:	f06f 0302 	mvn.w	r3, #2
 80106bc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106be:	e018      	b.n	80106f2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d015      	beq.n	80106f2 <osSemaphoreRelease+0x9a>
 80106c6:	4b0f      	ldr	r3, [pc, #60]	; (8010704 <osSemaphoreRelease+0xac>)
 80106c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106cc:	601a      	str	r2, [r3, #0]
 80106ce:	f3bf 8f4f 	dsb	sy
 80106d2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106d6:	e00c      	b.n	80106f2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80106d8:	2300      	movs	r3, #0
 80106da:	2200      	movs	r2, #0
 80106dc:	2100      	movs	r1, #0
 80106de:	69b8      	ldr	r0, [r7, #24]
 80106e0:	f000 fcbe 	bl	8011060 <xQueueGenericSend>
 80106e4:	4603      	mov	r3, r0
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	d004      	beq.n	80106f4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80106ea:	f06f 0302 	mvn.w	r3, #2
 80106ee:	61fb      	str	r3, [r7, #28]
 80106f0:	e000      	b.n	80106f4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106f2:	bf00      	nop
    }
  }

  return (stat);
 80106f4:	69fb      	ldr	r3, [r7, #28]
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3720      	adds	r7, #32
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
 80106fe:	bf00      	nop
 8010700:	2000045c 	.word	0x2000045c
 8010704:	e000ed04 	.word	0xe000ed04

08010708 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010708:	b580      	push	{r7, lr}
 801070a:	b08c      	sub	sp, #48	; 0x30
 801070c:	af02      	add	r7, sp, #8
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010714:	2300      	movs	r3, #0
 8010716:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010718:	f3ef 8305 	mrs	r3, IPSR
 801071c:	61bb      	str	r3, [r7, #24]
  return(result);
 801071e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010720:	2b00      	cmp	r3, #0
 8010722:	d170      	bne.n	8010806 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010724:	f3ef 8310 	mrs	r3, PRIMASK
 8010728:	617b      	str	r3, [r7, #20]
  return(result);
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d105      	bne.n	801073c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010730:	f3ef 8311 	mrs	r3, BASEPRI
 8010734:	613b      	str	r3, [r7, #16]
  return(result);
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d003      	beq.n	8010744 <osMessageQueueNew+0x3c>
 801073c:	4b34      	ldr	r3, [pc, #208]	; (8010810 <osMessageQueueNew+0x108>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	2b02      	cmp	r3, #2
 8010742:	d060      	beq.n	8010806 <osMessageQueueNew+0xfe>
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d05d      	beq.n	8010806 <osMessageQueueNew+0xfe>
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d05a      	beq.n	8010806 <osMessageQueueNew+0xfe>
    mem = -1;
 8010750:	f04f 33ff 	mov.w	r3, #4294967295
 8010754:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d029      	beq.n	80107b0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	689b      	ldr	r3, [r3, #8]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d012      	beq.n	801078a <osMessageQueueNew+0x82>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	68db      	ldr	r3, [r3, #12]
 8010768:	2b4f      	cmp	r3, #79	; 0x4f
 801076a:	d90e      	bls.n	801078a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010770:	2b00      	cmp	r3, #0
 8010772:	d00a      	beq.n	801078a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	695a      	ldr	r2, [r3, #20]
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	68b9      	ldr	r1, [r7, #8]
 801077c:	fb01 f303 	mul.w	r3, r1, r3
 8010780:	429a      	cmp	r2, r3
 8010782:	d302      	bcc.n	801078a <osMessageQueueNew+0x82>
        mem = 1;
 8010784:	2301      	movs	r3, #1
 8010786:	623b      	str	r3, [r7, #32]
 8010788:	e014      	b.n	80107b4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	689b      	ldr	r3, [r3, #8]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d110      	bne.n	80107b4 <osMessageQueueNew+0xac>
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	68db      	ldr	r3, [r3, #12]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d10c      	bne.n	80107b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d108      	bne.n	80107b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	695b      	ldr	r3, [r3, #20]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d104      	bne.n	80107b4 <osMessageQueueNew+0xac>
          mem = 0;
 80107aa:	2300      	movs	r3, #0
 80107ac:	623b      	str	r3, [r7, #32]
 80107ae:	e001      	b.n	80107b4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80107b0:	2300      	movs	r3, #0
 80107b2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80107b4:	6a3b      	ldr	r3, [r7, #32]
 80107b6:	2b01      	cmp	r3, #1
 80107b8:	d10c      	bne.n	80107d4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	691a      	ldr	r2, [r3, #16]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6899      	ldr	r1, [r3, #8]
 80107c2:	2300      	movs	r3, #0
 80107c4:	9300      	str	r3, [sp, #0]
 80107c6:	460b      	mov	r3, r1
 80107c8:	68b9      	ldr	r1, [r7, #8]
 80107ca:	68f8      	ldr	r0, [r7, #12]
 80107cc:	f000 fa58 	bl	8010c80 <xQueueGenericCreateStatic>
 80107d0:	6278      	str	r0, [r7, #36]	; 0x24
 80107d2:	e008      	b.n	80107e6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80107d4:	6a3b      	ldr	r3, [r7, #32]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d105      	bne.n	80107e6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80107da:	2200      	movs	r2, #0
 80107dc:	68b9      	ldr	r1, [r7, #8]
 80107de:	68f8      	ldr	r0, [r7, #12]
 80107e0:	f000 fac1 	bl	8010d66 <xQueueGenericCreate>
 80107e4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80107e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d00c      	beq.n	8010806 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d003      	beq.n	80107fa <osMessageQueueNew+0xf2>
        name = attr->name;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	61fb      	str	r3, [r7, #28]
 80107f8:	e001      	b.n	80107fe <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80107fa:	2300      	movs	r3, #0
 80107fc:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80107fe:	69f9      	ldr	r1, [r7, #28]
 8010800:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010802:	f001 f9f1 	bl	8011be8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010808:	4618      	mov	r0, r3
 801080a:	3728      	adds	r7, #40	; 0x28
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	2000045c 	.word	0x2000045c

08010814 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010814:	b580      	push	{r7, lr}
 8010816:	b08a      	sub	sp, #40	; 0x28
 8010818:	af00      	add	r7, sp, #0
 801081a:	60f8      	str	r0, [r7, #12]
 801081c:	60b9      	str	r1, [r7, #8]
 801081e:	603b      	str	r3, [r7, #0]
 8010820:	4613      	mov	r3, r2
 8010822:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010828:	2300      	movs	r3, #0
 801082a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801082c:	f3ef 8305 	mrs	r3, IPSR
 8010830:	61fb      	str	r3, [r7, #28]
  return(result);
 8010832:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010834:	2b00      	cmp	r3, #0
 8010836:	d10f      	bne.n	8010858 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010838:	f3ef 8310 	mrs	r3, PRIMASK
 801083c:	61bb      	str	r3, [r7, #24]
  return(result);
 801083e:	69bb      	ldr	r3, [r7, #24]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d105      	bne.n	8010850 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010844:	f3ef 8311 	mrs	r3, BASEPRI
 8010848:	617b      	str	r3, [r7, #20]
  return(result);
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d02c      	beq.n	80108aa <osMessageQueuePut+0x96>
 8010850:	4b28      	ldr	r3, [pc, #160]	; (80108f4 <osMessageQueuePut+0xe0>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	2b02      	cmp	r3, #2
 8010856:	d128      	bne.n	80108aa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010858:	6a3b      	ldr	r3, [r7, #32]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d005      	beq.n	801086a <osMessageQueuePut+0x56>
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d002      	beq.n	801086a <osMessageQueuePut+0x56>
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d003      	beq.n	8010872 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801086a:	f06f 0303 	mvn.w	r3, #3
 801086e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010870:	e039      	b.n	80108e6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8010872:	2300      	movs	r3, #0
 8010874:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010876:	f107 0210 	add.w	r2, r7, #16
 801087a:	2300      	movs	r3, #0
 801087c:	68b9      	ldr	r1, [r7, #8]
 801087e:	6a38      	ldr	r0, [r7, #32]
 8010880:	f000 fce8 	bl	8011254 <xQueueGenericSendFromISR>
 8010884:	4603      	mov	r3, r0
 8010886:	2b01      	cmp	r3, #1
 8010888:	d003      	beq.n	8010892 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801088a:	f06f 0302 	mvn.w	r3, #2
 801088e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010890:	e029      	b.n	80108e6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d026      	beq.n	80108e6 <osMessageQueuePut+0xd2>
 8010898:	4b17      	ldr	r3, [pc, #92]	; (80108f8 <osMessageQueuePut+0xe4>)
 801089a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801089e:	601a      	str	r2, [r3, #0]
 80108a0:	f3bf 8f4f 	dsb	sy
 80108a4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80108a8:	e01d      	b.n	80108e6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80108aa:	6a3b      	ldr	r3, [r7, #32]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d002      	beq.n	80108b6 <osMessageQueuePut+0xa2>
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d103      	bne.n	80108be <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80108b6:	f06f 0303 	mvn.w	r3, #3
 80108ba:	627b      	str	r3, [r7, #36]	; 0x24
 80108bc:	e014      	b.n	80108e8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80108be:	2300      	movs	r3, #0
 80108c0:	683a      	ldr	r2, [r7, #0]
 80108c2:	68b9      	ldr	r1, [r7, #8]
 80108c4:	6a38      	ldr	r0, [r7, #32]
 80108c6:	f000 fbcb 	bl	8011060 <xQueueGenericSend>
 80108ca:	4603      	mov	r3, r0
 80108cc:	2b01      	cmp	r3, #1
 80108ce:	d00b      	beq.n	80108e8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d003      	beq.n	80108de <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80108d6:	f06f 0301 	mvn.w	r3, #1
 80108da:	627b      	str	r3, [r7, #36]	; 0x24
 80108dc:	e004      	b.n	80108e8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80108de:	f06f 0302 	mvn.w	r3, #2
 80108e2:	627b      	str	r3, [r7, #36]	; 0x24
 80108e4:	e000      	b.n	80108e8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80108e6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80108e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3728      	adds	r7, #40	; 0x28
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop
 80108f4:	2000045c 	.word	0x2000045c
 80108f8:	e000ed04 	.word	0xe000ed04

080108fc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b08a      	sub	sp, #40	; 0x28
 8010900:	af00      	add	r7, sp, #0
 8010902:	60f8      	str	r0, [r7, #12]
 8010904:	60b9      	str	r1, [r7, #8]
 8010906:	607a      	str	r2, [r7, #4]
 8010908:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801090e:	2300      	movs	r3, #0
 8010910:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010912:	f3ef 8305 	mrs	r3, IPSR
 8010916:	61fb      	str	r3, [r7, #28]
  return(result);
 8010918:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801091a:	2b00      	cmp	r3, #0
 801091c:	d10f      	bne.n	801093e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801091e:	f3ef 8310 	mrs	r3, PRIMASK
 8010922:	61bb      	str	r3, [r7, #24]
  return(result);
 8010924:	69bb      	ldr	r3, [r7, #24]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d105      	bne.n	8010936 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801092a:	f3ef 8311 	mrs	r3, BASEPRI
 801092e:	617b      	str	r3, [r7, #20]
  return(result);
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d02c      	beq.n	8010990 <osMessageQueueGet+0x94>
 8010936:	4b28      	ldr	r3, [pc, #160]	; (80109d8 <osMessageQueueGet+0xdc>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2b02      	cmp	r3, #2
 801093c:	d128      	bne.n	8010990 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801093e:	6a3b      	ldr	r3, [r7, #32]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d005      	beq.n	8010950 <osMessageQueueGet+0x54>
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d002      	beq.n	8010950 <osMessageQueueGet+0x54>
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d003      	beq.n	8010958 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8010950:	f06f 0303 	mvn.w	r3, #3
 8010954:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010956:	e038      	b.n	80109ca <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8010958:	2300      	movs	r3, #0
 801095a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801095c:	f107 0310 	add.w	r3, r7, #16
 8010960:	461a      	mov	r2, r3
 8010962:	68b9      	ldr	r1, [r7, #8]
 8010964:	6a38      	ldr	r0, [r7, #32]
 8010966:	f000 ff77 	bl	8011858 <xQueueReceiveFromISR>
 801096a:	4603      	mov	r3, r0
 801096c:	2b01      	cmp	r3, #1
 801096e:	d003      	beq.n	8010978 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8010970:	f06f 0302 	mvn.w	r3, #2
 8010974:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010976:	e028      	b.n	80109ca <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d025      	beq.n	80109ca <osMessageQueueGet+0xce>
 801097e:	4b17      	ldr	r3, [pc, #92]	; (80109dc <osMessageQueueGet+0xe0>)
 8010980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010984:	601a      	str	r2, [r3, #0]
 8010986:	f3bf 8f4f 	dsb	sy
 801098a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801098e:	e01c      	b.n	80109ca <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010990:	6a3b      	ldr	r3, [r7, #32]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d002      	beq.n	801099c <osMessageQueueGet+0xa0>
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d103      	bne.n	80109a4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 801099c:	f06f 0303 	mvn.w	r3, #3
 80109a0:	627b      	str	r3, [r7, #36]	; 0x24
 80109a2:	e013      	b.n	80109cc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80109a4:	683a      	ldr	r2, [r7, #0]
 80109a6:	68b9      	ldr	r1, [r7, #8]
 80109a8:	6a38      	ldr	r0, [r7, #32]
 80109aa:	f000 fd71 	bl	8011490 <xQueueReceive>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	d00b      	beq.n	80109cc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d003      	beq.n	80109c2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80109ba:	f06f 0301 	mvn.w	r3, #1
 80109be:	627b      	str	r3, [r7, #36]	; 0x24
 80109c0:	e004      	b.n	80109cc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80109c2:	f06f 0302 	mvn.w	r3, #2
 80109c6:	627b      	str	r3, [r7, #36]	; 0x24
 80109c8:	e000      	b.n	80109cc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80109ca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80109cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3728      	adds	r7, #40	; 0x28
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	bf00      	nop
 80109d8:	2000045c 	.word	0x2000045c
 80109dc:	e000ed04 	.word	0xe000ed04

080109e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80109e0:	b480      	push	{r7}
 80109e2:	b085      	sub	sp, #20
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	60b9      	str	r1, [r7, #8]
 80109ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	4a07      	ldr	r2, [pc, #28]	; (8010a0c <vApplicationGetIdleTaskMemory+0x2c>)
 80109f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	4a06      	ldr	r2, [pc, #24]	; (8010a10 <vApplicationGetIdleTaskMemory+0x30>)
 80109f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80109fe:	601a      	str	r2, [r3, #0]
}
 8010a00:	bf00      	nop
 8010a02:	3714      	adds	r7, #20
 8010a04:	46bd      	mov	sp, r7
 8010a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0a:	4770      	bx	lr
 8010a0c:	20000460 	.word	0x20000460
 8010a10:	200004bc 	.word	0x200004bc

08010a14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010a14:	b480      	push	{r7}
 8010a16:	b085      	sub	sp, #20
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	60f8      	str	r0, [r7, #12]
 8010a1c:	60b9      	str	r1, [r7, #8]
 8010a1e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	4a07      	ldr	r2, [pc, #28]	; (8010a40 <vApplicationGetTimerTaskMemory+0x2c>)
 8010a24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	4a06      	ldr	r2, [pc, #24]	; (8010a44 <vApplicationGetTimerTaskMemory+0x30>)
 8010a2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010a32:	601a      	str	r2, [r3, #0]
}
 8010a34:	bf00      	nop
 8010a36:	3714      	adds	r7, #20
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr
 8010a40:	20000cbc 	.word	0x20000cbc
 8010a44:	20000d18 	.word	0x20000d18

08010a48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b083      	sub	sp, #12
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f103 0208 	add.w	r2, r3, #8
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f103 0208 	add.w	r2, r3, #8
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f103 0208 	add.w	r2, r3, #8
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010a7c:	bf00      	nop
 8010a7e:	370c      	adds	r7, #12
 8010a80:	46bd      	mov	sp, r7
 8010a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a86:	4770      	bx	lr

08010a88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b083      	sub	sp, #12
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2200      	movs	r2, #0
 8010a94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010a96:	bf00      	nop
 8010a98:	370c      	adds	r7, #12
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa0:	4770      	bx	lr

08010aa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010aa2:	b480      	push	{r7}
 8010aa4:	b085      	sub	sp, #20
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
 8010aaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	685b      	ldr	r3, [r3, #4]
 8010ab0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	68fa      	ldr	r2, [r7, #12]
 8010ab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	689a      	ldr	r2, [r3, #8]
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	689b      	ldr	r3, [r3, #8]
 8010ac4:	683a      	ldr	r2, [r7, #0]
 8010ac6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	683a      	ldr	r2, [r7, #0]
 8010acc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	687a      	ldr	r2, [r7, #4]
 8010ad2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	1c5a      	adds	r2, r3, #1
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	601a      	str	r2, [r3, #0]
}
 8010ade:	bf00      	nop
 8010ae0:	3714      	adds	r7, #20
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae8:	4770      	bx	lr

08010aea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010aea:	b480      	push	{r7}
 8010aec:	b085      	sub	sp, #20
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	6078      	str	r0, [r7, #4]
 8010af2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b00:	d103      	bne.n	8010b0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	691b      	ldr	r3, [r3, #16]
 8010b06:	60fb      	str	r3, [r7, #12]
 8010b08:	e00c      	b.n	8010b24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	3308      	adds	r3, #8
 8010b0e:	60fb      	str	r3, [r7, #12]
 8010b10:	e002      	b.n	8010b18 <vListInsert+0x2e>
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	60fb      	str	r3, [r7, #12]
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	685b      	ldr	r3, [r3, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	68ba      	ldr	r2, [r7, #8]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d2f6      	bcs.n	8010b12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	685a      	ldr	r2, [r3, #4]
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	683a      	ldr	r2, [r7, #0]
 8010b32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	68fa      	ldr	r2, [r7, #12]
 8010b38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	683a      	ldr	r2, [r7, #0]
 8010b3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	1c5a      	adds	r2, r3, #1
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	601a      	str	r2, [r3, #0]
}
 8010b50:	bf00      	nop
 8010b52:	3714      	adds	r7, #20
 8010b54:	46bd      	mov	sp, r7
 8010b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5a:	4770      	bx	lr

08010b5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	b085      	sub	sp, #20
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	691b      	ldr	r3, [r3, #16]
 8010b68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	687a      	ldr	r2, [r7, #4]
 8010b70:	6892      	ldr	r2, [r2, #8]
 8010b72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	689b      	ldr	r3, [r3, #8]
 8010b78:	687a      	ldr	r2, [r7, #4]
 8010b7a:	6852      	ldr	r2, [r2, #4]
 8010b7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	687a      	ldr	r2, [r7, #4]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d103      	bne.n	8010b90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	689a      	ldr	r2, [r3, #8]
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2200      	movs	r2, #0
 8010b94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	1e5a      	subs	r2, r3, #1
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	681b      	ldr	r3, [r3, #0]
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3714      	adds	r7, #20
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bae:	4770      	bx	lr

08010bb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b084      	sub	sp, #16
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d109      	bne.n	8010bd8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc8:	f383 8811 	msr	BASEPRI, r3
 8010bcc:	f3bf 8f6f 	isb	sy
 8010bd0:	f3bf 8f4f 	dsb	sy
 8010bd4:	60bb      	str	r3, [r7, #8]
 8010bd6:	e7fe      	b.n	8010bd6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8010bd8:	f002 ff30 	bl	8013a3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	681a      	ldr	r2, [r3, #0]
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010be4:	68f9      	ldr	r1, [r7, #12]
 8010be6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010be8:	fb01 f303 	mul.w	r3, r1, r3
 8010bec:	441a      	add	r2, r3
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	681a      	ldr	r2, [r3, #0]
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	681a      	ldr	r2, [r3, #0]
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c08:	3b01      	subs	r3, #1
 8010c0a:	68f9      	ldr	r1, [r7, #12]
 8010c0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010c0e:	fb01 f303 	mul.w	r3, r1, r3
 8010c12:	441a      	add	r2, r3
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	22ff      	movs	r2, #255	; 0xff
 8010c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	22ff      	movs	r2, #255	; 0xff
 8010c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d114      	bne.n	8010c58 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	691b      	ldr	r3, [r3, #16]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d01a      	beq.n	8010c6c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	3310      	adds	r3, #16
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f001 fce4 	bl	8012608 <xTaskRemoveFromEventList>
 8010c40:	4603      	mov	r3, r0
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d012      	beq.n	8010c6c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010c46:	4b0d      	ldr	r3, [pc, #52]	; (8010c7c <xQueueGenericReset+0xcc>)
 8010c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c4c:	601a      	str	r2, [r3, #0]
 8010c4e:	f3bf 8f4f 	dsb	sy
 8010c52:	f3bf 8f6f 	isb	sy
 8010c56:	e009      	b.n	8010c6c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	3310      	adds	r3, #16
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7ff fef3 	bl	8010a48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	3324      	adds	r3, #36	; 0x24
 8010c66:	4618      	mov	r0, r3
 8010c68:	f7ff feee 	bl	8010a48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010c6c:	f002 ff14 	bl	8013a98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010c70:	2301      	movs	r3, #1
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3710      	adds	r7, #16
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	e000ed04 	.word	0xe000ed04

08010c80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b08e      	sub	sp, #56	; 0x38
 8010c84:	af02      	add	r7, sp, #8
 8010c86:	60f8      	str	r0, [r7, #12]
 8010c88:	60b9      	str	r1, [r7, #8]
 8010c8a:	607a      	str	r2, [r7, #4]
 8010c8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d109      	bne.n	8010ca8 <xQueueGenericCreateStatic+0x28>
 8010c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c98:	f383 8811 	msr	BASEPRI, r3
 8010c9c:	f3bf 8f6f 	isb	sy
 8010ca0:	f3bf 8f4f 	dsb	sy
 8010ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ca6:	e7fe      	b.n	8010ca6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d109      	bne.n	8010cc2 <xQueueGenericCreateStatic+0x42>
 8010cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb2:	f383 8811 	msr	BASEPRI, r3
 8010cb6:	f3bf 8f6f 	isb	sy
 8010cba:	f3bf 8f4f 	dsb	sy
 8010cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8010cc0:	e7fe      	b.n	8010cc0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d002      	beq.n	8010cce <xQueueGenericCreateStatic+0x4e>
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d001      	beq.n	8010cd2 <xQueueGenericCreateStatic+0x52>
 8010cce:	2301      	movs	r3, #1
 8010cd0:	e000      	b.n	8010cd4 <xQueueGenericCreateStatic+0x54>
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d109      	bne.n	8010cec <xQueueGenericCreateStatic+0x6c>
 8010cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cdc:	f383 8811 	msr	BASEPRI, r3
 8010ce0:	f3bf 8f6f 	isb	sy
 8010ce4:	f3bf 8f4f 	dsb	sy
 8010ce8:	623b      	str	r3, [r7, #32]
 8010cea:	e7fe      	b.n	8010cea <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d102      	bne.n	8010cf8 <xQueueGenericCreateStatic+0x78>
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d101      	bne.n	8010cfc <xQueueGenericCreateStatic+0x7c>
 8010cf8:	2301      	movs	r3, #1
 8010cfa:	e000      	b.n	8010cfe <xQueueGenericCreateStatic+0x7e>
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d109      	bne.n	8010d16 <xQueueGenericCreateStatic+0x96>
 8010d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d06:	f383 8811 	msr	BASEPRI, r3
 8010d0a:	f3bf 8f6f 	isb	sy
 8010d0e:	f3bf 8f4f 	dsb	sy
 8010d12:	61fb      	str	r3, [r7, #28]
 8010d14:	e7fe      	b.n	8010d14 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010d16:	2350      	movs	r3, #80	; 0x50
 8010d18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	2b50      	cmp	r3, #80	; 0x50
 8010d1e:	d009      	beq.n	8010d34 <xQueueGenericCreateStatic+0xb4>
 8010d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d24:	f383 8811 	msr	BASEPRI, r3
 8010d28:	f3bf 8f6f 	isb	sy
 8010d2c:	f3bf 8f4f 	dsb	sy
 8010d30:	61bb      	str	r3, [r7, #24]
 8010d32:	e7fe      	b.n	8010d32 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010d34:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d00d      	beq.n	8010d5c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d42:	2201      	movs	r2, #1
 8010d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010d48:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d4e:	9300      	str	r3, [sp, #0]
 8010d50:	4613      	mov	r3, r2
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	68b9      	ldr	r1, [r7, #8]
 8010d56:	68f8      	ldr	r0, [r7, #12]
 8010d58:	f000 f844 	bl	8010de4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3730      	adds	r7, #48	; 0x30
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}

08010d66 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010d66:	b580      	push	{r7, lr}
 8010d68:	b08a      	sub	sp, #40	; 0x28
 8010d6a:	af02      	add	r7, sp, #8
 8010d6c:	60f8      	str	r0, [r7, #12]
 8010d6e:	60b9      	str	r1, [r7, #8]
 8010d70:	4613      	mov	r3, r2
 8010d72:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d109      	bne.n	8010d8e <xQueueGenericCreate+0x28>
 8010d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d7e:	f383 8811 	msr	BASEPRI, r3
 8010d82:	f3bf 8f6f 	isb	sy
 8010d86:	f3bf 8f4f 	dsb	sy
 8010d8a:	613b      	str	r3, [r7, #16]
 8010d8c:	e7fe      	b.n	8010d8c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d102      	bne.n	8010d9a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010d94:	2300      	movs	r3, #0
 8010d96:	61fb      	str	r3, [r7, #28]
 8010d98:	e004      	b.n	8010da4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	68ba      	ldr	r2, [r7, #8]
 8010d9e:	fb02 f303 	mul.w	r3, r2, r3
 8010da2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	3350      	adds	r3, #80	; 0x50
 8010da8:	4618      	mov	r0, r3
 8010daa:	f002 ff61 	bl	8013c70 <pvPortMalloc>
 8010dae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010db0:	69bb      	ldr	r3, [r7, #24]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d011      	beq.n	8010dda <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	3350      	adds	r3, #80	; 0x50
 8010dbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010dc0:	69bb      	ldr	r3, [r7, #24]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010dc8:	79fa      	ldrb	r2, [r7, #7]
 8010dca:	69bb      	ldr	r3, [r7, #24]
 8010dcc:	9300      	str	r3, [sp, #0]
 8010dce:	4613      	mov	r3, r2
 8010dd0:	697a      	ldr	r2, [r7, #20]
 8010dd2:	68b9      	ldr	r1, [r7, #8]
 8010dd4:	68f8      	ldr	r0, [r7, #12]
 8010dd6:	f000 f805 	bl	8010de4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010dda:	69bb      	ldr	r3, [r7, #24]
	}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3720      	adds	r7, #32
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}

08010de4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b084      	sub	sp, #16
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	60f8      	str	r0, [r7, #12]
 8010dec:	60b9      	str	r1, [r7, #8]
 8010dee:	607a      	str	r2, [r7, #4]
 8010df0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d103      	bne.n	8010e00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010df8:	69bb      	ldr	r3, [r7, #24]
 8010dfa:	69ba      	ldr	r2, [r7, #24]
 8010dfc:	601a      	str	r2, [r3, #0]
 8010dfe:	e002      	b.n	8010e06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010e00:	69bb      	ldr	r3, [r7, #24]
 8010e02:	687a      	ldr	r2, [r7, #4]
 8010e04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010e06:	69bb      	ldr	r3, [r7, #24]
 8010e08:	68fa      	ldr	r2, [r7, #12]
 8010e0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010e0c:	69bb      	ldr	r3, [r7, #24]
 8010e0e:	68ba      	ldr	r2, [r7, #8]
 8010e10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010e12:	2101      	movs	r1, #1
 8010e14:	69b8      	ldr	r0, [r7, #24]
 8010e16:	f7ff fecb 	bl	8010bb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010e1a:	69bb      	ldr	r3, [r7, #24]
 8010e1c:	78fa      	ldrb	r2, [r7, #3]
 8010e1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010e22:	bf00      	nop
 8010e24:	3710      	adds	r7, #16
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}

08010e2a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010e2a:	b580      	push	{r7, lr}
 8010e2c:	b082      	sub	sp, #8
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d00e      	beq.n	8010e56 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2200      	movs	r2, #0
 8010e42:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2200      	movs	r2, #0
 8010e48:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	2100      	movs	r1, #0
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	f000 f905 	bl	8011060 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010e56:	bf00      	nop
 8010e58:	3708      	adds	r7, #8
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}

08010e5e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010e5e:	b580      	push	{r7, lr}
 8010e60:	b086      	sub	sp, #24
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	4603      	mov	r3, r0
 8010e66:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010e68:	2301      	movs	r3, #1
 8010e6a:	617b      	str	r3, [r7, #20]
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010e70:	79fb      	ldrb	r3, [r7, #7]
 8010e72:	461a      	mov	r2, r3
 8010e74:	6939      	ldr	r1, [r7, #16]
 8010e76:	6978      	ldr	r0, [r7, #20]
 8010e78:	f7ff ff75 	bl	8010d66 <xQueueGenericCreate>
 8010e7c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010e7e:	68f8      	ldr	r0, [r7, #12]
 8010e80:	f7ff ffd3 	bl	8010e2a <prvInitialiseMutex>

		return xNewQueue;
 8010e84:	68fb      	ldr	r3, [r7, #12]
	}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3718      	adds	r7, #24
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}

08010e8e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010e8e:	b580      	push	{r7, lr}
 8010e90:	b088      	sub	sp, #32
 8010e92:	af02      	add	r7, sp, #8
 8010e94:	4603      	mov	r3, r0
 8010e96:	6039      	str	r1, [r7, #0]
 8010e98:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	617b      	str	r3, [r7, #20]
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010ea2:	79fb      	ldrb	r3, [r7, #7]
 8010ea4:	9300      	str	r3, [sp, #0]
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	6939      	ldr	r1, [r7, #16]
 8010eac:	6978      	ldr	r0, [r7, #20]
 8010eae:	f7ff fee7 	bl	8010c80 <xQueueGenericCreateStatic>
 8010eb2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010eb4:	68f8      	ldr	r0, [r7, #12]
 8010eb6:	f7ff ffb8 	bl	8010e2a <prvInitialiseMutex>

		return xNewQueue;
 8010eba:	68fb      	ldr	r3, [r7, #12]
	}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3718      	adds	r7, #24
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}

08010ec4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8010ec4:	b590      	push	{r4, r7, lr}
 8010ec6:	b087      	sub	sp, #28
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d109      	bne.n	8010eea <xQueueGiveMutexRecursive+0x26>
 8010ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eda:	f383 8811 	msr	BASEPRI, r3
 8010ede:	f3bf 8f6f 	isb	sy
 8010ee2:	f3bf 8f4f 	dsb	sy
 8010ee6:	60fb      	str	r3, [r7, #12]
 8010ee8:	e7fe      	b.n	8010ee8 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010eea:	693b      	ldr	r3, [r7, #16]
 8010eec:	689c      	ldr	r4, [r3, #8]
 8010eee:	f001 fd69 	bl	80129c4 <xTaskGetCurrentTaskHandle>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	429c      	cmp	r4, r3
 8010ef6:	d111      	bne.n	8010f1c <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8010ef8:	693b      	ldr	r3, [r7, #16]
 8010efa:	68db      	ldr	r3, [r3, #12]
 8010efc:	1e5a      	subs	r2, r3, #1
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8010f02:	693b      	ldr	r3, [r7, #16]
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d105      	bne.n	8010f16 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	2100      	movs	r1, #0
 8010f10:	6938      	ldr	r0, [r7, #16]
 8010f12:	f000 f8a5 	bl	8011060 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8010f16:	2301      	movs	r3, #1
 8010f18:	617b      	str	r3, [r7, #20]
 8010f1a:	e001      	b.n	8010f20 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8010f20:	697b      	ldr	r3, [r7, #20]
	}
 8010f22:	4618      	mov	r0, r3
 8010f24:	371c      	adds	r7, #28
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd90      	pop	{r4, r7, pc}

08010f2a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8010f2a:	b590      	push	{r4, r7, lr}
 8010f2c:	b087      	sub	sp, #28
 8010f2e:	af00      	add	r7, sp, #0
 8010f30:	6078      	str	r0, [r7, #4]
 8010f32:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d109      	bne.n	8010f52 <xQueueTakeMutexRecursive+0x28>
 8010f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f42:	f383 8811 	msr	BASEPRI, r3
 8010f46:	f3bf 8f6f 	isb	sy
 8010f4a:	f3bf 8f4f 	dsb	sy
 8010f4e:	60fb      	str	r3, [r7, #12]
 8010f50:	e7fe      	b.n	8010f50 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010f52:	693b      	ldr	r3, [r7, #16]
 8010f54:	689c      	ldr	r4, [r3, #8]
 8010f56:	f001 fd35 	bl	80129c4 <xTaskGetCurrentTaskHandle>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	429c      	cmp	r4, r3
 8010f5e:	d107      	bne.n	8010f70 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010f60:	693b      	ldr	r3, [r7, #16]
 8010f62:	68db      	ldr	r3, [r3, #12]
 8010f64:	1c5a      	adds	r2, r3, #1
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	617b      	str	r3, [r7, #20]
 8010f6e:	e00c      	b.n	8010f8a <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010f70:	6839      	ldr	r1, [r7, #0]
 8010f72:	6938      	ldr	r0, [r7, #16]
 8010f74:	f000 fb68 	bl	8011648 <xQueueSemaphoreTake>
 8010f78:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d004      	beq.n	8010f8a <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010f80:	693b      	ldr	r3, [r7, #16]
 8010f82:	68db      	ldr	r3, [r3, #12]
 8010f84:	1c5a      	adds	r2, r3, #1
 8010f86:	693b      	ldr	r3, [r7, #16]
 8010f88:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8010f8a:	697b      	ldr	r3, [r7, #20]
	}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	371c      	adds	r7, #28
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd90      	pop	{r4, r7, pc}

08010f94 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b08a      	sub	sp, #40	; 0x28
 8010f98:	af02      	add	r7, sp, #8
 8010f9a:	60f8      	str	r0, [r7, #12]
 8010f9c:	60b9      	str	r1, [r7, #8]
 8010f9e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d109      	bne.n	8010fba <xQueueCreateCountingSemaphoreStatic+0x26>
 8010fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010faa:	f383 8811 	msr	BASEPRI, r3
 8010fae:	f3bf 8f6f 	isb	sy
 8010fb2:	f3bf 8f4f 	dsb	sy
 8010fb6:	61bb      	str	r3, [r7, #24]
 8010fb8:	e7fe      	b.n	8010fb8 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010fba:	68ba      	ldr	r2, [r7, #8]
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d909      	bls.n	8010fd6 <xQueueCreateCountingSemaphoreStatic+0x42>
 8010fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc6:	f383 8811 	msr	BASEPRI, r3
 8010fca:	f3bf 8f6f 	isb	sy
 8010fce:	f3bf 8f4f 	dsb	sy
 8010fd2:	617b      	str	r3, [r7, #20]
 8010fd4:	e7fe      	b.n	8010fd4 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010fd6:	2302      	movs	r3, #2
 8010fd8:	9300      	str	r3, [sp, #0]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	2100      	movs	r1, #0
 8010fe0:	68f8      	ldr	r0, [r7, #12]
 8010fe2:	f7ff fe4d 	bl	8010c80 <xQueueGenericCreateStatic>
 8010fe6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8010fe8:	69fb      	ldr	r3, [r7, #28]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d002      	beq.n	8010ff4 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	68ba      	ldr	r2, [r7, #8]
 8010ff2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010ff4:	69fb      	ldr	r3, [r7, #28]
	}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3720      	adds	r7, #32
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}

08010ffe <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010ffe:	b580      	push	{r7, lr}
 8011000:	b086      	sub	sp, #24
 8011002:	af00      	add	r7, sp, #0
 8011004:	6078      	str	r0, [r7, #4]
 8011006:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d109      	bne.n	8011022 <xQueueCreateCountingSemaphore+0x24>
 801100e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011012:	f383 8811 	msr	BASEPRI, r3
 8011016:	f3bf 8f6f 	isb	sy
 801101a:	f3bf 8f4f 	dsb	sy
 801101e:	613b      	str	r3, [r7, #16]
 8011020:	e7fe      	b.n	8011020 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011022:	683a      	ldr	r2, [r7, #0]
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	429a      	cmp	r2, r3
 8011028:	d909      	bls.n	801103e <xQueueCreateCountingSemaphore+0x40>
 801102a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801102e:	f383 8811 	msr	BASEPRI, r3
 8011032:	f3bf 8f6f 	isb	sy
 8011036:	f3bf 8f4f 	dsb	sy
 801103a:	60fb      	str	r3, [r7, #12]
 801103c:	e7fe      	b.n	801103c <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801103e:	2202      	movs	r2, #2
 8011040:	2100      	movs	r1, #0
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f7ff fe8f 	bl	8010d66 <xQueueGenericCreate>
 8011048:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d002      	beq.n	8011056 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	683a      	ldr	r2, [r7, #0]
 8011054:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011056:	697b      	ldr	r3, [r7, #20]
	}
 8011058:	4618      	mov	r0, r3
 801105a:	3718      	adds	r7, #24
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b08e      	sub	sp, #56	; 0x38
 8011064:	af00      	add	r7, sp, #0
 8011066:	60f8      	str	r0, [r7, #12]
 8011068:	60b9      	str	r1, [r7, #8]
 801106a:	607a      	str	r2, [r7, #4]
 801106c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801106e:	2300      	movs	r3, #0
 8011070:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011078:	2b00      	cmp	r3, #0
 801107a:	d109      	bne.n	8011090 <xQueueGenericSend+0x30>
 801107c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011080:	f383 8811 	msr	BASEPRI, r3
 8011084:	f3bf 8f6f 	isb	sy
 8011088:	f3bf 8f4f 	dsb	sy
 801108c:	62bb      	str	r3, [r7, #40]	; 0x28
 801108e:	e7fe      	b.n	801108e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d103      	bne.n	801109e <xQueueGenericSend+0x3e>
 8011096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801109a:	2b00      	cmp	r3, #0
 801109c:	d101      	bne.n	80110a2 <xQueueGenericSend+0x42>
 801109e:	2301      	movs	r3, #1
 80110a0:	e000      	b.n	80110a4 <xQueueGenericSend+0x44>
 80110a2:	2300      	movs	r3, #0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d109      	bne.n	80110bc <xQueueGenericSend+0x5c>
 80110a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ac:	f383 8811 	msr	BASEPRI, r3
 80110b0:	f3bf 8f6f 	isb	sy
 80110b4:	f3bf 8f4f 	dsb	sy
 80110b8:	627b      	str	r3, [r7, #36]	; 0x24
 80110ba:	e7fe      	b.n	80110ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	2b02      	cmp	r3, #2
 80110c0:	d103      	bne.n	80110ca <xQueueGenericSend+0x6a>
 80110c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110c6:	2b01      	cmp	r3, #1
 80110c8:	d101      	bne.n	80110ce <xQueueGenericSend+0x6e>
 80110ca:	2301      	movs	r3, #1
 80110cc:	e000      	b.n	80110d0 <xQueueGenericSend+0x70>
 80110ce:	2300      	movs	r3, #0
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d109      	bne.n	80110e8 <xQueueGenericSend+0x88>
 80110d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d8:	f383 8811 	msr	BASEPRI, r3
 80110dc:	f3bf 8f6f 	isb	sy
 80110e0:	f3bf 8f4f 	dsb	sy
 80110e4:	623b      	str	r3, [r7, #32]
 80110e6:	e7fe      	b.n	80110e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80110e8:	f001 fc7c 	bl	80129e4 <xTaskGetSchedulerState>
 80110ec:	4603      	mov	r3, r0
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d102      	bne.n	80110f8 <xQueueGenericSend+0x98>
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d101      	bne.n	80110fc <xQueueGenericSend+0x9c>
 80110f8:	2301      	movs	r3, #1
 80110fa:	e000      	b.n	80110fe <xQueueGenericSend+0x9e>
 80110fc:	2300      	movs	r3, #0
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d109      	bne.n	8011116 <xQueueGenericSend+0xb6>
 8011102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011106:	f383 8811 	msr	BASEPRI, r3
 801110a:	f3bf 8f6f 	isb	sy
 801110e:	f3bf 8f4f 	dsb	sy
 8011112:	61fb      	str	r3, [r7, #28]
 8011114:	e7fe      	b.n	8011114 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011116:	f002 fc91 	bl	8013a3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801111a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801111c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011122:	429a      	cmp	r2, r3
 8011124:	d302      	bcc.n	801112c <xQueueGenericSend+0xcc>
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	2b02      	cmp	r3, #2
 801112a:	d129      	bne.n	8011180 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801112c:	683a      	ldr	r2, [r7, #0]
 801112e:	68b9      	ldr	r1, [r7, #8]
 8011130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011132:	f000 fc48 	bl	80119c6 <prvCopyDataToQueue>
 8011136:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801113c:	2b00      	cmp	r3, #0
 801113e:	d010      	beq.n	8011162 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011142:	3324      	adds	r3, #36	; 0x24
 8011144:	4618      	mov	r0, r3
 8011146:	f001 fa5f 	bl	8012608 <xTaskRemoveFromEventList>
 801114a:	4603      	mov	r3, r0
 801114c:	2b00      	cmp	r3, #0
 801114e:	d013      	beq.n	8011178 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011150:	4b3f      	ldr	r3, [pc, #252]	; (8011250 <xQueueGenericSend+0x1f0>)
 8011152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011156:	601a      	str	r2, [r3, #0]
 8011158:	f3bf 8f4f 	dsb	sy
 801115c:	f3bf 8f6f 	isb	sy
 8011160:	e00a      	b.n	8011178 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011164:	2b00      	cmp	r3, #0
 8011166:	d007      	beq.n	8011178 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011168:	4b39      	ldr	r3, [pc, #228]	; (8011250 <xQueueGenericSend+0x1f0>)
 801116a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801116e:	601a      	str	r2, [r3, #0]
 8011170:	f3bf 8f4f 	dsb	sy
 8011174:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011178:	f002 fc8e 	bl	8013a98 <vPortExitCritical>
				return pdPASS;
 801117c:	2301      	movs	r3, #1
 801117e:	e063      	b.n	8011248 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d103      	bne.n	801118e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011186:	f002 fc87 	bl	8013a98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801118a:	2300      	movs	r3, #0
 801118c:	e05c      	b.n	8011248 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801118e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011190:	2b00      	cmp	r3, #0
 8011192:	d106      	bne.n	80111a2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011194:	f107 0314 	add.w	r3, r7, #20
 8011198:	4618      	mov	r0, r3
 801119a:	f001 fa99 	bl	80126d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801119e:	2301      	movs	r3, #1
 80111a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80111a2:	f002 fc79 	bl	8013a98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80111a6:	f000 ffdb 	bl	8012160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80111aa:	f002 fc47 	bl	8013a3c <vPortEnterCritical>
 80111ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111b4:	b25b      	sxtb	r3, r3
 80111b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ba:	d103      	bne.n	80111c4 <xQueueGenericSend+0x164>
 80111bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111be:	2200      	movs	r2, #0
 80111c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80111c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111ca:	b25b      	sxtb	r3, r3
 80111cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111d0:	d103      	bne.n	80111da <xQueueGenericSend+0x17a>
 80111d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d4:	2200      	movs	r2, #0
 80111d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80111da:	f002 fc5d 	bl	8013a98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80111de:	1d3a      	adds	r2, r7, #4
 80111e0:	f107 0314 	add.w	r3, r7, #20
 80111e4:	4611      	mov	r1, r2
 80111e6:	4618      	mov	r0, r3
 80111e8:	f001 fa88 	bl	80126fc <xTaskCheckForTimeOut>
 80111ec:	4603      	mov	r3, r0
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d124      	bne.n	801123c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80111f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111f4:	f000 fcdf 	bl	8011bb6 <prvIsQueueFull>
 80111f8:	4603      	mov	r3, r0
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d018      	beq.n	8011230 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80111fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011200:	3310      	adds	r3, #16
 8011202:	687a      	ldr	r2, [r7, #4]
 8011204:	4611      	mov	r1, r2
 8011206:	4618      	mov	r0, r3
 8011208:	f001 f9b0 	bl	801256c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801120c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801120e:	f000 fc6a 	bl	8011ae6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011212:	f000 ffeb 	bl	80121ec <xTaskResumeAll>
 8011216:	4603      	mov	r3, r0
 8011218:	2b00      	cmp	r3, #0
 801121a:	f47f af7c 	bne.w	8011116 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 801121e:	4b0c      	ldr	r3, [pc, #48]	; (8011250 <xQueueGenericSend+0x1f0>)
 8011220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011224:	601a      	str	r2, [r3, #0]
 8011226:	f3bf 8f4f 	dsb	sy
 801122a:	f3bf 8f6f 	isb	sy
 801122e:	e772      	b.n	8011116 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011232:	f000 fc58 	bl	8011ae6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011236:	f000 ffd9 	bl	80121ec <xTaskResumeAll>
 801123a:	e76c      	b.n	8011116 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801123c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801123e:	f000 fc52 	bl	8011ae6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011242:	f000 ffd3 	bl	80121ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011246:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011248:	4618      	mov	r0, r3
 801124a:	3738      	adds	r7, #56	; 0x38
 801124c:	46bd      	mov	sp, r7
 801124e:	bd80      	pop	{r7, pc}
 8011250:	e000ed04 	.word	0xe000ed04

08011254 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b08e      	sub	sp, #56	; 0x38
 8011258:	af00      	add	r7, sp, #0
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	607a      	str	r2, [r7, #4]
 8011260:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011268:	2b00      	cmp	r3, #0
 801126a:	d109      	bne.n	8011280 <xQueueGenericSendFromISR+0x2c>
 801126c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011270:	f383 8811 	msr	BASEPRI, r3
 8011274:	f3bf 8f6f 	isb	sy
 8011278:	f3bf 8f4f 	dsb	sy
 801127c:	627b      	str	r3, [r7, #36]	; 0x24
 801127e:	e7fe      	b.n	801127e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d103      	bne.n	801128e <xQueueGenericSendFromISR+0x3a>
 8011286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801128a:	2b00      	cmp	r3, #0
 801128c:	d101      	bne.n	8011292 <xQueueGenericSendFromISR+0x3e>
 801128e:	2301      	movs	r3, #1
 8011290:	e000      	b.n	8011294 <xQueueGenericSendFromISR+0x40>
 8011292:	2300      	movs	r3, #0
 8011294:	2b00      	cmp	r3, #0
 8011296:	d109      	bne.n	80112ac <xQueueGenericSendFromISR+0x58>
 8011298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801129c:	f383 8811 	msr	BASEPRI, r3
 80112a0:	f3bf 8f6f 	isb	sy
 80112a4:	f3bf 8f4f 	dsb	sy
 80112a8:	623b      	str	r3, [r7, #32]
 80112aa:	e7fe      	b.n	80112aa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	2b02      	cmp	r3, #2
 80112b0:	d103      	bne.n	80112ba <xQueueGenericSendFromISR+0x66>
 80112b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112b6:	2b01      	cmp	r3, #1
 80112b8:	d101      	bne.n	80112be <xQueueGenericSendFromISR+0x6a>
 80112ba:	2301      	movs	r3, #1
 80112bc:	e000      	b.n	80112c0 <xQueueGenericSendFromISR+0x6c>
 80112be:	2300      	movs	r3, #0
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d109      	bne.n	80112d8 <xQueueGenericSendFromISR+0x84>
 80112c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c8:	f383 8811 	msr	BASEPRI, r3
 80112cc:	f3bf 8f6f 	isb	sy
 80112d0:	f3bf 8f4f 	dsb	sy
 80112d4:	61fb      	str	r3, [r7, #28]
 80112d6:	e7fe      	b.n	80112d6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80112d8:	f002 fc8c 	bl	8013bf4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80112dc:	f3ef 8211 	mrs	r2, BASEPRI
 80112e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e4:	f383 8811 	msr	BASEPRI, r3
 80112e8:	f3bf 8f6f 	isb	sy
 80112ec:	f3bf 8f4f 	dsb	sy
 80112f0:	61ba      	str	r2, [r7, #24]
 80112f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80112f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80112f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80112f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80112fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011300:	429a      	cmp	r2, r3
 8011302:	d302      	bcc.n	801130a <xQueueGenericSendFromISR+0xb6>
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	2b02      	cmp	r3, #2
 8011308:	d12c      	bne.n	8011364 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801130a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801130c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011314:	683a      	ldr	r2, [r7, #0]
 8011316:	68b9      	ldr	r1, [r7, #8]
 8011318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801131a:	f000 fb54 	bl	80119c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801131e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011326:	d112      	bne.n	801134e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801132c:	2b00      	cmp	r3, #0
 801132e:	d016      	beq.n	801135e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011332:	3324      	adds	r3, #36	; 0x24
 8011334:	4618      	mov	r0, r3
 8011336:	f001 f967 	bl	8012608 <xTaskRemoveFromEventList>
 801133a:	4603      	mov	r3, r0
 801133c:	2b00      	cmp	r3, #0
 801133e:	d00e      	beq.n	801135e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d00b      	beq.n	801135e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2201      	movs	r2, #1
 801134a:	601a      	str	r2, [r3, #0]
 801134c:	e007      	b.n	801135e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801134e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011352:	3301      	adds	r3, #1
 8011354:	b2db      	uxtb	r3, r3
 8011356:	b25a      	sxtb	r2, r3
 8011358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801135e:	2301      	movs	r3, #1
 8011360:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011362:	e001      	b.n	8011368 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011364:	2300      	movs	r3, #0
 8011366:	637b      	str	r3, [r7, #52]	; 0x34
 8011368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801136c:	693b      	ldr	r3, [r7, #16]
 801136e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011374:	4618      	mov	r0, r3
 8011376:	3738      	adds	r7, #56	; 0x38
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b08e      	sub	sp, #56	; 0x38
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801138a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801138c:	2b00      	cmp	r3, #0
 801138e:	d109      	bne.n	80113a4 <xQueueGiveFromISR+0x28>
	__asm volatile
 8011390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011394:	f383 8811 	msr	BASEPRI, r3
 8011398:	f3bf 8f6f 	isb	sy
 801139c:	f3bf 8f4f 	dsb	sy
 80113a0:	623b      	str	r3, [r7, #32]
 80113a2:	e7fe      	b.n	80113a2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80113a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d009      	beq.n	80113c0 <xQueueGiveFromISR+0x44>
 80113ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b0:	f383 8811 	msr	BASEPRI, r3
 80113b4:	f3bf 8f6f 	isb	sy
 80113b8:	f3bf 8f4f 	dsb	sy
 80113bc:	61fb      	str	r3, [r7, #28]
 80113be:	e7fe      	b.n	80113be <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80113c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d103      	bne.n	80113d0 <xQueueGiveFromISR+0x54>
 80113c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ca:	689b      	ldr	r3, [r3, #8]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d101      	bne.n	80113d4 <xQueueGiveFromISR+0x58>
 80113d0:	2301      	movs	r3, #1
 80113d2:	e000      	b.n	80113d6 <xQueueGiveFromISR+0x5a>
 80113d4:	2300      	movs	r3, #0
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d109      	bne.n	80113ee <xQueueGiveFromISR+0x72>
 80113da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113de:	f383 8811 	msr	BASEPRI, r3
 80113e2:	f3bf 8f6f 	isb	sy
 80113e6:	f3bf 8f4f 	dsb	sy
 80113ea:	61bb      	str	r3, [r7, #24]
 80113ec:	e7fe      	b.n	80113ec <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80113ee:	f002 fc01 	bl	8013bf4 <vPortValidateInterruptPriority>
	__asm volatile
 80113f2:	f3ef 8211 	mrs	r2, BASEPRI
 80113f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113fa:	f383 8811 	msr	BASEPRI, r3
 80113fe:	f3bf 8f6f 	isb	sy
 8011402:	f3bf 8f4f 	dsb	sy
 8011406:	617a      	str	r2, [r7, #20]
 8011408:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801140a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801140c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801140e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011412:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801141a:	429a      	cmp	r2, r3
 801141c:	d22b      	bcs.n	8011476 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801141e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801142a:	1c5a      	adds	r2, r3, #1
 801142c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801142e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011430:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011438:	d112      	bne.n	8011460 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801143a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801143e:	2b00      	cmp	r3, #0
 8011440:	d016      	beq.n	8011470 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011444:	3324      	adds	r3, #36	; 0x24
 8011446:	4618      	mov	r0, r3
 8011448:	f001 f8de 	bl	8012608 <xTaskRemoveFromEventList>
 801144c:	4603      	mov	r3, r0
 801144e:	2b00      	cmp	r3, #0
 8011450:	d00e      	beq.n	8011470 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d00b      	beq.n	8011470 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	2201      	movs	r2, #1
 801145c:	601a      	str	r2, [r3, #0]
 801145e:	e007      	b.n	8011470 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011464:	3301      	adds	r3, #1
 8011466:	b2db      	uxtb	r3, r3
 8011468:	b25a      	sxtb	r2, r3
 801146a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801146c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011470:	2301      	movs	r3, #1
 8011472:	637b      	str	r3, [r7, #52]	; 0x34
 8011474:	e001      	b.n	801147a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011476:	2300      	movs	r3, #0
 8011478:	637b      	str	r3, [r7, #52]	; 0x34
 801147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801147c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011486:	4618      	mov	r0, r3
 8011488:	3738      	adds	r7, #56	; 0x38
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}
	...

08011490 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b08c      	sub	sp, #48	; 0x30
 8011494:	af00      	add	r7, sp, #0
 8011496:	60f8      	str	r0, [r7, #12]
 8011498:	60b9      	str	r1, [r7, #8]
 801149a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801149c:	2300      	movs	r3, #0
 801149e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80114a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d109      	bne.n	80114be <xQueueReceive+0x2e>
	__asm volatile
 80114aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ae:	f383 8811 	msr	BASEPRI, r3
 80114b2:	f3bf 8f6f 	isb	sy
 80114b6:	f3bf 8f4f 	dsb	sy
 80114ba:	623b      	str	r3, [r7, #32]
 80114bc:	e7fe      	b.n	80114bc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d103      	bne.n	80114cc <xQueueReceive+0x3c>
 80114c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d101      	bne.n	80114d0 <xQueueReceive+0x40>
 80114cc:	2301      	movs	r3, #1
 80114ce:	e000      	b.n	80114d2 <xQueueReceive+0x42>
 80114d0:	2300      	movs	r3, #0
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d109      	bne.n	80114ea <xQueueReceive+0x5a>
 80114d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114da:	f383 8811 	msr	BASEPRI, r3
 80114de:	f3bf 8f6f 	isb	sy
 80114e2:	f3bf 8f4f 	dsb	sy
 80114e6:	61fb      	str	r3, [r7, #28]
 80114e8:	e7fe      	b.n	80114e8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80114ea:	f001 fa7b 	bl	80129e4 <xTaskGetSchedulerState>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d102      	bne.n	80114fa <xQueueReceive+0x6a>
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d101      	bne.n	80114fe <xQueueReceive+0x6e>
 80114fa:	2301      	movs	r3, #1
 80114fc:	e000      	b.n	8011500 <xQueueReceive+0x70>
 80114fe:	2300      	movs	r3, #0
 8011500:	2b00      	cmp	r3, #0
 8011502:	d109      	bne.n	8011518 <xQueueReceive+0x88>
 8011504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011508:	f383 8811 	msr	BASEPRI, r3
 801150c:	f3bf 8f6f 	isb	sy
 8011510:	f3bf 8f4f 	dsb	sy
 8011514:	61bb      	str	r3, [r7, #24]
 8011516:	e7fe      	b.n	8011516 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011518:	f002 fa90 	bl	8013a3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801151e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011520:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011524:	2b00      	cmp	r3, #0
 8011526:	d01f      	beq.n	8011568 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011528:	68b9      	ldr	r1, [r7, #8]
 801152a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801152c:	f000 fab5 	bl	8011a9a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011532:	1e5a      	subs	r2, r3, #1
 8011534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011536:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153a:	691b      	ldr	r3, [r3, #16]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d00f      	beq.n	8011560 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011542:	3310      	adds	r3, #16
 8011544:	4618      	mov	r0, r3
 8011546:	f001 f85f 	bl	8012608 <xTaskRemoveFromEventList>
 801154a:	4603      	mov	r3, r0
 801154c:	2b00      	cmp	r3, #0
 801154e:	d007      	beq.n	8011560 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011550:	4b3c      	ldr	r3, [pc, #240]	; (8011644 <xQueueReceive+0x1b4>)
 8011552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011556:	601a      	str	r2, [r3, #0]
 8011558:	f3bf 8f4f 	dsb	sy
 801155c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011560:	f002 fa9a 	bl	8013a98 <vPortExitCritical>
				return pdPASS;
 8011564:	2301      	movs	r3, #1
 8011566:	e069      	b.n	801163c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d103      	bne.n	8011576 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801156e:	f002 fa93 	bl	8013a98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011572:	2300      	movs	r3, #0
 8011574:	e062      	b.n	801163c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011578:	2b00      	cmp	r3, #0
 801157a:	d106      	bne.n	801158a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801157c:	f107 0310 	add.w	r3, r7, #16
 8011580:	4618      	mov	r0, r3
 8011582:	f001 f8a5 	bl	80126d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011586:	2301      	movs	r3, #1
 8011588:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801158a:	f002 fa85 	bl	8013a98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801158e:	f000 fde7 	bl	8012160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011592:	f002 fa53 	bl	8013a3c <vPortEnterCritical>
 8011596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801159c:	b25b      	sxtb	r3, r3
 801159e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115a2:	d103      	bne.n	80115ac <xQueueReceive+0x11c>
 80115a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a6:	2200      	movs	r2, #0
 80115a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115b2:	b25b      	sxtb	r3, r3
 80115b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115b8:	d103      	bne.n	80115c2 <xQueueReceive+0x132>
 80115ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115bc:	2200      	movs	r2, #0
 80115be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115c2:	f002 fa69 	bl	8013a98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80115c6:	1d3a      	adds	r2, r7, #4
 80115c8:	f107 0310 	add.w	r3, r7, #16
 80115cc:	4611      	mov	r1, r2
 80115ce:	4618      	mov	r0, r3
 80115d0:	f001 f894 	bl	80126fc <xTaskCheckForTimeOut>
 80115d4:	4603      	mov	r3, r0
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d123      	bne.n	8011622 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80115da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115dc:	f000 fad5 	bl	8011b8a <prvIsQueueEmpty>
 80115e0:	4603      	mov	r3, r0
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d017      	beq.n	8011616 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80115e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e8:	3324      	adds	r3, #36	; 0x24
 80115ea:	687a      	ldr	r2, [r7, #4]
 80115ec:	4611      	mov	r1, r2
 80115ee:	4618      	mov	r0, r3
 80115f0:	f000 ffbc 	bl	801256c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80115f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115f6:	f000 fa76 	bl	8011ae6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80115fa:	f000 fdf7 	bl	80121ec <xTaskResumeAll>
 80115fe:	4603      	mov	r3, r0
 8011600:	2b00      	cmp	r3, #0
 8011602:	d189      	bne.n	8011518 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8011604:	4b0f      	ldr	r3, [pc, #60]	; (8011644 <xQueueReceive+0x1b4>)
 8011606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801160a:	601a      	str	r2, [r3, #0]
 801160c:	f3bf 8f4f 	dsb	sy
 8011610:	f3bf 8f6f 	isb	sy
 8011614:	e780      	b.n	8011518 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011618:	f000 fa65 	bl	8011ae6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801161c:	f000 fde6 	bl	80121ec <xTaskResumeAll>
 8011620:	e77a      	b.n	8011518 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011624:	f000 fa5f 	bl	8011ae6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011628:	f000 fde0 	bl	80121ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801162c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801162e:	f000 faac 	bl	8011b8a <prvIsQueueEmpty>
 8011632:	4603      	mov	r3, r0
 8011634:	2b00      	cmp	r3, #0
 8011636:	f43f af6f 	beq.w	8011518 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801163a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801163c:	4618      	mov	r0, r3
 801163e:	3730      	adds	r7, #48	; 0x30
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}
 8011644:	e000ed04 	.word	0xe000ed04

08011648 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b08e      	sub	sp, #56	; 0x38
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011652:	2300      	movs	r3, #0
 8011654:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801165a:	2300      	movs	r3, #0
 801165c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011660:	2b00      	cmp	r3, #0
 8011662:	d109      	bne.n	8011678 <xQueueSemaphoreTake+0x30>
 8011664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011668:	f383 8811 	msr	BASEPRI, r3
 801166c:	f3bf 8f6f 	isb	sy
 8011670:	f3bf 8f4f 	dsb	sy
 8011674:	623b      	str	r3, [r7, #32]
 8011676:	e7fe      	b.n	8011676 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801167c:	2b00      	cmp	r3, #0
 801167e:	d009      	beq.n	8011694 <xQueueSemaphoreTake+0x4c>
 8011680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011684:	f383 8811 	msr	BASEPRI, r3
 8011688:	f3bf 8f6f 	isb	sy
 801168c:	f3bf 8f4f 	dsb	sy
 8011690:	61fb      	str	r3, [r7, #28]
 8011692:	e7fe      	b.n	8011692 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011694:	f001 f9a6 	bl	80129e4 <xTaskGetSchedulerState>
 8011698:	4603      	mov	r3, r0
 801169a:	2b00      	cmp	r3, #0
 801169c:	d102      	bne.n	80116a4 <xQueueSemaphoreTake+0x5c>
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d101      	bne.n	80116a8 <xQueueSemaphoreTake+0x60>
 80116a4:	2301      	movs	r3, #1
 80116a6:	e000      	b.n	80116aa <xQueueSemaphoreTake+0x62>
 80116a8:	2300      	movs	r3, #0
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d109      	bne.n	80116c2 <xQueueSemaphoreTake+0x7a>
 80116ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b2:	f383 8811 	msr	BASEPRI, r3
 80116b6:	f3bf 8f6f 	isb	sy
 80116ba:	f3bf 8f4f 	dsb	sy
 80116be:	61bb      	str	r3, [r7, #24]
 80116c0:	e7fe      	b.n	80116c0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80116c2:	f002 f9bb 	bl	8013a3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80116c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116ca:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80116cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d024      	beq.n	801171c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80116d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d4:	1e5a      	subs	r2, r3, #1
 80116d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80116da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d104      	bne.n	80116ec <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80116e2:	f001 faf1 	bl	8012cc8 <pvTaskIncrementMutexHeldCount>
 80116e6:	4602      	mov	r2, r0
 80116e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80116ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ee:	691b      	ldr	r3, [r3, #16]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d00f      	beq.n	8011714 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80116f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116f6:	3310      	adds	r3, #16
 80116f8:	4618      	mov	r0, r3
 80116fa:	f000 ff85 	bl	8012608 <xTaskRemoveFromEventList>
 80116fe:	4603      	mov	r3, r0
 8011700:	2b00      	cmp	r3, #0
 8011702:	d007      	beq.n	8011714 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011704:	4b53      	ldr	r3, [pc, #332]	; (8011854 <xQueueSemaphoreTake+0x20c>)
 8011706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801170a:	601a      	str	r2, [r3, #0]
 801170c:	f3bf 8f4f 	dsb	sy
 8011710:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011714:	f002 f9c0 	bl	8013a98 <vPortExitCritical>
				return pdPASS;
 8011718:	2301      	movs	r3, #1
 801171a:	e096      	b.n	801184a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d110      	bne.n	8011744 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011724:	2b00      	cmp	r3, #0
 8011726:	d009      	beq.n	801173c <xQueueSemaphoreTake+0xf4>
 8011728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801172c:	f383 8811 	msr	BASEPRI, r3
 8011730:	f3bf 8f6f 	isb	sy
 8011734:	f3bf 8f4f 	dsb	sy
 8011738:	617b      	str	r3, [r7, #20]
 801173a:	e7fe      	b.n	801173a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801173c:	f002 f9ac 	bl	8013a98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011740:	2300      	movs	r3, #0
 8011742:	e082      	b.n	801184a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011746:	2b00      	cmp	r3, #0
 8011748:	d106      	bne.n	8011758 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801174a:	f107 030c 	add.w	r3, r7, #12
 801174e:	4618      	mov	r0, r3
 8011750:	f000 ffbe 	bl	80126d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011754:	2301      	movs	r3, #1
 8011756:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011758:	f002 f99e 	bl	8013a98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801175c:	f000 fd00 	bl	8012160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011760:	f002 f96c 	bl	8013a3c <vPortEnterCritical>
 8011764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801176a:	b25b      	sxtb	r3, r3
 801176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011770:	d103      	bne.n	801177a <xQueueSemaphoreTake+0x132>
 8011772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011774:	2200      	movs	r2, #0
 8011776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801177c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011780:	b25b      	sxtb	r3, r3
 8011782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011786:	d103      	bne.n	8011790 <xQueueSemaphoreTake+0x148>
 8011788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178a:	2200      	movs	r2, #0
 801178c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011790:	f002 f982 	bl	8013a98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011794:	463a      	mov	r2, r7
 8011796:	f107 030c 	add.w	r3, r7, #12
 801179a:	4611      	mov	r1, r2
 801179c:	4618      	mov	r0, r3
 801179e:	f000 ffad 	bl	80126fc <xTaskCheckForTimeOut>
 80117a2:	4603      	mov	r3, r0
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d132      	bne.n	801180e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80117a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117aa:	f000 f9ee 	bl	8011b8a <prvIsQueueEmpty>
 80117ae:	4603      	mov	r3, r0
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d026      	beq.n	8011802 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80117b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d109      	bne.n	80117d0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80117bc:	f002 f93e 	bl	8013a3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80117c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c2:	689b      	ldr	r3, [r3, #8]
 80117c4:	4618      	mov	r0, r3
 80117c6:	f001 f92b 	bl	8012a20 <xTaskPriorityInherit>
 80117ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80117cc:	f002 f964 	bl	8013a98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80117d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d2:	3324      	adds	r3, #36	; 0x24
 80117d4:	683a      	ldr	r2, [r7, #0]
 80117d6:	4611      	mov	r1, r2
 80117d8:	4618      	mov	r0, r3
 80117da:	f000 fec7 	bl	801256c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80117de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117e0:	f000 f981 	bl	8011ae6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80117e4:	f000 fd02 	bl	80121ec <xTaskResumeAll>
 80117e8:	4603      	mov	r3, r0
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	f47f af69 	bne.w	80116c2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80117f0:	4b18      	ldr	r3, [pc, #96]	; (8011854 <xQueueSemaphoreTake+0x20c>)
 80117f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117f6:	601a      	str	r2, [r3, #0]
 80117f8:	f3bf 8f4f 	dsb	sy
 80117fc:	f3bf 8f6f 	isb	sy
 8011800:	e75f      	b.n	80116c2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011802:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011804:	f000 f96f 	bl	8011ae6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011808:	f000 fcf0 	bl	80121ec <xTaskResumeAll>
 801180c:	e759      	b.n	80116c2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801180e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011810:	f000 f969 	bl	8011ae6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011814:	f000 fcea 	bl	80121ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011818:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801181a:	f000 f9b6 	bl	8011b8a <prvIsQueueEmpty>
 801181e:	4603      	mov	r3, r0
 8011820:	2b00      	cmp	r3, #0
 8011822:	f43f af4e 	beq.w	80116c2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011828:	2b00      	cmp	r3, #0
 801182a:	d00d      	beq.n	8011848 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 801182c:	f002 f906 	bl	8013a3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011830:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011832:	f000 f8b0 	bl	8011996 <prvGetDisinheritPriorityAfterTimeout>
 8011836:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801183a:	689b      	ldr	r3, [r3, #8]
 801183c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801183e:	4618      	mov	r0, r3
 8011840:	f001 f9c2 	bl	8012bc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011844:	f002 f928 	bl	8013a98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011848:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801184a:	4618      	mov	r0, r3
 801184c:	3738      	adds	r7, #56	; 0x38
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}
 8011852:	bf00      	nop
 8011854:	e000ed04 	.word	0xe000ed04

08011858 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b08e      	sub	sp, #56	; 0x38
 801185c:	af00      	add	r7, sp, #0
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801186a:	2b00      	cmp	r3, #0
 801186c:	d109      	bne.n	8011882 <xQueueReceiveFromISR+0x2a>
 801186e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011872:	f383 8811 	msr	BASEPRI, r3
 8011876:	f3bf 8f6f 	isb	sy
 801187a:	f3bf 8f4f 	dsb	sy
 801187e:	623b      	str	r3, [r7, #32]
 8011880:	e7fe      	b.n	8011880 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d103      	bne.n	8011890 <xQueueReceiveFromISR+0x38>
 8011888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801188c:	2b00      	cmp	r3, #0
 801188e:	d101      	bne.n	8011894 <xQueueReceiveFromISR+0x3c>
 8011890:	2301      	movs	r3, #1
 8011892:	e000      	b.n	8011896 <xQueueReceiveFromISR+0x3e>
 8011894:	2300      	movs	r3, #0
 8011896:	2b00      	cmp	r3, #0
 8011898:	d109      	bne.n	80118ae <xQueueReceiveFromISR+0x56>
 801189a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801189e:	f383 8811 	msr	BASEPRI, r3
 80118a2:	f3bf 8f6f 	isb	sy
 80118a6:	f3bf 8f4f 	dsb	sy
 80118aa:	61fb      	str	r3, [r7, #28]
 80118ac:	e7fe      	b.n	80118ac <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80118ae:	f002 f9a1 	bl	8013bf4 <vPortValidateInterruptPriority>
	__asm volatile
 80118b2:	f3ef 8211 	mrs	r2, BASEPRI
 80118b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ba:	f383 8811 	msr	BASEPRI, r3
 80118be:	f3bf 8f6f 	isb	sy
 80118c2:	f3bf 8f4f 	dsb	sy
 80118c6:	61ba      	str	r2, [r7, #24]
 80118c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80118ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80118cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80118d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d02f      	beq.n	801193a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80118da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80118e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80118e4:	68b9      	ldr	r1, [r7, #8]
 80118e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118e8:	f000 f8d7 	bl	8011a9a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80118ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ee:	1e5a      	subs	r2, r3, #1
 80118f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80118f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80118f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118fc:	d112      	bne.n	8011924 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80118fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011900:	691b      	ldr	r3, [r3, #16]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d016      	beq.n	8011934 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011908:	3310      	adds	r3, #16
 801190a:	4618      	mov	r0, r3
 801190c:	f000 fe7c 	bl	8012608 <xTaskRemoveFromEventList>
 8011910:	4603      	mov	r3, r0
 8011912:	2b00      	cmp	r3, #0
 8011914:	d00e      	beq.n	8011934 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d00b      	beq.n	8011934 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2201      	movs	r2, #1
 8011920:	601a      	str	r2, [r3, #0]
 8011922:	e007      	b.n	8011934 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011928:	3301      	adds	r3, #1
 801192a:	b2db      	uxtb	r3, r3
 801192c:	b25a      	sxtb	r2, r3
 801192e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011934:	2301      	movs	r3, #1
 8011936:	637b      	str	r3, [r7, #52]	; 0x34
 8011938:	e001      	b.n	801193e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801193a:	2300      	movs	r3, #0
 801193c:	637b      	str	r3, [r7, #52]	; 0x34
 801193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011940:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801194a:	4618      	mov	r0, r3
 801194c:	3738      	adds	r7, #56	; 0x38
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}

08011952 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011952:	b580      	push	{r7, lr}
 8011954:	b084      	sub	sp, #16
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d109      	bne.n	8011978 <vQueueDelete+0x26>
	__asm volatile
 8011964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011968:	f383 8811 	msr	BASEPRI, r3
 801196c:	f3bf 8f6f 	isb	sy
 8011970:	f3bf 8f4f 	dsb	sy
 8011974:	60bb      	str	r3, [r7, #8]
 8011976:	e7fe      	b.n	8011976 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011978:	68f8      	ldr	r0, [r7, #12]
 801197a:	f000 f95d 	bl	8011c38 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011984:	2b00      	cmp	r3, #0
 8011986:	d102      	bne.n	801198e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8011988:	68f8      	ldr	r0, [r7, #12]
 801198a:	f002 fa33 	bl	8013df4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801198e:	bf00      	nop
 8011990:	3710      	adds	r7, #16
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}

08011996 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011996:	b480      	push	{r7}
 8011998:	b085      	sub	sp, #20
 801199a:	af00      	add	r7, sp, #0
 801199c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d006      	beq.n	80119b4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80119b0:	60fb      	str	r3, [r7, #12]
 80119b2:	e001      	b.n	80119b8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80119b4:	2300      	movs	r3, #0
 80119b6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80119b8:	68fb      	ldr	r3, [r7, #12]
	}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3714      	adds	r7, #20
 80119be:	46bd      	mov	sp, r7
 80119c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c4:	4770      	bx	lr

080119c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80119c6:	b580      	push	{r7, lr}
 80119c8:	b086      	sub	sp, #24
 80119ca:	af00      	add	r7, sp, #0
 80119cc:	60f8      	str	r0, [r7, #12]
 80119ce:	60b9      	str	r1, [r7, #8]
 80119d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80119d2:	2300      	movs	r3, #0
 80119d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d10d      	bne.n	8011a00 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d14d      	bne.n	8011a88 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	689b      	ldr	r3, [r3, #8]
 80119f0:	4618      	mov	r0, r3
 80119f2:	f001 f87d 	bl	8012af0 <xTaskPriorityDisinherit>
 80119f6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	2200      	movs	r2, #0
 80119fc:	609a      	str	r2, [r3, #8]
 80119fe:	e043      	b.n	8011a88 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d119      	bne.n	8011a3a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	6858      	ldr	r0, [r3, #4]
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a0e:	461a      	mov	r2, r3
 8011a10:	68b9      	ldr	r1, [r7, #8]
 8011a12:	f005 f8ed 	bl	8016bf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	685a      	ldr	r2, [r3, #4]
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a1e:	441a      	add	r2, r3
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	685a      	ldr	r2, [r3, #4]
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	689b      	ldr	r3, [r3, #8]
 8011a2c:	429a      	cmp	r2, r3
 8011a2e:	d32b      	bcc.n	8011a88 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	681a      	ldr	r2, [r3, #0]
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	605a      	str	r2, [r3, #4]
 8011a38:	e026      	b.n	8011a88 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	68d8      	ldr	r0, [r3, #12]
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a42:	461a      	mov	r2, r3
 8011a44:	68b9      	ldr	r1, [r7, #8]
 8011a46:	f005 f8d3 	bl	8016bf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	68da      	ldr	r2, [r3, #12]
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a52:	425b      	negs	r3, r3
 8011a54:	441a      	add	r2, r3
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	68da      	ldr	r2, [r3, #12]
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d207      	bcs.n	8011a76 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	689a      	ldr	r2, [r3, #8]
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a6e:	425b      	negs	r3, r3
 8011a70:	441a      	add	r2, r3
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2b02      	cmp	r3, #2
 8011a7a:	d105      	bne.n	8011a88 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d002      	beq.n	8011a88 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011a82:	693b      	ldr	r3, [r7, #16]
 8011a84:	3b01      	subs	r3, #1
 8011a86:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	1c5a      	adds	r2, r3, #1
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011a90:	697b      	ldr	r3, [r7, #20]
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3718      	adds	r7, #24
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}

08011a9a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011a9a:	b580      	push	{r7, lr}
 8011a9c:	b082      	sub	sp, #8
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	6078      	str	r0, [r7, #4]
 8011aa2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d018      	beq.n	8011ade <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	68da      	ldr	r2, [r3, #12]
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ab4:	441a      	add	r2, r3
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	68da      	ldr	r2, [r3, #12]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	689b      	ldr	r3, [r3, #8]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d303      	bcc.n	8011ace <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681a      	ldr	r2, [r3, #0]
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	68d9      	ldr	r1, [r3, #12]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ad6:	461a      	mov	r2, r3
 8011ad8:	6838      	ldr	r0, [r7, #0]
 8011ada:	f005 f889 	bl	8016bf0 <memcpy>
	}
}
 8011ade:	bf00      	nop
 8011ae0:	3708      	adds	r7, #8
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}

08011ae6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011ae6:	b580      	push	{r7, lr}
 8011ae8:	b084      	sub	sp, #16
 8011aea:	af00      	add	r7, sp, #0
 8011aec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011aee:	f001 ffa5 	bl	8013a3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011af8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011afa:	e011      	b.n	8011b20 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d012      	beq.n	8011b2a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	3324      	adds	r3, #36	; 0x24
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f000 fd7d 	bl	8012608 <xTaskRemoveFromEventList>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d001      	beq.n	8011b18 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011b14:	f000 fe52 	bl	80127bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011b18:	7bfb      	ldrb	r3, [r7, #15]
 8011b1a:	3b01      	subs	r3, #1
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	dce9      	bgt.n	8011afc <prvUnlockQueue+0x16>
 8011b28:	e000      	b.n	8011b2c <prvUnlockQueue+0x46>
					break;
 8011b2a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	22ff      	movs	r2, #255	; 0xff
 8011b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011b34:	f001 ffb0 	bl	8013a98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011b38:	f001 ff80 	bl	8013a3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b42:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011b44:	e011      	b.n	8011b6a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	691b      	ldr	r3, [r3, #16]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d012      	beq.n	8011b74 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	3310      	adds	r3, #16
 8011b52:	4618      	mov	r0, r3
 8011b54:	f000 fd58 	bl	8012608 <xTaskRemoveFromEventList>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d001      	beq.n	8011b62 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011b5e:	f000 fe2d 	bl	80127bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011b62:	7bbb      	ldrb	r3, [r7, #14]
 8011b64:	3b01      	subs	r3, #1
 8011b66:	b2db      	uxtb	r3, r3
 8011b68:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011b6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	dce9      	bgt.n	8011b46 <prvUnlockQueue+0x60>
 8011b72:	e000      	b.n	8011b76 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011b74:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	22ff      	movs	r2, #255	; 0xff
 8011b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011b7e:	f001 ff8b 	bl	8013a98 <vPortExitCritical>
}
 8011b82:	bf00      	nop
 8011b84:	3710      	adds	r7, #16
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}

08011b8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011b8a:	b580      	push	{r7, lr}
 8011b8c:	b084      	sub	sp, #16
 8011b8e:	af00      	add	r7, sp, #0
 8011b90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011b92:	f001 ff53 	bl	8013a3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d102      	bne.n	8011ba4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	60fb      	str	r3, [r7, #12]
 8011ba2:	e001      	b.n	8011ba8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011ba8:	f001 ff76 	bl	8013a98 <vPortExitCritical>

	return xReturn;
 8011bac:	68fb      	ldr	r3, [r7, #12]
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3710      	adds	r7, #16
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}

08011bb6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011bb6:	b580      	push	{r7, lr}
 8011bb8:	b084      	sub	sp, #16
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011bbe:	f001 ff3d 	bl	8013a3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d102      	bne.n	8011bd4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011bce:	2301      	movs	r3, #1
 8011bd0:	60fb      	str	r3, [r7, #12]
 8011bd2:	e001      	b.n	8011bd8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011bd8:	f001 ff5e 	bl	8013a98 <vPortExitCritical>

	return xReturn;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3710      	adds	r7, #16
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
	...

08011be8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011be8:	b480      	push	{r7}
 8011bea:	b085      	sub	sp, #20
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	60fb      	str	r3, [r7, #12]
 8011bf6:	e014      	b.n	8011c22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011bf8:	4a0e      	ldr	r2, [pc, #56]	; (8011c34 <vQueueAddToRegistry+0x4c>)
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d10b      	bne.n	8011c1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011c04:	490b      	ldr	r1, [pc, #44]	; (8011c34 <vQueueAddToRegistry+0x4c>)
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	683a      	ldr	r2, [r7, #0]
 8011c0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011c0e:	4a09      	ldr	r2, [pc, #36]	; (8011c34 <vQueueAddToRegistry+0x4c>)
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	00db      	lsls	r3, r3, #3
 8011c14:	4413      	add	r3, r2
 8011c16:	687a      	ldr	r2, [r7, #4]
 8011c18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011c1a:	e005      	b.n	8011c28 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	3301      	adds	r3, #1
 8011c20:	60fb      	str	r3, [r7, #12]
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2b07      	cmp	r3, #7
 8011c26:	d9e7      	bls.n	8011bf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011c28:	bf00      	nop
 8011c2a:	3714      	adds	r7, #20
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr
 8011c34:	200050ec 	.word	0x200050ec

08011c38 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011c38:	b480      	push	{r7}
 8011c3a:	b085      	sub	sp, #20
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011c40:	2300      	movs	r3, #0
 8011c42:	60fb      	str	r3, [r7, #12]
 8011c44:	e016      	b.n	8011c74 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011c46:	4a10      	ldr	r2, [pc, #64]	; (8011c88 <vQueueUnregisterQueue+0x50>)
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	00db      	lsls	r3, r3, #3
 8011c4c:	4413      	add	r3, r2
 8011c4e:	685b      	ldr	r3, [r3, #4]
 8011c50:	687a      	ldr	r2, [r7, #4]
 8011c52:	429a      	cmp	r2, r3
 8011c54:	d10b      	bne.n	8011c6e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011c56:	4a0c      	ldr	r2, [pc, #48]	; (8011c88 <vQueueUnregisterQueue+0x50>)
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	2100      	movs	r1, #0
 8011c5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011c60:	4a09      	ldr	r2, [pc, #36]	; (8011c88 <vQueueUnregisterQueue+0x50>)
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	00db      	lsls	r3, r3, #3
 8011c66:	4413      	add	r3, r2
 8011c68:	2200      	movs	r2, #0
 8011c6a:	605a      	str	r2, [r3, #4]
				break;
 8011c6c:	e005      	b.n	8011c7a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	3301      	adds	r3, #1
 8011c72:	60fb      	str	r3, [r7, #12]
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	2b07      	cmp	r3, #7
 8011c78:	d9e5      	bls.n	8011c46 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011c7a:	bf00      	nop
 8011c7c:	3714      	adds	r7, #20
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c84:	4770      	bx	lr
 8011c86:	bf00      	nop
 8011c88:	200050ec 	.word	0x200050ec

08011c8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b086      	sub	sp, #24
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	60f8      	str	r0, [r7, #12]
 8011c94:	60b9      	str	r1, [r7, #8]
 8011c96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011c9c:	f001 fece 	bl	8013a3c <vPortEnterCritical>
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ca6:	b25b      	sxtb	r3, r3
 8011ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cac:	d103      	bne.n	8011cb6 <vQueueWaitForMessageRestricted+0x2a>
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011cbc:	b25b      	sxtb	r3, r3
 8011cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cc2:	d103      	bne.n	8011ccc <vQueueWaitForMessageRestricted+0x40>
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011ccc:	f001 fee4 	bl	8013a98 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d106      	bne.n	8011ce6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	3324      	adds	r3, #36	; 0x24
 8011cdc:	687a      	ldr	r2, [r7, #4]
 8011cde:	68b9      	ldr	r1, [r7, #8]
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f000 fc67 	bl	80125b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011ce6:	6978      	ldr	r0, [r7, #20]
 8011ce8:	f7ff fefd 	bl	8011ae6 <prvUnlockQueue>
	}
 8011cec:	bf00      	nop
 8011cee:	3718      	adds	r7, #24
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}

08011cf4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b08e      	sub	sp, #56	; 0x38
 8011cf8:	af04      	add	r7, sp, #16
 8011cfa:	60f8      	str	r0, [r7, #12]
 8011cfc:	60b9      	str	r1, [r7, #8]
 8011cfe:	607a      	str	r2, [r7, #4]
 8011d00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d109      	bne.n	8011d1c <xTaskCreateStatic+0x28>
 8011d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d0c:	f383 8811 	msr	BASEPRI, r3
 8011d10:	f3bf 8f6f 	isb	sy
 8011d14:	f3bf 8f4f 	dsb	sy
 8011d18:	623b      	str	r3, [r7, #32]
 8011d1a:	e7fe      	b.n	8011d1a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d109      	bne.n	8011d36 <xTaskCreateStatic+0x42>
 8011d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d26:	f383 8811 	msr	BASEPRI, r3
 8011d2a:	f3bf 8f6f 	isb	sy
 8011d2e:	f3bf 8f4f 	dsb	sy
 8011d32:	61fb      	str	r3, [r7, #28]
 8011d34:	e7fe      	b.n	8011d34 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011d36:	235c      	movs	r3, #92	; 0x5c
 8011d38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	2b5c      	cmp	r3, #92	; 0x5c
 8011d3e:	d009      	beq.n	8011d54 <xTaskCreateStatic+0x60>
 8011d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d44:	f383 8811 	msr	BASEPRI, r3
 8011d48:	f3bf 8f6f 	isb	sy
 8011d4c:	f3bf 8f4f 	dsb	sy
 8011d50:	61bb      	str	r3, [r7, #24]
 8011d52:	e7fe      	b.n	8011d52 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011d54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d01e      	beq.n	8011d9a <xTaskCreateStatic+0xa6>
 8011d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d01b      	beq.n	8011d9a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d64:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d6a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d6e:	2202      	movs	r2, #2
 8011d70:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011d74:	2300      	movs	r3, #0
 8011d76:	9303      	str	r3, [sp, #12]
 8011d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d7a:	9302      	str	r3, [sp, #8]
 8011d7c:	f107 0314 	add.w	r3, r7, #20
 8011d80:	9301      	str	r3, [sp, #4]
 8011d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d84:	9300      	str	r3, [sp, #0]
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	687a      	ldr	r2, [r7, #4]
 8011d8a:	68b9      	ldr	r1, [r7, #8]
 8011d8c:	68f8      	ldr	r0, [r7, #12]
 8011d8e:	f000 f850 	bl	8011e32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011d92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d94:	f000 f8dc 	bl	8011f50 <prvAddNewTaskToReadyList>
 8011d98:	e001      	b.n	8011d9e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011d9e:	697b      	ldr	r3, [r7, #20]
	}
 8011da0:	4618      	mov	r0, r3
 8011da2:	3728      	adds	r7, #40	; 0x28
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}

08011da8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b08c      	sub	sp, #48	; 0x30
 8011dac:	af04      	add	r7, sp, #16
 8011dae:	60f8      	str	r0, [r7, #12]
 8011db0:	60b9      	str	r1, [r7, #8]
 8011db2:	603b      	str	r3, [r7, #0]
 8011db4:	4613      	mov	r3, r2
 8011db6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011db8:	88fb      	ldrh	r3, [r7, #6]
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f001 ff57 	bl	8013c70 <pvPortMalloc>
 8011dc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011dc4:	697b      	ldr	r3, [r7, #20]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d00e      	beq.n	8011de8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011dca:	205c      	movs	r0, #92	; 0x5c
 8011dcc:	f001 ff50 	bl	8013c70 <pvPortMalloc>
 8011dd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011dd2:	69fb      	ldr	r3, [r7, #28]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d003      	beq.n	8011de0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011dd8:	69fb      	ldr	r3, [r7, #28]
 8011dda:	697a      	ldr	r2, [r7, #20]
 8011ddc:	631a      	str	r2, [r3, #48]	; 0x30
 8011dde:	e005      	b.n	8011dec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011de0:	6978      	ldr	r0, [r7, #20]
 8011de2:	f002 f807 	bl	8013df4 <vPortFree>
 8011de6:	e001      	b.n	8011dec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011de8:	2300      	movs	r3, #0
 8011dea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011dec:	69fb      	ldr	r3, [r7, #28]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d017      	beq.n	8011e22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011df2:	69fb      	ldr	r3, [r7, #28]
 8011df4:	2200      	movs	r2, #0
 8011df6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011dfa:	88fa      	ldrh	r2, [r7, #6]
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	9303      	str	r3, [sp, #12]
 8011e00:	69fb      	ldr	r3, [r7, #28]
 8011e02:	9302      	str	r3, [sp, #8]
 8011e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e06:	9301      	str	r3, [sp, #4]
 8011e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0a:	9300      	str	r3, [sp, #0]
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	68b9      	ldr	r1, [r7, #8]
 8011e10:	68f8      	ldr	r0, [r7, #12]
 8011e12:	f000 f80e 	bl	8011e32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011e16:	69f8      	ldr	r0, [r7, #28]
 8011e18:	f000 f89a 	bl	8011f50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	61bb      	str	r3, [r7, #24]
 8011e20:	e002      	b.n	8011e28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011e22:	f04f 33ff 	mov.w	r3, #4294967295
 8011e26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011e28:	69bb      	ldr	r3, [r7, #24]
	}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3720      	adds	r7, #32
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}

08011e32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011e32:	b580      	push	{r7, lr}
 8011e34:	b088      	sub	sp, #32
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	60f8      	str	r0, [r7, #12]
 8011e3a:	60b9      	str	r1, [r7, #8]
 8011e3c:	607a      	str	r2, [r7, #4]
 8011e3e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	009b      	lsls	r3, r3, #2
 8011e48:	461a      	mov	r2, r3
 8011e4a:	21a5      	movs	r1, #165	; 0xa5
 8011e4c:	f004 fedb 	bl	8016c06 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011e5a:	3b01      	subs	r3, #1
 8011e5c:	009b      	lsls	r3, r3, #2
 8011e5e:	4413      	add	r3, r2
 8011e60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011e62:	69bb      	ldr	r3, [r7, #24]
 8011e64:	f023 0307 	bic.w	r3, r3, #7
 8011e68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011e6a:	69bb      	ldr	r3, [r7, #24]
 8011e6c:	f003 0307 	and.w	r3, r3, #7
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d009      	beq.n	8011e88 <prvInitialiseNewTask+0x56>
 8011e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e78:	f383 8811 	msr	BASEPRI, r3
 8011e7c:	f3bf 8f6f 	isb	sy
 8011e80:	f3bf 8f4f 	dsb	sy
 8011e84:	617b      	str	r3, [r7, #20]
 8011e86:	e7fe      	b.n	8011e86 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d01f      	beq.n	8011ece <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011e8e:	2300      	movs	r3, #0
 8011e90:	61fb      	str	r3, [r7, #28]
 8011e92:	e012      	b.n	8011eba <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011e94:	68ba      	ldr	r2, [r7, #8]
 8011e96:	69fb      	ldr	r3, [r7, #28]
 8011e98:	4413      	add	r3, r2
 8011e9a:	7819      	ldrb	r1, [r3, #0]
 8011e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e9e:	69fb      	ldr	r3, [r7, #28]
 8011ea0:	4413      	add	r3, r2
 8011ea2:	3334      	adds	r3, #52	; 0x34
 8011ea4:	460a      	mov	r2, r1
 8011ea6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011ea8:	68ba      	ldr	r2, [r7, #8]
 8011eaa:	69fb      	ldr	r3, [r7, #28]
 8011eac:	4413      	add	r3, r2
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d006      	beq.n	8011ec2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011eb4:	69fb      	ldr	r3, [r7, #28]
 8011eb6:	3301      	adds	r3, #1
 8011eb8:	61fb      	str	r3, [r7, #28]
 8011eba:	69fb      	ldr	r3, [r7, #28]
 8011ebc:	2b0f      	cmp	r3, #15
 8011ebe:	d9e9      	bls.n	8011e94 <prvInitialiseNewTask+0x62>
 8011ec0:	e000      	b.n	8011ec4 <prvInitialiseNewTask+0x92>
			{
				break;
 8011ec2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011ecc:	e003      	b.n	8011ed6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed8:	2b37      	cmp	r3, #55	; 0x37
 8011eda:	d901      	bls.n	8011ee0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011edc:	2337      	movs	r3, #55	; 0x37
 8011ede:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ee4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011eea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eee:	2200      	movs	r2, #0
 8011ef0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ef4:	3304      	adds	r3, #4
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7fe fdc6 	bl	8010a88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011efe:	3318      	adds	r3, #24
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7fe fdc1 	bl	8010a88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f1e:	2200      	movs	r2, #0
 8011f20:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f24:	2200      	movs	r2, #0
 8011f26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011f2a:	683a      	ldr	r2, [r7, #0]
 8011f2c:	68f9      	ldr	r1, [r7, #12]
 8011f2e:	69b8      	ldr	r0, [r7, #24]
 8011f30:	f001 fc60 	bl	80137f4 <pxPortInitialiseStack>
 8011f34:	4602      	mov	r2, r0
 8011f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d002      	beq.n	8011f46 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011f46:	bf00      	nop
 8011f48:	3720      	adds	r7, #32
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
	...

08011f50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011f58:	f001 fd70 	bl	8013a3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011f5c:	4b2d      	ldr	r3, [pc, #180]	; (8012014 <prvAddNewTaskToReadyList+0xc4>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	3301      	adds	r3, #1
 8011f62:	4a2c      	ldr	r2, [pc, #176]	; (8012014 <prvAddNewTaskToReadyList+0xc4>)
 8011f64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011f66:	4b2c      	ldr	r3, [pc, #176]	; (8012018 <prvAddNewTaskToReadyList+0xc8>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d109      	bne.n	8011f82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011f6e:	4a2a      	ldr	r2, [pc, #168]	; (8012018 <prvAddNewTaskToReadyList+0xc8>)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011f74:	4b27      	ldr	r3, [pc, #156]	; (8012014 <prvAddNewTaskToReadyList+0xc4>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	2b01      	cmp	r3, #1
 8011f7a:	d110      	bne.n	8011f9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011f7c:	f000 fc68 	bl	8012850 <prvInitialiseTaskLists>
 8011f80:	e00d      	b.n	8011f9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011f82:	4b26      	ldr	r3, [pc, #152]	; (801201c <prvAddNewTaskToReadyList+0xcc>)
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d109      	bne.n	8011f9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011f8a:	4b23      	ldr	r3, [pc, #140]	; (8012018 <prvAddNewTaskToReadyList+0xc8>)
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d802      	bhi.n	8011f9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011f98:	4a1f      	ldr	r2, [pc, #124]	; (8012018 <prvAddNewTaskToReadyList+0xc8>)
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011f9e:	4b20      	ldr	r3, [pc, #128]	; (8012020 <prvAddNewTaskToReadyList+0xd0>)
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	3301      	adds	r3, #1
 8011fa4:	4a1e      	ldr	r2, [pc, #120]	; (8012020 <prvAddNewTaskToReadyList+0xd0>)
 8011fa6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011fa8:	4b1d      	ldr	r3, [pc, #116]	; (8012020 <prvAddNewTaskToReadyList+0xd0>)
 8011faa:	681a      	ldr	r2, [r3, #0]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fb4:	4b1b      	ldr	r3, [pc, #108]	; (8012024 <prvAddNewTaskToReadyList+0xd4>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d903      	bls.n	8011fc4 <prvAddNewTaskToReadyList+0x74>
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fc0:	4a18      	ldr	r2, [pc, #96]	; (8012024 <prvAddNewTaskToReadyList+0xd4>)
 8011fc2:	6013      	str	r3, [r2, #0]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fc8:	4613      	mov	r3, r2
 8011fca:	009b      	lsls	r3, r3, #2
 8011fcc:	4413      	add	r3, r2
 8011fce:	009b      	lsls	r3, r3, #2
 8011fd0:	4a15      	ldr	r2, [pc, #84]	; (8012028 <prvAddNewTaskToReadyList+0xd8>)
 8011fd2:	441a      	add	r2, r3
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	3304      	adds	r3, #4
 8011fd8:	4619      	mov	r1, r3
 8011fda:	4610      	mov	r0, r2
 8011fdc:	f7fe fd61 	bl	8010aa2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011fe0:	f001 fd5a 	bl	8013a98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011fe4:	4b0d      	ldr	r3, [pc, #52]	; (801201c <prvAddNewTaskToReadyList+0xcc>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d00e      	beq.n	801200a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011fec:	4b0a      	ldr	r3, [pc, #40]	; (8012018 <prvAddNewTaskToReadyList+0xc8>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	d207      	bcs.n	801200a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011ffa:	4b0c      	ldr	r3, [pc, #48]	; (801202c <prvAddNewTaskToReadyList+0xdc>)
 8011ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012000:	601a      	str	r2, [r3, #0]
 8012002:	f3bf 8f4f 	dsb	sy
 8012006:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801200a:	bf00      	nop
 801200c:	3708      	adds	r7, #8
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}
 8012012:	bf00      	nop
 8012014:	200021ec 	.word	0x200021ec
 8012018:	20001d18 	.word	0x20001d18
 801201c:	200021f8 	.word	0x200021f8
 8012020:	20002208 	.word	0x20002208
 8012024:	200021f4 	.word	0x200021f4
 8012028:	20001d1c 	.word	0x20001d1c
 801202c:	e000ed04 	.word	0xe000ed04

08012030 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012030:	b580      	push	{r7, lr}
 8012032:	b084      	sub	sp, #16
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012038:	2300      	movs	r3, #0
 801203a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d016      	beq.n	8012070 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012042:	4b13      	ldr	r3, [pc, #76]	; (8012090 <vTaskDelay+0x60>)
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d009      	beq.n	801205e <vTaskDelay+0x2e>
 801204a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801204e:	f383 8811 	msr	BASEPRI, r3
 8012052:	f3bf 8f6f 	isb	sy
 8012056:	f3bf 8f4f 	dsb	sy
 801205a:	60bb      	str	r3, [r7, #8]
 801205c:	e7fe      	b.n	801205c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801205e:	f000 f87f 	bl	8012160 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012062:	2100      	movs	r1, #0
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f001 f82b 	bl	80130c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801206a:	f000 f8bf 	bl	80121ec <xTaskResumeAll>
 801206e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d107      	bne.n	8012086 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8012076:	4b07      	ldr	r3, [pc, #28]	; (8012094 <vTaskDelay+0x64>)
 8012078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801207c:	601a      	str	r2, [r3, #0]
 801207e:	f3bf 8f4f 	dsb	sy
 8012082:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012086:	bf00      	nop
 8012088:	3710      	adds	r7, #16
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}
 801208e:	bf00      	nop
 8012090:	20002214 	.word	0x20002214
 8012094:	e000ed04 	.word	0xe000ed04

08012098 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b08a      	sub	sp, #40	; 0x28
 801209c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801209e:	2300      	movs	r3, #0
 80120a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80120a2:	2300      	movs	r3, #0
 80120a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80120a6:	463a      	mov	r2, r7
 80120a8:	1d39      	adds	r1, r7, #4
 80120aa:	f107 0308 	add.w	r3, r7, #8
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7fe fc96 	bl	80109e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80120b4:	6839      	ldr	r1, [r7, #0]
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	68ba      	ldr	r2, [r7, #8]
 80120ba:	9202      	str	r2, [sp, #8]
 80120bc:	9301      	str	r3, [sp, #4]
 80120be:	2300      	movs	r3, #0
 80120c0:	9300      	str	r3, [sp, #0]
 80120c2:	2300      	movs	r3, #0
 80120c4:	460a      	mov	r2, r1
 80120c6:	4920      	ldr	r1, [pc, #128]	; (8012148 <vTaskStartScheduler+0xb0>)
 80120c8:	4820      	ldr	r0, [pc, #128]	; (801214c <vTaskStartScheduler+0xb4>)
 80120ca:	f7ff fe13 	bl	8011cf4 <xTaskCreateStatic>
 80120ce:	4602      	mov	r2, r0
 80120d0:	4b1f      	ldr	r3, [pc, #124]	; (8012150 <vTaskStartScheduler+0xb8>)
 80120d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80120d4:	4b1e      	ldr	r3, [pc, #120]	; (8012150 <vTaskStartScheduler+0xb8>)
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d002      	beq.n	80120e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80120dc:	2301      	movs	r3, #1
 80120de:	617b      	str	r3, [r7, #20]
 80120e0:	e001      	b.n	80120e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80120e2:	2300      	movs	r3, #0
 80120e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	2b01      	cmp	r3, #1
 80120ea:	d102      	bne.n	80120f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80120ec:	f001 f83c 	bl	8013168 <xTimerCreateTimerTask>
 80120f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	2b01      	cmp	r3, #1
 80120f6:	d115      	bne.n	8012124 <vTaskStartScheduler+0x8c>
 80120f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120fc:	f383 8811 	msr	BASEPRI, r3
 8012100:	f3bf 8f6f 	isb	sy
 8012104:	f3bf 8f4f 	dsb	sy
 8012108:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801210a:	4b12      	ldr	r3, [pc, #72]	; (8012154 <vTaskStartScheduler+0xbc>)
 801210c:	f04f 32ff 	mov.w	r2, #4294967295
 8012110:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012112:	4b11      	ldr	r3, [pc, #68]	; (8012158 <vTaskStartScheduler+0xc0>)
 8012114:	2201      	movs	r2, #1
 8012116:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012118:	4b10      	ldr	r3, [pc, #64]	; (801215c <vTaskStartScheduler+0xc4>)
 801211a:	2200      	movs	r2, #0
 801211c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801211e:	f001 fbef 	bl	8013900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012122:	e00d      	b.n	8012140 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	f1b3 3fff 	cmp.w	r3, #4294967295
 801212a:	d109      	bne.n	8012140 <vTaskStartScheduler+0xa8>
 801212c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012130:	f383 8811 	msr	BASEPRI, r3
 8012134:	f3bf 8f6f 	isb	sy
 8012138:	f3bf 8f4f 	dsb	sy
 801213c:	60fb      	str	r3, [r7, #12]
 801213e:	e7fe      	b.n	801213e <vTaskStartScheduler+0xa6>
}
 8012140:	bf00      	nop
 8012142:	3718      	adds	r7, #24
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	08016cf8 	.word	0x08016cf8
 801214c:	080127d5 	.word	0x080127d5
 8012150:	20002210 	.word	0x20002210
 8012154:	2000220c 	.word	0x2000220c
 8012158:	200021f8 	.word	0x200021f8
 801215c:	200021f0 	.word	0x200021f0

08012160 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012160:	b480      	push	{r7}
 8012162:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012164:	4b04      	ldr	r3, [pc, #16]	; (8012178 <vTaskSuspendAll+0x18>)
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	3301      	adds	r3, #1
 801216a:	4a03      	ldr	r2, [pc, #12]	; (8012178 <vTaskSuspendAll+0x18>)
 801216c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801216e:	bf00      	nop
 8012170:	46bd      	mov	sp, r7
 8012172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012176:	4770      	bx	lr
 8012178:	20002214 	.word	0x20002214

0801217c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 801217c:	b480      	push	{r7}
 801217e:	b083      	sub	sp, #12
 8012180:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8012182:	2300      	movs	r3, #0
 8012184:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8012186:	4b14      	ldr	r3, [pc, #80]	; (80121d8 <prvGetExpectedIdleTime+0x5c>)
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d001      	beq.n	8012192 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 801218e:	2301      	movs	r3, #1
 8012190:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8012192:	4b12      	ldr	r3, [pc, #72]	; (80121dc <prvGetExpectedIdleTime+0x60>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012198:	2b00      	cmp	r3, #0
 801219a:	d002      	beq.n	80121a2 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 801219c:	2300      	movs	r3, #0
 801219e:	607b      	str	r3, [r7, #4]
 80121a0:	e012      	b.n	80121c8 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80121a2:	4b0f      	ldr	r3, [pc, #60]	; (80121e0 <prvGetExpectedIdleTime+0x64>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	2b01      	cmp	r3, #1
 80121a8:	d902      	bls.n	80121b0 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 80121aa:	2300      	movs	r3, #0
 80121ac:	607b      	str	r3, [r7, #4]
 80121ae:	e00b      	b.n	80121c8 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d002      	beq.n	80121bc <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 80121b6:	2300      	movs	r3, #0
 80121b8:	607b      	str	r3, [r7, #4]
 80121ba:	e005      	b.n	80121c8 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 80121bc:	4b09      	ldr	r3, [pc, #36]	; (80121e4 <prvGetExpectedIdleTime+0x68>)
 80121be:	681a      	ldr	r2, [r3, #0]
 80121c0:	4b09      	ldr	r3, [pc, #36]	; (80121e8 <prvGetExpectedIdleTime+0x6c>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	1ad3      	subs	r3, r2, r3
 80121c6:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 80121c8:	687b      	ldr	r3, [r7, #4]
	}
 80121ca:	4618      	mov	r0, r3
 80121cc:	370c      	adds	r7, #12
 80121ce:	46bd      	mov	sp, r7
 80121d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d4:	4770      	bx	lr
 80121d6:	bf00      	nop
 80121d8:	200021f4 	.word	0x200021f4
 80121dc:	20001d18 	.word	0x20001d18
 80121e0:	20001d1c 	.word	0x20001d1c
 80121e4:	2000220c 	.word	0x2000220c
 80121e8:	200021f0 	.word	0x200021f0

080121ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b084      	sub	sp, #16
 80121f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80121f2:	2300      	movs	r3, #0
 80121f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80121f6:	2300      	movs	r3, #0
 80121f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80121fa:	4b41      	ldr	r3, [pc, #260]	; (8012300 <xTaskResumeAll+0x114>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d109      	bne.n	8012216 <xTaskResumeAll+0x2a>
 8012202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012206:	f383 8811 	msr	BASEPRI, r3
 801220a:	f3bf 8f6f 	isb	sy
 801220e:	f3bf 8f4f 	dsb	sy
 8012212:	603b      	str	r3, [r7, #0]
 8012214:	e7fe      	b.n	8012214 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012216:	f001 fc11 	bl	8013a3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801221a:	4b39      	ldr	r3, [pc, #228]	; (8012300 <xTaskResumeAll+0x114>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	3b01      	subs	r3, #1
 8012220:	4a37      	ldr	r2, [pc, #220]	; (8012300 <xTaskResumeAll+0x114>)
 8012222:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012224:	4b36      	ldr	r3, [pc, #216]	; (8012300 <xTaskResumeAll+0x114>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d162      	bne.n	80122f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801222c:	4b35      	ldr	r3, [pc, #212]	; (8012304 <xTaskResumeAll+0x118>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d05e      	beq.n	80122f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012234:	e02f      	b.n	8012296 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012236:	4b34      	ldr	r3, [pc, #208]	; (8012308 <xTaskResumeAll+0x11c>)
 8012238:	68db      	ldr	r3, [r3, #12]
 801223a:	68db      	ldr	r3, [r3, #12]
 801223c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	3318      	adds	r3, #24
 8012242:	4618      	mov	r0, r3
 8012244:	f7fe fc8a 	bl	8010b5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	3304      	adds	r3, #4
 801224c:	4618      	mov	r0, r3
 801224e:	f7fe fc85 	bl	8010b5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012256:	4b2d      	ldr	r3, [pc, #180]	; (801230c <xTaskResumeAll+0x120>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	429a      	cmp	r2, r3
 801225c:	d903      	bls.n	8012266 <xTaskResumeAll+0x7a>
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012262:	4a2a      	ldr	r2, [pc, #168]	; (801230c <xTaskResumeAll+0x120>)
 8012264:	6013      	str	r3, [r2, #0]
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801226a:	4613      	mov	r3, r2
 801226c:	009b      	lsls	r3, r3, #2
 801226e:	4413      	add	r3, r2
 8012270:	009b      	lsls	r3, r3, #2
 8012272:	4a27      	ldr	r2, [pc, #156]	; (8012310 <xTaskResumeAll+0x124>)
 8012274:	441a      	add	r2, r3
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	3304      	adds	r3, #4
 801227a:	4619      	mov	r1, r3
 801227c:	4610      	mov	r0, r2
 801227e:	f7fe fc10 	bl	8010aa2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012286:	4b23      	ldr	r3, [pc, #140]	; (8012314 <xTaskResumeAll+0x128>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801228c:	429a      	cmp	r2, r3
 801228e:	d302      	bcc.n	8012296 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012290:	4b21      	ldr	r3, [pc, #132]	; (8012318 <xTaskResumeAll+0x12c>)
 8012292:	2201      	movs	r2, #1
 8012294:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012296:	4b1c      	ldr	r3, [pc, #112]	; (8012308 <xTaskResumeAll+0x11c>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d1cb      	bne.n	8012236 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d001      	beq.n	80122a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80122a4:	f000 fb6e 	bl	8012984 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80122a8:	4b1c      	ldr	r3, [pc, #112]	; (801231c <xTaskResumeAll+0x130>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d010      	beq.n	80122d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80122b4:	f000 f846 	bl	8012344 <xTaskIncrementTick>
 80122b8:	4603      	mov	r3, r0
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d002      	beq.n	80122c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80122be:	4b16      	ldr	r3, [pc, #88]	; (8012318 <xTaskResumeAll+0x12c>)
 80122c0:	2201      	movs	r2, #1
 80122c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	3b01      	subs	r3, #1
 80122c8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d1f1      	bne.n	80122b4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80122d0:	4b12      	ldr	r3, [pc, #72]	; (801231c <xTaskResumeAll+0x130>)
 80122d2:	2200      	movs	r2, #0
 80122d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80122d6:	4b10      	ldr	r3, [pc, #64]	; (8012318 <xTaskResumeAll+0x12c>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d009      	beq.n	80122f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80122de:	2301      	movs	r3, #1
 80122e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80122e2:	4b0f      	ldr	r3, [pc, #60]	; (8012320 <xTaskResumeAll+0x134>)
 80122e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122e8:	601a      	str	r2, [r3, #0]
 80122ea:	f3bf 8f4f 	dsb	sy
 80122ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80122f2:	f001 fbd1 	bl	8013a98 <vPortExitCritical>

	return xAlreadyYielded;
 80122f6:	68bb      	ldr	r3, [r7, #8]
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3710      	adds	r7, #16
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	20002214 	.word	0x20002214
 8012304:	200021ec 	.word	0x200021ec
 8012308:	200021ac 	.word	0x200021ac
 801230c:	200021f4 	.word	0x200021f4
 8012310:	20001d1c 	.word	0x20001d1c
 8012314:	20001d18 	.word	0x20001d18
 8012318:	20002200 	.word	0x20002200
 801231c:	200021fc 	.word	0x200021fc
 8012320:	e000ed04 	.word	0xe000ed04

08012324 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012324:	b480      	push	{r7}
 8012326:	b083      	sub	sp, #12
 8012328:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801232a:	4b05      	ldr	r3, [pc, #20]	; (8012340 <xTaskGetTickCount+0x1c>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012330:	687b      	ldr	r3, [r7, #4]
}
 8012332:	4618      	mov	r0, r3
 8012334:	370c      	adds	r7, #12
 8012336:	46bd      	mov	sp, r7
 8012338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233c:	4770      	bx	lr
 801233e:	bf00      	nop
 8012340:	200021f0 	.word	0x200021f0

08012344 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b086      	sub	sp, #24
 8012348:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801234a:	2300      	movs	r3, #0
 801234c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801234e:	4b4e      	ldr	r3, [pc, #312]	; (8012488 <xTaskIncrementTick+0x144>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	2b00      	cmp	r3, #0
 8012354:	f040 8088 	bne.w	8012468 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012358:	4b4c      	ldr	r3, [pc, #304]	; (801248c <xTaskIncrementTick+0x148>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	3301      	adds	r3, #1
 801235e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012360:	4a4a      	ldr	r2, [pc, #296]	; (801248c <xTaskIncrementTick+0x148>)
 8012362:	693b      	ldr	r3, [r7, #16]
 8012364:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012366:	693b      	ldr	r3, [r7, #16]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d11f      	bne.n	80123ac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801236c:	4b48      	ldr	r3, [pc, #288]	; (8012490 <xTaskIncrementTick+0x14c>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d009      	beq.n	801238a <xTaskIncrementTick+0x46>
 8012376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801237a:	f383 8811 	msr	BASEPRI, r3
 801237e:	f3bf 8f6f 	isb	sy
 8012382:	f3bf 8f4f 	dsb	sy
 8012386:	603b      	str	r3, [r7, #0]
 8012388:	e7fe      	b.n	8012388 <xTaskIncrementTick+0x44>
 801238a:	4b41      	ldr	r3, [pc, #260]	; (8012490 <xTaskIncrementTick+0x14c>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	60fb      	str	r3, [r7, #12]
 8012390:	4b40      	ldr	r3, [pc, #256]	; (8012494 <xTaskIncrementTick+0x150>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	4a3e      	ldr	r2, [pc, #248]	; (8012490 <xTaskIncrementTick+0x14c>)
 8012396:	6013      	str	r3, [r2, #0]
 8012398:	4a3e      	ldr	r2, [pc, #248]	; (8012494 <xTaskIncrementTick+0x150>)
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	6013      	str	r3, [r2, #0]
 801239e:	4b3e      	ldr	r3, [pc, #248]	; (8012498 <xTaskIncrementTick+0x154>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	3301      	adds	r3, #1
 80123a4:	4a3c      	ldr	r2, [pc, #240]	; (8012498 <xTaskIncrementTick+0x154>)
 80123a6:	6013      	str	r3, [r2, #0]
 80123a8:	f000 faec 	bl	8012984 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80123ac:	4b3b      	ldr	r3, [pc, #236]	; (801249c <xTaskIncrementTick+0x158>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	693a      	ldr	r2, [r7, #16]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d349      	bcc.n	801244a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123b6:	4b36      	ldr	r3, [pc, #216]	; (8012490 <xTaskIncrementTick+0x14c>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d104      	bne.n	80123ca <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123c0:	4b36      	ldr	r3, [pc, #216]	; (801249c <xTaskIncrementTick+0x158>)
 80123c2:	f04f 32ff 	mov.w	r2, #4294967295
 80123c6:	601a      	str	r2, [r3, #0]
					break;
 80123c8:	e03f      	b.n	801244a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123ca:	4b31      	ldr	r3, [pc, #196]	; (8012490 <xTaskIncrementTick+0x14c>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	68db      	ldr	r3, [r3, #12]
 80123d0:	68db      	ldr	r3, [r3, #12]
 80123d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	685b      	ldr	r3, [r3, #4]
 80123d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80123da:	693a      	ldr	r2, [r7, #16]
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	429a      	cmp	r2, r3
 80123e0:	d203      	bcs.n	80123ea <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80123e2:	4a2e      	ldr	r2, [pc, #184]	; (801249c <xTaskIncrementTick+0x158>)
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80123e8:	e02f      	b.n	801244a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	3304      	adds	r3, #4
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7fe fbb4 	bl	8010b5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80123f4:	68bb      	ldr	r3, [r7, #8]
 80123f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d004      	beq.n	8012406 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	3318      	adds	r3, #24
 8012400:	4618      	mov	r0, r3
 8012402:	f7fe fbab 	bl	8010b5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012406:	68bb      	ldr	r3, [r7, #8]
 8012408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801240a:	4b25      	ldr	r3, [pc, #148]	; (80124a0 <xTaskIncrementTick+0x15c>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	429a      	cmp	r2, r3
 8012410:	d903      	bls.n	801241a <xTaskIncrementTick+0xd6>
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012416:	4a22      	ldr	r2, [pc, #136]	; (80124a0 <xTaskIncrementTick+0x15c>)
 8012418:	6013      	str	r3, [r2, #0]
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801241e:	4613      	mov	r3, r2
 8012420:	009b      	lsls	r3, r3, #2
 8012422:	4413      	add	r3, r2
 8012424:	009b      	lsls	r3, r3, #2
 8012426:	4a1f      	ldr	r2, [pc, #124]	; (80124a4 <xTaskIncrementTick+0x160>)
 8012428:	441a      	add	r2, r3
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	3304      	adds	r3, #4
 801242e:	4619      	mov	r1, r3
 8012430:	4610      	mov	r0, r2
 8012432:	f7fe fb36 	bl	8010aa2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801243a:	4b1b      	ldr	r3, [pc, #108]	; (80124a8 <xTaskIncrementTick+0x164>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012440:	429a      	cmp	r2, r3
 8012442:	d3b8      	bcc.n	80123b6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8012444:	2301      	movs	r3, #1
 8012446:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012448:	e7b5      	b.n	80123b6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801244a:	4b17      	ldr	r3, [pc, #92]	; (80124a8 <xTaskIncrementTick+0x164>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012450:	4914      	ldr	r1, [pc, #80]	; (80124a4 <xTaskIncrementTick+0x160>)
 8012452:	4613      	mov	r3, r2
 8012454:	009b      	lsls	r3, r3, #2
 8012456:	4413      	add	r3, r2
 8012458:	009b      	lsls	r3, r3, #2
 801245a:	440b      	add	r3, r1
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	2b01      	cmp	r3, #1
 8012460:	d907      	bls.n	8012472 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8012462:	2301      	movs	r3, #1
 8012464:	617b      	str	r3, [r7, #20]
 8012466:	e004      	b.n	8012472 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012468:	4b10      	ldr	r3, [pc, #64]	; (80124ac <xTaskIncrementTick+0x168>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	3301      	adds	r3, #1
 801246e:	4a0f      	ldr	r2, [pc, #60]	; (80124ac <xTaskIncrementTick+0x168>)
 8012470:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012472:	4b0f      	ldr	r3, [pc, #60]	; (80124b0 <xTaskIncrementTick+0x16c>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d001      	beq.n	801247e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801247a:	2301      	movs	r3, #1
 801247c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801247e:	697b      	ldr	r3, [r7, #20]
}
 8012480:	4618      	mov	r0, r3
 8012482:	3718      	adds	r7, #24
 8012484:	46bd      	mov	sp, r7
 8012486:	bd80      	pop	{r7, pc}
 8012488:	20002214 	.word	0x20002214
 801248c:	200021f0 	.word	0x200021f0
 8012490:	200021a4 	.word	0x200021a4
 8012494:	200021a8 	.word	0x200021a8
 8012498:	20002204 	.word	0x20002204
 801249c:	2000220c 	.word	0x2000220c
 80124a0:	200021f4 	.word	0x200021f4
 80124a4:	20001d1c 	.word	0x20001d1c
 80124a8:	20001d18 	.word	0x20001d18
 80124ac:	200021fc 	.word	0x200021fc
 80124b0:	20002200 	.word	0x20002200

080124b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80124b4:	b480      	push	{r7}
 80124b6:	b085      	sub	sp, #20
 80124b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80124ba:	4b27      	ldr	r3, [pc, #156]	; (8012558 <vTaskSwitchContext+0xa4>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d003      	beq.n	80124ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80124c2:	4b26      	ldr	r3, [pc, #152]	; (801255c <vTaskSwitchContext+0xa8>)
 80124c4:	2201      	movs	r2, #1
 80124c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80124c8:	e040      	b.n	801254c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80124ca:	4b24      	ldr	r3, [pc, #144]	; (801255c <vTaskSwitchContext+0xa8>)
 80124cc:	2200      	movs	r2, #0
 80124ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124d0:	4b23      	ldr	r3, [pc, #140]	; (8012560 <vTaskSwitchContext+0xac>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	60fb      	str	r3, [r7, #12]
 80124d6:	e00f      	b.n	80124f8 <vTaskSwitchContext+0x44>
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d109      	bne.n	80124f2 <vTaskSwitchContext+0x3e>
 80124de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124e2:	f383 8811 	msr	BASEPRI, r3
 80124e6:	f3bf 8f6f 	isb	sy
 80124ea:	f3bf 8f4f 	dsb	sy
 80124ee:	607b      	str	r3, [r7, #4]
 80124f0:	e7fe      	b.n	80124f0 <vTaskSwitchContext+0x3c>
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	3b01      	subs	r3, #1
 80124f6:	60fb      	str	r3, [r7, #12]
 80124f8:	491a      	ldr	r1, [pc, #104]	; (8012564 <vTaskSwitchContext+0xb0>)
 80124fa:	68fa      	ldr	r2, [r7, #12]
 80124fc:	4613      	mov	r3, r2
 80124fe:	009b      	lsls	r3, r3, #2
 8012500:	4413      	add	r3, r2
 8012502:	009b      	lsls	r3, r3, #2
 8012504:	440b      	add	r3, r1
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d0e5      	beq.n	80124d8 <vTaskSwitchContext+0x24>
 801250c:	68fa      	ldr	r2, [r7, #12]
 801250e:	4613      	mov	r3, r2
 8012510:	009b      	lsls	r3, r3, #2
 8012512:	4413      	add	r3, r2
 8012514:	009b      	lsls	r3, r3, #2
 8012516:	4a13      	ldr	r2, [pc, #76]	; (8012564 <vTaskSwitchContext+0xb0>)
 8012518:	4413      	add	r3, r2
 801251a:	60bb      	str	r3, [r7, #8]
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	685b      	ldr	r3, [r3, #4]
 8012520:	685a      	ldr	r2, [r3, #4]
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	605a      	str	r2, [r3, #4]
 8012526:	68bb      	ldr	r3, [r7, #8]
 8012528:	685a      	ldr	r2, [r3, #4]
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	3308      	adds	r3, #8
 801252e:	429a      	cmp	r2, r3
 8012530:	d104      	bne.n	801253c <vTaskSwitchContext+0x88>
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	685a      	ldr	r2, [r3, #4]
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	605a      	str	r2, [r3, #4]
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	685b      	ldr	r3, [r3, #4]
 8012540:	68db      	ldr	r3, [r3, #12]
 8012542:	4a09      	ldr	r2, [pc, #36]	; (8012568 <vTaskSwitchContext+0xb4>)
 8012544:	6013      	str	r3, [r2, #0]
 8012546:	4a06      	ldr	r2, [pc, #24]	; (8012560 <vTaskSwitchContext+0xac>)
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	6013      	str	r3, [r2, #0]
}
 801254c:	bf00      	nop
 801254e:	3714      	adds	r7, #20
 8012550:	46bd      	mov	sp, r7
 8012552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012556:	4770      	bx	lr
 8012558:	20002214 	.word	0x20002214
 801255c:	20002200 	.word	0x20002200
 8012560:	200021f4 	.word	0x200021f4
 8012564:	20001d1c 	.word	0x20001d1c
 8012568:	20001d18 	.word	0x20001d18

0801256c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b084      	sub	sp, #16
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d109      	bne.n	8012590 <vTaskPlaceOnEventList+0x24>
 801257c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012580:	f383 8811 	msr	BASEPRI, r3
 8012584:	f3bf 8f6f 	isb	sy
 8012588:	f3bf 8f4f 	dsb	sy
 801258c:	60fb      	str	r3, [r7, #12]
 801258e:	e7fe      	b.n	801258e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012590:	4b07      	ldr	r3, [pc, #28]	; (80125b0 <vTaskPlaceOnEventList+0x44>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	3318      	adds	r3, #24
 8012596:	4619      	mov	r1, r3
 8012598:	6878      	ldr	r0, [r7, #4]
 801259a:	f7fe faa6 	bl	8010aea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801259e:	2101      	movs	r1, #1
 80125a0:	6838      	ldr	r0, [r7, #0]
 80125a2:	f000 fd8d 	bl	80130c0 <prvAddCurrentTaskToDelayedList>
}
 80125a6:	bf00      	nop
 80125a8:	3710      	adds	r7, #16
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	bf00      	nop
 80125b0:	20001d18 	.word	0x20001d18

080125b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b086      	sub	sp, #24
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	60f8      	str	r0, [r7, #12]
 80125bc:	60b9      	str	r1, [r7, #8]
 80125be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d109      	bne.n	80125da <vTaskPlaceOnEventListRestricted+0x26>
 80125c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ca:	f383 8811 	msr	BASEPRI, r3
 80125ce:	f3bf 8f6f 	isb	sy
 80125d2:	f3bf 8f4f 	dsb	sy
 80125d6:	617b      	str	r3, [r7, #20]
 80125d8:	e7fe      	b.n	80125d8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80125da:	4b0a      	ldr	r3, [pc, #40]	; (8012604 <vTaskPlaceOnEventListRestricted+0x50>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	3318      	adds	r3, #24
 80125e0:	4619      	mov	r1, r3
 80125e2:	68f8      	ldr	r0, [r7, #12]
 80125e4:	f7fe fa5d 	bl	8010aa2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d002      	beq.n	80125f4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80125ee:	f04f 33ff 	mov.w	r3, #4294967295
 80125f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80125f4:	6879      	ldr	r1, [r7, #4]
 80125f6:	68b8      	ldr	r0, [r7, #8]
 80125f8:	f000 fd62 	bl	80130c0 <prvAddCurrentTaskToDelayedList>
	}
 80125fc:	bf00      	nop
 80125fe:	3718      	adds	r7, #24
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}
 8012604:	20001d18 	.word	0x20001d18

08012608 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b086      	sub	sp, #24
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	68db      	ldr	r3, [r3, #12]
 8012614:	68db      	ldr	r3, [r3, #12]
 8012616:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d109      	bne.n	8012632 <xTaskRemoveFromEventList+0x2a>
 801261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012622:	f383 8811 	msr	BASEPRI, r3
 8012626:	f3bf 8f6f 	isb	sy
 801262a:	f3bf 8f4f 	dsb	sy
 801262e:	60fb      	str	r3, [r7, #12]
 8012630:	e7fe      	b.n	8012630 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012632:	693b      	ldr	r3, [r7, #16]
 8012634:	3318      	adds	r3, #24
 8012636:	4618      	mov	r0, r3
 8012638:	f7fe fa90 	bl	8010b5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801263c:	4b1e      	ldr	r3, [pc, #120]	; (80126b8 <xTaskRemoveFromEventList+0xb0>)
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d11f      	bne.n	8012684 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012644:	693b      	ldr	r3, [r7, #16]
 8012646:	3304      	adds	r3, #4
 8012648:	4618      	mov	r0, r3
 801264a:	f7fe fa87 	bl	8010b5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801264e:	693b      	ldr	r3, [r7, #16]
 8012650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012652:	4b1a      	ldr	r3, [pc, #104]	; (80126bc <xTaskRemoveFromEventList+0xb4>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	429a      	cmp	r2, r3
 8012658:	d903      	bls.n	8012662 <xTaskRemoveFromEventList+0x5a>
 801265a:	693b      	ldr	r3, [r7, #16]
 801265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801265e:	4a17      	ldr	r2, [pc, #92]	; (80126bc <xTaskRemoveFromEventList+0xb4>)
 8012660:	6013      	str	r3, [r2, #0]
 8012662:	693b      	ldr	r3, [r7, #16]
 8012664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012666:	4613      	mov	r3, r2
 8012668:	009b      	lsls	r3, r3, #2
 801266a:	4413      	add	r3, r2
 801266c:	009b      	lsls	r3, r3, #2
 801266e:	4a14      	ldr	r2, [pc, #80]	; (80126c0 <xTaskRemoveFromEventList+0xb8>)
 8012670:	441a      	add	r2, r3
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	3304      	adds	r3, #4
 8012676:	4619      	mov	r1, r3
 8012678:	4610      	mov	r0, r2
 801267a:	f7fe fa12 	bl	8010aa2 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 801267e:	f000 f981 	bl	8012984 <prvResetNextTaskUnblockTime>
 8012682:	e005      	b.n	8012690 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012684:	693b      	ldr	r3, [r7, #16]
 8012686:	3318      	adds	r3, #24
 8012688:	4619      	mov	r1, r3
 801268a:	480e      	ldr	r0, [pc, #56]	; (80126c4 <xTaskRemoveFromEventList+0xbc>)
 801268c:	f7fe fa09 	bl	8010aa2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012690:	693b      	ldr	r3, [r7, #16]
 8012692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012694:	4b0c      	ldr	r3, [pc, #48]	; (80126c8 <xTaskRemoveFromEventList+0xc0>)
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801269a:	429a      	cmp	r2, r3
 801269c:	d905      	bls.n	80126aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801269e:	2301      	movs	r3, #1
 80126a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80126a2:	4b0a      	ldr	r3, [pc, #40]	; (80126cc <xTaskRemoveFromEventList+0xc4>)
 80126a4:	2201      	movs	r2, #1
 80126a6:	601a      	str	r2, [r3, #0]
 80126a8:	e001      	b.n	80126ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80126aa:	2300      	movs	r3, #0
 80126ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80126ae:	697b      	ldr	r3, [r7, #20]
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3718      	adds	r7, #24
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	20002214 	.word	0x20002214
 80126bc:	200021f4 	.word	0x200021f4
 80126c0:	20001d1c 	.word	0x20001d1c
 80126c4:	200021ac 	.word	0x200021ac
 80126c8:	20001d18 	.word	0x20001d18
 80126cc:	20002200 	.word	0x20002200

080126d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80126d0:	b480      	push	{r7}
 80126d2:	b083      	sub	sp, #12
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80126d8:	4b06      	ldr	r3, [pc, #24]	; (80126f4 <vTaskInternalSetTimeOutState+0x24>)
 80126da:	681a      	ldr	r2, [r3, #0]
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80126e0:	4b05      	ldr	r3, [pc, #20]	; (80126f8 <vTaskInternalSetTimeOutState+0x28>)
 80126e2:	681a      	ldr	r2, [r3, #0]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	605a      	str	r2, [r3, #4]
}
 80126e8:	bf00      	nop
 80126ea:	370c      	adds	r7, #12
 80126ec:	46bd      	mov	sp, r7
 80126ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f2:	4770      	bx	lr
 80126f4:	20002204 	.word	0x20002204
 80126f8:	200021f0 	.word	0x200021f0

080126fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b088      	sub	sp, #32
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d109      	bne.n	8012720 <xTaskCheckForTimeOut+0x24>
 801270c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012710:	f383 8811 	msr	BASEPRI, r3
 8012714:	f3bf 8f6f 	isb	sy
 8012718:	f3bf 8f4f 	dsb	sy
 801271c:	613b      	str	r3, [r7, #16]
 801271e:	e7fe      	b.n	801271e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d109      	bne.n	801273a <xTaskCheckForTimeOut+0x3e>
 8012726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801272a:	f383 8811 	msr	BASEPRI, r3
 801272e:	f3bf 8f6f 	isb	sy
 8012732:	f3bf 8f4f 	dsb	sy
 8012736:	60fb      	str	r3, [r7, #12]
 8012738:	e7fe      	b.n	8012738 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801273a:	f001 f97f 	bl	8013a3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801273e:	4b1d      	ldr	r3, [pc, #116]	; (80127b4 <xTaskCheckForTimeOut+0xb8>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	685b      	ldr	r3, [r3, #4]
 8012748:	69ba      	ldr	r2, [r7, #24]
 801274a:	1ad3      	subs	r3, r2, r3
 801274c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012756:	d102      	bne.n	801275e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012758:	2300      	movs	r3, #0
 801275a:	61fb      	str	r3, [r7, #28]
 801275c:	e023      	b.n	80127a6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681a      	ldr	r2, [r3, #0]
 8012762:	4b15      	ldr	r3, [pc, #84]	; (80127b8 <xTaskCheckForTimeOut+0xbc>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	429a      	cmp	r2, r3
 8012768:	d007      	beq.n	801277a <xTaskCheckForTimeOut+0x7e>
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	685b      	ldr	r3, [r3, #4]
 801276e:	69ba      	ldr	r2, [r7, #24]
 8012770:	429a      	cmp	r2, r3
 8012772:	d302      	bcc.n	801277a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012774:	2301      	movs	r3, #1
 8012776:	61fb      	str	r3, [r7, #28]
 8012778:	e015      	b.n	80127a6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	697a      	ldr	r2, [r7, #20]
 8012780:	429a      	cmp	r2, r3
 8012782:	d20b      	bcs.n	801279c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	681a      	ldr	r2, [r3, #0]
 8012788:	697b      	ldr	r3, [r7, #20]
 801278a:	1ad2      	subs	r2, r2, r3
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f7ff ff9d 	bl	80126d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012796:	2300      	movs	r3, #0
 8012798:	61fb      	str	r3, [r7, #28]
 801279a:	e004      	b.n	80127a6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	2200      	movs	r2, #0
 80127a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80127a2:	2301      	movs	r3, #1
 80127a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80127a6:	f001 f977 	bl	8013a98 <vPortExitCritical>

	return xReturn;
 80127aa:	69fb      	ldr	r3, [r7, #28]
}
 80127ac:	4618      	mov	r0, r3
 80127ae:	3720      	adds	r7, #32
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}
 80127b4:	200021f0 	.word	0x200021f0
 80127b8:	20002204 	.word	0x20002204

080127bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80127bc:	b480      	push	{r7}
 80127be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80127c0:	4b03      	ldr	r3, [pc, #12]	; (80127d0 <vTaskMissedYield+0x14>)
 80127c2:	2201      	movs	r2, #1
 80127c4:	601a      	str	r2, [r3, #0]
}
 80127c6:	bf00      	nop
 80127c8:	46bd      	mov	sp, r7
 80127ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ce:	4770      	bx	lr
 80127d0:	20002200 	.word	0x20002200

080127d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b084      	sub	sp, #16
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80127dc:	f000 f878 	bl	80128d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80127e0:	4b17      	ldr	r3, [pc, #92]	; (8012840 <prvIdleTask+0x6c>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	2b01      	cmp	r3, #1
 80127e6:	d907      	bls.n	80127f8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80127e8:	4b16      	ldr	r3, [pc, #88]	; (8012844 <prvIdleTask+0x70>)
 80127ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127ee:	601a      	str	r2, [r3, #0]
 80127f0:	f3bf 8f4f 	dsb	sy
 80127f4:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80127f8:	f7ff fcc0 	bl	801217c <prvGetExpectedIdleTime>
 80127fc:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	2b01      	cmp	r3, #1
 8012802:	d9eb      	bls.n	80127dc <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8012804:	f7ff fcac 	bl	8012160 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8012808:	4b0f      	ldr	r3, [pc, #60]	; (8012848 <prvIdleTask+0x74>)
 801280a:	681a      	ldr	r2, [r3, #0]
 801280c:	4b0f      	ldr	r3, [pc, #60]	; (801284c <prvIdleTask+0x78>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	429a      	cmp	r2, r3
 8012812:	d209      	bcs.n	8012828 <prvIdleTask+0x54>
 8012814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012818:	f383 8811 	msr	BASEPRI, r3
 801281c:	f3bf 8f6f 	isb	sy
 8012820:	f3bf 8f4f 	dsb	sy
 8012824:	60bb      	str	r3, [r7, #8]
 8012826:	e7fe      	b.n	8012826 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8012828:	f7ff fca8 	bl	801217c <prvGetExpectedIdleTime>
 801282c:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	2b01      	cmp	r3, #1
 8012832:	d902      	bls.n	801283a <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8012834:	68f8      	ldr	r0, [r7, #12]
 8012836:	f7ef fcb6 	bl	80021a6 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 801283a:	f7ff fcd7 	bl	80121ec <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 801283e:	e7cd      	b.n	80127dc <prvIdleTask+0x8>
 8012840:	20001d1c 	.word	0x20001d1c
 8012844:	e000ed04 	.word	0xe000ed04
 8012848:	2000220c 	.word	0x2000220c
 801284c:	200021f0 	.word	0x200021f0

08012850 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b082      	sub	sp, #8
 8012854:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012856:	2300      	movs	r3, #0
 8012858:	607b      	str	r3, [r7, #4]
 801285a:	e00c      	b.n	8012876 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801285c:	687a      	ldr	r2, [r7, #4]
 801285e:	4613      	mov	r3, r2
 8012860:	009b      	lsls	r3, r3, #2
 8012862:	4413      	add	r3, r2
 8012864:	009b      	lsls	r3, r3, #2
 8012866:	4a12      	ldr	r2, [pc, #72]	; (80128b0 <prvInitialiseTaskLists+0x60>)
 8012868:	4413      	add	r3, r2
 801286a:	4618      	mov	r0, r3
 801286c:	f7fe f8ec 	bl	8010a48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	3301      	adds	r3, #1
 8012874:	607b      	str	r3, [r7, #4]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2b37      	cmp	r3, #55	; 0x37
 801287a:	d9ef      	bls.n	801285c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801287c:	480d      	ldr	r0, [pc, #52]	; (80128b4 <prvInitialiseTaskLists+0x64>)
 801287e:	f7fe f8e3 	bl	8010a48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012882:	480d      	ldr	r0, [pc, #52]	; (80128b8 <prvInitialiseTaskLists+0x68>)
 8012884:	f7fe f8e0 	bl	8010a48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012888:	480c      	ldr	r0, [pc, #48]	; (80128bc <prvInitialiseTaskLists+0x6c>)
 801288a:	f7fe f8dd 	bl	8010a48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801288e:	480c      	ldr	r0, [pc, #48]	; (80128c0 <prvInitialiseTaskLists+0x70>)
 8012890:	f7fe f8da 	bl	8010a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012894:	480b      	ldr	r0, [pc, #44]	; (80128c4 <prvInitialiseTaskLists+0x74>)
 8012896:	f7fe f8d7 	bl	8010a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801289a:	4b0b      	ldr	r3, [pc, #44]	; (80128c8 <prvInitialiseTaskLists+0x78>)
 801289c:	4a05      	ldr	r2, [pc, #20]	; (80128b4 <prvInitialiseTaskLists+0x64>)
 801289e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80128a0:	4b0a      	ldr	r3, [pc, #40]	; (80128cc <prvInitialiseTaskLists+0x7c>)
 80128a2:	4a05      	ldr	r2, [pc, #20]	; (80128b8 <prvInitialiseTaskLists+0x68>)
 80128a4:	601a      	str	r2, [r3, #0]
}
 80128a6:	bf00      	nop
 80128a8:	3708      	adds	r7, #8
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}
 80128ae:	bf00      	nop
 80128b0:	20001d1c 	.word	0x20001d1c
 80128b4:	2000217c 	.word	0x2000217c
 80128b8:	20002190 	.word	0x20002190
 80128bc:	200021ac 	.word	0x200021ac
 80128c0:	200021c0 	.word	0x200021c0
 80128c4:	200021d8 	.word	0x200021d8
 80128c8:	200021a4 	.word	0x200021a4
 80128cc:	200021a8 	.word	0x200021a8

080128d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80128d6:	e019      	b.n	801290c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80128d8:	f001 f8b0 	bl	8013a3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128dc:	4b0f      	ldr	r3, [pc, #60]	; (801291c <prvCheckTasksWaitingTermination+0x4c>)
 80128de:	68db      	ldr	r3, [r3, #12]
 80128e0:	68db      	ldr	r3, [r3, #12]
 80128e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	3304      	adds	r3, #4
 80128e8:	4618      	mov	r0, r3
 80128ea:	f7fe f937 	bl	8010b5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80128ee:	4b0c      	ldr	r3, [pc, #48]	; (8012920 <prvCheckTasksWaitingTermination+0x50>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	3b01      	subs	r3, #1
 80128f4:	4a0a      	ldr	r2, [pc, #40]	; (8012920 <prvCheckTasksWaitingTermination+0x50>)
 80128f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80128f8:	4b0a      	ldr	r3, [pc, #40]	; (8012924 <prvCheckTasksWaitingTermination+0x54>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	3b01      	subs	r3, #1
 80128fe:	4a09      	ldr	r2, [pc, #36]	; (8012924 <prvCheckTasksWaitingTermination+0x54>)
 8012900:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012902:	f001 f8c9 	bl	8013a98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f000 f80e 	bl	8012928 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801290c:	4b05      	ldr	r3, [pc, #20]	; (8012924 <prvCheckTasksWaitingTermination+0x54>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d1e1      	bne.n	80128d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012914:	bf00      	nop
 8012916:	3708      	adds	r7, #8
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	200021c0 	.word	0x200021c0
 8012920:	200021ec 	.word	0x200021ec
 8012924:	200021d4 	.word	0x200021d4

08012928 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012928:	b580      	push	{r7, lr}
 801292a:	b084      	sub	sp, #16
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012936:	2b00      	cmp	r3, #0
 8012938:	d108      	bne.n	801294c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801293e:	4618      	mov	r0, r3
 8012940:	f001 fa58 	bl	8013df4 <vPortFree>
				vPortFree( pxTCB );
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f001 fa55 	bl	8013df4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801294a:	e017      	b.n	801297c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012952:	2b01      	cmp	r3, #1
 8012954:	d103      	bne.n	801295e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f001 fa4c 	bl	8013df4 <vPortFree>
	}
 801295c:	e00e      	b.n	801297c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012964:	2b02      	cmp	r3, #2
 8012966:	d009      	beq.n	801297c <prvDeleteTCB+0x54>
 8012968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801296c:	f383 8811 	msr	BASEPRI, r3
 8012970:	f3bf 8f6f 	isb	sy
 8012974:	f3bf 8f4f 	dsb	sy
 8012978:	60fb      	str	r3, [r7, #12]
 801297a:	e7fe      	b.n	801297a <prvDeleteTCB+0x52>
	}
 801297c:	bf00      	nop
 801297e:	3710      	adds	r7, #16
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}

08012984 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012984:	b480      	push	{r7}
 8012986:	b083      	sub	sp, #12
 8012988:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801298a:	4b0c      	ldr	r3, [pc, #48]	; (80129bc <prvResetNextTaskUnblockTime+0x38>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d104      	bne.n	801299e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012994:	4b0a      	ldr	r3, [pc, #40]	; (80129c0 <prvResetNextTaskUnblockTime+0x3c>)
 8012996:	f04f 32ff 	mov.w	r2, #4294967295
 801299a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801299c:	e008      	b.n	80129b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801299e:	4b07      	ldr	r3, [pc, #28]	; (80129bc <prvResetNextTaskUnblockTime+0x38>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	68db      	ldr	r3, [r3, #12]
 80129a4:	68db      	ldr	r3, [r3, #12]
 80129a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	4a04      	ldr	r2, [pc, #16]	; (80129c0 <prvResetNextTaskUnblockTime+0x3c>)
 80129ae:	6013      	str	r3, [r2, #0]
}
 80129b0:	bf00      	nop
 80129b2:	370c      	adds	r7, #12
 80129b4:	46bd      	mov	sp, r7
 80129b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ba:	4770      	bx	lr
 80129bc:	200021a4 	.word	0x200021a4
 80129c0:	2000220c 	.word	0x2000220c

080129c4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80129c4:	b480      	push	{r7}
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80129ca:	4b05      	ldr	r3, [pc, #20]	; (80129e0 <xTaskGetCurrentTaskHandle+0x1c>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	607b      	str	r3, [r7, #4]

		return xReturn;
 80129d0:	687b      	ldr	r3, [r7, #4]
	}
 80129d2:	4618      	mov	r0, r3
 80129d4:	370c      	adds	r7, #12
 80129d6:	46bd      	mov	sp, r7
 80129d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129dc:	4770      	bx	lr
 80129de:	bf00      	nop
 80129e0:	20001d18 	.word	0x20001d18

080129e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80129e4:	b480      	push	{r7}
 80129e6:	b083      	sub	sp, #12
 80129e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80129ea:	4b0b      	ldr	r3, [pc, #44]	; (8012a18 <xTaskGetSchedulerState+0x34>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d102      	bne.n	80129f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80129f2:	2301      	movs	r3, #1
 80129f4:	607b      	str	r3, [r7, #4]
 80129f6:	e008      	b.n	8012a0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80129f8:	4b08      	ldr	r3, [pc, #32]	; (8012a1c <xTaskGetSchedulerState+0x38>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d102      	bne.n	8012a06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012a00:	2302      	movs	r3, #2
 8012a02:	607b      	str	r3, [r7, #4]
 8012a04:	e001      	b.n	8012a0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012a06:	2300      	movs	r3, #0
 8012a08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012a0a:	687b      	ldr	r3, [r7, #4]
	}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	370c      	adds	r7, #12
 8012a10:	46bd      	mov	sp, r7
 8012a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a16:	4770      	bx	lr
 8012a18:	200021f8 	.word	0x200021f8
 8012a1c:	20002214 	.word	0x20002214

08012a20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b084      	sub	sp, #16
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d051      	beq.n	8012ada <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012a36:	68bb      	ldr	r3, [r7, #8]
 8012a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a3a:	4b2a      	ldr	r3, [pc, #168]	; (8012ae4 <xTaskPriorityInherit+0xc4>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a40:	429a      	cmp	r2, r3
 8012a42:	d241      	bcs.n	8012ac8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	699b      	ldr	r3, [r3, #24]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	db06      	blt.n	8012a5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a4c:	4b25      	ldr	r3, [pc, #148]	; (8012ae4 <xTaskPriorityInherit+0xc4>)
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012a5a:	68bb      	ldr	r3, [r7, #8]
 8012a5c:	6959      	ldr	r1, [r3, #20]
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a62:	4613      	mov	r3, r2
 8012a64:	009b      	lsls	r3, r3, #2
 8012a66:	4413      	add	r3, r2
 8012a68:	009b      	lsls	r3, r3, #2
 8012a6a:	4a1f      	ldr	r2, [pc, #124]	; (8012ae8 <xTaskPriorityInherit+0xc8>)
 8012a6c:	4413      	add	r3, r2
 8012a6e:	4299      	cmp	r1, r3
 8012a70:	d122      	bne.n	8012ab8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	3304      	adds	r3, #4
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7fe f870 	bl	8010b5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012a7c:	4b19      	ldr	r3, [pc, #100]	; (8012ae4 <xTaskPriorityInherit+0xc4>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a8a:	4b18      	ldr	r3, [pc, #96]	; (8012aec <xTaskPriorityInherit+0xcc>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d903      	bls.n	8012a9a <xTaskPriorityInherit+0x7a>
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a96:	4a15      	ldr	r2, [pc, #84]	; (8012aec <xTaskPriorityInherit+0xcc>)
 8012a98:	6013      	str	r3, [r2, #0]
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a9e:	4613      	mov	r3, r2
 8012aa0:	009b      	lsls	r3, r3, #2
 8012aa2:	4413      	add	r3, r2
 8012aa4:	009b      	lsls	r3, r3, #2
 8012aa6:	4a10      	ldr	r2, [pc, #64]	; (8012ae8 <xTaskPriorityInherit+0xc8>)
 8012aa8:	441a      	add	r2, r3
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	3304      	adds	r3, #4
 8012aae:	4619      	mov	r1, r3
 8012ab0:	4610      	mov	r0, r2
 8012ab2:	f7fd fff6 	bl	8010aa2 <vListInsertEnd>
 8012ab6:	e004      	b.n	8012ac2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012ab8:	4b0a      	ldr	r3, [pc, #40]	; (8012ae4 <xTaskPriorityInherit+0xc4>)
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012abe:	68bb      	ldr	r3, [r7, #8]
 8012ac0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	60fb      	str	r3, [r7, #12]
 8012ac6:	e008      	b.n	8012ada <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012acc:	4b05      	ldr	r3, [pc, #20]	; (8012ae4 <xTaskPriorityInherit+0xc4>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d201      	bcs.n	8012ada <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012ad6:	2301      	movs	r3, #1
 8012ad8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012ada:	68fb      	ldr	r3, [r7, #12]
	}
 8012adc:	4618      	mov	r0, r3
 8012ade:	3710      	adds	r7, #16
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bd80      	pop	{r7, pc}
 8012ae4:	20001d18 	.word	0x20001d18
 8012ae8:	20001d1c 	.word	0x20001d1c
 8012aec:	200021f4 	.word	0x200021f4

08012af0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b086      	sub	sp, #24
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012afc:	2300      	movs	r3, #0
 8012afe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d054      	beq.n	8012bb0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012b06:	4b2d      	ldr	r3, [pc, #180]	; (8012bbc <xTaskPriorityDisinherit+0xcc>)
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	693a      	ldr	r2, [r7, #16]
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d009      	beq.n	8012b24 <xTaskPriorityDisinherit+0x34>
 8012b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b14:	f383 8811 	msr	BASEPRI, r3
 8012b18:	f3bf 8f6f 	isb	sy
 8012b1c:	f3bf 8f4f 	dsb	sy
 8012b20:	60fb      	str	r3, [r7, #12]
 8012b22:	e7fe      	b.n	8012b22 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012b24:	693b      	ldr	r3, [r7, #16]
 8012b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d109      	bne.n	8012b40 <xTaskPriorityDisinherit+0x50>
 8012b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b30:	f383 8811 	msr	BASEPRI, r3
 8012b34:	f3bf 8f6f 	isb	sy
 8012b38:	f3bf 8f4f 	dsb	sy
 8012b3c:	60bb      	str	r3, [r7, #8]
 8012b3e:	e7fe      	b.n	8012b3e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8012b40:	693b      	ldr	r3, [r7, #16]
 8012b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b44:	1e5a      	subs	r2, r3, #1
 8012b46:	693b      	ldr	r3, [r7, #16]
 8012b48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b52:	429a      	cmp	r2, r3
 8012b54:	d02c      	beq.n	8012bb0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012b56:	693b      	ldr	r3, [r7, #16]
 8012b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d128      	bne.n	8012bb0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	3304      	adds	r3, #4
 8012b62:	4618      	mov	r0, r3
 8012b64:	f7fd fffa 	bl	8010b5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b80:	4b0f      	ldr	r3, [pc, #60]	; (8012bc0 <xTaskPriorityDisinherit+0xd0>)
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d903      	bls.n	8012b90 <xTaskPriorityDisinherit+0xa0>
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b8c:	4a0c      	ldr	r2, [pc, #48]	; (8012bc0 <xTaskPriorityDisinherit+0xd0>)
 8012b8e:	6013      	str	r3, [r2, #0]
 8012b90:	693b      	ldr	r3, [r7, #16]
 8012b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b94:	4613      	mov	r3, r2
 8012b96:	009b      	lsls	r3, r3, #2
 8012b98:	4413      	add	r3, r2
 8012b9a:	009b      	lsls	r3, r3, #2
 8012b9c:	4a09      	ldr	r2, [pc, #36]	; (8012bc4 <xTaskPriorityDisinherit+0xd4>)
 8012b9e:	441a      	add	r2, r3
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	3304      	adds	r3, #4
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	4610      	mov	r0, r2
 8012ba8:	f7fd ff7b 	bl	8010aa2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012bac:	2301      	movs	r3, #1
 8012bae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012bb0:	697b      	ldr	r3, [r7, #20]
	}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	3718      	adds	r7, #24
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd80      	pop	{r7, pc}
 8012bba:	bf00      	nop
 8012bbc:	20001d18 	.word	0x20001d18
 8012bc0:	200021f4 	.word	0x200021f4
 8012bc4:	20001d1c 	.word	0x20001d1c

08012bc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b088      	sub	sp, #32
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
 8012bd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d068      	beq.n	8012cb2 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012be0:	69bb      	ldr	r3, [r7, #24]
 8012be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d109      	bne.n	8012bfc <vTaskPriorityDisinheritAfterTimeout+0x34>
 8012be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bec:	f383 8811 	msr	BASEPRI, r3
 8012bf0:	f3bf 8f6f 	isb	sy
 8012bf4:	f3bf 8f4f 	dsb	sy
 8012bf8:	60fb      	str	r3, [r7, #12]
 8012bfa:	e7fe      	b.n	8012bfa <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012bfc:	69bb      	ldr	r3, [r7, #24]
 8012bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c00:	683a      	ldr	r2, [r7, #0]
 8012c02:	429a      	cmp	r2, r3
 8012c04:	d902      	bls.n	8012c0c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	61fb      	str	r3, [r7, #28]
 8012c0a:	e002      	b.n	8012c12 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012c0c:	69bb      	ldr	r3, [r7, #24]
 8012c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c10:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012c12:	69bb      	ldr	r3, [r7, #24]
 8012c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c16:	69fa      	ldr	r2, [r7, #28]
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d04a      	beq.n	8012cb2 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012c1c:	69bb      	ldr	r3, [r7, #24]
 8012c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c20:	697a      	ldr	r2, [r7, #20]
 8012c22:	429a      	cmp	r2, r3
 8012c24:	d145      	bne.n	8012cb2 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012c26:	4b25      	ldr	r3, [pc, #148]	; (8012cbc <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	69ba      	ldr	r2, [r7, #24]
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	d109      	bne.n	8012c44 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8012c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c34:	f383 8811 	msr	BASEPRI, r3
 8012c38:	f3bf 8f6f 	isb	sy
 8012c3c:	f3bf 8f4f 	dsb	sy
 8012c40:	60bb      	str	r3, [r7, #8]
 8012c42:	e7fe      	b.n	8012c42 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012c44:	69bb      	ldr	r3, [r7, #24]
 8012c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c48:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012c4a:	69bb      	ldr	r3, [r7, #24]
 8012c4c:	69fa      	ldr	r2, [r7, #28]
 8012c4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012c50:	69bb      	ldr	r3, [r7, #24]
 8012c52:	699b      	ldr	r3, [r3, #24]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	db04      	blt.n	8012c62 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c58:	69fb      	ldr	r3, [r7, #28]
 8012c5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012c5e:	69bb      	ldr	r3, [r7, #24]
 8012c60:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012c62:	69bb      	ldr	r3, [r7, #24]
 8012c64:	6959      	ldr	r1, [r3, #20]
 8012c66:	693a      	ldr	r2, [r7, #16]
 8012c68:	4613      	mov	r3, r2
 8012c6a:	009b      	lsls	r3, r3, #2
 8012c6c:	4413      	add	r3, r2
 8012c6e:	009b      	lsls	r3, r3, #2
 8012c70:	4a13      	ldr	r2, [pc, #76]	; (8012cc0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012c72:	4413      	add	r3, r2
 8012c74:	4299      	cmp	r1, r3
 8012c76:	d11c      	bne.n	8012cb2 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c78:	69bb      	ldr	r3, [r7, #24]
 8012c7a:	3304      	adds	r3, #4
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f7fd ff6d 	bl	8010b5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012c82:	69bb      	ldr	r3, [r7, #24]
 8012c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c86:	4b0f      	ldr	r3, [pc, #60]	; (8012cc4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	429a      	cmp	r2, r3
 8012c8c:	d903      	bls.n	8012c96 <vTaskPriorityDisinheritAfterTimeout+0xce>
 8012c8e:	69bb      	ldr	r3, [r7, #24]
 8012c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c92:	4a0c      	ldr	r2, [pc, #48]	; (8012cc4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012c94:	6013      	str	r3, [r2, #0]
 8012c96:	69bb      	ldr	r3, [r7, #24]
 8012c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c9a:	4613      	mov	r3, r2
 8012c9c:	009b      	lsls	r3, r3, #2
 8012c9e:	4413      	add	r3, r2
 8012ca0:	009b      	lsls	r3, r3, #2
 8012ca2:	4a07      	ldr	r2, [pc, #28]	; (8012cc0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012ca4:	441a      	add	r2, r3
 8012ca6:	69bb      	ldr	r3, [r7, #24]
 8012ca8:	3304      	adds	r3, #4
 8012caa:	4619      	mov	r1, r3
 8012cac:	4610      	mov	r0, r2
 8012cae:	f7fd fef8 	bl	8010aa2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012cb2:	bf00      	nop
 8012cb4:	3720      	adds	r7, #32
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}
 8012cba:	bf00      	nop
 8012cbc:	20001d18 	.word	0x20001d18
 8012cc0:	20001d1c 	.word	0x20001d1c
 8012cc4:	200021f4 	.word	0x200021f4

08012cc8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012cc8:	b480      	push	{r7}
 8012cca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012ccc:	4b07      	ldr	r3, [pc, #28]	; (8012cec <pvTaskIncrementMutexHeldCount+0x24>)
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d004      	beq.n	8012cde <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012cd4:	4b05      	ldr	r3, [pc, #20]	; (8012cec <pvTaskIncrementMutexHeldCount+0x24>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012cda:	3201      	adds	r2, #1
 8012cdc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012cde:	4b03      	ldr	r3, [pc, #12]	; (8012cec <pvTaskIncrementMutexHeldCount+0x24>)
 8012ce0:	681b      	ldr	r3, [r3, #0]
	}
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	4770      	bx	lr
 8012cec:	20001d18 	.word	0x20001d18

08012cf0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b086      	sub	sp, #24
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	60f8      	str	r0, [r7, #12]
 8012cf8:	60b9      	str	r1, [r7, #8]
 8012cfa:	607a      	str	r2, [r7, #4]
 8012cfc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8012cfe:	f000 fe9d 	bl	8013a3c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012d02:	4b26      	ldr	r3, [pc, #152]	; (8012d9c <xTaskNotifyWait+0xac>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012d0a:	b2db      	uxtb	r3, r3
 8012d0c:	2b02      	cmp	r3, #2
 8012d0e:	d01a      	beq.n	8012d46 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8012d10:	4b22      	ldr	r3, [pc, #136]	; (8012d9c <xTaskNotifyWait+0xac>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012d16:	68fa      	ldr	r2, [r7, #12]
 8012d18:	43d2      	mvns	r2, r2
 8012d1a:	400a      	ands	r2, r1
 8012d1c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8012d1e:	4b1f      	ldr	r3, [pc, #124]	; (8012d9c <xTaskNotifyWait+0xac>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	2201      	movs	r2, #1
 8012d24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d00b      	beq.n	8012d46 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012d2e:	2101      	movs	r1, #1
 8012d30:	6838      	ldr	r0, [r7, #0]
 8012d32:	f000 f9c5 	bl	80130c0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8012d36:	4b1a      	ldr	r3, [pc, #104]	; (8012da0 <xTaskNotifyWait+0xb0>)
 8012d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d3c:	601a      	str	r2, [r3, #0]
 8012d3e:	f3bf 8f4f 	dsb	sy
 8012d42:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012d46:	f000 fea7 	bl	8013a98 <vPortExitCritical>

		taskENTER_CRITICAL();
 8012d4a:	f000 fe77 	bl	8013a3c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d004      	beq.n	8012d5e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8012d54:	4b11      	ldr	r3, [pc, #68]	; (8012d9c <xTaskNotifyWait+0xac>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012d5e:	4b0f      	ldr	r3, [pc, #60]	; (8012d9c <xTaskNotifyWait+0xac>)
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012d66:	b2db      	uxtb	r3, r3
 8012d68:	2b02      	cmp	r3, #2
 8012d6a:	d002      	beq.n	8012d72 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	617b      	str	r3, [r7, #20]
 8012d70:	e008      	b.n	8012d84 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8012d72:	4b0a      	ldr	r3, [pc, #40]	; (8012d9c <xTaskNotifyWait+0xac>)
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012d78:	68ba      	ldr	r2, [r7, #8]
 8012d7a:	43d2      	mvns	r2, r2
 8012d7c:	400a      	ands	r2, r1
 8012d7e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8012d80:	2301      	movs	r3, #1
 8012d82:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012d84:	4b05      	ldr	r3, [pc, #20]	; (8012d9c <xTaskNotifyWait+0xac>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	2200      	movs	r2, #0
 8012d8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8012d8e:	f000 fe83 	bl	8013a98 <vPortExitCritical>

		return xReturn;
 8012d92:	697b      	ldr	r3, [r7, #20]
	}
 8012d94:	4618      	mov	r0, r3
 8012d96:	3718      	adds	r7, #24
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	20001d18 	.word	0x20001d18
 8012da0:	e000ed04 	.word	0xe000ed04

08012da4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b08a      	sub	sp, #40	; 0x28
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	60f8      	str	r0, [r7, #12]
 8012dac:	60b9      	str	r1, [r7, #8]
 8012dae:	603b      	str	r3, [r7, #0]
 8012db0:	4613      	mov	r3, r2
 8012db2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8012db4:	2301      	movs	r3, #1
 8012db6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d109      	bne.n	8012dd2 <xTaskGenericNotify+0x2e>
 8012dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dc2:	f383 8811 	msr	BASEPRI, r3
 8012dc6:	f3bf 8f6f 	isb	sy
 8012dca:	f3bf 8f4f 	dsb	sy
 8012dce:	61bb      	str	r3, [r7, #24]
 8012dd0:	e7fe      	b.n	8012dd0 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8012dd6:	f000 fe31 	bl	8013a3c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d003      	beq.n	8012de8 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012de0:	6a3b      	ldr	r3, [r7, #32]
 8012de2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012de8:	6a3b      	ldr	r3, [r7, #32]
 8012dea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012dee:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012df0:	6a3b      	ldr	r3, [r7, #32]
 8012df2:	2202      	movs	r2, #2
 8012df4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8012df8:	79fb      	ldrb	r3, [r7, #7]
 8012dfa:	2b04      	cmp	r3, #4
 8012dfc:	d827      	bhi.n	8012e4e <xTaskGenericNotify+0xaa>
 8012dfe:	a201      	add	r2, pc, #4	; (adr r2, 8012e04 <xTaskGenericNotify+0x60>)
 8012e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e04:	08012e6d 	.word	0x08012e6d
 8012e08:	08012e19 	.word	0x08012e19
 8012e0c:	08012e27 	.word	0x08012e27
 8012e10:	08012e33 	.word	0x08012e33
 8012e14:	08012e3b 	.word	0x08012e3b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012e18:	6a3b      	ldr	r3, [r7, #32]
 8012e1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e1c:	68bb      	ldr	r3, [r7, #8]
 8012e1e:	431a      	orrs	r2, r3
 8012e20:	6a3b      	ldr	r3, [r7, #32]
 8012e22:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012e24:	e025      	b.n	8012e72 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012e26:	6a3b      	ldr	r3, [r7, #32]
 8012e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e2a:	1c5a      	adds	r2, r3, #1
 8012e2c:	6a3b      	ldr	r3, [r7, #32]
 8012e2e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012e30:	e01f      	b.n	8012e72 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012e32:	6a3b      	ldr	r3, [r7, #32]
 8012e34:	68ba      	ldr	r2, [r7, #8]
 8012e36:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012e38:	e01b      	b.n	8012e72 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012e3a:	7ffb      	ldrb	r3, [r7, #31]
 8012e3c:	2b02      	cmp	r3, #2
 8012e3e:	d003      	beq.n	8012e48 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012e40:	6a3b      	ldr	r3, [r7, #32]
 8012e42:	68ba      	ldr	r2, [r7, #8]
 8012e44:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012e46:	e014      	b.n	8012e72 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8012e48:	2300      	movs	r3, #0
 8012e4a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8012e4c:	e011      	b.n	8012e72 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012e4e:	6a3b      	ldr	r3, [r7, #32]
 8012e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e56:	d00b      	beq.n	8012e70 <xTaskGenericNotify+0xcc>
 8012e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e5c:	f383 8811 	msr	BASEPRI, r3
 8012e60:	f3bf 8f6f 	isb	sy
 8012e64:	f3bf 8f4f 	dsb	sy
 8012e68:	617b      	str	r3, [r7, #20]
 8012e6a:	e7fe      	b.n	8012e6a <xTaskGenericNotify+0xc6>
					break;
 8012e6c:	bf00      	nop
 8012e6e:	e000      	b.n	8012e72 <xTaskGenericNotify+0xce>

					break;
 8012e70:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012e72:	7ffb      	ldrb	r3, [r7, #31]
 8012e74:	2b01      	cmp	r3, #1
 8012e76:	d13b      	bne.n	8012ef0 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012e78:	6a3b      	ldr	r3, [r7, #32]
 8012e7a:	3304      	adds	r3, #4
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7fd fe6d 	bl	8010b5c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8012e82:	6a3b      	ldr	r3, [r7, #32]
 8012e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e86:	4b1e      	ldr	r3, [pc, #120]	; (8012f00 <xTaskGenericNotify+0x15c>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d903      	bls.n	8012e96 <xTaskGenericNotify+0xf2>
 8012e8e:	6a3b      	ldr	r3, [r7, #32]
 8012e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e92:	4a1b      	ldr	r2, [pc, #108]	; (8012f00 <xTaskGenericNotify+0x15c>)
 8012e94:	6013      	str	r3, [r2, #0]
 8012e96:	6a3b      	ldr	r3, [r7, #32]
 8012e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e9a:	4613      	mov	r3, r2
 8012e9c:	009b      	lsls	r3, r3, #2
 8012e9e:	4413      	add	r3, r2
 8012ea0:	009b      	lsls	r3, r3, #2
 8012ea2:	4a18      	ldr	r2, [pc, #96]	; (8012f04 <xTaskGenericNotify+0x160>)
 8012ea4:	441a      	add	r2, r3
 8012ea6:	6a3b      	ldr	r3, [r7, #32]
 8012ea8:	3304      	adds	r3, #4
 8012eaa:	4619      	mov	r1, r3
 8012eac:	4610      	mov	r0, r2
 8012eae:	f7fd fdf8 	bl	8010aa2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012eb2:	6a3b      	ldr	r3, [r7, #32]
 8012eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d009      	beq.n	8012ece <xTaskGenericNotify+0x12a>
 8012eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ebe:	f383 8811 	msr	BASEPRI, r3
 8012ec2:	f3bf 8f6f 	isb	sy
 8012ec6:	f3bf 8f4f 	dsb	sy
 8012eca:	613b      	str	r3, [r7, #16]
 8012ecc:	e7fe      	b.n	8012ecc <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8012ece:	f7ff fd59 	bl	8012984 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012ed2:	6a3b      	ldr	r3, [r7, #32]
 8012ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ed6:	4b0c      	ldr	r3, [pc, #48]	; (8012f08 <xTaskGenericNotify+0x164>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012edc:	429a      	cmp	r2, r3
 8012ede:	d907      	bls.n	8012ef0 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8012ee0:	4b0a      	ldr	r3, [pc, #40]	; (8012f0c <xTaskGenericNotify+0x168>)
 8012ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ee6:	601a      	str	r2, [r3, #0]
 8012ee8:	f3bf 8f4f 	dsb	sy
 8012eec:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012ef0:	f000 fdd2 	bl	8013a98 <vPortExitCritical>

		return xReturn;
 8012ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	3728      	adds	r7, #40	; 0x28
 8012efa:	46bd      	mov	sp, r7
 8012efc:	bd80      	pop	{r7, pc}
 8012efe:	bf00      	nop
 8012f00:	200021f4 	.word	0x200021f4
 8012f04:	20001d1c 	.word	0x20001d1c
 8012f08:	20001d18 	.word	0x20001d18
 8012f0c:	e000ed04 	.word	0xe000ed04

08012f10 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b08e      	sub	sp, #56	; 0x38
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	60f8      	str	r0, [r7, #12]
 8012f18:	60b9      	str	r1, [r7, #8]
 8012f1a:	603b      	str	r3, [r7, #0]
 8012f1c:	4613      	mov	r3, r2
 8012f1e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8012f20:	2301      	movs	r3, #1
 8012f22:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d109      	bne.n	8012f3e <xTaskGenericNotifyFromISR+0x2e>
 8012f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f2e:	f383 8811 	msr	BASEPRI, r3
 8012f32:	f3bf 8f6f 	isb	sy
 8012f36:	f3bf 8f4f 	dsb	sy
 8012f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8012f3c:	e7fe      	b.n	8012f3c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012f3e:	f000 fe59 	bl	8013bf4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8012f46:	f3ef 8211 	mrs	r2, BASEPRI
 8012f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f4e:	f383 8811 	msr	BASEPRI, r3
 8012f52:	f3bf 8f6f 	isb	sy
 8012f56:	f3bf 8f4f 	dsb	sy
 8012f5a:	623a      	str	r2, [r7, #32]
 8012f5c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8012f5e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012f60:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d003      	beq.n	8012f70 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f72:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f7c:	2202      	movs	r2, #2
 8012f7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8012f82:	79fb      	ldrb	r3, [r7, #7]
 8012f84:	2b04      	cmp	r3, #4
 8012f86:	d829      	bhi.n	8012fdc <xTaskGenericNotifyFromISR+0xcc>
 8012f88:	a201      	add	r2, pc, #4	; (adr r2, 8012f90 <xTaskGenericNotifyFromISR+0x80>)
 8012f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f8e:	bf00      	nop
 8012f90:	08012ffb 	.word	0x08012ffb
 8012f94:	08012fa5 	.word	0x08012fa5
 8012f98:	08012fb3 	.word	0x08012fb3
 8012f9c:	08012fbf 	.word	0x08012fbf
 8012fa0:	08012fc7 	.word	0x08012fc7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fa6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	431a      	orrs	r2, r3
 8012fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012fb0:	e026      	b.n	8013000 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012fb6:	1c5a      	adds	r2, r3, #1
 8012fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012fbc:	e020      	b.n	8013000 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc0:	68ba      	ldr	r2, [r7, #8]
 8012fc2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012fc4:	e01c      	b.n	8013000 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012fc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012fca:	2b02      	cmp	r3, #2
 8012fcc:	d003      	beq.n	8012fd6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fd0:	68ba      	ldr	r2, [r7, #8]
 8012fd2:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012fd4:	e014      	b.n	8013000 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8012fda:	e011      	b.n	8013000 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fe4:	d00b      	beq.n	8012ffe <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8012fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fea:	f383 8811 	msr	BASEPRI, r3
 8012fee:	f3bf 8f6f 	isb	sy
 8012ff2:	f3bf 8f4f 	dsb	sy
 8012ff6:	61bb      	str	r3, [r7, #24]
 8012ff8:	e7fe      	b.n	8012ff8 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8012ffa:	bf00      	nop
 8012ffc:	e000      	b.n	8013000 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8012ffe:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013000:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013004:	2b01      	cmp	r3, #1
 8013006:	d145      	bne.n	8013094 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801300c:	2b00      	cmp	r3, #0
 801300e:	d009      	beq.n	8013024 <xTaskGenericNotifyFromISR+0x114>
 8013010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013014:	f383 8811 	msr	BASEPRI, r3
 8013018:	f3bf 8f6f 	isb	sy
 801301c:	f3bf 8f4f 	dsb	sy
 8013020:	617b      	str	r3, [r7, #20]
 8013022:	e7fe      	b.n	8013022 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013024:	4b20      	ldr	r3, [pc, #128]	; (80130a8 <xTaskGenericNotifyFromISR+0x198>)
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d11d      	bne.n	8013068 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801302e:	3304      	adds	r3, #4
 8013030:	4618      	mov	r0, r3
 8013032:	f7fd fd93 	bl	8010b5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801303a:	4b1c      	ldr	r3, [pc, #112]	; (80130ac <xTaskGenericNotifyFromISR+0x19c>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	429a      	cmp	r2, r3
 8013040:	d903      	bls.n	801304a <xTaskGenericNotifyFromISR+0x13a>
 8013042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013046:	4a19      	ldr	r2, [pc, #100]	; (80130ac <xTaskGenericNotifyFromISR+0x19c>)
 8013048:	6013      	str	r3, [r2, #0]
 801304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801304c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801304e:	4613      	mov	r3, r2
 8013050:	009b      	lsls	r3, r3, #2
 8013052:	4413      	add	r3, r2
 8013054:	009b      	lsls	r3, r3, #2
 8013056:	4a16      	ldr	r2, [pc, #88]	; (80130b0 <xTaskGenericNotifyFromISR+0x1a0>)
 8013058:	441a      	add	r2, r3
 801305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801305c:	3304      	adds	r3, #4
 801305e:	4619      	mov	r1, r3
 8013060:	4610      	mov	r0, r2
 8013062:	f7fd fd1e 	bl	8010aa2 <vListInsertEnd>
 8013066:	e005      	b.n	8013074 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801306a:	3318      	adds	r3, #24
 801306c:	4619      	mov	r1, r3
 801306e:	4811      	ldr	r0, [pc, #68]	; (80130b4 <xTaskGenericNotifyFromISR+0x1a4>)
 8013070:	f7fd fd17 	bl	8010aa2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013078:	4b0f      	ldr	r3, [pc, #60]	; (80130b8 <xTaskGenericNotifyFromISR+0x1a8>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801307e:	429a      	cmp	r2, r3
 8013080:	d908      	bls.n	8013094 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8013082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013084:	2b00      	cmp	r3, #0
 8013086:	d002      	beq.n	801308e <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8013088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801308a:	2201      	movs	r2, #1
 801308c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801308e:	4b0b      	ldr	r3, [pc, #44]	; (80130bc <xTaskGenericNotifyFromISR+0x1ac>)
 8013090:	2201      	movs	r2, #1
 8013092:	601a      	str	r2, [r3, #0]
 8013094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013096:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013098:	693b      	ldr	r3, [r7, #16]
 801309a:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801309e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80130a0:	4618      	mov	r0, r3
 80130a2:	3738      	adds	r7, #56	; 0x38
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}
 80130a8:	20002214 	.word	0x20002214
 80130ac:	200021f4 	.word	0x200021f4
 80130b0:	20001d1c 	.word	0x20001d1c
 80130b4:	200021ac 	.word	0x200021ac
 80130b8:	20001d18 	.word	0x20001d18
 80130bc:	20002200 	.word	0x20002200

080130c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b084      	sub	sp, #16
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
 80130c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80130ca:	4b21      	ldr	r3, [pc, #132]	; (8013150 <prvAddCurrentTaskToDelayedList+0x90>)
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80130d0:	4b20      	ldr	r3, [pc, #128]	; (8013154 <prvAddCurrentTaskToDelayedList+0x94>)
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	3304      	adds	r3, #4
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7fd fd40 	bl	8010b5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130e2:	d10a      	bne.n	80130fa <prvAddCurrentTaskToDelayedList+0x3a>
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d007      	beq.n	80130fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80130ea:	4b1a      	ldr	r3, [pc, #104]	; (8013154 <prvAddCurrentTaskToDelayedList+0x94>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	3304      	adds	r3, #4
 80130f0:	4619      	mov	r1, r3
 80130f2:	4819      	ldr	r0, [pc, #100]	; (8013158 <prvAddCurrentTaskToDelayedList+0x98>)
 80130f4:	f7fd fcd5 	bl	8010aa2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80130f8:	e026      	b.n	8013148 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80130fa:	68fa      	ldr	r2, [r7, #12]
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	4413      	add	r3, r2
 8013100:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013102:	4b14      	ldr	r3, [pc, #80]	; (8013154 <prvAddCurrentTaskToDelayedList+0x94>)
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	68ba      	ldr	r2, [r7, #8]
 8013108:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801310a:	68ba      	ldr	r2, [r7, #8]
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	429a      	cmp	r2, r3
 8013110:	d209      	bcs.n	8013126 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013112:	4b12      	ldr	r3, [pc, #72]	; (801315c <prvAddCurrentTaskToDelayedList+0x9c>)
 8013114:	681a      	ldr	r2, [r3, #0]
 8013116:	4b0f      	ldr	r3, [pc, #60]	; (8013154 <prvAddCurrentTaskToDelayedList+0x94>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	3304      	adds	r3, #4
 801311c:	4619      	mov	r1, r3
 801311e:	4610      	mov	r0, r2
 8013120:	f7fd fce3 	bl	8010aea <vListInsert>
}
 8013124:	e010      	b.n	8013148 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013126:	4b0e      	ldr	r3, [pc, #56]	; (8013160 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013128:	681a      	ldr	r2, [r3, #0]
 801312a:	4b0a      	ldr	r3, [pc, #40]	; (8013154 <prvAddCurrentTaskToDelayedList+0x94>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	3304      	adds	r3, #4
 8013130:	4619      	mov	r1, r3
 8013132:	4610      	mov	r0, r2
 8013134:	f7fd fcd9 	bl	8010aea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013138:	4b0a      	ldr	r3, [pc, #40]	; (8013164 <prvAddCurrentTaskToDelayedList+0xa4>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	68ba      	ldr	r2, [r7, #8]
 801313e:	429a      	cmp	r2, r3
 8013140:	d202      	bcs.n	8013148 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013142:	4a08      	ldr	r2, [pc, #32]	; (8013164 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	6013      	str	r3, [r2, #0]
}
 8013148:	bf00      	nop
 801314a:	3710      	adds	r7, #16
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}
 8013150:	200021f0 	.word	0x200021f0
 8013154:	20001d18 	.word	0x20001d18
 8013158:	200021d8 	.word	0x200021d8
 801315c:	200021a8 	.word	0x200021a8
 8013160:	200021a4 	.word	0x200021a4
 8013164:	2000220c 	.word	0x2000220c

08013168 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b08a      	sub	sp, #40	; 0x28
 801316c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801316e:	2300      	movs	r3, #0
 8013170:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013172:	f000 faff 	bl	8013774 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013176:	4b1c      	ldr	r3, [pc, #112]	; (80131e8 <xTimerCreateTimerTask+0x80>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d021      	beq.n	80131c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801317e:	2300      	movs	r3, #0
 8013180:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013182:	2300      	movs	r3, #0
 8013184:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013186:	1d3a      	adds	r2, r7, #4
 8013188:	f107 0108 	add.w	r1, r7, #8
 801318c:	f107 030c 	add.w	r3, r7, #12
 8013190:	4618      	mov	r0, r3
 8013192:	f7fd fc3f 	bl	8010a14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013196:	6879      	ldr	r1, [r7, #4]
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	68fa      	ldr	r2, [r7, #12]
 801319c:	9202      	str	r2, [sp, #8]
 801319e:	9301      	str	r3, [sp, #4]
 80131a0:	2302      	movs	r3, #2
 80131a2:	9300      	str	r3, [sp, #0]
 80131a4:	2300      	movs	r3, #0
 80131a6:	460a      	mov	r2, r1
 80131a8:	4910      	ldr	r1, [pc, #64]	; (80131ec <xTimerCreateTimerTask+0x84>)
 80131aa:	4811      	ldr	r0, [pc, #68]	; (80131f0 <xTimerCreateTimerTask+0x88>)
 80131ac:	f7fe fda2 	bl	8011cf4 <xTaskCreateStatic>
 80131b0:	4602      	mov	r2, r0
 80131b2:	4b10      	ldr	r3, [pc, #64]	; (80131f4 <xTimerCreateTimerTask+0x8c>)
 80131b4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80131b6:	4b0f      	ldr	r3, [pc, #60]	; (80131f4 <xTimerCreateTimerTask+0x8c>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d001      	beq.n	80131c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80131be:	2301      	movs	r3, #1
 80131c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d109      	bne.n	80131dc <xTimerCreateTimerTask+0x74>
	__asm volatile
 80131c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131cc:	f383 8811 	msr	BASEPRI, r3
 80131d0:	f3bf 8f6f 	isb	sy
 80131d4:	f3bf 8f4f 	dsb	sy
 80131d8:	613b      	str	r3, [r7, #16]
 80131da:	e7fe      	b.n	80131da <xTimerCreateTimerTask+0x72>
	return xReturn;
 80131dc:	697b      	ldr	r3, [r7, #20]
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3718      	adds	r7, #24
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}
 80131e6:	bf00      	nop
 80131e8:	20002248 	.word	0x20002248
 80131ec:	08016d00 	.word	0x08016d00
 80131f0:	08013329 	.word	0x08013329
 80131f4:	2000224c 	.word	0x2000224c

080131f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b08a      	sub	sp, #40	; 0x28
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	60f8      	str	r0, [r7, #12]
 8013200:	60b9      	str	r1, [r7, #8]
 8013202:	607a      	str	r2, [r7, #4]
 8013204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013206:	2300      	movs	r3, #0
 8013208:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d109      	bne.n	8013224 <xTimerGenericCommand+0x2c>
 8013210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013214:	f383 8811 	msr	BASEPRI, r3
 8013218:	f3bf 8f6f 	isb	sy
 801321c:	f3bf 8f4f 	dsb	sy
 8013220:	623b      	str	r3, [r7, #32]
 8013222:	e7fe      	b.n	8013222 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013224:	4b19      	ldr	r3, [pc, #100]	; (801328c <xTimerGenericCommand+0x94>)
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d02a      	beq.n	8013282 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	2b05      	cmp	r3, #5
 801323c:	dc18      	bgt.n	8013270 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801323e:	f7ff fbd1 	bl	80129e4 <xTaskGetSchedulerState>
 8013242:	4603      	mov	r3, r0
 8013244:	2b02      	cmp	r3, #2
 8013246:	d109      	bne.n	801325c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013248:	4b10      	ldr	r3, [pc, #64]	; (801328c <xTimerGenericCommand+0x94>)
 801324a:	6818      	ldr	r0, [r3, #0]
 801324c:	f107 0110 	add.w	r1, r7, #16
 8013250:	2300      	movs	r3, #0
 8013252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013254:	f7fd ff04 	bl	8011060 <xQueueGenericSend>
 8013258:	6278      	str	r0, [r7, #36]	; 0x24
 801325a:	e012      	b.n	8013282 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801325c:	4b0b      	ldr	r3, [pc, #44]	; (801328c <xTimerGenericCommand+0x94>)
 801325e:	6818      	ldr	r0, [r3, #0]
 8013260:	f107 0110 	add.w	r1, r7, #16
 8013264:	2300      	movs	r3, #0
 8013266:	2200      	movs	r2, #0
 8013268:	f7fd fefa 	bl	8011060 <xQueueGenericSend>
 801326c:	6278      	str	r0, [r7, #36]	; 0x24
 801326e:	e008      	b.n	8013282 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013270:	4b06      	ldr	r3, [pc, #24]	; (801328c <xTimerGenericCommand+0x94>)
 8013272:	6818      	ldr	r0, [r3, #0]
 8013274:	f107 0110 	add.w	r1, r7, #16
 8013278:	2300      	movs	r3, #0
 801327a:	683a      	ldr	r2, [r7, #0]
 801327c:	f7fd ffea 	bl	8011254 <xQueueGenericSendFromISR>
 8013280:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013284:	4618      	mov	r0, r3
 8013286:	3728      	adds	r7, #40	; 0x28
 8013288:	46bd      	mov	sp, r7
 801328a:	bd80      	pop	{r7, pc}
 801328c:	20002248 	.word	0x20002248

08013290 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b088      	sub	sp, #32
 8013294:	af02      	add	r7, sp, #8
 8013296:	6078      	str	r0, [r7, #4]
 8013298:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801329a:	4b22      	ldr	r3, [pc, #136]	; (8013324 <prvProcessExpiredTimer+0x94>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	68db      	ldr	r3, [r3, #12]
 80132a0:	68db      	ldr	r3, [r3, #12]
 80132a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	3304      	adds	r3, #4
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7fd fc57 	bl	8010b5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80132b4:	f003 0304 	and.w	r3, r3, #4
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d021      	beq.n	8013300 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	699a      	ldr	r2, [r3, #24]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	18d1      	adds	r1, r2, r3
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	683a      	ldr	r2, [r7, #0]
 80132c8:	6978      	ldr	r0, [r7, #20]
 80132ca:	f000 f8d1 	bl	8013470 <prvInsertTimerInActiveList>
 80132ce:	4603      	mov	r3, r0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d01e      	beq.n	8013312 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80132d4:	2300      	movs	r3, #0
 80132d6:	9300      	str	r3, [sp, #0]
 80132d8:	2300      	movs	r3, #0
 80132da:	687a      	ldr	r2, [r7, #4]
 80132dc:	2100      	movs	r1, #0
 80132de:	6978      	ldr	r0, [r7, #20]
 80132e0:	f7ff ff8a 	bl	80131f8 <xTimerGenericCommand>
 80132e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d112      	bne.n	8013312 <prvProcessExpiredTimer+0x82>
 80132ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132f0:	f383 8811 	msr	BASEPRI, r3
 80132f4:	f3bf 8f6f 	isb	sy
 80132f8:	f3bf 8f4f 	dsb	sy
 80132fc:	60fb      	str	r3, [r7, #12]
 80132fe:	e7fe      	b.n	80132fe <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013306:	f023 0301 	bic.w	r3, r3, #1
 801330a:	b2da      	uxtb	r2, r3
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	6a1b      	ldr	r3, [r3, #32]
 8013316:	6978      	ldr	r0, [r7, #20]
 8013318:	4798      	blx	r3
}
 801331a:	bf00      	nop
 801331c:	3718      	adds	r7, #24
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	20002240 	.word	0x20002240

08013328 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b084      	sub	sp, #16
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013330:	f107 0308 	add.w	r3, r7, #8
 8013334:	4618      	mov	r0, r3
 8013336:	f000 f857 	bl	80133e8 <prvGetNextExpireTime>
 801333a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	4619      	mov	r1, r3
 8013340:	68f8      	ldr	r0, [r7, #12]
 8013342:	f000 f803 	bl	801334c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013346:	f000 f8d5 	bl	80134f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801334a:	e7f1      	b.n	8013330 <prvTimerTask+0x8>

0801334c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b084      	sub	sp, #16
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013356:	f7fe ff03 	bl	8012160 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801335a:	f107 0308 	add.w	r3, r7, #8
 801335e:	4618      	mov	r0, r3
 8013360:	f000 f866 	bl	8013430 <prvSampleTimeNow>
 8013364:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d130      	bne.n	80133ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d10a      	bne.n	8013388 <prvProcessTimerOrBlockTask+0x3c>
 8013372:	687a      	ldr	r2, [r7, #4]
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	429a      	cmp	r2, r3
 8013378:	d806      	bhi.n	8013388 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801337a:	f7fe ff37 	bl	80121ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801337e:	68f9      	ldr	r1, [r7, #12]
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f7ff ff85 	bl	8013290 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013386:	e024      	b.n	80133d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d008      	beq.n	80133a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801338e:	4b13      	ldr	r3, [pc, #76]	; (80133dc <prvProcessTimerOrBlockTask+0x90>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d101      	bne.n	801339c <prvProcessTimerOrBlockTask+0x50>
 8013398:	2301      	movs	r3, #1
 801339a:	e000      	b.n	801339e <prvProcessTimerOrBlockTask+0x52>
 801339c:	2300      	movs	r3, #0
 801339e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80133a0:	4b0f      	ldr	r3, [pc, #60]	; (80133e0 <prvProcessTimerOrBlockTask+0x94>)
 80133a2:	6818      	ldr	r0, [r3, #0]
 80133a4:	687a      	ldr	r2, [r7, #4]
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	1ad3      	subs	r3, r2, r3
 80133aa:	683a      	ldr	r2, [r7, #0]
 80133ac:	4619      	mov	r1, r3
 80133ae:	f7fe fc6d 	bl	8011c8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80133b2:	f7fe ff1b 	bl	80121ec <xTaskResumeAll>
 80133b6:	4603      	mov	r3, r0
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d10a      	bne.n	80133d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80133bc:	4b09      	ldr	r3, [pc, #36]	; (80133e4 <prvProcessTimerOrBlockTask+0x98>)
 80133be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133c2:	601a      	str	r2, [r3, #0]
 80133c4:	f3bf 8f4f 	dsb	sy
 80133c8:	f3bf 8f6f 	isb	sy
}
 80133cc:	e001      	b.n	80133d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80133ce:	f7fe ff0d 	bl	80121ec <xTaskResumeAll>
}
 80133d2:	bf00      	nop
 80133d4:	3710      	adds	r7, #16
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
 80133da:	bf00      	nop
 80133dc:	20002244 	.word	0x20002244
 80133e0:	20002248 	.word	0x20002248
 80133e4:	e000ed04 	.word	0xe000ed04

080133e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80133e8:	b480      	push	{r7}
 80133ea:	b085      	sub	sp, #20
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80133f0:	4b0e      	ldr	r3, [pc, #56]	; (801342c <prvGetNextExpireTime+0x44>)
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d101      	bne.n	80133fe <prvGetNextExpireTime+0x16>
 80133fa:	2201      	movs	r2, #1
 80133fc:	e000      	b.n	8013400 <prvGetNextExpireTime+0x18>
 80133fe:	2200      	movs	r2, #0
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d105      	bne.n	8013418 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801340c:	4b07      	ldr	r3, [pc, #28]	; (801342c <prvGetNextExpireTime+0x44>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	68db      	ldr	r3, [r3, #12]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	60fb      	str	r3, [r7, #12]
 8013416:	e001      	b.n	801341c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013418:	2300      	movs	r3, #0
 801341a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801341c:	68fb      	ldr	r3, [r7, #12]
}
 801341e:	4618      	mov	r0, r3
 8013420:	3714      	adds	r7, #20
 8013422:	46bd      	mov	sp, r7
 8013424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013428:	4770      	bx	lr
 801342a:	bf00      	nop
 801342c:	20002240 	.word	0x20002240

08013430 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b084      	sub	sp, #16
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013438:	f7fe ff74 	bl	8012324 <xTaskGetTickCount>
 801343c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801343e:	4b0b      	ldr	r3, [pc, #44]	; (801346c <prvSampleTimeNow+0x3c>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	68fa      	ldr	r2, [r7, #12]
 8013444:	429a      	cmp	r2, r3
 8013446:	d205      	bcs.n	8013454 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013448:	f000 f930 	bl	80136ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	2201      	movs	r2, #1
 8013450:	601a      	str	r2, [r3, #0]
 8013452:	e002      	b.n	801345a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	2200      	movs	r2, #0
 8013458:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801345a:	4a04      	ldr	r2, [pc, #16]	; (801346c <prvSampleTimeNow+0x3c>)
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013460:	68fb      	ldr	r3, [r7, #12]
}
 8013462:	4618      	mov	r0, r3
 8013464:	3710      	adds	r7, #16
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}
 801346a:	bf00      	nop
 801346c:	20002250 	.word	0x20002250

08013470 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b086      	sub	sp, #24
 8013474:	af00      	add	r7, sp, #0
 8013476:	60f8      	str	r0, [r7, #12]
 8013478:	60b9      	str	r1, [r7, #8]
 801347a:	607a      	str	r2, [r7, #4]
 801347c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801347e:	2300      	movs	r3, #0
 8013480:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	68ba      	ldr	r2, [r7, #8]
 8013486:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	68fa      	ldr	r2, [r7, #12]
 801348c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801348e:	68ba      	ldr	r2, [r7, #8]
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	429a      	cmp	r2, r3
 8013494:	d812      	bhi.n	80134bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013496:	687a      	ldr	r2, [r7, #4]
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	1ad2      	subs	r2, r2, r3
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	699b      	ldr	r3, [r3, #24]
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d302      	bcc.n	80134aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80134a4:	2301      	movs	r3, #1
 80134a6:	617b      	str	r3, [r7, #20]
 80134a8:	e01b      	b.n	80134e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80134aa:	4b10      	ldr	r3, [pc, #64]	; (80134ec <prvInsertTimerInActiveList+0x7c>)
 80134ac:	681a      	ldr	r2, [r3, #0]
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	3304      	adds	r3, #4
 80134b2:	4619      	mov	r1, r3
 80134b4:	4610      	mov	r0, r2
 80134b6:	f7fd fb18 	bl	8010aea <vListInsert>
 80134ba:	e012      	b.n	80134e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80134bc:	687a      	ldr	r2, [r7, #4]
 80134be:	683b      	ldr	r3, [r7, #0]
 80134c0:	429a      	cmp	r2, r3
 80134c2:	d206      	bcs.n	80134d2 <prvInsertTimerInActiveList+0x62>
 80134c4:	68ba      	ldr	r2, [r7, #8]
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	429a      	cmp	r2, r3
 80134ca:	d302      	bcc.n	80134d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80134cc:	2301      	movs	r3, #1
 80134ce:	617b      	str	r3, [r7, #20]
 80134d0:	e007      	b.n	80134e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80134d2:	4b07      	ldr	r3, [pc, #28]	; (80134f0 <prvInsertTimerInActiveList+0x80>)
 80134d4:	681a      	ldr	r2, [r3, #0]
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	3304      	adds	r3, #4
 80134da:	4619      	mov	r1, r3
 80134dc:	4610      	mov	r0, r2
 80134de:	f7fd fb04 	bl	8010aea <vListInsert>
		}
	}

	return xProcessTimerNow;
 80134e2:	697b      	ldr	r3, [r7, #20]
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	3718      	adds	r7, #24
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}
 80134ec:	20002244 	.word	0x20002244
 80134f0:	20002240 	.word	0x20002240

080134f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b08e      	sub	sp, #56	; 0x38
 80134f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80134fa:	e0c6      	b.n	801368a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	da17      	bge.n	8013532 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013502:	1d3b      	adds	r3, r7, #4
 8013504:	3304      	adds	r3, #4
 8013506:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801350a:	2b00      	cmp	r3, #0
 801350c:	d109      	bne.n	8013522 <prvProcessReceivedCommands+0x2e>
 801350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013512:	f383 8811 	msr	BASEPRI, r3
 8013516:	f3bf 8f6f 	isb	sy
 801351a:	f3bf 8f4f 	dsb	sy
 801351e:	61fb      	str	r3, [r7, #28]
 8013520:	e7fe      	b.n	8013520 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013528:	6850      	ldr	r0, [r2, #4]
 801352a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801352c:	6892      	ldr	r2, [r2, #8]
 801352e:	4611      	mov	r1, r2
 8013530:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2b00      	cmp	r3, #0
 8013536:	f2c0 80a7 	blt.w	8013688 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013540:	695b      	ldr	r3, [r3, #20]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d004      	beq.n	8013550 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013548:	3304      	adds	r3, #4
 801354a:	4618      	mov	r0, r3
 801354c:	f7fd fb06 	bl	8010b5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013550:	463b      	mov	r3, r7
 8013552:	4618      	mov	r0, r3
 8013554:	f7ff ff6c 	bl	8013430 <prvSampleTimeNow>
 8013558:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2b09      	cmp	r3, #9
 801355e:	f200 8094 	bhi.w	801368a <prvProcessReceivedCommands+0x196>
 8013562:	a201      	add	r2, pc, #4	; (adr r2, 8013568 <prvProcessReceivedCommands+0x74>)
 8013564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013568:	08013591 	.word	0x08013591
 801356c:	08013591 	.word	0x08013591
 8013570:	08013591 	.word	0x08013591
 8013574:	08013603 	.word	0x08013603
 8013578:	08013617 	.word	0x08013617
 801357c:	0801365f 	.word	0x0801365f
 8013580:	08013591 	.word	0x08013591
 8013584:	08013591 	.word	0x08013591
 8013588:	08013603 	.word	0x08013603
 801358c:	08013617 	.word	0x08013617
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013596:	f043 0301 	orr.w	r3, r3, #1
 801359a:	b2da      	uxtb	r2, r3
 801359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801359e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80135a2:	68ba      	ldr	r2, [r7, #8]
 80135a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a6:	699b      	ldr	r3, [r3, #24]
 80135a8:	18d1      	adds	r1, r2, r3
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135b0:	f7ff ff5e 	bl	8013470 <prvInsertTimerInActiveList>
 80135b4:	4603      	mov	r3, r0
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d067      	beq.n	801368a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80135ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135bc:	6a1b      	ldr	r3, [r3, #32]
 80135be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80135c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80135c8:	f003 0304 	and.w	r3, r3, #4
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d05c      	beq.n	801368a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80135d0:	68ba      	ldr	r2, [r7, #8]
 80135d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d4:	699b      	ldr	r3, [r3, #24]
 80135d6:	441a      	add	r2, r3
 80135d8:	2300      	movs	r3, #0
 80135da:	9300      	str	r3, [sp, #0]
 80135dc:	2300      	movs	r3, #0
 80135de:	2100      	movs	r1, #0
 80135e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135e2:	f7ff fe09 	bl	80131f8 <xTimerGenericCommand>
 80135e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80135e8:	6a3b      	ldr	r3, [r7, #32]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d14d      	bne.n	801368a <prvProcessReceivedCommands+0x196>
 80135ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135f2:	f383 8811 	msr	BASEPRI, r3
 80135f6:	f3bf 8f6f 	isb	sy
 80135fa:	f3bf 8f4f 	dsb	sy
 80135fe:	61bb      	str	r3, [r7, #24]
 8013600:	e7fe      	b.n	8013600 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013608:	f023 0301 	bic.w	r3, r3, #1
 801360c:	b2da      	uxtb	r2, r3
 801360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013610:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013614:	e039      	b.n	801368a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801361c:	f043 0301 	orr.w	r3, r3, #1
 8013620:	b2da      	uxtb	r2, r3
 8013622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013624:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013628:	68ba      	ldr	r2, [r7, #8]
 801362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801362c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013630:	699b      	ldr	r3, [r3, #24]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d109      	bne.n	801364a <prvProcessReceivedCommands+0x156>
 8013636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801363a:	f383 8811 	msr	BASEPRI, r3
 801363e:	f3bf 8f6f 	isb	sy
 8013642:	f3bf 8f4f 	dsb	sy
 8013646:	617b      	str	r3, [r7, #20]
 8013648:	e7fe      	b.n	8013648 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801364c:	699a      	ldr	r2, [r3, #24]
 801364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013650:	18d1      	adds	r1, r2, r3
 8013652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013658:	f7ff ff0a 	bl	8013470 <prvInsertTimerInActiveList>
					break;
 801365c:	e015      	b.n	801368a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013664:	f003 0302 	and.w	r3, r3, #2
 8013668:	2b00      	cmp	r3, #0
 801366a:	d103      	bne.n	8013674 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 801366c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801366e:	f000 fbc1 	bl	8013df4 <vPortFree>
 8013672:	e00a      	b.n	801368a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013676:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801367a:	f023 0301 	bic.w	r3, r3, #1
 801367e:	b2da      	uxtb	r2, r3
 8013680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013682:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013686:	e000      	b.n	801368a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013688:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801368a:	4b07      	ldr	r3, [pc, #28]	; (80136a8 <prvProcessReceivedCommands+0x1b4>)
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	1d39      	adds	r1, r7, #4
 8013690:	2200      	movs	r2, #0
 8013692:	4618      	mov	r0, r3
 8013694:	f7fd fefc 	bl	8011490 <xQueueReceive>
 8013698:	4603      	mov	r3, r0
 801369a:	2b00      	cmp	r3, #0
 801369c:	f47f af2e 	bne.w	80134fc <prvProcessReceivedCommands+0x8>
	}
}
 80136a0:	bf00      	nop
 80136a2:	3730      	adds	r7, #48	; 0x30
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}
 80136a8:	20002248 	.word	0x20002248

080136ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b088      	sub	sp, #32
 80136b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80136b2:	e047      	b.n	8013744 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80136b4:	4b2d      	ldr	r3, [pc, #180]	; (801376c <prvSwitchTimerLists+0xc0>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	68db      	ldr	r3, [r3, #12]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136be:	4b2b      	ldr	r3, [pc, #172]	; (801376c <prvSwitchTimerLists+0xc0>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	68db      	ldr	r3, [r3, #12]
 80136c4:	68db      	ldr	r3, [r3, #12]
 80136c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	3304      	adds	r3, #4
 80136cc:	4618      	mov	r0, r3
 80136ce:	f7fd fa45 	bl	8010b5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	6a1b      	ldr	r3, [r3, #32]
 80136d6:	68f8      	ldr	r0, [r7, #12]
 80136d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136e0:	f003 0304 	and.w	r3, r3, #4
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d02d      	beq.n	8013744 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	699b      	ldr	r3, [r3, #24]
 80136ec:	693a      	ldr	r2, [r7, #16]
 80136ee:	4413      	add	r3, r2
 80136f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80136f2:	68ba      	ldr	r2, [r7, #8]
 80136f4:	693b      	ldr	r3, [r7, #16]
 80136f6:	429a      	cmp	r2, r3
 80136f8:	d90e      	bls.n	8013718 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	68ba      	ldr	r2, [r7, #8]
 80136fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	68fa      	ldr	r2, [r7, #12]
 8013704:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013706:	4b19      	ldr	r3, [pc, #100]	; (801376c <prvSwitchTimerLists+0xc0>)
 8013708:	681a      	ldr	r2, [r3, #0]
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	3304      	adds	r3, #4
 801370e:	4619      	mov	r1, r3
 8013710:	4610      	mov	r0, r2
 8013712:	f7fd f9ea 	bl	8010aea <vListInsert>
 8013716:	e015      	b.n	8013744 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013718:	2300      	movs	r3, #0
 801371a:	9300      	str	r3, [sp, #0]
 801371c:	2300      	movs	r3, #0
 801371e:	693a      	ldr	r2, [r7, #16]
 8013720:	2100      	movs	r1, #0
 8013722:	68f8      	ldr	r0, [r7, #12]
 8013724:	f7ff fd68 	bl	80131f8 <xTimerGenericCommand>
 8013728:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d109      	bne.n	8013744 <prvSwitchTimerLists+0x98>
 8013730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013734:	f383 8811 	msr	BASEPRI, r3
 8013738:	f3bf 8f6f 	isb	sy
 801373c:	f3bf 8f4f 	dsb	sy
 8013740:	603b      	str	r3, [r7, #0]
 8013742:	e7fe      	b.n	8013742 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013744:	4b09      	ldr	r3, [pc, #36]	; (801376c <prvSwitchTimerLists+0xc0>)
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d1b2      	bne.n	80136b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801374e:	4b07      	ldr	r3, [pc, #28]	; (801376c <prvSwitchTimerLists+0xc0>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013754:	4b06      	ldr	r3, [pc, #24]	; (8013770 <prvSwitchTimerLists+0xc4>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	4a04      	ldr	r2, [pc, #16]	; (801376c <prvSwitchTimerLists+0xc0>)
 801375a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801375c:	4a04      	ldr	r2, [pc, #16]	; (8013770 <prvSwitchTimerLists+0xc4>)
 801375e:	697b      	ldr	r3, [r7, #20]
 8013760:	6013      	str	r3, [r2, #0]
}
 8013762:	bf00      	nop
 8013764:	3718      	adds	r7, #24
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}
 801376a:	bf00      	nop
 801376c:	20002240 	.word	0x20002240
 8013770:	20002244 	.word	0x20002244

08013774 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b082      	sub	sp, #8
 8013778:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801377a:	f000 f95f 	bl	8013a3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801377e:	4b15      	ldr	r3, [pc, #84]	; (80137d4 <prvCheckForValidListAndQueue+0x60>)
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d120      	bne.n	80137c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013786:	4814      	ldr	r0, [pc, #80]	; (80137d8 <prvCheckForValidListAndQueue+0x64>)
 8013788:	f7fd f95e 	bl	8010a48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801378c:	4813      	ldr	r0, [pc, #76]	; (80137dc <prvCheckForValidListAndQueue+0x68>)
 801378e:	f7fd f95b 	bl	8010a48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013792:	4b13      	ldr	r3, [pc, #76]	; (80137e0 <prvCheckForValidListAndQueue+0x6c>)
 8013794:	4a10      	ldr	r2, [pc, #64]	; (80137d8 <prvCheckForValidListAndQueue+0x64>)
 8013796:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013798:	4b12      	ldr	r3, [pc, #72]	; (80137e4 <prvCheckForValidListAndQueue+0x70>)
 801379a:	4a10      	ldr	r2, [pc, #64]	; (80137dc <prvCheckForValidListAndQueue+0x68>)
 801379c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801379e:	2300      	movs	r3, #0
 80137a0:	9300      	str	r3, [sp, #0]
 80137a2:	4b11      	ldr	r3, [pc, #68]	; (80137e8 <prvCheckForValidListAndQueue+0x74>)
 80137a4:	4a11      	ldr	r2, [pc, #68]	; (80137ec <prvCheckForValidListAndQueue+0x78>)
 80137a6:	2110      	movs	r1, #16
 80137a8:	200a      	movs	r0, #10
 80137aa:	f7fd fa69 	bl	8010c80 <xQueueGenericCreateStatic>
 80137ae:	4602      	mov	r2, r0
 80137b0:	4b08      	ldr	r3, [pc, #32]	; (80137d4 <prvCheckForValidListAndQueue+0x60>)
 80137b2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80137b4:	4b07      	ldr	r3, [pc, #28]	; (80137d4 <prvCheckForValidListAndQueue+0x60>)
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d005      	beq.n	80137c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80137bc:	4b05      	ldr	r3, [pc, #20]	; (80137d4 <prvCheckForValidListAndQueue+0x60>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	490b      	ldr	r1, [pc, #44]	; (80137f0 <prvCheckForValidListAndQueue+0x7c>)
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7fe fa10 	bl	8011be8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80137c8:	f000 f966 	bl	8013a98 <vPortExitCritical>
}
 80137cc:	bf00      	nop
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
 80137d2:	bf00      	nop
 80137d4:	20002248 	.word	0x20002248
 80137d8:	20002218 	.word	0x20002218
 80137dc:	2000222c 	.word	0x2000222c
 80137e0:	20002240 	.word	0x20002240
 80137e4:	20002244 	.word	0x20002244
 80137e8:	200022f4 	.word	0x200022f4
 80137ec:	20002254 	.word	0x20002254
 80137f0:	08016d08 	.word	0x08016d08

080137f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80137f4:	b480      	push	{r7}
 80137f6:	b085      	sub	sp, #20
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	60f8      	str	r0, [r7, #12]
 80137fc:	60b9      	str	r1, [r7, #8]
 80137fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	3b04      	subs	r3, #4
 8013804:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801380c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	3b04      	subs	r3, #4
 8013812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013814:	68bb      	ldr	r3, [r7, #8]
 8013816:	f023 0201 	bic.w	r2, r3, #1
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	3b04      	subs	r3, #4
 8013822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013824:	4a0c      	ldr	r2, [pc, #48]	; (8013858 <pxPortInitialiseStack+0x64>)
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	3b14      	subs	r3, #20
 801382e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013830:	687a      	ldr	r2, [r7, #4]
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	3b04      	subs	r3, #4
 801383a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	f06f 0202 	mvn.w	r2, #2
 8013842:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	3b20      	subs	r3, #32
 8013848:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801384a:	68fb      	ldr	r3, [r7, #12]
}
 801384c:	4618      	mov	r0, r3
 801384e:	3714      	adds	r7, #20
 8013850:	46bd      	mov	sp, r7
 8013852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013856:	4770      	bx	lr
 8013858:	0801385d 	.word	0x0801385d

0801385c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801385c:	b480      	push	{r7}
 801385e:	b085      	sub	sp, #20
 8013860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013862:	2300      	movs	r3, #0
 8013864:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013866:	4b11      	ldr	r3, [pc, #68]	; (80138ac <prvTaskExitError+0x50>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801386e:	d009      	beq.n	8013884 <prvTaskExitError+0x28>
 8013870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013874:	f383 8811 	msr	BASEPRI, r3
 8013878:	f3bf 8f6f 	isb	sy
 801387c:	f3bf 8f4f 	dsb	sy
 8013880:	60fb      	str	r3, [r7, #12]
 8013882:	e7fe      	b.n	8013882 <prvTaskExitError+0x26>
 8013884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013888:	f383 8811 	msr	BASEPRI, r3
 801388c:	f3bf 8f6f 	isb	sy
 8013890:	f3bf 8f4f 	dsb	sy
 8013894:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013896:	bf00      	nop
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d0fc      	beq.n	8013898 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801389e:	bf00      	nop
 80138a0:	3714      	adds	r7, #20
 80138a2:	46bd      	mov	sp, r7
 80138a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a8:	4770      	bx	lr
 80138aa:	bf00      	nop
 80138ac:	20000160 	.word	0x20000160

080138b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80138b0:	4b07      	ldr	r3, [pc, #28]	; (80138d0 <pxCurrentTCBConst2>)
 80138b2:	6819      	ldr	r1, [r3, #0]
 80138b4:	6808      	ldr	r0, [r1, #0]
 80138b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ba:	f380 8809 	msr	PSP, r0
 80138be:	f3bf 8f6f 	isb	sy
 80138c2:	f04f 0000 	mov.w	r0, #0
 80138c6:	f380 8811 	msr	BASEPRI, r0
 80138ca:	4770      	bx	lr
 80138cc:	f3af 8000 	nop.w

080138d0 <pxCurrentTCBConst2>:
 80138d0:	20001d18 	.word	0x20001d18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80138d4:	bf00      	nop
 80138d6:	bf00      	nop

080138d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80138d8:	4808      	ldr	r0, [pc, #32]	; (80138fc <prvPortStartFirstTask+0x24>)
 80138da:	6800      	ldr	r0, [r0, #0]
 80138dc:	6800      	ldr	r0, [r0, #0]
 80138de:	f380 8808 	msr	MSP, r0
 80138e2:	f04f 0000 	mov.w	r0, #0
 80138e6:	f380 8814 	msr	CONTROL, r0
 80138ea:	b662      	cpsie	i
 80138ec:	b661      	cpsie	f
 80138ee:	f3bf 8f4f 	dsb	sy
 80138f2:	f3bf 8f6f 	isb	sy
 80138f6:	df00      	svc	0
 80138f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80138fa:	bf00      	nop
 80138fc:	e000ed08 	.word	0xe000ed08

08013900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b086      	sub	sp, #24
 8013904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013906:	4b44      	ldr	r3, [pc, #272]	; (8013a18 <xPortStartScheduler+0x118>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	4a44      	ldr	r2, [pc, #272]	; (8013a1c <xPortStartScheduler+0x11c>)
 801390c:	4293      	cmp	r3, r2
 801390e:	d109      	bne.n	8013924 <xPortStartScheduler+0x24>
 8013910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013914:	f383 8811 	msr	BASEPRI, r3
 8013918:	f3bf 8f6f 	isb	sy
 801391c:	f3bf 8f4f 	dsb	sy
 8013920:	613b      	str	r3, [r7, #16]
 8013922:	e7fe      	b.n	8013922 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013924:	4b3c      	ldr	r3, [pc, #240]	; (8013a18 <xPortStartScheduler+0x118>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	4a3d      	ldr	r2, [pc, #244]	; (8013a20 <xPortStartScheduler+0x120>)
 801392a:	4293      	cmp	r3, r2
 801392c:	d109      	bne.n	8013942 <xPortStartScheduler+0x42>
 801392e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013932:	f383 8811 	msr	BASEPRI, r3
 8013936:	f3bf 8f6f 	isb	sy
 801393a:	f3bf 8f4f 	dsb	sy
 801393e:	60fb      	str	r3, [r7, #12]
 8013940:	e7fe      	b.n	8013940 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013942:	4b38      	ldr	r3, [pc, #224]	; (8013a24 <xPortStartScheduler+0x124>)
 8013944:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	781b      	ldrb	r3, [r3, #0]
 801394a:	b2db      	uxtb	r3, r3
 801394c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	22ff      	movs	r2, #255	; 0xff
 8013952:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013954:	697b      	ldr	r3, [r7, #20]
 8013956:	781b      	ldrb	r3, [r3, #0]
 8013958:	b2db      	uxtb	r3, r3
 801395a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801395c:	78fb      	ldrb	r3, [r7, #3]
 801395e:	b2db      	uxtb	r3, r3
 8013960:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013964:	b2da      	uxtb	r2, r3
 8013966:	4b30      	ldr	r3, [pc, #192]	; (8013a28 <xPortStartScheduler+0x128>)
 8013968:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801396a:	4b30      	ldr	r3, [pc, #192]	; (8013a2c <xPortStartScheduler+0x12c>)
 801396c:	2207      	movs	r2, #7
 801396e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013970:	e009      	b.n	8013986 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8013972:	4b2e      	ldr	r3, [pc, #184]	; (8013a2c <xPortStartScheduler+0x12c>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	3b01      	subs	r3, #1
 8013978:	4a2c      	ldr	r2, [pc, #176]	; (8013a2c <xPortStartScheduler+0x12c>)
 801397a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801397c:	78fb      	ldrb	r3, [r7, #3]
 801397e:	b2db      	uxtb	r3, r3
 8013980:	005b      	lsls	r3, r3, #1
 8013982:	b2db      	uxtb	r3, r3
 8013984:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013986:	78fb      	ldrb	r3, [r7, #3]
 8013988:	b2db      	uxtb	r3, r3
 801398a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801398e:	2b80      	cmp	r3, #128	; 0x80
 8013990:	d0ef      	beq.n	8013972 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013992:	4b26      	ldr	r3, [pc, #152]	; (8013a2c <xPortStartScheduler+0x12c>)
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	f1c3 0307 	rsb	r3, r3, #7
 801399a:	2b04      	cmp	r3, #4
 801399c:	d009      	beq.n	80139b2 <xPortStartScheduler+0xb2>
 801399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139a2:	f383 8811 	msr	BASEPRI, r3
 80139a6:	f3bf 8f6f 	isb	sy
 80139aa:	f3bf 8f4f 	dsb	sy
 80139ae:	60bb      	str	r3, [r7, #8]
 80139b0:	e7fe      	b.n	80139b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80139b2:	4b1e      	ldr	r3, [pc, #120]	; (8013a2c <xPortStartScheduler+0x12c>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	021b      	lsls	r3, r3, #8
 80139b8:	4a1c      	ldr	r2, [pc, #112]	; (8013a2c <xPortStartScheduler+0x12c>)
 80139ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80139bc:	4b1b      	ldr	r3, [pc, #108]	; (8013a2c <xPortStartScheduler+0x12c>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80139c4:	4a19      	ldr	r2, [pc, #100]	; (8013a2c <xPortStartScheduler+0x12c>)
 80139c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	b2da      	uxtb	r2, r3
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80139d0:	4b17      	ldr	r3, [pc, #92]	; (8013a30 <xPortStartScheduler+0x130>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	4a16      	ldr	r2, [pc, #88]	; (8013a30 <xPortStartScheduler+0x130>)
 80139d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80139da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80139dc:	4b14      	ldr	r3, [pc, #80]	; (8013a30 <xPortStartScheduler+0x130>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	4a13      	ldr	r2, [pc, #76]	; (8013a30 <xPortStartScheduler+0x130>)
 80139e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80139e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80139e8:	f000 f8d6 	bl	8013b98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80139ec:	4b11      	ldr	r3, [pc, #68]	; (8013a34 <xPortStartScheduler+0x134>)
 80139ee:	2200      	movs	r2, #0
 80139f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80139f2:	f000 f8f5 	bl	8013be0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80139f6:	4b10      	ldr	r3, [pc, #64]	; (8013a38 <xPortStartScheduler+0x138>)
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	4a0f      	ldr	r2, [pc, #60]	; (8013a38 <xPortStartScheduler+0x138>)
 80139fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013a00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013a02:	f7ff ff69 	bl	80138d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013a06:	f7fe fd55 	bl	80124b4 <vTaskSwitchContext>
	prvTaskExitError();
 8013a0a:	f7ff ff27 	bl	801385c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013a0e:	2300      	movs	r3, #0
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3718      	adds	r7, #24
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}
 8013a18:	e000ed00 	.word	0xe000ed00
 8013a1c:	410fc271 	.word	0x410fc271
 8013a20:	410fc270 	.word	0x410fc270
 8013a24:	e000e400 	.word	0xe000e400
 8013a28:	20002344 	.word	0x20002344
 8013a2c:	20002348 	.word	0x20002348
 8013a30:	e000ed20 	.word	0xe000ed20
 8013a34:	20000160 	.word	0x20000160
 8013a38:	e000ef34 	.word	0xe000ef34

08013a3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013a3c:	b480      	push	{r7}
 8013a3e:	b083      	sub	sp, #12
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a46:	f383 8811 	msr	BASEPRI, r3
 8013a4a:	f3bf 8f6f 	isb	sy
 8013a4e:	f3bf 8f4f 	dsb	sy
 8013a52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013a54:	4b0e      	ldr	r3, [pc, #56]	; (8013a90 <vPortEnterCritical+0x54>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	3301      	adds	r3, #1
 8013a5a:	4a0d      	ldr	r2, [pc, #52]	; (8013a90 <vPortEnterCritical+0x54>)
 8013a5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013a5e:	4b0c      	ldr	r3, [pc, #48]	; (8013a90 <vPortEnterCritical+0x54>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	2b01      	cmp	r3, #1
 8013a64:	d10e      	bne.n	8013a84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013a66:	4b0b      	ldr	r3, [pc, #44]	; (8013a94 <vPortEnterCritical+0x58>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	b2db      	uxtb	r3, r3
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d009      	beq.n	8013a84 <vPortEnterCritical+0x48>
 8013a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a74:	f383 8811 	msr	BASEPRI, r3
 8013a78:	f3bf 8f6f 	isb	sy
 8013a7c:	f3bf 8f4f 	dsb	sy
 8013a80:	603b      	str	r3, [r7, #0]
 8013a82:	e7fe      	b.n	8013a82 <vPortEnterCritical+0x46>
	}
}
 8013a84:	bf00      	nop
 8013a86:	370c      	adds	r7, #12
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8e:	4770      	bx	lr
 8013a90:	20000160 	.word	0x20000160
 8013a94:	e000ed04 	.word	0xe000ed04

08013a98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013a98:	b480      	push	{r7}
 8013a9a:	b083      	sub	sp, #12
 8013a9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013a9e:	4b11      	ldr	r3, [pc, #68]	; (8013ae4 <vPortExitCritical+0x4c>)
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d109      	bne.n	8013aba <vPortExitCritical+0x22>
 8013aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aaa:	f383 8811 	msr	BASEPRI, r3
 8013aae:	f3bf 8f6f 	isb	sy
 8013ab2:	f3bf 8f4f 	dsb	sy
 8013ab6:	607b      	str	r3, [r7, #4]
 8013ab8:	e7fe      	b.n	8013ab8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8013aba:	4b0a      	ldr	r3, [pc, #40]	; (8013ae4 <vPortExitCritical+0x4c>)
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	3b01      	subs	r3, #1
 8013ac0:	4a08      	ldr	r2, [pc, #32]	; (8013ae4 <vPortExitCritical+0x4c>)
 8013ac2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013ac4:	4b07      	ldr	r3, [pc, #28]	; (8013ae4 <vPortExitCritical+0x4c>)
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d104      	bne.n	8013ad6 <vPortExitCritical+0x3e>
 8013acc:	2300      	movs	r3, #0
 8013ace:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013ad0:	683b      	ldr	r3, [r7, #0]
 8013ad2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8013ad6:	bf00      	nop
 8013ad8:	370c      	adds	r7, #12
 8013ada:	46bd      	mov	sp, r7
 8013adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae0:	4770      	bx	lr
 8013ae2:	bf00      	nop
 8013ae4:	20000160 	.word	0x20000160
	...

08013af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013af0:	f3ef 8009 	mrs	r0, PSP
 8013af4:	f3bf 8f6f 	isb	sy
 8013af8:	4b15      	ldr	r3, [pc, #84]	; (8013b50 <pxCurrentTCBConst>)
 8013afa:	681a      	ldr	r2, [r3, #0]
 8013afc:	f01e 0f10 	tst.w	lr, #16
 8013b00:	bf08      	it	eq
 8013b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b0a:	6010      	str	r0, [r2, #0]
 8013b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013b10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013b14:	f380 8811 	msr	BASEPRI, r0
 8013b18:	f3bf 8f4f 	dsb	sy
 8013b1c:	f3bf 8f6f 	isb	sy
 8013b20:	f7fe fcc8 	bl	80124b4 <vTaskSwitchContext>
 8013b24:	f04f 0000 	mov.w	r0, #0
 8013b28:	f380 8811 	msr	BASEPRI, r0
 8013b2c:	bc09      	pop	{r0, r3}
 8013b2e:	6819      	ldr	r1, [r3, #0]
 8013b30:	6808      	ldr	r0, [r1, #0]
 8013b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b36:	f01e 0f10 	tst.w	lr, #16
 8013b3a:	bf08      	it	eq
 8013b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013b40:	f380 8809 	msr	PSP, r0
 8013b44:	f3bf 8f6f 	isb	sy
 8013b48:	4770      	bx	lr
 8013b4a:	bf00      	nop
 8013b4c:	f3af 8000 	nop.w

08013b50 <pxCurrentTCBConst>:
 8013b50:	20001d18 	.word	0x20001d18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013b54:	bf00      	nop
 8013b56:	bf00      	nop

08013b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b082      	sub	sp, #8
 8013b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8013b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b62:	f383 8811 	msr	BASEPRI, r3
 8013b66:	f3bf 8f6f 	isb	sy
 8013b6a:	f3bf 8f4f 	dsb	sy
 8013b6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013b70:	f7fe fbe8 	bl	8012344 <xTaskIncrementTick>
 8013b74:	4603      	mov	r3, r0
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d003      	beq.n	8013b82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013b7a:	4b06      	ldr	r3, [pc, #24]	; (8013b94 <SysTick_Handler+0x3c>)
 8013b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b80:	601a      	str	r2, [r3, #0]
 8013b82:	2300      	movs	r3, #0
 8013b84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8013b8c:	bf00      	nop
 8013b8e:	3708      	adds	r7, #8
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}
 8013b94:	e000ed04 	.word	0xe000ed04

08013b98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013b98:	b480      	push	{r7}
 8013b9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013b9c:	4b0b      	ldr	r3, [pc, #44]	; (8013bcc <vPortSetupTimerInterrupt+0x34>)
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013ba2:	4b0b      	ldr	r3, [pc, #44]	; (8013bd0 <vPortSetupTimerInterrupt+0x38>)
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013ba8:	4b0a      	ldr	r3, [pc, #40]	; (8013bd4 <vPortSetupTimerInterrupt+0x3c>)
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	4a0a      	ldr	r2, [pc, #40]	; (8013bd8 <vPortSetupTimerInterrupt+0x40>)
 8013bae:	fba2 2303 	umull	r2, r3, r2, r3
 8013bb2:	099b      	lsrs	r3, r3, #6
 8013bb4:	4a09      	ldr	r2, [pc, #36]	; (8013bdc <vPortSetupTimerInterrupt+0x44>)
 8013bb6:	3b01      	subs	r3, #1
 8013bb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013bba:	4b04      	ldr	r3, [pc, #16]	; (8013bcc <vPortSetupTimerInterrupt+0x34>)
 8013bbc:	2207      	movs	r2, #7
 8013bbe:	601a      	str	r2, [r3, #0]
}
 8013bc0:	bf00      	nop
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc8:	4770      	bx	lr
 8013bca:	bf00      	nop
 8013bcc:	e000e010 	.word	0xe000e010
 8013bd0:	e000e018 	.word	0xe000e018
 8013bd4:	20000044 	.word	0x20000044
 8013bd8:	10624dd3 	.word	0x10624dd3
 8013bdc:	e000e014 	.word	0xe000e014

08013be0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013be0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013bf0 <vPortEnableVFP+0x10>
 8013be4:	6801      	ldr	r1, [r0, #0]
 8013be6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013bea:	6001      	str	r1, [r0, #0]
 8013bec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013bee:	bf00      	nop
 8013bf0:	e000ed88 	.word	0xe000ed88

08013bf4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013bf4:	b480      	push	{r7}
 8013bf6:	b085      	sub	sp, #20
 8013bf8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013bfa:	f3ef 8305 	mrs	r3, IPSR
 8013bfe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	2b0f      	cmp	r3, #15
 8013c04:	d913      	bls.n	8013c2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013c06:	4a16      	ldr	r2, [pc, #88]	; (8013c60 <vPortValidateInterruptPriority+0x6c>)
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	4413      	add	r3, r2
 8013c0c:	781b      	ldrb	r3, [r3, #0]
 8013c0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013c10:	4b14      	ldr	r3, [pc, #80]	; (8013c64 <vPortValidateInterruptPriority+0x70>)
 8013c12:	781b      	ldrb	r3, [r3, #0]
 8013c14:	7afa      	ldrb	r2, [r7, #11]
 8013c16:	429a      	cmp	r2, r3
 8013c18:	d209      	bcs.n	8013c2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8013c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c1e:	f383 8811 	msr	BASEPRI, r3
 8013c22:	f3bf 8f6f 	isb	sy
 8013c26:	f3bf 8f4f 	dsb	sy
 8013c2a:	607b      	str	r3, [r7, #4]
 8013c2c:	e7fe      	b.n	8013c2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013c2e:	4b0e      	ldr	r3, [pc, #56]	; (8013c68 <vPortValidateInterruptPriority+0x74>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013c36:	4b0d      	ldr	r3, [pc, #52]	; (8013c6c <vPortValidateInterruptPriority+0x78>)
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	429a      	cmp	r2, r3
 8013c3c:	d909      	bls.n	8013c52 <vPortValidateInterruptPriority+0x5e>
 8013c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c42:	f383 8811 	msr	BASEPRI, r3
 8013c46:	f3bf 8f6f 	isb	sy
 8013c4a:	f3bf 8f4f 	dsb	sy
 8013c4e:	603b      	str	r3, [r7, #0]
 8013c50:	e7fe      	b.n	8013c50 <vPortValidateInterruptPriority+0x5c>
	}
 8013c52:	bf00      	nop
 8013c54:	3714      	adds	r7, #20
 8013c56:	46bd      	mov	sp, r7
 8013c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5c:	4770      	bx	lr
 8013c5e:	bf00      	nop
 8013c60:	e000e3f0 	.word	0xe000e3f0
 8013c64:	20002344 	.word	0x20002344
 8013c68:	e000ed0c 	.word	0xe000ed0c
 8013c6c:	20002348 	.word	0x20002348

08013c70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b08a      	sub	sp, #40	; 0x28
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013c78:	2300      	movs	r3, #0
 8013c7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013c7c:	f7fe fa70 	bl	8012160 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013c80:	4b57      	ldr	r3, [pc, #348]	; (8013de0 <pvPortMalloc+0x170>)
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d101      	bne.n	8013c8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013c88:	f000 f90c 	bl	8013ea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013c8c:	4b55      	ldr	r3, [pc, #340]	; (8013de4 <pvPortMalloc+0x174>)
 8013c8e:	681a      	ldr	r2, [r3, #0]
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	4013      	ands	r3, r2
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	f040 808c 	bne.w	8013db2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d01c      	beq.n	8013cda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8013ca0:	2208      	movs	r2, #8
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	4413      	add	r3, r2
 8013ca6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	f003 0307 	and.w	r3, r3, #7
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d013      	beq.n	8013cda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	f023 0307 	bic.w	r3, r3, #7
 8013cb8:	3308      	adds	r3, #8
 8013cba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f003 0307 	and.w	r3, r3, #7
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d009      	beq.n	8013cda <pvPortMalloc+0x6a>
 8013cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cca:	f383 8811 	msr	BASEPRI, r3
 8013cce:	f3bf 8f6f 	isb	sy
 8013cd2:	f3bf 8f4f 	dsb	sy
 8013cd6:	617b      	str	r3, [r7, #20]
 8013cd8:	e7fe      	b.n	8013cd8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d068      	beq.n	8013db2 <pvPortMalloc+0x142>
 8013ce0:	4b41      	ldr	r3, [pc, #260]	; (8013de8 <pvPortMalloc+0x178>)
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	687a      	ldr	r2, [r7, #4]
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d863      	bhi.n	8013db2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013cea:	4b40      	ldr	r3, [pc, #256]	; (8013dec <pvPortMalloc+0x17c>)
 8013cec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013cee:	4b3f      	ldr	r3, [pc, #252]	; (8013dec <pvPortMalloc+0x17c>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013cf4:	e004      	b.n	8013d00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8013cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d02:	685b      	ldr	r3, [r3, #4]
 8013d04:	687a      	ldr	r2, [r7, #4]
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d903      	bls.n	8013d12 <pvPortMalloc+0xa2>
 8013d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d1f1      	bne.n	8013cf6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013d12:	4b33      	ldr	r3, [pc, #204]	; (8013de0 <pvPortMalloc+0x170>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	d04a      	beq.n	8013db2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013d1c:	6a3b      	ldr	r3, [r7, #32]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	2208      	movs	r2, #8
 8013d22:	4413      	add	r3, r2
 8013d24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d28:	681a      	ldr	r2, [r3, #0]
 8013d2a:	6a3b      	ldr	r3, [r7, #32]
 8013d2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d30:	685a      	ldr	r2, [r3, #4]
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	1ad2      	subs	r2, r2, r3
 8013d36:	2308      	movs	r3, #8
 8013d38:	005b      	lsls	r3, r3, #1
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	d91e      	bls.n	8013d7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	4413      	add	r3, r2
 8013d44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013d46:	69bb      	ldr	r3, [r7, #24]
 8013d48:	f003 0307 	and.w	r3, r3, #7
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d009      	beq.n	8013d64 <pvPortMalloc+0xf4>
 8013d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d54:	f383 8811 	msr	BASEPRI, r3
 8013d58:	f3bf 8f6f 	isb	sy
 8013d5c:	f3bf 8f4f 	dsb	sy
 8013d60:	613b      	str	r3, [r7, #16]
 8013d62:	e7fe      	b.n	8013d62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d66:	685a      	ldr	r2, [r3, #4]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	1ad2      	subs	r2, r2, r3
 8013d6c:	69bb      	ldr	r3, [r7, #24]
 8013d6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d72:	687a      	ldr	r2, [r7, #4]
 8013d74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013d76:	69b8      	ldr	r0, [r7, #24]
 8013d78:	f000 f8f6 	bl	8013f68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013d7c:	4b1a      	ldr	r3, [pc, #104]	; (8013de8 <pvPortMalloc+0x178>)
 8013d7e:	681a      	ldr	r2, [r3, #0]
 8013d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d82:	685b      	ldr	r3, [r3, #4]
 8013d84:	1ad3      	subs	r3, r2, r3
 8013d86:	4a18      	ldr	r2, [pc, #96]	; (8013de8 <pvPortMalloc+0x178>)
 8013d88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013d8a:	4b17      	ldr	r3, [pc, #92]	; (8013de8 <pvPortMalloc+0x178>)
 8013d8c:	681a      	ldr	r2, [r3, #0]
 8013d8e:	4b18      	ldr	r3, [pc, #96]	; (8013df0 <pvPortMalloc+0x180>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	429a      	cmp	r2, r3
 8013d94:	d203      	bcs.n	8013d9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013d96:	4b14      	ldr	r3, [pc, #80]	; (8013de8 <pvPortMalloc+0x178>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	4a15      	ldr	r2, [pc, #84]	; (8013df0 <pvPortMalloc+0x180>)
 8013d9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da0:	685a      	ldr	r2, [r3, #4]
 8013da2:	4b10      	ldr	r3, [pc, #64]	; (8013de4 <pvPortMalloc+0x174>)
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	431a      	orrs	r2, r3
 8013da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013daa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dae:	2200      	movs	r2, #0
 8013db0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013db2:	f7fe fa1b 	bl	80121ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013db6:	69fb      	ldr	r3, [r7, #28]
 8013db8:	f003 0307 	and.w	r3, r3, #7
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d009      	beq.n	8013dd4 <pvPortMalloc+0x164>
 8013dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dc4:	f383 8811 	msr	BASEPRI, r3
 8013dc8:	f3bf 8f6f 	isb	sy
 8013dcc:	f3bf 8f4f 	dsb	sy
 8013dd0:	60fb      	str	r3, [r7, #12]
 8013dd2:	e7fe      	b.n	8013dd2 <pvPortMalloc+0x162>
	return pvReturn;
 8013dd4:	69fb      	ldr	r3, [r7, #28]
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3728      	adds	r7, #40	; 0x28
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}
 8013dde:	bf00      	nop
 8013de0:	20004a64 	.word	0x20004a64
 8013de4:	20004a70 	.word	0x20004a70
 8013de8:	20004a68 	.word	0x20004a68
 8013dec:	20004a5c 	.word	0x20004a5c
 8013df0:	20004a6c 	.word	0x20004a6c

08013df4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b086      	sub	sp, #24
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d046      	beq.n	8013e94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013e06:	2308      	movs	r3, #8
 8013e08:	425b      	negs	r3, r3
 8013e0a:	697a      	ldr	r2, [r7, #20]
 8013e0c:	4413      	add	r3, r2
 8013e0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013e14:	693b      	ldr	r3, [r7, #16]
 8013e16:	685a      	ldr	r2, [r3, #4]
 8013e18:	4b20      	ldr	r3, [pc, #128]	; (8013e9c <vPortFree+0xa8>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	4013      	ands	r3, r2
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d109      	bne.n	8013e36 <vPortFree+0x42>
 8013e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e26:	f383 8811 	msr	BASEPRI, r3
 8013e2a:	f3bf 8f6f 	isb	sy
 8013e2e:	f3bf 8f4f 	dsb	sy
 8013e32:	60fb      	str	r3, [r7, #12]
 8013e34:	e7fe      	b.n	8013e34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013e36:	693b      	ldr	r3, [r7, #16]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d009      	beq.n	8013e52 <vPortFree+0x5e>
 8013e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e42:	f383 8811 	msr	BASEPRI, r3
 8013e46:	f3bf 8f6f 	isb	sy
 8013e4a:	f3bf 8f4f 	dsb	sy
 8013e4e:	60bb      	str	r3, [r7, #8]
 8013e50:	e7fe      	b.n	8013e50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	685a      	ldr	r2, [r3, #4]
 8013e56:	4b11      	ldr	r3, [pc, #68]	; (8013e9c <vPortFree+0xa8>)
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	4013      	ands	r3, r2
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d019      	beq.n	8013e94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013e60:	693b      	ldr	r3, [r7, #16]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d115      	bne.n	8013e94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013e68:	693b      	ldr	r3, [r7, #16]
 8013e6a:	685a      	ldr	r2, [r3, #4]
 8013e6c:	4b0b      	ldr	r3, [pc, #44]	; (8013e9c <vPortFree+0xa8>)
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	43db      	mvns	r3, r3
 8013e72:	401a      	ands	r2, r3
 8013e74:	693b      	ldr	r3, [r7, #16]
 8013e76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013e78:	f7fe f972 	bl	8012160 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013e7c:	693b      	ldr	r3, [r7, #16]
 8013e7e:	685a      	ldr	r2, [r3, #4]
 8013e80:	4b07      	ldr	r3, [pc, #28]	; (8013ea0 <vPortFree+0xac>)
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	4413      	add	r3, r2
 8013e86:	4a06      	ldr	r2, [pc, #24]	; (8013ea0 <vPortFree+0xac>)
 8013e88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013e8a:	6938      	ldr	r0, [r7, #16]
 8013e8c:	f000 f86c 	bl	8013f68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013e90:	f7fe f9ac 	bl	80121ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013e94:	bf00      	nop
 8013e96:	3718      	adds	r7, #24
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}
 8013e9c:	20004a70 	.word	0x20004a70
 8013ea0:	20004a68 	.word	0x20004a68

08013ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013ea4:	b480      	push	{r7}
 8013ea6:	b085      	sub	sp, #20
 8013ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013eaa:	f242 7310 	movw	r3, #10000	; 0x2710
 8013eae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013eb0:	4b27      	ldr	r3, [pc, #156]	; (8013f50 <prvHeapInit+0xac>)
 8013eb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	f003 0307 	and.w	r3, r3, #7
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d00c      	beq.n	8013ed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	3307      	adds	r3, #7
 8013ec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	f023 0307 	bic.w	r3, r3, #7
 8013eca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013ecc:	68ba      	ldr	r2, [r7, #8]
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	1ad3      	subs	r3, r2, r3
 8013ed2:	4a1f      	ldr	r2, [pc, #124]	; (8013f50 <prvHeapInit+0xac>)
 8013ed4:	4413      	add	r3, r2
 8013ed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013edc:	4a1d      	ldr	r2, [pc, #116]	; (8013f54 <prvHeapInit+0xb0>)
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013ee2:	4b1c      	ldr	r3, [pc, #112]	; (8013f54 <prvHeapInit+0xb0>)
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	68ba      	ldr	r2, [r7, #8]
 8013eec:	4413      	add	r3, r2
 8013eee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013ef0:	2208      	movs	r2, #8
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	1a9b      	subs	r3, r3, r2
 8013ef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	f023 0307 	bic.w	r3, r3, #7
 8013efe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	4a15      	ldr	r2, [pc, #84]	; (8013f58 <prvHeapInit+0xb4>)
 8013f04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013f06:	4b14      	ldr	r3, [pc, #80]	; (8013f58 <prvHeapInit+0xb4>)
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013f0e:	4b12      	ldr	r3, [pc, #72]	; (8013f58 <prvHeapInit+0xb4>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	2200      	movs	r2, #0
 8013f14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	68fa      	ldr	r2, [r7, #12]
 8013f1e:	1ad2      	subs	r2, r2, r3
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013f24:	4b0c      	ldr	r3, [pc, #48]	; (8013f58 <prvHeapInit+0xb4>)
 8013f26:	681a      	ldr	r2, [r3, #0]
 8013f28:	683b      	ldr	r3, [r7, #0]
 8013f2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013f2c:	683b      	ldr	r3, [r7, #0]
 8013f2e:	685b      	ldr	r3, [r3, #4]
 8013f30:	4a0a      	ldr	r2, [pc, #40]	; (8013f5c <prvHeapInit+0xb8>)
 8013f32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013f34:	683b      	ldr	r3, [r7, #0]
 8013f36:	685b      	ldr	r3, [r3, #4]
 8013f38:	4a09      	ldr	r2, [pc, #36]	; (8013f60 <prvHeapInit+0xbc>)
 8013f3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013f3c:	4b09      	ldr	r3, [pc, #36]	; (8013f64 <prvHeapInit+0xc0>)
 8013f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013f42:	601a      	str	r2, [r3, #0]
}
 8013f44:	bf00      	nop
 8013f46:	3714      	adds	r7, #20
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4e:	4770      	bx	lr
 8013f50:	2000234c 	.word	0x2000234c
 8013f54:	20004a5c 	.word	0x20004a5c
 8013f58:	20004a64 	.word	0x20004a64
 8013f5c:	20004a6c 	.word	0x20004a6c
 8013f60:	20004a68 	.word	0x20004a68
 8013f64:	20004a70 	.word	0x20004a70

08013f68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013f68:	b480      	push	{r7}
 8013f6a:	b085      	sub	sp, #20
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013f70:	4b28      	ldr	r3, [pc, #160]	; (8014014 <prvInsertBlockIntoFreeList+0xac>)
 8013f72:	60fb      	str	r3, [r7, #12]
 8013f74:	e002      	b.n	8013f7c <prvInsertBlockIntoFreeList+0x14>
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	60fb      	str	r3, [r7, #12]
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	687a      	ldr	r2, [r7, #4]
 8013f82:	429a      	cmp	r2, r3
 8013f84:	d8f7      	bhi.n	8013f76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	685b      	ldr	r3, [r3, #4]
 8013f8e:	68ba      	ldr	r2, [r7, #8]
 8013f90:	4413      	add	r3, r2
 8013f92:	687a      	ldr	r2, [r7, #4]
 8013f94:	429a      	cmp	r2, r3
 8013f96:	d108      	bne.n	8013faa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	685a      	ldr	r2, [r3, #4]
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	685b      	ldr	r3, [r3, #4]
 8013fa0:	441a      	add	r2, r3
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	685b      	ldr	r3, [r3, #4]
 8013fb2:	68ba      	ldr	r2, [r7, #8]
 8013fb4:	441a      	add	r2, r3
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	d118      	bne.n	8013ff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	681a      	ldr	r2, [r3, #0]
 8013fc2:	4b15      	ldr	r3, [pc, #84]	; (8014018 <prvInsertBlockIntoFreeList+0xb0>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	429a      	cmp	r2, r3
 8013fc8:	d00d      	beq.n	8013fe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	685a      	ldr	r2, [r3, #4]
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	685b      	ldr	r3, [r3, #4]
 8013fd4:	441a      	add	r2, r3
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	681a      	ldr	r2, [r3, #0]
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	601a      	str	r2, [r3, #0]
 8013fe4:	e008      	b.n	8013ff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013fe6:	4b0c      	ldr	r3, [pc, #48]	; (8014018 <prvInsertBlockIntoFreeList+0xb0>)
 8013fe8:	681a      	ldr	r2, [r3, #0]
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	601a      	str	r2, [r3, #0]
 8013fee:	e003      	b.n	8013ff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	681a      	ldr	r2, [r3, #0]
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013ff8:	68fa      	ldr	r2, [r7, #12]
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	d002      	beq.n	8014006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	687a      	ldr	r2, [r7, #4]
 8014004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014006:	bf00      	nop
 8014008:	3714      	adds	r7, #20
 801400a:	46bd      	mov	sp, r7
 801400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014010:	4770      	bx	lr
 8014012:	bf00      	nop
 8014014:	20004a5c 	.word	0x20004a5c
 8014018:	20004a64 	.word	0x20004a64

0801401c <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b082      	sub	sp, #8
 8014020:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8014022:	f000 f985 	bl	8014330 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8014026:	480e      	ldr	r0, [pc, #56]	; (8014060 <APP_THREAD_Init+0x44>)
 8014028:	f000 fbf2 	bl	8014810 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 801402c:	2101      	movs	r1, #1
 801402e:	2002      	movs	r0, #2
 8014030:	f001 fd2e 	bl	8015a90 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8014034:	f000 fce4 	bl	8014a00 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8014038:	f000 fcd0 	bl	80149dc <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 801403c:	f7fa f800 	bl	800e040 <SHCI_C2_THREAD_Init>
 8014040:	4603      	mov	r3, r0
 8014042:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8014044:	4a07      	ldr	r2, [pc, #28]	; (8014064 <APP_THREAD_Init+0x48>)
 8014046:	2100      	movs	r1, #0
 8014048:	4807      	ldr	r0, [pc, #28]	; (8014068 <APP_THREAD_Init+0x4c>)
 801404a:	f7fb feef 	bl	800fe2c <osThreadNew>
 801404e:	4602      	mov	r2, r0
 8014050:	4b06      	ldr	r3, [pc, #24]	; (801406c <APP_THREAD_Init+0x50>)
 8014052:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8014054:	f000 f86c 	bl	8014130 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 8014058:	bf00      	nop
 801405a:	3708      	adds	r7, #8
 801405c:	46bd      	mov	sp, r7
 801405e:	bd80      	pop	{r7, pc}
 8014060:	20030834 	.word	0x20030834
 8014064:	08017118 	.word	0x08017118
 8014068:	080143ed 	.word	0x080143ed
 801406c:	20004b88 	.word	0x20004b88

08014070 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b082      	sub	sp, #8
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2b07      	cmp	r3, #7
 801407e:	d83b      	bhi.n	80140f8 <APP_THREAD_Error+0x88>
 8014080:	a201      	add	r2, pc, #4	; (adr r2, 8014088 <APP_THREAD_Error+0x18>)
 8014082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014086:	bf00      	nop
 8014088:	080140a9 	.word	0x080140a9
 801408c:	080140b3 	.word	0x080140b3
 8014090:	080140bd 	.word	0x080140bd
 8014094:	080140c7 	.word	0x080140c7
 8014098:	080140d1 	.word	0x080140d1
 801409c:	080140db 	.word	0x080140db
 80140a0:	080140e5 	.word	0x080140e5
 80140a4:	080140ef 	.word	0x080140ef
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 80140a8:	6839      	ldr	r1, [r7, #0]
 80140aa:	4818      	ldr	r0, [pc, #96]	; (801410c <APP_THREAD_Error+0x9c>)
 80140ac:	f000 f934 	bl	8014318 <APP_THREAD_TraceError>
    break;
 80140b0:	e027      	b.n	8014102 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 80140b2:	6839      	ldr	r1, [r7, #0]
 80140b4:	4816      	ldr	r0, [pc, #88]	; (8014110 <APP_THREAD_Error+0xa0>)
 80140b6:	f000 f92f 	bl	8014318 <APP_THREAD_TraceError>
    break;
 80140ba:	e022      	b.n	8014102 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 80140bc:	6839      	ldr	r1, [r7, #0]
 80140be:	4815      	ldr	r0, [pc, #84]	; (8014114 <APP_THREAD_Error+0xa4>)
 80140c0:	f000 f92a 	bl	8014318 <APP_THREAD_TraceError>
    break;
 80140c4:	e01d      	b.n	8014102 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 80140c6:	6839      	ldr	r1, [r7, #0]
 80140c8:	4813      	ldr	r0, [pc, #76]	; (8014118 <APP_THREAD_Error+0xa8>)
 80140ca:	f000 f925 	bl	8014318 <APP_THREAD_TraceError>
    break;
 80140ce:	e018      	b.n	8014102 <APP_THREAD_Error+0x92>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 80140d0:	6839      	ldr	r1, [r7, #0]
 80140d2:	4812      	ldr	r0, [pc, #72]	; (801411c <APP_THREAD_Error+0xac>)
 80140d4:	f000 f920 	bl	8014318 <APP_THREAD_TraceError>
    break;
 80140d8:	e013      	b.n	8014102 <APP_THREAD_Error+0x92>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 80140da:	6839      	ldr	r1, [r7, #0]
 80140dc:	4810      	ldr	r0, [pc, #64]	; (8014120 <APP_THREAD_Error+0xb0>)
 80140de:	f000 f91b 	bl	8014318 <APP_THREAD_TraceError>
    break;
 80140e2:	e00e      	b.n	8014102 <APP_THREAD_Error+0x92>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 80140e4:	6839      	ldr	r1, [r7, #0]
 80140e6:	480f      	ldr	r0, [pc, #60]	; (8014124 <APP_THREAD_Error+0xb4>)
 80140e8:	f000 f916 	bl	8014318 <APP_THREAD_TraceError>
    break;
 80140ec:	e009      	b.n	8014102 <APP_THREAD_Error+0x92>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 80140ee:	6839      	ldr	r1, [r7, #0]
 80140f0:	480d      	ldr	r0, [pc, #52]	; (8014128 <APP_THREAD_Error+0xb8>)
 80140f2:	f000 f911 	bl	8014318 <APP_THREAD_TraceError>
    break;
 80140f6:	e004      	b.n	8014102 <APP_THREAD_Error+0x92>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 80140f8:	2100      	movs	r1, #0
 80140fa:	480c      	ldr	r0, [pc, #48]	; (801412c <APP_THREAD_Error+0xbc>)
 80140fc:	f000 f90c 	bl	8014318 <APP_THREAD_TraceError>
    break;
 8014100:	bf00      	nop
  }
}
 8014102:	bf00      	nop
 8014104:	3708      	adds	r7, #8
 8014106:	46bd      	mov	sp, r7
 8014108:	bd80      	pop	{r7, pc}
 801410a:	bf00      	nop
 801410c:	08016d64 	.word	0x08016d64
 8014110:	08016d88 	.word	0x08016d88
 8014114:	08016dac 	.word	0x08016dac
 8014118:	08016dcc 	.word	0x08016dcc
 801411c:	08016dec 	.word	0x08016dec
 8014120:	08016e0c 	.word	0x08016e0c
 8014124:	08016e28 	.word	0x08016e28
 8014128:	08016e54 	.word	0x08016e54
 801412c:	08016e78 	.word	0x08016e78

08014130 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b082      	sub	sp, #8
 8014134:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8014136:	2000      	movs	r0, #0
 8014138:	f7fa ffb8 	bl	800f0ac <otInstanceErasePersistentInfo>
 801413c:	4603      	mov	r3, r0
 801413e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014140:	79fb      	ldrb	r3, [r7, #7]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d004      	beq.n	8014150 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8014146:	79fb      	ldrb	r3, [r7, #7]
 8014148:	4619      	mov	r1, r3
 801414a:	2006      	movs	r0, #6
 801414c:	f7ff ff90 	bl	8014070 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8014150:	2000      	movs	r0, #0
 8014152:	f7fa ff4f 	bl	800eff4 <otInstanceFinalize>
  otInstanceInitSingle();
 8014156:	f7fa ff26 	bl	800efa6 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 801415a:	2200      	movs	r2, #0
 801415c:	4955      	ldr	r1, [pc, #340]	; (80142b4 <APP_THREAD_DeviceConfig+0x184>)
 801415e:	2000      	movs	r0, #0
 8014160:	f7fa ff6e 	bl	800f040 <otSetStateChangedCallback>
 8014164:	4603      	mov	r3, r0
 8014166:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014168:	79fb      	ldrb	r3, [r7, #7]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d004      	beq.n	8014178 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 801416e:	79fb      	ldrb	r3, [r7, #7]
 8014170:	4619      	mov	r1, r3
 8014172:	2001      	movs	r0, #1
 8014174:	f7ff ff7c 	bl	8014070 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8014178:	2117      	movs	r1, #23
 801417a:	2000      	movs	r0, #0
 801417c:	f7fb f89e 	bl	800f2bc <otLinkSetChannel>
 8014180:	4603      	mov	r3, r0
 8014182:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014184:	79fb      	ldrb	r3, [r7, #7]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d004      	beq.n	8014194 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 801418a:	79fb      	ldrb	r3, [r7, #7]
 801418c:	4619      	mov	r1, r3
 801418e:	2002      	movs	r0, #2
 8014190:	f7ff ff6e 	bl	8014070 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8014194:	f241 2134 	movw	r1, #4660	; 0x1234
 8014198:	2000      	movs	r0, #0
 801419a:	f7fb f8bf 	bl	800f31c <otLinkSetPanId>
 801419e:	4603      	mov	r3, r0
 80141a0:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80141a2:	79fb      	ldrb	r3, [r7, #7]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d004      	beq.n	80141b2 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 80141a8:	79fb      	ldrb	r3, [r7, #7]
 80141aa:	4619      	mov	r1, r3
 80141ac:	2003      	movs	r0, #3
 80141ae:	f7ff ff5f 	bl	8014070 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 80141b2:	2101      	movs	r1, #1
 80141b4:	2000      	movs	r0, #0
 80141b6:	f7fa ffa2 	bl	800f0fe <otIp6SetEnabled>
 80141ba:	4603      	mov	r3, r0
 80141bc:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80141be:	79fb      	ldrb	r3, [r7, #7]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d004      	beq.n	80141ce <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 80141c4:	79fb      	ldrb	r3, [r7, #7]
 80141c6:	4619      	mov	r1, r3
 80141c8:	2004      	movs	r0, #4
 80141ca:	f7ff ff51 	bl	8014070 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 80141ce:	2101      	movs	r1, #1
 80141d0:	2000      	movs	r0, #0
 80141d2:	f7fb fbd8 	bl	800f986 <otThreadSetEnabled>
 80141d6:	4603      	mov	r3, r0
 80141d8:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80141da:	79fb      	ldrb	r3, [r7, #7]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d004      	beq.n	80141ea <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 80141e0:	79fb      	ldrb	r3, [r7, #7]
 80141e2:	4619      	mov	r1, r3
 80141e4:	2005      	movs	r0, #5
 80141e6:	f7ff ff43 	bl	8014070 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
  error = otThreadSetEnabled(NULL, false);
 80141ea:	2100      	movs	r1, #0
 80141ec:	2000      	movs	r0, #0
 80141ee:	f7fb fbca 	bl	800f986 <otThreadSetEnabled>
 80141f2:	4603      	mov	r3, r0
 80141f4:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 80141f6:	79fb      	ldrb	r3, [r7, #7]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d004      	beq.n	8014206 <APP_THREAD_DeviceConfig+0xd6>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 80141fc:	79fb      	ldrb	r3, [r7, #7]
 80141fe:	4619      	mov	r1, r3
 8014200:	2005      	movs	r0, #5
 8014202:	f7ff ff35 	bl	8014070 <APP_THREAD_Error>
  	}


  	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 8014206:	2106      	movs	r1, #6
 8014208:	2000      	movs	r0, #0
 801420a:	f7fb fb89 	bl	800f920 <otPlatRadioSetTransmitPower>
 801420e:	4603      	mov	r3, r0
 8014210:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8014212:	79fb      	ldrb	r3, [r7, #7]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d004      	beq.n	8014222 <APP_THREAD_DeviceConfig+0xf2>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8014218:	79fb      	ldrb	r3, [r7, #7]
 801421a:	4619      	mov	r1, r3
 801421c:	2002      	movs	r0, #2
 801421e:	f7ff ff27 	bl	8014070 <APP_THREAD_Error>
  	}

  	otThreadSetChildTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 8014222:	2103      	movs	r1, #3
 8014224:	2000      	movs	r0, #0
 8014226:	f7fb fbde 	bl	800f9e6 <otThreadSetChildTimeout>
//  	error = otThreadSetMasterKey(NULL, &masterKey);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otThreadSetNetworkName(NULL, networkName);
 801422a:	4923      	ldr	r1, [pc, #140]	; (80142b8 <APP_THREAD_DeviceConfig+0x188>)
 801422c:	2000      	movs	r0, #0
 801422e:	f7fb fc56 	bl	800fade <otThreadSetNetworkName>
 8014232:	4603      	mov	r3, r0
 8014234:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8014236:	79fb      	ldrb	r3, [r7, #7]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d004      	beq.n	8014246 <APP_THREAD_DeviceConfig+0x116>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 801423c:	79fb      	ldrb	r3, [r7, #7]
 801423e:	4619      	mov	r1, r3
 8014240:	2002      	movs	r0, #2
 8014242:	f7ff ff15 	bl	8014070 <APP_THREAD_Error>
//  	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otIp6SetEnabled(NULL, true);
 8014246:	2101      	movs	r1, #1
 8014248:	2000      	movs	r0, #0
 801424a:	f7fa ff58 	bl	800f0fe <otIp6SetEnabled>
 801424e:	4603      	mov	r3, r0
 8014250:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8014252:	79fb      	ldrb	r3, [r7, #7]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d004      	beq.n	8014262 <APP_THREAD_DeviceConfig+0x132>
  		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8014258:	79fb      	ldrb	r3, [r7, #7]
 801425a:	4619      	mov	r1, r3
 801425c:	2004      	movs	r0, #4
 801425e:	f7ff ff07 	bl	8014070 <APP_THREAD_Error>
  	}

  	error = otThreadSetEnabled(NULL, true);
 8014262:	2101      	movs	r1, #1
 8014264:	2000      	movs	r0, #0
 8014266:	f7fb fb8e 	bl	800f986 <otThreadSetEnabled>
 801426a:	4603      	mov	r3, r0
 801426c:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 801426e:	79fb      	ldrb	r3, [r7, #7]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d004      	beq.n	801427e <APP_THREAD_DeviceConfig+0x14e>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 8014274:	79fb      	ldrb	r3, [r7, #7]
 8014276:	4619      	mov	r1, r3
 8014278:	2005      	movs	r0, #5
 801427a:	f7ff fef9 	bl	8014070 <APP_THREAD_Error>
  	}

  	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 801427e:	f241 6133 	movw	r1, #5683	; 0x1633
 8014282:	2000      	movs	r0, #0
 8014284:	f7fa fdfd 	bl	800ee82 <otCoapStart>
 8014288:	4603      	mov	r3, r0
 801428a:	71fb      	strb	r3, [r7, #7]
//  	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);

  	error = otCoapAddResource(NULL, &OT_Node_Cal_Ressource);
 801428c:	490b      	ldr	r1, [pc, #44]	; (80142bc <APP_THREAD_DeviceConfig+0x18c>)
 801428e:	2000      	movs	r0, #0
 8014290:	f7fa fe27 	bl	800eee2 <otCoapAddResource>
 8014294:	4603      	mov	r3, r0
 8014296:	71fb      	strb	r3, [r7, #7]
  	error = otCoapAddResource(NULL, &OT_Node_Spot_Ressource);
 8014298:	4909      	ldr	r1, [pc, #36]	; (80142c0 <APP_THREAD_DeviceConfig+0x190>)
 801429a:	2000      	movs	r0, #0
 801429c:	f7fa fe21 	bl	800eee2 <otCoapAddResource>
 80142a0:	4603      	mov	r3, r0
 80142a2:	71fb      	strb	r3, [r7, #7]
  #ifndef DONGLE_CODE
//      error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
  #endif
  	// set default multicast address for border router
  //    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
  	otIp6AddressFromString("ff03::1", &multicastAddr);
 80142a4:	4907      	ldr	r1, [pc, #28]	; (80142c4 <APP_THREAD_DeviceConfig+0x194>)
 80142a6:	4808      	ldr	r0, [pc, #32]	; (80142c8 <APP_THREAD_DeviceConfig+0x198>)
 80142a8:	f7fa ffd6 	bl	800f258 <otIp6AddressFromString>
  	// set UID in local state variable
  //	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
  //	 = UID64_BASE;
//  	stm32UID(msgSendMyIP.uid);
  /* USER CODE END DEVICECONFIG */
}
 80142ac:	bf00      	nop
 80142ae:	3708      	adds	r7, #8
 80142b0:	46bd      	mov	sp, r7
 80142b2:	bd80      	pop	{r7, pc}
 80142b4:	080142cd 	.word	0x080142cd
 80142b8:	08017160 	.word	0x08017160
 80142bc:	20000164 	.word	0x20000164
 80142c0:	20000174 	.word	0x20000174
 80142c4:	20005138 	.word	0x20005138
 80142c8:	08016e88 	.word	0x08016e88

080142cc <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b082      	sub	sp, #8
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
 80142d4:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	f003 0304 	and.w	r3, r3, #4
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d013      	beq.n	8014308 <APP_THREAD_StateNotif+0x3c>
  {
    switch (otThreadGetDeviceRole(NULL))
 80142e0:	2000      	movs	r0, #0
 80142e2:	f7fb fc2b 	bl	800fb3c <otThreadGetDeviceRole>
 80142e6:	4603      	mov	r3, r0
 80142e8:	2b04      	cmp	r3, #4
 80142ea:	d80f      	bhi.n	801430c <APP_THREAD_StateNotif+0x40>
 80142ec:	a201      	add	r2, pc, #4	; (adr r2, 80142f4 <APP_THREAD_StateNotif+0x28>)
 80142ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142f2:	bf00      	nop
 80142f4:	0801430d 	.word	0x0801430d
 80142f8:	0801430d 	.word	0x0801430d
 80142fc:	0801430d 	.word	0x0801430d
 8014300:	0801430d 	.word	0x0801430d
 8014304:	0801430d 	.word	0x0801430d
      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */
      break;
    }
  }
 8014308:	bf00      	nop
 801430a:	e000      	b.n	801430e <APP_THREAD_StateNotif+0x42>
      break;
 801430c:	bf00      	nop
}
 801430e:	bf00      	nop
 8014310:	3708      	adds	r7, #8
 8014312:	46bd      	mov	sp, r7
 8014314:	bd80      	pop	{r7, pc}
 8014316:	bf00      	nop

08014318 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8014318:	b480      	push	{r7}
 801431a:	b083      	sub	sp, #12
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
 8014320:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 8014322:	bf00      	nop
 8014324:	370c      	adds	r7, #12
 8014326:	46bd      	mov	sp, r7
 8014328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432c:	4770      	bx	lr
	...

08014330 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b088      	sub	sp, #32
 8014334:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8014336:	1d3b      	adds	r3, r7, #4
 8014338:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 801433a:	6978      	ldr	r0, [r7, #20]
 801433c:	f7f9 feac 	bl	800e098 <SHCI_GetWirelessFwInfo>
 8014340:	4603      	mov	r3, r0
 8014342:	2b00      	cmp	r3, #0
 8014344:	d004      	beq.n	8014350 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8014346:	2101      	movs	r1, #1
 8014348:	2007      	movs	r0, #7
 801434a:	f7ff fe91 	bl	8014070 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 801434e:	e03d      	b.n	80143cc <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 8014350:	4a20      	ldr	r2, [pc, #128]	; (80143d4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8014352:	2101      	movs	r1, #1
 8014354:	2000      	movs	r0, #0
 8014356:	f7ef fe7d 	bl	8004054 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 801435a:	4a1f      	ldr	r2, [pc, #124]	; (80143d8 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 801435c:	2101      	movs	r1, #1
 801435e:	2000      	movs	r0, #0
 8014360:	f7ef fe78 	bl	8004054 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8014364:	697b      	ldr	r3, [r7, #20]
 8014366:	781b      	ldrb	r3, [r3, #0]
 8014368:	4619      	mov	r1, r3
 801436a:	697b      	ldr	r3, [r7, #20]
 801436c:	785b      	ldrb	r3, [r3, #1]
 801436e:	461a      	mov	r2, r3
 8014370:	697b      	ldr	r3, [r7, #20]
 8014372:	789b      	ldrb	r3, [r3, #2]
 8014374:	9301      	str	r3, [sp, #4]
 8014376:	9200      	str	r2, [sp, #0]
 8014378:	460b      	mov	r3, r1
 801437a:	4a18      	ldr	r2, [pc, #96]	; (80143dc <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 801437c:	2101      	movs	r1, #1
 801437e:	2000      	movs	r0, #0
 8014380:	f7ef fe68 	bl	8004054 <logApplication>
    switch(p_wireless_info->StackType)
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	7a5b      	ldrb	r3, [r3, #9]
 8014388:	2b11      	cmp	r3, #17
 801438a:	d009      	beq.n	80143a0 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 801438c:	2b50      	cmp	r3, #80	; 0x50
 801438e:	d00d      	beq.n	80143ac <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 8014390:	2b10      	cmp	r3, #16
 8014392:	d111      	bne.n	80143b8 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8014394:	4a12      	ldr	r2, [pc, #72]	; (80143e0 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8014396:	2101      	movs	r1, #1
 8014398:	2000      	movs	r0, #0
 801439a:	f7ef fe5b 	bl	8004054 <logApplication>
      break;
 801439e:	e010      	b.n	80143c2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 80143a0:	4a10      	ldr	r2, [pc, #64]	; (80143e4 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 80143a2:	2101      	movs	r1, #1
 80143a4:	2000      	movs	r0, #0
 80143a6:	f7ef fe55 	bl	8004054 <logApplication>
      break;
 80143aa:	e00a      	b.n	80143c2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 80143ac:	4a0e      	ldr	r2, [pc, #56]	; (80143e8 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 80143ae:	2101      	movs	r1, #1
 80143b0:	2000      	movs	r0, #0
 80143b2:	f7ef fe4f 	bl	8004054 <logApplication>
      break;
 80143b6:	e004      	b.n	80143c2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80143b8:	2101      	movs	r1, #1
 80143ba:	2007      	movs	r0, #7
 80143bc:	f7ff fe58 	bl	8014070 <APP_THREAD_Error>
      break;
 80143c0:	bf00      	nop
    APP_DBG("**********************************************************");
 80143c2:	4a04      	ldr	r2, [pc, #16]	; (80143d4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 80143c4:	2101      	movs	r1, #1
 80143c6:	2000      	movs	r0, #0
 80143c8:	f7ef fe44 	bl	8004054 <logApplication>
}
 80143cc:	bf00      	nop
 80143ce:	3718      	adds	r7, #24
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bd80      	pop	{r7, pc}
 80143d4:	08016e90 	.word	0x08016e90
 80143d8:	08016ecc 	.word	0x08016ecc
 80143dc:	08016ee8 	.word	0x08016ee8
 80143e0:	08016f00 	.word	0x08016f00
 80143e4:	08016f18 	.word	0x08016f18
 80143e8:	08016f30 	.word	0x08016f30

080143ec <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b082      	sub	sp, #8
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80143f4:	f04f 32ff 	mov.w	r2, #4294967295
 80143f8:	2101      	movs	r1, #1
 80143fa:	2001      	movs	r0, #1
 80143fc:	f7fb fe1e 	bl	801003c <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 8014400:	f000 fb30 	bl	8014a64 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8014404:	e7f6      	b.n	80143f4 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

08014406 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 8014406:	b580      	push	{r7, lr}
 8014408:	b082      	sub	sp, #8
 801440a:	af00      	add	r7, sp, #0
 801440c:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801440e:	f04f 32ff 	mov.w	r2, #4294967295
 8014412:	2101      	movs	r1, #1
 8014414:	2001      	movs	r0, #1
 8014416:	f7fb fe11 	bl	801003c <osThreadFlagsWait>
    Send_CLI_To_M0();
 801441a:	f000 faa5 	bl	8014968 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801441e:	e7f6      	b.n	801440e <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

08014420 <APP_THREAD_CoapNodeSpotRequestHandler>:
//}

static void APP_THREAD_CoapNodeSpotRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 8014420:	b580      	push	{r7, lr}
 8014422:	b08a      	sub	sp, #40	; 0x28
 8014424:	af00      	add	r7, sp, #0
 8014426:	60f8      	str	r0, [r7, #12]
 8014428:	60b9      	str	r1, [r7, #8]
 801442a:	607a      	str	r2, [r7, #4]
 801442c:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		struct MeasMsg receivedMeasMsg;
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedMeasMsg, sizeof(receivedMeasMsg))
 801442e:	6878      	ldr	r0, [r7, #4]
 8014430:	f7fa ffcf 	bl	800f3d2 <otMessageGetOffset>
 8014434:	4603      	mov	r3, r0
 8014436:	4619      	mov	r1, r3
 8014438:	f107 0214 	add.w	r2, r7, #20
 801443c:	2314      	movs	r3, #20
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	f7fb f82c 	bl	800f49c <otMessageRead>
 8014444:	4603      	mov	r3, r0
 8014446:	2b14      	cmp	r3, #20
 8014448:	d121      	bne.n	801448e <APP_THREAD_CoapNodeSpotRequestHandler+0x6e>
				== sizeof(receivedMeasMsg)) {


			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 801444a:	68b8      	ldr	r0, [r7, #8]
 801444c:	f7fa fbfa 	bl	800ec44 <otCoapHeaderGetCode>
 8014450:	4603      	mov	r3, r0
 8014452:	2b03      	cmp	r3, #3
 8014454:	d111      	bne.n	801447a <APP_THREAD_CoapNodeSpotRequestHandler+0x5a>
			{
//				measMsgReceivedFromNode(&receivedMeasMsg);
				toggleLed(1,1,1);
 8014456:	2201      	movs	r2, #1
 8014458:	2101      	movs	r1, #1
 801445a:	2001      	movs	r0, #1
 801445c:	f7ee fdfe 	bl	800305c <toggleLed>
				osMessageQueuePut (msgQueueHandle, &receivedMeasMsg, NULL, 0);
 8014460:	4b0d      	ldr	r3, [pc, #52]	; (8014498 <APP_THREAD_CoapNodeSpotRequestHandler+0x78>)
 8014462:	6818      	ldr	r0, [r3, #0]
 8014464:	f107 0114 	add.w	r1, r7, #20
 8014468:	2300      	movs	r3, #0
 801446a:	2200      	movs	r2, #0
 801446c:	f7fc f9d2 	bl	8010814 <osMessageQueuePut>
				toggleLed(0,0,1);
 8014470:	2201      	movs	r2, #1
 8014472:	2100      	movs	r1, #0
 8014474:	2000      	movs	r0, #0
 8014476:	f7ee fdf1 	bl	800305c <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 801447a:	68b8      	ldr	r0, [r7, #8]
 801447c:	f7fa fbb4 	bl	800ebe8 <otCoapHeaderGetType>
 8014480:	4603      	mov	r3, r0
 8014482:	2b00      	cmp	r3, #0
 8014484:	d103      	bne.n	801448e <APP_THREAD_CoapNodeSpotRequestHandler+0x6e>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 8014486:	6839      	ldr	r1, [r7, #0]
 8014488:	68b8      	ldr	r0, [r7, #8]
 801448a:	f000 f845 	bl	8014518 <APP_THREAD_CoapSendDataResponse>
			}

		}
}
 801448e:	bf00      	nop
 8014490:	3728      	adds	r7, #40	; 0x28
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}
 8014496:	bf00      	nop
 8014498:	2000032c 	.word	0x2000032c

0801449c <APP_THREAD_CoapNodeCalRequestHandler>:

struct CalMsg receivedCalMsg;
static void APP_THREAD_CoapNodeCalRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 801449c:	b580      	push	{r7, lr}
 801449e:	b084      	sub	sp, #16
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	60f8      	str	r0, [r7, #12]
 80144a4:	60b9      	str	r1, [r7, #8]
 80144a6:	607a      	str	r2, [r7, #4]
 80144a8:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedCalMsg, sizeof(receivedCalMsg))
 80144aa:	6878      	ldr	r0, [r7, #4]
 80144ac:	f7fa ff91 	bl	800f3d2 <otMessageGetOffset>
 80144b0:	4603      	mov	r3, r0
 80144b2:	4619      	mov	r1, r3
 80144b4:	230c      	movs	r3, #12
 80144b6:	4a17      	ldr	r2, [pc, #92]	; (8014514 <APP_THREAD_CoapNodeCalRequestHandler+0x78>)
 80144b8:	6878      	ldr	r0, [r7, #4]
 80144ba:	f7fa ffef 	bl	800f49c <otMessageRead>
 80144be:	4603      	mov	r3, r0
 80144c0:	2b0c      	cmp	r3, #12
 80144c2:	d122      	bne.n	801450a <APP_THREAD_CoapNodeCalRequestHandler+0x6e>
				== sizeof(receivedCalMsg)) {

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 80144c4:	68b8      	ldr	r0, [r7, #8]
 80144c6:	f7fa fbbd 	bl	800ec44 <otCoapHeaderGetCode>
 80144ca:	4603      	mov	r3, r0
 80144cc:	2b03      	cmp	r3, #3
 80144ce:	d107      	bne.n	80144e0 <APP_THREAD_CoapNodeCalRequestHandler+0x44>
			{
				if(receivedCalMsg.cal_fcn == CALIBRATION_START_COMMAND){
 80144d0:	4b10      	ldr	r3, [pc, #64]	; (8014514 <APP_THREAD_CoapNodeCalRequestHandler+0x78>)
 80144d2:	789b      	ldrb	r3, [r3, #2]
 80144d4:	2b01      	cmp	r3, #1
					// TODO: start calibration

				}else if(receivedCalMsg.cal_fcn == CALIBRATION_STOP_COMMAND){
					// TODO: stop calibration
				}
				toggleLed(0,0,1);
 80144d6:	2201      	movs	r2, #1
 80144d8:	2100      	movs	r1, #0
 80144da:	2000      	movs	r0, #0
 80144dc:	f7ee fdbe 	bl	800305c <toggleLed>
			}

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET)
 80144e0:	68b8      	ldr	r0, [r7, #8]
 80144e2:	f7fa fbaf 	bl	800ec44 <otCoapHeaderGetCode>
 80144e6:	4603      	mov	r3, r0
 80144e8:	2b01      	cmp	r3, #1
 80144ea:	d104      	bne.n	80144f6 <APP_THREAD_CoapNodeCalRequestHandler+0x5a>
					// 		TODO this can be done in an ACK but doing it now in a separate PUT request to the nodeSpot resource
#ifdef SOLAR_SENSOR_NODE
					sendPowerMeasurement(pMessageInfo->mPeerAddr, receivedCalMsg.angle_1, receivedCalMsg.angle_2);
#endif
				}
				toggleLed(1,0,0);
 80144ec:	2200      	movs	r2, #0
 80144ee:	2100      	movs	r1, #0
 80144f0:	2001      	movs	r0, #1
 80144f2:	f7ee fdb3 	bl	800305c <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 80144f6:	68b8      	ldr	r0, [r7, #8]
 80144f8:	f7fa fb76 	bl	800ebe8 <otCoapHeaderGetType>
 80144fc:	4603      	mov	r3, r0
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d103      	bne.n	801450a <APP_THREAD_CoapNodeCalRequestHandler+0x6e>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 8014502:	6839      	ldr	r1, [r7, #0]
 8014504:	68b8      	ldr	r0, [r7, #8]
 8014506:	f000 f807 	bl	8014518 <APP_THREAD_CoapSendDataResponse>
//
//		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
//			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
//		}

}
 801450a:	bf00      	nop
 801450c:	3710      	adds	r7, #16
 801450e:	46bd      	mov	sp, r7
 8014510:	bd80      	pop	{r7, pc}
 8014512:	bf00      	nop
 8014514:	20005154 	.word	0x20005154

08014518 <APP_THREAD_CoapSendDataResponse>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_CoapSendDataResponse(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 8014518:	b590      	push	{r4, r7, lr}
 801451a:	b085      	sub	sp, #20
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
 8014520:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 8014522:	2300      	movs	r3, #0
 8014524:	73fb      	strb	r3, [r7, #15]

  do{
    APP_DBG(" ********* APP_THREAD_CoapSendDataResponse ********* ");
 8014526:	4a25      	ldr	r2, [pc, #148]	; (80145bc <APP_THREAD_CoapSendDataResponse+0xa4>)
 8014528:	2101      	movs	r1, #1
 801452a:	2000      	movs	r0, #0
 801452c:	f7ef fd92 	bl	8004054 <logApplication>
    otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8014530:	2244      	movs	r2, #68	; 0x44
 8014532:	2120      	movs	r1, #32
 8014534:	4822      	ldr	r0, [pc, #136]	; (80145c0 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8014536:	f7fa f9fb 	bl	800e930 <otCoapHeaderInit>
    otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	f7fa fbb0 	bl	800eca0 <otCoapHeaderGetMessageId>
 8014540:	4603      	mov	r3, r0
 8014542:	4619      	mov	r1, r3
 8014544:	481e      	ldr	r0, [pc, #120]	; (80145c0 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8014546:	f7fa fb1f 	bl	800eb88 <otCoapHeaderSetMessageId>
    otCoapHeaderSetToken(&OT_Header,
 801454a:	6878      	ldr	r0, [r7, #4]
 801454c:	f7fa fc04 	bl	800ed58 <otCoapHeaderGetToken>
 8014550:	4604      	mov	r4, r0
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	f7fa fbd2 	bl	800ecfc <otCoapHeaderGetTokenLength>
 8014558:	4603      	mov	r3, r0
 801455a:	461a      	mov	r2, r3
 801455c:	4621      	mov	r1, r4
 801455e:	4818      	ldr	r0, [pc, #96]	; (80145c0 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8014560:	f7fa fa1b 	bl	800e99a <otCoapHeaderSetToken>
        otCoapHeaderGetToken(pRequestHeader),
        otCoapHeaderGetTokenLength(pRequestHeader));

    pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8014564:	4916      	ldr	r1, [pc, #88]	; (80145c0 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8014566:	2000      	movs	r0, #0
 8014568:	f7fa fc23 	bl	800edb2 <otCoapNewMessage>
 801456c:	4602      	mov	r2, r0
 801456e:	4b15      	ldr	r3, [pc, #84]	; (80145c4 <APP_THREAD_CoapSendDataResponse+0xac>)
 8014570:	601a      	str	r2, [r3, #0]
    if (pOT_Message == NULL)
 8014572:	4b14      	ldr	r3, [pc, #80]	; (80145c4 <APP_THREAD_CoapSendDataResponse+0xac>)
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d106      	bne.n	8014588 <APP_THREAD_CoapSendDataResponse+0x70>
    {
      APP_DBG("WARNING : pOT_Message = NULL ! -> exit now");
 801457a:	4a13      	ldr	r2, [pc, #76]	; (80145c8 <APP_THREAD_CoapSendDataResponse+0xb0>)
 801457c:	2101      	movs	r1, #1
 801457e:	2000      	movs	r0, #0
 8014580:	f7ef fd68 	bl	8004054 <logApplication>
      break;
 8014584:	bf00      	nop
    {
      otMessageFree(pOT_Message);
//      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
    }
  }while(false);
}
 8014586:	e014      	b.n	80145b2 <APP_THREAD_CoapSendDataResponse+0x9a>
    error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8014588:	4b0e      	ldr	r3, [pc, #56]	; (80145c4 <APP_THREAD_CoapSendDataResponse+0xac>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	683a      	ldr	r2, [r7, #0]
 801458e:	4619      	mov	r1, r3
 8014590:	2000      	movs	r0, #0
 8014592:	f7fa fcd5 	bl	800ef40 <otCoapSendResponse>
 8014596:	4603      	mov	r3, r0
 8014598:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE && pOT_Message != NULL)
 801459a:	7bfb      	ldrb	r3, [r7, #15]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d008      	beq.n	80145b2 <APP_THREAD_CoapSendDataResponse+0x9a>
 80145a0:	4b08      	ldr	r3, [pc, #32]	; (80145c4 <APP_THREAD_CoapSendDataResponse+0xac>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d004      	beq.n	80145b2 <APP_THREAD_CoapSendDataResponse+0x9a>
      otMessageFree(pOT_Message);
 80145a8:	4b06      	ldr	r3, [pc, #24]	; (80145c4 <APP_THREAD_CoapSendDataResponse+0xac>)
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	4618      	mov	r0, r3
 80145ae:	f7fa fee5 	bl	800f37c <otMessageFree>
}
 80145b2:	bf00      	nop
 80145b4:	3714      	adds	r7, #20
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bd90      	pop	{r4, r7, pc}
 80145ba:	bf00      	nop
 80145bc:	08016f5c 	.word	0x08016f5c
 80145c0:	20004bdc 	.word	0x20004bdc
 80145c4:	20004b90 	.word	0x20004b90
 80145c8:	08016f94 	.word	0x08016f94

080145cc <APP_THREAD_SendCoapMsg>:
//		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
//	}
//}

void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, const char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 80145cc:	b590      	push	{r4, r7, lr}
 80145ce:	b087      	sub	sp, #28
 80145d0:	af02      	add	r7, sp, #8
 80145d2:	60f8      	str	r0, [r7, #12]
 80145d4:	607a      	str	r2, [r7, #4]
 80145d6:	603b      	str	r3, [r7, #0]
 80145d8:	460b      	mov	r3, r1
 80145da:	817b      	strh	r3, [r7, #10]
	/************ SET MESSAGE INFO (WHERE THE PACKET GOES) ************/
	// https://openthread.io/reference/struct/ot-message-info.html#structot_message_info
	do {
		// REMOVE BELOW CALLS (ONLY FOR DEBUGGING)
			  myRloc16 = otThreadGetRloc16(NULL);
 80145dc:	2000      	movs	r0, #0
 80145de:	f7fb fad6 	bl	800fb8e <otThreadGetRloc16>
 80145e2:	4603      	mov	r3, r0
 80145e4:	461a      	mov	r2, r3
 80145e6:	4b7e      	ldr	r3, [pc, #504]	; (80147e0 <APP_THREAD_SendCoapMsg+0x214>)
 80145e8:	801a      	strh	r2, [r3, #0]
			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 80145ea:	2000      	movs	r0, #0
 80145ec:	f7fa fde4 	bl	800f1b8 <otIp6GetUnicastAddresses>
 80145f0:	4602      	mov	r2, r0
 80145f2:	4b7c      	ldr	r3, [pc, #496]	; (80147e4 <APP_THREAD_SendCoapMsg+0x218>)
 80145f4:	601a      	str	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 80145f6:	2000      	movs	r0, #0
 80145f8:	f7fa fdb1 	bl	800f15e <otIp6IsEnabled>
 80145fc:	4603      	mov	r3, r0
 80145fe:	461a      	mov	r2, r3
 8014600:	4b79      	ldr	r3, [pc, #484]	; (80147e8 <APP_THREAD_SendCoapMsg+0x21c>)
 8014602:	701a      	strb	r2, [r3, #0]
			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
 8014604:	2000      	movs	r0, #0
 8014606:	f7fa fdff 	bl	800f208 <otIp6GetMulticastAddresses>
 801460a:	4602      	mov	r2, r0
 801460c:	4b77      	ldr	r3, [pc, #476]	; (80147ec <APP_THREAD_SendCoapMsg+0x220>)
 801460e:	601a      	str	r2, [r3, #0]
			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
 8014610:	2000      	movs	r0, #0
 8014612:	f7fb fa14 	bl	800fa3e <otThreadGetMeshLocalEid>
 8014616:	4602      	mov	r2, r0
 8014618:	4b75      	ldr	r3, [pc, #468]	; (80147f0 <APP_THREAD_SendCoapMsg+0x224>)
 801461a:	601a      	str	r2, [r3, #0]
			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);
 801461c:	2000      	movs	r0, #0
 801461e:	f7fb fa36 	bl	800fa8e <otThreadGetLinkLocalIp6Address>
 8014622:	4602      	mov	r2, r0
 8014624:	4b73      	ldr	r3, [pc, #460]	; (80147f4 <APP_THREAD_SendCoapMsg+0x228>)
 8014626:	601a      	str	r2, [r3, #0]

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8014628:	222c      	movs	r2, #44	; 0x2c
 801462a:	2100      	movs	r1, #0
 801462c:	4872      	ldr	r0, [pc, #456]	; (80147f8 <APP_THREAD_SendCoapMsg+0x22c>)
 801462e:	f002 faea 	bl	8016c06 <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 8014632:	897b      	ldrh	r3, [r7, #10]
 8014634:	2b64      	cmp	r3, #100	; 0x64
 8014636:	d914      	bls.n	8014662 <APP_THREAD_SendCoapMsg+0x96>
#ifndef BORDER_ROUTER_NODE_TRANSMITTER
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 8014638:	4b6f      	ldr	r3, [pc, #444]	; (80147f8 <APP_THREAD_SendCoapMsg+0x22c>)
 801463a:	4a70      	ldr	r2, [pc, #448]	; (80147fc <APP_THREAD_SendCoapMsg+0x230>)
 801463c:	f103 0410 	add.w	r4, r3, #16
 8014640:	4613      	mov	r3, r2
 8014642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8014648:	2000      	movs	r0, #0
 801464a:	f7fb f9f8 	bl	800fa3e <otThreadGetMeshLocalEid>
 801464e:	4602      	mov	r2, r0
 8014650:	4b69      	ldr	r3, [pc, #420]	; (80147f8 <APP_THREAD_SendCoapMsg+0x22c>)
 8014652:	461c      	mov	r4, r3
 8014654:	4613      	mov	r3, r2
 8014656:	6818      	ldr	r0, [r3, #0]
 8014658:	6859      	ldr	r1, [r3, #4]
 801465a:	689a      	ldr	r2, [r3, #8]
 801465c:	68db      	ldr	r3, [r3, #12]
 801465e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014660:	e015      	b.n	801468e <APP_THREAD_SendCoapMsg+0xc2>
//			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
#else
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
#endif
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8014662:	4b65      	ldr	r3, [pc, #404]	; (80147f8 <APP_THREAD_SendCoapMsg+0x22c>)
 8014664:	4a66      	ldr	r2, [pc, #408]	; (8014800 <APP_THREAD_SendCoapMsg+0x234>)
 8014666:	f103 0410 	add.w	r4, r3, #16
 801466a:	4613      	mov	r3, r2
 801466c:	6818      	ldr	r0, [r3, #0]
 801466e:	6859      	ldr	r1, [r3, #4]
 8014670:	689a      	ldr	r2, [r3, #8]
 8014672:	68db      	ldr	r3, [r3, #12]
 8014674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8014676:	2000      	movs	r0, #0
 8014678:	f7fb f9e1 	bl	800fa3e <otThreadGetMeshLocalEid>
 801467c:	4602      	mov	r2, r0
 801467e:	4b5e      	ldr	r3, [pc, #376]	; (80147f8 <APP_THREAD_SendCoapMsg+0x22c>)
 8014680:	461c      	mov	r4, r3
 8014682:	4613      	mov	r3, r2
 8014684:	6818      	ldr	r0, [r3, #0]
 8014686:	6859      	ldr	r1, [r3, #4]
 8014688:	689a      	ldr	r2, [r3, #8]
 801468a:	68db      	ldr	r3, [r3, #12]
 801468c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 801468e:	4b5a      	ldr	r3, [pc, #360]	; (80147f8 <APP_THREAD_SendCoapMsg+0x22c>)
 8014690:	2201      	movs	r2, #1
 8014692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8014696:	4b58      	ldr	r3, [pc, #352]	; (80147f8 <APP_THREAD_SendCoapMsg+0x22c>)
 8014698:	f241 6233 	movw	r2, #5683	; 0x1633
 801469c:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 801469e:	4b56      	ldr	r3, [pc, #344]	; (80147f8 <APP_THREAD_SendCoapMsg+0x22c>)
 80146a0:	2240      	movs	r2, #64	; 0x40
 80146a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 80146a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d009      	beq.n	80146c2 <APP_THREAD_SendCoapMsg+0xf6>
 80146ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80146b2:	2b03      	cmp	r3, #3
 80146b4:	d105      	bne.n	80146c2 <APP_THREAD_SendCoapMsg+0xf6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 80146b6:	2203      	movs	r2, #3
 80146b8:	2100      	movs	r1, #0
 80146ba:	4852      	ldr	r0, [pc, #328]	; (8014804 <APP_THREAD_SendCoapMsg+0x238>)
 80146bc:	f7fa f938 	bl	800e930 <otCoapHeaderInit>
 80146c0:	e04a      	b.n	8014758 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 80146c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d009      	beq.n	80146de <APP_THREAD_SendCoapMsg+0x112>
 80146ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80146ce:	2b01      	cmp	r3, #1
 80146d0:	d105      	bne.n	80146de <APP_THREAD_SendCoapMsg+0x112>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 80146d2:	2201      	movs	r2, #1
 80146d4:	2100      	movs	r1, #0
 80146d6:	484b      	ldr	r0, [pc, #300]	; (8014804 <APP_THREAD_SendCoapMsg+0x238>)
 80146d8:	f7fa f92a 	bl	800e930 <otCoapHeaderInit>
 80146dc:	e03c      	b.n	8014758 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 80146de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d009      	beq.n	80146fa <APP_THREAD_SendCoapMsg+0x12e>
 80146e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80146ea:	2b02      	cmp	r3, #2
 80146ec:	d105      	bne.n	80146fa <APP_THREAD_SendCoapMsg+0x12e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 80146ee:	2202      	movs	r2, #2
 80146f0:	2100      	movs	r1, #0
 80146f2:	4844      	ldr	r0, [pc, #272]	; (8014804 <APP_THREAD_SendCoapMsg+0x238>)
 80146f4:	f7fa f91c 	bl	800e930 <otCoapHeaderInit>
 80146f8:	e02e      	b.n	8014758 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 80146fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d109      	bne.n	8014716 <APP_THREAD_SendCoapMsg+0x14a>
 8014702:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014706:	2b03      	cmp	r3, #3
 8014708:	d105      	bne.n	8014716 <APP_THREAD_SendCoapMsg+0x14a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 801470a:	2203      	movs	r2, #3
 801470c:	2110      	movs	r1, #16
 801470e:	483d      	ldr	r0, [pc, #244]	; (8014804 <APP_THREAD_SendCoapMsg+0x238>)
 8014710:	f7fa f90e 	bl	800e930 <otCoapHeaderInit>
 8014714:	e020      	b.n	8014758 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8014716:	f897 3020 	ldrb.w	r3, [r7, #32]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d109      	bne.n	8014732 <APP_THREAD_SendCoapMsg+0x166>
 801471e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014722:	2b01      	cmp	r3, #1
 8014724:	d105      	bne.n	8014732 <APP_THREAD_SendCoapMsg+0x166>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8014726:	2201      	movs	r2, #1
 8014728:	2110      	movs	r1, #16
 801472a:	4836      	ldr	r0, [pc, #216]	; (8014804 <APP_THREAD_SendCoapMsg+0x238>)
 801472c:	f7fa f900 	bl	800e930 <otCoapHeaderInit>
 8014730:	e012      	b.n	8014758 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8014732:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d109      	bne.n	801474e <APP_THREAD_SendCoapMsg+0x182>
 801473a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801473e:	2b02      	cmp	r3, #2
 8014740:	d105      	bne.n	801474e <APP_THREAD_SendCoapMsg+0x182>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8014742:	2202      	movs	r2, #2
 8014744:	2110      	movs	r1, #16
 8014746:	482f      	ldr	r0, [pc, #188]	; (8014804 <APP_THREAD_SendCoapMsg+0x238>)
 8014748:	f7fa f8f2 	bl	800e930 <otCoapHeaderInit>
 801474c:	e004      	b.n	8014758 <APP_THREAD_SendCoapMsg+0x18c>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 801474e:	2102      	movs	r1, #2
 8014750:	482c      	ldr	r0, [pc, #176]	; (8014804 <APP_THREAD_SendCoapMsg+0x238>)
 8014752:	f7fa f956 	bl	800ea02 <otCoapHeaderGenerateToken>
 8014756:	e040      	b.n	80147da <APP_THREAD_SendCoapMsg+0x20e>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8014758:	6839      	ldr	r1, [r7, #0]
 801475a:	482a      	ldr	r0, [pc, #168]	; (8014804 <APP_THREAD_SendCoapMsg+0x238>)
 801475c:	f7fa f9b4 	bl	800eac8 <otCoapHeaderAppendUriPathOptions>
 8014760:	4603      	mov	r3, r0
 8014762:	461a      	mov	r2, r3
 8014764:	4b28      	ldr	r3, [pc, #160]	; (8014808 <APP_THREAD_SendCoapMsg+0x23c>)
 8014766:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8014768:	212a      	movs	r1, #42	; 0x2a
 801476a:	4826      	ldr	r0, [pc, #152]	; (8014804 <APP_THREAD_SendCoapMsg+0x238>)
 801476c:	f7fa f979 	bl	800ea62 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		if (msgSize > 0) {
 8014770:	897b      	ldrh	r3, [r7, #10]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d002      	beq.n	801477c <APP_THREAD_SendCoapMsg+0x1b0>
			otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 8014776:	4823      	ldr	r0, [pc, #140]	; (8014804 <APP_THREAD_SendCoapMsg+0x238>)
 8014778:	f7fa f9d8 	bl	800eb2c <otCoapHeaderSetPayloadMarker>
		}

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 801477c:	4921      	ldr	r1, [pc, #132]	; (8014804 <APP_THREAD_SendCoapMsg+0x238>)
 801477e:	2000      	movs	r0, #0
 8014780:	f7fa fb17 	bl	800edb2 <otCoapNewMessage>
 8014784:	4602      	mov	r2, r0
 8014786:	4b21      	ldr	r3, [pc, #132]	; (801480c <APP_THREAD_SendCoapMsg+0x240>)
 8014788:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 801478a:	897b      	ldrh	r3, [r7, #10]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d00a      	beq.n	80147a6 <APP_THREAD_SendCoapMsg+0x1da>
			error = otMessageAppend(pOT_Message, message, msgSize);
 8014790:	4b1e      	ldr	r3, [pc, #120]	; (801480c <APP_THREAD_SendCoapMsg+0x240>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	897a      	ldrh	r2, [r7, #10]
 8014796:	68f9      	ldr	r1, [r7, #12]
 8014798:	4618      	mov	r0, r3
 801479a:	f7fa fe48 	bl	800f42e <otMessageAppend>
 801479e:	4603      	mov	r3, r0
 80147a0:	461a      	mov	r2, r3
 80147a2:	4b19      	ldr	r3, [pc, #100]	; (8014808 <APP_THREAD_SendCoapMsg+0x23c>)
 80147a4:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 80147a6:	4b19      	ldr	r3, [pc, #100]	; (801480c <APP_THREAD_SendCoapMsg+0x240>)
 80147a8:	6819      	ldr	r1, [r3, #0]
 80147aa:	2300      	movs	r3, #0
 80147ac:	9300      	str	r3, [sp, #0]
 80147ae:	2300      	movs	r3, #0
 80147b0:	4a11      	ldr	r2, [pc, #68]	; (80147f8 <APP_THREAD_SendCoapMsg+0x22c>)
 80147b2:	2000      	movs	r0, #0
 80147b4:	f7fa fb2b 	bl	800ee0e <otCoapSendRequest>
 80147b8:	4603      	mov	r3, r0
 80147ba:	461a      	mov	r2, r3
 80147bc:	4b12      	ldr	r3, [pc, #72]	; (8014808 <APP_THREAD_SendCoapMsg+0x23c>)
 80147be:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 80147c0:	4b11      	ldr	r3, [pc, #68]	; (8014808 <APP_THREAD_SendCoapMsg+0x23c>)
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d008      	beq.n	80147da <APP_THREAD_SendCoapMsg+0x20e>
 80147c8:	4b10      	ldr	r3, [pc, #64]	; (801480c <APP_THREAD_SendCoapMsg+0x240>)
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d004      	beq.n	80147da <APP_THREAD_SendCoapMsg+0x20e>
			otMessageFree(pOT_Message);
 80147d0:	4b0e      	ldr	r3, [pc, #56]	; (801480c <APP_THREAD_SendCoapMsg+0x240>)
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	4618      	mov	r0, r3
 80147d6:	f7fa fdd1 	bl	800f37c <otMessageFree>
		}

	} while (false);
}
 80147da:	3714      	adds	r7, #20
 80147dc:	46bd      	mov	sp, r7
 80147de:	bd90      	pop	{r4, r7, pc}
 80147e0:	20005164 	.word	0x20005164
 80147e4:	20005168 	.word	0x20005168
 80147e8:	20005148 	.word	0x20005148
 80147ec:	20005130 	.word	0x20005130
 80147f0:	20005160 	.word	0x20005160
 80147f4:	20005134 	.word	0x20005134
 80147f8:	20004bb0 	.word	0x20004bb0
 80147fc:	20004b98 	.word	0x20004b98
 8014800:	20005138 	.word	0x20005138
 8014804:	20004bdc 	.word	0x20004bdc
 8014808:	20004b94 	.word	0x20004b94
 801480c:	20004b90 	.word	0x20004b90

08014810 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8014810:	b480      	push	{r7}
 8014812:	b083      	sub	sp, #12
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8014818:	4a04      	ldr	r2, [pc, #16]	; (801482c <APP_THREAD_RegisterCmdBuffer+0x1c>)
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	6013      	str	r3, [r2, #0]
}
 801481e:	bf00      	nop
 8014820:	370c      	adds	r7, #12
 8014822:	46bd      	mov	sp, r7
 8014824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014828:	4770      	bx	lr
 801482a:	bf00      	nop
 801482c:	20004b78 	.word	0x20004b78

08014830 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8014830:	b480      	push	{r7}
 8014832:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8014834:	4b03      	ldr	r3, [pc, #12]	; (8014844 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	330c      	adds	r3, #12
}
 801483a:	4618      	mov	r0, r3
 801483c:	46bd      	mov	sp, r7
 801483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014842:	4770      	bx	lr
 8014844:	20004b78 	.word	0x20004b78

08014848 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8014848:	b480      	push	{r7}
 801484a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 801484c:	4b03      	ldr	r3, [pc, #12]	; (801485c <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	330b      	adds	r3, #11
}
 8014852:	4618      	mov	r0, r3
 8014854:	46bd      	mov	sp, r7
 8014856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485a:	4770      	bx	lr
 801485c:	20004b78 	.word	0x20004b78

08014860 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8014860:	b480      	push	{r7}
 8014862:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8014864:	4b03      	ldr	r3, [pc, #12]	; (8014874 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	330b      	adds	r3, #11
}
 801486a:	4618      	mov	r0, r3
 801486c:	46bd      	mov	sp, r7
 801486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014872:	4770      	bx	lr
 8014874:	20004b7c 	.word	0x20004b7c

08014878 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b082      	sub	sp, #8
 801487c:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 801487e:	4b0f      	ldr	r3, [pc, #60]	; (80148bc <Ot_Cmd_Transfer+0x44>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	2200      	movs	r2, #0
 8014884:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014888:	725a      	strb	r2, [r3, #9]
 801488a:	2200      	movs	r2, #0
 801488c:	f042 0202 	orr.w	r2, r2, #2
 8014890:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8014892:	4b0a      	ldr	r3, [pc, #40]	; (80148bc <Ot_Cmd_Transfer+0x44>)
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	330c      	adds	r3, #12
 8014898:	685b      	ldr	r3, [r3, #4]
 801489a:	3302      	adds	r3, #2
 801489c:	009b      	lsls	r3, r3, #2
 801489e:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 80148a0:	4b06      	ldr	r3, [pc, #24]	; (80148bc <Ot_Cmd_Transfer+0x44>)
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	687a      	ldr	r2, [r7, #4]
 80148a6:	b2d2      	uxtb	r2, r2
 80148a8:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 80148aa:	f7f9 feeb 	bl	800e684 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 80148ae:	f000 f829 	bl	8014904 <Wait_Getting_Ack_From_M0>
}
 80148b2:	bf00      	nop
 80148b4:	3708      	adds	r7, #8
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bd80      	pop	{r7, pc}
 80148ba:	bf00      	nop
 80148bc:	20004b78 	.word	0x20004b78

080148c0 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b082      	sub	sp, #8
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 80148c8:	f000 f82e 	bl	8014928 <Receive_Ack_From_M0>
}
 80148cc:	bf00      	nop
 80148ce:	3708      	adds	r7, #8
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}

080148d4 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 80148dc:	4a04      	ldr	r2, [pc, #16]	; (80148f0 <TL_THREAD_NotReceived+0x1c>)
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 80148e2:	f000 f82d 	bl	8014940 <Receive_Notification_From_M0>
}
 80148e6:	bf00      	nop
 80148e8:	3708      	adds	r7, #8
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bd80      	pop	{r7, pc}
 80148ee:	bf00      	nop
 80148f0:	20004b7c 	.word	0x20004b7c

080148f4 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 80148f4:	b480      	push	{r7}
 80148f6:	af00      	add	r7, sp, #0

}
 80148f8:	bf00      	nop
 80148fa:	46bd      	mov	sp, r7
 80148fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014900:	4770      	bx	lr
	...

08014904 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8014904:	b480      	push	{r7}
 8014906:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 8014908:	bf00      	nop
 801490a:	4b06      	ldr	r3, [pc, #24]	; (8014924 <Wait_Getting_Ack_From_M0+0x20>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d0fb      	beq.n	801490a <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 8014912:	4b04      	ldr	r3, [pc, #16]	; (8014924 <Wait_Getting_Ack_From_M0+0x20>)
 8014914:	2200      	movs	r2, #0
 8014916:	601a      	str	r2, [r3, #0]
}
 8014918:	bf00      	nop
 801491a:	46bd      	mov	sp, r7
 801491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014920:	4770      	bx	lr
 8014922:	bf00      	nop
 8014924:	20004b84 	.word	0x20004b84

08014928 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8014928:	b480      	push	{r7}
 801492a:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 801492c:	4b03      	ldr	r3, [pc, #12]	; (801493c <Receive_Ack_From_M0+0x14>)
 801492e:	2201      	movs	r2, #1
 8014930:	601a      	str	r2, [r3, #0]
}
 8014932:	bf00      	nop
 8014934:	46bd      	mov	sp, r7
 8014936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493a:	4770      	bx	lr
 801493c:	20004b84 	.word	0x20004b84

08014940 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8014944:	4b06      	ldr	r3, [pc, #24]	; (8014960 <Receive_Notification_From_M0+0x20>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	3301      	adds	r3, #1
 801494a:	4a05      	ldr	r2, [pc, #20]	; (8014960 <Receive_Notification_From_M0+0x20>)
 801494c:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 801494e:	4b05      	ldr	r3, [pc, #20]	; (8014964 <Receive_Notification_From_M0+0x24>)
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	2101      	movs	r1, #1
 8014954:	4618      	mov	r0, r3
 8014956:	f7fb fb0f 	bl	800ff78 <osThreadFlagsSet>
}
 801495a:	bf00      	nop
 801495c:	bd80      	pop	{r7, pc}
 801495e:	bf00      	nop
 8014960:	20004b80 	.word	0x20004b80
 8014964:	20004b88 	.word	0x20004b88

08014968 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 801496c:	22ff      	movs	r2, #255	; 0xff
 801496e:	2100      	movs	r1, #0
 8014970:	4812      	ldr	r0, [pc, #72]	; (80149bc <Send_CLI_To_M0+0x54>)
 8014972:	f002 f948 	bl	8016c06 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8014976:	4b12      	ldr	r3, [pc, #72]	; (80149c0 <Send_CLI_To_M0+0x58>)
 8014978:	881b      	ldrh	r3, [r3, #0]
 801497a:	b29b      	uxth	r3, r3
 801497c:	461a      	mov	r2, r3
 801497e:	4911      	ldr	r1, [pc, #68]	; (80149c4 <Send_CLI_To_M0+0x5c>)
 8014980:	480e      	ldr	r0, [pc, #56]	; (80149bc <Send_CLI_To_M0+0x54>)
 8014982:	f002 f935 	bl	8016bf0 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8014986:	4b0e      	ldr	r3, [pc, #56]	; (80149c0 <Send_CLI_To_M0+0x58>)
 8014988:	881b      	ldrh	r3, [r3, #0]
 801498a:	b29b      	uxth	r3, r3
 801498c:	b2da      	uxtb	r2, r3
 801498e:	4b0e      	ldr	r3, [pc, #56]	; (80149c8 <Send_CLI_To_M0+0x60>)
 8014990:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8014992:	4b0d      	ldr	r3, [pc, #52]	; (80149c8 <Send_CLI_To_M0+0x60>)
 8014994:	2200      	movs	r2, #0
 8014996:	725a      	strb	r2, [r3, #9]
 8014998:	2200      	movs	r2, #0
 801499a:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 801499c:	4b0b      	ldr	r3, [pc, #44]	; (80149cc <Send_CLI_To_M0+0x64>)
 801499e:	2200      	movs	r2, #0
 80149a0:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 80149a2:	4b07      	ldr	r3, [pc, #28]	; (80149c0 <Send_CLI_To_M0+0x58>)
 80149a4:	2200      	movs	r2, #0
 80149a6:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 80149a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80149ac:	2100      	movs	r1, #0
 80149ae:	4805      	ldr	r0, [pc, #20]	; (80149c4 <Send_CLI_To_M0+0x5c>)
 80149b0:	f002 f929 	bl	8016c06 <memset>

  TL_CLI_SendCmd();
 80149b4:	f7f9 fe74 	bl	800e6a0 <TL_CLI_SendCmd>
}
 80149b8:	bf00      	nop
 80149ba:	bd80      	pop	{r7, pc}
 80149bc:	20030a58 	.word	0x20030a58
 80149c0:	20004b74 	.word	0x20004b74
 80149c4:	20004a74 	.word	0x20004a74
 80149c8:	20030a4c 	.word	0x20030a4c
 80149cc:	20004b76 	.word	0x20004b76

080149d0 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 80149d0:	b580      	push	{r7, lr}
 80149d2:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 80149d4:	f7f9 fe80 	bl	800e6d8 <TL_THREAD_CliSendAck>
}
 80149d8:	bf00      	nop
 80149da:	bd80      	pop	{r7, pc}

080149dc <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 80149e0:	4a04      	ldr	r2, [pc, #16]	; (80149f4 <APP_THREAD_Init_UART_CLI+0x18>)
 80149e2:	2100      	movs	r1, #0
 80149e4:	4804      	ldr	r0, [pc, #16]	; (80149f8 <APP_THREAD_Init_UART_CLI+0x1c>)
 80149e6:	f7fb fa21 	bl	800fe2c <osThreadNew>
 80149ea:	4602      	mov	r2, r0
 80149ec:	4b03      	ldr	r3, [pc, #12]	; (80149fc <APP_THREAD_Init_UART_CLI+0x20>)
 80149ee:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 80149f0:	bf00      	nop
 80149f2:	bd80      	pop	{r7, pc}
 80149f4:	0801713c 	.word	0x0801713c
 80149f8:	08014407 	.word	0x08014407
 80149fc:	20004b8c 	.word	0x20004b8c

08014a00 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8014a04:	4b06      	ldr	r3, [pc, #24]	; (8014a20 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8014a06:	4a07      	ldr	r2, [pc, #28]	; (8014a24 <APP_THREAD_TL_THREAD_INIT+0x24>)
 8014a08:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8014a0a:	4b05      	ldr	r3, [pc, #20]	; (8014a20 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8014a0c:	4a06      	ldr	r2, [pc, #24]	; (8014a28 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8014a0e:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8014a10:	4b03      	ldr	r3, [pc, #12]	; (8014a20 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8014a12:	4a06      	ldr	r2, [pc, #24]	; (8014a2c <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8014a14:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8014a16:	4802      	ldr	r0, [pc, #8]	; (8014a20 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8014a18:	f7f9 fe18 	bl	800e64c <TL_THREAD_Init>
}
 8014a1c:	bf00      	nop
 8014a1e:	bd80      	pop	{r7, pc}
 8014a20:	200300d4 	.word	0x200300d4
 8014a24:	20030834 	.word	0x20030834
 8014a28:	20030940 	.word	0x20030940
 8014a2c:	20030a4c 	.word	0x20030a4c

08014a30 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b084      	sub	sp, #16
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	7adb      	ldrb	r3, [r3, #11]
 8014a40:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	330c      	adds	r3, #12
 8014a46:	4906      	ldr	r1, [pc, #24]	; (8014a60 <TL_THREAD_CliNotReceived+0x30>)
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f7eb fb99 	bl	8000180 <strcmp>
 8014a4e:	4603      	mov	r3, r0
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d101      	bne.n	8014a58 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8014a54:	f7ff ffbc 	bl	80149d0 <Send_CLI_Ack_For_OT>
  }
}
 8014a58:	bf00      	nop
 8014a5a:	3710      	adds	r7, #16
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}
 8014a60:	08016fc0 	.word	0x08016fc0

08014a64 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8014a68:	4b09      	ldr	r3, [pc, #36]	; (8014a90 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d00d      	beq.n	8014a8c <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8014a70:	4b07      	ldr	r3, [pc, #28]	; (8014a90 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	2b01      	cmp	r3, #1
 8014a76:	d904      	bls.n	8014a82 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8014a78:	2100      	movs	r1, #0
 8014a7a:	2000      	movs	r0, #0
 8014a7c:	f7ff faf8 	bl	8014070 <APP_THREAD_Error>
 8014a80:	e001      	b.n	8014a86 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8014a82:	f7fa fd47 	bl	800f514 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8014a86:	4b02      	ldr	r3, [pc, #8]	; (8014a90 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8014a88:	2200      	movs	r2, #0
 8014a8a:	601a      	str	r2, [r3, #0]
  }
}
 8014a8c:	bf00      	nop
 8014a8e:	bd80      	pop	{r7, pc}
 8014a90:	20004b80 	.word	0x20004b80

08014a94 <LL_PWR_EnableBootC2>:
{
 8014a94:	b480      	push	{r7}
 8014a96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8014a98:	4b05      	ldr	r3, [pc, #20]	; (8014ab0 <LL_PWR_EnableBootC2+0x1c>)
 8014a9a:	68db      	ldr	r3, [r3, #12]
 8014a9c:	4a04      	ldr	r2, [pc, #16]	; (8014ab0 <LL_PWR_EnableBootC2+0x1c>)
 8014a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014aa2:	60d3      	str	r3, [r2, #12]
}
 8014aa4:	bf00      	nop
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aac:	4770      	bx	lr
 8014aae:	bf00      	nop
 8014ab0:	58000400 	.word	0x58000400

08014ab4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8014ab4:	b480      	push	{r7}
 8014ab6:	b083      	sub	sp, #12
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8014abc:	4b06      	ldr	r3, [pc, #24]	; (8014ad8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8014abe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8014ac2:	4905      	ldr	r1, [pc, #20]	; (8014ad8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	4313      	orrs	r3, r2
 8014ac8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8014acc:	bf00      	nop
 8014ace:	370c      	adds	r7, #12
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad6:	4770      	bx	lr
 8014ad8:	58000800 	.word	0x58000800

08014adc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8014adc:	b480      	push	{r7}
 8014ade:	b083      	sub	sp, #12
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8014ae4:	4b05      	ldr	r3, [pc, #20]	; (8014afc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014ae6:	6a1a      	ldr	r2, [r3, #32]
 8014ae8:	4904      	ldr	r1, [pc, #16]	; (8014afc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	4313      	orrs	r3, r2
 8014aee:	620b      	str	r3, [r1, #32]
}
 8014af0:	bf00      	nop
 8014af2:	370c      	adds	r7, #12
 8014af4:	46bd      	mov	sp, r7
 8014af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afa:	4770      	bx	lr
 8014afc:	58000800 	.word	0x58000800

08014b00 <LL_AHB3_GRP1_EnableClock>:
{
 8014b00:	b480      	push	{r7}
 8014b02:	b085      	sub	sp, #20
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8014b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	4313      	orrs	r3, r2
 8014b16:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8014b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014b1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	4013      	ands	r3, r2
 8014b22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014b24:	68fb      	ldr	r3, [r7, #12]
}
 8014b26:	bf00      	nop
 8014b28:	3714      	adds	r7, #20
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b30:	4770      	bx	lr

08014b32 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8014b32:	b480      	push	{r7}
 8014b34:	b085      	sub	sp, #20
 8014b36:	af00      	add	r7, sp, #0
 8014b38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8014b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014b3e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8014b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	4313      	orrs	r3, r2
 8014b4a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8014b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014b52:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	4013      	ands	r3, r2
 8014b5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014b5c:	68fb      	ldr	r3, [r7, #12]
}
 8014b5e:	bf00      	nop
 8014b60:	3714      	adds	r7, #20
 8014b62:	46bd      	mov	sp, r7
 8014b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b68:	4770      	bx	lr

08014b6a <LL_C1_IPCC_EnableIT_TXF>:
{
 8014b6a:	b480      	push	{r7}
 8014b6c:	b083      	sub	sp, #12
 8014b6e:	af00      	add	r7, sp, #0
 8014b70:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	601a      	str	r2, [r3, #0]
}
 8014b7e:	bf00      	nop
 8014b80:	370c      	adds	r7, #12
 8014b82:	46bd      	mov	sp, r7
 8014b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b88:	4770      	bx	lr

08014b8a <LL_C1_IPCC_EnableIT_RXO>:
{
 8014b8a:	b480      	push	{r7}
 8014b8c:	b083      	sub	sp, #12
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	f043 0201 	orr.w	r2, r3, #1
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	601a      	str	r2, [r3, #0]
}
 8014b9e:	bf00      	nop
 8014ba0:	370c      	adds	r7, #12
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba8:	4770      	bx	lr

08014baa <LL_C1_IPCC_EnableTransmitChannel>:
{
 8014baa:	b480      	push	{r7}
 8014bac:	b083      	sub	sp, #12
 8014bae:	af00      	add	r7, sp, #0
 8014bb0:	6078      	str	r0, [r7, #4]
 8014bb2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	685a      	ldr	r2, [r3, #4]
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	041b      	lsls	r3, r3, #16
 8014bbc:	43db      	mvns	r3, r3
 8014bbe:	401a      	ands	r2, r3
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	605a      	str	r2, [r3, #4]
}
 8014bc4:	bf00      	nop
 8014bc6:	370c      	adds	r7, #12
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bce:	4770      	bx	lr

08014bd0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8014bd0:	b480      	push	{r7}
 8014bd2:	b083      	sub	sp, #12
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
 8014bd8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	685a      	ldr	r2, [r3, #4]
 8014bde:	683b      	ldr	r3, [r7, #0]
 8014be0:	041b      	lsls	r3, r3, #16
 8014be2:	431a      	orrs	r2, r3
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	605a      	str	r2, [r3, #4]
}
 8014be8:	bf00      	nop
 8014bea:	370c      	adds	r7, #12
 8014bec:	46bd      	mov	sp, r7
 8014bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf2:	4770      	bx	lr

08014bf4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8014bf4:	b480      	push	{r7}
 8014bf6:	b083      	sub	sp, #12
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
 8014bfc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	685a      	ldr	r2, [r3, #4]
 8014c02:	683b      	ldr	r3, [r7, #0]
 8014c04:	43db      	mvns	r3, r3
 8014c06:	401a      	ands	r2, r3
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	605a      	str	r2, [r3, #4]
}
 8014c0c:	bf00      	nop
 8014c0e:	370c      	adds	r7, #12
 8014c10:	46bd      	mov	sp, r7
 8014c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c16:	4770      	bx	lr

08014c18 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8014c18:	b480      	push	{r7}
 8014c1a:	b083      	sub	sp, #12
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
 8014c20:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	685a      	ldr	r2, [r3, #4]
 8014c26:	683b      	ldr	r3, [r7, #0]
 8014c28:	431a      	orrs	r2, r3
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	605a      	str	r2, [r3, #4]
}
 8014c2e:	bf00      	nop
 8014c30:	370c      	adds	r7, #12
 8014c32:	46bd      	mov	sp, r7
 8014c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c38:	4770      	bx	lr

08014c3a <LL_C1_IPCC_ClearFlag_CHx>:
{
 8014c3a:	b480      	push	{r7}
 8014c3c:	b083      	sub	sp, #12
 8014c3e:	af00      	add	r7, sp, #0
 8014c40:	6078      	str	r0, [r7, #4]
 8014c42:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	683a      	ldr	r2, [r7, #0]
 8014c48:	609a      	str	r2, [r3, #8]
}
 8014c4a:	bf00      	nop
 8014c4c:	370c      	adds	r7, #12
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c54:	4770      	bx	lr

08014c56 <LL_C1_IPCC_SetFlag_CHx>:
{
 8014c56:	b480      	push	{r7}
 8014c58:	b083      	sub	sp, #12
 8014c5a:	af00      	add	r7, sp, #0
 8014c5c:	6078      	str	r0, [r7, #4]
 8014c5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8014c60:	683b      	ldr	r3, [r7, #0]
 8014c62:	041a      	lsls	r2, r3, #16
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	609a      	str	r2, [r3, #8]
}
 8014c68:	bf00      	nop
 8014c6a:	370c      	adds	r7, #12
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c72:	4770      	bx	lr

08014c74 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8014c74:	b480      	push	{r7}
 8014c76:	b083      	sub	sp, #12
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
 8014c7c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	68da      	ldr	r2, [r3, #12]
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	4013      	ands	r3, r2
 8014c86:	683a      	ldr	r2, [r7, #0]
 8014c88:	429a      	cmp	r2, r3
 8014c8a:	d101      	bne.n	8014c90 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8014c8c:	2301      	movs	r3, #1
 8014c8e:	e000      	b.n	8014c92 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8014c90:	2300      	movs	r3, #0
}
 8014c92:	4618      	mov	r0, r3
 8014c94:	370c      	adds	r7, #12
 8014c96:	46bd      	mov	sp, r7
 8014c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9c:	4770      	bx	lr

08014c9e <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8014c9e:	b480      	push	{r7}
 8014ca0:	b083      	sub	sp, #12
 8014ca2:	af00      	add	r7, sp, #0
 8014ca4:	6078      	str	r0, [r7, #4]
 8014ca6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	69da      	ldr	r2, [r3, #28]
 8014cac:	683b      	ldr	r3, [r7, #0]
 8014cae:	4013      	ands	r3, r2
 8014cb0:	683a      	ldr	r2, [r7, #0]
 8014cb2:	429a      	cmp	r2, r3
 8014cb4:	d101      	bne.n	8014cba <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	e000      	b.n	8014cbc <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8014cba:	2300      	movs	r3, #0
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	370c      	adds	r7, #12
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc6:	4770      	bx	lr

08014cc8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8014ccc:	2102      	movs	r1, #2
 8014cce:	482a      	ldr	r0, [pc, #168]	; (8014d78 <HW_IPCC_Rx_Handler+0xb0>)
 8014cd0:	f7ff ffe5 	bl	8014c9e <LL_C2_IPCC_IsActiveFlag_CHx>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d009      	beq.n	8014cee <HW_IPCC_Rx_Handler+0x26>
 8014cda:	4b27      	ldr	r3, [pc, #156]	; (8014d78 <HW_IPCC_Rx_Handler+0xb0>)
 8014cdc:	685b      	ldr	r3, [r3, #4]
 8014cde:	43db      	mvns	r3, r3
 8014ce0:	f003 0302 	and.w	r3, r3, #2
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d002      	beq.n	8014cee <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8014ce8:	f000 f90a 	bl	8014f00 <HW_IPCC_SYS_EvtHandler>
 8014cec:	e041      	b.n	8014d72 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8014cee:	2104      	movs	r1, #4
 8014cf0:	4821      	ldr	r0, [pc, #132]	; (8014d78 <HW_IPCC_Rx_Handler+0xb0>)
 8014cf2:	f7ff ffd4 	bl	8014c9e <LL_C2_IPCC_IsActiveFlag_CHx>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d009      	beq.n	8014d10 <HW_IPCC_Rx_Handler+0x48>
 8014cfc:	4b1e      	ldr	r3, [pc, #120]	; (8014d78 <HW_IPCC_Rx_Handler+0xb0>)
 8014cfe:	685b      	ldr	r3, [r3, #4]
 8014d00:	43db      	mvns	r3, r3
 8014d02:	f003 0304 	and.w	r3, r3, #4
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d002      	beq.n	8014d10 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8014d0a:	f000 f953 	bl	8014fb4 <HW_IPCC_THREAD_NotEvtHandler>
 8014d0e:	e030      	b.n	8014d72 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8014d10:	2110      	movs	r1, #16
 8014d12:	4819      	ldr	r0, [pc, #100]	; (8014d78 <HW_IPCC_Rx_Handler+0xb0>)
 8014d14:	f7ff ffc3 	bl	8014c9e <LL_C2_IPCC_IsActiveFlag_CHx>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d009      	beq.n	8014d32 <HW_IPCC_Rx_Handler+0x6a>
 8014d1e:	4b16      	ldr	r3, [pc, #88]	; (8014d78 <HW_IPCC_Rx_Handler+0xb0>)
 8014d20:	685b      	ldr	r3, [r3, #4]
 8014d22:	43db      	mvns	r3, r3
 8014d24:	f003 0310 	and.w	r3, r3, #16
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d002      	beq.n	8014d32 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8014d2c:	f000 f94e 	bl	8014fcc <HW_IPCC_THREAD_CliNotEvtHandler>
 8014d30:	e01f      	b.n	8014d72 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8014d32:	2101      	movs	r1, #1
 8014d34:	4810      	ldr	r0, [pc, #64]	; (8014d78 <HW_IPCC_Rx_Handler+0xb0>)
 8014d36:	f7ff ffb2 	bl	8014c9e <LL_C2_IPCC_IsActiveFlag_CHx>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d008      	beq.n	8014d52 <HW_IPCC_Rx_Handler+0x8a>
 8014d40:	4b0d      	ldr	r3, [pc, #52]	; (8014d78 <HW_IPCC_Rx_Handler+0xb0>)
 8014d42:	685b      	ldr	r3, [r3, #4]
 8014d44:	f003 0301 	and.w	r3, r3, #1
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d102      	bne.n	8014d52 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8014d4c:	f000 f89c 	bl	8014e88 <HW_IPCC_BLE_EvtHandler>
 8014d50:	e00f      	b.n	8014d72 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8014d52:	2108      	movs	r1, #8
 8014d54:	4808      	ldr	r0, [pc, #32]	; (8014d78 <HW_IPCC_Rx_Handler+0xb0>)
 8014d56:	f7ff ffa2 	bl	8014c9e <LL_C2_IPCC_IsActiveFlag_CHx>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d009      	beq.n	8014d74 <HW_IPCC_Rx_Handler+0xac>
 8014d60:	4b05      	ldr	r3, [pc, #20]	; (8014d78 <HW_IPCC_Rx_Handler+0xb0>)
 8014d62:	685b      	ldr	r3, [r3, #4]
 8014d64:	43db      	mvns	r3, r3
 8014d66:	f003 0308 	and.w	r3, r3, #8
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d002      	beq.n	8014d74 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8014d6e:	f000 f979 	bl	8015064 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8014d72:	bf00      	nop
 8014d74:	bf00      	nop
}
 8014d76:	bd80      	pop	{r7, pc}
 8014d78:	58000c00 	.word	0x58000c00

08014d7c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8014d80:	2102      	movs	r1, #2
 8014d82:	482b      	ldr	r0, [pc, #172]	; (8014e30 <HW_IPCC_Tx_Handler+0xb4>)
 8014d84:	f7ff ff76 	bl	8014c74 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014d88:	4603      	mov	r3, r0
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d109      	bne.n	8014da2 <HW_IPCC_Tx_Handler+0x26>
 8014d8e:	4b28      	ldr	r3, [pc, #160]	; (8014e30 <HW_IPCC_Tx_Handler+0xb4>)
 8014d90:	685b      	ldr	r3, [r3, #4]
 8014d92:	43db      	mvns	r3, r3
 8014d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d002      	beq.n	8014da2 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8014d9c:	f000 f8a4 	bl	8014ee8 <HW_IPCC_SYS_CmdEvtHandler>
 8014da0:	e042      	b.n	8014e28 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8014da2:	2104      	movs	r1, #4
 8014da4:	4822      	ldr	r0, [pc, #136]	; (8014e30 <HW_IPCC_Tx_Handler+0xb4>)
 8014da6:	f7ff ff65 	bl	8014c74 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014daa:	4603      	mov	r3, r0
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d109      	bne.n	8014dc4 <HW_IPCC_Tx_Handler+0x48>
 8014db0:	4b1f      	ldr	r3, [pc, #124]	; (8014e30 <HW_IPCC_Tx_Handler+0xb4>)
 8014db2:	685b      	ldr	r3, [r3, #4]
 8014db4:	43db      	mvns	r3, r3
 8014db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d002      	beq.n	8014dc4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8014dbe:	f000 f8ed 	bl	8014f9c <HW_IPCC_OT_CmdEvtHandler>
 8014dc2:	e031      	b.n	8014e28 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8014dc4:	2102      	movs	r1, #2
 8014dc6:	481a      	ldr	r0, [pc, #104]	; (8014e30 <HW_IPCC_Tx_Handler+0xb4>)
 8014dc8:	f7ff ff54 	bl	8014c74 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d109      	bne.n	8014de6 <HW_IPCC_Tx_Handler+0x6a>
 8014dd2:	4b17      	ldr	r3, [pc, #92]	; (8014e30 <HW_IPCC_Tx_Handler+0xb4>)
 8014dd4:	685b      	ldr	r3, [r3, #4]
 8014dd6:	43db      	mvns	r3, r3
 8014dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d002      	beq.n	8014de6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8014de0:	f000 f882 	bl	8014ee8 <HW_IPCC_SYS_CmdEvtHandler>
 8014de4:	e020      	b.n	8014e28 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8014de6:	2108      	movs	r1, #8
 8014de8:	4811      	ldr	r0, [pc, #68]	; (8014e30 <HW_IPCC_Tx_Handler+0xb4>)
 8014dea:	f7ff ff43 	bl	8014c74 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014dee:	4603      	mov	r3, r0
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d109      	bne.n	8014e08 <HW_IPCC_Tx_Handler+0x8c>
 8014df4:	4b0e      	ldr	r3, [pc, #56]	; (8014e30 <HW_IPCC_Tx_Handler+0xb4>)
 8014df6:	685b      	ldr	r3, [r3, #4]
 8014df8:	43db      	mvns	r3, r3
 8014dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d002      	beq.n	8014e08 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8014e02:	f000 f911 	bl	8015028 <HW_IPCC_MM_FreeBufHandler>
 8014e06:	e00f      	b.n	8014e28 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8014e08:	2120      	movs	r1, #32
 8014e0a:	4809      	ldr	r0, [pc, #36]	; (8014e30 <HW_IPCC_Tx_Handler+0xb4>)
 8014e0c:	f7ff ff32 	bl	8014c74 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014e10:	4603      	mov	r3, r0
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d109      	bne.n	8014e2a <HW_IPCC_Tx_Handler+0xae>
 8014e16:	4b06      	ldr	r3, [pc, #24]	; (8014e30 <HW_IPCC_Tx_Handler+0xb4>)
 8014e18:	685b      	ldr	r3, [r3, #4]
 8014e1a:	43db      	mvns	r3, r3
 8014e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d002      	beq.n	8014e2a <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8014e24:	f000 f83c 	bl	8014ea0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8014e28:	bf00      	nop
 8014e2a:	bf00      	nop
}
 8014e2c:	bd80      	pop	{r7, pc}
 8014e2e:	bf00      	nop
 8014e30:	58000c00 	.word	0x58000c00

08014e34 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8014e38:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8014e3c:	f7ff fe79 	bl	8014b32 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8014e40:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014e44:	f7ff fe36 	bl	8014ab4 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8014e48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014e4c:	f7ff fe46 	bl	8014adc <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8014e50:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8014e52:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8014e54:	f7ff fe1e 	bl	8014a94 <LL_PWR_EnableBootC2>

  return;
 8014e58:	bf00      	nop
}
 8014e5a:	bd80      	pop	{r7, pc}

08014e5c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8014e60:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8014e64:	f7ff fe4c 	bl	8014b00 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8014e68:	4806      	ldr	r0, [pc, #24]	; (8014e84 <HW_IPCC_Init+0x28>)
 8014e6a:	f7ff fe8e 	bl	8014b8a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8014e6e:	4805      	ldr	r0, [pc, #20]	; (8014e84 <HW_IPCC_Init+0x28>)
 8014e70:	f7ff fe7b 	bl	8014b6a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8014e74:	202c      	movs	r0, #44	; 0x2c
 8014e76:	f7f0 ff34 	bl	8005ce2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8014e7a:	202d      	movs	r0, #45	; 0x2d
 8014e7c:	f7f0 ff31 	bl	8005ce2 <HAL_NVIC_EnableIRQ>

  return;
 8014e80:	bf00      	nop
}
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	58000c00 	.word	0x58000c00

08014e88 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8014e8c:	f7f9 fb26 	bl	800e4dc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8014e90:	2101      	movs	r1, #1
 8014e92:	4802      	ldr	r0, [pc, #8]	; (8014e9c <HW_IPCC_BLE_EvtHandler+0x14>)
 8014e94:	f7ff fed1 	bl	8014c3a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014e98:	bf00      	nop
}
 8014e9a:	bd80      	pop	{r7, pc}
 8014e9c:	58000c00 	.word	0x58000c00

08014ea0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8014ea4:	2120      	movs	r1, #32
 8014ea6:	4803      	ldr	r0, [pc, #12]	; (8014eb4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8014ea8:	f7ff fe92 	bl	8014bd0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8014eac:	f7f9 fb46 	bl	800e53c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8014eb0:	bf00      	nop
}
 8014eb2:	bd80      	pop	{r7, pc}
 8014eb4:	58000c00 	.word	0x58000c00

08014eb8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8014ebc:	2102      	movs	r1, #2
 8014ebe:	4802      	ldr	r0, [pc, #8]	; (8014ec8 <HW_IPCC_SYS_Init+0x10>)
 8014ec0:	f7ff fe98 	bl	8014bf4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014ec4:	bf00      	nop
}
 8014ec6:	bd80      	pop	{r7, pc}
 8014ec8:	58000c00 	.word	0x58000c00

08014ecc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014ed0:	2102      	movs	r1, #2
 8014ed2:	4804      	ldr	r0, [pc, #16]	; (8014ee4 <HW_IPCC_SYS_SendCmd+0x18>)
 8014ed4:	f7ff febf 	bl	8014c56 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014ed8:	2102      	movs	r1, #2
 8014eda:	4802      	ldr	r0, [pc, #8]	; (8014ee4 <HW_IPCC_SYS_SendCmd+0x18>)
 8014edc:	f7ff fe65 	bl	8014baa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8014ee0:	bf00      	nop
}
 8014ee2:	bd80      	pop	{r7, pc}
 8014ee4:	58000c00 	.word	0x58000c00

08014ee8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014eec:	2102      	movs	r1, #2
 8014eee:	4803      	ldr	r0, [pc, #12]	; (8014efc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8014ef0:	f7ff fe6e 	bl	8014bd0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8014ef4:	f7f9 fb72 	bl	800e5dc <HW_IPCC_SYS_CmdEvtNot>

  return;
 8014ef8:	bf00      	nop
}
 8014efa:	bd80      	pop	{r7, pc}
 8014efc:	58000c00 	.word	0x58000c00

08014f00 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8014f04:	f7f9 fb80 	bl	800e608 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8014f08:	2102      	movs	r1, #2
 8014f0a:	4802      	ldr	r0, [pc, #8]	; (8014f14 <HW_IPCC_SYS_EvtHandler+0x14>)
 8014f0c:	f7ff fe95 	bl	8014c3a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014f10:	bf00      	nop
}
 8014f12:	bd80      	pop	{r7, pc}
 8014f14:	58000c00 	.word	0x58000c00

08014f18 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8014f1c:	2104      	movs	r1, #4
 8014f1e:	4804      	ldr	r0, [pc, #16]	; (8014f30 <HW_IPCC_THREAD_Init+0x18>)
 8014f20:	f7ff fe68 	bl	8014bf4 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8014f24:	2110      	movs	r1, #16
 8014f26:	4802      	ldr	r0, [pc, #8]	; (8014f30 <HW_IPCC_THREAD_Init+0x18>)
 8014f28:	f7ff fe64 	bl	8014bf4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014f2c:	bf00      	nop
}
 8014f2e:	bd80      	pop	{r7, pc}
 8014f30:	58000c00 	.word	0x58000c00

08014f34 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8014f38:	2104      	movs	r1, #4
 8014f3a:	4804      	ldr	r0, [pc, #16]	; (8014f4c <HW_IPCC_OT_SendCmd+0x18>)
 8014f3c:	f7ff fe8b 	bl	8014c56 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8014f40:	2104      	movs	r1, #4
 8014f42:	4802      	ldr	r0, [pc, #8]	; (8014f4c <HW_IPCC_OT_SendCmd+0x18>)
 8014f44:	f7ff fe31 	bl	8014baa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8014f48:	bf00      	nop
}
 8014f4a:	bd80      	pop	{r7, pc}
 8014f4c:	58000c00 	.word	0x58000c00

08014f50 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8014f54:	2110      	movs	r1, #16
 8014f56:	4802      	ldr	r0, [pc, #8]	; (8014f60 <HW_IPCC_CLI_SendCmd+0x10>)
 8014f58:	f7ff fe7d 	bl	8014c56 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8014f5c:	bf00      	nop
}
 8014f5e:	bd80      	pop	{r7, pc}
 8014f60:	58000c00 	.word	0x58000c00

08014f64 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8014f68:	2104      	movs	r1, #4
 8014f6a:	4804      	ldr	r0, [pc, #16]	; (8014f7c <HW_IPCC_THREAD_SendAck+0x18>)
 8014f6c:	f7ff fe65 	bl	8014c3a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8014f70:	2104      	movs	r1, #4
 8014f72:	4802      	ldr	r0, [pc, #8]	; (8014f7c <HW_IPCC_THREAD_SendAck+0x18>)
 8014f74:	f7ff fe3e 	bl	8014bf4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014f78:	bf00      	nop
}
 8014f7a:	bd80      	pop	{r7, pc}
 8014f7c:	58000c00 	.word	0x58000c00

08014f80 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8014f84:	2110      	movs	r1, #16
 8014f86:	4804      	ldr	r0, [pc, #16]	; (8014f98 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8014f88:	f7ff fe57 	bl	8014c3a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8014f8c:	2110      	movs	r1, #16
 8014f8e:	4802      	ldr	r0, [pc, #8]	; (8014f98 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8014f90:	f7ff fe30 	bl	8014bf4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014f94:	bf00      	nop
}
 8014f96:	bd80      	pop	{r7, pc}
 8014f98:	58000c00 	.word	0x58000c00

08014f9c <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8014fa0:	2104      	movs	r1, #4
 8014fa2:	4803      	ldr	r0, [pc, #12]	; (8014fb0 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8014fa4:	f7ff fe14 	bl	8014bd0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8014fa8:	f7f9 fba4 	bl	800e6f4 <HW_IPCC_OT_CmdEvtNot>

  return;
 8014fac:	bf00      	nop
}
 8014fae:	bd80      	pop	{r7, pc}
 8014fb0:	58000c00 	.word	0x58000c00

08014fb4 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8014fb8:	2104      	movs	r1, #4
 8014fba:	4803      	ldr	r0, [pc, #12]	; (8014fc8 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8014fbc:	f7ff fe2c 	bl	8014c18 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8014fc0:	f7f9 fba4 	bl	800e70c <HW_IPCC_THREAD_EvtNot>

  return;
 8014fc4:	bf00      	nop
}
 8014fc6:	bd80      	pop	{r7, pc}
 8014fc8:	58000c00 	.word	0x58000c00

08014fcc <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8014fd0:	2110      	movs	r1, #16
 8014fd2:	4803      	ldr	r0, [pc, #12]	; (8014fe0 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8014fd4:	f7ff fe20 	bl	8014c18 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8014fd8:	f7f9 fba4 	bl	800e724 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8014fdc:	bf00      	nop
}
 8014fde:	bd80      	pop	{r7, pc}
 8014fe0:	58000c00 	.word	0x58000c00

08014fe4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b082      	sub	sp, #8
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8014fec:	2108      	movs	r1, #8
 8014fee:	480c      	ldr	r0, [pc, #48]	; (8015020 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014ff0:	f7ff fe40 	bl	8014c74 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d007      	beq.n	801500a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8014ffa:	4a0a      	ldr	r2, [pc, #40]	; (8015024 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8015000:	2108      	movs	r1, #8
 8015002:	4807      	ldr	r0, [pc, #28]	; (8015020 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8015004:	f7ff fdd1 	bl	8014baa <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8015008:	e006      	b.n	8015018 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801500e:	2108      	movs	r1, #8
 8015010:	4803      	ldr	r0, [pc, #12]	; (8015020 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8015012:	f7ff fe20 	bl	8014c56 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8015016:	bf00      	nop
}
 8015018:	3708      	adds	r7, #8
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}
 801501e:	bf00      	nop
 8015020:	58000c00 	.word	0x58000c00
 8015024:	20004c6c 	.word	0x20004c6c

08015028 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8015028:	b580      	push	{r7, lr}
 801502a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801502c:	2108      	movs	r1, #8
 801502e:	4806      	ldr	r0, [pc, #24]	; (8015048 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8015030:	f7ff fdce 	bl	8014bd0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8015034:	4b05      	ldr	r3, [pc, #20]	; (801504c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801503a:	2108      	movs	r1, #8
 801503c:	4802      	ldr	r0, [pc, #8]	; (8015048 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801503e:	f7ff fe0a 	bl	8014c56 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8015042:	bf00      	nop
}
 8015044:	bd80      	pop	{r7, pc}
 8015046:	bf00      	nop
 8015048:	58000c00 	.word	0x58000c00
 801504c:	20004c6c 	.word	0x20004c6c

08015050 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8015050:	b580      	push	{r7, lr}
 8015052:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8015054:	2108      	movs	r1, #8
 8015056:	4802      	ldr	r0, [pc, #8]	; (8015060 <HW_IPCC_TRACES_Init+0x10>)
 8015058:	f7ff fdcc 	bl	8014bf4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801505c:	bf00      	nop
}
 801505e:	bd80      	pop	{r7, pc}
 8015060:	58000c00 	.word	0x58000c00

08015064 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8015064:	b580      	push	{r7, lr}
 8015066:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8015068:	f7f9 fbee 	bl	800e848 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 801506c:	2108      	movs	r1, #8
 801506e:	4802      	ldr	r0, [pc, #8]	; (8015078 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8015070:	f7ff fde3 	bl	8014c3a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015074:	bf00      	nop
}
 8015076:	bd80      	pop	{r7, pc}
 8015078:	58000c00 	.word	0x58000c00

0801507c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8015080:	2200      	movs	r2, #0
 8015082:	4912      	ldr	r1, [pc, #72]	; (80150cc <MX_USB_Device_Init+0x50>)
 8015084:	4812      	ldr	r0, [pc, #72]	; (80150d0 <MX_USB_Device_Init+0x54>)
 8015086:	f7f7 fef3 	bl	800ce70 <USBD_Init>
 801508a:	4603      	mov	r3, r0
 801508c:	2b00      	cmp	r3, #0
 801508e:	d001      	beq.n	8015094 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8015090:	f7ee fbc0 	bl	8003814 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8015094:	490f      	ldr	r1, [pc, #60]	; (80150d4 <MX_USB_Device_Init+0x58>)
 8015096:	480e      	ldr	r0, [pc, #56]	; (80150d0 <MX_USB_Device_Init+0x54>)
 8015098:	f7f7 ff1a 	bl	800ced0 <USBD_RegisterClass>
 801509c:	4603      	mov	r3, r0
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d001      	beq.n	80150a6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80150a2:	f7ee fbb7 	bl	8003814 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80150a6:	490c      	ldr	r1, [pc, #48]	; (80150d8 <MX_USB_Device_Init+0x5c>)
 80150a8:	4809      	ldr	r0, [pc, #36]	; (80150d0 <MX_USB_Device_Init+0x54>)
 80150aa:	f7f7 fe3b 	bl	800cd24 <USBD_CDC_RegisterInterface>
 80150ae:	4603      	mov	r3, r0
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d001      	beq.n	80150b8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80150b4:	f7ee fbae 	bl	8003814 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80150b8:	4805      	ldr	r0, [pc, #20]	; (80150d0 <MX_USB_Device_Init+0x54>)
 80150ba:	f7f7 ff30 	bl	800cf1e <USBD_Start>
 80150be:	4603      	mov	r3, r0
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d001      	beq.n	80150c8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80150c4:	f7ee fba6 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80150c8:	bf00      	nop
 80150ca:	bd80      	pop	{r7, pc}
 80150cc:	20000198 	.word	0x20000198
 80150d0:	2000516c 	.word	0x2000516c
 80150d4:	2000005c 	.word	0x2000005c
 80150d8:	20000184 	.word	0x20000184

080150dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80150e0:	2200      	movs	r2, #0
 80150e2:	4905      	ldr	r1, [pc, #20]	; (80150f8 <CDC_Init_FS+0x1c>)
 80150e4:	4805      	ldr	r0, [pc, #20]	; (80150fc <CDC_Init_FS+0x20>)
 80150e6:	f7f7 fe32 	bl	800cd4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80150ea:	4905      	ldr	r1, [pc, #20]	; (8015100 <CDC_Init_FS+0x24>)
 80150ec:	4803      	ldr	r0, [pc, #12]	; (80150fc <CDC_Init_FS+0x20>)
 80150ee:	f7f7 fe4c 	bl	800cd8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80150f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80150f4:	4618      	mov	r0, r3
 80150f6:	bd80      	pop	{r7, pc}
 80150f8:	20005c3c 	.word	0x20005c3c
 80150fc:	2000516c 	.word	0x2000516c
 8015100:	2000543c 	.word	0x2000543c

08015104 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015104:	b480      	push	{r7}
 8015106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015108:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801510a:	4618      	mov	r0, r3
 801510c:	46bd      	mov	sp, r7
 801510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015112:	4770      	bx	lr

08015114 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015114:	b480      	push	{r7}
 8015116:	b083      	sub	sp, #12
 8015118:	af00      	add	r7, sp, #0
 801511a:	4603      	mov	r3, r0
 801511c:	6039      	str	r1, [r7, #0]
 801511e:	71fb      	strb	r3, [r7, #7]
 8015120:	4613      	mov	r3, r2
 8015122:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015124:	79fb      	ldrb	r3, [r7, #7]
 8015126:	2b23      	cmp	r3, #35	; 0x23
 8015128:	d84a      	bhi.n	80151c0 <CDC_Control_FS+0xac>
 801512a:	a201      	add	r2, pc, #4	; (adr r2, 8015130 <CDC_Control_FS+0x1c>)
 801512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015130:	080151c1 	.word	0x080151c1
 8015134:	080151c1 	.word	0x080151c1
 8015138:	080151c1 	.word	0x080151c1
 801513c:	080151c1 	.word	0x080151c1
 8015140:	080151c1 	.word	0x080151c1
 8015144:	080151c1 	.word	0x080151c1
 8015148:	080151c1 	.word	0x080151c1
 801514c:	080151c1 	.word	0x080151c1
 8015150:	080151c1 	.word	0x080151c1
 8015154:	080151c1 	.word	0x080151c1
 8015158:	080151c1 	.word	0x080151c1
 801515c:	080151c1 	.word	0x080151c1
 8015160:	080151c1 	.word	0x080151c1
 8015164:	080151c1 	.word	0x080151c1
 8015168:	080151c1 	.word	0x080151c1
 801516c:	080151c1 	.word	0x080151c1
 8015170:	080151c1 	.word	0x080151c1
 8015174:	080151c1 	.word	0x080151c1
 8015178:	080151c1 	.word	0x080151c1
 801517c:	080151c1 	.word	0x080151c1
 8015180:	080151c1 	.word	0x080151c1
 8015184:	080151c1 	.word	0x080151c1
 8015188:	080151c1 	.word	0x080151c1
 801518c:	080151c1 	.word	0x080151c1
 8015190:	080151c1 	.word	0x080151c1
 8015194:	080151c1 	.word	0x080151c1
 8015198:	080151c1 	.word	0x080151c1
 801519c:	080151c1 	.word	0x080151c1
 80151a0:	080151c1 	.word	0x080151c1
 80151a4:	080151c1 	.word	0x080151c1
 80151a8:	080151c1 	.word	0x080151c1
 80151ac:	080151c1 	.word	0x080151c1
 80151b0:	080151c1 	.word	0x080151c1
 80151b4:	080151c1 	.word	0x080151c1
 80151b8:	080151c1 	.word	0x080151c1
 80151bc:	080151c1 	.word	0x080151c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80151c0:	bf00      	nop
  }

  return (USBD_OK);
 80151c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80151c4:	4618      	mov	r0, r3
 80151c6:	370c      	adds	r7, #12
 80151c8:	46bd      	mov	sp, r7
 80151ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ce:	4770      	bx	lr

080151d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b082      	sub	sp, #8
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
 80151d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80151da:	6879      	ldr	r1, [r7, #4]
 80151dc:	4805      	ldr	r0, [pc, #20]	; (80151f4 <CDC_Receive_FS+0x24>)
 80151de:	f7f7 fdd4 	bl	800cd8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80151e2:	4804      	ldr	r0, [pc, #16]	; (80151f4 <CDC_Receive_FS+0x24>)
 80151e4:	f7f7 fe1a 	bl	800ce1c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80151e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80151ea:	4618      	mov	r0, r3
 80151ec:	3708      	adds	r7, #8
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bd80      	pop	{r7, pc}
 80151f2:	bf00      	nop
 80151f4:	2000516c 	.word	0x2000516c

080151f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b084      	sub	sp, #16
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
 8015200:	460b      	mov	r3, r1
 8015202:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015204:	2300      	movs	r3, #0
 8015206:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015208:	4b0d      	ldr	r3, [pc, #52]	; (8015240 <CDC_Transmit_FS+0x48>)
 801520a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801520e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015216:	2b00      	cmp	r3, #0
 8015218:	d001      	beq.n	801521e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801521a:	2301      	movs	r3, #1
 801521c:	e00b      	b.n	8015236 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801521e:	887b      	ldrh	r3, [r7, #2]
 8015220:	461a      	mov	r2, r3
 8015222:	6879      	ldr	r1, [r7, #4]
 8015224:	4806      	ldr	r0, [pc, #24]	; (8015240 <CDC_Transmit_FS+0x48>)
 8015226:	f7f7 fd92 	bl	800cd4e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801522a:	4805      	ldr	r0, [pc, #20]	; (8015240 <CDC_Transmit_FS+0x48>)
 801522c:	f7f7 fdc6 	bl	800cdbc <USBD_CDC_TransmitPacket>
 8015230:	4603      	mov	r3, r0
 8015232:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015234:	7bfb      	ldrb	r3, [r7, #15]
}
 8015236:	4618      	mov	r0, r3
 8015238:	3710      	adds	r7, #16
 801523a:	46bd      	mov	sp, r7
 801523c:	bd80      	pop	{r7, pc}
 801523e:	bf00      	nop
 8015240:	2000516c 	.word	0x2000516c

08015244 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015244:	b480      	push	{r7}
 8015246:	b087      	sub	sp, #28
 8015248:	af00      	add	r7, sp, #0
 801524a:	60f8      	str	r0, [r7, #12]
 801524c:	60b9      	str	r1, [r7, #8]
 801524e:	4613      	mov	r3, r2
 8015250:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015252:	2300      	movs	r3, #0
 8015254:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015256:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801525a:	4618      	mov	r0, r3
 801525c:	371c      	adds	r7, #28
 801525e:	46bd      	mov	sp, r7
 8015260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015264:	4770      	bx	lr
	...

08015268 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015268:	b480      	push	{r7}
 801526a:	b083      	sub	sp, #12
 801526c:	af00      	add	r7, sp, #0
 801526e:	4603      	mov	r3, r0
 8015270:	6039      	str	r1, [r7, #0]
 8015272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8015274:	683b      	ldr	r3, [r7, #0]
 8015276:	2212      	movs	r2, #18
 8015278:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801527a:	4b03      	ldr	r3, [pc, #12]	; (8015288 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801527c:	4618      	mov	r0, r3
 801527e:	370c      	adds	r7, #12
 8015280:	46bd      	mov	sp, r7
 8015282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015286:	4770      	bx	lr
 8015288:	200001b4 	.word	0x200001b4

0801528c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801528c:	b480      	push	{r7}
 801528e:	b083      	sub	sp, #12
 8015290:	af00      	add	r7, sp, #0
 8015292:	4603      	mov	r3, r0
 8015294:	6039      	str	r1, [r7, #0]
 8015296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015298:	683b      	ldr	r3, [r7, #0]
 801529a:	2204      	movs	r2, #4
 801529c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801529e:	4b03      	ldr	r3, [pc, #12]	; (80152ac <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80152a0:	4618      	mov	r0, r3
 80152a2:	370c      	adds	r7, #12
 80152a4:	46bd      	mov	sp, r7
 80152a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152aa:	4770      	bx	lr
 80152ac:	200001c8 	.word	0x200001c8

080152b0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	4603      	mov	r3, r0
 80152b8:	6039      	str	r1, [r7, #0]
 80152ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80152bc:	79fb      	ldrb	r3, [r7, #7]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d105      	bne.n	80152ce <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80152c2:	683a      	ldr	r2, [r7, #0]
 80152c4:	4907      	ldr	r1, [pc, #28]	; (80152e4 <USBD_CDC_ProductStrDescriptor+0x34>)
 80152c6:	4808      	ldr	r0, [pc, #32]	; (80152e8 <USBD_CDC_ProductStrDescriptor+0x38>)
 80152c8:	f7f8 fdda 	bl	800de80 <USBD_GetString>
 80152cc:	e004      	b.n	80152d8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80152ce:	683a      	ldr	r2, [r7, #0]
 80152d0:	4904      	ldr	r1, [pc, #16]	; (80152e4 <USBD_CDC_ProductStrDescriptor+0x34>)
 80152d2:	4805      	ldr	r0, [pc, #20]	; (80152e8 <USBD_CDC_ProductStrDescriptor+0x38>)
 80152d4:	f7f8 fdd4 	bl	800de80 <USBD_GetString>
  }
  return USBD_StrDesc;
 80152d8:	4b02      	ldr	r3, [pc, #8]	; (80152e4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80152da:	4618      	mov	r0, r3
 80152dc:	3708      	adds	r7, #8
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd80      	pop	{r7, pc}
 80152e2:	bf00      	nop
 80152e4:	2000643c 	.word	0x2000643c
 80152e8:	08016fc4 	.word	0x08016fc4

080152ec <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b082      	sub	sp, #8
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	4603      	mov	r3, r0
 80152f4:	6039      	str	r1, [r7, #0]
 80152f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80152f8:	683a      	ldr	r2, [r7, #0]
 80152fa:	4904      	ldr	r1, [pc, #16]	; (801530c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80152fc:	4804      	ldr	r0, [pc, #16]	; (8015310 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80152fe:	f7f8 fdbf 	bl	800de80 <USBD_GetString>
  return USBD_StrDesc;
 8015302:	4b02      	ldr	r3, [pc, #8]	; (801530c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8015304:	4618      	mov	r0, r3
 8015306:	3708      	adds	r7, #8
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}
 801530c:	2000643c 	.word	0x2000643c
 8015310:	08016fd0 	.word	0x08016fd0

08015314 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015314:	b580      	push	{r7, lr}
 8015316:	b082      	sub	sp, #8
 8015318:	af00      	add	r7, sp, #0
 801531a:	4603      	mov	r3, r0
 801531c:	6039      	str	r1, [r7, #0]
 801531e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	221a      	movs	r2, #26
 8015324:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015326:	f000 f843 	bl	80153b0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801532a:	4b02      	ldr	r3, [pc, #8]	; (8015334 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801532c:	4618      	mov	r0, r3
 801532e:	3708      	adds	r7, #8
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}
 8015334:	200001cc 	.word	0x200001cc

08015338 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b082      	sub	sp, #8
 801533c:	af00      	add	r7, sp, #0
 801533e:	4603      	mov	r3, r0
 8015340:	6039      	str	r1, [r7, #0]
 8015342:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015344:	79fb      	ldrb	r3, [r7, #7]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d105      	bne.n	8015356 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801534a:	683a      	ldr	r2, [r7, #0]
 801534c:	4907      	ldr	r1, [pc, #28]	; (801536c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801534e:	4808      	ldr	r0, [pc, #32]	; (8015370 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015350:	f7f8 fd96 	bl	800de80 <USBD_GetString>
 8015354:	e004      	b.n	8015360 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8015356:	683a      	ldr	r2, [r7, #0]
 8015358:	4904      	ldr	r1, [pc, #16]	; (801536c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801535a:	4805      	ldr	r0, [pc, #20]	; (8015370 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801535c:	f7f8 fd90 	bl	800de80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015360:	4b02      	ldr	r3, [pc, #8]	; (801536c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8015362:	4618      	mov	r0, r3
 8015364:	3708      	adds	r7, #8
 8015366:	46bd      	mov	sp, r7
 8015368:	bd80      	pop	{r7, pc}
 801536a:	bf00      	nop
 801536c:	2000643c 	.word	0x2000643c
 8015370:	08016fd8 	.word	0x08016fd8

08015374 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b082      	sub	sp, #8
 8015378:	af00      	add	r7, sp, #0
 801537a:	4603      	mov	r3, r0
 801537c:	6039      	str	r1, [r7, #0]
 801537e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015380:	79fb      	ldrb	r3, [r7, #7]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d105      	bne.n	8015392 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015386:	683a      	ldr	r2, [r7, #0]
 8015388:	4907      	ldr	r1, [pc, #28]	; (80153a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801538a:	4808      	ldr	r0, [pc, #32]	; (80153ac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801538c:	f7f8 fd78 	bl	800de80 <USBD_GetString>
 8015390:	e004      	b.n	801539c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015392:	683a      	ldr	r2, [r7, #0]
 8015394:	4904      	ldr	r1, [pc, #16]	; (80153a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015396:	4805      	ldr	r0, [pc, #20]	; (80153ac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015398:	f7f8 fd72 	bl	800de80 <USBD_GetString>
  }
  return USBD_StrDesc;
 801539c:	4b02      	ldr	r3, [pc, #8]	; (80153a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801539e:	4618      	mov	r0, r3
 80153a0:	3708      	adds	r7, #8
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}
 80153a6:	bf00      	nop
 80153a8:	2000643c 	.word	0x2000643c
 80153ac:	08016fe4 	.word	0x08016fe4

080153b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b084      	sub	sp, #16
 80153b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80153b6:	4b0f      	ldr	r3, [pc, #60]	; (80153f4 <Get_SerialNum+0x44>)
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80153bc:	4b0e      	ldr	r3, [pc, #56]	; (80153f8 <Get_SerialNum+0x48>)
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80153c2:	4b0e      	ldr	r3, [pc, #56]	; (80153fc <Get_SerialNum+0x4c>)
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80153c8:	68fa      	ldr	r2, [r7, #12]
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	4413      	add	r3, r2
 80153ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d009      	beq.n	80153ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80153d6:	2208      	movs	r2, #8
 80153d8:	4909      	ldr	r1, [pc, #36]	; (8015400 <Get_SerialNum+0x50>)
 80153da:	68f8      	ldr	r0, [r7, #12]
 80153dc:	f000 f814 	bl	8015408 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80153e0:	2204      	movs	r2, #4
 80153e2:	4908      	ldr	r1, [pc, #32]	; (8015404 <Get_SerialNum+0x54>)
 80153e4:	68b8      	ldr	r0, [r7, #8]
 80153e6:	f000 f80f 	bl	8015408 <IntToUnicode>
  }
}
 80153ea:	bf00      	nop
 80153ec:	3710      	adds	r7, #16
 80153ee:	46bd      	mov	sp, r7
 80153f0:	bd80      	pop	{r7, pc}
 80153f2:	bf00      	nop
 80153f4:	1fff7590 	.word	0x1fff7590
 80153f8:	1fff7594 	.word	0x1fff7594
 80153fc:	1fff7598 	.word	0x1fff7598
 8015400:	200001ce 	.word	0x200001ce
 8015404:	200001de 	.word	0x200001de

08015408 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015408:	b480      	push	{r7}
 801540a:	b087      	sub	sp, #28
 801540c:	af00      	add	r7, sp, #0
 801540e:	60f8      	str	r0, [r7, #12]
 8015410:	60b9      	str	r1, [r7, #8]
 8015412:	4613      	mov	r3, r2
 8015414:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015416:	2300      	movs	r3, #0
 8015418:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801541a:	2300      	movs	r3, #0
 801541c:	75fb      	strb	r3, [r7, #23]
 801541e:	e027      	b.n	8015470 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	0f1b      	lsrs	r3, r3, #28
 8015424:	2b09      	cmp	r3, #9
 8015426:	d80b      	bhi.n	8015440 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	0f1b      	lsrs	r3, r3, #28
 801542c:	b2da      	uxtb	r2, r3
 801542e:	7dfb      	ldrb	r3, [r7, #23]
 8015430:	005b      	lsls	r3, r3, #1
 8015432:	4619      	mov	r1, r3
 8015434:	68bb      	ldr	r3, [r7, #8]
 8015436:	440b      	add	r3, r1
 8015438:	3230      	adds	r2, #48	; 0x30
 801543a:	b2d2      	uxtb	r2, r2
 801543c:	701a      	strb	r2, [r3, #0]
 801543e:	e00a      	b.n	8015456 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	0f1b      	lsrs	r3, r3, #28
 8015444:	b2da      	uxtb	r2, r3
 8015446:	7dfb      	ldrb	r3, [r7, #23]
 8015448:	005b      	lsls	r3, r3, #1
 801544a:	4619      	mov	r1, r3
 801544c:	68bb      	ldr	r3, [r7, #8]
 801544e:	440b      	add	r3, r1
 8015450:	3237      	adds	r2, #55	; 0x37
 8015452:	b2d2      	uxtb	r2, r2
 8015454:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	011b      	lsls	r3, r3, #4
 801545a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801545c:	7dfb      	ldrb	r3, [r7, #23]
 801545e:	005b      	lsls	r3, r3, #1
 8015460:	3301      	adds	r3, #1
 8015462:	68ba      	ldr	r2, [r7, #8]
 8015464:	4413      	add	r3, r2
 8015466:	2200      	movs	r2, #0
 8015468:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801546a:	7dfb      	ldrb	r3, [r7, #23]
 801546c:	3301      	adds	r3, #1
 801546e:	75fb      	strb	r3, [r7, #23]
 8015470:	7dfa      	ldrb	r2, [r7, #23]
 8015472:	79fb      	ldrb	r3, [r7, #7]
 8015474:	429a      	cmp	r2, r3
 8015476:	d3d3      	bcc.n	8015420 <IntToUnicode+0x18>
  }
}
 8015478:	bf00      	nop
 801547a:	371c      	adds	r7, #28
 801547c:	46bd      	mov	sp, r7
 801547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015482:	4770      	bx	lr

08015484 <LL_AHB2_GRP1_EnableClock>:
{
 8015484:	b480      	push	{r7}
 8015486:	b085      	sub	sp, #20
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801548c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015490:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	4313      	orrs	r3, r2
 801549a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801549c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80154a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	4013      	ands	r3, r2
 80154a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80154a8:	68fb      	ldr	r3, [r7, #12]
}
 80154aa:	bf00      	nop
 80154ac:	3714      	adds	r7, #20
 80154ae:	46bd      	mov	sp, r7
 80154b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b4:	4770      	bx	lr

080154b6 <LL_APB1_GRP1_EnableClock>:
{
 80154b6:	b480      	push	{r7}
 80154b8:	b085      	sub	sp, #20
 80154ba:	af00      	add	r7, sp, #0
 80154bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80154be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80154c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80154c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	4313      	orrs	r3, r2
 80154cc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80154ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80154d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	4013      	ands	r3, r2
 80154d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80154da:	68fb      	ldr	r3, [r7, #12]
}
 80154dc:	bf00      	nop
 80154de:	3714      	adds	r7, #20
 80154e0:	46bd      	mov	sp, r7
 80154e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e6:	4770      	bx	lr

080154e8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b088      	sub	sp, #32
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80154f0:	f107 030c 	add.w	r3, r7, #12
 80154f4:	2200      	movs	r2, #0
 80154f6:	601a      	str	r2, [r3, #0]
 80154f8:	605a      	str	r2, [r3, #4]
 80154fa:	609a      	str	r2, [r3, #8]
 80154fc:	60da      	str	r2, [r3, #12]
 80154fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	4a13      	ldr	r2, [pc, #76]	; (8015554 <HAL_PCD_MspInit+0x6c>)
 8015506:	4293      	cmp	r3, r2
 8015508:	d120      	bne.n	801554c <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801550a:	2001      	movs	r0, #1
 801550c:	f7ff ffba 	bl	8015484 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015510:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015514:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015516:	2302      	movs	r3, #2
 8015518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801551a:	2300      	movs	r3, #0
 801551c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801551e:	2303      	movs	r3, #3
 8015520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8015522:	230a      	movs	r3, #10
 8015524:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015526:	f107 030c 	add.w	r3, r7, #12
 801552a:	4619      	mov	r1, r3
 801552c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8015530:	f7f0 fe88 	bl	8006244 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015534:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8015538:	f7ff ffbd 	bl	80154b6 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801553c:	2200      	movs	r2, #0
 801553e:	2105      	movs	r1, #5
 8015540:	2014      	movs	r0, #20
 8015542:	f7f0 fbb4 	bl	8005cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8015546:	2014      	movs	r0, #20
 8015548:	f7f0 fbcb 	bl	8005ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801554c:	bf00      	nop
 801554e:	3720      	adds	r7, #32
 8015550:	46bd      	mov	sp, r7
 8015552:	bd80      	pop	{r7, pc}
 8015554:	40006800 	.word	0x40006800

08015558 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b082      	sub	sp, #8
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	f503 730c 	add.w	r3, r3, #560	; 0x230
 801556c:	4619      	mov	r1, r3
 801556e:	4610      	mov	r0, r2
 8015570:	f7f7 fd20 	bl	800cfb4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8015574:	bf00      	nop
 8015576:	3708      	adds	r7, #8
 8015578:	46bd      	mov	sp, r7
 801557a:	bd80      	pop	{r7, pc}

0801557c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b082      	sub	sp, #8
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
 8015584:	460b      	mov	r3, r1
 8015586:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 801558e:	78fb      	ldrb	r3, [r7, #3]
 8015590:	687a      	ldr	r2, [r7, #4]
 8015592:	015b      	lsls	r3, r3, #5
 8015594:	4413      	add	r3, r2
 8015596:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801559a:	681a      	ldr	r2, [r3, #0]
 801559c:	78fb      	ldrb	r3, [r7, #3]
 801559e:	4619      	mov	r1, r3
 80155a0:	f7f7 fd5b 	bl	800d05a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80155a4:	bf00      	nop
 80155a6:	3708      	adds	r7, #8
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bd80      	pop	{r7, pc}

080155ac <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b082      	sub	sp, #8
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
 80155b4:	460b      	mov	r3, r1
 80155b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80155be:	78fb      	ldrb	r3, [r7, #3]
 80155c0:	687a      	ldr	r2, [r7, #4]
 80155c2:	015b      	lsls	r3, r3, #5
 80155c4:	4413      	add	r3, r2
 80155c6:	333c      	adds	r3, #60	; 0x3c
 80155c8:	681a      	ldr	r2, [r3, #0]
 80155ca:	78fb      	ldrb	r3, [r7, #3]
 80155cc:	4619      	mov	r1, r3
 80155ce:	f7f7 fda7 	bl	800d120 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80155d2:	bf00      	nop
 80155d4:	3708      	adds	r7, #8
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}

080155da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155da:	b580      	push	{r7, lr}
 80155dc:	b082      	sub	sp, #8
 80155de:	af00      	add	r7, sp, #0
 80155e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80155e8:	4618      	mov	r0, r3
 80155ea:	f7f7 febb 	bl	800d364 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80155ee:	bf00      	nop
 80155f0:	3708      	adds	r7, #8
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}

080155f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155f6:	b580      	push	{r7, lr}
 80155f8:	b084      	sub	sp, #16
 80155fa:	af00      	add	r7, sp, #0
 80155fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80155fe:	2301      	movs	r3, #1
 8015600:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	689b      	ldr	r3, [r3, #8]
 8015606:	2b02      	cmp	r3, #2
 8015608:	d001      	beq.n	801560e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801560a:	f7ee f903 	bl	8003814 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015614:	7bfa      	ldrb	r2, [r7, #15]
 8015616:	4611      	mov	r1, r2
 8015618:	4618      	mov	r0, r3
 801561a:	f7f7 fe65 	bl	800d2e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015624:	4618      	mov	r0, r3
 8015626:	f7f7 fe11 	bl	800d24c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801562a:	bf00      	nop
 801562c:	3710      	adds	r7, #16
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}
	...

08015634 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b082      	sub	sp, #8
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015642:	4618      	mov	r0, r3
 8015644:	f7f7 fe60 	bl	800d308 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	699b      	ldr	r3, [r3, #24]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d005      	beq.n	801565c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015650:	4b04      	ldr	r3, [pc, #16]	; (8015664 <HAL_PCD_SuspendCallback+0x30>)
 8015652:	691b      	ldr	r3, [r3, #16]
 8015654:	4a03      	ldr	r2, [pc, #12]	; (8015664 <HAL_PCD_SuspendCallback+0x30>)
 8015656:	f043 0306 	orr.w	r3, r3, #6
 801565a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801565c:	bf00      	nop
 801565e:	3708      	adds	r7, #8
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}
 8015664:	e000ed00 	.word	0xe000ed00

08015668 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b082      	sub	sp, #8
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	699b      	ldr	r3, [r3, #24]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d007      	beq.n	8015688 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015678:	4b08      	ldr	r3, [pc, #32]	; (801569c <HAL_PCD_ResumeCallback+0x34>)
 801567a:	691b      	ldr	r3, [r3, #16]
 801567c:	4a07      	ldr	r2, [pc, #28]	; (801569c <HAL_PCD_ResumeCallback+0x34>)
 801567e:	f023 0306 	bic.w	r3, r3, #6
 8015682:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8015684:	f000 f9be 	bl	8015a04 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801568e:	4618      	mov	r0, r3
 8015690:	f7f7 fe50 	bl	800d334 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8015694:	bf00      	nop
 8015696:	3708      	adds	r7, #8
 8015698:	46bd      	mov	sp, r7
 801569a:	bd80      	pop	{r7, pc}
 801569c:	e000ed00 	.word	0xe000ed00

080156a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b082      	sub	sp, #8
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80156a8:	4a2c      	ldr	r2, [pc, #176]	; (801575c <USBD_LL_Init+0xbc>)
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	4a2a      	ldr	r2, [pc, #168]	; (801575c <USBD_LL_Init+0xbc>)
 80156b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80156b8:	f7f2 fc44 	bl	8007f44 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80156bc:	4b27      	ldr	r3, [pc, #156]	; (801575c <USBD_LL_Init+0xbc>)
 80156be:	4a28      	ldr	r2, [pc, #160]	; (8015760 <USBD_LL_Init+0xc0>)
 80156c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80156c2:	4b26      	ldr	r3, [pc, #152]	; (801575c <USBD_LL_Init+0xbc>)
 80156c4:	2208      	movs	r2, #8
 80156c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80156c8:	4b24      	ldr	r3, [pc, #144]	; (801575c <USBD_LL_Init+0xbc>)
 80156ca:	2202      	movs	r2, #2
 80156cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80156ce:	4b23      	ldr	r3, [pc, #140]	; (801575c <USBD_LL_Init+0xbc>)
 80156d0:	2202      	movs	r2, #2
 80156d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80156d4:	4b21      	ldr	r3, [pc, #132]	; (801575c <USBD_LL_Init+0xbc>)
 80156d6:	2200      	movs	r2, #0
 80156d8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80156da:	4b20      	ldr	r3, [pc, #128]	; (801575c <USBD_LL_Init+0xbc>)
 80156dc:	2200      	movs	r2, #0
 80156de:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80156e0:	4b1e      	ldr	r3, [pc, #120]	; (801575c <USBD_LL_Init+0xbc>)
 80156e2:	2200      	movs	r2, #0
 80156e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80156e6:	4b1d      	ldr	r3, [pc, #116]	; (801575c <USBD_LL_Init+0xbc>)
 80156e8:	2200      	movs	r2, #0
 80156ea:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80156ec:	481b      	ldr	r0, [pc, #108]	; (801575c <USBD_LL_Init+0xbc>)
 80156ee:	f7f1 fcc6 	bl	800707e <HAL_PCD_Init>
 80156f2:	4603      	mov	r3, r0
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d001      	beq.n	80156fc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80156f8:	f7ee f88c 	bl	8003814 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015702:	2318      	movs	r3, #24
 8015704:	2200      	movs	r2, #0
 8015706:	2100      	movs	r1, #0
 8015708:	f7f2 fb8b 	bl	8007e22 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015712:	2358      	movs	r3, #88	; 0x58
 8015714:	2200      	movs	r2, #0
 8015716:	2180      	movs	r1, #128	; 0x80
 8015718:	f7f2 fb83 	bl	8007e22 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015722:	23c0      	movs	r3, #192	; 0xc0
 8015724:	2200      	movs	r2, #0
 8015726:	2181      	movs	r1, #129	; 0x81
 8015728:	f7f2 fb7b 	bl	8007e22 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015732:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015736:	2200      	movs	r2, #0
 8015738:	2101      	movs	r1, #1
 801573a:	f7f2 fb72 	bl	8007e22 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015744:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015748:	2200      	movs	r2, #0
 801574a:	2182      	movs	r1, #130	; 0x82
 801574c:	f7f2 fb69 	bl	8007e22 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015750:	2300      	movs	r3, #0
}
 8015752:	4618      	mov	r0, r3
 8015754:	3708      	adds	r7, #8
 8015756:	46bd      	mov	sp, r7
 8015758:	bd80      	pop	{r7, pc}
 801575a:	bf00      	nop
 801575c:	2000663c 	.word	0x2000663c
 8015760:	40006800 	.word	0x40006800

08015764 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b084      	sub	sp, #16
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801576c:	2300      	movs	r3, #0
 801576e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015770:	2300      	movs	r3, #0
 8015772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801577a:	4618      	mov	r0, r3
 801577c:	f7f1 fd3a 	bl	80071f4 <HAL_PCD_Start>
 8015780:	4603      	mov	r3, r0
 8015782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015784:	7bfb      	ldrb	r3, [r7, #15]
 8015786:	4618      	mov	r0, r3
 8015788:	f000 f944 	bl	8015a14 <USBD_Get_USB_Status>
 801578c:	4603      	mov	r3, r0
 801578e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015790:	7bbb      	ldrb	r3, [r7, #14]
}
 8015792:	4618      	mov	r0, r3
 8015794:	3710      	adds	r7, #16
 8015796:	46bd      	mov	sp, r7
 8015798:	bd80      	pop	{r7, pc}

0801579a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801579a:	b580      	push	{r7, lr}
 801579c:	b084      	sub	sp, #16
 801579e:	af00      	add	r7, sp, #0
 80157a0:	6078      	str	r0, [r7, #4]
 80157a2:	4608      	mov	r0, r1
 80157a4:	4611      	mov	r1, r2
 80157a6:	461a      	mov	r2, r3
 80157a8:	4603      	mov	r3, r0
 80157aa:	70fb      	strb	r3, [r7, #3]
 80157ac:	460b      	mov	r3, r1
 80157ae:	70bb      	strb	r3, [r7, #2]
 80157b0:	4613      	mov	r3, r2
 80157b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157b4:	2300      	movs	r3, #0
 80157b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157b8:	2300      	movs	r3, #0
 80157ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80157c2:	78bb      	ldrb	r3, [r7, #2]
 80157c4:	883a      	ldrh	r2, [r7, #0]
 80157c6:	78f9      	ldrb	r1, [r7, #3]
 80157c8:	f7f1 fea9 	bl	800751e <HAL_PCD_EP_Open>
 80157cc:	4603      	mov	r3, r0
 80157ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157d0:	7bfb      	ldrb	r3, [r7, #15]
 80157d2:	4618      	mov	r0, r3
 80157d4:	f000 f91e 	bl	8015a14 <USBD_Get_USB_Status>
 80157d8:	4603      	mov	r3, r0
 80157da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80157dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80157de:	4618      	mov	r0, r3
 80157e0:	3710      	adds	r7, #16
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}

080157e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80157e6:	b580      	push	{r7, lr}
 80157e8:	b084      	sub	sp, #16
 80157ea:	af00      	add	r7, sp, #0
 80157ec:	6078      	str	r0, [r7, #4]
 80157ee:	460b      	mov	r3, r1
 80157f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157f2:	2300      	movs	r3, #0
 80157f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157f6:	2300      	movs	r3, #0
 80157f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015800:	78fa      	ldrb	r2, [r7, #3]
 8015802:	4611      	mov	r1, r2
 8015804:	4618      	mov	r0, r3
 8015806:	f7f1 feea 	bl	80075de <HAL_PCD_EP_Close>
 801580a:	4603      	mov	r3, r0
 801580c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801580e:	7bfb      	ldrb	r3, [r7, #15]
 8015810:	4618      	mov	r0, r3
 8015812:	f000 f8ff 	bl	8015a14 <USBD_Get_USB_Status>
 8015816:	4603      	mov	r3, r0
 8015818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801581a:	7bbb      	ldrb	r3, [r7, #14]
}
 801581c:	4618      	mov	r0, r3
 801581e:	3710      	adds	r7, #16
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}

08015824 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b084      	sub	sp, #16
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	460b      	mov	r3, r1
 801582e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015830:	2300      	movs	r3, #0
 8015832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015834:	2300      	movs	r3, #0
 8015836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801583e:	78fa      	ldrb	r2, [r7, #3]
 8015840:	4611      	mov	r1, r2
 8015842:	4618      	mov	r0, r3
 8015844:	f7f1 ff95 	bl	8007772 <HAL_PCD_EP_SetStall>
 8015848:	4603      	mov	r3, r0
 801584a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801584c:	7bfb      	ldrb	r3, [r7, #15]
 801584e:	4618      	mov	r0, r3
 8015850:	f000 f8e0 	bl	8015a14 <USBD_Get_USB_Status>
 8015854:	4603      	mov	r3, r0
 8015856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015858:	7bbb      	ldrb	r3, [r7, #14]
}
 801585a:	4618      	mov	r0, r3
 801585c:	3710      	adds	r7, #16
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}

08015862 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015862:	b580      	push	{r7, lr}
 8015864:	b084      	sub	sp, #16
 8015866:	af00      	add	r7, sp, #0
 8015868:	6078      	str	r0, [r7, #4]
 801586a:	460b      	mov	r3, r1
 801586c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801586e:	2300      	movs	r3, #0
 8015870:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015872:	2300      	movs	r3, #0
 8015874:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801587c:	78fa      	ldrb	r2, [r7, #3]
 801587e:	4611      	mov	r1, r2
 8015880:	4618      	mov	r0, r3
 8015882:	f7f1 ffd0 	bl	8007826 <HAL_PCD_EP_ClrStall>
 8015886:	4603      	mov	r3, r0
 8015888:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801588a:	7bfb      	ldrb	r3, [r7, #15]
 801588c:	4618      	mov	r0, r3
 801588e:	f000 f8c1 	bl	8015a14 <USBD_Get_USB_Status>
 8015892:	4603      	mov	r3, r0
 8015894:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015896:	7bbb      	ldrb	r3, [r7, #14]
}
 8015898:	4618      	mov	r0, r3
 801589a:	3710      	adds	r7, #16
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}

080158a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158a0:	b480      	push	{r7}
 80158a2:	b085      	sub	sp, #20
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
 80158a8:	460b      	mov	r3, r1
 80158aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80158b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80158b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	da08      	bge.n	80158ce <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80158bc:	78fb      	ldrb	r3, [r7, #3]
 80158be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80158c2:	68fa      	ldr	r2, [r7, #12]
 80158c4:	015b      	lsls	r3, r3, #5
 80158c6:	4413      	add	r3, r2
 80158c8:	332a      	adds	r3, #42	; 0x2a
 80158ca:	781b      	ldrb	r3, [r3, #0]
 80158cc:	e008      	b.n	80158e0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80158ce:	78fb      	ldrb	r3, [r7, #3]
 80158d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80158d4:	68fa      	ldr	r2, [r7, #12]
 80158d6:	015b      	lsls	r3, r3, #5
 80158d8:	4413      	add	r3, r2
 80158da:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80158de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	3714      	adds	r7, #20
 80158e4:	46bd      	mov	sp, r7
 80158e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ea:	4770      	bx	lr

080158ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b084      	sub	sp, #16
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
 80158f4:	460b      	mov	r3, r1
 80158f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158f8:	2300      	movs	r3, #0
 80158fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158fc:	2300      	movs	r3, #0
 80158fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015906:	78fa      	ldrb	r2, [r7, #3]
 8015908:	4611      	mov	r1, r2
 801590a:	4618      	mov	r0, r3
 801590c:	f7f1 fde2 	bl	80074d4 <HAL_PCD_SetAddress>
 8015910:	4603      	mov	r3, r0
 8015912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015914:	7bfb      	ldrb	r3, [r7, #15]
 8015916:	4618      	mov	r0, r3
 8015918:	f000 f87c 	bl	8015a14 <USBD_Get_USB_Status>
 801591c:	4603      	mov	r3, r0
 801591e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015920:	7bbb      	ldrb	r3, [r7, #14]
}
 8015922:	4618      	mov	r0, r3
 8015924:	3710      	adds	r7, #16
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}

0801592a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801592a:	b580      	push	{r7, lr}
 801592c:	b086      	sub	sp, #24
 801592e:	af00      	add	r7, sp, #0
 8015930:	60f8      	str	r0, [r7, #12]
 8015932:	607a      	str	r2, [r7, #4]
 8015934:	603b      	str	r3, [r7, #0]
 8015936:	460b      	mov	r3, r1
 8015938:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801593a:	2300      	movs	r3, #0
 801593c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801593e:	2300      	movs	r3, #0
 8015940:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015948:	7af9      	ldrb	r1, [r7, #11]
 801594a:	683b      	ldr	r3, [r7, #0]
 801594c:	687a      	ldr	r2, [r7, #4]
 801594e:	f7f1 fed7 	bl	8007700 <HAL_PCD_EP_Transmit>
 8015952:	4603      	mov	r3, r0
 8015954:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015956:	7dfb      	ldrb	r3, [r7, #23]
 8015958:	4618      	mov	r0, r3
 801595a:	f000 f85b 	bl	8015a14 <USBD_Get_USB_Status>
 801595e:	4603      	mov	r3, r0
 8015960:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015962:	7dbb      	ldrb	r3, [r7, #22]
}
 8015964:	4618      	mov	r0, r3
 8015966:	3718      	adds	r7, #24
 8015968:	46bd      	mov	sp, r7
 801596a:	bd80      	pop	{r7, pc}

0801596c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b086      	sub	sp, #24
 8015970:	af00      	add	r7, sp, #0
 8015972:	60f8      	str	r0, [r7, #12]
 8015974:	607a      	str	r2, [r7, #4]
 8015976:	603b      	str	r3, [r7, #0]
 8015978:	460b      	mov	r3, r1
 801597a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801597c:	2300      	movs	r3, #0
 801597e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015980:	2300      	movs	r3, #0
 8015982:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801598a:	7af9      	ldrb	r1, [r7, #11]
 801598c:	683b      	ldr	r3, [r7, #0]
 801598e:	687a      	ldr	r2, [r7, #4]
 8015990:	f7f1 fe67 	bl	8007662 <HAL_PCD_EP_Receive>
 8015994:	4603      	mov	r3, r0
 8015996:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015998:	7dfb      	ldrb	r3, [r7, #23]
 801599a:	4618      	mov	r0, r3
 801599c:	f000 f83a 	bl	8015a14 <USBD_Get_USB_Status>
 80159a0:	4603      	mov	r3, r0
 80159a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80159a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80159a6:	4618      	mov	r0, r3
 80159a8:	3718      	adds	r7, #24
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd80      	pop	{r7, pc}

080159ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159ae:	b580      	push	{r7, lr}
 80159b0:	b082      	sub	sp, #8
 80159b2:	af00      	add	r7, sp, #0
 80159b4:	6078      	str	r0, [r7, #4]
 80159b6:	460b      	mov	r3, r1
 80159b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80159c0:	78fa      	ldrb	r2, [r7, #3]
 80159c2:	4611      	mov	r1, r2
 80159c4:	4618      	mov	r0, r3
 80159c6:	f7f1 fe86 	bl	80076d6 <HAL_PCD_EP_GetRxCount>
 80159ca:	4603      	mov	r3, r0
}
 80159cc:	4618      	mov	r0, r3
 80159ce:	3708      	adds	r7, #8
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bd80      	pop	{r7, pc}

080159d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80159d4:	b480      	push	{r7}
 80159d6:	b083      	sub	sp, #12
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80159dc:	4b03      	ldr	r3, [pc, #12]	; (80159ec <USBD_static_malloc+0x18>)
}
 80159de:	4618      	mov	r0, r3
 80159e0:	370c      	adds	r7, #12
 80159e2:	46bd      	mov	sp, r7
 80159e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e8:	4770      	bx	lr
 80159ea:	bf00      	nop
 80159ec:	20004c70 	.word	0x20004c70

080159f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80159f0:	b480      	push	{r7}
 80159f2:	b083      	sub	sp, #12
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]

}
 80159f8:	bf00      	nop
 80159fa:	370c      	adds	r7, #12
 80159fc:	46bd      	mov	sp, r7
 80159fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a02:	4770      	bx	lr

08015a04 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015a04:	b480      	push	{r7}
 8015a06:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 8015a08:	bf00      	nop
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a10:	4770      	bx	lr
	...

08015a14 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015a14:	b480      	push	{r7}
 8015a16:	b085      	sub	sp, #20
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a1e:	2300      	movs	r3, #0
 8015a20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015a22:	79fb      	ldrb	r3, [r7, #7]
 8015a24:	2b03      	cmp	r3, #3
 8015a26:	d817      	bhi.n	8015a58 <USBD_Get_USB_Status+0x44>
 8015a28:	a201      	add	r2, pc, #4	; (adr r2, 8015a30 <USBD_Get_USB_Status+0x1c>)
 8015a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a2e:	bf00      	nop
 8015a30:	08015a41 	.word	0x08015a41
 8015a34:	08015a47 	.word	0x08015a47
 8015a38:	08015a4d 	.word	0x08015a4d
 8015a3c:	08015a53 	.word	0x08015a53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015a40:	2300      	movs	r3, #0
 8015a42:	73fb      	strb	r3, [r7, #15]
    break;
 8015a44:	e00b      	b.n	8015a5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015a46:	2303      	movs	r3, #3
 8015a48:	73fb      	strb	r3, [r7, #15]
    break;
 8015a4a:	e008      	b.n	8015a5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8015a50:	e005      	b.n	8015a5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015a52:	2303      	movs	r3, #3
 8015a54:	73fb      	strb	r3, [r7, #15]
    break;
 8015a56:	e002      	b.n	8015a5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015a58:	2303      	movs	r3, #3
 8015a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8015a5c:	bf00      	nop
  }
  return usb_status;
 8015a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a60:	4618      	mov	r0, r3
 8015a62:	3714      	adds	r7, #20
 8015a64:	46bd      	mov	sp, r7
 8015a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6a:	4770      	bx	lr

08015a6c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8015a6c:	b480      	push	{r7}
 8015a6e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8015a70:	4b05      	ldr	r3, [pc, #20]	; (8015a88 <UTIL_LPM_Init+0x1c>)
 8015a72:	2200      	movs	r2, #0
 8015a74:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8015a76:	4b05      	ldr	r3, [pc, #20]	; (8015a8c <UTIL_LPM_Init+0x20>)
 8015a78:	2200      	movs	r2, #0
 8015a7a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8015a7c:	bf00      	nop
 8015a7e:	46bd      	mov	sp, r7
 8015a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a84:	4770      	bx	lr
 8015a86:	bf00      	nop
 8015a88:	20004e90 	.word	0x20004e90
 8015a8c:	20004e94 	.word	0x20004e94

08015a90 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8015a90:	b480      	push	{r7}
 8015a92:	b087      	sub	sp, #28
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
 8015a98:	460b      	mov	r3, r1
 8015a9a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8015aa0:	613b      	str	r3, [r7, #16]
  return(result);
 8015aa2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8015aa4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015aa6:	b672      	cpsid	i
  
  switch(state)
 8015aa8:	78fb      	ldrb	r3, [r7, #3]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d009      	beq.n	8015ac2 <UTIL_LPM_SetOffMode+0x32>
 8015aae:	2b01      	cmp	r3, #1
 8015ab0:	d000      	beq.n	8015ab4 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 8015ab2:	e00e      	b.n	8015ad2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8015ab4:	4b0c      	ldr	r3, [pc, #48]	; (8015ae8 <UTIL_LPM_SetOffMode+0x58>)
 8015ab6:	681a      	ldr	r2, [r3, #0]
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	4313      	orrs	r3, r2
 8015abc:	4a0a      	ldr	r2, [pc, #40]	; (8015ae8 <UTIL_LPM_SetOffMode+0x58>)
 8015abe:	6013      	str	r3, [r2, #0]
      break;
 8015ac0:	e007      	b.n	8015ad2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	43da      	mvns	r2, r3
 8015ac6:	4b08      	ldr	r3, [pc, #32]	; (8015ae8 <UTIL_LPM_SetOffMode+0x58>)
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	4013      	ands	r3, r2
 8015acc:	4a06      	ldr	r2, [pc, #24]	; (8015ae8 <UTIL_LPM_SetOffMode+0x58>)
 8015ace:	6013      	str	r3, [r2, #0]
      break;
 8015ad0:	bf00      	nop
 8015ad2:	697b      	ldr	r3, [r7, #20]
 8015ad4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8015adc:	bf00      	nop
 8015ade:	371c      	adds	r7, #28
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae6:	4770      	bx	lr
 8015ae8:	20004e94 	.word	0x20004e94

08015aec <pow>:
 8015aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015af0:	ed2d 8b04 	vpush	{d8-d9}
 8015af4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8015dc8 <pow+0x2dc>
 8015af8:	b08d      	sub	sp, #52	; 0x34
 8015afa:	ec57 6b10 	vmov	r6, r7, d0
 8015afe:	ec55 4b11 	vmov	r4, r5, d1
 8015b02:	f000 f965 	bl	8015dd0 <__ieee754_pow>
 8015b06:	f999 3000 	ldrsb.w	r3, [r9]
 8015b0a:	9300      	str	r3, [sp, #0]
 8015b0c:	3301      	adds	r3, #1
 8015b0e:	eeb0 8a40 	vmov.f32	s16, s0
 8015b12:	eef0 8a60 	vmov.f32	s17, s1
 8015b16:	46c8      	mov	r8, r9
 8015b18:	d05f      	beq.n	8015bda <pow+0xee>
 8015b1a:	4622      	mov	r2, r4
 8015b1c:	462b      	mov	r3, r5
 8015b1e:	4620      	mov	r0, r4
 8015b20:	4629      	mov	r1, r5
 8015b22:	f7ea ff8d 	bl	8000a40 <__aeabi_dcmpun>
 8015b26:	4683      	mov	fp, r0
 8015b28:	2800      	cmp	r0, #0
 8015b2a:	d156      	bne.n	8015bda <pow+0xee>
 8015b2c:	4632      	mov	r2, r6
 8015b2e:	463b      	mov	r3, r7
 8015b30:	4630      	mov	r0, r6
 8015b32:	4639      	mov	r1, r7
 8015b34:	f7ea ff84 	bl	8000a40 <__aeabi_dcmpun>
 8015b38:	9001      	str	r0, [sp, #4]
 8015b3a:	b1e8      	cbz	r0, 8015b78 <pow+0x8c>
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	2300      	movs	r3, #0
 8015b40:	4620      	mov	r0, r4
 8015b42:	4629      	mov	r1, r5
 8015b44:	f7ea ff4a 	bl	80009dc <__aeabi_dcmpeq>
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	d046      	beq.n	8015bda <pow+0xee>
 8015b4c:	2301      	movs	r3, #1
 8015b4e:	9302      	str	r3, [sp, #8]
 8015b50:	4b96      	ldr	r3, [pc, #600]	; (8015dac <pow+0x2c0>)
 8015b52:	9303      	str	r3, [sp, #12]
 8015b54:	4b96      	ldr	r3, [pc, #600]	; (8015db0 <pow+0x2c4>)
 8015b56:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015b60:	9b00      	ldr	r3, [sp, #0]
 8015b62:	2b02      	cmp	r3, #2
 8015b64:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015b68:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015b6c:	d033      	beq.n	8015bd6 <pow+0xea>
 8015b6e:	a802      	add	r0, sp, #8
 8015b70:	f000 fefd 	bl	801696e <matherr>
 8015b74:	bb48      	cbnz	r0, 8015bca <pow+0xde>
 8015b76:	e05d      	b.n	8015c34 <pow+0x148>
 8015b78:	f04f 0a00 	mov.w	sl, #0
 8015b7c:	f04f 0b00 	mov.w	fp, #0
 8015b80:	4652      	mov	r2, sl
 8015b82:	465b      	mov	r3, fp
 8015b84:	4630      	mov	r0, r6
 8015b86:	4639      	mov	r1, r7
 8015b88:	f7ea ff28 	bl	80009dc <__aeabi_dcmpeq>
 8015b8c:	ec4b ab19 	vmov	d9, sl, fp
 8015b90:	2800      	cmp	r0, #0
 8015b92:	d054      	beq.n	8015c3e <pow+0x152>
 8015b94:	4652      	mov	r2, sl
 8015b96:	465b      	mov	r3, fp
 8015b98:	4620      	mov	r0, r4
 8015b9a:	4629      	mov	r1, r5
 8015b9c:	f7ea ff1e 	bl	80009dc <__aeabi_dcmpeq>
 8015ba0:	4680      	mov	r8, r0
 8015ba2:	b318      	cbz	r0, 8015bec <pow+0x100>
 8015ba4:	2301      	movs	r3, #1
 8015ba6:	9302      	str	r3, [sp, #8]
 8015ba8:	4b80      	ldr	r3, [pc, #512]	; (8015dac <pow+0x2c0>)
 8015baa:	9303      	str	r3, [sp, #12]
 8015bac:	9b01      	ldr	r3, [sp, #4]
 8015bae:	930a      	str	r3, [sp, #40]	; 0x28
 8015bb0:	9b00      	ldr	r3, [sp, #0]
 8015bb2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015bb6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015bba:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d0d5      	beq.n	8015b6e <pow+0x82>
 8015bc2:	4b7b      	ldr	r3, [pc, #492]	; (8015db0 <pow+0x2c4>)
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bcc:	b11b      	cbz	r3, 8015bd6 <pow+0xea>
 8015bce:	f000 ffe5 	bl	8016b9c <__errno>
 8015bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bd4:	6003      	str	r3, [r0, #0]
 8015bd6:	ed9d 8b08 	vldr	d8, [sp, #32]
 8015bda:	eeb0 0a48 	vmov.f32	s0, s16
 8015bde:	eef0 0a68 	vmov.f32	s1, s17
 8015be2:	b00d      	add	sp, #52	; 0x34
 8015be4:	ecbd 8b04 	vpop	{d8-d9}
 8015be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bec:	ec45 4b10 	vmov	d0, r4, r5
 8015bf0:	f000 feb5 	bl	801695e <finite>
 8015bf4:	2800      	cmp	r0, #0
 8015bf6:	d0f0      	beq.n	8015bda <pow+0xee>
 8015bf8:	4652      	mov	r2, sl
 8015bfa:	465b      	mov	r3, fp
 8015bfc:	4620      	mov	r0, r4
 8015bfe:	4629      	mov	r1, r5
 8015c00:	f7ea fef6 	bl	80009f0 <__aeabi_dcmplt>
 8015c04:	2800      	cmp	r0, #0
 8015c06:	d0e8      	beq.n	8015bda <pow+0xee>
 8015c08:	2301      	movs	r3, #1
 8015c0a:	9302      	str	r3, [sp, #8]
 8015c0c:	4b67      	ldr	r3, [pc, #412]	; (8015dac <pow+0x2c0>)
 8015c0e:	9303      	str	r3, [sp, #12]
 8015c10:	f999 3000 	ldrsb.w	r3, [r9]
 8015c14:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8015c18:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015c1c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015c20:	b913      	cbnz	r3, 8015c28 <pow+0x13c>
 8015c22:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015c26:	e7a2      	b.n	8015b6e <pow+0x82>
 8015c28:	4962      	ldr	r1, [pc, #392]	; (8015db4 <pow+0x2c8>)
 8015c2a:	2000      	movs	r0, #0
 8015c2c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015c30:	2b02      	cmp	r3, #2
 8015c32:	d19c      	bne.n	8015b6e <pow+0x82>
 8015c34:	f000 ffb2 	bl	8016b9c <__errno>
 8015c38:	2321      	movs	r3, #33	; 0x21
 8015c3a:	6003      	str	r3, [r0, #0]
 8015c3c:	e7c5      	b.n	8015bca <pow+0xde>
 8015c3e:	eeb0 0a48 	vmov.f32	s0, s16
 8015c42:	eef0 0a68 	vmov.f32	s1, s17
 8015c46:	f000 fe8a 	bl	801695e <finite>
 8015c4a:	9000      	str	r0, [sp, #0]
 8015c4c:	2800      	cmp	r0, #0
 8015c4e:	f040 8081 	bne.w	8015d54 <pow+0x268>
 8015c52:	ec47 6b10 	vmov	d0, r6, r7
 8015c56:	f000 fe82 	bl	801695e <finite>
 8015c5a:	2800      	cmp	r0, #0
 8015c5c:	d07a      	beq.n	8015d54 <pow+0x268>
 8015c5e:	ec45 4b10 	vmov	d0, r4, r5
 8015c62:	f000 fe7c 	bl	801695e <finite>
 8015c66:	2800      	cmp	r0, #0
 8015c68:	d074      	beq.n	8015d54 <pow+0x268>
 8015c6a:	ec53 2b18 	vmov	r2, r3, d8
 8015c6e:	ee18 0a10 	vmov	r0, s16
 8015c72:	4619      	mov	r1, r3
 8015c74:	f7ea fee4 	bl	8000a40 <__aeabi_dcmpun>
 8015c78:	f999 9000 	ldrsb.w	r9, [r9]
 8015c7c:	4b4b      	ldr	r3, [pc, #300]	; (8015dac <pow+0x2c0>)
 8015c7e:	b1b0      	cbz	r0, 8015cae <pow+0x1c2>
 8015c80:	2201      	movs	r2, #1
 8015c82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015c86:	9b00      	ldr	r3, [sp, #0]
 8015c88:	930a      	str	r3, [sp, #40]	; 0x28
 8015c8a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015c8e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015c92:	f1b9 0f00 	cmp.w	r9, #0
 8015c96:	d0c4      	beq.n	8015c22 <pow+0x136>
 8015c98:	4652      	mov	r2, sl
 8015c9a:	465b      	mov	r3, fp
 8015c9c:	4650      	mov	r0, sl
 8015c9e:	4659      	mov	r1, fp
 8015ca0:	f7ea fd5e 	bl	8000760 <__aeabi_ddiv>
 8015ca4:	f1b9 0f02 	cmp.w	r9, #2
 8015ca8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015cac:	e7c1      	b.n	8015c32 <pow+0x146>
 8015cae:	2203      	movs	r2, #3
 8015cb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015cb4:	900a      	str	r0, [sp, #40]	; 0x28
 8015cb6:	4629      	mov	r1, r5
 8015cb8:	4620      	mov	r0, r4
 8015cba:	2200      	movs	r2, #0
 8015cbc:	4b3e      	ldr	r3, [pc, #248]	; (8015db8 <pow+0x2cc>)
 8015cbe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015cc2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015cc6:	f7ea fc21 	bl	800050c <__aeabi_dmul>
 8015cca:	4604      	mov	r4, r0
 8015ccc:	460d      	mov	r5, r1
 8015cce:	f1b9 0f00 	cmp.w	r9, #0
 8015cd2:	d124      	bne.n	8015d1e <pow+0x232>
 8015cd4:	4b39      	ldr	r3, [pc, #228]	; (8015dbc <pow+0x2d0>)
 8015cd6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015cda:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015cde:	4630      	mov	r0, r6
 8015ce0:	4652      	mov	r2, sl
 8015ce2:	465b      	mov	r3, fp
 8015ce4:	4639      	mov	r1, r7
 8015ce6:	f7ea fe83 	bl	80009f0 <__aeabi_dcmplt>
 8015cea:	2800      	cmp	r0, #0
 8015cec:	d056      	beq.n	8015d9c <pow+0x2b0>
 8015cee:	ec45 4b10 	vmov	d0, r4, r5
 8015cf2:	f000 fe49 	bl	8016988 <rint>
 8015cf6:	4622      	mov	r2, r4
 8015cf8:	462b      	mov	r3, r5
 8015cfa:	ec51 0b10 	vmov	r0, r1, d0
 8015cfe:	f7ea fe6d 	bl	80009dc <__aeabi_dcmpeq>
 8015d02:	b920      	cbnz	r0, 8015d0e <pow+0x222>
 8015d04:	4b2e      	ldr	r3, [pc, #184]	; (8015dc0 <pow+0x2d4>)
 8015d06:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015d0a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015d0e:	f998 3000 	ldrsb.w	r3, [r8]
 8015d12:	2b02      	cmp	r3, #2
 8015d14:	d142      	bne.n	8015d9c <pow+0x2b0>
 8015d16:	f000 ff41 	bl	8016b9c <__errno>
 8015d1a:	2322      	movs	r3, #34	; 0x22
 8015d1c:	e78d      	b.n	8015c3a <pow+0x14e>
 8015d1e:	4b29      	ldr	r3, [pc, #164]	; (8015dc4 <pow+0x2d8>)
 8015d20:	2200      	movs	r2, #0
 8015d22:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015d26:	4630      	mov	r0, r6
 8015d28:	4652      	mov	r2, sl
 8015d2a:	465b      	mov	r3, fp
 8015d2c:	4639      	mov	r1, r7
 8015d2e:	f7ea fe5f 	bl	80009f0 <__aeabi_dcmplt>
 8015d32:	2800      	cmp	r0, #0
 8015d34:	d0eb      	beq.n	8015d0e <pow+0x222>
 8015d36:	ec45 4b10 	vmov	d0, r4, r5
 8015d3a:	f000 fe25 	bl	8016988 <rint>
 8015d3e:	4622      	mov	r2, r4
 8015d40:	462b      	mov	r3, r5
 8015d42:	ec51 0b10 	vmov	r0, r1, d0
 8015d46:	f7ea fe49 	bl	80009dc <__aeabi_dcmpeq>
 8015d4a:	2800      	cmp	r0, #0
 8015d4c:	d1df      	bne.n	8015d0e <pow+0x222>
 8015d4e:	2200      	movs	r2, #0
 8015d50:	4b18      	ldr	r3, [pc, #96]	; (8015db4 <pow+0x2c8>)
 8015d52:	e7da      	b.n	8015d0a <pow+0x21e>
 8015d54:	2200      	movs	r2, #0
 8015d56:	2300      	movs	r3, #0
 8015d58:	ec51 0b18 	vmov	r0, r1, d8
 8015d5c:	f7ea fe3e 	bl	80009dc <__aeabi_dcmpeq>
 8015d60:	2800      	cmp	r0, #0
 8015d62:	f43f af3a 	beq.w	8015bda <pow+0xee>
 8015d66:	ec47 6b10 	vmov	d0, r6, r7
 8015d6a:	f000 fdf8 	bl	801695e <finite>
 8015d6e:	2800      	cmp	r0, #0
 8015d70:	f43f af33 	beq.w	8015bda <pow+0xee>
 8015d74:	ec45 4b10 	vmov	d0, r4, r5
 8015d78:	f000 fdf1 	bl	801695e <finite>
 8015d7c:	2800      	cmp	r0, #0
 8015d7e:	f43f af2c 	beq.w	8015bda <pow+0xee>
 8015d82:	2304      	movs	r3, #4
 8015d84:	9302      	str	r3, [sp, #8]
 8015d86:	4b09      	ldr	r3, [pc, #36]	; (8015dac <pow+0x2c0>)
 8015d88:	9303      	str	r3, [sp, #12]
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	930a      	str	r3, [sp, #40]	; 0x28
 8015d8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015d92:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015d96:	ed8d 9b08 	vstr	d9, [sp, #32]
 8015d9a:	e7b8      	b.n	8015d0e <pow+0x222>
 8015d9c:	a802      	add	r0, sp, #8
 8015d9e:	f000 fde6 	bl	801696e <matherr>
 8015da2:	2800      	cmp	r0, #0
 8015da4:	f47f af11 	bne.w	8015bca <pow+0xde>
 8015da8:	e7b5      	b.n	8015d16 <pow+0x22a>
 8015daa:	bf00      	nop
 8015dac:	08017183 	.word	0x08017183
 8015db0:	3ff00000 	.word	0x3ff00000
 8015db4:	fff00000 	.word	0xfff00000
 8015db8:	3fe00000 	.word	0x3fe00000
 8015dbc:	47efffff 	.word	0x47efffff
 8015dc0:	c7efffff 	.word	0xc7efffff
 8015dc4:	7ff00000 	.word	0x7ff00000
 8015dc8:	200001e6 	.word	0x200001e6
 8015dcc:	00000000 	.word	0x00000000

08015dd0 <__ieee754_pow>:
 8015dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dd4:	b091      	sub	sp, #68	; 0x44
 8015dd6:	ed8d 1b00 	vstr	d1, [sp]
 8015dda:	e9dd 2900 	ldrd	r2, r9, [sp]
 8015dde:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8015de2:	ea58 0302 	orrs.w	r3, r8, r2
 8015de6:	ec57 6b10 	vmov	r6, r7, d0
 8015dea:	f000 84be 	beq.w	801676a <__ieee754_pow+0x99a>
 8015dee:	4b7a      	ldr	r3, [pc, #488]	; (8015fd8 <__ieee754_pow+0x208>)
 8015df0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8015df4:	429c      	cmp	r4, r3
 8015df6:	463d      	mov	r5, r7
 8015df8:	ee10 aa10 	vmov	sl, s0
 8015dfc:	dc09      	bgt.n	8015e12 <__ieee754_pow+0x42>
 8015dfe:	d103      	bne.n	8015e08 <__ieee754_pow+0x38>
 8015e00:	b93e      	cbnz	r6, 8015e12 <__ieee754_pow+0x42>
 8015e02:	45a0      	cmp	r8, r4
 8015e04:	dc0d      	bgt.n	8015e22 <__ieee754_pow+0x52>
 8015e06:	e001      	b.n	8015e0c <__ieee754_pow+0x3c>
 8015e08:	4598      	cmp	r8, r3
 8015e0a:	dc02      	bgt.n	8015e12 <__ieee754_pow+0x42>
 8015e0c:	4598      	cmp	r8, r3
 8015e0e:	d10e      	bne.n	8015e2e <__ieee754_pow+0x5e>
 8015e10:	b16a      	cbz	r2, 8015e2e <__ieee754_pow+0x5e>
 8015e12:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015e16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015e1a:	ea54 030a 	orrs.w	r3, r4, sl
 8015e1e:	f000 84a4 	beq.w	801676a <__ieee754_pow+0x99a>
 8015e22:	486e      	ldr	r0, [pc, #440]	; (8015fdc <__ieee754_pow+0x20c>)
 8015e24:	b011      	add	sp, #68	; 0x44
 8015e26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e2a:	f000 bda5 	b.w	8016978 <nan>
 8015e2e:	2d00      	cmp	r5, #0
 8015e30:	da53      	bge.n	8015eda <__ieee754_pow+0x10a>
 8015e32:	4b6b      	ldr	r3, [pc, #428]	; (8015fe0 <__ieee754_pow+0x210>)
 8015e34:	4598      	cmp	r8, r3
 8015e36:	dc4d      	bgt.n	8015ed4 <__ieee754_pow+0x104>
 8015e38:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8015e3c:	4598      	cmp	r8, r3
 8015e3e:	dd4c      	ble.n	8015eda <__ieee754_pow+0x10a>
 8015e40:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015e44:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015e48:	2b14      	cmp	r3, #20
 8015e4a:	dd26      	ble.n	8015e9a <__ieee754_pow+0xca>
 8015e4c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015e50:	fa22 f103 	lsr.w	r1, r2, r3
 8015e54:	fa01 f303 	lsl.w	r3, r1, r3
 8015e58:	4293      	cmp	r3, r2
 8015e5a:	d13e      	bne.n	8015eda <__ieee754_pow+0x10a>
 8015e5c:	f001 0101 	and.w	r1, r1, #1
 8015e60:	f1c1 0b02 	rsb	fp, r1, #2
 8015e64:	2a00      	cmp	r2, #0
 8015e66:	d15b      	bne.n	8015f20 <__ieee754_pow+0x150>
 8015e68:	4b5b      	ldr	r3, [pc, #364]	; (8015fd8 <__ieee754_pow+0x208>)
 8015e6a:	4598      	cmp	r8, r3
 8015e6c:	d124      	bne.n	8015eb8 <__ieee754_pow+0xe8>
 8015e6e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8015e72:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8015e76:	ea53 030a 	orrs.w	r3, r3, sl
 8015e7a:	f000 8476 	beq.w	801676a <__ieee754_pow+0x99a>
 8015e7e:	4b59      	ldr	r3, [pc, #356]	; (8015fe4 <__ieee754_pow+0x214>)
 8015e80:	429c      	cmp	r4, r3
 8015e82:	dd2d      	ble.n	8015ee0 <__ieee754_pow+0x110>
 8015e84:	f1b9 0f00 	cmp.w	r9, #0
 8015e88:	f280 8473 	bge.w	8016772 <__ieee754_pow+0x9a2>
 8015e8c:	2000      	movs	r0, #0
 8015e8e:	2100      	movs	r1, #0
 8015e90:	ec41 0b10 	vmov	d0, r0, r1
 8015e94:	b011      	add	sp, #68	; 0x44
 8015e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e9a:	2a00      	cmp	r2, #0
 8015e9c:	d13e      	bne.n	8015f1c <__ieee754_pow+0x14c>
 8015e9e:	f1c3 0314 	rsb	r3, r3, #20
 8015ea2:	fa48 f103 	asr.w	r1, r8, r3
 8015ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8015eaa:	4543      	cmp	r3, r8
 8015eac:	f040 8469 	bne.w	8016782 <__ieee754_pow+0x9b2>
 8015eb0:	f001 0101 	and.w	r1, r1, #1
 8015eb4:	f1c1 0b02 	rsb	fp, r1, #2
 8015eb8:	4b4b      	ldr	r3, [pc, #300]	; (8015fe8 <__ieee754_pow+0x218>)
 8015eba:	4598      	cmp	r8, r3
 8015ebc:	d118      	bne.n	8015ef0 <__ieee754_pow+0x120>
 8015ebe:	f1b9 0f00 	cmp.w	r9, #0
 8015ec2:	f280 845a 	bge.w	801677a <__ieee754_pow+0x9aa>
 8015ec6:	4948      	ldr	r1, [pc, #288]	; (8015fe8 <__ieee754_pow+0x218>)
 8015ec8:	4632      	mov	r2, r6
 8015eca:	463b      	mov	r3, r7
 8015ecc:	2000      	movs	r0, #0
 8015ece:	f7ea fc47 	bl	8000760 <__aeabi_ddiv>
 8015ed2:	e7dd      	b.n	8015e90 <__ieee754_pow+0xc0>
 8015ed4:	f04f 0b02 	mov.w	fp, #2
 8015ed8:	e7c4      	b.n	8015e64 <__ieee754_pow+0x94>
 8015eda:	f04f 0b00 	mov.w	fp, #0
 8015ede:	e7c1      	b.n	8015e64 <__ieee754_pow+0x94>
 8015ee0:	f1b9 0f00 	cmp.w	r9, #0
 8015ee4:	dad2      	bge.n	8015e8c <__ieee754_pow+0xbc>
 8015ee6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015eea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015eee:	e7cf      	b.n	8015e90 <__ieee754_pow+0xc0>
 8015ef0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8015ef4:	d106      	bne.n	8015f04 <__ieee754_pow+0x134>
 8015ef6:	4632      	mov	r2, r6
 8015ef8:	463b      	mov	r3, r7
 8015efa:	4610      	mov	r0, r2
 8015efc:	4619      	mov	r1, r3
 8015efe:	f7ea fb05 	bl	800050c <__aeabi_dmul>
 8015f02:	e7c5      	b.n	8015e90 <__ieee754_pow+0xc0>
 8015f04:	4b39      	ldr	r3, [pc, #228]	; (8015fec <__ieee754_pow+0x21c>)
 8015f06:	4599      	cmp	r9, r3
 8015f08:	d10a      	bne.n	8015f20 <__ieee754_pow+0x150>
 8015f0a:	2d00      	cmp	r5, #0
 8015f0c:	db08      	blt.n	8015f20 <__ieee754_pow+0x150>
 8015f0e:	ec47 6b10 	vmov	d0, r6, r7
 8015f12:	b011      	add	sp, #68	; 0x44
 8015f14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f18:	f000 bc68 	b.w	80167ec <__ieee754_sqrt>
 8015f1c:	f04f 0b00 	mov.w	fp, #0
 8015f20:	ec47 6b10 	vmov	d0, r6, r7
 8015f24:	f000 fd12 	bl	801694c <fabs>
 8015f28:	ec51 0b10 	vmov	r0, r1, d0
 8015f2c:	f1ba 0f00 	cmp.w	sl, #0
 8015f30:	d127      	bne.n	8015f82 <__ieee754_pow+0x1b2>
 8015f32:	b124      	cbz	r4, 8015f3e <__ieee754_pow+0x16e>
 8015f34:	4b2c      	ldr	r3, [pc, #176]	; (8015fe8 <__ieee754_pow+0x218>)
 8015f36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	d121      	bne.n	8015f82 <__ieee754_pow+0x1b2>
 8015f3e:	f1b9 0f00 	cmp.w	r9, #0
 8015f42:	da05      	bge.n	8015f50 <__ieee754_pow+0x180>
 8015f44:	4602      	mov	r2, r0
 8015f46:	460b      	mov	r3, r1
 8015f48:	2000      	movs	r0, #0
 8015f4a:	4927      	ldr	r1, [pc, #156]	; (8015fe8 <__ieee754_pow+0x218>)
 8015f4c:	f7ea fc08 	bl	8000760 <__aeabi_ddiv>
 8015f50:	2d00      	cmp	r5, #0
 8015f52:	da9d      	bge.n	8015e90 <__ieee754_pow+0xc0>
 8015f54:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015f58:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015f5c:	ea54 030b 	orrs.w	r3, r4, fp
 8015f60:	d108      	bne.n	8015f74 <__ieee754_pow+0x1a4>
 8015f62:	4602      	mov	r2, r0
 8015f64:	460b      	mov	r3, r1
 8015f66:	4610      	mov	r0, r2
 8015f68:	4619      	mov	r1, r3
 8015f6a:	f7ea f917 	bl	800019c <__aeabi_dsub>
 8015f6e:	4602      	mov	r2, r0
 8015f70:	460b      	mov	r3, r1
 8015f72:	e7ac      	b.n	8015ece <__ieee754_pow+0xfe>
 8015f74:	f1bb 0f01 	cmp.w	fp, #1
 8015f78:	d18a      	bne.n	8015e90 <__ieee754_pow+0xc0>
 8015f7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015f7e:	4619      	mov	r1, r3
 8015f80:	e786      	b.n	8015e90 <__ieee754_pow+0xc0>
 8015f82:	0fed      	lsrs	r5, r5, #31
 8015f84:	1e6b      	subs	r3, r5, #1
 8015f86:	930d      	str	r3, [sp, #52]	; 0x34
 8015f88:	ea5b 0303 	orrs.w	r3, fp, r3
 8015f8c:	d102      	bne.n	8015f94 <__ieee754_pow+0x1c4>
 8015f8e:	4632      	mov	r2, r6
 8015f90:	463b      	mov	r3, r7
 8015f92:	e7e8      	b.n	8015f66 <__ieee754_pow+0x196>
 8015f94:	4b16      	ldr	r3, [pc, #88]	; (8015ff0 <__ieee754_pow+0x220>)
 8015f96:	4598      	cmp	r8, r3
 8015f98:	f340 80fe 	ble.w	8016198 <__ieee754_pow+0x3c8>
 8015f9c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8015fa0:	4598      	cmp	r8, r3
 8015fa2:	dd0a      	ble.n	8015fba <__ieee754_pow+0x1ea>
 8015fa4:	4b0f      	ldr	r3, [pc, #60]	; (8015fe4 <__ieee754_pow+0x214>)
 8015fa6:	429c      	cmp	r4, r3
 8015fa8:	dc0d      	bgt.n	8015fc6 <__ieee754_pow+0x1f6>
 8015faa:	f1b9 0f00 	cmp.w	r9, #0
 8015fae:	f6bf af6d 	bge.w	8015e8c <__ieee754_pow+0xbc>
 8015fb2:	a307      	add	r3, pc, #28	; (adr r3, 8015fd0 <__ieee754_pow+0x200>)
 8015fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fb8:	e79f      	b.n	8015efa <__ieee754_pow+0x12a>
 8015fba:	4b0e      	ldr	r3, [pc, #56]	; (8015ff4 <__ieee754_pow+0x224>)
 8015fbc:	429c      	cmp	r4, r3
 8015fbe:	ddf4      	ble.n	8015faa <__ieee754_pow+0x1da>
 8015fc0:	4b09      	ldr	r3, [pc, #36]	; (8015fe8 <__ieee754_pow+0x218>)
 8015fc2:	429c      	cmp	r4, r3
 8015fc4:	dd18      	ble.n	8015ff8 <__ieee754_pow+0x228>
 8015fc6:	f1b9 0f00 	cmp.w	r9, #0
 8015fca:	dcf2      	bgt.n	8015fb2 <__ieee754_pow+0x1e2>
 8015fcc:	e75e      	b.n	8015e8c <__ieee754_pow+0xbc>
 8015fce:	bf00      	nop
 8015fd0:	8800759c 	.word	0x8800759c
 8015fd4:	7e37e43c 	.word	0x7e37e43c
 8015fd8:	7ff00000 	.word	0x7ff00000
 8015fdc:	08017186 	.word	0x08017186
 8015fe0:	433fffff 	.word	0x433fffff
 8015fe4:	3fefffff 	.word	0x3fefffff
 8015fe8:	3ff00000 	.word	0x3ff00000
 8015fec:	3fe00000 	.word	0x3fe00000
 8015ff0:	41e00000 	.word	0x41e00000
 8015ff4:	3feffffe 	.word	0x3feffffe
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	4b63      	ldr	r3, [pc, #396]	; (8016188 <__ieee754_pow+0x3b8>)
 8015ffc:	f7ea f8ce 	bl	800019c <__aeabi_dsub>
 8016000:	a355      	add	r3, pc, #340	; (adr r3, 8016158 <__ieee754_pow+0x388>)
 8016002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016006:	4604      	mov	r4, r0
 8016008:	460d      	mov	r5, r1
 801600a:	f7ea fa7f 	bl	800050c <__aeabi_dmul>
 801600e:	a354      	add	r3, pc, #336	; (adr r3, 8016160 <__ieee754_pow+0x390>)
 8016010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016014:	4606      	mov	r6, r0
 8016016:	460f      	mov	r7, r1
 8016018:	4620      	mov	r0, r4
 801601a:	4629      	mov	r1, r5
 801601c:	f7ea fa76 	bl	800050c <__aeabi_dmul>
 8016020:	2200      	movs	r2, #0
 8016022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016026:	4b59      	ldr	r3, [pc, #356]	; (801618c <__ieee754_pow+0x3bc>)
 8016028:	4620      	mov	r0, r4
 801602a:	4629      	mov	r1, r5
 801602c:	f7ea fa6e 	bl	800050c <__aeabi_dmul>
 8016030:	4602      	mov	r2, r0
 8016032:	460b      	mov	r3, r1
 8016034:	a14c      	add	r1, pc, #304	; (adr r1, 8016168 <__ieee754_pow+0x398>)
 8016036:	e9d1 0100 	ldrd	r0, r1, [r1]
 801603a:	f7ea f8af 	bl	800019c <__aeabi_dsub>
 801603e:	4622      	mov	r2, r4
 8016040:	462b      	mov	r3, r5
 8016042:	f7ea fa63 	bl	800050c <__aeabi_dmul>
 8016046:	4602      	mov	r2, r0
 8016048:	460b      	mov	r3, r1
 801604a:	2000      	movs	r0, #0
 801604c:	4950      	ldr	r1, [pc, #320]	; (8016190 <__ieee754_pow+0x3c0>)
 801604e:	f7ea f8a5 	bl	800019c <__aeabi_dsub>
 8016052:	4622      	mov	r2, r4
 8016054:	462b      	mov	r3, r5
 8016056:	4680      	mov	r8, r0
 8016058:	4689      	mov	r9, r1
 801605a:	4620      	mov	r0, r4
 801605c:	4629      	mov	r1, r5
 801605e:	f7ea fa55 	bl	800050c <__aeabi_dmul>
 8016062:	4602      	mov	r2, r0
 8016064:	460b      	mov	r3, r1
 8016066:	4640      	mov	r0, r8
 8016068:	4649      	mov	r1, r9
 801606a:	f7ea fa4f 	bl	800050c <__aeabi_dmul>
 801606e:	a340      	add	r3, pc, #256	; (adr r3, 8016170 <__ieee754_pow+0x3a0>)
 8016070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016074:	f7ea fa4a 	bl	800050c <__aeabi_dmul>
 8016078:	4602      	mov	r2, r0
 801607a:	460b      	mov	r3, r1
 801607c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016080:	f7ea f88c 	bl	800019c <__aeabi_dsub>
 8016084:	4602      	mov	r2, r0
 8016086:	460b      	mov	r3, r1
 8016088:	4604      	mov	r4, r0
 801608a:	460d      	mov	r5, r1
 801608c:	4630      	mov	r0, r6
 801608e:	4639      	mov	r1, r7
 8016090:	f7ea f886 	bl	80001a0 <__adddf3>
 8016094:	2000      	movs	r0, #0
 8016096:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801609a:	4632      	mov	r2, r6
 801609c:	463b      	mov	r3, r7
 801609e:	f7ea f87d 	bl	800019c <__aeabi_dsub>
 80160a2:	4602      	mov	r2, r0
 80160a4:	460b      	mov	r3, r1
 80160a6:	4620      	mov	r0, r4
 80160a8:	4629      	mov	r1, r5
 80160aa:	f7ea f877 	bl	800019c <__aeabi_dsub>
 80160ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80160b0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80160b4:	4313      	orrs	r3, r2
 80160b6:	4606      	mov	r6, r0
 80160b8:	460f      	mov	r7, r1
 80160ba:	f040 81eb 	bne.w	8016494 <__ieee754_pow+0x6c4>
 80160be:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016178 <__ieee754_pow+0x3a8>
 80160c2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80160c6:	2400      	movs	r4, #0
 80160c8:	4622      	mov	r2, r4
 80160ca:	462b      	mov	r3, r5
 80160cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80160d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80160d4:	f7ea f862 	bl	800019c <__aeabi_dsub>
 80160d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80160dc:	f7ea fa16 	bl	800050c <__aeabi_dmul>
 80160e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80160e4:	4680      	mov	r8, r0
 80160e6:	4689      	mov	r9, r1
 80160e8:	4630      	mov	r0, r6
 80160ea:	4639      	mov	r1, r7
 80160ec:	f7ea fa0e 	bl	800050c <__aeabi_dmul>
 80160f0:	4602      	mov	r2, r0
 80160f2:	460b      	mov	r3, r1
 80160f4:	4640      	mov	r0, r8
 80160f6:	4649      	mov	r1, r9
 80160f8:	f7ea f852 	bl	80001a0 <__adddf3>
 80160fc:	4622      	mov	r2, r4
 80160fe:	462b      	mov	r3, r5
 8016100:	4680      	mov	r8, r0
 8016102:	4689      	mov	r9, r1
 8016104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016108:	f7ea fa00 	bl	800050c <__aeabi_dmul>
 801610c:	460b      	mov	r3, r1
 801610e:	4604      	mov	r4, r0
 8016110:	460d      	mov	r5, r1
 8016112:	4602      	mov	r2, r0
 8016114:	4649      	mov	r1, r9
 8016116:	4640      	mov	r0, r8
 8016118:	e9cd 4500 	strd	r4, r5, [sp]
 801611c:	f7ea f840 	bl	80001a0 <__adddf3>
 8016120:	4b1c      	ldr	r3, [pc, #112]	; (8016194 <__ieee754_pow+0x3c4>)
 8016122:	4299      	cmp	r1, r3
 8016124:	4606      	mov	r6, r0
 8016126:	460f      	mov	r7, r1
 8016128:	468b      	mov	fp, r1
 801612a:	f340 82f7 	ble.w	801671c <__ieee754_pow+0x94c>
 801612e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016132:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016136:	4303      	orrs	r3, r0
 8016138:	f000 81ea 	beq.w	8016510 <__ieee754_pow+0x740>
 801613c:	a310      	add	r3, pc, #64	; (adr r3, 8016180 <__ieee754_pow+0x3b0>)
 801613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016142:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016146:	f7ea f9e1 	bl	800050c <__aeabi_dmul>
 801614a:	a30d      	add	r3, pc, #52	; (adr r3, 8016180 <__ieee754_pow+0x3b0>)
 801614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016150:	e6d5      	b.n	8015efe <__ieee754_pow+0x12e>
 8016152:	bf00      	nop
 8016154:	f3af 8000 	nop.w
 8016158:	60000000 	.word	0x60000000
 801615c:	3ff71547 	.word	0x3ff71547
 8016160:	f85ddf44 	.word	0xf85ddf44
 8016164:	3e54ae0b 	.word	0x3e54ae0b
 8016168:	55555555 	.word	0x55555555
 801616c:	3fd55555 	.word	0x3fd55555
 8016170:	652b82fe 	.word	0x652b82fe
 8016174:	3ff71547 	.word	0x3ff71547
 8016178:	00000000 	.word	0x00000000
 801617c:	bff00000 	.word	0xbff00000
 8016180:	8800759c 	.word	0x8800759c
 8016184:	7e37e43c 	.word	0x7e37e43c
 8016188:	3ff00000 	.word	0x3ff00000
 801618c:	3fd00000 	.word	0x3fd00000
 8016190:	3fe00000 	.word	0x3fe00000
 8016194:	408fffff 	.word	0x408fffff
 8016198:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801619c:	f04f 0200 	mov.w	r2, #0
 80161a0:	da05      	bge.n	80161ae <__ieee754_pow+0x3de>
 80161a2:	4bd3      	ldr	r3, [pc, #844]	; (80164f0 <__ieee754_pow+0x720>)
 80161a4:	f7ea f9b2 	bl	800050c <__aeabi_dmul>
 80161a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80161ac:	460c      	mov	r4, r1
 80161ae:	1523      	asrs	r3, r4, #20
 80161b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80161b4:	4413      	add	r3, r2
 80161b6:	9309      	str	r3, [sp, #36]	; 0x24
 80161b8:	4bce      	ldr	r3, [pc, #824]	; (80164f4 <__ieee754_pow+0x724>)
 80161ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80161be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80161c2:	429c      	cmp	r4, r3
 80161c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80161c8:	dd08      	ble.n	80161dc <__ieee754_pow+0x40c>
 80161ca:	4bcb      	ldr	r3, [pc, #812]	; (80164f8 <__ieee754_pow+0x728>)
 80161cc:	429c      	cmp	r4, r3
 80161ce:	f340 815e 	ble.w	801648e <__ieee754_pow+0x6be>
 80161d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161d4:	3301      	adds	r3, #1
 80161d6:	9309      	str	r3, [sp, #36]	; 0x24
 80161d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80161dc:	f04f 0a00 	mov.w	sl, #0
 80161e0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80161e4:	930c      	str	r3, [sp, #48]	; 0x30
 80161e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80161e8:	4bc4      	ldr	r3, [pc, #784]	; (80164fc <__ieee754_pow+0x72c>)
 80161ea:	4413      	add	r3, r2
 80161ec:	ed93 7b00 	vldr	d7, [r3]
 80161f0:	4629      	mov	r1, r5
 80161f2:	ec53 2b17 	vmov	r2, r3, d7
 80161f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80161fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80161fe:	f7e9 ffcd 	bl	800019c <__aeabi_dsub>
 8016202:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016206:	4606      	mov	r6, r0
 8016208:	460f      	mov	r7, r1
 801620a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801620e:	f7e9 ffc7 	bl	80001a0 <__adddf3>
 8016212:	4602      	mov	r2, r0
 8016214:	460b      	mov	r3, r1
 8016216:	2000      	movs	r0, #0
 8016218:	49b9      	ldr	r1, [pc, #740]	; (8016500 <__ieee754_pow+0x730>)
 801621a:	f7ea faa1 	bl	8000760 <__aeabi_ddiv>
 801621e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016222:	4602      	mov	r2, r0
 8016224:	460b      	mov	r3, r1
 8016226:	4630      	mov	r0, r6
 8016228:	4639      	mov	r1, r7
 801622a:	f7ea f96f 	bl	800050c <__aeabi_dmul>
 801622e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016232:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8016236:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801623a:	2300      	movs	r3, #0
 801623c:	9302      	str	r3, [sp, #8]
 801623e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016242:	106d      	asrs	r5, r5, #1
 8016244:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016248:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801624c:	2200      	movs	r2, #0
 801624e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016252:	4640      	mov	r0, r8
 8016254:	4649      	mov	r1, r9
 8016256:	4614      	mov	r4, r2
 8016258:	461d      	mov	r5, r3
 801625a:	f7ea f957 	bl	800050c <__aeabi_dmul>
 801625e:	4602      	mov	r2, r0
 8016260:	460b      	mov	r3, r1
 8016262:	4630      	mov	r0, r6
 8016264:	4639      	mov	r1, r7
 8016266:	f7e9 ff99 	bl	800019c <__aeabi_dsub>
 801626a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801626e:	4606      	mov	r6, r0
 8016270:	460f      	mov	r7, r1
 8016272:	4620      	mov	r0, r4
 8016274:	4629      	mov	r1, r5
 8016276:	f7e9 ff91 	bl	800019c <__aeabi_dsub>
 801627a:	4602      	mov	r2, r0
 801627c:	460b      	mov	r3, r1
 801627e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016282:	f7e9 ff8b 	bl	800019c <__aeabi_dsub>
 8016286:	4642      	mov	r2, r8
 8016288:	464b      	mov	r3, r9
 801628a:	f7ea f93f 	bl	800050c <__aeabi_dmul>
 801628e:	4602      	mov	r2, r0
 8016290:	460b      	mov	r3, r1
 8016292:	4630      	mov	r0, r6
 8016294:	4639      	mov	r1, r7
 8016296:	f7e9 ff81 	bl	800019c <__aeabi_dsub>
 801629a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801629e:	f7ea f935 	bl	800050c <__aeabi_dmul>
 80162a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80162a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80162aa:	4610      	mov	r0, r2
 80162ac:	4619      	mov	r1, r3
 80162ae:	f7ea f92d 	bl	800050c <__aeabi_dmul>
 80162b2:	a37b      	add	r3, pc, #492	; (adr r3, 80164a0 <__ieee754_pow+0x6d0>)
 80162b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162b8:	4604      	mov	r4, r0
 80162ba:	460d      	mov	r5, r1
 80162bc:	f7ea f926 	bl	800050c <__aeabi_dmul>
 80162c0:	a379      	add	r3, pc, #484	; (adr r3, 80164a8 <__ieee754_pow+0x6d8>)
 80162c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162c6:	f7e9 ff6b 	bl	80001a0 <__adddf3>
 80162ca:	4622      	mov	r2, r4
 80162cc:	462b      	mov	r3, r5
 80162ce:	f7ea f91d 	bl	800050c <__aeabi_dmul>
 80162d2:	a377      	add	r3, pc, #476	; (adr r3, 80164b0 <__ieee754_pow+0x6e0>)
 80162d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d8:	f7e9 ff62 	bl	80001a0 <__adddf3>
 80162dc:	4622      	mov	r2, r4
 80162de:	462b      	mov	r3, r5
 80162e0:	f7ea f914 	bl	800050c <__aeabi_dmul>
 80162e4:	a374      	add	r3, pc, #464	; (adr r3, 80164b8 <__ieee754_pow+0x6e8>)
 80162e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ea:	f7e9 ff59 	bl	80001a0 <__adddf3>
 80162ee:	4622      	mov	r2, r4
 80162f0:	462b      	mov	r3, r5
 80162f2:	f7ea f90b 	bl	800050c <__aeabi_dmul>
 80162f6:	a372      	add	r3, pc, #456	; (adr r3, 80164c0 <__ieee754_pow+0x6f0>)
 80162f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162fc:	f7e9 ff50 	bl	80001a0 <__adddf3>
 8016300:	4622      	mov	r2, r4
 8016302:	462b      	mov	r3, r5
 8016304:	f7ea f902 	bl	800050c <__aeabi_dmul>
 8016308:	a36f      	add	r3, pc, #444	; (adr r3, 80164c8 <__ieee754_pow+0x6f8>)
 801630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801630e:	f7e9 ff47 	bl	80001a0 <__adddf3>
 8016312:	4622      	mov	r2, r4
 8016314:	4606      	mov	r6, r0
 8016316:	460f      	mov	r7, r1
 8016318:	462b      	mov	r3, r5
 801631a:	4620      	mov	r0, r4
 801631c:	4629      	mov	r1, r5
 801631e:	f7ea f8f5 	bl	800050c <__aeabi_dmul>
 8016322:	4602      	mov	r2, r0
 8016324:	460b      	mov	r3, r1
 8016326:	4630      	mov	r0, r6
 8016328:	4639      	mov	r1, r7
 801632a:	f7ea f8ef 	bl	800050c <__aeabi_dmul>
 801632e:	4642      	mov	r2, r8
 8016330:	4604      	mov	r4, r0
 8016332:	460d      	mov	r5, r1
 8016334:	464b      	mov	r3, r9
 8016336:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801633a:	f7e9 ff31 	bl	80001a0 <__adddf3>
 801633e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016342:	f7ea f8e3 	bl	800050c <__aeabi_dmul>
 8016346:	4622      	mov	r2, r4
 8016348:	462b      	mov	r3, r5
 801634a:	f7e9 ff29 	bl	80001a0 <__adddf3>
 801634e:	4642      	mov	r2, r8
 8016350:	4606      	mov	r6, r0
 8016352:	460f      	mov	r7, r1
 8016354:	464b      	mov	r3, r9
 8016356:	4640      	mov	r0, r8
 8016358:	4649      	mov	r1, r9
 801635a:	f7ea f8d7 	bl	800050c <__aeabi_dmul>
 801635e:	2200      	movs	r2, #0
 8016360:	4b68      	ldr	r3, [pc, #416]	; (8016504 <__ieee754_pow+0x734>)
 8016362:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016366:	f7e9 ff1b 	bl	80001a0 <__adddf3>
 801636a:	4632      	mov	r2, r6
 801636c:	463b      	mov	r3, r7
 801636e:	f7e9 ff17 	bl	80001a0 <__adddf3>
 8016372:	9802      	ldr	r0, [sp, #8]
 8016374:	460d      	mov	r5, r1
 8016376:	4604      	mov	r4, r0
 8016378:	4602      	mov	r2, r0
 801637a:	460b      	mov	r3, r1
 801637c:	4640      	mov	r0, r8
 801637e:	4649      	mov	r1, r9
 8016380:	f7ea f8c4 	bl	800050c <__aeabi_dmul>
 8016384:	2200      	movs	r2, #0
 8016386:	4680      	mov	r8, r0
 8016388:	4689      	mov	r9, r1
 801638a:	4b5e      	ldr	r3, [pc, #376]	; (8016504 <__ieee754_pow+0x734>)
 801638c:	4620      	mov	r0, r4
 801638e:	4629      	mov	r1, r5
 8016390:	f7e9 ff04 	bl	800019c <__aeabi_dsub>
 8016394:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016398:	f7e9 ff00 	bl	800019c <__aeabi_dsub>
 801639c:	4602      	mov	r2, r0
 801639e:	460b      	mov	r3, r1
 80163a0:	4630      	mov	r0, r6
 80163a2:	4639      	mov	r1, r7
 80163a4:	f7e9 fefa 	bl	800019c <__aeabi_dsub>
 80163a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163ac:	f7ea f8ae 	bl	800050c <__aeabi_dmul>
 80163b0:	4622      	mov	r2, r4
 80163b2:	4606      	mov	r6, r0
 80163b4:	460f      	mov	r7, r1
 80163b6:	462b      	mov	r3, r5
 80163b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80163bc:	f7ea f8a6 	bl	800050c <__aeabi_dmul>
 80163c0:	4602      	mov	r2, r0
 80163c2:	460b      	mov	r3, r1
 80163c4:	4630      	mov	r0, r6
 80163c6:	4639      	mov	r1, r7
 80163c8:	f7e9 feea 	bl	80001a0 <__adddf3>
 80163cc:	4606      	mov	r6, r0
 80163ce:	460f      	mov	r7, r1
 80163d0:	4602      	mov	r2, r0
 80163d2:	460b      	mov	r3, r1
 80163d4:	4640      	mov	r0, r8
 80163d6:	4649      	mov	r1, r9
 80163d8:	f7e9 fee2 	bl	80001a0 <__adddf3>
 80163dc:	9802      	ldr	r0, [sp, #8]
 80163de:	a33c      	add	r3, pc, #240	; (adr r3, 80164d0 <__ieee754_pow+0x700>)
 80163e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e4:	4604      	mov	r4, r0
 80163e6:	460d      	mov	r5, r1
 80163e8:	f7ea f890 	bl	800050c <__aeabi_dmul>
 80163ec:	4642      	mov	r2, r8
 80163ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80163f2:	464b      	mov	r3, r9
 80163f4:	4620      	mov	r0, r4
 80163f6:	4629      	mov	r1, r5
 80163f8:	f7e9 fed0 	bl	800019c <__aeabi_dsub>
 80163fc:	4602      	mov	r2, r0
 80163fe:	460b      	mov	r3, r1
 8016400:	4630      	mov	r0, r6
 8016402:	4639      	mov	r1, r7
 8016404:	f7e9 feca 	bl	800019c <__aeabi_dsub>
 8016408:	a333      	add	r3, pc, #204	; (adr r3, 80164d8 <__ieee754_pow+0x708>)
 801640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801640e:	f7ea f87d 	bl	800050c <__aeabi_dmul>
 8016412:	a333      	add	r3, pc, #204	; (adr r3, 80164e0 <__ieee754_pow+0x710>)
 8016414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016418:	4606      	mov	r6, r0
 801641a:	460f      	mov	r7, r1
 801641c:	4620      	mov	r0, r4
 801641e:	4629      	mov	r1, r5
 8016420:	f7ea f874 	bl	800050c <__aeabi_dmul>
 8016424:	4602      	mov	r2, r0
 8016426:	460b      	mov	r3, r1
 8016428:	4630      	mov	r0, r6
 801642a:	4639      	mov	r1, r7
 801642c:	f7e9 feb8 	bl	80001a0 <__adddf3>
 8016430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016432:	4b35      	ldr	r3, [pc, #212]	; (8016508 <__ieee754_pow+0x738>)
 8016434:	4413      	add	r3, r2
 8016436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801643a:	f7e9 feb1 	bl	80001a0 <__adddf3>
 801643e:	4604      	mov	r4, r0
 8016440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016442:	460d      	mov	r5, r1
 8016444:	f7e9 fff8 	bl	8000438 <__aeabi_i2d>
 8016448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801644a:	4b30      	ldr	r3, [pc, #192]	; (801650c <__ieee754_pow+0x73c>)
 801644c:	4413      	add	r3, r2
 801644e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016452:	4606      	mov	r6, r0
 8016454:	460f      	mov	r7, r1
 8016456:	4622      	mov	r2, r4
 8016458:	462b      	mov	r3, r5
 801645a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801645e:	f7e9 fe9f 	bl	80001a0 <__adddf3>
 8016462:	4642      	mov	r2, r8
 8016464:	464b      	mov	r3, r9
 8016466:	f7e9 fe9b 	bl	80001a0 <__adddf3>
 801646a:	4632      	mov	r2, r6
 801646c:	463b      	mov	r3, r7
 801646e:	f7e9 fe97 	bl	80001a0 <__adddf3>
 8016472:	9802      	ldr	r0, [sp, #8]
 8016474:	4632      	mov	r2, r6
 8016476:	463b      	mov	r3, r7
 8016478:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801647c:	f7e9 fe8e 	bl	800019c <__aeabi_dsub>
 8016480:	4642      	mov	r2, r8
 8016482:	464b      	mov	r3, r9
 8016484:	f7e9 fe8a 	bl	800019c <__aeabi_dsub>
 8016488:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801648c:	e607      	b.n	801609e <__ieee754_pow+0x2ce>
 801648e:	f04f 0a01 	mov.w	sl, #1
 8016492:	e6a5      	b.n	80161e0 <__ieee754_pow+0x410>
 8016494:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80164e8 <__ieee754_pow+0x718>
 8016498:	e613      	b.n	80160c2 <__ieee754_pow+0x2f2>
 801649a:	bf00      	nop
 801649c:	f3af 8000 	nop.w
 80164a0:	4a454eef 	.word	0x4a454eef
 80164a4:	3fca7e28 	.word	0x3fca7e28
 80164a8:	93c9db65 	.word	0x93c9db65
 80164ac:	3fcd864a 	.word	0x3fcd864a
 80164b0:	a91d4101 	.word	0xa91d4101
 80164b4:	3fd17460 	.word	0x3fd17460
 80164b8:	518f264d 	.word	0x518f264d
 80164bc:	3fd55555 	.word	0x3fd55555
 80164c0:	db6fabff 	.word	0xdb6fabff
 80164c4:	3fdb6db6 	.word	0x3fdb6db6
 80164c8:	33333303 	.word	0x33333303
 80164cc:	3fe33333 	.word	0x3fe33333
 80164d0:	e0000000 	.word	0xe0000000
 80164d4:	3feec709 	.word	0x3feec709
 80164d8:	dc3a03fd 	.word	0xdc3a03fd
 80164dc:	3feec709 	.word	0x3feec709
 80164e0:	145b01f5 	.word	0x145b01f5
 80164e4:	be3e2fe0 	.word	0xbe3e2fe0
 80164e8:	00000000 	.word	0x00000000
 80164ec:	3ff00000 	.word	0x3ff00000
 80164f0:	43400000 	.word	0x43400000
 80164f4:	0003988e 	.word	0x0003988e
 80164f8:	000bb679 	.word	0x000bb679
 80164fc:	08017188 	.word	0x08017188
 8016500:	3ff00000 	.word	0x3ff00000
 8016504:	40080000 	.word	0x40080000
 8016508:	080171a8 	.word	0x080171a8
 801650c:	08017198 	.word	0x08017198
 8016510:	a3b4      	add	r3, pc, #720	; (adr r3, 80167e4 <__ieee754_pow+0xa14>)
 8016512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016516:	4640      	mov	r0, r8
 8016518:	4649      	mov	r1, r9
 801651a:	f7e9 fe41 	bl	80001a0 <__adddf3>
 801651e:	4622      	mov	r2, r4
 8016520:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016524:	462b      	mov	r3, r5
 8016526:	4630      	mov	r0, r6
 8016528:	4639      	mov	r1, r7
 801652a:	f7e9 fe37 	bl	800019c <__aeabi_dsub>
 801652e:	4602      	mov	r2, r0
 8016530:	460b      	mov	r3, r1
 8016532:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016536:	f7ea fa79 	bl	8000a2c <__aeabi_dcmpgt>
 801653a:	2800      	cmp	r0, #0
 801653c:	f47f adfe 	bne.w	801613c <__ieee754_pow+0x36c>
 8016540:	4aa3      	ldr	r2, [pc, #652]	; (80167d0 <__ieee754_pow+0xa00>)
 8016542:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016546:	4293      	cmp	r3, r2
 8016548:	f340 810a 	ble.w	8016760 <__ieee754_pow+0x990>
 801654c:	151b      	asrs	r3, r3, #20
 801654e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016552:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016556:	fa4a f303 	asr.w	r3, sl, r3
 801655a:	445b      	add	r3, fp
 801655c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016560:	4e9c      	ldr	r6, [pc, #624]	; (80167d4 <__ieee754_pow+0xa04>)
 8016562:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016566:	4116      	asrs	r6, r2
 8016568:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801656c:	2000      	movs	r0, #0
 801656e:	ea23 0106 	bic.w	r1, r3, r6
 8016572:	f1c2 0214 	rsb	r2, r2, #20
 8016576:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801657a:	fa4a fa02 	asr.w	sl, sl, r2
 801657e:	f1bb 0f00 	cmp.w	fp, #0
 8016582:	4602      	mov	r2, r0
 8016584:	460b      	mov	r3, r1
 8016586:	4620      	mov	r0, r4
 8016588:	4629      	mov	r1, r5
 801658a:	bfb8      	it	lt
 801658c:	f1ca 0a00 	rsblt	sl, sl, #0
 8016590:	f7e9 fe04 	bl	800019c <__aeabi_dsub>
 8016594:	e9cd 0100 	strd	r0, r1, [sp]
 8016598:	4642      	mov	r2, r8
 801659a:	464b      	mov	r3, r9
 801659c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80165a0:	f7e9 fdfe 	bl	80001a0 <__adddf3>
 80165a4:	2000      	movs	r0, #0
 80165a6:	a378      	add	r3, pc, #480	; (adr r3, 8016788 <__ieee754_pow+0x9b8>)
 80165a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165ac:	4604      	mov	r4, r0
 80165ae:	460d      	mov	r5, r1
 80165b0:	f7e9 ffac 	bl	800050c <__aeabi_dmul>
 80165b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80165b8:	4606      	mov	r6, r0
 80165ba:	460f      	mov	r7, r1
 80165bc:	4620      	mov	r0, r4
 80165be:	4629      	mov	r1, r5
 80165c0:	f7e9 fdec 	bl	800019c <__aeabi_dsub>
 80165c4:	4602      	mov	r2, r0
 80165c6:	460b      	mov	r3, r1
 80165c8:	4640      	mov	r0, r8
 80165ca:	4649      	mov	r1, r9
 80165cc:	f7e9 fde6 	bl	800019c <__aeabi_dsub>
 80165d0:	a36f      	add	r3, pc, #444	; (adr r3, 8016790 <__ieee754_pow+0x9c0>)
 80165d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d6:	f7e9 ff99 	bl	800050c <__aeabi_dmul>
 80165da:	a36f      	add	r3, pc, #444	; (adr r3, 8016798 <__ieee754_pow+0x9c8>)
 80165dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165e0:	4680      	mov	r8, r0
 80165e2:	4689      	mov	r9, r1
 80165e4:	4620      	mov	r0, r4
 80165e6:	4629      	mov	r1, r5
 80165e8:	f7e9 ff90 	bl	800050c <__aeabi_dmul>
 80165ec:	4602      	mov	r2, r0
 80165ee:	460b      	mov	r3, r1
 80165f0:	4640      	mov	r0, r8
 80165f2:	4649      	mov	r1, r9
 80165f4:	f7e9 fdd4 	bl	80001a0 <__adddf3>
 80165f8:	4604      	mov	r4, r0
 80165fa:	460d      	mov	r5, r1
 80165fc:	4602      	mov	r2, r0
 80165fe:	460b      	mov	r3, r1
 8016600:	4630      	mov	r0, r6
 8016602:	4639      	mov	r1, r7
 8016604:	f7e9 fdcc 	bl	80001a0 <__adddf3>
 8016608:	4632      	mov	r2, r6
 801660a:	463b      	mov	r3, r7
 801660c:	4680      	mov	r8, r0
 801660e:	4689      	mov	r9, r1
 8016610:	f7e9 fdc4 	bl	800019c <__aeabi_dsub>
 8016614:	4602      	mov	r2, r0
 8016616:	460b      	mov	r3, r1
 8016618:	4620      	mov	r0, r4
 801661a:	4629      	mov	r1, r5
 801661c:	f7e9 fdbe 	bl	800019c <__aeabi_dsub>
 8016620:	4642      	mov	r2, r8
 8016622:	4606      	mov	r6, r0
 8016624:	460f      	mov	r7, r1
 8016626:	464b      	mov	r3, r9
 8016628:	4640      	mov	r0, r8
 801662a:	4649      	mov	r1, r9
 801662c:	f7e9 ff6e 	bl	800050c <__aeabi_dmul>
 8016630:	a35b      	add	r3, pc, #364	; (adr r3, 80167a0 <__ieee754_pow+0x9d0>)
 8016632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016636:	4604      	mov	r4, r0
 8016638:	460d      	mov	r5, r1
 801663a:	f7e9 ff67 	bl	800050c <__aeabi_dmul>
 801663e:	a35a      	add	r3, pc, #360	; (adr r3, 80167a8 <__ieee754_pow+0x9d8>)
 8016640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016644:	f7e9 fdaa 	bl	800019c <__aeabi_dsub>
 8016648:	4622      	mov	r2, r4
 801664a:	462b      	mov	r3, r5
 801664c:	f7e9 ff5e 	bl	800050c <__aeabi_dmul>
 8016650:	a357      	add	r3, pc, #348	; (adr r3, 80167b0 <__ieee754_pow+0x9e0>)
 8016652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016656:	f7e9 fda3 	bl	80001a0 <__adddf3>
 801665a:	4622      	mov	r2, r4
 801665c:	462b      	mov	r3, r5
 801665e:	f7e9 ff55 	bl	800050c <__aeabi_dmul>
 8016662:	a355      	add	r3, pc, #340	; (adr r3, 80167b8 <__ieee754_pow+0x9e8>)
 8016664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016668:	f7e9 fd98 	bl	800019c <__aeabi_dsub>
 801666c:	4622      	mov	r2, r4
 801666e:	462b      	mov	r3, r5
 8016670:	f7e9 ff4c 	bl	800050c <__aeabi_dmul>
 8016674:	a352      	add	r3, pc, #328	; (adr r3, 80167c0 <__ieee754_pow+0x9f0>)
 8016676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801667a:	f7e9 fd91 	bl	80001a0 <__adddf3>
 801667e:	4622      	mov	r2, r4
 8016680:	462b      	mov	r3, r5
 8016682:	f7e9 ff43 	bl	800050c <__aeabi_dmul>
 8016686:	4602      	mov	r2, r0
 8016688:	460b      	mov	r3, r1
 801668a:	4640      	mov	r0, r8
 801668c:	4649      	mov	r1, r9
 801668e:	f7e9 fd85 	bl	800019c <__aeabi_dsub>
 8016692:	4604      	mov	r4, r0
 8016694:	460d      	mov	r5, r1
 8016696:	4602      	mov	r2, r0
 8016698:	460b      	mov	r3, r1
 801669a:	4640      	mov	r0, r8
 801669c:	4649      	mov	r1, r9
 801669e:	f7e9 ff35 	bl	800050c <__aeabi_dmul>
 80166a2:	2200      	movs	r2, #0
 80166a4:	e9cd 0100 	strd	r0, r1, [sp]
 80166a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80166ac:	4620      	mov	r0, r4
 80166ae:	4629      	mov	r1, r5
 80166b0:	f7e9 fd74 	bl	800019c <__aeabi_dsub>
 80166b4:	4602      	mov	r2, r0
 80166b6:	460b      	mov	r3, r1
 80166b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80166bc:	f7ea f850 	bl	8000760 <__aeabi_ddiv>
 80166c0:	4632      	mov	r2, r6
 80166c2:	4604      	mov	r4, r0
 80166c4:	460d      	mov	r5, r1
 80166c6:	463b      	mov	r3, r7
 80166c8:	4640      	mov	r0, r8
 80166ca:	4649      	mov	r1, r9
 80166cc:	f7e9 ff1e 	bl	800050c <__aeabi_dmul>
 80166d0:	4632      	mov	r2, r6
 80166d2:	463b      	mov	r3, r7
 80166d4:	f7e9 fd64 	bl	80001a0 <__adddf3>
 80166d8:	4602      	mov	r2, r0
 80166da:	460b      	mov	r3, r1
 80166dc:	4620      	mov	r0, r4
 80166de:	4629      	mov	r1, r5
 80166e0:	f7e9 fd5c 	bl	800019c <__aeabi_dsub>
 80166e4:	4642      	mov	r2, r8
 80166e6:	464b      	mov	r3, r9
 80166e8:	f7e9 fd58 	bl	800019c <__aeabi_dsub>
 80166ec:	4602      	mov	r2, r0
 80166ee:	460b      	mov	r3, r1
 80166f0:	2000      	movs	r0, #0
 80166f2:	4939      	ldr	r1, [pc, #228]	; (80167d8 <__ieee754_pow+0xa08>)
 80166f4:	f7e9 fd52 	bl	800019c <__aeabi_dsub>
 80166f8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80166fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016700:	4602      	mov	r2, r0
 8016702:	460b      	mov	r3, r1
 8016704:	da2f      	bge.n	8016766 <__ieee754_pow+0x996>
 8016706:	4650      	mov	r0, sl
 8016708:	ec43 2b10 	vmov	d0, r2, r3
 801670c:	f000 f9c0 	bl	8016a90 <scalbn>
 8016710:	ec51 0b10 	vmov	r0, r1, d0
 8016714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016718:	f7ff bbf1 	b.w	8015efe <__ieee754_pow+0x12e>
 801671c:	4b2f      	ldr	r3, [pc, #188]	; (80167dc <__ieee754_pow+0xa0c>)
 801671e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016722:	429e      	cmp	r6, r3
 8016724:	f77f af0c 	ble.w	8016540 <__ieee754_pow+0x770>
 8016728:	4b2d      	ldr	r3, [pc, #180]	; (80167e0 <__ieee754_pow+0xa10>)
 801672a:	440b      	add	r3, r1
 801672c:	4303      	orrs	r3, r0
 801672e:	d00b      	beq.n	8016748 <__ieee754_pow+0x978>
 8016730:	a325      	add	r3, pc, #148	; (adr r3, 80167c8 <__ieee754_pow+0x9f8>)
 8016732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801673a:	f7e9 fee7 	bl	800050c <__aeabi_dmul>
 801673e:	a322      	add	r3, pc, #136	; (adr r3, 80167c8 <__ieee754_pow+0x9f8>)
 8016740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016744:	f7ff bbdb 	b.w	8015efe <__ieee754_pow+0x12e>
 8016748:	4622      	mov	r2, r4
 801674a:	462b      	mov	r3, r5
 801674c:	f7e9 fd26 	bl	800019c <__aeabi_dsub>
 8016750:	4642      	mov	r2, r8
 8016752:	464b      	mov	r3, r9
 8016754:	f7ea f960 	bl	8000a18 <__aeabi_dcmpge>
 8016758:	2800      	cmp	r0, #0
 801675a:	f43f aef1 	beq.w	8016540 <__ieee754_pow+0x770>
 801675e:	e7e7      	b.n	8016730 <__ieee754_pow+0x960>
 8016760:	f04f 0a00 	mov.w	sl, #0
 8016764:	e718      	b.n	8016598 <__ieee754_pow+0x7c8>
 8016766:	4621      	mov	r1, r4
 8016768:	e7d4      	b.n	8016714 <__ieee754_pow+0x944>
 801676a:	2000      	movs	r0, #0
 801676c:	491a      	ldr	r1, [pc, #104]	; (80167d8 <__ieee754_pow+0xa08>)
 801676e:	f7ff bb8f 	b.w	8015e90 <__ieee754_pow+0xc0>
 8016772:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016776:	f7ff bb8b 	b.w	8015e90 <__ieee754_pow+0xc0>
 801677a:	4630      	mov	r0, r6
 801677c:	4639      	mov	r1, r7
 801677e:	f7ff bb87 	b.w	8015e90 <__ieee754_pow+0xc0>
 8016782:	4693      	mov	fp, r2
 8016784:	f7ff bb98 	b.w	8015eb8 <__ieee754_pow+0xe8>
 8016788:	00000000 	.word	0x00000000
 801678c:	3fe62e43 	.word	0x3fe62e43
 8016790:	fefa39ef 	.word	0xfefa39ef
 8016794:	3fe62e42 	.word	0x3fe62e42
 8016798:	0ca86c39 	.word	0x0ca86c39
 801679c:	be205c61 	.word	0xbe205c61
 80167a0:	72bea4d0 	.word	0x72bea4d0
 80167a4:	3e663769 	.word	0x3e663769
 80167a8:	c5d26bf1 	.word	0xc5d26bf1
 80167ac:	3ebbbd41 	.word	0x3ebbbd41
 80167b0:	af25de2c 	.word	0xaf25de2c
 80167b4:	3f11566a 	.word	0x3f11566a
 80167b8:	16bebd93 	.word	0x16bebd93
 80167bc:	3f66c16c 	.word	0x3f66c16c
 80167c0:	5555553e 	.word	0x5555553e
 80167c4:	3fc55555 	.word	0x3fc55555
 80167c8:	c2f8f359 	.word	0xc2f8f359
 80167cc:	01a56e1f 	.word	0x01a56e1f
 80167d0:	3fe00000 	.word	0x3fe00000
 80167d4:	000fffff 	.word	0x000fffff
 80167d8:	3ff00000 	.word	0x3ff00000
 80167dc:	4090cbff 	.word	0x4090cbff
 80167e0:	3f6f3400 	.word	0x3f6f3400
 80167e4:	652b82fe 	.word	0x652b82fe
 80167e8:	3c971547 	.word	0x3c971547

080167ec <__ieee754_sqrt>:
 80167ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167f0:	4955      	ldr	r1, [pc, #340]	; (8016948 <__ieee754_sqrt+0x15c>)
 80167f2:	ec55 4b10 	vmov	r4, r5, d0
 80167f6:	43a9      	bics	r1, r5
 80167f8:	462b      	mov	r3, r5
 80167fa:	462a      	mov	r2, r5
 80167fc:	d112      	bne.n	8016824 <__ieee754_sqrt+0x38>
 80167fe:	ee10 2a10 	vmov	r2, s0
 8016802:	ee10 0a10 	vmov	r0, s0
 8016806:	4629      	mov	r1, r5
 8016808:	f7e9 fe80 	bl	800050c <__aeabi_dmul>
 801680c:	4602      	mov	r2, r0
 801680e:	460b      	mov	r3, r1
 8016810:	4620      	mov	r0, r4
 8016812:	4629      	mov	r1, r5
 8016814:	f7e9 fcc4 	bl	80001a0 <__adddf3>
 8016818:	4604      	mov	r4, r0
 801681a:	460d      	mov	r5, r1
 801681c:	ec45 4b10 	vmov	d0, r4, r5
 8016820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016824:	2d00      	cmp	r5, #0
 8016826:	ee10 0a10 	vmov	r0, s0
 801682a:	4621      	mov	r1, r4
 801682c:	dc0f      	bgt.n	801684e <__ieee754_sqrt+0x62>
 801682e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016832:	4330      	orrs	r0, r6
 8016834:	d0f2      	beq.n	801681c <__ieee754_sqrt+0x30>
 8016836:	b155      	cbz	r5, 801684e <__ieee754_sqrt+0x62>
 8016838:	ee10 2a10 	vmov	r2, s0
 801683c:	4620      	mov	r0, r4
 801683e:	4629      	mov	r1, r5
 8016840:	f7e9 fcac 	bl	800019c <__aeabi_dsub>
 8016844:	4602      	mov	r2, r0
 8016846:	460b      	mov	r3, r1
 8016848:	f7e9 ff8a 	bl	8000760 <__aeabi_ddiv>
 801684c:	e7e4      	b.n	8016818 <__ieee754_sqrt+0x2c>
 801684e:	151b      	asrs	r3, r3, #20
 8016850:	d073      	beq.n	801693a <__ieee754_sqrt+0x14e>
 8016852:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016856:	07dd      	lsls	r5, r3, #31
 8016858:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801685c:	bf48      	it	mi
 801685e:	0fc8      	lsrmi	r0, r1, #31
 8016860:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016864:	bf44      	itt	mi
 8016866:	0049      	lslmi	r1, r1, #1
 8016868:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801686c:	2500      	movs	r5, #0
 801686e:	1058      	asrs	r0, r3, #1
 8016870:	0fcb      	lsrs	r3, r1, #31
 8016872:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016876:	0049      	lsls	r1, r1, #1
 8016878:	2316      	movs	r3, #22
 801687a:	462c      	mov	r4, r5
 801687c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016880:	19a7      	adds	r7, r4, r6
 8016882:	4297      	cmp	r7, r2
 8016884:	bfde      	ittt	le
 8016886:	19bc      	addle	r4, r7, r6
 8016888:	1bd2      	suble	r2, r2, r7
 801688a:	19ad      	addle	r5, r5, r6
 801688c:	0fcf      	lsrs	r7, r1, #31
 801688e:	3b01      	subs	r3, #1
 8016890:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8016894:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016898:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801689c:	d1f0      	bne.n	8016880 <__ieee754_sqrt+0x94>
 801689e:	f04f 0c20 	mov.w	ip, #32
 80168a2:	469e      	mov	lr, r3
 80168a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80168a8:	42a2      	cmp	r2, r4
 80168aa:	eb06 070e 	add.w	r7, r6, lr
 80168ae:	dc02      	bgt.n	80168b6 <__ieee754_sqrt+0xca>
 80168b0:	d112      	bne.n	80168d8 <__ieee754_sqrt+0xec>
 80168b2:	428f      	cmp	r7, r1
 80168b4:	d810      	bhi.n	80168d8 <__ieee754_sqrt+0xec>
 80168b6:	2f00      	cmp	r7, #0
 80168b8:	eb07 0e06 	add.w	lr, r7, r6
 80168bc:	da42      	bge.n	8016944 <__ieee754_sqrt+0x158>
 80168be:	f1be 0f00 	cmp.w	lr, #0
 80168c2:	db3f      	blt.n	8016944 <__ieee754_sqrt+0x158>
 80168c4:	f104 0801 	add.w	r8, r4, #1
 80168c8:	1b12      	subs	r2, r2, r4
 80168ca:	428f      	cmp	r7, r1
 80168cc:	bf88      	it	hi
 80168ce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80168d2:	1bc9      	subs	r1, r1, r7
 80168d4:	4433      	add	r3, r6
 80168d6:	4644      	mov	r4, r8
 80168d8:	0052      	lsls	r2, r2, #1
 80168da:	f1bc 0c01 	subs.w	ip, ip, #1
 80168de:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80168e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80168e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80168ea:	d1dd      	bne.n	80168a8 <__ieee754_sqrt+0xbc>
 80168ec:	430a      	orrs	r2, r1
 80168ee:	d006      	beq.n	80168fe <__ieee754_sqrt+0x112>
 80168f0:	1c5c      	adds	r4, r3, #1
 80168f2:	bf13      	iteet	ne
 80168f4:	3301      	addne	r3, #1
 80168f6:	3501      	addeq	r5, #1
 80168f8:	4663      	moveq	r3, ip
 80168fa:	f023 0301 	bicne.w	r3, r3, #1
 80168fe:	106a      	asrs	r2, r5, #1
 8016900:	085b      	lsrs	r3, r3, #1
 8016902:	07e9      	lsls	r1, r5, #31
 8016904:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016908:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801690c:	bf48      	it	mi
 801690e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016912:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8016916:	461c      	mov	r4, r3
 8016918:	e780      	b.n	801681c <__ieee754_sqrt+0x30>
 801691a:	0aca      	lsrs	r2, r1, #11
 801691c:	3815      	subs	r0, #21
 801691e:	0549      	lsls	r1, r1, #21
 8016920:	2a00      	cmp	r2, #0
 8016922:	d0fa      	beq.n	801691a <__ieee754_sqrt+0x12e>
 8016924:	02d6      	lsls	r6, r2, #11
 8016926:	d50a      	bpl.n	801693e <__ieee754_sqrt+0x152>
 8016928:	f1c3 0420 	rsb	r4, r3, #32
 801692c:	fa21 f404 	lsr.w	r4, r1, r4
 8016930:	1e5d      	subs	r5, r3, #1
 8016932:	4099      	lsls	r1, r3
 8016934:	4322      	orrs	r2, r4
 8016936:	1b43      	subs	r3, r0, r5
 8016938:	e78b      	b.n	8016852 <__ieee754_sqrt+0x66>
 801693a:	4618      	mov	r0, r3
 801693c:	e7f0      	b.n	8016920 <__ieee754_sqrt+0x134>
 801693e:	0052      	lsls	r2, r2, #1
 8016940:	3301      	adds	r3, #1
 8016942:	e7ef      	b.n	8016924 <__ieee754_sqrt+0x138>
 8016944:	46a0      	mov	r8, r4
 8016946:	e7bf      	b.n	80168c8 <__ieee754_sqrt+0xdc>
 8016948:	7ff00000 	.word	0x7ff00000

0801694c <fabs>:
 801694c:	ec51 0b10 	vmov	r0, r1, d0
 8016950:	ee10 2a10 	vmov	r2, s0
 8016954:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016958:	ec43 2b10 	vmov	d0, r2, r3
 801695c:	4770      	bx	lr

0801695e <finite>:
 801695e:	ee10 3a90 	vmov	r3, s1
 8016962:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8016966:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801696a:	0fc0      	lsrs	r0, r0, #31
 801696c:	4770      	bx	lr

0801696e <matherr>:
 801696e:	2000      	movs	r0, #0
 8016970:	4770      	bx	lr
 8016972:	0000      	movs	r0, r0
 8016974:	0000      	movs	r0, r0
	...

08016978 <nan>:
 8016978:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016980 <nan+0x8>
 801697c:	4770      	bx	lr
 801697e:	bf00      	nop
 8016980:	00000000 	.word	0x00000000
 8016984:	7ff80000 	.word	0x7ff80000

08016988 <rint>:
 8016988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801698a:	ec51 0b10 	vmov	r0, r1, d0
 801698e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016992:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8016996:	2e13      	cmp	r6, #19
 8016998:	460b      	mov	r3, r1
 801699a:	ee10 4a10 	vmov	r4, s0
 801699e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80169a2:	dc56      	bgt.n	8016a52 <rint+0xca>
 80169a4:	2e00      	cmp	r6, #0
 80169a6:	da2b      	bge.n	8016a00 <rint+0x78>
 80169a8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80169ac:	4302      	orrs	r2, r0
 80169ae:	d023      	beq.n	80169f8 <rint+0x70>
 80169b0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80169b4:	4302      	orrs	r2, r0
 80169b6:	4254      	negs	r4, r2
 80169b8:	4314      	orrs	r4, r2
 80169ba:	0c4b      	lsrs	r3, r1, #17
 80169bc:	0b24      	lsrs	r4, r4, #12
 80169be:	045b      	lsls	r3, r3, #17
 80169c0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80169c4:	ea44 0103 	orr.w	r1, r4, r3
 80169c8:	460b      	mov	r3, r1
 80169ca:	492f      	ldr	r1, [pc, #188]	; (8016a88 <rint+0x100>)
 80169cc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80169d0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80169d4:	4602      	mov	r2, r0
 80169d6:	4639      	mov	r1, r7
 80169d8:	4630      	mov	r0, r6
 80169da:	f7e9 fbe1 	bl	80001a0 <__adddf3>
 80169de:	e9cd 0100 	strd	r0, r1, [sp]
 80169e2:	463b      	mov	r3, r7
 80169e4:	4632      	mov	r2, r6
 80169e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169ea:	f7e9 fbd7 	bl	800019c <__aeabi_dsub>
 80169ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80169f2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80169f6:	4639      	mov	r1, r7
 80169f8:	ec41 0b10 	vmov	d0, r0, r1
 80169fc:	b003      	add	sp, #12
 80169fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a00:	4a22      	ldr	r2, [pc, #136]	; (8016a8c <rint+0x104>)
 8016a02:	4132      	asrs	r2, r6
 8016a04:	ea01 0702 	and.w	r7, r1, r2
 8016a08:	4307      	orrs	r7, r0
 8016a0a:	d0f5      	beq.n	80169f8 <rint+0x70>
 8016a0c:	0852      	lsrs	r2, r2, #1
 8016a0e:	4011      	ands	r1, r2
 8016a10:	430c      	orrs	r4, r1
 8016a12:	d00b      	beq.n	8016a2c <rint+0xa4>
 8016a14:	ea23 0202 	bic.w	r2, r3, r2
 8016a18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016a1c:	2e13      	cmp	r6, #19
 8016a1e:	fa43 f306 	asr.w	r3, r3, r6
 8016a22:	bf0c      	ite	eq
 8016a24:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8016a28:	2400      	movne	r4, #0
 8016a2a:	4313      	orrs	r3, r2
 8016a2c:	4916      	ldr	r1, [pc, #88]	; (8016a88 <rint+0x100>)
 8016a2e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8016a32:	4622      	mov	r2, r4
 8016a34:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016a38:	4620      	mov	r0, r4
 8016a3a:	4629      	mov	r1, r5
 8016a3c:	f7e9 fbb0 	bl	80001a0 <__adddf3>
 8016a40:	e9cd 0100 	strd	r0, r1, [sp]
 8016a44:	4622      	mov	r2, r4
 8016a46:	462b      	mov	r3, r5
 8016a48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a4c:	f7e9 fba6 	bl	800019c <__aeabi_dsub>
 8016a50:	e7d2      	b.n	80169f8 <rint+0x70>
 8016a52:	2e33      	cmp	r6, #51	; 0x33
 8016a54:	dd07      	ble.n	8016a66 <rint+0xde>
 8016a56:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016a5a:	d1cd      	bne.n	80169f8 <rint+0x70>
 8016a5c:	ee10 2a10 	vmov	r2, s0
 8016a60:	f7e9 fb9e 	bl	80001a0 <__adddf3>
 8016a64:	e7c8      	b.n	80169f8 <rint+0x70>
 8016a66:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8016a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8016a6e:	40f2      	lsrs	r2, r6
 8016a70:	4210      	tst	r0, r2
 8016a72:	d0c1      	beq.n	80169f8 <rint+0x70>
 8016a74:	0852      	lsrs	r2, r2, #1
 8016a76:	4210      	tst	r0, r2
 8016a78:	bf1f      	itttt	ne
 8016a7a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8016a7e:	ea20 0202 	bicne.w	r2, r0, r2
 8016a82:	4134      	asrne	r4, r6
 8016a84:	4314      	orrne	r4, r2
 8016a86:	e7d1      	b.n	8016a2c <rint+0xa4>
 8016a88:	080171b8 	.word	0x080171b8
 8016a8c:	000fffff 	.word	0x000fffff

08016a90 <scalbn>:
 8016a90:	b570      	push	{r4, r5, r6, lr}
 8016a92:	ec55 4b10 	vmov	r4, r5, d0
 8016a96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016a9a:	4606      	mov	r6, r0
 8016a9c:	462b      	mov	r3, r5
 8016a9e:	b9aa      	cbnz	r2, 8016acc <scalbn+0x3c>
 8016aa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016aa4:	4323      	orrs	r3, r4
 8016aa6:	d03b      	beq.n	8016b20 <scalbn+0x90>
 8016aa8:	4b31      	ldr	r3, [pc, #196]	; (8016b70 <scalbn+0xe0>)
 8016aaa:	4629      	mov	r1, r5
 8016aac:	2200      	movs	r2, #0
 8016aae:	ee10 0a10 	vmov	r0, s0
 8016ab2:	f7e9 fd2b 	bl	800050c <__aeabi_dmul>
 8016ab6:	4b2f      	ldr	r3, [pc, #188]	; (8016b74 <scalbn+0xe4>)
 8016ab8:	429e      	cmp	r6, r3
 8016aba:	4604      	mov	r4, r0
 8016abc:	460d      	mov	r5, r1
 8016abe:	da12      	bge.n	8016ae6 <scalbn+0x56>
 8016ac0:	a327      	add	r3, pc, #156	; (adr r3, 8016b60 <scalbn+0xd0>)
 8016ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ac6:	f7e9 fd21 	bl	800050c <__aeabi_dmul>
 8016aca:	e009      	b.n	8016ae0 <scalbn+0x50>
 8016acc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016ad0:	428a      	cmp	r2, r1
 8016ad2:	d10c      	bne.n	8016aee <scalbn+0x5e>
 8016ad4:	ee10 2a10 	vmov	r2, s0
 8016ad8:	4620      	mov	r0, r4
 8016ada:	4629      	mov	r1, r5
 8016adc:	f7e9 fb60 	bl	80001a0 <__adddf3>
 8016ae0:	4604      	mov	r4, r0
 8016ae2:	460d      	mov	r5, r1
 8016ae4:	e01c      	b.n	8016b20 <scalbn+0x90>
 8016ae6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016aea:	460b      	mov	r3, r1
 8016aec:	3a36      	subs	r2, #54	; 0x36
 8016aee:	4432      	add	r2, r6
 8016af0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016af4:	428a      	cmp	r2, r1
 8016af6:	dd0b      	ble.n	8016b10 <scalbn+0x80>
 8016af8:	ec45 4b11 	vmov	d1, r4, r5
 8016afc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8016b68 <scalbn+0xd8>
 8016b00:	f000 f83c 	bl	8016b7c <copysign>
 8016b04:	a318      	add	r3, pc, #96	; (adr r3, 8016b68 <scalbn+0xd8>)
 8016b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b0a:	ec51 0b10 	vmov	r0, r1, d0
 8016b0e:	e7da      	b.n	8016ac6 <scalbn+0x36>
 8016b10:	2a00      	cmp	r2, #0
 8016b12:	dd08      	ble.n	8016b26 <scalbn+0x96>
 8016b14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016b18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016b1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016b20:	ec45 4b10 	vmov	d0, r4, r5
 8016b24:	bd70      	pop	{r4, r5, r6, pc}
 8016b26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016b2a:	da0d      	bge.n	8016b48 <scalbn+0xb8>
 8016b2c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016b30:	429e      	cmp	r6, r3
 8016b32:	ec45 4b11 	vmov	d1, r4, r5
 8016b36:	dce1      	bgt.n	8016afc <scalbn+0x6c>
 8016b38:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8016b60 <scalbn+0xd0>
 8016b3c:	f000 f81e 	bl	8016b7c <copysign>
 8016b40:	a307      	add	r3, pc, #28	; (adr r3, 8016b60 <scalbn+0xd0>)
 8016b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b46:	e7e0      	b.n	8016b0a <scalbn+0x7a>
 8016b48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016b4c:	3236      	adds	r2, #54	; 0x36
 8016b4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016b52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016b56:	4620      	mov	r0, r4
 8016b58:	4629      	mov	r1, r5
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	4b06      	ldr	r3, [pc, #24]	; (8016b78 <scalbn+0xe8>)
 8016b5e:	e7b2      	b.n	8016ac6 <scalbn+0x36>
 8016b60:	c2f8f359 	.word	0xc2f8f359
 8016b64:	01a56e1f 	.word	0x01a56e1f
 8016b68:	8800759c 	.word	0x8800759c
 8016b6c:	7e37e43c 	.word	0x7e37e43c
 8016b70:	43500000 	.word	0x43500000
 8016b74:	ffff3cb0 	.word	0xffff3cb0
 8016b78:	3c900000 	.word	0x3c900000

08016b7c <copysign>:
 8016b7c:	ec51 0b10 	vmov	r0, r1, d0
 8016b80:	ee11 0a90 	vmov	r0, s3
 8016b84:	ee10 2a10 	vmov	r2, s0
 8016b88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8016b8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8016b90:	ea41 0300 	orr.w	r3, r1, r0
 8016b94:	ec43 2b10 	vmov	d0, r2, r3
 8016b98:	4770      	bx	lr
	...

08016b9c <__errno>:
 8016b9c:	4b01      	ldr	r3, [pc, #4]	; (8016ba4 <__errno+0x8>)
 8016b9e:	6818      	ldr	r0, [r3, #0]
 8016ba0:	4770      	bx	lr
 8016ba2:	bf00      	nop
 8016ba4:	200001e8 	.word	0x200001e8

08016ba8 <__libc_init_array>:
 8016ba8:	b570      	push	{r4, r5, r6, lr}
 8016baa:	4e0d      	ldr	r6, [pc, #52]	; (8016be0 <__libc_init_array+0x38>)
 8016bac:	4c0d      	ldr	r4, [pc, #52]	; (8016be4 <__libc_init_array+0x3c>)
 8016bae:	1ba4      	subs	r4, r4, r6
 8016bb0:	10a4      	asrs	r4, r4, #2
 8016bb2:	2500      	movs	r5, #0
 8016bb4:	42a5      	cmp	r5, r4
 8016bb6:	d109      	bne.n	8016bcc <__libc_init_array+0x24>
 8016bb8:	4e0b      	ldr	r6, [pc, #44]	; (8016be8 <__libc_init_array+0x40>)
 8016bba:	4c0c      	ldr	r4, [pc, #48]	; (8016bec <__libc_init_array+0x44>)
 8016bbc:	f000 f82c 	bl	8016c18 <_init>
 8016bc0:	1ba4      	subs	r4, r4, r6
 8016bc2:	10a4      	asrs	r4, r4, #2
 8016bc4:	2500      	movs	r5, #0
 8016bc6:	42a5      	cmp	r5, r4
 8016bc8:	d105      	bne.n	8016bd6 <__libc_init_array+0x2e>
 8016bca:	bd70      	pop	{r4, r5, r6, pc}
 8016bcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016bd0:	4798      	blx	r3
 8016bd2:	3501      	adds	r5, #1
 8016bd4:	e7ee      	b.n	8016bb4 <__libc_init_array+0xc>
 8016bd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016bda:	4798      	blx	r3
 8016bdc:	3501      	adds	r5, #1
 8016bde:	e7f2      	b.n	8016bc6 <__libc_init_array+0x1e>
 8016be0:	08017228 	.word	0x08017228
 8016be4:	08017228 	.word	0x08017228
 8016be8:	08017228 	.word	0x08017228
 8016bec:	0801722c 	.word	0x0801722c

08016bf0 <memcpy>:
 8016bf0:	b510      	push	{r4, lr}
 8016bf2:	1e43      	subs	r3, r0, #1
 8016bf4:	440a      	add	r2, r1
 8016bf6:	4291      	cmp	r1, r2
 8016bf8:	d100      	bne.n	8016bfc <memcpy+0xc>
 8016bfa:	bd10      	pop	{r4, pc}
 8016bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016c00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016c04:	e7f7      	b.n	8016bf6 <memcpy+0x6>

08016c06 <memset>:
 8016c06:	4402      	add	r2, r0
 8016c08:	4603      	mov	r3, r0
 8016c0a:	4293      	cmp	r3, r2
 8016c0c:	d100      	bne.n	8016c10 <memset+0xa>
 8016c0e:	4770      	bx	lr
 8016c10:	f803 1b01 	strb.w	r1, [r3], #1
 8016c14:	e7f9      	b.n	8016c0a <memset+0x4>
	...

08016c18 <_init>:
 8016c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c1a:	bf00      	nop
 8016c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c1e:	bc08      	pop	{r3}
 8016c20:	469e      	mov	lr, r3
 8016c22:	4770      	bx	lr

08016c24 <_fini>:
 8016c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c26:	bf00      	nop
 8016c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c2a:	bc08      	pop	{r3}
 8016c2c:	469e      	mov	lr, r3
 8016c2e:	4770      	bx	lr
